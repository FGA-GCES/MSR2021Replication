Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate
20797976,2,,20797828,2013-12-27T09:20:09,,0,,"<p>It is unlikely you will be able to just do this with Node-Webkit. Especially since the official webkit does not support AVI. Your best bet is to use an external application like libav (avplay) or use node to serve a webpage that has a player capable of playing the content and just let the users browser do the work. (Flash is likely still the best way to go, <a href=""http://www.videojs.com/"" rel=""nofollow"">video.js</a> is a good choice)</p>&#xA;&#xA;<p>The alternative is to convert the video to one of the <a href=""http://www.w3schools.com/html/html5_video.asp"" rel=""nofollow"">supported formats</a>. I would recommend mp4. (Once again libav (avconv) comes in handy here.) This still assumes that Node-Webkit has implemented full HTML5 support. (I am not sure what they have completed but I am guessing it supports the video element)</p>&#xA;",986971,"",,"",,2013-12-27T09:20:09,"","",,4,,,
16031993,2,,16029897,2013-04-16T08:17:39,,1,,"<pre><code>var appDir = ""/home/user/p1"";&#xA;</code></pre>&#xA;&#xA;<p>You don't have local access to files anyway, what is the point of this line?&#xA;The appDir option is for the case that all your code in within a subfolder below your index.js. In this case you don't need it.</p>&#xA;&#xA;<pre><code>files: ""files_"",&#xA;</code></pre>&#xA;&#xA;<p>This makes no sense as well. The paths object contains only module paths, not folder paths.</p>&#xA;&#xA;<p>The options are <a href=""http://www.requirejs.org/docs/api.html#config"" rel=""nofollow"">documented here</a>.</p>&#xA;",941764,"",,"",,2013-04-16T08:17:39,"","",,0,,,
29546729,2,,29546728,2015-04-09T18:57:56,,0,,"<p>The file names coming from the server had <code>:</code>s in them, which is a valid filename character on Linux <code>ext4</code>, but not on Windows <code>ntfs</code>.</p>&#xA;&#xA;<p>Changing</p>&#xA;&#xA;<pre><code>var name = regexp.exec(content_disposition)[1];&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>var name = regexp.exec(content_disposition)[1].replace(':', '-');&#xA;</code></pre>&#xA;&#xA;<p>solved this particular problem.</p>&#xA;",829970,"",829970,"",2016-04-18T15:19:14,2016-04-18T15:19:14,"","",,0,,,
29552654,2,,29493091,2015-04-10T03:05:29,,0,,"<p>Yep, just use any node.js logging framework. We use Winston in our app.</p>&#xA;",5728,"",,"",,2015-04-10T03:05:29,"","",,2,,,
29603888,2,,28631156,2015-04-13T11:10:08,,0,,<p>Solution: I was using nw version 0.12.0. When I downgraded to 0.11.6 it works.</p>&#xA;,3264196,"",,"",,2015-04-13T11:10:08,"","",,0,,,
29608142,2,,26800822,2015-04-13T14:40:27,,0,,"<p>After fighting with my own thoughts in my head, and asking a question on meta StackOverflow, I have decided to post this as an answer. :) If anyone has a better answer, I will accept it.</p>&#xA;&#xA;<p>According to here: <a href=""https://github.com/nwjs/nw.js/issues/2571"" rel=""nofollow"">https://github.com/nwjs/nw.js/issues/2571</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Note - this seems to work fine in 0.8.6. Also - looks like it worked earlier in 0.12 alpha but may have been broken when #2961 was fixed</p>&#xA;  &#xA;  <p>-chafey</p>&#xA;</blockquote>&#xA;&#xA;<p>This feature is broken. We should look forward for an update (not likely). The end. :)</p>&#xA;&#xA;<hr>&#xA;&#xA;<h2>Update:</h2>&#xA;&#xA;<p>I forgot to mention how I overcame this problem. I simply used node.js.</p>&#xA;",1993909,"",1993909,"",2016-02-11T11:00:24,2016-02-11T11:00:24,"","",,0,,,
29534286,2,,29533994,2015-04-09T09:09:01,,1,,"<p>Checkout this: <a href=""https://github.com/nwjs/nw.js/wiki/App#datapath"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/App#datapath</a></p>&#xA;&#xA;<p>This is common folder for application data. With <code>gui.App.dataPath</code> you always know where is this folder.</p>&#xA;&#xA;<p>If you need get know where is your executable lives, try:</p>&#xA;&#xA;<pre><code>var path = require('path');&#xA;var nwPath = process.execPath;&#xA;var nwDir = path.dirname(nwPath);&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/nwjs/nw.js/issues/1197"" rel=""nofollow"">https://github.com/nwjs/nw.js/issues/1197</a></p>&#xA;",1005200,"",1005200,"",2015-04-09T09:26:06,2015-04-09T09:26:06,"","",,1,,,
29612372,2,,28853289,2015-04-13T18:22:43,,2,,"<p>First Create a window. And on tray click have this window appear over there. </p>&#xA;&#xA;<pre><code>var gui = require('nw.gui');&#xA;var tray = new gui.Tray({&#xA;    title: '',&#xA;    icon: 'assets/css/images/menu_icon.png',&#xA;    alticon: 'assets/css/images/menu_alticon.png',&#xA;    iconsAreTemplates: false&#xA;});&#xA;&#xA;//Then need create hidden window and show it on click in tray:&#xA;&#xA;// create window&#xA;&#xA;var params = {toolbar: app.devMode, frame: false, transparent: true, resizable: false, show: false};&#xA;window = gui.Window.open('templates/panel.html', params);&#xA;&#xA;function showPopup (x, y) {&#xA;  window.on('document-end', function(){&#xA;    window.moveTo(x - (window.window.width / 2) - 6, y);&#xA;    window.show();&#xA;    window.focus();&#xA;  });&#xA;}&#xA;&#xA;// show panel when click in tray&#xA;tray.on('click', function (evt) {&#xA;  showPopup(evt.x, evt.y);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Hope this works!</p>&#xA;&#xA;<p>Ref: <a href=""https://stackoverflow.com/questions/28768476/create-window-like-menu-on-os-x"">Create window-like menu on OS X</a></p>&#xA;",1697094,"",-1,"",2017-05-23T12:13:42,2015-04-13T19:08:52,"","",,0,,,
17832111,2,,15628966,2013-07-24T11:03:07,,3,,"<p>try to edit package.json  as follow:</p>&#xA;&#xA;<pre><code>{&#xA;    ""name"": ""name"",&#xA;    ""description"": ""description"",&#xA;    ""version"": ""0.1"",&#xA;    ""main"": ""https://path-to-intranet-site/"",&#xA;    ""node-remote"": ""https://path-to-intranet-site"",&#xA;    ""webkit"": {&#xA;         ""page-cache"":false&#xA;    },&#xA;    ""window"": {&#xA;        ""show"": true,&#xA;        ""toolbar"": true,&#xA;        ""frame"": true,&#xA;        ""position"": ""center"",&#xA;        ""width"": 800,&#xA;        ""height"": 600,&#xA;        ""min_width"": 220,&#xA;        ""min_height"": 220&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",2614287,"",509484,"",2013-07-24T11:25:43,2013-07-24T11:25:43,"","",,0,,,
34485795,2,,34484096,2015-12-27T23:02:32,,0,,<p>Those errors mean that you haven't installed the corresponding modules. Run <code>npm install --save alt react-router</code>.</p>&#xA;,10141,"",,"",,2015-12-27T23:02:32,"","",,0,,,
34490156,2,,34489920,2015-12-28T08:35:25,,1,,"<p><strong>callback</strong> is simple function that is invoked when some works is complete, in javascript you can pass it in variable, so in your async/worker function you have to invoke callback function (like <code>callback(result)</code>) once it finishes the job. </p>&#xA;&#xA;<p>so your code should be </p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>function catchDataFromDB(db, tableName, callBack) {&#xD;&#xA;  var sqlStr = 'SELECT * FROM ' + tableName;&#xD;&#xA;  db.transaction(function(t) {&#xD;&#xA;      // Query out the data&#xD;&#xA;      t.executeSql(sqlStr, [], function(t, SQLResultSet) {&#xD;&#xA;        var len = SQLResultSet.rows.length,&#xD;&#xA;          row;&#xD;&#xA;        for (var i = 0; i &lt; len; i++) {&#xD;&#xA;          row = SQLResultSet.rows.item(i);&#xD;&#xA;          sqlData.push(row);&#xD;&#xA;        }&#xD;&#xA;        callBack(null, sqlData);&#xD;&#xA;      });&#xD;&#xA;    },&#xD;&#xA;    function(SQLError) {&#xD;&#xA;      callBack(SQLError.message);&#xD;&#xA;    });&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>by convention callback's first argument should be error (if you have any), the rest of arguments are results<br>&#xA;<code>callback(null, result1, result2,...)</code> // when you have no error just result<br>&#xA;<code>callback(error)</code> // when you have error and no result</p>&#xA;",1115340,"",,"",,2015-12-28T08:35:25,"","",,4,,,
34563838,2,,34563370,2016-01-02T07:55:40,,1,,"<p>Why wouldn't you be able to make a rest endpoint for this? Just cache the result for each scraping operation, and the return the cache on the http-endpoint.</p>&#xA;&#xA;<pre><code>var cache={};&#xA;&#xA;app.get('/myendpoint', function(req, res) {&#xA;    res.json(cache);&#xA;})&#xA;&#xA;request(url, function(error, response, html){&#xA;    ...&#xA;    setTimeout(function () {&#xA;        ...&#xA;            console.log(result);&#xA;            //set cache here&#xA;            cache=result;&#xA;            browser.exit();&#xA;        });&#xA;   }, 5000);&#xA;});&#xA;&#xA;app.listen(1338);&#xA;</code></pre>&#xA;&#xA;<p>If you want to cache to update, wrap the scarping function in a setInterval.</p>&#xA;&#xA;<pre><code>var cache={};&#xA;&#xA;app.get('/myendpoint', function(req, res) {&#xA;    res.json(cache);&#xA;})&#xA;&#xA;function updateCache() {&#xA;    request(url, function(error, response, html){&#xA;        ...&#xA;        setTimeout(function () {&#xA;            ...&#xA;                console.log(result);&#xA;                //set cache here&#xA;                cache=result;&#xA;                browser.exit();&#xA;            });&#xA;       }, 5000);&#xA;    });&#xA;}&#xA;&#xA;//Update cache every 60 secs.&#xA;setInterval(updateCache, 60000);&#xA;&#xA;app.listen(1338);&#xA;</code></pre>&#xA;",1960776,"",1960776,"",2016-01-02T08:05:04,2016-01-02T08:05:04,"","",,0,,,
34599940,2,,34518556,2016-01-04T21:12:39,,1,,<p>I managed to get a hold of the correct require from the mainModule like so.</p>&#xA;&#xA;<p><code>process.mainModule.require('os')</code></p>&#xA;,1148118,"",,"",,2016-01-04T21:12:39,"","",,0,,,
34611417,2,,34611111,2016-01-05T12:12:39,,1,,"<p>So first things first, I want to ensure that you are writing a secure application.</p>&#xA;&#xA;<p>The problem with using NW.js for loading webpages is that the browser context has access to the nodejs api, enabling malicious code on a webpage loaded by NW.js full access to the NW.js client's host machine, including filesystem and code execution.</p>&#xA;&#xA;<p>The solution to this is to create either an iframe with the <code>nwdisable</code> attribute, or the newish webview element, and use that as the user's ""browser"".</p>&#xA;&#xA;<p>Once you have that, you can inject javascript into the frame with:</p>&#xA;&#xA;<pre><code> Window.eval(frame, script)&#xA;</code></pre>&#xA;&#xA;<p>For documentation on <code>Window.eval</code>:</p>&#xA;&#xA;<p><a href=""https://github.com/nwjs/nw.js/wiki/Window#windowevalframe-script"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/Window#windowevalframe-script</a></p>&#xA;&#xA;<p>For notes on security and using iframe/webview with nwdisable:</p>&#xA;&#xA;<p><a href=""http://docs.nwjs.io/en/latest/For%20Users/Advanced/Security%20in%20NW.js/"" rel=""nofollow"">http://docs.nwjs.io/en/latest/For%20Users/Advanced/Security%20in%20NW.js/</a></p>&#xA;",3716001,"",,"",,2016-01-05T12:12:39,"","",,3,,,
34575174,2,,34568942,2016-01-03T09:45:24,,3,,"<p>There are many ways to do that. At all you didn't give any information about when you want to load the dynamic content. I guess that it is a click on a link. </p>&#xA;&#xA;<p>The solution is not different, when you would do that with a normal webpage.</p>&#xA;&#xA;<p>Just to give you a hint:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://stackoverflow.com/questions/4986967/loading-an-html-file-into-a-div-with-a-link"">Loading an HTML file into a DIV with a link</a></li>&#xA;<li><a href=""https://stackoverflow.com/questions/17636528/how-do-i-load-an-html-page-in-a-div-using-javascript"">How do I load an HTML page in a &lt;div&gt; using JavaScript?</a></li>&#xA;<li>You can also solve it with jQuery <a href=""http://api.jquery.com/load/"" rel=""nofollow noreferrer"">http://api.jquery.com/load/</a></li>&#xA;<li>Or <a href=""https://angularjs.org/"" rel=""nofollow noreferrer"">angular</a> also gives you a possibility to do that.</li>&#xA;</ul>&#xA;",5291427,"",2263631,"",2019-02-13T00:05:04,2019-02-13T00:05:04,"","",,0,,,
34482293,2,,34472046,2015-12-27T16:18:11,,4,,"<p>Given your error:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Uncaught Exception: ReferenceError: document is not defined at query </p>&#xA;</blockquote>&#xA;&#xA;<p>I would assume you're trying to use Vue inside of the <em>Main Process</em>, which unfortunately Vue wont be able to do without something like <a href=""https://github.com/tmpvar/jsdom"" rel=""nofollow noreferrer"">jsdom</a>, since Vue depends on the <code>document</code>, and the main process doesn't have a <code>document</code>.</p>&#xA;&#xA;<p>But, I assume the issue starts more fundamentally. You're probably wanting to use Vue from a <em>Render Process</em>, since that's where the <code>document</code> can be accessed. </p>&#xA;&#xA;<p>Essentially, the main process in Electron is like the all-mighty controller, it is where you spawn and manage render processes.  It doesn't reference to any singular DOM because no DOM exists in the main process.  Instead, consider render processes, render processes are things like <a href=""https://github.com/atom/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer""><code>BrowserWindow</code></a>, which can have a DOM.</p>&#xA;&#xA;<p>So, with that information, we could try something like this:</p>&#xA;&#xA;<p><code>main.js</code>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// import { app, BrowserWindow } from 'electron';&#xA;var electron = require('electron'),&#xA;    app = electron.app,&#xA;    BrowserWindow = electron.BrowserWindow;&#xA;&#xA;app.on('ready', function() {&#xA;  var main = new BrowserWindow({ /* ... */ });&#xA;  main.loadURL('file://' + __dirname + '/index.html');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then, from your render process:</p>&#xA;&#xA;<p><code>index.html</code>:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;meta charset=""utf-8""&gt;&#xA;    &lt;title&gt;Example&lt;/title&gt;&#xA;    &lt;script&gt;&#xA;    var Vue = require('vue');&#xA;&#xA;    new Vue({&#xA;        el: ""#app"",&#xA;        data: {&#xA;            collections: [&#xA;                {""name"": ""test 1""},&#xA;                {""name"": ""test 2""},&#xA;                {""name"": ""test 3""}&#xA;            ]&#xA;        }&#xA;    });&#xA;    &lt;/script&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body id='app'&gt;&#xA;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Of course you can reorganize the files however you want to, just remember to use Vue inside of the render process instead of the main process.</p>&#xA;&#xA;<h2>Edit 11/4/2016</h2>&#xA;&#xA;<p>Vue has <a href=""https://vuejs.org/v2/guide/ssr.html"" rel=""nofollow noreferrer"">server side rendering</a> now too which you might want to look at.</p>&#xA;",,user3117575,,user3117575,2016-11-05T04:31:09,2016-11-05T04:31:09,"","",,0,,,
34592691,2,,34561484,2016-01-04T13:52:10,,4,,"<p>You can use jQuery. However, I urge you to move away from it and start realizing how powerful and similar vanilla JS, can be, making a stronger, lighter web app.</p>&#xA;&#xA;<p>You can do this:</p>&#xA;&#xA;<pre><code>document.getElementById('player').click();&#xA;</code></pre>&#xA;&#xA;<p>Keep in mind that anything you can do in a browser, you can also do in Electron!</p>&#xA;",5699135,"",,"",,2016-01-04T13:52:10,"","",,0,,,
34638319,2,,34608763,2016-01-06T16:48:05,,4,,"<p>There was a slight difference between the way how the SQLite queries operate, mainly those that change the state (Update, new...) of the db.</p>&#xA;&#xA;<p>After some research I have found a great <a href=""http://docs.sequelizejs.com/en/latest/"" rel=""nofollow"">ORM tool</a>, that I implemented in the project, and now my code is totally agnostic regarding the DB 'dialect'.</p>&#xA;&#xA;<p>Hopefully this might help someone as well. </p>&#xA;",769599,"",,"",,2016-01-06T16:48:05,"","",,0,,,
34657540,2,,34643258,2016-01-07T14:24:25,,4,,"<p><strong>Solved</strong> the problem after 10h searching.&#xA;Problem was the webpack-transcoder.</p>&#xA;&#xA;<p><a href=""https://github.com/chentsulin/webpack-target-electron-renderer"" rel=""nofollow"">https://github.com/chentsulin/webpack-target-electron-renderer</a></p>&#xA;&#xA;<p><a href=""https://github.com/chentsulin/electron-react-boilerplate/blob/master/webpack.config.development.js"" rel=""nofollow"">https://github.com/chentsulin/electron-react-boilerplate/blob/master/webpack.config.development.js</a></p>&#xA;",5754444,"",,"",,2016-01-07T14:24:25,"","",,2,,,
34638267,2,,34598198,2016-01-06T16:44:21,,-1,,"<p>The code for the menu should not be here. &#xA;The remote module is to be used on the ""front"".</p>&#xA;&#xA;<p>An electron app is divided between the main process ran with node.js (your index.js script) and the html and js of your front app.</p>&#xA;&#xA;<p>In this example, the remote module should be called in a script linked to your index.html file.</p>&#xA;",2403230,"",,"",,2016-01-06T16:44:21,"","",,2,,,
26890040,2,,26889643,2014-11-12T15:03:55,,0,,"<p>The AGPL license do not apply to the soft who communicate whith the one under that license, in the case of database typically.<a href=""http://www.gnu.org/licenses/agpl.html"" rel=""nofollow"">[agpl]</a></p>&#xA;&#xA;<p>For example <a href=""https://pypi.python.org/pypi/pymongo/"" rel=""nofollow"">pymongo is under the apache license</a>.</p>&#xA;",4223749,"",,"",,2014-11-12T15:03:55,"","",,2,,,
27024895,2,,24427113,2014-11-19T19:04:03,,0,,"<p>I am currently playing around with this. It appears that node webkit crashes if you close the last window.</p>&#xA;&#xA;<p>Solution: quit the app with <strong>gui.Window.get().close();</strong></p>&#xA;&#xA;<pre><code>menu.items[0].submenu.append(new gui.MenuItem({&#xA;    label: 'Close',&#xA;    click: function () {&#xA;        gui.Window.get().close();&#xA;    }&#xA;}));&#xA;</code></pre>&#xA;",2092206,"",,"",,2014-11-19T19:04:03,"","",,0,,,
26880087,2,,26804959,2014-11-12T05:45:05,,1,,"<p>You shouldn't have to build your node-webkit app to test it.  If you use the node-webkit application on the command line and pass the root directory of your app (containing package.json) then it should start up as though you built it.  If you also leave toolbar true (i.e. <code>""toolbar"": true</code> under <code>window</code> in <code>package.json</code>) then you'll have a URL bar including a reload button, so you could just hit that when you want to restart.</p>&#xA;&#xA;<p>On Windows or Linux, if you're in the root directory on the command line, with <code>nw</code> in your path, it would look like this:</p>&#xA;&#xA;<pre><code>nw .&#xA;</code></pre>&#xA;&#xA;<p>On a Mac, you'd need to put <code>nodewebkit</code> in your path, which is buried in the node-webkit.app, for example you could do this:</p>&#xA;&#xA;<pre><code>alias nw='node-webkit.app/Contents/MacOS/node-webkit'&#xA;</code></pre>&#xA;&#xA;<p>though you'd probably want to prefix it with the full path to node-webkit.app</p>&#xA;&#xA;<p>There's probably a way to do live reload, but I'm not sure how best to approach that offhand.</p>&#xA;",3476918,"",,"",,2014-11-12T05:45:05,"","",,1,,,
26937831,2,,26920834,2014-11-14T19:54:36,,1,,"<p>Actually, this code works. I just didn't built full app, I tested it trough sublime build for node-webkit. Preforming full build with grunt solved every <code>spawn</code> issues.</p>&#xA;",2278346,"",,"",,2014-11-14T19:54:36,"","",,0,,,
26880475,2,,26750996,2014-11-12T06:14:21,,3,,"<p>You seem to be doing this on a Mac, so I'll cover that.  Windows and Linux are slightly more complicated because they don't have App Bundles the way Mac OSX does.&#xA;Are you copying your app.nw to the right place?  Are you sure you're including everything in app.nw?</p>&#xA;&#xA;<p>Is this what you're doing?:</p>&#xA;&#xA;<p>First you need to create <code>app.nw</code>, which is just a zip file of your entire project.  If you go to your project dir (the one containing package.json) you can do this by typing</p>&#xA;&#xA;<pre><code>zip -r ../app.nw .&#xA;</code></pre>&#xA;&#xA;<p>Now create a copy of node-webkit.app and copy app.nw into <code>node-webkit.app/Contents/Resources/</code></p>&#xA;&#xA;<pre><code>cp app.nw node-webkit.app/Contents/Resources/&#xA;</code></pre>&#xA;&#xA;<p>You should be able to run node-webkit.app now and it should run your app.  (You might have some issues with security settings and such)</p>&#xA;&#xA;<p>See <a href=""https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps#mac-os-x"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps#mac-os-x</a> for further details.</p>&#xA;",3476918,"",,"",,2014-11-12T06:14:21,"","",,5,,,
26997197,2,,26992562,2014-11-18T14:53:29,,6,,"<p>Put <a href=""https://github.com/rogerwang/node-webkit/wiki/Manifest-format#single-instance""><code>""single-instance"": false</code></a> in your <code>package.json</code>.</p>&#xA;",23109,"",,"",,2014-11-18T14:53:29,"","",,1,,,
27332152,2,,27332026,2014-12-06T13:22:57,,0,,"<p>Depends a bit on where the executable is.  But basically you'll just read that file and write it to the response stream.  This is most efficiently done by piping the file stream into the response stream. Something like this:</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;var filePath = 'path/to/your/file.exe';&#xA;var stat = fs.statSync(filePath);&#xA;&#xA;response.writeHead(200, {&#xA;    'Content-Type': 'application/exe',&#xA;    'Content-Length': stat.size&#xA;});&#xA;&#xA;var readStream = fs.createReadStream(filePath);&#xA;readStream.pipe(response);&#xA;</code></pre>&#xA;&#xA;<p>It should be noted that many systems will block your exe from being run after downloading it from the web, so this might not be the best distribution model for you.</p>&#xA;",53788,"",,"",,2014-12-06T13:22:57,"","",,5,,,
27379221,2,,27120815,2014-12-09T12:41:22,,0,,"<p>It is because I am using node-v0.10.33,it is only compatible with node-webkit v0.8</p>&#xA;",2822466,"",,"",,2014-12-09T12:41:22,"","",,0,,,
27456581,2,,27424662,2014-12-13T07:26:59,,0,,"<p><code>Window.requestAttention(Boolean attention)</code> is what I was looking for.<br>&#xA;It worked for me.&#xA;Thanks to <a href=""https://stackoverflow.com/users/597441/dhiraj-bodicherla"">Dhiraj</a>, It gave me an additional feature for icon.</p>&#xA;",1355500,"",-1,"",2017-05-23T12:12:49,2014-12-13T07:26:59,"","",,0,,,
27345781,2,,27330117,2014-12-07T17:51:17,,1,,"<p>Atom Shell can't do this natively, you'd have to write a native node module to do this, then include it in your project</p>&#xA;",5728,"",,"",,2014-12-07T17:51:17,"","",,0,,,
27475926,2,,27475222,2014-12-15T00:51:12,,2,,"<p>As it turns out, there's a node-webkit event to handle links but node-webkit.dart doesn't appear to support it.</p>&#xA;&#xA;<p>To solve my issue I added an inline JS script to my main HTML file:</p>&#xA;&#xA;<pre><code>&lt;script type=""text/javascript""&gt;&#xA;  try {&#xA;    var gui = require('nw.gui');&#xA;    var win = gui.Window.get();&#xA;    win.on('new-win-policy', function (frame, url, policy) {&#xA;        gui.Shell.openExternal(url);&#xA;        policy.ignore();&#xA;    });&#xA;  } catch(e) { }&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>(The empty try/catch is there because an error is thrown when my game is run outside of the node environment).</p>&#xA;",1124853,"",,"",,2014-12-15T00:51:12,"","",,0,,,
27379715,2,,20939639,2014-12-09T13:08:51,,6,,"<p>Thanks to a recent update, that shipped in <strong>node-webkit 0.11.2</strong>, it's now possible. </p>&#xA;&#xA;<p>You can make the node-webkit window transparent by adding <code>transparent: true</code> under the <strong><em>window</em></strong> section of your <strong><em>package.json</em></strong> file. Another optional addition would be <code>frame: false</code> which will remove the default OS header as well as hide the node-webkit toolbar.</p>&#xA;&#xA;<p>Now that you have a transparent window you can emulate rounded corners. Depending on your code you'll have to add a <code>border-radius</code> to elements that affect the edge of your window.</p>&#xA;&#xA;<p>The simplest way to emulate a bare-bones rounded window is by adding a <code>border-radius</code> to your <code>html</code> tag, with a <code>background-color</code> applied to your <code>body</code> tag.</p>&#xA;",4341539,"",4341539,"",2017-02-15T12:28:41,2017-02-15T12:28:41,"","",,3,,,
33213332,2,,33195675,2015-10-19T11:33:50,,0,,"<p>well its based on your data needs, if you have large set of data you should use mongoDB otherwise there are lots of databases for your NWJS app.   check this link <a href=""https://github.com/nwjs/nw.js/wiki/Save-persistent-data-in-app"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/Save-persistent-data-in-app</a> some of them are good enough to hold big data.  but personally i prefer sqlite3 with NWJS(there is a lot of hustle to install it for NWJS) sqlite can work with large data check <a href=""http://www.sqlite.org/limits.html"" rel=""nofollow"">this</a> page for more info.  </p>&#xA;&#xA;<p>if you are going with mongoDB then you should download the the zip not the installer and pack it with your installer the you should be good to go.&#xA;by default mongoDB stores its data in <code>/data/db</code> but you can change it to your preferred location</p>&#xA;",2147627,"",,"",,2015-10-19T11:33:50,"","",,0,,,
33118986,2,,33117990,2015-10-14T07:18:08,,1,,"<p>It seems <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ee221189%28v=vs.85%29.aspx"" rel=""nofollow"">WinBioAcquireFocus</a> does the job. You can call this method like so </p>&#xA;&#xA;<pre><code>WinBioAcquireFocus();&#xA;</code></pre>&#xA;&#xA;<p>Make sure your application has local system privileges, so that it will always be able to capture a sample, even if it has been opened in the background. WinBioReleaseFocus() must be called to release focus. </p>&#xA;",1721192,"",1721192,"",2015-10-18T09:39:17,2015-10-18T09:39:17,"","",,0,,,
33276447,2,,26936078,2015-10-22T08:24:23,,6,,"<p>The problem here is that the browser is blocking the call to that server because that server has an invalid certificate.  Since it is a localhost server, it is a <a href=""https://en.wikipedia.org/wiki/Self-signed_certificate"" rel=""nofollow noreferrer"">self-signed certificate</a>.  The best way to get around this is to try one of the following...</p>&#xA;&#xA;<ul>&#xA;<li>Change the localhost:8443 server to use a <a href=""https://letsencrypt.org/"" rel=""nofollow noreferrer"">valid certificate</a></li>&#xA;<li>From your browser load the page, <a href=""https://localhost:8443/"" rel=""nofollow noreferrer"">https://localhost:8443/</a>, accept the invalid certificate, and then try the <a href=""/questions/tagged/ajax"" class=""post-tag"" title=""show questions tagged &#39;ajax&#39;"" rel=""tag"">ajax</a> call.</li>&#xA;</ul>&#xA;",473290,"",473290,"",2017-04-01T20:37:38,2017-04-01T20:37:38,"","",,2,,,
33285172,2,,33284549,2015-10-22T15:46:07,,8,,"<p>Chrome 46 changed the protocol in the SDP m-line from ""RTP/SAVPF"" to ""UDP/TLS/RTP/SAVPF"". It seems node-webkit is on a really old webrtc version (>1 year) that can't deal with this.</p>&#xA;&#xA;<p>This has been announced for quite a while. See <a href=""https://twitter.com/juberti/status/656535175635963904"" rel=""noreferrer"">https://twitter.com/juberti/status/656535175635963904</a> et al.</p>&#xA;&#xA;<p>Munge your SDP and replace ""UDP/TLS/RTP/SAVPF"" with ""RTP/SAVPF"".</p>&#xA;",4352772,"",,"",,2015-10-22T15:46:07,"","",,4,,,
23239162,2,,23236041,2014-04-23T08:45:11,,1,,"<p>It is a system that interprets your code and runs it on another platform, in this case on various desktop operating systems.</p>&#xA;&#xA;<p>Your code needs to interact with the runtime only, and doesn't need to care about platform specific details.</p>&#xA;",865038,"",,"",,2014-04-23T08:45:11,"","",,0,,,
23124069,2,,21345597,2014-04-17T03:26:17,,10,,"<p>Since node-webkit version 0.6.1, you may retrieve the dataPath from the App object.  The WebSQL files will be stored within the <code>databases</code> folder.</p>&#xA;&#xA;<p><strong>Wiki</strong>: <a href=""https://github.com/rogerwang/node-webkit/wiki/App"">https://github.com/rogerwang/node-webkit/wiki/App</a></p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Get the application's data path in user's directory.</strong><br>&#xA;  Windows: %LOCALAPPDATA%/;<br>&#xA;  Linux: ~/.config/;<br>&#xA;  OSX: ~/Library/Application Support/ where  is the field in the manifest.  </p>&#xA;</blockquote>&#xA;&#xA;<p><br /></p>&#xA;&#xA;<p><strong>Example</strong>:</p>&#xA;&#xA;<pre><code>require('nw.gui').App.dataPath;&#xA;</code></pre>&#xA;",1155308,"",,"",,2014-04-17T03:26:17,"","",,0,,,
30266721,2,,30262581,2015-05-15T18:48:07,,1,,"<p>Firstly it is hard to process exactly what you are asking.</p>&#xA;&#xA;<p>Secondly this not valid js:</p>&#xA;&#xA;<pre><code>return {&#xA;    fooStuff(FooBarData.fooBarArray): fooStuff,&#xA;    BarStuff(FooBarData.fooBarArray): barStuff&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Editing my previous answer here. You can use lodash to other methods to filter all objects with a key of ""foo"" or ""bar"" and add them to their own new arrays in some service (factory). Then you can retrieve them in your scope when you need them:  </p>&#xA;&#xA;<p><strong><a href=""http://plnkr.co/edit/NZkecjcf6cYWa0jQPzqF?p=preview"" rel=""nofollow"">http://plnkr.co/edit/NZkecjcf6cYWa0jQPzqF?p=preview</a></strong></p>&#xA;&#xA;<p>You could easily adjust this pattern for use in your resolves as well. Hope it helps.</p>&#xA;&#xA;<pre><code>.controller('MainController', function($scope, Processor, FooBarData) {&#xA;  var foos = Processor.process(FooBarData.data, 'foo');&#xA;  var bars = Processor.process(FooBarData.data, 'bar');&#xA;  $scope.foos = Processor.getData('foo');&#xA;  $scope.bars = Processor.getData('bar');&#xA;})&#xA;&#xA;.factory('Processor', function () {&#xA;&#xA;    var p = {};&#xA;    p.data = {&#xA;      foo: [],&#xA;      bar: []&#xA;    };&#xA;&#xA;    p.process = function(data, keyword){&#xA;      p.data[keyword].push(_.filter(data, {source: keyword}));&#xA;    }&#xA;&#xA;    p.getData = function(name){&#xA;      return _.flatten(p.data[name]);&#xA;    }&#xA;&#xA;    return p;&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>And of course in your template:</p>&#xA;&#xA;<pre><code>  &lt;body ng-controller=""MainController""&gt;&#xA;    &lt;h1&gt;FOO items&lt;/h1&gt;&#xA;    &lt;p ng-repeat=""foo in foos""&gt; {{ foo.fooName }}&lt;/p&gt;&#xA;&#xA;   &lt;h1&gt;Bar items&lt;/h1&gt;&#xA;    &lt;p ng-repeat=""bar in bars""&gt; {{ bar.fooName }}&lt;/p&gt;&#xA;  &lt;/body&gt;&#xA;</code></pre>&#xA;",1516309,"",1516309,"",2015-05-16T17:19:01,2015-05-16T17:19:01,"","",,0,,,
30284163,2,,30283988,2015-05-17T06:49:02,,1,,"<p>Ah, some more reading helped me figure it out. Flux was intended to be primarily a client-side application pattern.</p>&#xA;&#xA;<p>The following diagram illustrates the typical use case, and how the server and its associated state is somewhat disconnected from the client-side Flux logic. </p>&#xA;&#xA;<p><img src=""https://i.stack.imgur.com/tW2I1.png"" alt=""Flux TODO-list architecture""></p>&#xA;&#xA;<p>In other words, Flux on the client does not solve the problem of managing state and components on the web-api side. For client-side applications that are tightly coupled to server-side code (like Electron apps, iPython notebook, NW.js apps), it might make sense to implement the dispatcher similar to Cocoa's delegation pattern rather in the UI thread.</p>&#xA;",488517,"",,"",,2015-05-17T06:49:02,"","",,1,,,
30295329,2,,30286259,2015-05-18T04:53:04,,1,,"<p>You need to escape the parameter or use a prepared statement. Try this:</p>&#xA;&#xA;<pre><code>tx.executeSql('INSERT INTO TheTable VALUES(null, ""Default"", ?)', [jsv], ...&#xA;</code></pre>&#xA;&#xA;<p>The second parameter to <code>executeSql</code> is an array that contains all the values that will be used in place of the question marks in the query. Here are more examples: <a href=""http://html5doctor.com/introducing-web-sql-databases/"" rel=""nofollow"">http://html5doctor.com/introducing-web-sql-databases/</a></p>&#xA;",3744289,"",,"",,2015-05-18T04:53:04,"","",,1,,,
30429691,2,,30429354,2015-05-25T00:12:37,,2,,"<p>You can check for some of the node-webkit specific stuff, such as if <code>process.versions</code> has a <code>node-webkit</code> property:</p>&#xA;&#xA;<pre><code>if (typeof process !== ""undefined"" &amp;&amp; process.versions['node-webkit']) {&#xA;    console.log('You are using node-webkit!');    &#xA;}&#xA;</code></pre>&#xA;",,user4698813,,"",,2015-05-25T00:12:37,"","",,0,,,
30312777,2,,30293874,2015-05-18T21:02:40,,4,,"<p>LokiJS generates its own ids. Since the property ""id"" is a common name, to avoid clashes the unique id of an object inserted in  a collection is stored in the property <code>$loki</code>. The other loki-generated data is the <code>meta</code> object containing information about the object creation and last update, as well as the revision number (number of times an object was modified).</p>&#xA;",2580713,"",,"",,2015-05-18T21:02:40,"","",,2,,,
30251197,2,,29496847,2015-05-15T03:48:34,,5,,"<p>Please look at the list of <a href=""https://github.com/nwjs/nw.js/wiki/Changes-related-to-node"">changes related to node</a> in the nw.js wiki.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Since node-webkit supports GUI applications instead of console applications, the output of console.log() (and other similar methods such as console.warn() and console.error()) is redirected to WebKit's console. You may see it in your “Developer Tools” window (on its “Console” tab).</p>&#xA;</blockquote>&#xA;",4608199,"",,"",,2015-05-15T03:48:34,"","",,3,,,
30297683,2,,30292835,2015-05-18T07:46:36,,6,,"<p>There is no way to do it (atom doesn't ship with a coffeescript compiler), but you can use the watch option of coffeescript,</p>&#xA;&#xA;<blockquote>&#xA;  <p>-w, --watch        watch scripts for changes and rerun commands</p>&#xA;</blockquote>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<p><code>coffee -w main.coffee</code>  in your case.</p>&#xA;",1993501,"",2246344,"",2015-08-20T20:32:05,2015-08-20T20:32:05,"","",,0,,,
38446194,2,,38434112,2016-07-18T21:21:15,,0,,"<p>I think that you need the device to specifically support touch events for the application to behave correctly. </p>&#xA;&#xA;<p>However you could try setting the <a href=""http://chrome://flags/#touch-events"" rel=""nofollow"">touch-events</a> flag manually and see if that helps.</p>&#xA;&#xA;<p>In your main process, before you create your <code>BrowserWindow</code> set the following flag:</p>&#xA;&#xA;<pre><code>app.commandLine.appendSwitch('--enable-touch-events')&#xA;</code></pre>&#xA;",12958,"",,"",,2016-07-18T21:21:15,"","",,3,,,
38447842,2,,38446239,2016-07-19T00:31:17,,0,,<p>First you need to transpile TypeScript to JavaScript with <code>tsc</code> command and in <code>index.html</code> file require <code>app.js</code> instead <code>app.ts</code>. Then run Electron with <code>npm start</code></p>&#xA;,5526354,"",5526354,"",2016-07-19T00:46:32,2016-07-19T00:46:32,"","",,2,,,
38484547,2,,38446301,2016-07-20T15:21:11,,0,,<p>I ended up using Inno Setup to create the installer.</p>&#xA;,826388,"",,"",,2016-07-20T15:21:11,"","",,0,,,
38446135,2,,38439613,2016-07-18T21:17:13,,1,,"<p>Electon is specifically not server side scripting. It uses web technology (chromium) and simply embeds it into your desktop app. It then allows you to write your application as javascript and html to run and render your desktop app. No server communication necessarily happens.</p>&#xA;&#xA;<p>It, of course, has the ability to communicate back to a server though. That server would then be where your server side scripting would live, which may or may not be node.js.</p>&#xA;",12958,"",,"",,2016-07-18T21:17:13,"","",,4,,,
38448973,2,,38410495,2016-07-19T03:11:22,,1,,"<p>You'll need the node module fs to open the file and there's a js library called marked - look for that in npm. It renders markdown.</p>&#xA;&#xA;<p>Update - here's a minimal electron app example, tested on electron 0.37.8.</p>&#xA;&#xA;<pre><code>//start - package.json:&#xA;{&#xA;  ""name"": ""mini-md-example"",&#xA;  ""version"": ""0.1.0"",&#xA;  ""description"": ""A small Electron application to open/display a markdown file"",&#xA;  ""main"": ""main.js"",&#xA;  ""scripts"": {&#xA;    ""start"": ""electron .""&#xA;  },&#xA;  ""devDependencies"": {&#xA;    ""electron-prebuilt"": ""^0.37.7"", &#xA;    ""marked"": ""^0.3.5""&#xA;  }&#xA;}&#xA;//:end - package.json&#xA;&#xA;//start - main.js:&#xA;const electron = require('electron')&#xA;// Module to control application life.&#xA;const app = electron.app&#xA;// Module to create native browser window.&#xA;const BrowserWindow = electron.BrowserWindow&#xA;const fs = require('fs');&#xA;var dialog = require('dialog') &#xA;var path = require('path')&#xA;var defaultMenu = require('./def-menu-main')&#xA;var Menu = require('menu')&#xA;const {ipcMain}  = electron;&#xA;&#xA;// Keep a global reference of the window object, if you don't, the window will&#xA;// be closed automatically when the JavaScript object is garbage collected.&#xA;let mainWindow&#xA;&#xA;function createWindow () {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({width: 999, height: 800})&#xA;&#xA;  // and load the index.html of the app.&#xA;  mainWindow.loadURL(`file://${__dirname}/index.html`)&#xA;&#xA;  // Open the DevTools.&#xA;  mainWindow.webContents.openDevTools()&#xA;&#xA;  // Emitted when the window is closed.&#xA;  mainWindow.on('closed', function () {&#xA;    // Dereference the window object, usually you would store windows&#xA;    // in an array if your app supports multi windows, this is the time&#xA;    // when you should delete the corresponding element.&#xA;    mainWindow = null&#xA;  })&#xA;}&#xA;&#xA;// This method will be called when Electron has finished&#xA;// initialization and is ready to create browser windows.&#xA;// Some APIs can only be used after this event occurs.&#xA;app.on('ready', createWindow)&#xA;&#xA;// Quit when all windows are closed.&#xA;app.on('window-all-closed', function () {&#xA;  // On OS X it is common for applications and their menu bar&#xA;  // to stay active until the user quits explicitly with Cmd + Q&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;&#xA;app.on('activate', function () {&#xA;  // On OS X it's common to re-create a window in the app when the&#xA;  // dock icon is clicked and there are no other windows open.&#xA;  if (mainWindow === null) {&#xA;    createWindow()&#xA;  }&#xA;})&#xA;&#xA;var OpenFile = function() { &#xA; dialog.showOpenDialog(mainWindow, {&#xA;  filters: [{name: 'Markdown', extensions: ['md', 'markdown']}],&#xA;  properties: ['openFile']&#xA; }, function(paths) {&#xA;  if (!paths) return false; &#xA;  var fPath = paths[0];&#xA;  var fName = path.basename(fPath);&#xA;  var fData = fs.readFileSync(fPath, 'utf8'); &#xA;&#xA;  mainWindow.webContents.send('file-open', fPath, fName, fData);&#xA;&#xA; })&#xA;}&#xA;&#xA;var SendEvent = function(name) {&#xA; return function() {mainWindow.webContents.send(name);};&#xA;};&#xA;&#xA;  // Get template for default menu &#xA;var menu = defaultMenu()&#xA;&#xA;  // Add my very own custom FILE menu &#xA;&#xA;  menu.splice(0, 0, {&#xA;    label: 'File',&#xA;    submenu: [&#xA;      {&#xA;        label: 'Open',&#xA;        accelerator: ""CmdOCtrl+O"",&#xA;        click: OpenFile&#xA;      },&#xA;    ]&#xA;  })&#xA;  // Set top-level application menu, using modified template &#xA;  Menu.setApplicationMenu(Menu.buildFromTemplate(menu));&#xA;//:end - main.js&#xA;&#xA;//start - index.html:&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;    &lt;body&gt;&#xA;        &lt;div id=""content""&gt;&lt;/div&gt;&#xA;&#xA;        &lt;script&gt;&#xA;        var marked = require('marked')&#xA;        var ipc = require('electron').ipcRenderer&#xA;            ipc.on('file-open', function(event, fPath, filename, filedata) &#xA;            {&#xA;                document.getElementById('content').innerHTML = marked(filedata)  ;       &#xA;            })&#xA;&#xA;        &lt;/script&gt;   &#xA;    &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;//:end - index.html&#xA;&#xA;//start - def-menu-main.js:&#xA;var electron = require('electron')  // this should work if you're in the electron environment&#xA;//var app = electron.remote.app&#xA;// original app var calls remote as if this is used in a renderer, but for me menus are a main app thing &#xA;var app = electron.app&#xA;&#xA;var shell = electron.shell&#xA;&#xA;module.exports = function() {&#xA;&#xA;  var template = [&#xA;    {&#xA;      label: 'View',&#xA;      submenu: [&#xA;        {&#xA;          label: 'Reload',&#xA;          accelerator: 'CmdOrCtrl+R',&#xA;          click: function(item, focusedWindow) {&#xA;            if (focusedWindow)&#xA;              focusedWindow.reload();&#xA;          }&#xA;        },&#xA;        {&#xA;          label: 'Toggle Full Screen',&#xA;          accelerator: (function() {&#xA;            if (process.platform === 'darwin')&#xA;              return 'Ctrl+Command+F';&#xA;            else&#xA;              return 'F11';&#xA;          })(),&#xA;          click: function(item, focusedWindow) {&#xA;            if (focusedWindow)&#xA;              focusedWindow.setFullScreen(!focusedWindow.isFullScreen());&#xA;          }&#xA;        },&#xA;        {&#xA;          label: 'Toggle Developer Tools',&#xA;          accelerator: (function() {&#xA;            if (process.platform === 'darwin')&#xA;              return 'Alt+Command+I';&#xA;            else&#xA;              return 'Ctrl+Shift+I';&#xA;          })(),&#xA;          click: function(item, focusedWindow) {&#xA;            if (focusedWindow)&#xA;              focusedWindow.toggleDevTools();&#xA;          }&#xA;        },&#xA;      ]&#xA;    },&#xA;    {&#xA;      label: 'Window',&#xA;      role: 'window',&#xA;      submenu: [&#xA;        {&#xA;          label: 'Minimize',&#xA;          accelerator: 'CmdOrCtrl+M',&#xA;          role: 'minimize'&#xA;        },&#xA;        {&#xA;          label: 'Close',&#xA;          accelerator: 'CmdOrCtrl+W',&#xA;          role: 'close'&#xA;        },&#xA;      ]&#xA;    },&#xA;    {&#xA;      label: 'Help',&#xA;      role: 'help',&#xA;      submenu: [&#xA;        {&#xA;          label: 'Learn More',&#xA;          click: function() { shell.openExternal('http://electron.atom.io') }&#xA;        },&#xA;      ]&#xA;    },&#xA;  ];&#xA;&#xA;  if (process.platform === 'darwin') {&#xA;    var name = app.getName();&#xA;    template.unshift({&#xA;      label: name,&#xA;      submenu: [&#xA;        {&#xA;          label: 'About ' + name,&#xA;          role: 'about'&#xA;        },&#xA;        {&#xA;          type: 'separator'&#xA;        },&#xA;        {&#xA;          label: 'Services',&#xA;          role: 'services',&#xA;          submenu: []&#xA;        },&#xA;        {&#xA;          type: 'separator'&#xA;        },&#xA;        {&#xA;          label: 'Hide ' + name,&#xA;          accelerator: 'Command+H',&#xA;          role: 'hide'&#xA;        },&#xA;        {&#xA;          label: 'Hide Others',&#xA;          accelerator: 'Command+Shift+H',&#xA;          role: 'hideothers'&#xA;        },&#xA;        {&#xA;          label: 'Show All',&#xA;          role: 'unhide'&#xA;        },&#xA;        {&#xA;          type: 'separator'&#xA;        },&#xA;        {&#xA;          label: 'Quit',&#xA;          accelerator: 'Command+Q',&#xA;          click: function() { app.quit(); }&#xA;        },&#xA;      ]&#xA;    });&#xA;    var windowMenu = template.find(function(m) { return m.role === 'window' })&#xA;    if (windowMenu) {&#xA;      windowMenu.submenu.push(&#xA;        {&#xA;          type: 'separator'&#xA;        },&#xA;        {&#xA;          label: 'Bring All to Front',&#xA;          role: 'front'&#xA;        }&#xA;      );&#xA;    }&#xA;  }&#xA;&#xA;  return template;&#xA;}&#xA;//:end - def-menu-main.js&#xA;</code></pre>&#xA;",1337544,"",1337544,"",2016-07-21T17:31:22,2016-07-21T17:31:22,"","",,0,,,
38490619,2,,38488913,2016-07-20T20:50:51,,1,,"<p>This works for me in the current electron project I am working on:</p>&#xA;&#xA;<pre><code>&lt;head&gt;&#xA;  &lt;script&gt;if (typeof module === 'object') {window.module = module; module = undefined;}&lt;/script&gt;&#xA;&#xA;  &lt;script type=""application/javascript"" src=""js/jquery-2.1.3.min.js""&gt;&lt;/script&gt;&#xA;  &lt;script type=""application/javascript"" src=""js/bootstrap.min.js""&gt;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;</code></pre>&#xA;&#xA;<p>In case you want to write javascript in the html which is not electron related, you can do the following:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;  /* Javascript */&#xA;&lt;/script&gt;&#xA;&lt;script&gt;if (window.module) module = window.module;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;  const ipc = require('electron').ipcRenderer;&#xA;  /* Rest of electron related javascript */&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",1714910,"",,"",,2016-07-20T20:50:51,"","",,0,,,
38508129,2,,37179918,2016-07-21T15:18:46,,1,,"<p>actually in nodejs you can do the following:</p>&#xA;&#xA;<p>1-Create another folder inside your project folder for example ""server_modules"" </p>&#xA;&#xA;<p>2-In the created folder create another package.json file and install any modules needed for server out there </p>&#xA;&#xA;<p>3-All these modules will be accessible as normal node_modules using <code>require('module_name')</code> and you can delete ""server_modules"" folder when you package your desktop version if you don't need it</p>&#xA;&#xA;<p><strong>Note:</strong> this approach used by some developers to achive micro services in nodejs but it is useful in your case</p>&#xA;",427622,"",,"",,2016-07-21T15:18:46,"","",,4,,,
38533654,2,,36986024,2016-07-22T19:03:24,,1,,"<p>the code for that repository has been updated. Not the README file though :-(. In any case please download that repository again with the latest version and try the commmands again. I just tried them a few seconds ago and everything worked. I also followed his guide at: <a href=""http://tphangout.com/angular-2-desktop-apps-with-electron/"" rel=""nofollow"">http://tphangout.com/angular-2-desktop-apps-with-electron/</a> and I was able to understand where everything is coming from. I highly recommend you to follow his guide and do it yourself.</p>&#xA;&#xA;<p>Note: In the guide I mentioned above you are going to get an error just replace the main.js file you created when following the guide with the one from the repository.</p>&#xA;&#xA;<p>Happy Angular2 + Electron!</p>&#xA;",2195950,"",,"",,2016-07-22T19:03:24,"","",,0,,,
38548785,2,,38540903,2016-07-24T04:34:50,,1,,"<p>Calling <code>app.relaunch()</code> will not actually quit the app, you need to follow it by a call to <code>app.quit()</code> or <code>app.exit()</code>.</p>&#xA;",1259938,"",,"",,2016-07-24T04:34:50,"","",,2,,,
38549032,2,,38492296,2016-07-24T05:28:44,,1,,"<p>The certificate error I was getting was due to being behind a corporate firewall under Windows. To solve that, I removed the s from https so the dist-url value became <a href=""http://gh-contractor-zcbenz.s3.amazonaws.com/atom-shell/dist"" rel=""nofollow"">http://gh-contractor-zcbenz.s3.amazonaws.com/atom-shell/dist</a>. The other error I was getting was (as mentioned by @Thennarasan) ""Module did not self-register"" and to solve that I called the following commands and it worked:</p>&#xA;&#xA;<pre><code>PS H:\electron-app&gt; cd node_modules\oracledb&#xA;PS H:\electron-app\node_modules\oracledb&gt; node-gyp rebuild --target=1.2.8 --arch=x64 --target_platform=win --dist-url=http://gh-contractor-zcbenz.s3.amazonaws.com/atom-shell/dist --msvs_version=2013&#xA;PS H:\electron-app&gt; cd ..\..&#xA;</code></pre>&#xA;&#xA;<p>I got help from this Github issue <a href=""https://github.com/electron/electron/issues/1529"" rel=""nofollow"">https://github.com/electron/electron/issues/1529</a>.</p>&#xA;",6615783,"",6615783,"",2016-07-24T05:41:29,2016-07-24T05:41:29,"","",,0,,,
38553295,2,,38517098,2016-07-24T14:46:02,,1,,"<p>You seem to be only worried about too many async processes running at the same time. But in fact, you can control how many run at the same time.</p>&#xA;&#xA;<p>For example like so:</p>&#xA;&#xA;<pre><code>function runTask(tasks, index, callback) {&#xA;  if (index &gt;= tasks.length) {&#xA;    callback();&#xA;  }&#xA;  tasks[index](() =&gt; runTask(tasks, index + 1, callback));&#xA;}&#xA;&#xA;function queue(tasks, callback) {&#xA;  runTask(tasks, 0, callback);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>with this you'd have a simple way to queue your async spawns up:</p>&#xA;&#xA;<pre><code>const spawn = require('child_process').spawn;&#xA;&#xA;function customSpawn(command, args) {&#xA;  return callback =&gt; {&#xA;    const child = spawn(command, args);&#xA;    child.on('close', callback);&#xA;  }&#xA;} &#xA;&#xA;queue([customSpawn('app1', []), customSpawn('app2', [])], dosomethingelse);&#xA;</code></pre>&#xA;&#xA;<p><sub>I never tested any of the above code and therefore I can not guarantee for its correctness.</sub></p>&#xA;&#xA;<p>Also, have a look at promises and generators if you want to get rid of all those callbacks.</p>&#xA;&#xA;<p>For example with promises it might look like this:</p>&#xA;&#xA;<pre><code>function queue(tasks) {&#xA;  let index = 0;&#xA;  const runTask = arg =&gt; {&#xA;    if (index &gt;= tasks.length) {&#xA;      return Promise.resolve(arg);&#xA;    }&#xA;    return new Promise((resolve, reject) =&gt; {&#xA;      tasks[index++](arg).then(arg =&gt; resolve(runTask(arg))).catch(reject);&#xA;    });&#xA;  };&#xA;  return runTask();&#xA;}&#xA;&#xA;const spawn = require('child_process').spawn;&#xA;&#xA;function customSpawn(command, args) {&#xA;  return () =&gt; new Promise((resolve, reject) =&gt; {&#xA;    const child = spawn(command, args);&#xA;    child.on('close', code =&gt; {&#xA;      if (code === 0) {&#xA;        resolve();&#xA;      } else {&#xA;        reject();&#xA;      }&#xA;    });&#xA;  });&#xA;}&#xA;&#xA;queue([customSpawn('app1', []), customSpawn('app2', [])])&#xA;  .then(dosomethingelse)&#xA;  .catch(err =&gt; console.error(err));&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://jsfiddle.net/9ccdjxr0/"" rel=""nofollow"">Try it!</a></p>&#xA;&#xA;<p>A note regarding the for loop: Build the queue with what you want to do up first using closures as demonstrated in <code>customSpawn</code> and then pass it to <code>queue</code>.</p>&#xA;",6572285,"",6572285,"",2016-07-25T17:44:28,2016-07-25T17:44:28,"","",,11,,,
38559919,2,,38559679,2016-07-25T04:49:23,,1,,"<p>Cross-domain AJAX requests are blocked <em>by default</em>. All your regular desktop apps such as your Mail client send requests out all the time. You simply have to enable Cross-Origin Resource Sharing (CORS) on your server. I don't know what server application you're using (Apache/Nginx), but for Apache you can start simply by adding the following line to the relevant part of your Virtual Host or .htaccess file:</p>&#xA;&#xA;<p><code>Header set Access-Control-Allow-Origin ""*""</code></p>&#xA;&#xA;<p>You can refer to the <a href=""http://enable-cors.org/"" rel=""nofollow"">Enable CORS</a> to learn how to enable CORS for other server technologies.</p>&#xA;",946175,"",,"",,2016-07-25T04:49:23,"","",,2,,,
38516577,2,,38509180,2016-07-22T00:55:24,,2,,"<p>Use <a href=""https://www.npmjs.com/package/oracledb"" rel=""nofollow"">node-oracledb</a>.  Electron has some <a href=""https://github.com/electron/electron/issues/5851#issuecomment-226093160"" rel=""nofollow"">ABI compatibility issues</a> so review what other node-oracledb users are <a href=""https://github.com/oracle/node-oracledb/search?q=electron&amp;type=Issues&amp;utf8=%E2%9C%93"" rel=""nofollow"">doing</a> before you start.</p>&#xA;",4799035,"",,"",,2016-07-22T00:55:24,"","",,0,,,
38524651,2,,38506465,2016-07-22T10:53:24,,2,,"<p>You may be looking for:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/louischatriot/nedb"" rel=""nofollow noreferrer"">NeDB</a>, a Mongo-like offline in-memory database </li>&#xA;<li><a href=""https://github.com/Ivshti/linvodb3"" rel=""nofollow noreferrer"">LinvoDB3</a>, same than NeDB, but not in-memory (slower, but more scalable in terms of size)</li>&#xA;<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage"" rel=""nofollow noreferrer"">LocalStorage</a> a Web API</li>&#xA;</ul>&#xA;",3766528,"",3766528,"",2016-12-06T14:37:52,2016-12-06T14:37:52,"","",,4,,,
38570019,2,,38503119,2016-07-25T14:09:54,,2,,"<p>It seems the answer was right under my nose, you can use this call from the documentation to set your custom protocol:&#xA;<a href=""http://electron.atom.io/docs/api/app/#appsetasdefaultprotocolclientprotocol-macos-windows"" rel=""nofollow"">http://electron.atom.io/docs/api/app/#appsetasdefaultprotocolclientprotocol-macos-windows</a></p>&#xA;",6619408,"",,"",,2016-07-25T14:09:54,"","",,0,,,
38619761,2,,38619449,2016-07-27T17:38:33,,2,,"<p><strong>contents.openDevTools([options])</strong></p>&#xA;&#xA;<ul>&#xA;<li><code>options</code> Object (optional)&#xA;&#xA;<ul>&#xA;<li><code>mode</code> String - Opens the devtools with specified dock state, can be right, bottom, undocked, detach. Defaults to last used dock state. In undocked mode it's possible to dock back. In detach mode it's not.</li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p>So in your code in the Main process, it should be something like this</p>&#xA;&#xA;<pre><code>mainWindow.webContents.openDevTools({ mode: 'bottom' })&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md"" rel=""nofollow"">webContents API</a></p>&#xA;",1714910,"",,"",,2016-07-27T17:38:33,"","",,0,,,
38654505,2,,38653528,2016-07-29T08:52:29,,2,,"<p>According to the documentation of the method <a href=""http://electron.atom.io/docs/api/app/#appexitexitcode"" rel=""nofollow"">app.exit(exitCode)</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>All windows will be closed immediately without asking user and the before-quit and will-quit events will not be emitted.</p>&#xA;</blockquote>&#xA;&#xA;<p>So on On OS X it is common for applications and their menu bar to stay active. Try the following or change the method <code>app.exit()</code> by <code>app.quit()</code></p>&#xA;&#xA;<pre><code>app.on('window-all-closed', function () {&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit();&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",1714910,"",,"",,2016-07-29T08:52:29,"","",,0,,,
38515848,2,,38283853,2016-07-21T23:16:23,,3,,"<p>You can put them in the main script of the application (main.js), before the 'ready' event of the <em>app</em> module is emitted, like so:</p>&#xA;&#xA;<pre><code>const electron = require('electron')&#xA;// Module to control application life.&#xA;const app = electron.app&#xA;app.commandLine.appendSwitch('enable-transparent-visuals');&#xA;app.commandLine.appendSwitch('disable-gpu');&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  // Your code here&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>For a list of other command line switches, you can go <a href=""https://github.com/electron/electron/blob/master/docs/api/chrome-command-line-switches.md"" rel=""nofollow"" title=""here"">here</a></p>&#xA;",6622537,"",6622537,"",2016-08-01T12:17:42,2016-08-01T12:17:42,"","",,11,,,
38581002,2,,38573159,2016-07-26T04:26:29,,3,,"<p>You could give electron-pug a chance. <a href=""https://github.com/yan-foto/electron-pug"" rel=""nofollow"">https://github.com/yan-foto/electron-pug</a></p>&#xA;",1770432,"",,"",,2016-07-26T04:26:29,"","",,0,,,
38645371,2,,38594608,2016-07-28T19:41:32,,4,,"<p>You don't need to set the <code>buildDir</code>, just pass in the path like this:</p>&#xA;&#xA;<pre><code>nwbuild -p win64 &lt;PATH TO APP FILES&gt;&#xA;</code></pre>&#xA;&#xA;<p>The options are all <em>optional</em>, so you don't need to set any if you don't want. You can change the build platform that I set in the example if you prefer.</p>&#xA;",6650102,"",,"",,2016-07-28T19:41:32,"","",,3,,,
38446432,2,,38414105,2016-07-18T21:40:31,,6,,"<p>The first suggestion I would make would be to not have multiple windows but to instead have multiple routes. To do routes in angular 1.x checkout out the <a href=""https://www.npmjs.com/package/angular-ui-router"" rel=""noreferrer"">angular-ui-router</a>.</p>&#xA;&#xA;<p>Using routes you would use the same window and change the state of the application running inside of that same window.</p>&#xA;&#xA;<p>However you can also have multiple windows by simply creating multiple <code>BrowserWindow</code> objects or by calling <code>loadURL</code> on the same window multiple times.</p>&#xA;&#xA;<p>You can communicate back to the main process when login is complete using the <a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-main.md"" rel=""noreferrer"">ipc</a> module, to trigger the desired behavior.</p>&#xA;&#xA;<pre><code>// main.js (main process)&#xA;const {app, BrowserWindow, ipcMain} = require('electron')&#xA;&#xA;app.on('activate', () =&gt; {&#xA;  var win = new BrowserWindow()&#xA;  win.loadURL(`file://${__dirname}/login.html`)&#xA;&#xA;  ipcMain.on('login-success', () =&gt; {&#xA;    win.loadURL(`file://${__dirname}/index.html`)&#xA;  })&#xA;&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Then in your render process just send the <code>login-success</code> message back.</p>&#xA;&#xA;<pre><code>// login.js (render process)&#xA;var {ipcRenderer} = require('electron')&#xA;&#xA;ipcRenderer.send('login-success') // call this after the user logs in&#xA;</code></pre>&#xA;",12958,"",,"",,2016-07-18T21:40:31,"","",,0,,,
38550760,2,,36351229,2016-07-24T09:53:49,,8,,"<p>When it comes down to testing electron apps, I like:</p>&#xA;&#xA;<ul>&#xA;<li>To unit test some isolated modules,</li>&#xA;<li>Do some end to end tests to see if the application works as a whole.</li>&#xA;</ul>&#xA;&#xA;<p>End to end tests can now be achieved fairly easily with <a href=""https://github.com/electron/spectron"">spectron</a>.</p>&#xA;&#xA;<p>For unit testing though, some of our modules might be based on the electron package that is not available if we simply run the tests with node.</p>&#xA;&#xA;<p>You can easily stub the electron package with <a href=""https://github.com/thlorenz/proxyquire"">proxyquire</a>. Be sure to prevent calls to require original dependencies with the proxyquire <code>@noCallThru</code> attribute, or by requiring proxyquire like this <code>require('proxyquire').noCallThru()</code>. This will ensure your tests do not even try to require the orginal dependency, making it possible to run your unit tests within a simple node process.</p>&#xA;&#xA;<p>Another solution would be that you leverage dependency injection and make sure that your module does not rely on anything introduced by the electron package.</p>&#xA;",1488398,"",,"",,2016-07-24T09:53:49,"","",,0,,,
38490959,2,,38479607,2016-07-20T21:14:38,,9,,"<p>This is an electron app for <a href=""https://www.mongodb.com/"" rel=""noreferrer"">MongoDB</a> management, you can check the code as an example on how to use mongodb and electron.</p>&#xA;&#xA;<p><a href=""https://github.com/officert/mongotron"" rel=""noreferrer"">https://github.com/officert/mongotron</a></p>&#xA;&#xA;<p>Basically you can use mongodb as you would normally use in <a href=""https://nodejs.org/en/"" rel=""noreferrer"">node.js</a> in the Main process and then communicate with Renderer process through the <a href=""https://electronjs.org/docs/api/ipc-renderer"" rel=""noreferrer""><strong>ipc</strong> module</a>.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<p><strong>Renderer process</strong></p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;  &lt;head&gt;&lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;script&gt;&#xA;    const ipc = require('electron').ipcRenderer;&#xA;    const informationBtn = document.getElementById('information-dialog')&#xA;&#xA;    informationBtn.addEventListener('click', function (event) {&#xA;      ipc.send('create-user')&#xA;    })&#xA;    &lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;html&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>Main process</strong></p>&#xA;&#xA;<pre><code>const ipc = require('electron').ipcMain&#xA;const dialog = require('electron').dialog&#xA;const mongo = require('some-mongo-module')&#xA;&#xA;ipc.on('open-information-dialog', function (event) {&#xA;  /* MONGODB CODE */&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>I would recommend you to use the get started app that you can find in <a href=""http://electron.atom.io/"" rel=""noreferrer"">http://electron.atom.io/</a></p>&#xA;",1714910,"",2576539,"",2018-03-13T17:56:29,2018-03-13T17:56:29,"","",,3,,,
38595705,2,,38595524,2016-07-26T16:51:11,,12,,"<p>Try: </p>&#xA;&#xA;<pre><code>var fs = require('fs-extra');&#xA;&#xA;fs.copySync(path.resolve(__dirname,'./mainisp.jpg'), './test/mainisp.jpg');&#xA;</code></pre>&#xA;&#xA;<p>As you can see in the error message, you're trying to read the file from <code>E:\mainisp.jpg</code> instead of the current directory.</p>&#xA;&#xA;<p>You also need to specify the target path with the file, not only the destination folder.</p>&#xA;",2308019,"",2308019,"",2016-07-26T17:00:00,2016-07-26T17:00:00,"","",,4,,,
38576304,2,,37393248,2016-07-25T19:54:25,,22,,"<p>You can use <a href=""http://electron.atom.io/docs/api/session/#sessetproxyconfig-callback"" rel=""noreferrer"">.setProxy()</a> method of session object. You're able to specify proxy directly like in example below:</p>&#xA;&#xA;<pre><code>// in main.js&#xA;var electron      = require('electron');&#xA;var BrowserWindow = electron.BrowserWindow;&#xA;mainWindow = new BrowserWindow({&#xA;    ""width"": 970,&#xA;    ""height"": 500,&#xA;    ""center"": true,&#xA;    'title': 'Main window',&#xA;});&#xA;mainWindow.webContents.session.setProxy({proxyRules:""socks5://114.215.193.156:1080""}, function () {&#xA;    mainWindow.loadURL('https://whatismyipaddress.com/');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Or you can use PACscript:</p>&#xA;&#xA;<pre><code>// in main.js&#xA;mainWindow.webContents.session.setProxy({pacScript:""file://""+root+""/js/pacfile.js""}, function () {&#xA;    mainWindow.loadURL('https://whatismyipaddress.com/');&#xA;});&#xA;&#xA;&#xA;// pacfile.js example&#xA;var blocked      = [""site1.com"", ""site2.com"", ""site3.com""];&#xA;var proxyServer  = ""SOCKS5 114.215.193.156:1080"";&#xA;function FindProxyForURL(url, host) {&#xA;    var shost = host.split(""."").reverse();&#xA;    shost = shost[1] + ""."" + shost[0];&#xA;    for(var i = 0; i &lt; blocked.length; i++) {&#xA;        if( shost == blocked[i] ) return proxyServer;&#xA;    }&#xA;    return ""DIRECT"";&#xA;}&#xA;</code></pre>&#xA;",6636580,"",,"",,2016-07-25T19:54:25,"","",,3,,,
38549837,2,,38530293,2016-07-24T07:45:45,,34,,"<p>Electron adds a <a href=""https://github.com/electron/electron/blob/v1.2.8/docs/api/file-object.md"" rel=""noreferrer""><code>path</code></a> property to <a href=""https://developer.mozilla.org/en-US/docs/Web/API/File"" rel=""noreferrer"">File</a> objects, so you can get the real path from the input element using:</p>&#xA;&#xA;<pre><code>document.getElementById(""myFile"").files[0].path&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-07-24T07:45:45,"","",,0,,,
38524534,2,,38523617,2016-07-22T10:47:35,,142,,"<p>From the <a href=""https://github.com/electron/asar"" rel=""noreferrer"">asar documentation</a></p>&#xA;&#xA;<p>(the use of <code>npx</code> here is to avoid to install the <code>asar</code> tool globally with <code>npm install -g asar</code>)</p>&#xA;&#xA;<h3>Extract the whole archive:</h3>&#xA;&#xA;<pre><code>npx asar extract app.asar destfolder &#xA;</code></pre>&#xA;&#xA;<h3>Extract a particular file:</h3>&#xA;&#xA;<pre><code>npx asar extract-file app.asar main.js&#xA;</code></pre>&#xA;",3766528,"",3766528,"",2019-01-21T18:14:53,2019-01-21T18:14:53,"","",,10,,,
18567582,2,,18566634,2013-09-02T07:18:34,,0,,"<p>You can find it in <a href=""https://github.com/zcbenz/chromium/blob/node/.DEPS.git"" rel=""nofollow"">.DEPS.git</a>. </p>&#xA;",1210726,"",,"",,2013-09-02T07:18:34,"","",,0,,,
18377018,2,,18328827,2013-08-22T09:48:25,,1,,"<p>In Node-WebKit you can you use modules written totally in JavaScript. For modules containing C/C++ you should build the addons by <strong><a href=""https://github.com/rogerwang/node-webkit/wiki/Using-Node-modules#3rd-party-modules-with-cc-addons"" rel=""nofollow"">node-gyp</a></strong> because the ABI (application binary interface) of node-webkit differs from Node's ABI.</p>&#xA;&#xA;<p>Try smth like <strong><a href=""https://github.com/sequelize/sequelize-sqlite"" rel=""nofollow"">sequelize-sqlite</a></strong> that <strong>JavaScript 100%</strong> or find other modules in npm go to it GitHub repository and under row <strong>commits, branch, releases &amp; contributor</strong> click coloured row ""Show language statistic"".</p>&#xA;",1471681,"",,"",,2013-08-22T09:48:25,"","",,2,,,
18406196,2,,18391481,2013-08-23T15:09:04,,1,,"<p>HTTP status codes are returned by webservers. Presumedly your local server returns 200 when you're doing this in Chrome, but node-webkit just returns 0 (<a href=""http://en.wikipedia.org/wiki/List_of_HTTP_status_codes"" rel=""nofollow"">Unknown?</a>).</p>&#xA;&#xA;<p>Normally reading local files is restricted though. Does the code above actually produce the file contents? Even so, if you're trying to read files in node-webkit I would suggest using the <a href=""http://nodejs.org/api/fs.html"" rel=""nofollow"">node fs module</a> to access the filesystem directly.</p>&#xA;",279411,"",,"",,2013-08-23T15:09:04,"","",,3,,,
18578648,2,,18558737,2013-09-02T18:02:33,,2,,"<ol>&#xA;<li>That's what most people use Node.js for</li>&#xA;<li><a href=""https://npmjs.org/search?q=serial+port"" rel=""nofollow"">https://npmjs.org/search?q=serial+port</a></li>&#xA;<li>Again, that's what most people use Node.js for</li>&#xA;<li>Because of 1 and 3, the most obvious UI for node.js apps is the browser. Write a config page to control your app. Using node-webkit is overkill, just use whatever browser is already available. Node can run multiple listeners on multiple ports, serving the same app.</li>&#xA;<li><code>npm install</code> is pretty simple.</li>&#xA;</ol>&#xA;&#xA;<p>Go learn how to write simple Node.js apps (with express for easy http servering, and jade or nunjucks for easy html templating) and then move up from there. </p>&#xA;",740553,"",,"",,2013-09-02T18:02:33,"","",,2,,,
18429835,2,,18423790,2013-08-25T14:07:12,,18,,"<p>I don't think the manifest has an option to do that. Instead, call nw's <code>Window.maximize()</code> on startup. Something like:</p>&#xA;&#xA;<pre><code>// Load native UI library&#xA;var ngui = require('nw.gui');&#xA;&#xA;// Get the current window&#xA;var nwin = ngui.Window.get();&#xA;</code></pre>&#xA;&#xA;<p>Sometime later, in <code>onload</code> or some other point where you're ready to show the window:</p>&#xA;&#xA;<pre><code>onload = function() {&#xA;    nwin.show();&#xA;    nwin.maximize();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is described in the <a href=""https://github.com/rogerwang/node-webkit/wiki/Window"">node-webkit wiki</a>. I don't think you can call maximize before showing the main window though (if it's hidden in manifest), but I haven't really dug into it.</p>&#xA;&#xA;<p>You may want to consider saving the window position, from a UX standpoint. The wiki has an example for doing this.</p>&#xA;",279411,"",,"",,2013-08-25T14:07:12,"","",,0,,,
23761682,2,,23761564,2014-05-20T13:49:38,,1,,"<p>You can use/wrap C libraries in node (C++) with no problem.</p>&#xA;&#xA;<p>As far as the frameworks go, you should be able to add those files as <code>libraries</code> in your binding.gyp file and gyp should automatically convert them to <code>-framework lib67xx -framework libDIO96 ...</code> linker flags.</p>&#xA;",2050455,"",,"",,2014-05-20T13:49:38,"","",,4,,,
23561638,2,,23559413,2014-05-09T09:54:06,,2,,"<p>It looks like you're using the async library.</p>&#xA;&#xA;<p>The iterator you passed to <code>async.each</code> requires that you call the callback regardless of whether there's an error or not. If you don't call the callback, async will assume that the operation is still running and will wait forever.</p>&#xA;&#xA;<p>When you encounter an error, you should call the callback and pass the error as the first parameter.</p>&#xA;&#xA;<p>So here's an example of what I mean. I've added <code>callback(e);</code> to your error event handler.</p>&#xA;&#xA;<pre><code>    }).on('error', function(e) {&#xA;        console.error(arr[0] + ':' + arr[1]);&#xA;        callback(e);&#xA;    }).on('end', function(e) {&#xA;</code></pre>&#xA;",245732,"",,"",,2014-05-09T09:54:06,"","",,2,,,
23669709,2,,23669613,2014-05-15T05:09:45,,2,,"<p>As you can see compiler can't find type <code>AccessorInfo</code>. That's because there is no more such class in v8 API. node-webkit v0.9.2 is based on node 0.11.x branch, so some native addons might not compile or work correctly because of v8 API changes. You need to use node-webkit 0.8.x branch is these cases.</p>&#xA;",1391953,"",,"",,2014-05-15T05:09:45,"","",,4,,,
23775892,2,,23557423,2014-05-21T06:49:09,,2,,"<p>You'll always get a ""require is not defined"" error if you don't use a node-webkit environement for developpement in Windows. You can use <a href=""https://github.com/geo8bit/nodebob"" rel=""nofollow"">nodebob</a> for developpement environement :&#xA;You have to put your html files into nodebob\buildTools\nw and  then run nw.exe&#xA;Just reload it after your changes</p>&#xA;",3095294,"",,"",,2014-05-21T06:49:09,"","",,0,,,
32915747,2,,32897985,2015-10-02T20:57:27,,0,,"<p>I found out there is <a href=""https://www.npmjs.com/package/co-nedb"" rel=""nofollow"">https://www.npmjs.com/package/co-nedb</a> which also uses thunkify but works :-).</p>&#xA;",380589,"",,"",,2015-10-02T20:57:27,"","",,0,,,
32958375,2,,32934016,2015-10-05T21:42:03,,0,,"<p>In contrast to other node apps, electron doesn't automatically set your <code>NODE_PATH</code> to global (i.e. <code>/usr/bin</code>) or local (e.g. <code>node_modules</code>) <a href=""https://docs.npmjs.com/files/folders"" rel=""nofollow"">folders</a>. So you need to export it manually:</p>&#xA;&#xA;<pre><code>NODE_PATH=/path/to/node_modules electron my_app&#xA;</code></pre>&#xA;",2295964,"",,"",,2015-10-05T21:42:03,"","",,3,,,
32992478,2,,32992412,2015-10-07T12:40:14,,0,,"<p>Assuming you are using the latest and greatest jsdom</p>&#xA;&#xA;<blockquote>&#xA;  <p>Note that as of our 7.0.0 release, jsdom requires Node.js 4 or newer (why?). In the meantime you are still welcome to install a release in the 3.x series if you use legacy Node.js versions like 0.10 or 0.12. <strong>There are also various releases between 3.x and 7.0.0 that work with various io.js versions</strong></p>&#xA;</blockquote>&#xA;&#xA;<p>node-webkit is based on <strong>iojs v1.2.0</strong> (which is pre node.js 4)</p>&#xA;",5053002,"",,"",,2015-10-07T12:40:14,"","",,4,,,
33042858,2,,33040297,2015-10-09T16:13:19,,0,,"<p>This isn't possible, you need the original PDBs :-/</p>&#xA;",5728,"",,"",,2015-10-09T16:13:19,"","",,1,,,
33046156,2,,33042768,2015-10-09T19:55:01,,0,,"<p>Erlang will look for the shell_info module (and any other module) according to the code path. If you have a beam file in your current directory it will find it, but your web server won't find it there.</p>&#xA;&#xA;<p>You can set extra code paths by using the -pa parameter to erl, or setting the ERL_LIBS environment variable, or you can install your module in the existing default code path.</p>&#xA;&#xA;<p>On my system the default code path is ""/usr/lib/erlang/lib"":</p>&#xA;&#xA;<pre><code>$ erl&#xA;Erlang R15B01 (erts-5.9.1) [source] [64-bit] [smp:8:8] [async-threads:0]     [kernel-poll:false]&#xA;&#xA;Eshell V5.9.1  (abort with ^G)&#xA;1&gt; code:lib_dir().&#xA;""/usr/lib/erlang/lib""&#xA;2&gt; &#xA;</code></pre>&#xA;&#xA;<p>Note that if you add PATH it will look for your shell_info.beam in PATH/X/ebin (where X is anything (should be appname-version)).</p>&#xA;",5395288,"",,"",,2015-10-09T19:55:01,"","",,3,,,
33052009,2,,33050377,2015-10-10T08:39:14,,0,,"<p>Ember provides it's own array implementation in <a href=""http://emberjs.com/api/classes/Ember.Array.html"" rel=""nofollow"">Ember.Array</a>/<a href=""http://emberjs.com/api/classes/Ember.MutableArray.html"" rel=""nofollow"">Ember.MutableArray</a> that adds a lot of nifty things, like being properly observable in the Ember ecosystem. The Ember.MutableArray in particular (or rather <a href=""http://emberjs.com/api/classes/Ember.MutableEnumerable.html"" rel=""nofollow"">Ember.MutableEnumerable</a> if you want to go deep) has a method called <a href=""http://emberjs.com/api/classes/Ember.MutableArray.html#method_pushObject"" rel=""nofollow"">pushObject(obj)</a> that <code>Push the object onto the end of the array.</code> and also notifies any subscribers.</p>&#xA;&#xA;<p>Since Ember also is nice enough to add these to the regular Arrays prototype to make it easy for people to get going, you should be able to simply do <code>this.get('model.tags').pushObject(tag);</code> in your code.</p>&#xA;",547640,"",,"",,2015-10-10T08:39:14,"","",,3,,,
32868525,2,,32861103,2015-09-30T14:19:45,,1,,"<p>You have multiple options:</p>&#xA;&#xA;<p><a href=""https://github.com/nwjs/nw.js/wiki/Save-persistent-data-in-app"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/Save-persistent-data-in-app</a></p>&#xA;&#xA;<p>Personally, I used <code>localStorage</code>. For simple needs, it's very easy and mimics browser behaviour.</p>&#xA;",5169236,"",,"",,2015-09-30T14:19:45,"","",,2,,,
32958588,2,,32849755,2015-10-05T21:57:51,,1,,"<p><strong>tl;dr</strong></p>&#xA;&#xA;<p>unless communicating peers are on the same local network, there is not way to establish a connection without a rendezvous server (e.g. STUN) or a relay server (e.g. TURN).</p>&#xA;&#xA;<p><hr />&#xA;<strong>Explanation</strong></p>&#xA;&#xA;<p>It is misunderstanding that WebRTC enables P2P communication without any servers in between. In most of the cases where peers are not in the same network (i.e. same local network) and are behind NAT devices, it is required to use either <code>STUN</code> or <code>TURN</code> servers (see <a href=""https://w3c.github.io/webrtc-pc/#intro"" rel=""nofollow"">the specs</a>).</p>&#xA;&#xA;<p>Moreover when we talk about multiple peers, we don't talk about multicast or broadcast communication, rather about a multiple number of peer to peer connections.</p>&#xA;",2295964,"",,"",,2015-10-05T21:57:51,"","",,0,,,
32897808,2,,32894925,2015-10-01T22:27:37,,6,,"<p>I managed to figure out what the problem was, and come to find out it wasn't even a javascript problem, All I had to do is mod my CSS for what I want draggable and what I don't. </p>&#xA;&#xA;<p>Because my html and body are also set to draggable that's why I couldn't resize. Here's my solution...</p>&#xA;&#xA;<p>I had to make a new element (<code>div.dialog</code>) and encase my content inside of that. Along with the following CSS.</p>&#xA;&#xA;<pre><code>.dialog {&#xA;  position: absolute;&#xA;  top: 0;&#xA;  left: 0;&#xA;  right: 0;&#xA;  bottom: 0;&#xA;  background: #000;&#xA;  background: rgba(0, 0, 0, 0.5);&#xA;  -webkit-app-region: no-drag;&#xA;}&#xA;.tips {&#xA;  position: absolute;&#xA;  top: 4px;&#xA;  left: 4px;&#xA;  right: 4px;&#xA;  bottom: 4px;&#xA;  -webkit-app-region: drag;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>HTML</strong>:</p>&#xA;&#xA;<pre><code>&lt;div class=""dialog"" data-action=""toggle""&gt;&#xA;  &lt;header class=""tips"" data-action=""toggle""&gt;&#xA;    &lt;div&gt;&#xA;      &lt;nav&gt;&#xA;        [Space] for Snapshot&lt;br&gt;&#xA;        [Esc] to Close&#xA;        &lt;p data-action=""toggle-tips""&gt;[Tab] to Toggle Dialog&lt;/p&gt;&#xA;      &lt;/nav&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/header&gt;&#xA;&lt;/div&gt;&#xA;</code></pre>&#xA;",710887,"",,"",,2015-10-01T22:27:37,"","",,1,,,
33032537,2,,33020900,2015-10-09T07:34:24,,6,,"<p>I'm going to answer my own question, I have found the solution.</p>&#xA;&#xA;<p>With the <code>remote</code> module I can communicate the web process with the main process and call methods of the main process object. So, in the main controller of the AngularJS app I can do:</p>&#xA;&#xA;<pre><code>.controller('AppController', function ($scope, $rootScope, $state,  $http, $location) {&#xA;    $rootScope.remote = require('remote');&#xA;&#xA;    var Menu = $rootScope.remote.require('menu');&#xA;    var App = $rootScope.remote.require('app');&#xA;&#xA;    var menu = new Menu();&#xA;    var tpl = [&#xA;        {&#xA;            label: 'Actions',&#xA;            submenu: [&#xA;                {&#xA;                    label: 'GoPage',&#xA;                    click: function() {&#xA;&#xA;                        $state.go('samepage');&#xA;&#xA;                    }&#xA;                },&#xA;                {&#xA;                    label: 'Quit',&#xA;                    click: function() { App.quit(); },&#xA;                    accelerator: 'Command+Q'&#xA;                }&#xA;            ]&#xA;        }&#xA;&#xA;    ];&#xA;    menu = Menu.buildFromTemplate( tpl );&#xA;    Menu.setApplicationMenu(menu);&#xA;&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>By this way I can call AngularJS functions on menu items clicks and change menu items depending the controller within the application.</p>&#xA;",151689,"",,"",,2015-10-09T07:34:24,"","",,2,,,
33018629,2,,32614463,2015-10-08T14:26:43,,7,,"<p>Webpack is actually designed with Electron development in mind. What I need to do is to to specify in the <code>webpack.config.js</code> file is config <code>target: 'atom'</code>. Webpack will know that it is packaging an Atom (now known as Electron) app, and will not attempt to bundle packages such as <code>fs</code>, or any modules in <code>node_modules</code>. With webpack, I can configure babel to my heart desire, and I also get minification.</p>&#xA;&#xA;<h3>Update</h3>&#xA;&#xA;<p>As @eduludi has mentioned, the value for target is now <code>electron</code>.</p>&#xA;",1196906,"",1196906,"",2016-11-19T17:16:47,2016-11-19T17:16:47,"","",,2,,,
32993213,2,,32971416,2015-10-07T13:14:42,,9,,"<p>Environment variables are a problem in Windows.</p>&#xA;&#xA;<p>As stated Domenic Denicola (one of the main contributors to npm) :</p>&#xA;&#xA;<blockquote>&#xA;  <p>This is not npm's job. You can run custom Node scripts to set environment variables using process.env if you'd like, or use something that isn't environment variables (like JSON).</p>&#xA;  &#xA;  <p>...</p>&#xA;  &#xA;  <p>You can write custom scripts to work around connect's limitations, e.g. in your tests modify process.env. </p>&#xA;  &#xA;  <p>(Reference : <a href=""https://github.com/npm/npm/issues/2800"" rel=""noreferrer"">this issue</a>)</p>&#xA;</blockquote>&#xA;&#xA;<p>So we'll manage through a JS script (Solution inspired on this <a href=""https://github.com/benoror/angular-formly/commit/139951fdae069966bfd092ba0842c207643a25a1"" rel=""noreferrer"">commit</a>) :</p>&#xA;&#xA;<ol>&#xA;<li><p>Create a <code>exec.js</code> file in a <code>scripts</code> directory</p></li>&#xA;<li><p>Copy the following code in <code>exec.js</code> :</p></li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>var exec = require('child_process').exec;&#xA;&#xA;var command_line = 'electron ./app/';&#xA;var environ = (!process.argv[2].indexOf('development')) ? 'development' : 'production';&#xA;&#xA;if(process.platform === 'win32') {&#xA;  // tricks : https://github.com/remy/nodemon/issues/184#issuecomment-87378478 (Just don't add the space after the NODE_ENV variable, just straight to &amp;&amp;:)      &#xA;  command_line = 'set NODE_ENV=' + environ + '&amp;&amp; ' + command_line;&#xA;} else {&#xA;  command_line = 'NODE_ENV=' + environ + ' ' + command_line;&#xA;}&#xA;&#xA;var command = exec(command_line);&#xA;&#xA;command.stdout.on('data', function(data) {&#xA;  process.stdout.write(data);&#xA;});&#xA;command.stderr.on('data', function(data) {&#xA;  process.stderr.write(data);&#xA;});&#xA;command.on('error', function(err) {&#xA;  process.stderr.write(err);&#xA;});&#xA;</code></pre>&#xA;&#xA;&#xA;&#xA;<ol start=""3"">&#xA;<li>Update your <code>package.json</code> :</li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>""scripts"": {&#xA;    ""start"": ""node scripts/exec.js development"",&#xA;}&#xA;</code></pre>&#xA;&#xA;&#xA;&#xA;<ol start=""4"">&#xA;<li>Run npm script : <code>npm run start</code></li>&#xA;</ol>&#xA;&#xA;<p><strong>Edit 05.04.2016</strong></p>&#xA;&#xA;<p>There is a very useful npm package that allows manages this problem : <a href=""https://www.npmjs.com/package/cross-env"" rel=""noreferrer"">cross-env</a>. Run commands that set environment variables across platforms</p>&#xA;",5065183,"",5065183,"",2016-05-04T11:23:18,2016-05-04T11:23:18,"","",,1,,,
32950922,2,,32885657,2015-10-05T14:22:08,,24,,"<p>You can catch it by using the <code>close</code> event of the <a href=""https://github.com/atom/electron/blob/master/docs/api/browser-window.md#event-close"" rel=""noreferrer"">browser-window</a> api. You can try the following to verify this...</p>&#xA;&#xA;<pre><code>var app = require('app');&#xA;&#xA;var force_quit = false;&#xA;&#xA;app.on('ready', function () {        &#xA;    mainWindow = new BrowserWindow({ width: 800, height: 600 });&#xA;&#xA;    mainWindow.on('close', function() { //   &lt;---- Catch close event&#xA;&#xA;        // The dialog box below will open, instead of your app closing.&#xA;        require('dialog').showMessageBox({&#xA;            message: ""Close button has been pressed!"",&#xA;            buttons: [""OK""]&#xA;        });&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<h3>Update:</h3>&#xA;&#xA;<p>To separate functionality you can do the following...</p>&#xA;&#xA;<pre><code>var app = require('app');&#xA;var BrowserWindow = require('browser-window');&#xA;var Menu = require('menu');&#xA;&#xA;var force_quit = false;&#xA;var menu = Menu.buildFromTemplate([&#xA;{&#xA;    label: 'Sample',&#xA;    submenu: [&#xA;        {label: 'About App', selector: 'orderFrontStandardAboutPanel:'},&#xA;        {&#xA;            label: 'Quit', &#xA;            accelerator: 'CmdOrCtrl+Q', &#xA;            click: function() { &#xA;                force_quit=true; app.quit();&#xA;            }&#xA;        }&#xA;    ]&#xA;}]);&#xA;&#xA;app.on('window-all-closed', function(){&#xA;    if(process.platform != 'darwin')&#xA;        app.quit();&#xA;});&#xA;&#xA;app.on('ready', function(){&#xA;&#xA;    Menu.setApplicationMenu(menu);&#xA;&#xA;    mainWindow = new BrowserWindow({width:800, height:600});&#xA;&#xA;    // Continue to handle mainWindow ""close"" event here&#xA;    mainWindow.on('close', function(e){&#xA;        if(!force_quit){&#xA;            e.preventDefault();&#xA;            mainWindow.hide();&#xA;        }&#xA;    });&#xA;&#xA;    // You can use 'before-quit' instead of (or with) the close event&#xA;    app.on('before-quit', function (e) {&#xA;        // Handle menu-item or keyboard shortcut quit here&#xA;        if(!force_quit){&#xA;            e.preventDefault();&#xA;            mainWindow.hide();&#xA;        }&#xA;    });&#xA;&#xA;    // Remove mainWindow.on('closed'), as it is redundant&#xA;&#xA;    app.on('activate-with-no-open-windows', function(){&#xA;        mainWindow.show();&#xA;    });&#xA;});&#xA;&#xA;// This is another place to handle events after all windows are closed&#xA;app.on('will-quit', function () {&#xA;    // This is a good place to add tests insuring the app is still&#xA;    // responsive and all windows are closed.&#xA;    console.log(""will-quit"");&#xA;    mainWindow = null;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The above code uses the <code>before-quit</code> <a href=""https://github.com/atom/electron/blob/master/docs/api/app.md#event-before-quit"" rel=""noreferrer"">event handler</a> to handle app ""close"" events on the app api. Browser-window ""close"" events are still handled on the browser-window api by <code>mainWindow.on('close')</code>.</p>&#xA;&#xA;<p>Additionally, the <code>will-quit</code> event is a better place to test for problems before the app closes completely.</p>&#xA;",1846224,"",1846224,"",2015-10-07T18:54:40,2015-10-07T18:54:40,"","",,4,,,
16954892,2,,16530411,2013-06-06T06:14:26,,1,,"<p>It has to do with the nature of App Cache itself.</p>&#xA;&#xA;<p>You specify a manifest file that lists all the static assets required for your app to run offline. You don't have any programmatic access to the cache to add and remove files via JS.</p>&#xA;&#xA;<p>So for a node-webkit app, it'd make more sense to fetch these files and store them in the Application Support folder (Or AppData, depending on the platform). That's where the node.js part is really useful, the file IO stuff.</p>&#xA;",1487169,"",,"",,2013-06-06T06:14:26,"","",,4,,,
22260635,2,,22260552,2014-03-07T21:04:06,,1,,"<p>In your controller:</p>&#xA;&#xA;<pre><code>CustomerService.getAllCustomers().then(function(customers){&#xA;  if(customers){&#xA;   $scope.customers = customers;&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The promise is not what you think it is :).</p>&#xA;&#xA;<p>Edit: Also as I said in the comments, I wouldn't perform mysql queries directly from angularJS. Use nodeJS or other server side frameworks to do it.</p>&#xA;&#xA;<p>Edit2: The solution this query problem in particular was to use $scope.$apply in the callback method. This has to do with the digest cycle: <a href=""https://stackoverflow.com/questions/15112584/using-scope-watch-and-scope-apply"">How do I use $scope.$watch and $scope.$apply in AngularJS?</a></p>&#xA;",1628387,"",-1,"",2017-05-23T12:28:45,2014-03-07T21:50:07,"","",,9,,,
22464264,2,,22448850,2014-03-17T20:07:12,,1,,<p>Read the advice the other way around: </p>&#xA;&#xA;<p>Your <code>package.json</code> keeps intact; simply you should launch <code>npm install</code> at the root of the folder for each platform you target to ensure the fetched modules targets the platform.</p>&#xA;,313353,"",,"",,2014-03-17T20:07:12,"","",,0,,,
22353442,2,,22353074,2014-03-12T13:43:43,,3,,"<p>You can use the require function to do this at once.</p>&#xA;&#xA;<pre><code>var settings = require('path/to/settings.json');&#xA;// settings is your JSON parsed object&#xA;</code></pre>&#xA;&#xA;<p>To your real question, <code>FS module</code> is going to be as fast or faster than jQuery.getJSON because in the best case scenario, if jQuery.getJSON even actually works in loading a local file, jQuery.getJSON will have boiler plate code which at the end will use the Node's core FS module. More likely, jQuery.getJSON might only work for HTTP protocol request (haven't looked at the nodejs port) whereas you are trying to load a local file. </p>&#xA;",1754832,"",,"",,2014-03-12T13:43:43,"","",,2,,,
22391320,2,,22390963,2014-03-13T21:28:20,,3,,"<p>OK, so I'm answering my own question here... don't use:</p>&#xA;&#xA;<pre><code>""kiosk"":""true""&#xA;</code></pre>&#xA;&#xA;<p>Instead use</p>&#xA;&#xA;<pre><code>""kiosk"":true&#xA;</code></pre>&#xA;&#xA;<p>I was under the impression JSON always uses quotes around properties...</p>&#xA;",1083572,"",,"",,2014-03-13T21:28:20,"","",,1,,,
22473598,2,,22254375,2014-03-18T08:08:44,,4,,"<blockquote>&#xA;  <p>EXCERPT from your question: ""<em>I don't really care if that's IE</em>""</p>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://code.google.com/p/phpdesktop/"" rel=""nofollow"">https://code.google.com/p/phpdesktop/</a></p>&#xA;&#xA;<p>You can try the <em>PHP Desktop MSIE</em> from the link above, whose minified version is only <strong>5.823 MB</strong></p>&#xA;",1564698,"",,"",,2014-03-18T08:08:44,"","",,1,,,
56449671,2,,56293341,2019-06-04T18:48:19,,0,,"<p>Try to remove the <code>include: defaultInclude</code> and then put a entry point. Your webpack.config file should be like this:</p>&#xA;&#xA;<pre><code>const webpack = require('webpack')&#xA;const path = require('path')&#xA;const HtmlWebpackPlugin = require('html-webpack-plugin')&#xA;const BabiliPlugin = require('babili-webpack-plugin')&#xA;const MiniCssExtractPlugin = require('mini-css-extract-plugin')&#xA;&#xA;const defaultInclude = path.resolve(__dirname, 'src')&#xA;&#xA;module.exports = {&#xA;  entry: defaultInclude,&#xA;  module: {&#xA;    rules: [&#xA;      {&#xA;        test: /\.css$/,&#xA;        use: [&#xA;          MiniCssExtractPlugin.loader,&#xA;          'css-loader',&#xA;          'postcss-loader'&#xA;        ]&#xA;      },&#xA;      {&#xA;        test: /(\.scss|\.sass)$/,&#xA;        exclude: /node_modules/,&#xA;        use: [&#xA;          MiniCssExtractPlugin.loader,&#xA;          'css-loader',&#xA;          'postcss-loader',&#xA;          'sass-loader'&#xA;        ]&#xA;      },&#xA;      {&#xA;        test: /\.jsx?$/,&#xA;        use: [{ loader: 'babel-loader' }]&#xA;      },&#xA;      {&#xA;        test: /\.(jpe?g|png|gif)$/,&#xA;        use: [{ loader: 'file-loader?name=img/[name]__[hash:base64:5].[ext]' }]&#xA;      },&#xA;      {&#xA;        test: /\.(eot|svg|ttf|woff|woff2)$/,&#xA;        use: [{ loader: 'file-loader?name=font/[name]__[hash:base64:5].[ext]' }]&#xA;      }&#xA;    ]&#xA;  },&#xA;  target: 'electron-renderer',&#xA;  plugins: [&#xA;    new HtmlWebpackPlugin(),&#xA;    new MiniCssExtractPlugin({&#xA;      filename: 'bundle.css',&#xA;      chunkFilename: '[id].css'&#xA;    }),&#xA;    new webpack.DefinePlugin({&#xA;      'process.env.NODE_ENV': JSON.stringify('production')&#xA;    }),&#xA;    new BabiliPlugin()&#xA;  ],&#xA;  stats: {&#xA;    colors: true,&#xA;    children: false,&#xA;    chunks: false,&#xA;    modules: false&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",10621316,"",10621316,"",2019-06-05T12:27:55,2019-06-05T12:27:55,"","",,0,,,
56507035,2,,56504458,2019-06-08T13:52:32,,0,,"<p>The problem is that on each new page Firebase Authentication will check whether the user's sign-in token is still valid. Since this may take some time (and require calling a server), this happens asynchronously. And by the time your <code>console.log(firebase.auth().currentUser)</code> runs, the process hasn't completed yet.</p>&#xA;&#xA;<p>That's why you'll want to <a href=""https://firebase.google.com/docs/auth/web/manage-users#get_the_currently_signed-in_user"" rel=""nofollow noreferrer"">use an <code>onAuthStateChanged</code> listener</a> to detect the authentication state of the user:</p>&#xA;&#xA;<pre><code>firebase.auth().onAuthStateChanged(function(user) {&#xA;  if (user) {&#xA;    // User is signed in.&#xA;  } else {&#xA;    // No user is signed in.&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",209103,"",,"",,2019-06-08T13:52:32,"","",,0,,,
56512275,2,,56512167,2019-06-09T05:43:58,,1,,"<p>When using typescript, you have to use the typescript module import syntax (similar to ESModule import), else typescript will not import the types and see BrowserWindow as a variable defined through <code>require()</code></p>&#xA;&#xA;<pre><code>import { app, BrowserWindow, ipcMain } from 'electron'&#xA;</code></pre>&#xA;",9680534,"",,"",,2019-06-09T05:43:58,"","",,0,,,
56540657,2,,56473168,2019-06-11T09:33:18,,1,,"<p>I change <code>package.json</code></p>&#xA;&#xA;<p>package.json:</p>&#xA;&#xA;<pre><code> {&#xA;  ""name"": ""electron-quick-start"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""description"": ""A minimal Electron application"",&#xA;  ""main"": ""main.js"",&#xA;  ""scripts"": {&#xA;    ""start"": ""electron .""&#xA;  },&#xA;  ""repository"": ""https://github.com/electron/electron-quick-start"",&#xA;  ""keywords"": [&#xA;    ""Electron"",&#xA;    ""quick"",&#xA;    ""start"",&#xA;    ""tutorial"",&#xA;    ""demo""&#xA;  ],&#xA;  ""author"": ""GitHub"",&#xA;  ""license"": ""CC0-1.0"",&#xA;  ""devDependencies"": {&#xA;    ""electron"": ""^5.0.2"",&#xA;    ""electron-rebuild"": ""^1.8.5""&#xA;  },&#xA;  ""dependencies"": {&#xA;    ""serialport"": ""^7.1.5""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Download electron-rebuild, and then download serialport <code>npm install -g serialport</code>. After all of that I did:</p>&#xA;&#xA;<pre><code>$ npm install&#xA;$ ./node_modules/.bin/electron-rebuild&#xA;$ npm start&#xA;</code></pre>&#xA;&#xA;<p>And it's working fine now</p>&#xA;",10008104,"",,"",,2019-06-11T09:33:18,"","",,0,,,
56546164,2,,56541971,2019-06-11T14:37:01,,1,,"<p>I use `path.join`` and specify the specific path for internal assets – since I know it in advance and it isn't going to change:</p>&#xA;&#xA;<pre><code>var p1 = path.join(__dirname,'preferences"", 'design.ini');&#xA;</code></pre>&#xA;&#xA;<p>Haven't had any problems – even with <code>asar</code> enabled.</p>&#xA;",840992,"",,"",,2019-06-11T14:37:01,"","",,0,,,
56553353,2,,56537199,2019-06-12T00:57:42,,0,,"<p>I have figured out how to run a bash script from my electron app.</p>&#xA;&#xA;<p>I utilised <a href=""https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"" rel=""nofollow noreferrer"">child_process.exec</a> to execute shell scripts in the command line environment. </p>&#xA;&#xA;<pre><code>const {execSync} = require('child_process')&#xA;&#xA;execSync('bash ./test.sh', {stdio: 'inherit', cwd: '/Users/user_name/utils/visual-regression-testing/src/bash'})&#xA;</code></pre>&#xA;&#xA;<p>Worked a treat with <code>cwd</code> being the folder to execute the command from. </p>&#xA;&#xA;<p>Hope it helps anyone else with the same issue. </p>&#xA;",2067987,"",,"",,2019-06-12T00:57:42,"","",,0,,,
56568115,2,,53963672,2019-06-12T18:12:56,,2,,"<p>I spent a few days working on this myself, and based on that time, this is what I have come up with.  </p>&#xA;&#xA;<p>Electron versions specify a version of Chromium that they are using, and Chromium has a fork of FFMPEG that it builds from source to generate the <code>ffmpeg.dll</code> file that goes to Electron builds for Windows.  I traced a rough version of FFMPEG from a version of Electron with the following steps:</p>&#xA;&#xA;<ul>&#xA;<li>Go to <a href=""https://github.com/electron/electron"" rel=""nofollow noreferrer"">https://github.com/electron/electron</a> and find desired version tag (e.g. <code>v5.0.3</code>)</li>&#xA;<li>View <code>DEPS</code> file, and copy <code>chromium_version</code></li>&#xA;<li>Go to <a href=""https://chromium.googlesource.com/chromium/src.git/+/refs/tags/[chromium_version]"" rel=""nofollow noreferrer"">https://chromium.googlesource.com/chromium/src.git/+/refs/tags/[chromium_version]</a> (e.g. <a href=""https://chromium.googlesource.com/chromium/src.git/+/refs/tags/76.0.3809.22"" rel=""nofollow noreferrer"">https://chromium.googlesource.com/chromium/src.git/+/refs/tags/76.0.3809.22</a>)</li>&#xA;<li>View <code>DEPS</code> file, and search for <code>src/third_party/ffmpeg</code></li>&#xA;<li>Copy the Git commit hash at the end of the next line (e.g. <code>41268576ad9a8b760287101f4f58d0ef468798af</code>)</li>&#xA;<li>Go to <a href=""https://chromium.googlesource.com/chromium/third_party/ffmpeg/+/[ffmpeg_commit]"" rel=""nofollow noreferrer"">https://chromium.googlesource.com/chromium/third_party/ffmpeg/+/[ffmpeg_commit]</a> (e.g. <a href=""https://chromium.googlesource.com/chromium/third_party/ffmpeg/+/41268576ad9a8b760287101f4f58d0ef468798af"" rel=""nofollow noreferrer"">https://chromium.googlesource.com/chromium/third_party/ffmpeg/+/41268576ad9a8b760287101f4f58d0ef468798af</a>)</li>&#xA;<li>View the <code>RELEASE</code> file to get the FFMPEG Release (minor version, with <code>.git</code> at the end, e.g. <code>4.1.git</code>)</li>&#xA;<li>To get a (maybe) better version down to the patch level, compare the date of the commit against <a href=""https://ffmpeg.zeranoe.com/builds/win32/static/"" rel=""nofollow noreferrer"">https://ffmpeg.zeranoe.com/builds/win32/static/</a> for the closest timestamp match</li>&#xA;</ul>&#xA;&#xA;<p>Seems the reason the <code>ffmpeg.dll</code> doesn't have a version is because its built by Chromium from source.</p>&#xA;",1072068,"",,"",,2019-06-12T18:12:56,"","",,0,,,
56576756,2,,55637288,2019-06-13T08:48:09,,0,,"<p>Adding the following to electron-webpack.config.json solved the issue, react-redux has to be whitelisted. </p>&#xA;&#xA;<pre><code>{&#xA;    ""whiteListedModules"": [""react-redux""]&#xA;}&#xA;&#xA;</code></pre>&#xA;",11347264,"",,"",,2019-06-13T08:48:09,"","",,0,,,
56606872,2,,56512420,2019-06-15T02:19:44,,0,,<p>The class was extending Object. When I removed that it worked. </p>&#xA;,441016,"",,"",,2019-06-15T02:19:44,"","",,0,,,
56614934,2,,56612109,2019-06-15T23:30:17,,1,,"<p>If I understand your issue correctly, you are trying to copy an image from within the app bundle to the user's desktop. Use <code>__dirname</code> to reference the directory your code is executing in, and then build the path off of that.</p>&#xA;&#xA;<p>The code below is used by my <code>main.js</code> file, which is in the directory containing my <code>app</code> directory. I use <a href=""https://www.npmjs.com/package/upath"" rel=""nofollow noreferrer"">upath</a> to build the path and <a href=""https://www.npmjs.com/package/fs-jetpack"" rel=""nofollow noreferrer"">jetpack</a> instead of <code>fs</code> for copying</p>&#xA;&#xA;<pre><code>var fromPath = upath.join(__dirname, ""app"", ""assets"", ""image.png"");&#xA;jetpack.copy(fromPath, toPath, { overwrite: true });&#xA;</code></pre>&#xA;",840992,"",840992,"",2019-06-16T14:43:15,2019-06-16T14:43:15,"","",,0,,,
56615176,2,,56611426,2019-06-16T00:27:23,,3,,"<p>Another solution based on <code>indexOf</code> and only the first position of the underscore.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr = [&#xD;&#xA;  'js\\game\\global\\app.js',&#xD;&#xA;  'js\\game\\global\\camera.js',&#xD;&#xA;  'js\\game\\global\\displayGroups.js',&#xD;&#xA;  'js\\game\\global\\dataBase.js',&#xD;&#xA;  'js\\game\\global\\mouse.js',&#xD;&#xA;  'js\\game\\global\\loaders.js',&#xD;&#xA;  'js\\game\\global\\stage.js',&#xD;&#xA;  'js\\game\\global\\polyfill.js',&#xD;&#xA;  'js\\game\\scenes\\scene_boot.js',&#xD;&#xA;  'js\\game\\scenes\\scene_IntroVideo.js',&#xD;&#xA;  'js\\game\\scenes\\scene_loader.js',&#xD;&#xA;  'js\\game\\scenes\\scene_Map1.js',&#xD;&#xA;  'js\\game\\scenes\\scene_Title.js',&#xD;&#xA;  'js\\game\\scenes\\_scene_base.js',&#xD;&#xA;  'js\\game\\scenes\\scene_Loader.js',&#xD;&#xA;  'js\\game\\scenes\\_scenebase.js',&#xD;&#xA;  'js\\game\\scenes\\sceneTit_le.js',&#xD;&#xA;  'js\\game\\scenes\\scene_introVide_o.js',&#xD;&#xA;  'js\\game\\scenes\\sceneIntroVi_deo.js',&#xD;&#xA;];&#xD;&#xA;&#xD;&#xA;arr.sort((a, b) =&gt; {&#xD;&#xA;   const ai = a.indexOf('_');&#xD;&#xA;   const bi = b.indexOf('_');&#xD;&#xA;   return (ai &gt; -1 &amp;&amp; bi &gt; -1 &amp;&amp; (ai - bi)) || -1;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;console.log(arr)</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",8325761,"",,"",,2019-06-16T00:27:23,"","",,0,,,
56618720,2,,56618490,2019-06-16T12:12:19,,1,,"<p>If in a type annotation like in the example above, the <code>typeof</code> operator gives the type of a value. If applied to a variable, it gives the type of the variable. If applied to the class it give the type of the class (not the instance type, but the type representing the class constructor and the static methods. </p>&#xA;&#xA;<pre><code>class Foo {&#xA;  static method(){}&#xA;}&#xA;&#xA;let foo: typeof Foo;&#xA;foo.method();&#xA;new foo()&#xA;&#xA;let o = 1&#xA;let oo: typeof o&#xA;</code></pre>&#xA;",125734,"",,"",,2019-06-16T12:12:19,"","",,0,,,
56637713,2,,56634233,2019-06-17T19:25:56,,0,,"<p>So, after @T.J.Crowder advises, I found that my electron app was running a different version of node and electron. The electron version installed was <code>^5.0.1</code>, but the issue was that I also have <code>electron-prebuilt</code> installed, which has node version <code>6.0.5</code> and electron version <code>1.4.13</code>. &#xA;So this module overrides my node and electron versions. Simply uninstalling it and reinstalling electron did the trick.</p>&#xA;",3178237,"",,"",,2019-06-17T19:25:56,"","",,0,,,
56466374,2,,56465538,2019-06-05T18:49:21,,0,,"<p>You are sending args in renderer</p>&#xA;&#xA;<pre><code>ipcRenderer.send('load', library, resolve(), reject());&#xA;</code></pre>&#xA;&#xA;<p>and trying to receive in main process</p>&#xA;&#xA;<pre><code>function (event, library, succes, error) {...&#xA;</code></pre>&#xA;&#xA;<p>First, you sent <code>resolve()</code>, which isn't function beginning. Promise.resolve() returns Promise, not function.</p>&#xA;&#xA;<p>Secondly, design of Electron's IPC <strong>does not allow</strong> to send non-serializable value. In short, you cannot send function and execute it in other process. You should send signal back to renderer via <code>webContents.send</code> or <code>event.sender.send</code> from main process, then let renderer process resolves promise in process.</p>&#xA;",2742189,"",,"",,2019-06-05T18:49:21,"","",,1,,,
56471965,2,,56471603,2019-06-06T06:29:35,,2,,"<p>It's becuse <code>td</code> tag should be on real table (should have <code>tr</code> and <code>table</code> parent tags). like this:</p>&#xA;&#xA;<pre><code>&lt;table&gt;&#xA;  &lt;tr&gt;&#xA;    &lt;td class=""td""&gt;Test&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;    &lt;td class=""td""&gt;Test&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;</code></pre>&#xA;&#xA;<p>Chrome will create <code>tr</code> tag for <code>td</code> tags if they are outside <code>tr</code>. but electron doesn't.</p>&#xA;",4718434,"",4718434,"",2019-06-06T06:36:45,2019-06-06T06:36:45,"","",,1,,,
56495837,2,,56495714,2019-06-07T14:03:22,,2,,<p>It looks like you forgot to return the promise in getNextProcess.&#xA;<code>await</code> doesn't know what to wait for if you don't give it a promise.</p>&#xA;&#xA;<pre><code>getNextProcess(){&#xA;    return new Promise(res =&gt; {&#xA;        //...&#xA;    });&#xA;}&#xA;</code></pre>&#xA;,4829109,"",,"",,2019-06-07T14:03:22,"","",,1,,,
56502096,2,,56444057,2019-06-07T23:08:18,,1,,<p>Fixed it by adding webPreferences {nodeIntegration: true} to the values of my newly generated Window.</p>&#xA;,8428135,"",,"",,2019-06-07T23:08:18,"","",,1,,,
56507571,2,,56506468,2019-06-08T15:09:44,,3,,"<p>First to answer your question. No, WASM is not safe to store client secrets for the scenario that you are describing.</p>&#xA;&#xA;<p>And your current implementation doesn't seem to be secure as well (from the limited info available).</p>&#xA;&#xA;<p>If you are compiling your code to binary just so that an attacker cannot find your <strong>fixed salt</strong> I got bad news for you. It is very much possible to extract data from a binary file.</p>&#xA;&#xA;<p>Just think of a case where you have your salt stored as a variable inside a c program.</p>&#xA;&#xA;<pre><code>int main() {&#xA; char* mySaltVar = ""my salt"";&#xA; char* b = ""my other string"";&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and you compile this with gcc and create binary. you might think these strings cannot be read as they inside the binary but you can just run <code>strings</code> program on the binary to get the strings inside the binary.</p>&#xA;&#xA;<pre><code>sk$ strings binary.out &#xA;my salt&#xA;my other string&#xA;</code></pre>&#xA;&#xA;<p>The two strings are extracted from the binary.</p>&#xA;&#xA;<p>This is an over simplified example to show that everything in your code is inside the binary. In most of the cases the compiler throws away some info to make the binary as efficient as possible. In such cases attacker would use reverse engineering tools to figure out what is going on inside the binary.</p>&#xA;",5275376,"",,"",,2019-06-08T15:09:44,"","",,1,,,
56556497,2,,56542732,2019-06-12T07:10:10,,1,,<p>I have the same issue. I solved this by downgrade angular version from 8 to 7.2.1 and now it's working fine.&#xA;Steps:</p>&#xA;&#xA;<pre><code>sudo  npm uninstall -g @angular/cli&#xA;npm cache clean --force&#xA;sudo chown -R $USER:$GROUP ~/.npm&#xA;sudo chown -R $USER:$GROUP ~/.config&#xA;sudo  npm install -g @angular/cli@7.2.1&#xA;</code></pre>&#xA;,7657952,"",,"",,2019-06-12T07:10:10,"","",,1,,,
56638480,2,,56638359,2019-06-17T20:28:07,,0,,<p>Jake:</p>&#xA;&#xA;<p>Just another passerby: is it possible that you meant to say </p>&#xA;&#xA;<p>const path = <strong>require</strong> ('path');</p>&#xA;&#xA;<p>and this is a simple syntax issue?</p>&#xA;,11661067,"",,"",,2019-06-17T20:28:07,"","",,1,,,
56443549,2,,56442374,2019-06-04T12:05:58,,1,,"<p>You got 2 problems with reading your file. First is that you can't treat binary data as UTF8 (may not be a real problem with SVG file, but with other images surely is), and the second one is that you have to base64 encode it.</p>&#xA;&#xA;<p>There are many different approaches to base64 encode a blob, but the easiest solution would be to change the method of putting it from <code>put</code> to <code>putAttachment</code>. Something like this:</p>&#xA;&#xA;<p>HTML:</p>&#xA;&#xA;<pre><code>...&#xA;&lt;input type=""file"" id=""inputFile""&gt;&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>JS:</p>&#xA;&#xA;<pre><code>...&#xA;var inputFile = document.querySelector('#inputFile');&#xA;var file = inputFile.files[0];&#xA;db.putAttachment('mydoc', 'myfile', file, file.type).then(...)&#xA;...&#xA;</code></pre>&#xA;",2463948,"",2463948,"",2019-06-04T12:11:39,2019-06-04T12:11:39,"","",,2,,,
56466681,2,,56466355,2019-06-05T19:14:05,,1,,"<p>Most special folders in Windows have an environment variable equivalent that you should be able to use: <a href=""https://docs.microsoft.com/en-us/windows/desktop/shell/knownfolderid"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/windows/desktop/shell/knownfolderid</a></p>&#xA;&#xA;<p>These percent encoded special folders should auto-expand when using in a <strong>path</strong>. There is also a node module that attempts to handle special folders in a cross-platform manner: <a href=""https://www.npmjs.com/package/platform-folders"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/platform-folders</a></p>&#xA;&#xA;<p>According to that documentation, Recent items defaults to <strong>%APPDATA%\Microsoft\Windows\Recent</strong></p>&#xA;",84178,"",,"",,2019-06-05T19:14:05,"","",,2,,,
56508410,2,,56470620,2019-06-08T16:55:34,,6,,"<blockquote>&#xA;  <p>I tried using detectChanges and zone.run() but it did not change&#xA;  anything</p>&#xA;</blockquote>&#xA;&#xA;<p>You were on the right way but maybe didn't use it properly. When you click on menu in electron app you leave ngZone. So the following code should work and ngOnInit should be trigger as I've checked:</p>&#xA;&#xA;<p><strong>app.component.ts</strong></p>&#xA;&#xA;<pre><code>import { NgZone } from '@angular/core';&#xA;...&#xA;export class AppComponent {&#xA;  constructor(...private zone: NgZone) {}&#xA;&#xA;&#xA;  private openSettingsDialog() {&#xA;    this.zone.run(() =&gt; {&#xA;      this.dialog.open(SettingsDialogComponent);&#xA;    });&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/BnmZh.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/BnmZh.png"" alt=""enter image description here""></a></p>&#xA;",5485167,"",,"",,2019-06-08T16:55:34,"","",,2,,,
56543193,2,,56542964,2019-06-11T11:57:51,,1,,"<p>I am not much familiar with your device.but if you have a udp connection listening and forwarding with a port and ip then you can listen to that udp from you node datagram module (<a href=""https://nodejs.org/dist/latest-v10.x/docs/api/dgram.html"" rel=""nofollow noreferrer"">https://nodejs.org/dist/latest-v10.x/docs/api/dgram.html</a>) , then can control the device as well receive data from device to and from</p>&#xA;",9034794,"",,"",,2019-06-11T11:57:51,"","",,2,,,
56604887,2,,56590283,2019-06-14T20:41:18,,0,,"<h1><a href=""https://electronjs.org/docs/api/frameless-window#transparent-window"" rel=""nofollow noreferrer"">Try Electron with a frameless transparent window.</a></h1>&#xA;&#xA;<p>Electron packages up Node and Chromium for desktop applications.</p>&#xA;&#xA;<p>I just tried this out and it worked for me:</p>&#xA;&#xA;<pre><code>git clone https://github.com/electron/electron-quick-start&#xA;# Go into the repository&#xA;cd electron-quick-start&#xA;# Install dependencies&#xA;npm install&#xA;</code></pre>&#xA;&#xA;<p>Edit renderer.js and insert your code above.</p>&#xA;&#xA;<p>Edit the window in main.js</p>&#xA;&#xA;<pre><code>  mainWindow = new BrowserWindow({&#xA;      width: 800,&#xA;      height: 600,&#xA;      frame: false,&#xA;      transparent: true,&#xA;      webPreferences: {&#xA;         preload: path.join(__dirname, 'preload.js')&#xA;      }&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>Then make everything blank in index.html</p>&#xA;",1454250,"",1454250,"",2019-06-14T21:46:34,2019-06-14T21:46:34,"","",,2,,,
56566075,2,,56564344,2019-06-12T15:49:21,,2,,"<p><strong>First Solution (optimal):</strong></p>&#xA;&#xA;<pre><code>browserWindow.addBrowserView(browserView)&#xA;browserWindow.removeBrowserView(browserView)&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/browser-window#winaddbrowserviewbrowserview-experimental"" rel=""nofollow noreferrer"">addBrowserView()</a> &amp;&#xA;<a href=""https://electronjs.org/docs/api/browser-window#winremovebrowserviewbrowserview-experimental"" rel=""nofollow noreferrer"">removeBrowserView()</a>. Removing the browser view is the same as hiding, it will not make the browserView re-render.</p>&#xA;&#xA;<p><strong>Secondary solution (not optimal):</strong></p>&#xA;&#xA;<pre><code>// not optimal if you call more than once because it will constantly add more CSS&#xA;browserView.webContents.insertCSS('html{display: block}')&#xA;browserView.webContents.insertCSS('html{display: none}')&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/web-contents#contentsinsertcsscss"" rel=""nofollow noreferrer"">insertCSS()</a></p>&#xA;",4830093,"",4830093,"",2019-08-23T13:15:34,2019-08-23T13:15:34,"","",,3,,,
56535212,2,,56535157,2019-06-11T01:12:19,,1,,"<p>You're not waiting for the asynchronous AJAX to complete. You need to call the function that depends on the updated DOM as a callback function.</p>&#xA;&#xA;<pre><code>$(document).on('click', '#addseed', () =&gt; {      &#xA;    $("".main"").load(""addseed.html"", loadAndDisplayContacts)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>And in <code>addseed.html</code>, change <code>class=""container main""</code> to just <code>class=""container""</code>. You're loading the file into the <code>main</code> DIV in <code>index.html</code>, it doesn't replace the DIV. So you're creating two DIVs with that class, and the next click loads the file into both of them.</p>&#xA;",1491895,"",1491895,"",2019-06-11T01:26:04,2019-06-11T01:26:04,"","",,4,,,
56633593,2,,56632578,2019-06-17T14:40:12,,2,,"<p>If you activate the Developer Tools, you should see error messages in the Console like such:</p>&#xA;&#xA;<pre class=""lang-none prettyprint-override""><code>Uncaught ReferenceError: process is not defined&#xA;    at index.html:11&#xA;</code></pre>&#xA;&#xA;<p>You need to activate <code>nodeIntegration</code> of the <a href=""https://electronjs.org/docs/api/browser-window#browserwindow"" rel=""nofollow noreferrer"">BrowserWindow</a>, so that the process running in the BrowserWindow (""renderer process"") is allowed to access Node's <code>process</code> object.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    webPreferences: {&#xA;        nodeIntegration: true&#xA;    }&#xA;})&#xA;</code></pre>&#xA;",1335237,"",1335237,"",2019-06-17T14:48:07,2019-06-17T14:48:07,"","",,4,,,
56630457,2,,56630313,2019-06-17T11:33:53,,0,,"<p>You need to include the <a href=""https://www.npmjs.com/package/electron-rebuild"" rel=""nofollow noreferrer"">electron-rebuild</a> package which  rebuilds native Node.js modules against the version of Node.js that your Electron project is using. This allows you to use native Node.js modules in Electron apps without your system version of Node.js matching exactly.</p>&#xA;&#xA;<p>You can install this package using the below command,</p>&#xA;&#xA;<pre><code>npm install --save-dev electron-rebuild&#xA;</code></pre>&#xA;&#xA;<p>Then, whenever you install a new npm package, rerun electron-rebuild:</p>&#xA;&#xA;<pre><code>$(npm bin)/electron-rebuild&#xA;</code></pre>&#xA;&#xA;<p>Or if you're on Windows:</p>&#xA;&#xA;<pre><code>.\node_modules\.bin\electron-rebuild.cmd&#xA;</code></pre>&#xA;&#xA;<p>You can even create an alias as ""rebuild"" in your ""scripts"" section which you can use it whenever it is needed like this.</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ""rebuild"": ""electron-rebuild -f -w yourmodule""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Once you add the above, you can use the below command,</p>&#xA;&#xA;<pre><code>npm run rebuild&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps!</p>&#xA;",1278987,"",,"",,2019-06-17T11:33:53,"","",,5,,,
56503149,2,,56498489,2019-06-08T03:17:21,,2,,"<p>Electron is providing type declarations not the ability to run TypeScript directly. We still need to transpile TypeScript to JavaScript before running it. </p>&#xA;&#xA;<ol>&#xA;<li>Keep your <code>main</code> pointing at <code>index.js</code>.</li>&#xA;<li>Transpile your TypeScript.</li>&#xA;<li>Then call <code>npm start</code>.</li>&#xA;</ol>&#xA;&#xA;<p>In step (2) we will transpile the index.ts and TypeHouse.ts files into JavaScript. Here is how to get started transpiling TypeScript to Javascript. From your project directory run these these commands:</p>&#xA;&#xA;<pre><code>npm install -g typescript&#xA;tsc --init        // create a tsconfig.json file with reasonable default values&#xA;tsc               // transpile your TypeScript to JavaScript&#xA;npm start         // run the output index.js file &#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>Hmm... where do you put the npm run build? Do I replace the value in the start property? I've updated the post with package.json</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""electron-app"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""description"": ""Electron"",&#xA;  ""main"": ""index.js"",&#xA;  ""scripts"": {&#xA;    ""build"": ""tsc"",             &lt;--------------------------&#xA;    ""start"": ""electron .""&#xA;  },&#xA;  ""devDependencies"": {&#xA;    ""electron"": ""^5.0.1"",&#xA;    ""typescript"": ""^3.5.1""&#xA;  },&#xA;  ""dependencies"": {&#xA;    ""lodash"": ""^4.17.11""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>From there you can do <code>npm run build</code> from the command line, which will be the equivalent of doing <code>./node_modules/.bin/tsc</code>.</p>&#xA;",1108891,"",1108891,"",2019-06-09T06:44:50,2019-06-09T06:44:50,"","",,7,,,
37738566,2,,37738222,2016-06-10T01:18:15,,0,,"<p>You could probably make another browser window, and put the notification in that. Alternatively, you could give <a href=""https://stackoverflow.com/questions/35608927/overlay-electron"">this</a> a try.</p>&#xA;",6407432,"",-1,"",2017-05-23T12:24:05,2016-06-10T01:18:15,"","",,5,,,
37914063,2,,37913426,2016-06-20T03:00:26,,0,,"<p>Do you actually need the node-notifier module? If not, you can <code>npm uninstall node-notifier --save</code>, or alternatively, put it only in dev-dependencies and run it with <code>--prune</code> option</p>&#xA;",6407432,"",,"",,2016-06-20T03:00:26,"","",,15,,,
37774103,2,,37773256,2016-06-12T12:13:23,,1,,"<p>I need to download and install node.js from its <a href=""https://nodejs.org/en/"" rel=""nofollow"">official website</a> as @Massimilliano Arione suggested in the question comments.</p>&#xA;&#xA;<p>Then I run Command Prompt or CMD and run this command:</p>&#xA;&#xA;<pre><code>npm install electron&#xA;</code></pre>&#xA;&#xA;<p>That downloaded electron as a winrar archieve named electron-v1.2.2-win32-x64 to C:\Users\Vishal.electron</p>&#xA;&#xA;<p>Then I extracted it to D:\Electron</p>&#xA;&#xA;<p>Then in Command Prompt I ran these commands:</p>&#xA;&#xA;<pre><code>D:&#xA;cd Electron&#xA;electron G:\Work\Electron\Demo&#xA;</code></pre>&#xA;&#xA;<p>where G:\Work\Electron\Demo is the path of my Project.</p>&#xA;&#xA;<p>That's it. Now it runs.</p>&#xA;",2284240,"",,"",,2016-06-12T12:13:23,"","",,0,,,
37776503,2,,37774721,2016-06-12T16:20:06,,1,,"<p>The <a href=""https://developer.chrome.com/extensions/devtools"" rel=""nofollow noreferrer"">Chrome DevTools API</a> doesn't expose anything that would allow you to modify the behaviour of the Console module in an extension from my understanding.</p>&#xA;&#xA;<p>If you need a particular behaviour <em>just for yourself</em>, you could fork the repository and play around with the code. </p>&#xA;&#xA;<p>I spent a little while investigating as a learning task. I inspected the DevTools code by opening up DevTools in un-docked mode, and then opening another instance. I found the area in the code that handles the <code>click</code> event for the Console module.</p>&#xA;&#xA;<ol>&#xA;<li>In the current page, I created an object with two DOM elements, so that you can see that hovering will inspect the elements and clicking actually selects them in the Elements tab.</li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/b1jya.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/b1jya.png"" alt=""Test objects""></a></p>&#xA;&#xA;<ol start=""2"">&#xA;<li>The <code>_messageClicked</code> function in the Console module is invoked at some stage after a <code>click</code> event. I put a breakpoint there because I found <code>click</code> in the code - my best guess, since I don't know the code base at all.</li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/yJUPt.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yJUPt.jpg"" alt=""Inspecting DevTools 1""></a></p>&#xA;&#xA;<ol start=""3"">&#xA;<li>After stepping out of this function, we find <code>mouseClicked</code> is also handling it in the Inspector module, and the <code>reveal</code> function that gets called is supposedly where it actually does the inspect logic. </li>&#xA;</ol>&#xA;&#xA;<p>You could <em>probably</em> add your own logic before this function call to invoke functions in the inspected window. The Inspector module has references to <a href=""https://developer.chrome.com/extensions/devtools_inspectedWindow"" rel=""nofollow noreferrer"">chrome.devtools.inspectedWindow</a>.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/OA1ta.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OA1ta.png"" alt=""Inspecting DevTools 2""></a></p>&#xA;&#xA;<p>If you can get something working here, the downside is you won't have any of the new features or updates for Chrome DevTools, so it would really just be a local modification of DevTools. If you are able to add a more general feature that is not specific to your own code, you could try suggesting it on the <a href=""https://www.chromium.org/developers/discussion-groups"" rel=""nofollow noreferrer"">Chromium Projects</a> site, and possible make a pull request. </p>&#xA;&#xA;<p>It seems like a bit of work would be involved either way.</p>&#xA;",1814840,"",,"",,2016-06-12T16:20:06,"","",,1,,,
37806203,2,,37805588,2016-06-14T07:58:42,,1,,"<p>Why are you trying to package it on version 0.35, have you tried to package a newer version? Try that.</p>&#xA;",6407432,"",,"",,2016-06-14T07:58:42,"","",,9,,,
37806603,2,,37795031,2016-06-14T08:19:31,,1,,"<p>There is several ways to draw vector graphics on Web Platform.</p>&#xA;&#xA;<p>Frist one, as mentioned in comments, SVG. It's perfectly fine if your graphics are mainly static or aren't extensively updated. For example, our Maps API uses SVG in some cases and it's sufficiently performant. And it's substantially easier to use that other options.</p>&#xA;&#xA;<p>The second one is, of course, <a href=""https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D"" rel=""nofollow"">Canvas2D API</a>. For the most, it's just an API to browsers painting backend (e.g., <a href=""https://skia.org"" rel=""nofollow"">Skia</a> for Chrome). The very same backend is used for everything else: HTML, SVG, sometimes even GUI. However, it gives our a bit more control over the rendering. And if your scene is heavily animated and/or needs to be highly interactive, there's good chance you'll be able to make a much more performant rendering that SVG. That's due to ability to make lightweight, highly specialised and thus faster renderer. But there're some catches. Most important would be necessity to implement your own hit test to provide some interactivity for your scene (SVG provider an event model).</p>&#xA;&#xA;<p>If even Canvas2D isn't enough for you, there's a third way and it's WebGL. If used right it should be the most performant one. It provides you most control over resources and rendering itself and it's almost always fully hardware accelerated. But achieving that performance may be a challenge. But there're libraries out there which provides Canvas2D-like API, but powered by WebGL, for example <a href=""http://www.pixijs.com"" rel=""nofollow"">Pixi.js</a>.</p>&#xA;&#xA;<p>About the last part of your question. I don't know about Adobe Illustrator, but Inkscape <a href=""http://bazaar.launchpad.net/~inkscape.dev/inkscape/trunk/view/head:/src/display/drawing-context.h#L129"" rel=""nofollow"">uses</a> <a href=""https://www.cairographics.org"" rel=""nofollow"">Cairo</a>, as, actually, many applications, including Mozilla Firefox. In its turn Cairo can use one of multiple crossplatform or platform specific <a href=""https://www.cairographics.org/backends/"" rel=""nofollow"">backends</a>.</p>&#xA;",747768,"",,"",,2016-06-14T08:19:31,"","",,0,,,
37812983,2,,37799122,2016-06-14T13:07:44,,1,,"<ol>&#xA;<li>What do you mean exactly by ""other platforms""? &#xA;Angular2 is a web framework for the browser. Electron uses the browser, therefore it can be used there. Ionic has a translation layer from Angular to it's native representation.</li>&#xA;</ol>&#xA;&#xA;<p>Angular is built in a way that it can be extended to be used on other platforms though.</p>&#xA;&#xA;<ol start=""2"">&#xA;<li>Angular2 does support injecting services to services. What it doesn't support is declaring providers at service level. That is only supported for <code>bootstrap()</code> and on components or directives.</li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;  <p>I am not keen to add all my dependencies for all of my services at the application level </p>&#xA;</blockquote>&#xA;&#xA;<p>You can create array variables in your module, that contains the required providers. If a module needs providers of several modules it uses or exports, a module can export such a variable that contains such variables from other modules. Provider can be arbitrarily nested. You then can export one or more such top-level variables to be added to <code>bootstrap()</code> or the root component or another component that should define the scope of the provider.</p>&#xA;&#xA;<blockquote>&#xA;  <p>in fact this won't work as I need non singletons. Has anyone developed a workaround for this?</p>&#xA;</blockquote>&#xA;&#xA;<p>The former is not related to non-singletons. Depending on what kind of non-singletons you need there are different ways. </p>&#xA;&#xA;<p>If you add a provider to a component, this component is the root of the scope where a single instance is maintained. This component and all its children (if they don't have the same provider registered) will get the single instance maintained by this provider on every request.</p>&#xA;&#xA;<p>If you register a provider as factory function, you can inject the factory to get a new instance for each call of the factory function.</p>&#xA;",217408,"",,"",,2016-06-14T13:07:44,"","",,3,,,
37835721,2,,37797780,2016-06-15T12:38:57,,1,,"<p>I've known about it for 10 years, I'd imagine, but had never heard of it as being referred to as ""n-tier"" and had to look it up.  The most common multi-tiered pattern in the Node.js world, is ""MVC"".  I am guessing you're used to that pattern, yourself, or the MVVM pattern that I've seen mentioned in .NET circles.</p>&#xA;&#xA;<p>Anyway, I only wanted to make that distinction in hopes of improving your search results; you will probably find better hits with searches for ""MVC"" than for ""n-tier"" in places like npmjs.org.</p>&#xA;&#xA;<p>There are several MVC frameworks available and they should be drop-in ready for Electron development.  Backbone is rather popular, and the first that comes to mind, but there are also many, many, others.</p>&#xA;&#xA;<p>Analogous to the multi-project structures you're probably used to in .NET, you will find that Node.js development is, also, typically subdivided into multiple ""modules"".  Assuming you want to offer your project as open-source, you will build it as multiple NPM modules and push each to NPM.. then you will use <code>npm install xxxxx</code> in your main project to bring them all in.</p>&#xA;&#xA;<p>If you are not planning to publish your modules as open source, you can also look into npmjs.org's private module service or, like us, host your own using a solution such as ""Sinopia"".</p>&#xA;&#xA;<p>Migrating to Node.js can be a bit overwhelming and there will be a lot of information to swallow.  If I could offer two tips that have been invaluable in my own journey, I would say:</p>&#xA;&#xA;<ol>&#xA;<li>Conform to Node.js and its community, do not try to coerce it to conform to you.</li>&#xA;<li>Always try to avoid writing code.  Just about anything, generic, that you can think to write has already been written and is available on NPMjs.org.  Utility libs, frameworks, etc.  It sucks having to learn someone else's code, but it pays dividends, especially in cases where the open-source editions are well support and/or have a large-ish community.</li>&#xA;</ol>&#xA;&#xA;<p>Also, to go one step further on #1 .. you will probably find that NoSQL (especially MongoDB) is often preferred over MySQL in the Node.js circles.  Its another mind bender for those of us who grew up on SQL, but you should, at least, carefully consider it.</p>&#xA;&#xA;<p>Best of luck,</p>&#xA;",2276945,"",,"",,2016-06-15T12:38:57,"","",,0,,,
37849563,2,,37823491,2016-06-16T03:47:00,,1,,"<p>The problem is about Electron uses webm in chromium. The python webkit app uses mp4. Mp4 is not available in the Electron because it's a proprietary format. The solution that I found for control this difference about the contrast was in css filters on the video element.</p>&#xA;&#xA;<pre><code>-webkit-filter: contrast(120%);&#xA;</code></pre>&#xA;&#xA;<p>Article about <a href=""http://www.html5rocks.com/en/tutorials/filters/understanding-css/"" rel=""nofollow"">css filters</a></p>&#xA;",3671417,"",,"",,2016-06-16T03:47:00,"","",,0,,,
37870279,2,,37863129,2016-06-16T22:18:49,,1,,"<p>Well, you can actually use D3.js as a node module, which should solve your issues. See <a href=""https://stackoverflow.com/questions/32774237/can-d3-library-be-used-with-the-electron-atom-shell"">this</a> for instructions.<br>&#xA;<a href=""https://www.npmjs.com/package/d3"" rel=""nofollow noreferrer"">Here</a> is the NPM page for it.</p>&#xA;",6407432,"",-1,"",2017-05-23T10:29:09,2016-06-16T22:18:49,"","",,0,,,
37766911,2,,37713180,2016-06-11T17:57:06,,2,,"<p><code>skipTaskbar: true</code> is to prevent showing your app in the taskbar.</p>&#xA;&#xA;<p>To hide the taskbar altogether use fullscreen or kiosk mode instead</p>&#xA;&#xA;<p><code>fullscreen: true</code>&#xA;or&#xA;<code>kiosk: true</code></p>&#xA;&#xA;<p>EDIT: &#xA;There are some issues open where fullscreen or kiosk modes prevent the transparency of the window. &#xA;A solution that works for me is to run with these flags <code>--enable-transparent-visuals --disable-gpu</code></p>&#xA;&#xA;<p>issue &amp; solution: <a href=""https://github.com/electron/electron/issues/2170#issuecomment-145942717"" rel=""nofollow"">https://github.com/electron/electron/issues/2170#issuecomment-145942717</a></p>&#xA;",3716153,"",3716153,"",2016-06-11T19:00:31,2016-06-11T19:00:31,"","",,3,,,
37859125,2,,37802245,2016-06-16T12:23:21,,2,,"<p>For <strong>electron-release-server</strong> please take a look at <a href=""https://github.com/ArekSredzki/electron-release-server/blob/master/docs/update-windows.md"" rel=""nofollow"">the docs</a>.</p>&#xA;&#xA;<p>The delta-file will be create automatically if you use <em>electron-builder</em>. But in order for this to work <code>remoteReleases</code> must be set to a valid (and reachable) URL <strong>plus</strong> there must at least an empty file called <code>RELEASES</code>. So for the very first build just create an empty file and call it <code>RELEASES</code>.</p>&#xA;&#xA;<p>On every future build there will be a <code>RELEASES</code> file created for you. Threw all the generated files in your release server (overwrite existing <code>RELEASES</code>) and it'll be fine.</p>&#xA;&#xA;<p><strong>Attention:</strong> For <code>electron-release-server</code> you do not need the <code>RELEASES</code> generated by <code>electron-builder</code>. electron-release-server will create one by itself.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>To get started with auto-updates I'd recommend that you set up a dead-simple release-server locally. I. e.: </p>&#xA;&#xA;<ul>&#xA;<li>Create a directory and throw an empty file <code>RELEASES</code> in there. </li>&#xA;<li>Then start a simple webserver pointing at that directory (e. g. <code>cd into/your/dir &amp;&amp; php -S 0.0.0.0:80</code>).</li>&#xA;<li>Edit your <code>package.json</code>: <code>""remoteRelease"": ""http://localhost""</code></li>&#xA;<li>Then build your installer: <code>npm run dist</code>&#xA;It should successfully build and you should see some GET requests on your local server. </li>&#xA;<li>Take the generated files and stuff them into the directory you created.</li>&#xA;<li>Now increment your version and start another build: <code>npm run dist</code>&#xA;You should see some GET requests again and there should be an addition delta-file being created.</li>&#xA;<li>Again stuff all those things into the directory (or for electron-release-server upload the assets .nupkg, .exe and delta into a new release).</li>&#xA;</ul>&#xA;&#xA;<p>Hope that helps. Feel free to comment if something is unclear.</p>&#xA;",890537,"",,"",,2016-06-16T12:23:21,"","",,0,,,
37895014,2,,37892524,2016-06-18T08:42:56,,2,,"<p>I've gone through and analyzed Atom's source myself to determine how this happens, and this is what I've come up with.</p>&#xA;&#xA;<p>Atom packages are required using the <a href=""https://github.com/atom/atom/blob/e8693f45c902f1b371aae15ec01271d841bbc94e/src/package.coffee#L439"" rel=""nofollow"">normal node require</a>. However, according to the <a href=""https://github.com/atom/apm"" rel=""nofollow"">apm</a> readme:</p>&#xA;&#xA;<blockquote>&#xA;  <p>The other major difference is that Atom packages are installed to&#xA;  ~/.atom/packages instead of a local node_modules folder...</p>&#xA;</blockquote>&#xA;&#xA;<p>So the <code>require('atom')</code> package isn't retrieved from a parent <code>node_modules</code> directory like normal node modules. Instead, Atom overrides the module loader to change the behavior a bit.</p>&#xA;&#xA;<p>More specifically, they override <a href=""https://github.com/atom/atom/blob/e8693f45c902f1b371aae15ec01271d841bbc94e/src/module-cache.coffee#L270-L273"" rel=""nofollow""><code>Module._resolveFilename</code></a> like so:</p>&#xA;&#xA;<pre class=""lang-coffeescript prettyprint-override""><code>Module = require 'module'&#xA;&#xA;Module._resolveFilename = (relativePath, parentModule) -&gt;&#xA;  resolvedPath = resolveModulePath(relativePath, parentModule)&#xA;  resolvedPath ?= resolveFilePath(relativePath, parentModule)&#xA;  resolvedPath ? originalResolveFilename(relativePath, parentModule)&#xA;</code></pre>&#xA;&#xA;<p>It attempts to resolve the path of a module with its own module cache logic before defaulting to normal behavior. This is done for a couple reasons that I can tell.</p>&#xA;&#xA;<ol>&#xA;<li>It lets them hardcode the path of builtin modules like <code>'atom'</code>, even though the normal behavior would never have found it.</li>&#xA;<li>It prevents loading package dependencies twice when packages have the same dependency with compatible versions. If packageA loads lodash@4.x.x and later packageB attempts to load lodash@>=3, then Atom steps in and gives packageB the lodash that packageA loaded.</li>&#xA;</ol>&#xA;",515502,"",,"",,2016-06-18T08:42:56,"","",,0,,,
37809066,2,,37793412,2016-06-14T10:10:39,,3,,"<p>If this appears, use ""attr"" before.</p>&#xA;&#xA;<pre><code>&lt;webview *ngIf=""iFrameUrl"" attr.src=""{{iFrameUrl}}""&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;",6028371,"",,"",,2016-06-14T10:10:39,"","",,1,,,
37961557,2,,37960930,2016-06-22T07:40:34,,3,,"<p>Here is missing required parameter <code>userGesture</code> and as a result, you passing function where expected boolean variable.</p>&#xA;&#xA;<p>Try this:</p>&#xA;&#xA;<pre><code>@webviewOutlet.executeJavaScript(""10+2"", false, (n)-&gt; console.log ""#{n}"") &#xA;</code></pre>&#xA;",6475535,"",6475535,"",2016-06-23T05:40:55,2016-06-23T05:40:55,"","",,0,,,
37966935,2,,37948187,2016-06-22T11:38:39,,3,,"<p>Beyond mini-/uglifying your js code (can still be viewed) and creating an .asar package (can be extracted) there is not a whole lot you can do to prevent the visibility of your code.</p>&#xA;&#xA;<p>See also <a href=""https://github.com/electron-userland/electron-packager/issues/152"" rel=""nofollow"">this post</a> on the electron-packager github page:</p>&#xA;&#xA;<blockquote>&#xA;  <p>theres nothing built in to electron to do that, so we don't support&#xA;  anything like that (since we only support what electron supports). you&#xA;  would have to implement that in your own module and run it on your&#xA;  code before using electron-packager -<a href=""https://github.com/electron-userland/electron-packager/issues/152"" rel=""nofollow"">maxogden</a></p>&#xA;</blockquote>&#xA;",1792564,"",,"",,2016-06-22T11:38:39,"","",,5,,,
37965809,2,,37783100,2016-06-22T10:48:58,,4,,<p>Asar is a read-only archive. It just concatenates all the files together into a single blob.</p>&#xA;,157280,"",,"",,2016-06-22T10:48:58,"","",,1,,,
37893140,2,,37884130,2016-06-18T04:08:48,,9,,<p><code>remote</code> is needed only to require other modules from inside a render process. In the main process you just get your modules directly from require('electron'). Which it looks like is done in the example just with <code>remote</code> unnecessarily added.</p>&#xA;&#xA;<p>Render process:</p>&#xA;&#xA;<pre><code>const { remote } = require('electron');&#xA;const { BrowserWindow } = remote;&#xA;</code></pre>&#xA;&#xA;<p>Main process:</p>&#xA;&#xA;<p><code>const { BrowserWindow } = require('electron');</code></p>&#xA;,418710,"",,"",,2016-06-18T04:08:48,"","",,1,,,
37841103,2,,37840566,2016-06-15T16:37:56,,12,,"<p>There are two sides to this issue:</p>&#xA;&#xA;<p>1) winston directly or indirectly depends on color.js, so that dependency automatically gets included, once winston is there. In some older versions of it, it included a dynamic require statement, which leads to this:</p>&#xA;&#xA;<p>2) a dependency has a dynamic require statement that Webpack cannot handle; you can either configure webpack so it can ignore this specific case, or also upgrade winston to a newer version, so color.js will be picked in a variant without that dynamic require (see <a href=""https://github.com/winstonjs/winston/issues/984"" rel=""nofollow noreferrer"">https://github.com/winstonjs/winston/issues/984</a>).</p>&#xA;&#xA;<p>To tell Webpack to get along with the dynamic require, you need to tell Webpack that Winston is an external library.</p>&#xA;&#xA;<p>Here's an example from my webpack.config.js: </p>&#xA;&#xA;<pre><code> externals: {&#xA;    'electron': 'require(""electron"")',&#xA;    'net': 'require(""net"")',&#xA;    'remote': 'require(""remote"")',&#xA;    'shell': 'require(""shell"")',&#xA;    'app': 'require(""app"")',&#xA;    'ipc': 'require(""ipc"")',&#xA;    'fs': 'require(""fs"")',&#xA;    'buffer': 'require(""buffer"")',&#xA;    'winston': 'require(""winston"")',&#xA;    'system': '{}',&#xA;    'file': '{}'&#xA;},&#xA;</code></pre>&#xA;&#xA;<p>To make the logger available in an angular 2 app using electron, create a logger.js file and then wrap it with a global logging service TypeScript file (i.e. logging.service.ts). The logger.js file creates the logger variable with the desired Winston configuration settings.</p>&#xA;&#xA;<p>logger.js:</p>&#xA;&#xA;<pre><code>    var winston = require( 'winston' ),&#xA;    fs = require( 'fs' ),&#xA;    logDir = 'log', // Or read from a configuration&#xA;    env = process.env.NODE_ENV || 'development',&#xA;    logger;&#xA;​&#xA;&#xA;&#xA;     winston.setLevels( winston.config.npm.levels );&#xA;    winston.addColors( winston.config.npm.colors );&#xA;&#xA;    if ( !fs.existsSync( logDir ) ) {&#xA;        // Create the directory if it does not exist&#xA;        fs.mkdirSync( logDir );&#xA;    }&#xA;    logger = new( winston.Logger )( {&#xA;        transports: [&#xA;            new winston.transports.Console( {&#xA;                level: 'warn', // Only write logs of warn level or higher&#xA;                colorize: true&#xA;            } ),&#xA;            new winston.transports.File( {&#xA;                level: env === 'development' ? 'debug' : 'info',&#xA;                filename: logDir + '/logs.log',&#xA;                maxsize: 1024 * 1024 * 10 // 10MB&#xA;            } )&#xA;        ],&#xA;        exceptionHandlers: [&#xA;            new winston.transports.File( {&#xA;                filename: 'log/exceptions.log'&#xA;            } )&#xA;        ]&#xA;    } );&#xA;    ​&#xA;    module.exports = logger;&#xA;</code></pre>&#xA;&#xA;<p>logging.service.ts:</p>&#xA;&#xA;<pre><code>export var LoggerService = require('./logger.js');&#xA;</code></pre>&#xA;&#xA;<p>Now the logging service is available for use throughout the application. </p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre><code>import {LoggerService} from '&lt;path&gt;';&#xA;...    &#xA;LoggerService.log('info', 'Login successful for user ' + this.user.email);&#xA;</code></pre>&#xA;",3658148,"",913651,"",2018-10-26T08:15:07,2018-10-26T08:15:07,"","",,2,,,
37761017,2,,37627064,2016-06-11T07:10:37,,22,,"<p>You have printed this page before loading is finished.</p>&#xA;&#xA;<p>My approach:&#xA;1. create a mainwindow and a (invisible) worker window</p>&#xA;&#xA;<pre><code>import {app, BrowserWindow, Menu, ipcMain, shell} from ""electron"";&#xA;const os = require(""os"");&#xA;const fs = require(""fs"");&#xA;const path = require(""path"");&#xA;&#xA;let mainWindow: Electron.BrowserWindow = undefined;&#xA;let workerWindow: Electron.BrowserWindow = undefined;&#xA;&#xA;async function createWindow() {&#xA;&#xA;    mainWindow = new BrowserWindow();&#xA;    mainWindow.loadURL(""file://"" + __dirname + ""/index.html"");&#xA;    mainWindow.webContents.openDevTools();&#xA;    mainWindow.on(""closed"", () =&gt; {&#xA;        // close worker windows later&#xA;        mainWindow = undefined;&#xA;    });&#xA;&#xA;    workerWindow = new BrowserWindow();&#xA;    workerWindow.loadURL(""file://"" + __dirname + ""/worker.html"");&#xA;    // workerWindow.hide();&#xA;    workerWindow.webContents.openDevTools();&#xA;    workerWindow.on(""closed"", () =&gt; {&#xA;        workerWindow = undefined;&#xA;    });&#xA;}&#xA;&#xA;// retransmit it to workerWindow&#xA;ipcMain.on(""printPDF"", (event: any, content: any) =&gt; {&#xA;    console.log(content);&#xA;    workerWindow.webContents.send(""printPDF"", content);&#xA;});&#xA;// when worker window is ready&#xA;ipcMain.on(""readyToPrintPDF"", (event) =&gt; {&#xA;    const pdfPath = path.join(os.tmpdir(), 'print.pdf');&#xA;    // Use default printing options&#xA;    workerWindow.webContents.printToPDF({}, function (error, data) {&#xA;        if (error) throw error&#xA;        fs.writeFile(pdfPath, data, function (error) {&#xA;            if (error) {&#xA;                throw error&#xA;            }&#xA;            shell.openItem(pdfPath)&#xA;            event.sender.send('wrote-pdf', pdfPath)&#xA;        })&#xA;    })&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>2, mainWindow.html</p>&#xA;&#xA;<pre><code>&lt;head&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;button id=""btn""&gt; Save &lt;/button&gt;&#xA;    &lt;script&gt;&#xA;        const ipcRenderer = require(""electron"").ipcRenderer;&#xA;&#xA;        // cannot send message to other windows directly https://github.com/electron/electron/issues/991&#xA;        function sendCommandToWorker(content) {&#xA;            ipcRenderer.send(""printPDF"", content);&#xA;        }&#xA;&#xA;        document.getElementById(""btn"").addEventListener(""click"", () =&gt; {&#xA;            // send whatever you like&#xA;            sendCommandToWorker(""&lt;h1&gt; hello &lt;/h1&gt;"");&#xA;        });&#xA;    &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;&#xA;<p>3, worker.html</p>&#xA;&#xA;<pre><code>&lt;head&gt; &lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;script&gt;&#xA;        const ipcRenderer = require(""electron"").ipcRenderer;&#xA;&#xA;        ipcRenderer.on(""printPDF"", (event, content) =&gt; {&#xA;            document.body.innerHTML = content;&#xA;&#xA;            ipcRenderer.send(""readyToPrintPDF"");&#xA;        });&#xA;    &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;",5006372,"",5006372,"",2016-06-12T06:15:15,2016-06-12T06:15:15,"","",,9,,,
29097011,2,,29030838,2015-03-17T10:41:50,,0,,"<p>Taking a look at the spec folder of <a href=""https://github.com/atom/atom-shell/tree/master/spec"" rel=""nofollow"">atom-shell</a> provides the necessary details.</p>&#xA;",1224343,"",,"",,2015-03-17T10:41:50,"","",,0,,,
29165956,2,,29030640,2015-03-20T11:56:13,,0,,"<p>The default quota for PERSISTENT storage is 0. You need to use the requestQuota() method from the Quota Management API</p>&#xA;&#xA;<pre><code>webkitStorageInfo.requestQuota(&#xA;  webkitStorageInfo.PERSISTENT&#xA;  newQuotaInBytes,&#xA;  quotaCallback,&#xA;  errorCallback);&#xA;</code></pre>&#xA;",3620741,"",,"",,2015-03-20T11:56:13,"","",,0,,,
29175343,2,,29174755,2015-03-20T20:31:45,,0,,"<p>I think this will give you what you're looking for (fiddle: <a href=""http://jsfiddle.net/a5oux4s8/"" rel=""nofollow"">http://jsfiddle.net/a5oux4s8/</a>):</p>&#xA;&#xA;<pre><code>html, body {&#xA;    height: 100%;&#xA;}&#xA;&#xA;html, body, header, iframe, footer {&#xA;    margin: 0;&#xA;    padding: 0;&#xA;    width: 100%;&#xA;}&#xA;&#xA;header {&#xA;    height: 34px;&#xA;    position: fixed;&#xA;    top: 0;&#xA;    left: 0;&#xA;    background-color: red;&#xA;}&#xA;&#xA;iframe {&#xA;    border: none;&#xA;    height: calc(100% - 51px);&#xA;    margin-top: 34px;&#xA;}&#xA;&#xA;footer {&#xA;    height: 17px;&#xA;    position: fixed;&#xA;    bottom: 0;&#xA;    left: 0;&#xA;    background-color: green;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It will only work if you don't need to support older browsers because of the calc() function (see <a href=""http://caniuse.com/#feat=calc"" rel=""nofollow"">http://caniuse.com/#feat=calc</a>). If you do need to support older browsers, there are ways around it. Just let me know.</p>&#xA;",2026043,"",,"",,2015-03-20T20:31:45,"","",,1,,,
29072728,2,,29041367,2015-03-16T08:50:24,,1,,"<p>May be this will help you <a href=""https://github.com/Gottox/node-webterm"" rel=""nofollow"">https://github.com/Gottox/node-webterm</a> (also on <a href=""http://dailyjs.com/2015/01/22/terminaljs/"" rel=""nofollow"">dailyjs.com</a>)</p>&#xA;&#xA;<p>Only ui: <a href=""http://terminal.jcubic.pl/"" rel=""nofollow"">http://terminal.jcubic.pl/</a></p>&#xA;&#xA;<p>if you will need to make backend by yourself, it's relatively simple: run child process and stream stdout to print, and user input to stdin.</p>&#xA;",1083428,"",,"",,2015-03-16T08:50:24,"","",,0,,,
29082063,2,,27808171,2015-03-16T16:30:41,,1,,"<p>I did some digging in the source and found the reason. It appears that setCrashDumpDir has been disabled in 0.12 for whatever reason.</p>&#xA;&#xA;<p>In <a href=""https://github.com/nwjs/nw.js/blob/master/src/breakpad_win.cc#L778"" rel=""nofollow"">breakpad_win.cc</a>, SetSetCrashDumpPath should have been called from <a href=""https://github.com/nwjs/nw.js/blob/master/src/api/app/app.cc#L182"" rel=""nofollow"">app.cc (nw.app module)</a>.</p>&#xA;&#xA;<p><a href=""https://github.com/nwjs/nw.js/commit/d1dee800e65947fc0610943279a3976ff8c6962c"" rel=""nofollow"">The commit responsible for this was authored by GnorTech and has been disabled since Aug. 29th, 2014</a>.</p>&#xA;&#xA;<p>I'm going to raise a bug report for this.</p>&#xA;&#xA;<p>EDIT:&#xA;Looks like a bug report already exists. <a href=""https://github.com/nwjs/nw.js/issues/3226"" rel=""nofollow"">https://github.com/nwjs/nw.js/issues/3226</a></p>&#xA;",941187,"",,"",,2015-03-16T16:30:41,"","",,0,,,
29177756,2,,29135749,2015-03-21T00:15:04,,1,,"<p>I don't have a device to test this on but it should work. I believe mobile devices will return either 'user' or 'environment' to determine if it's front or rear facing.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var devices = function (devices) {&#xD;&#xA;  for (var i = 0; i !== devices.length; ++i) {&#xD;&#xA;    var camera = devices[i];&#xD;&#xA;    if (camera.kind === 'video' &amp;&amp; camera.facing === 'user') {&#xD;&#xA;       createStream(camera.id);&#xD;&#xA;    } else {&#xD;&#xA;      console.log('No front facing camera');&#xD;&#xA;    } &#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;var createStream = function(id) {&#xD;&#xA;  var settings = {video: {optional: {sourceId: id} }};&#xD;&#xA;  navigator.webkitGetUserMedia(settings, successCallback, errorCallback);&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;MediaStreamTrack.getSources(devices);</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>This basically loops through all of the available devices and checks if it's a video source and that it is facing the user. It will then use the id of that device to create the media stream.</p>&#xA;",3255365,"",,"",,2015-03-21T00:15:04,"","",,0,,,
29202428,2,,27293339,2015-03-23T02:26:38,,1,,"<p>Depends on where the PDF file is hosted, but usually the process goes like this:</p>&#xA;&#xA;<ol>&#xA;<li>create a new browser window object with the size/configs desire for you 'iframe' that isn't going to be an actual iframe</li>&#xA;<li><code>.show()</code> the browser window</li>&#xA;<li><code>.loadUrl(INSERT_PDF_URL)</code> into the browser window</li>&#xA;<li>listen on browser window <code>webContents</code> <code>'did-finish-loading'</code> event, and then either run your JS if it is on the browser side, or <code>.executeJavaScript(YOUR_JS_HERE)</code> if you need it to be run on the renderer side (within the browser window)</li>&#xA;</ol>&#xA;",2719837,"",,"",,2015-03-23T02:26:38,"","",,0,,,
29078623,2,,28972140,2015-03-16T13:58:00,,2,,"<p>Ok so the issue was the ffmpegsumo.dll. At first I tried replacing it with the dll from chrome 39 and 42 and that did not fix my issue. After replacing the file with the ffmpegsumo.dll from Chrome 38.0.2125.122, my issue was fixed and videos played as expected.</p>&#xA;&#xA;<p><a href=""http://s000.tinyupload.com/index.php?file_id=80546501735641471695"" rel=""nofollow"">Chrome 38.0.2125.122 ffmpegsumo.dll 32 bit</a></p>&#xA;&#xA;<p><a href=""http://s000.tinyupload.com/?file_id=98439818087699648975"" rel=""nofollow"">Chrome 38.0.2125.122 ffmpegsumo.dll 64 bit</a></p>&#xA;",4429104,"",,"",,2015-03-16T13:58:00,"","",,2,,,
29159222,2,,25390339,2015-03-20T04:05:23,,2,,"<p>The window passes an argument to the callback function if ""quit"" was clicked, either from the menu bar, or the dock (also on command+Q).&#xA;I'm using this code and it works as expected:</p>&#xA;&#xA;<pre><code>var gui = require('nw.gui'),&#xA;    app = gui.App,&#xA;    win = gui.Window.get();&#xA;&#xA;win.on('close', function (action) {&#xA;    'quit' === action ?&#xA;        app.quit() :&#xA;        win.hide();&#xA;});&#xA;&#xA;app.on('reopen', function(){&#xA;    win.show();&#xA;});&#xA;</code></pre>&#xA;",2950733,"",,"",,2015-03-20T04:05:23,"","",,0,,,
29114810,2,,29095817,2015-03-18T05:36:33,,3,,"<p>I don't know how to allow this, but you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"" rel=""nofollow"">Window.postMessage</a> to make safe communication between frames.</p>&#xA;&#xA;<pre><code> // in parent window&#xA; window.addEventListener(""message"", function (event) {&#xA;    if (event.data == ""closeYourSelf"") window.close();&#xA; }, false);&#xA;&#xA; // in child iframe&#xA; $('button.close').bind('click', function (clickEv) {&#xA;   clickEv.preventDefault();&#xA;   window.top.postMessage(""closeYourSelf"", '*');&#xA; });&#xA;</code></pre>&#xA;",1083428,"",,"",,2015-03-18T05:36:33,"","",,1,,,
32632477,2,,32632198,2015-09-17T14:09:56,,0,,"<p>No need to actually decompile compiled code. Node Webkit is open source, so you can go ahead and check the actual source code, published by the creators.&#xA;Check out <a href=""https://github.com/nwjs/nw.js/"" rel=""nofollow"">nw.js on GitHub</a> (<a href=""https://github.com/nwjs/nw-builder"" rel=""nofollow"">nw-builder</a> on Github as well if relevant).</p>&#xA;",3873012,"",3873012,"",2015-09-17T14:41:52,2015-09-17T14:41:52,"","",,0,,,
32682442,2,,32682165,2015-09-20T17:48:24,,0,,"<p>Looks like <code>editMenu.insert</code> will add the menuitem to the top, but <code>editMenu.append</code> will add it to the bottom. ()</p>&#xA;&#xA;<p>I haven't found a way to remove <code>Dictation</code>, or <code>Emoji &amp; Symbols</code> but was able to solve my problem with the following.</p>&#xA;&#xA;<pre><code>// Append new item to root menu&#xA;editMenu.append(&#xA;  new gui.MenuItem({&#xA;    type: ""normal"",&#xA;    label: 'Replace',&#xA;    key: ""f"",&#xA;    modifiers: ""cmd+alt"",&#xA;    click : function () {&#xA;      $(""[data-action=replace]"").trigger(""click"");&#xA;    }&#xA;  })&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>I was able to successfully remove ""About MyApp"" using the following...</p>&#xA;&#xA;<pre><code>rootMenu.removeAt(1);&#xA;</code></pre>&#xA;",710887,"",710887,"",2015-09-28T11:27:16,2015-09-28T11:27:16,"","",,0,,,
32687647,2,,32680217,2015-09-21T04:56:02,,0,,"<p>NW inherits Chromium's multiprocess architecture: <a href=""https://www.chromium.org/developers/design-documents/multi-process-architecture"" rel=""nofollow"">https://www.chromium.org/developers/design-documents/multi-process-architecture</a></p>&#xA;&#xA;<p>Node.js runs in the same thread as the DOM (web engine) in the renderer process</p>&#xA;",180197,"",,"",,2015-09-21T04:56:02,"","",,2,,,
32609326,2,,32606555,2015-09-16T12:59:47,,1,,"<p>I once used this ""tutorial"": <a href=""https://github.com/nwjs/nw.js/wiki/Save-persistent-data-in-app"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/Save-persistent-data-in-app</a> And everything just worked. I think everything is already included in NW.</p>&#xA;&#xA;<p>Web SQL Database is based on sqlite, so I guess, there's not much difference.</p>&#xA;",1042225,"",,"",,2015-09-16T12:59:47,"","",,0,,,
32641222,2,,32641037,2015-09-17T22:55:27,,1,,"<p>When the page loads, the reel plugin automatically looks for elements with the attribute class=""reel"". See <a href=""http://test.vostrel.net/jquery.reel/docs/jquery.reel.html#Quick-Start"" rel=""nofollow"">the annotated source</a> for more info about this.</p>&#xA;&#xA;<p>According to that documentation, since you are adding an element to the page after the page loads, you may need to call the $.reel.scan() function at the end of your javascript.</p>&#xA;",,user4872511,,"",,2015-09-17T22:55:27,"","",,2,,,
32748936,2,,32735506,2015-09-23T20:31:51,,1,,"<p>It sounds like you've hit the maximum number of allowed files/sockets open.</p>&#xA;&#xA;<p>See this <a href=""https://stackoverflow.com/questions/34588/how-do-i-change-the-number-of-open-files-limit-in-linux"">previous answer</a> for more info.</p>&#xA;",3252835,"",-1,"",2017-05-23T12:29:37,2015-09-23T20:31:51,"","",,1,,,
32618066,2,,32613060,2015-09-16T20:27:35,,2,,"<p>I'm not sure how a screenshot will help reflect the change in the chart, but here's a function that will take a screenshot of the current nw.js window (visible region only) and store it as a png.</p>&#xA;&#xA;<p>You need to use the Window.capturePage function (further documentation here: <a href=""https://github.com/nwjs/nw.js/wiki/window#windowcapturepagecallback--image_format-config_object-"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/window#windowcapturepagecallback--image_format-config_object-</a>).</p>&#xA;&#xA;<p>Note that this uses the config_object parameter introduced in v0.9.3 to specify the format as png and to have the image returned in a buffer.</p>&#xA;&#xA;<pre><code>function takeSnapshot() {&#xA;    var gui = require('nw.gui');&#xA;    var win = gui.Window.get();&#xA;&#xA;    win.capturePage(function(buffer)&#xA;    {&#xA;        require('fs').writeFile('screenshot.png', buffer, function (err) {&#xA;            if (err) throw err;&#xA;            console.log('It\'s saved!');&#xA;        });&#xA;&#xA;    }, { format : 'png', datatype : 'buffer'} );&#xA;}&#xA;</code></pre>&#xA;",271879,"",,"",,2015-09-16T20:27:35,"","",,1,,,
32694724,2,,32694637,2015-09-21T12:01:50,,2,,"<p>When calling <code>listen</code>, you can specify an <code>hostname</code>, request that does not come from the hostname will be dropped. You can assign 127.0.0.1 for you only to access it.</p>&#xA;&#xA;<blockquote>&#xA;  <p><em>server.listen(port[, hostname][, backlog][, callback])</em> - Begin accepting connections on the specified port and hostname. If the hostname is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available, or any IPv4 address (0.0.0.0) otherwise. A port value of zero will assign a random port.</p>&#xA;</blockquote>&#xA;",956660,"",,"",,2015-09-21T12:01:50,"","",,0,,,
32695150,2,,32693835,2015-09-21T12:23:24,,2,,"<p>Try this:</p>&#xA;&#xA;<p>Include the following (standard) module:</p>&#xA;&#xA;<pre><code>var path = require('path');&#xA;</code></pre>&#xA;&#xA;<p>Specify the path as follows:</p>&#xA;&#xA;<pre><code>fs.appendFile(path.resolve(__dirname, './log.txt'), 'Checking problem 2: \n\n');&#xA;</code></pre>&#xA;&#xA;<p>More info on the __dirname global can be found <a href=""https://nodejs.org/docs/latest/api/globals.html#globals_dirname"" rel=""nofollow"">here</a>.</p>&#xA;&#xA;<p><strong>EDIT</strong></p>&#xA;&#xA;<p>Since __dirname is not defined in node-webkit, you'll have to use the following workaround:</p>&#xA;&#xA;<p>Make a file <code>util.js</code> or however you want to call it, containing this line:</p>&#xA;&#xA;<pre><code>exports.dirname = __dirname;&#xA;</code></pre>&#xA;&#xA;<p>The __dirname variable can now be exposed in your main file:</p>&#xA;&#xA;<pre><code>var dirname = require('./util.js').dirname;&#xA;</code></pre>&#xA;&#xA;<p>And replace <code>__dirname</code> by <code>dirname</code> in the code.</p>&#xA;&#xA;<p>Details <a href=""https://github.com/nwjs/nw.js/wiki/Changes-related-to-node#__dirname"" rel=""nofollow"">here</a></p>&#xA;",4948508,"",4948508,"",2015-09-21T13:04:25,2015-09-21T13:04:25,"","",,2,,,
32743402,2,,32730007,2015-09-23T15:16:00,,8,,"<p>This can be accomplished with the <code>defaultPath</code> property in <a href=""https://github.com/atom/electron/blob/master/docs/api/dialog.md"" rel=""noreferrer""><code>dialog.showSaveDialog()</code></a>.</p>&#xA;&#xA;<p>It should be noted that, since it's the <code>defaultPath</code>, you must specify the full file path, not just the name+extension:</p>&#xA;&#xA;<pre><code>dialog.showSaveDialog(&#xA;  { defaultPath: '/Users/username/Documents/my-file.txt' },&#xA;  function (fileName) {&#xA;    // do your stuff here&#xA;});&#xA;</code></pre>&#xA;",731992,"",,"",,2015-09-23T15:16:00,"","",,0,,,
32636751,2,,32636750,2015-09-17T17:46:34,,55,,"<p>Electron has a built-in function called <a href=""https://github.com/atom/electron/blob/master/docs/api/browser-window.md#wininspectelementx-y"" rel=""noreferrer"">win.inspectElement(x, y)</a>.</p>&#xA;&#xA;<p>Including this function as an option in a right-click context menu is possible by creating an Electron <code>Menu</code> with a <code>MenuItem</code>. Call the following in the client (aka <em>renderer</em> process) Javascript:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// Importing this adds a right-click menu with 'Inspect Element' option&#xA;const remote = require('remote')&#xA;const Menu = remote.require('menu')&#xA;const MenuItem = remote.require('menu-item')&#xA;&#xA;let rightClickPosition = null&#xA;&#xA;const menu = new Menu()&#xA;const menuItem = new MenuItem({&#xA;  label: 'Inspect Element',&#xA;  click: () =&gt; {&#xA;    remote.getCurrentWindow().inspectElement(rightClickPosition.x, rightClickPosition.y)&#xA;  }&#xA;})&#xA;menu.append(menuItem)&#xA;&#xA;window.addEventListener('contextmenu', (e) =&gt; {&#xA;  e.preventDefault()&#xA;  rightClickPosition = {x: e.x, y: e.y}&#xA;  menu.popup(remote.getCurrentWindow())&#xA;}, false)&#xA;</code></pre>&#xA;",427339,"",427339,"",2016-03-29T17:46:30,2016-03-29T17:46:30,"","",,4,,,
32781187,2,,32780726,2015-09-25T11:29:38,,74,,"<p>DOM can <em>not</em> be accessed in the main process, only in the renderer that it belongs to.</p>&#xA;&#xA;<p>There is an <code>ipc</code> module, available on <a href=""http://electron.atom.io/docs/v0.37.8/api/ipc-main/"">main process</a> as well as the <a href=""http://electron.atom.io/docs/v0.37.8/api/ipc-renderer/"">renderer process</a> that allows the communication between these two via sync/async messages.</p>&#xA;&#xA;<p>You also can use the <a href=""http://electron.atom.io/docs/v0.37.8/api/remote/"">remote</a> module to call main process API from the renderer, but there's nothing that would allow you to do it the other way around.</p>&#xA;&#xA;<p>If you need to run something in the main process as a response to user action, use the <code>ipc</code> module to invoke the function, then you can return a result to the renderer, also using <code>ipc</code>.</p>&#xA;&#xA;<p><em>Code updated to reflect actual (v0.37.8) API, as @Wolfgang suggested in comment, see edit history for deprecated API, if you are stuck with older version of Electron.</em></p>&#xA;&#xA;<p>Example script in <code>index.html</code>:</p>&#xA;&#xA;<pre><code>var ipc = require('electron').ipcRenderer;&#xA;var authButton = document.getElementById('auth-button');&#xA;authButton.addEventListener('click', function(){&#xA;    ipc.once('actionReply', function(event, response){&#xA;        processResponse(response);&#xA;    })&#xA;    ipc.send('invokeAction', 'someData');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And in the main process:</p>&#xA;&#xA;<pre><code>var ipc = require('electron').ipcMain;&#xA;&#xA;ipc.on('invokeAction', function(event, data){&#xA;    var result = processData(data);&#xA;    event.sender.send('actionReply', result);&#xA;});&#xA;</code></pre>&#xA;",4962525,"",4962525,"",2016-12-06T08:01:10,2016-12-06T08:01:10,"","",,6,,,
31844561,2,,31813286,2015-08-05T23:41:14,,0,,"<p>As @robertklep mentioned in the comment, Adm-Zip simply doesn't support symlinks.</p>&#xA;",721386,"",,"",,2015-08-05T23:41:14,"","",,0,,,
31868047,2,,30438556,2015-08-07T00:53:43,,0,,"<p>Eventually I solved this using a different approach. Since this question was left unanswered for over 2 months now, I will describe which workaround I've used. </p>&#xA;&#xA;<p>Instead of doing the sign-in using Google js library, I used server side authentication. I chose the <a href=""https://developers.google.com/+/web/samples/php"" rel=""nofollow"">Google PHP SDK</a>. This is the flow I used:</p>&#xA;&#xA;<ol>&#xA;<li><p>From node-webkit, I opened a page (php) from my server on a new window.</p>&#xA;&#xA;<pre><code>exports.login_window = window.open(url,{&#xA;    ""position"": ""center"",&#xA;    ""focus"": true&#xA;});&#xA;</code></pre></li>&#xA;<li><p>using Google SDK, I generated an authentication link and redirected the client to that link.</p>&#xA;&#xA;<pre><code>$client = new Google_Client();&#xA;$client-&gt;setClientId($client_id);&#xA;$client-&gt;setClientSecret($client_secret);&#xA;$client-&gt;setRedirectUri($redirect_uri);&#xA;$client-&gt;addScope(""https://www.googleapis.com/auth/userinfo.email"");&#xA;$authUrl = $client-&gt;createAuthUrl();&#xA;header('Location: '.$authUrl);&#xA;</code></pre></li>&#xA;<li><p>once authenticated, the client redirected back to my server.</p></li>&#xA;<li><p>using google API I queried for all the information I needed. Than I stored the information on the document session</p>&#xA;&#xA;<pre><code>""sessionStorage.google_data = "".json_encode($data)."";""&#xA;</code></pre></li>&#xA;<li><p>from the original page (when I opened the login window), I polled the new window session, and once the google_data was there, I pulled it and closed the window. </p>&#xA;&#xA;<pre><code>if (&#xA;    typeof exports.login_window == ""undefined"" ||&#xA;    exports.login_window.window == null ||&#xA;    typeof exports.login_window.window.sessionStorage == ""undefined"" ||&#xA;    typeof exports.login_window.window.sessionStorage.google_data == ""undefined"" ) {&#xA;    setTimeout(function(){&#xA;        check_3p_login();&#xA;    },200);&#xA;} else {&#xA;    var google_data = exports.login_window.window.sessionStorage.google_data;&#xA;   // rest of the code&#xA;}&#xA;</code></pre></li>&#xA;</ol>&#xA;",1393862,"",,"",,2015-08-07T00:53:43,"","",,0,,,
31658435,2,,31657814,2015-07-27T16:27:29,,1,,"<p>Does this work then?</p>&#xA;&#xA;<pre><code>var previousFooBar = 0; // whatever your default is&#xA;$scope.$on('FooBar', function (event, obj) {&#xA; if (obj.foobar &gt; previousFooBar) {&#xA;      FooBarManager.raiseFooBar();&#xA; } else if (obj.foobar &lt; previousFooBar) {&#xA;      FooBarManager.lowerFooBar();&#xA; }&#xA; previousFooBar = obj.foobar;&#xA;});&#xA;</code></pre>&#xA;",278329,"",,"",,2015-07-27T16:27:29,"","",,0,,,
31665072,2,,31621024,2015-07-27T23:30:58,,1,,"<p>As I answered over at <a href=""https://github.com/kripken/lua.vm.js/issues/30"" rel=""nofollow"">https://github.com/kripken/lua.vm.js/issues/30</a> :</p>&#xA;&#xA;<p>lua.vm.js virtualises IO into an in memory virtual file system (using emscripten)&#xA;This is because it's primarily targeted at the browser, where real IO doesn't exist.</p>&#xA;&#xA;<p>If you're running in node, you can use the node file functions:</p>&#xA;&#xA;<pre><code>local file = js.global:require""fs"":open(""/tmp/file.txt"")&#xA;</code></pre>&#xA;",282536,"",,"",,2015-07-27T23:30:58,"","",,0,,,
31716075,2,,31691055,2015-07-30T05:52:55,,1,,"<p>I've found the solution finally (OSX only):</p>&#xA;&#xA;<pre><code>var gui = require('nw.gui');&#xA;var win = gui.Window.get();&#xA;gui.App.on('reopen', function () {&#xA;  win.show();&#xA;});&#xA;</code></pre>&#xA;",4238335,"",,"",,2015-07-30T05:52:55,"","",,0,,,
31861490,2,,31768065,2015-08-06T16:50:55,,2,,"<p>Finally I found out that if you add <code>""single-instance"": false</code> into the <code>package.json</code> file, the app will be able to run multiple instances and each of the instances has its own, separate cookies.</p>&#xA;",5152089,"",,"",,2015-08-06T16:50:55,"","",,0,,,
31804322,2,,31790535,2015-08-04T08:28:55,,4,,"<p>Ok, I've nailed it. I detect the offsets in respect to a known position <code>(0, 0)</code> and then detract it from the desired position. It's not perfect but it works:</p>&#xA;&#xA;<pre><code>      win.resizeTo(128, 128);&#xA;      win.moveTo(0, 0);&#xA;      log(""dbg"", ""win"", ""detected metrics: "" + win.x + "", "" + win.y);&#xA;      win.moveTo(data.left - win.x, data.top - win.y);&#xA;      win.resizeTo(data.width, data.height);&#xA;</code></pre>&#xA;&#xA;<p>The initial resize is necessary for some reason. It looks like the title and borders are not drawn at all on some platforms if the window is not large enough. Next I move it to the origin. The <code>win.x</code> and <code>win.y</code> contain the offsets at this point. The second <code>moveTo()</code> uses the corrected coordinates and finally I resize the window to the actually desired size.</p>&#xA;",3227403,"",,"",,2015-08-04T08:28:55,"","",,0,,,
31812209,2,,31810694,2015-08-04T14:35:55,,5,,"<p>This is a security feature of the iframe. Here is a similar question that talks about loading linked files into an iframe: <a href=""https://stackoverflow.com/questions/11152103/displaying-local-htm-file-in-iframe"">Displaying local htm file in iframe?</a>. </p>&#xA;&#xA;<p>That being said, have you considered using the webview tag instead? <a href=""http://electron.atom.io/docs/v0.30.0/api/web-view-tag/"" rel=""nofollow noreferrer"">http://electron.atom.io/docs/v0.30.0/api/web-view-tag/</a>. The webview tag is very similar to an iframe, but gives you more ability to control the security around it. I tested loading a local file into a webview in the same way you attempt to load frm.html into the iframe and it works flawlessly.</p>&#xA;",3399439,"",-1,"",2017-05-23T11:45:40,2015-08-04T14:35:55,"","",,1,,,
31725712,2,,31394773,2015-07-30T13:54:02,,9,,"<p>End working result was using Winston with a quick change to make it work with Electron. <a href=""https://github.com/dustinblackman/winston"" rel=""nofollow noreferrer"">https://github.com/dustinblackman/winston</a></p>&#xA;&#xA;<p>EDIT:</p>&#xA;&#xA;<p>As this answer is still being viewed, this solution is better. <a href=""https://github.com/dustinblackman/winston-electron"" rel=""nofollow noreferrer"">https://github.com/dustinblackman/winston-electron</a></p>&#xA;",721386,"",721386,"",2016-12-23T16:25:19,2016-12-23T16:25:19,"","",,3,,,
31672770,2,,31670803,2015-07-28T09:46:47,,11,,"<p>Found a fix for <strike>Windows Electron v2.3.1</strike> <code>Windows Electron v0.30.0</code> the code should have listeners for both <code>dragover</code> AND <code>drop</code>.</p>&#xA;&#xA;<pre><code>  document.addEventListener('dragover',function(event){&#xA;    event.preventDefault();&#xA;    return false;&#xA;  },false);&#xA;&#xA;  document.addEventListener('drop',function(event){&#xA;    event.preventDefault();&#xA;    return false;&#xA;  },false);&#xA;</code></pre>&#xA;&#xA;<p>Electron will still redirect to the dropped file if you only listen to <code>dragover</code> or <code>drop</code>.</p>&#xA;&#xA;<p>Cheers!</p>&#xA;",1429811,"",1429811,"",2015-07-29T01:33:21,2015-07-29T01:33:21,"","",,0,,,
31814768,2,,31813947,2015-08-04T16:39:01,,13,,"<p>I'll have to make some assumptions here because I don't own a Mac to test this with. I believe that those red dots on the corner of an app icon are referred to as badges. In Electron's App module there are methods to get/set the badge along with other dock features. Check out <a href=""http://electron.atom.io/docs/v0.30.0/api/app/"" rel=""noreferrer"">http://electron.atom.io/docs/v0.30.0/api/app/</a> for more information. Here are the relevant methods:</p>&#xA;&#xA;<blockquote>&#xA;  <p>app.dock.setBadge(text)</p>&#xA;  &#xA;  <p>text String Sets the string to be displayed in the dock’s badging&#xA;  area.</p>&#xA;  &#xA;  <p>Note: This API is only available on Mac.</p>&#xA;  &#xA;  <p>app.dock.getBadge()</p>&#xA;  &#xA;  <p>Returns the badge string of the dock.</p>&#xA;  &#xA;  <p>Note: This API is only available on Mac.</p>&#xA;</blockquote>&#xA;&#xA;<p>My guess is the code to produce the dot that you see in the example from Slack that you provided would look something like this:</p>&#xA;&#xA;<pre><code>var app = require('app');&#xA;app.dock.setBadge('.');&#xA;</code></pre>&#xA;",3399439,"",,"",,2015-08-04T16:39:01,"","",,4,,,
31785254,2,,31765427,2015-08-03T10:42:08,,16,,"<p>Just use a <em>relative</em> link - this will work (note no slash at the beginning):</p>&#xA;&#xA;<pre><code>&lt;a href=""profile.html""&gt;profile&lt;/a&gt;&#xA;</code></pre>&#xA;&#xA;<p>This is because Electron uses local <code>file://</code> URLs which map to your file system. If you link to <code>/profile.html</code> that will be looking for the file in the root of your drive, and you probably  want it to be loading the file from the same directory instead.</p>&#xA;&#xA;<p>Also if you put the profile.html in a directory called pages you could access it like this:</p>&#xA;&#xA;<pre><code>&lt;a href=""pages/profile.html""&gt;profile&lt;/a&gt;&#xA;</code></pre>&#xA;",31280,"",1415546,"",2016-07-05T16:16:10,2016-07-05T16:16:10,"","",,1,,,
31666154,2,,31641732,2015-07-28T01:51:50,,20,,"<p>After searching around the web a bit I found a bootstrap theme called <a href=""https://github.com/tschundeee/maverix"">Maverix</a>. I don't think it matches OSX perfectly, but it looks pretty darn close. It is open source under MIT so you should be able to bend it to your will. After scanning through there <a href=""http://screenisland.com/maverix/#/maverix"">demo page</a> it even calls out Electron (Atom-Shell) as a good use case: </p>&#xA;&#xA;<blockquote>&#xA;  <p>It is perfect to be used for apps that are based on HTML App&#xA;  Containers such as: MacGap  Node-Webkit  <strong>Github Atom Shell</strong>  Adobe&#xA;  Brackets Shell</p>&#xA;</blockquote>&#xA;&#xA;<p>This seems like it would do exactly what you are looking for.</p>&#xA;",3399439,"",,"",,2015-07-28T01:51:50,"","",,0,,,
31749645,2,,31749625,2015-07-31T15:15:59,,47,,"<p>You can simply use : </p>&#xA;&#xA;<pre><code>require(""shell"").openExternal(""http://www.google.com"")&#xA;</code></pre>&#xA;",3235127,"",,"",,2015-07-31T15:15:59,"","",,4,,,
31759944,2,,31759367,2015-08-01T08:36:09,,148,,"<p><code>console.log</code> works, but where it logs to depends on whether you call it from the main process or the renderer process.</p>&#xA;&#xA;<p>If you call it from the renderer process (i.e. JavaScript that is included from your <code>index.html</code> file) it will be logged to the dev tools window.</p>&#xA;&#xA;<p>If you call it from the main process (i.e. in <code>main.js</code>) it will work the same way as it does in Node - it will log to the terminal window. If you're starting your Electron process from the Terminal using <code>electron .</code> you can see your <code>console.log</code> calls from the main process there.</p>&#xA;",31280,"",,"",,2015-08-01T08:36:09,"","",,10,,,
25069792,2,,24883281,2014-07-31T22:11:36,,1,,"<p>Regarding your architecture: Sure, that should work though it might not be as efficient on Windows as you might like. (Windows doesn't do file change events very well, but then again, what does it do well? ;)</p>&#xA;&#xA;<p>And as far as application configuration files are concerned:</p>&#xA;&#xA;<p>Why don't you save your app config to the user's data directory?</p>&#xA;&#xA;<p>From the <a href=""https://github.com/rogerwang/node-webkit/wiki/App"" rel=""nofollow"">node-webkit API docs</a> describing the <code>nw.gui</code> <code>App</code> object:</p>&#xA;&#xA;<blockquote>&#xA;  <p>nw.gui.App.dataPath </p>&#xA;  &#xA;  <blockquote>&#xA;    <p>Get the application's data path in user's directory.</p>&#xA;    &#xA;    <ul>&#xA;    <li>Windows: %LOCALAPPDATA%/&lt;name&gt;</li>&#xA;    <li>Linux: ~/.config/&lt;name&gt;</li>&#xA;    <li>OSX: ~/Library/Application Support/&lt;name&gt;</li>&#xA;    </ul>&#xA;    &#xA;    <p>where &lt;name&gt; is the field in the manifest.</p>&#xA;  </blockquote>&#xA;</blockquote>&#xA;&#xA;<p>(<em>Note: This means the <code>name</code> field in the app's <code>package.json</code> file. So if your app is named ""Foo"" and you're running under Windows 7 and username ""User"", <code>nw.gui.App.dataPath</code> will return ""C:\Users\User\AppData\Local\Foo""</em>)</p>&#xA;&#xA;<p>I'd recommend you save any app config data as JSON, for ease of loading and access. </p>&#xA;&#xA;<p>From the <a href=""http://nodejs.org/api/modules.html#modules_module_require_id"" rel=""nofollow"">node.js docs</a> description of the <code>require</code> function:</p>&#xA;&#xA;<blockquote>&#xA;  <blockquote>&#xA;    <p><strong>File Modules#</strong></p>&#xA;    &#xA;    <p>If the exact filename is not found, then node will attempt to load the required filename with the added extension of .js, <em><strong>.json</strong></em>, and then .node.</p>&#xA;    &#xA;    <p>.js files are interpreted as JavaScript text files, and <em><strong>.json files are parsed as JSON text files</strong></em>. .node files are interpreted as compiled addon modules loaded with dlopen.</p>&#xA;  </blockquote>&#xA;</blockquote>&#xA;&#xA;<p>(<em>Note: emphasis added for clarity.</em>)</p>&#xA;&#xA;<p><em>Voila! C'est simple!</em></p>&#xA;",747355,"",747355,"",2014-07-31T22:18:29,2014-07-31T22:18:29,"","",,0,,,
25250087,2,,24891647,2014-08-11T18:34:15,,1,,"<p>I understand now that node-webkit is intended for creating desktop apps with HTML5 and not remote controlling websites, so we forget about this question. I did manage to solve the problem with phantomjs/casperjs now.</p>&#xA;",486917,"",486917,"",2014-12-16T16:37:08,2014-12-16T16:37:08,"","",,0,,,
25274585,2,,24859069,2014-08-12T21:46:26,,2,,<p>In NW you can just use <code>process.cwd()</code></p>&#xA;,2068563,"",,"",,2014-08-12T21:46:26,"","",,0,,,
25168125,2,,22438235,2014-08-06T18:59:49,,12,,"<ol>&#xA;<li><p>Use <code>javascript</code>  <strong>window.screen.availHeight</strong> and <strong>window.screen.availWidth</strong> (which excludes window decorations n toolbar) <br/>&#xA;<strong>or</strong>&#xA;<br/>&#xA;<br/>&#xA;<strong>window.screen.height</strong> and <strong>window.screen.width</strong> (which includes window decorations n toolbar) to get the screen resolution.</p></li>&#xA;<li><p>In node-webkit package.json set </p>&#xA;&#xA;<p><strong>""window"": {&#xA;        ""show"": false&#xA;  }</strong>&#xA;this will hide the node-webkit window initially.</p></li>&#xA;<li><p><strong>var appWidth = 400;</strong> <em>// width of your application</em></p></li>&#xA;<li><p>Use <strong>window.moveTo(window.screen.availWidth - appWidth, 40);</strong></p></li>&#xA;<li><p>Use <strong>window.show();</strong> to show the window</p></li>&#xA;</ol>&#xA;&#xA;<p>this allows to place window anywhere on screen</p>&#xA;",3370586,"",3370586,"",2014-08-06T19:05:56,2014-08-06T19:05:56,"","",,3,,,
22046982,2,,21914490,2014-02-26T16:12:45,,0,,"<p><strong>Tested in Joomla 3.2</strong></p>&#xA;&#xA;<p>The two scripts I posted in the question did only half of what I wanted. I.e. They only checked if the login credentials were valid, returned a message and did nothing else.</p>&#xA;&#xA;<p>What I have done is modified <a href=""http://www.hoicoimasti.com/tutorial/215-joomla-api-for-mobile-apps-android-iphone-ipad.html"" rel=""nofollow"">hocoi</a>'s script to log me in as well. NOTE: This happens after you've authenticated and made sure the user has given the right details. Then, to login the user, just use the <code>JFactory::getApplication()-&gt;login($credentials)</code> method like so:</p>&#xA;&#xA;<pre><code>$credentials = array();&#xA;$credentials['username'] = $username;&#xA;$credentials['password'] = $password1;&#xA;&#xA;JFactory::getApplication()-&gt;login($credentials);&#xA;</code></pre>&#xA;&#xA;<p>I also found this piece of code that adds the necessary header cookies once you've logged. This will be useful if you're planning to maintain the login.</p>&#xA;&#xA;<pre><code>if(!isset($_COOKIE['jsid'])){&#xA;    $user = &amp; JFactory::getUser();        &#xA;    $temp_session = $_SESSION; // backup all session data&#xA;    session_write_close();&#xA;    ini_set(""session.save_handler"",""files""); // set session saved hadler on file&#xA;    session_start();&#xA;    $_SESSION = (array)$temp_session['__default']['user']; // data that another php file need to know&#xA;    session_write_close();&#xA;    ini_set(""session.save_handler"",""user""); // put back session saved handler on database&#xA;    $jd = new JSessionStorageDatabase();&#xA;    $jd-&gt;register(); // set required parameters&#xA;    session_start(); // restart //&#xA;    $_SESSION = $temp_session; // restore last session data&#xA;    $e = session_id();&#xA;    setcookie(""jsid"", $e, time()+3600,'/');&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>As @Valentin's answer, you probably want to create a basic API for this. Remote login like this should really be a last resort. I'm using it as an entry point for my local app to get connected via an API key.</p>&#xA;",430773,"",,"",,2014-02-26T16:12:45,"","",,0,,,
22116868,2,,22111250,2014-03-01T16:19:21,,0,,"<p>Looks like since i'm trying to develop a node-webkit app, stuff like the window object are also available in the same context, and the nodejs connection wasn't able to handle it and shut down, this behavior doesn't seem right in any case but removing the ""alert"" lines solved the issue.</p>&#xA;&#xA;<p>I would prefer if it doesn't close the connection but only throw the error and let me fix it and continue but i may be missing something here. I created an issue in the github project:</p>&#xA;&#xA;<p><a href=""https://github.com/LightTable/LightTable/issues/1322"" rel=""nofollow"">https://github.com/LightTable/LightTable/issues/1322</a></p>&#xA;&#xA;<p>Also, i created this entry in the LightTable group to look for answers on how to setup the best environment to develop node-webkit applications in LightTable:</p>&#xA;&#xA;<p><a href=""https://groups.google.com/forum/#!topic/light-table-discussion/_moWl1KQWf8"" rel=""nofollow"">https://groups.google.com/forum/#!topic/light-table-discussion/_moWl1KQWf8</a></p>&#xA;&#xA;<p>More info there...</p>&#xA;&#xA;<p>Thanks.</p>&#xA;",446708,"",446708,"",2014-03-01T22:50:19,2014-03-01T22:50:19,"","",,0,,,
22160550,2,,18841134,2014-03-04T00:35:58,,1,,"<p>If you use the Node Webkit Generator for Yeoman on mac and Linux, you can try replacing the HTML files on the fly: <a href=""https://stackoverflow.com/a/22160360/3232427"">https://stackoverflow.com/a/22160360/3232427</a></p>&#xA;&#xA;<p>However, Windows users will still have to download and replace the exe with the app bundled in it. </p>&#xA;&#xA;<p>Another option is to code a generic HTML/NodeJS app on Node-Webkit, loading/checking the dynamic content from the server and storing it on the Local Storage for offline access.</p>&#xA;&#xA;<p>You will need an abstraction layer to handle that, but this should work on all platforms.</p>&#xA;",3232427,"",-1,"",2017-05-23T11:49:45,2014-03-04T00:35:58,"","",,0,,,
22200907,2,,21495479,2014-03-05T14:41:49,,3,,"<p>Try and see if this shouldn't do the trick, it did for me:</p>&#xA;&#xA;<pre><code>var a_window = window.open('empty.html',{&#xA;  ""position"": ""center"",&#xA;  ""focus"": true,&#xA;  ""toolbar"": false,&#xA;  ""frame"": true&#xA;});&#xA;onload = function() {&#xA;    alert('Help it\'s loaded!');&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Just so you know, I think the onload triggers for every window, so remember to unset it when you don't need it:</p>&#xA;&#xA;<pre><code>onload = null;&#xA;</code></pre>&#xA;&#xA;<p>You can also try this for the individual window:</p>&#xA;&#xA;<pre><code>a_window.onload = function() {&#xA;    alert('Help it\'s loaded!');&#xA;};&#xA;</code></pre>&#xA;",,user328570,358906,"",2014-11-28T09:24:04,2014-11-28T09:24:04,"","",,2,,,
22235480,2,,22235315,2014-03-06T20:40:49,,3,,"<p>Each function created inside the loop closes over the same <code>FilePath</code> (i.e. they don't each get their own copy), which means that they'll each see whatever value that variable has whenever they execute. To make this work how you expect, you need to arrange it so that they <em>do</em> each get their own copy. Since JavaScript variables are scoped to the nearest enclosing function, the way to do that is to wrap the function creation in an immediately-invoked function that receives the desired value as an argument:</p>&#xA;&#xA;<pre><code>(function(FilePath) {&#xA;    parser.on('metadata',  function (result) {&#xA;        if (result.picture.length == 0) {&#xA;            $(""#track-table"").append('&lt;tr path=""'+ FilePath +'""&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;');&#xA;        } else {&#xA;            var picture = base64ArrayBuffer(result.picture[0].data);&#xA;            $(""#track-table"").append('&lt;tr path=""'+ FilePath +'""&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;');     &#xA;        }&#xA;    });&#xA;})(FilePath);&#xA;</code></pre>&#xA;&#xA;<p>In this case, each new function closes over a new <code>FilePath</code>, which produces the wanted result.</p>&#xA;",592746,"",592746,"",2014-03-06T20:46:20,2014-03-06T20:46:20,"","",,2,,,
22250175,2,,19315550,2014-03-07T12:30:55,,6,,"<p>definitely no node-webkit or nedb expert but this is how I did it and it worked.</p>&#xA;&#xA;<p>As already mentioned by mvanderw in the comments, definitely make sure to check the autoload option.</p>&#xA;&#xA;<p>This is for example my configuration for a simple node-webkit/ angular todo app:</p>&#xA;&#xA;<pre><code>var Datastore = require('nedb'),                                                                                                                                              &#xA;    path = require('path'),&#xA;    db = new Datastore({ filename: path.join(require('nw.gui').App.dataPath, 'todo.db'), autoload: true });&#xA;</code></pre>&#xA;&#xA;<p>When I restart the app, all todos are still there and I'm ready to go.</p>&#xA;&#xA;<p>Hope this helps</p>&#xA;&#xA;<p><em>Edit:</em> &#xA;Example as requested by Scott</p>&#xA;&#xA;<pre><code>var Datastore = require('nedb'), &#xA;path = require('path'),&#xA;db = new Datastore({&#xA;  filename:path.join(require('nw.gui').App.dataPath, 'todo.db'),&#xA;  autoload: true&#xA;}); &#xA;&#xA;var todoServices = angular.module('todoServices', []);&#xA;&#xA;todoServices.factory('Todo', function($q) {&#xA;  return { &#xA;    getAll: function(){ &#xA;      var defer = $q.defer();&#xA;      db.find({ &#xA;        //...some criteria&#xA;      },&#xA;      function(err, docs) {&#xA;        defer.resolve(docs);&#xA;      });&#xA;      return defer.promise;&#xA;    }, //...moar code&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Something like this...</p>&#xA;",1892871,"",1892871,"",2015-07-29T07:08:27,2015-07-29T07:08:27,"","",,3,,,
22159985,2,,21827184,2014-03-03T23:46:22,,13,,"<p>You should have a look at the Node-webkit generator for Yeoman:&#xA;<a href=""https://www.npmjs.org/package/generator-node-webkit"">https://www.npmjs.org/package/generator-node-webkit</a></p>&#xA;&#xA;<pre><code>$ npm install -g yo&#xA;$ npm install -g generator-node-webkit&#xA;$ yo node-webkit&#xA;</code></pre>&#xA;&#xA;<p>This will give you a folder with a set of tools to package and test your app for Windows, Mac and Linux. &#xA;Put your code on the <strong>app</strong> folder and run</p>&#xA;&#xA;<pre><code>grunt dist-mac&#xA;</code></pre>&#xA;&#xA;<p>Next, sign up for a developer account at apple <a href=""https://developer.apple.com/programs/mac/"">https://developer.apple.com/programs/mac/</a></p>&#xA;&#xA;<p>And once you're done, grab your app from the <strong>dist</strong> folder and submit it to Apple.&#xA;The submission process may vary from the one for iOS, but you can find all the information on the Mac Dev Center.</p>&#xA;&#xA;<p>Good luck!</p>&#xA;",3232427,"",,"",,2014-03-03T23:46:22,"","",,0,,,
16297129,2,,16296381,2013-04-30T09:59:24,,0,,<p>for 'url' you might write in in the 'main' field.</p>&#xA;&#xA;<p>For quoting it could be written this way '--key</p>&#xA;,180197,"",,"",,2013-04-30T09:59:24,"","",,1,,,
23407668,2,,23407592,2014-05-01T12:27:43,,0,,"<p>Try this:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;var isMaximized = true;&#xA;&#xA;function main(){&#xA;   if (isMaximized){&#xA;      isMaximized = false;&#xA;      win.unmaximize();&#xA;   }else{&#xA;      isMaximized = true;&#xA;      win.maximize();&#xA;   }&#xA;}&#xA;&lt;/script&gt;&#xA;&#xA;&lt;button onclick=""main()""&gt; Maximize &lt;/ button&gt; &#xA;</code></pre>&#xA;&#xA;<p>You can also change the label of the button thanks to this function.</p>&#xA;",3436608,"",290847,"",2014-05-01T12:32:45,2014-05-01T12:32:45,"","",,2,,,
23417920,2,,23155065,2014-05-01T22:42:35,,0,,"<p>I asked the same question in the node webkit Google Group and they answered my question: <a href=""https://groups.google.com/forum/#!topic/node-webkit/n6Gy3obE638"" rel=""nofollow"">https://groups.google.com/forum/#!topic/node-webkit/n6Gy3obE638</a></p>&#xA;",1167646,"",,"",,2014-05-01T22:42:35,"","",,0,,,
23488401,2,,23290362,2014-05-06T07:23:33,,0,,<ol>&#xA;<li>It's a bug with Node-Webkit-v0.9.*</li>&#xA;<li>It's OK if you use Node-Webkit-v.8.* or lower version.</li>&#xA;</ol>&#xA;,3315462,"",,"",,2014-05-06T07:23:33,"","",,0,,,
23385089,2,,23384524,2014-04-30T09:58:32,,1,,"<p><code>window.location.origin</code> only returns the origin. Use the <code>window.location.href</code> to get the full current URI.</p>&#xA;&#xA;<p>Like <code>window.location.href += ""?"" + param + ""="" + value;</code></p>&#xA;&#xA;<p>This wont work if u already have GET parameters in the url. so for that case u have to cut them of.</p>&#xA;&#xA;<pre><code>window.location.href = window.location.href.split('?')[0] + '?' + param + '=' + value;&#xA;</code></pre>&#xA;&#xA;<p>be aware that current parameters will just be cut off. But this is the same like in your example!</p>&#xA;",1458413,"",980344,"",2014-04-30T10:08:21,2014-04-30T10:08:21,"","",,1,,,
23519635,2,,23519407,2014-05-07T13:47:18,,1,,"<p>You can use a counter in the http.get callback and call it using ""bind"" to preserve your data in each call.</p>&#xA;&#xA;<pre><code>var file = e.dataTransfer.files[i].path;&#xA;content = fs.readFileSync(file, ""UTF-8"");&#xA;var lines = content.split(""\n"");&#xA;var counter = 0;&#xA;var callback = function(res, req) {&#xA;  console.log(req);&#xA;  if(res.statusCode == 200){&#xA;    el.className = '';&#xA;    el.innerHTML = this[0] + ':' + this[1] + '\n';&#xA;  }&#xA;  counter++;&#xA;  if(counter == lines.length) {&#xA;    //do whatever you wanna do after all calls&#xA;  }&#xA;};&#xA;for (var n = 0; n &lt; lines.length; n++){&#xA;    var arr = lines[n].split("":"");&#xA;    http.get({&#xA;      host: arr[0], &#xA;      port: arr[1], &#xA;      path: ""http://www.google.fr"", &#xA;      agent: false&#xA;    }, callback.bind(arr));&#xA;}&#xA;</code></pre>&#xA;",1242389,"",,"",,2014-05-07T13:47:18,"","",,3,,,
23438485,2,,23437878,2014-05-02T23:32:40,,2,,"<p>You can use default <a href=""http://nodejs.org/api/crypto.html"" rel=""nofollow"">crypto</a> module to store crypted information in your db .</p>&#xA;",1177115,"",,"",,2014-05-02T23:32:40,"","",,1,,,
23462069,2,,23458892,2014-05-04T22:00:26,,2,,"<p>Here is how you can keep track download progress and choose download directory in with Node-Webki. I was at first trying to download using an XMLHttpRequest in order to monitor download progress but I was having difficulties with the FileSystem API. This did the job just as I wanted, a simple file download with a progress bar. Hope it is helpful. </p>&#xA;&#xA;<pre><code>function download(file_url) {&#xA;    var fs = require('fs');&#xA;    var url = require('url');&#xA;    var http = require('http');&#xA;    var options = {&#xA;        host: url.parse(file_url).host,&#xA;        port: 80,&#xA;        path: url.parse(file_url).pathname&#xA;    };&#xA;    var file_name = url.parse(file_url).pathname.split('/').pop();&#xA;    var file = fs.createWriteStream('./' + file_name);&#xA;    http.get(options, function(res) {&#xA;        var fsize = res.headers['content-length'];&#xA;        res.on('data', function(data) {&#xA;            file.write(data);&#xA;            progress(100 - (((fsize - file.bytesWritten) / fsize) * 100), $('#progressBar'));&#xA;        }).on('end', function() {&#xA;            file.end();&#xA;        });&#xA;    });&#xA;}&#xA;&#xA;function progress(percent, $element) {&#xA;    console.log(""Download: "" + parseInt(percent) + "" %"")&#xA;    var progressBarWidth = percent * $element.width() / 100;&#xA;    $element.find('div').css(""width"", progressBarWidth);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Answer found <a href=""https://github.com/rogerwang/node-webkit/issues/965"" rel=""nofollow"">here</a></p>&#xA;",3003977,"",,"",,2014-05-04T22:00:26,"","",,0,,,
23529430,2,,23526554,2014-05-07T22:14:06,,3,,"<p>Have you tried using <code>$scope.$apply()</code>? When you're calling some classic angular async function such as <code>$http.get()</code>, <code>$scope.$apply()</code> is called at the end automatically. I'm guessing that's the reason it works only in the second example of yours and not in the first. Try adding it after the assignment of <code>$scope.helloworld</code> in the callback. Read <a href=""https://github.com/angular/angular.js/wiki/When-to-use-$scope.$apply%28%29"" rel=""nofollow"">this</a> for more info.</p>&#xA;",3190146,"",102022,"",2015-01-25T21:55:23,2015-01-25T21:55:23,"","",,1,,,
23401575,2,,20609605,2014-05-01T03:28:00,,4,,"<p>I found a solution here <a href=""http://9ijy.net/blog/view/6"" rel=""nofollow"">http://9ijy.net/blog/view/6</a></p>&#xA;&#xA;<p>Step 1 In your html file, add a Input tag block like below:</p>&#xA;&#xA;<pre><code>&lt;input id=""export_file"" type=""file"" nwsaveas style=""display:none"" nwworkingdir=""""/&gt;&#xA;</code></pre>&#xA;&#xA;<p>Step 2 Add a new function in your javascript file like below:</p>&#xA;&#xA;<pre><code>function saveFile(name,data) {&#xA;    var chooser = document.querySelector(name);&#xA;    chooser.addEventListener(""change"", function(evt) {&#xA;      console.log(this.value); // get your file name&#xA;     var fs = require('fs');// save it now&#xA;fs.writeFile(this.value, data, function(err) {&#xA;    if(err) {&#xA;       alert(""error""+err);&#xA;    }&#xA;});&#xA;    }, false);&#xA;&#xA;    chooser.click();  &#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Step 3 Save your file where ever you like by using saveFile(name,data) function like below:</p>&#xA;&#xA;<pre><code>...&#xA;&#xA;_exportCSV=""you data to save"";&#xA;&#xA;saveFile('#export_file',_exportCSV);&#xA;</code></pre>&#xA;",3591588,"",3591588,"",2014-05-01T04:51:52,2014-05-01T04:51:52,"","",,0,,,
23361195,2,,23328328,2014-04-29T09:49:18,,5,,"<p>you'll want to use node-webkit's native API to access the window Object&#xA;... <a href=""https://github.com/rogerwang/node-webkit/wiki/Window"">node-webkit Window API</a></p>&#xA;&#xA;<pre><code>var gui = require('nw.gui');&#xA;var win = gui.Window.get();&#xA;&#xA;var app = angular.module('myApp', []);&#xA;&#xA;app.controller('homeCtrl', [""$scope"", function ($scope) {&#xA;    $scope.close = function() {&#xA;       win.close(); &#xA;    };&#xA;}]);&#xA;</code></pre>&#xA;",1780102,"",,"",,2014-04-29T09:49:18,"","",,1,,,
23511741,2,,23509356,2014-05-07T07:43:52,,75,,"<p>Electron has a page explaining the differences with node-webkit :</p>&#xA;&#xA;<p><a href=""https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md"" rel=""noreferrer"">https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Like Node-Webkit, Electron provides a platform to write desktop&#xA;  applications with JavaScript and HTML, and has Node integration to&#xA;  grant access to low level system in web pages.</p>&#xA;  &#xA;  <p>But there are also fundamental differences between the two projects&#xA;  that make Electron a completely separate product from Node-Webkit:</p>&#xA;  &#xA;  <p>1 - Entry of application</p>&#xA;  &#xA;  <p>In NW.js the main entry point of an application is a web page or a JS&#xA;  script. You specify a html or js file in the package.json and it is&#xA;  opened in a browser window as the application's main window (in case&#xA;  of an html entrypoint) or the script is executed.</p>&#xA;  &#xA;  <p>While in Electron, the entry point is a JavaScript script, instead of&#xA;  providing a URL directly, you need to manually create a browser window&#xA;  and load html file in it with corresponding API. You also need to&#xA;  listen to window events to decide when to quit the application.</p>&#xA;  &#xA;  <p>So Electron works more like the Node.js runtime, and APIs are more low&#xA;  level, you can also use Electron for web testing purpose like&#xA;  phantomjs,</p>&#xA;  &#xA;  <p>2 - Build system</p>&#xA;  &#xA;  <p>In order to avoid the complexity of building the whole Chromium,&#xA;  Electron uses libchromiumcontent to access Chromium's Content API,&#xA;  libchromiumcontent is a single, shared library that includes the&#xA;  Chromium Content module and all its dependencies. So users don't need&#xA;  a powerful machine to build atom-shell.</p>&#xA;  &#xA;  <p>3 - Node integration</p>&#xA;  &#xA;  <p>In Node-Webkit, the Node integration in web pages requires patching&#xA;  Chromium to work, while in Electron we chose a different way to&#xA;  integrate libuv loop to each platform's message loop to avoid hacking&#xA;  Chromium, see the node_bindings code for how that was done.</p>&#xA;  &#xA;  <p>4 - Multi-context</p>&#xA;  &#xA;  <p>If you are an experienced Node-Webkit user, you should be familiar&#xA;  with the concept of Node context and web context, these concepts were&#xA;  invented because of how the Node-Webkit was implemented.</p>&#xA;  &#xA;  <p>By using the multi-context feature of Node, Electron doesn't introduce&#xA;  a new JavaScript context in web pages.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Source code protection</strong></p>&#xA;&#xA;<p><em>Electron</em> is packaging its applications with <a href=""https://www.npmjs.com/package/asar"" rel=""noreferrer"">asar</a>, which contains the applications' unprotected source code. This makes it possible for application 1 to extract application 2 and inject vulnerable scripts, without the user knowing it. You can checkout <a href=""https://github.com/albinekb/enhanced-slack"" rel=""noreferrer"">this project on GitHub to see an example of how to manipulate the Slack app</a> for an example. As for now, <a href=""https://github.com/electron/electron/issues/3041#issuecomment-180504349"" rel=""noreferrer"">the Electron team don't have any plans to implement support for source code protection</a>.</p>&#xA;&#xA;<p><em>NW.js</em> has <a href=""http://docs.nwjs.io/en/latest/For%20Users/Advanced/Protect%20JavaScript%20Source%20Code/"" rel=""noreferrer"">built in support for compiling your source code to protected binaries</a>.</p>&#xA;",1767942,"",6113627,"",2017-10-23T16:05:36,2017-10-23T16:05:36,"","",,5,,,
17493414,2,,17492981,2013-07-05T16:37:16,,0,,<p>Nevermind.  It looks like node-webkit doesn't like to run files located on a network share using the UNC.  </p>&#xA;,634581,"",,"",,2013-07-05T16:37:16,"","",,0,,,
17417137,2,,17394305,2013-07-02T03:55:06,,1,,"<p>This is a bug with the async module, and there's an open issue on Github about this (<a href=""https://github.com/caolan/async/issues/302"" rel=""nofollow"">issue #302</a>.) The trouble is when node creates a new environment (using the vm module), the array checks async uses internally are invalid.</p>&#xA;&#xA;<p>I fixed this by changing the Array check on line 472 in <code>lib/async.js</code> from:</p>&#xA;&#xA;<pre><code>async.waterfall = function (tasks, callback) {&#xA;    callback = callback || function () {};&#xA;    if (tasks.constructor !== Array) {&#xA;</code></pre>&#xA;&#xA;<p>to:</p>&#xA;&#xA;<pre><code>async.waterfall = function (tasks, callback) {&#xA;    callback = callback || function () {};&#xA;    if (!Array.isArray(tasks)) {&#xA;</code></pre>&#xA;&#xA;<p>There are a few pull requests open to fix this issue, so hopefully this will be fixed soon.</p>&#xA;",568420,"",,"",,2013-07-02T03:55:06,"","",,1,,,
17352422,2,,17350092,2013-06-27T20:18:26,,2,,"<p><a href=""http://www.html5rocks.com/en/tutorials/dnd/basics/#toc-dnd-files"" rel=""nofollow"">http://www.html5rocks.com/en/tutorials/dnd/basics/#toc-dnd-files</a></p>&#xA;&#xA;<p><a href=""http://www.thecssninja.com/javascript/gmail-dragout"" rel=""nofollow"">http://www.thecssninja.com/javascript/gmail-dragout</a></p>&#xA;&#xA;<p>The answer is yes. Here is some more text so that I can submit my answer.</p>&#xA;",762844,"",762844,"",2013-06-28T14:14:27,2013-06-28T14:14:27,"","",,1,,,
17536064,2,,17535747,2013-07-08T21:11:34,,2,,"<p>Well, it sounds like a bug. It might be the same issue that causes WebGL not to be available with specific hardware/driver combinations on Windows:</p>&#xA;&#xA;<p><a href=""https://github.com/rogerwang/node-webkit/wiki/Webgl-support-on-windows"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/Webgl-support-on-windows</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>On Windows with some hardware and driver, WebGL won't work until you copy <code>D3DCompiler_43.dll</code> and <code>d3dx9_43.dll</code> to node-webkit's directory, or install <a href=""http://www.microsoft.com/en-us/download/details.aspx?id=8109"" rel=""nofollow"">DirectX 9 redistributable</a>.</p>&#xA;  &#xA;  <p>For license reasons we cannot ship those DLLs.</p>&#xA;</blockquote>&#xA;&#xA;<p>This seems to have fixed a similar problem with <code>backface-visibility</code> reported here:&#xA;<a href=""https://github.com/rogerwang/node-webkit/issues/631"" rel=""nofollow"">CSS: backface-visibility and perspective doesn't work</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>It WORKS! Thanks a lot! I've added two dll files two node-webkit package and it works!</p>&#xA;</blockquote>&#xA;",1392379,"",,"",,2013-07-08T21:11:34,"","",,1,,,
17393668,2,,17392811,2013-06-30T18:44:04,,-1,,"<p>This is a javascript solution</p>&#xA;&#xA;<pre><code>var absolute_path = ""/abs_path/""&#xA;&#xA;document.body.style.background = ""url("" +  absolute_path + ""mydir/myimage.png)""&#xA;</code></pre>&#xA;&#xA;<p>You can do this manually on every element that requires the <code>url()</code> attribute. It should be fairly simple to have a function that goes over a list of predefined <code>selectors</code> and modifying its background path by prepending <code>absolute_path</code>.</p>&#xA;",790439,"",790439,"",2013-07-01T03:35:18,2013-07-01T03:35:18,"","",,7,,,
18254817,2,,18245783,2013-08-15T14:25:36,,0,,"<p>Since your ""handler"" only gets called when the  tag sees a change, you could reset it (after doing your handling -- alert call, in this case) so that every time is like the first time. If you ""reset"" the input tag, however, that fires a change event, so you need to (1)remove the change event listener, (2)reset the input tag to undefined and (3) restore the change event listener.&#xA;Using the new node-webkit 0.7.0 File and Filelist constructors -- this will only work with v0.7.0 -- the following code should work.</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;&#xA;  var chooser = jQuery(""#export_file"");&#xA;&#xA;  function fileHandler (evt) {&#xA;&#xA;    alert(jQuery(this).val());&#xA;&#xA;    var f = new File('',''); &#xA;    var files = new FileList(); &#xA;    files.append(f); &#xA;    chooser.unbind('change'); &#xA;    document.getElementById('export_file').files = files; &#xA;    chooser.change(fileHandler);&#xA;  }&#xA;&#xA;  chooser.change(fileHandler);&#xA;  chooser.trigger('click'); &#xA;&#xA;&lt;/script&gt;  &#xA;</code></pre>&#xA;&#xA;<p>Jonathan</p>&#xA;&#xA;<p>""Windows Desktop App Creation with node-webkit""</p>&#xA;",1991166,"",1991166,"",2013-08-15T16:41:26,2013-08-15T16:41:26,"","",,1,,,
18246595,2,,17944504,2013-08-15T04:59:51,,1,,"<p>I'm the developer of the <a href=""http://www.sparkinspector.com/"" rel=""nofollow"">Spark Inspector</a> tool you mentioned.</p>&#xA;&#xA;<p>I've done a fair bit of development in Node and I think you might enjoy the Firebug inspector for Firefox, or the Chrome Inspector built into Chrome (<a href=""https://developers.google.com/chrome-developer-tools/"" rel=""nofollow"">https://developers.google.com/chrome-developer-tools/</a>). Both of these need your page to be open in the browser, but if your app is web-based and you can pop it into a standard browser window, you're in luck. (If not, it might be worthwhile making it work in a standard browser—even if it'll end up packaged into an app—so you can debug it!)</p>&#xA;&#xA;<p>Hope that helps,</p>&#xA;",100363,"",,"",,2013-08-15T04:59:51,"","",,0,,,
18192351,2,,18183882,2013-08-12T16:44:43,,7,,"<p>I hope this example code will help. (It's taken from my recent eBook introduction to node-webkit.)&#xA;You would need to set the variable ""filePath"" to the full path of ""customApplication.exe""   </p>&#xA;&#xA;<pre><code> var execFile = require &#xA;    ('child_process').execFile, child;&#xA;&#xA; child = execFile(filePath,&#xA;       function(error,stdout,stderr) { &#xA;    if (error) {&#xA;      console.log(error.stack); &#xA;      console.log('Error code: '+ error.code); &#xA;      console.log('Signal received: '+ &#xA;             error.signal);&#xA;      } &#xA;    console.log('Child Process stdout: '+ stdout);&#xA;    console.log('Child Process stderr: '+ stderr);&#xA;  }); &#xA;  child.on('exit', function (code) { &#xA;    console.log('Child process exited '+&#xA;        'with exit code '+ code);&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>Best of luck,</p>&#xA;&#xA;<p>Jonathan Dodd</p>&#xA;&#xA;<p>""Windows Desktop App Creation with node-webkit""</p>&#xA;",1991166,"",,"",,2013-08-12T16:44:43,"","",,3,,,
18250082,2,,18248130,2013-08-15T09:41:20,,8,,<p>I didn't include the <code>-r</code> in my zip command to recursively add sub-directories...so it missed everything in ./js.</p>&#xA;,33522,"",,"",,2013-08-15T09:41:20,"","",,0,,,
18095787,2,,18094029,2013-08-07T06:05:29,,16,,"<p>It sounds like you might be trying to use the web filesystem API. That might be a reasonable solution, it would allow you to run your app as a regular webpage, however the web filesystem API is sandboxed.</p>&#xA;&#xA;<p>node-webkit offers ""Complete support for Node.js APIs,"" which I think means you can use <a href=""http://nodejs.org/api/fs.html"" rel=""noreferrer"">the node.js file system API</a> to write anywhere on the file system. Pretty cool. So something like this should work:</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;fs.writeFile(""path/to/anywhere/test.txt"", ""Hi mom!"", function(err) {&#xA;    if(err) {&#xA;        alert(""error"");&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Also, <a href=""https://groups.google.com/forum/#!topic/node-webkit/ZBD3SVKmPSM"" rel=""noreferrer"">node-webkit web-workers do not support require I hear</a>.  So you'll need to do your filesystem stuff in your main thread.</p>&#xA;",1276321,"",1276321,"",2013-08-07T06:13:15,2013-08-07T06:13:15,"","",,1,,,
48178478,2,,48178322,2018-01-10T00:04:55,,0,,"<p>This is happening due to the fact that <a href=""https://nodejs.org/docs/latest/api/modules.html#modules_caching"" rel=""nofollow noreferrer""><code>require</code> caches its results</a> in <code>require.cache</code>. To get around this, you <em>can</em> just <a href=""https://stackoverflow.com/a/11477602/5767783"">delete the entry in the cache</a>.</p>&#xA;&#xA;<pre><code>// Initially require the file; the result is cached.&#xA;require('../path/to/file.js');&#xA;&#xA;// Delete the cached version of the module.&#xA;delete require.cache[require.resolve('../path/to/file.js')];&#xA;&#xA;// Re-require the file; the file is re-executed and the new result is cached.&#xA;require('../path/to/file.js');&#xA;</code></pre>&#xA;",5767783,"",,"",,2018-01-10T00:04:55,"","",,1,,,
48198620,2,,48198532,2018-01-11T01:32:45,,0,,"<p>Ruby doesn't know you want the output right away, and buffers it for efficiency. If you make it flush the output buffer (<a href=""http://ruby-doc.org/core-2.0.0/IO.html#method-i-flush"" rel=""nofollow noreferrer""><code>IO#flush</code></a>), it works.</p>&#xA;&#xA;<pre><code>while true&#xA;    sleep 2&#xA;    puts 'test'&#xA;    STDOUT.flush&#xA;end&#xA;</code></pre>&#xA;&#xA;<p>Alternately, you can tell Ruby you want all output right away (<a href=""http://ruby-doc.org/core-2.0.0/IO.html#method-i-sync-3D"" rel=""nofollow noreferrer""><code>IO#sync=</code></a>):</p>&#xA;&#xA;<pre><code>STDOUT.sync = true&#xA;while true&#xA;    sleep 2&#xA;    puts 'test'&#xA;end&#xA;</code></pre>&#xA;&#xA;<p>Incidentally, your original code works on JRuby, so the buffering behaviour differs... I did not know that...</p>&#xA;",240443,"",240443,"",2018-01-11T01:39:29,2018-01-11T01:39:29,"","",,1,,,
48272211,2,,48253063,2018-01-15T23:41:56,,0,,"<p>To rebuild native modules you'll have much better luck using <a href=""https://github.com/electron/electron-rebuild"" rel=""nofollow noreferrer"">electron-rebuild</a> which will ensure that they're are being built against the version of electron you're using.</p>&#xA;&#xA;<p>We're using <code>ffi</code> and <code>ref</code> with electron-rebuild and that was all that was required.</p>&#xA;",106623,"",,"",,2018-01-15T23:41:56,"","",,1,,,
48285686,2,,48284536,2018-01-16T16:22:52,,0,,"<p>First things first, <code>flashFrame</code> is not an option in the Electron API so it will not do anything:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;  ...&#xA;  flashFrame: false&#xA;})&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>because all times when it are minimized, it flash the frame, and some times, if I dont have focus in other program, it reopen automatically.</p>&#xA;</blockquote>&#xA;&#xA;<p>This is not normal behaviour. Flashing of the taskbar will only happen if <code>show()</code> or <code>focus()</code> or <code>restore()</code> are called or your app is getting focus through some other means. Without a repository that reproduces this behaviour it will be very hard for anybody to advise on a fix.</p>&#xA;",106623,"",106623,"",2018-01-16T16:59:33,2018-01-16T16:59:33,"","",,4,,,
48299429,2,,48299240,2018-01-17T10:58:34,,0,,"<p><code>fs.readFile</code> is an asynchronous function. What that means is, at the time your <code>jsonParser</code> executes and <code>return jsonObj;</code> is executed, it has not yet been initialized (this will happen later asynchronously when your callback to <code>fs.readFile</code> is invoked). That is why it is <code>undefined</code></p>&#xA;&#xA;<p>You can modify your <code>jsonParser</code> function to accept a callback which you can use to hand the parsed data back after it is done to your main function. </p>&#xA;&#xA;<p>Sample:</p>&#xA;&#xA;<pre><code>loadObjectBtn.addEventListener('click', function loadObject(event){&#xA;&#xA;    jsonParser('C:\\someFolder\\myApp\\myJsonFile.json',function(err, data){&#xA;        //Check for error&#xA;        if(err){&#xA;            // Handle error&#xA;            return;&#xA;        }&#xA;        // Data is available here&#xA;        console.log(data)&#xA;    })&#xA;&#xA;})&#xA;&#xA;function jsonParser(fileName, cb){&#xA;    cb = (cb &amp;&amp; typeof cb === 'function' &amp;&amp; cb) || function(){};&#xA;    fs.readFile(fileName, 'utf8', function (err,data){&#xA;        if(err){&#xA;            // Error happened, call the cb function with the error as first argument&#xA;            cb(err)&#xA;        }&#xA;        //It worked, parse and hand the data back to the callback&#xA;        var jsonObj = jQuery.parseJSON(data)&#xA;        cb(null,jsonObj);&#xA;    }) &#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href=""http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/"" rel=""nofollow noreferrer"">Handy link on understanding error first callbacks</a></p>&#xA;&#xA;<p>EDIT:&#xA;Adding link shared by @Archer in the comments&#xA;<a href=""https://stackoverflow.com/questions/748175/asynchronous-vs-synchronous-execution-what-does-it-really-mean"">Asynchronous vs synchronous execution, what does it really mean?</a></p>&#xA;&#xA;<p>An alternative (though generally discouraged) is <a href=""https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options"" rel=""nofollow noreferrer"">to use the synchronous version <code>fs.readFileSync</code></a></p>&#xA;&#xA;<p><a href=""https://www.google.co.in/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjn792B7d7YAhWBbrwKHR4_AGIQFggsMAE&amp;url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F17604866%2Fdifference-between-readfile-and-readfilesync&amp;usg=AOvVaw14_Ao4nTWLNqIUcIomLF8l"" rel=""nofollow noreferrer"">Related Question on <code>readFile</code> vs <code>readFileSync</code></a></p>&#xA;",2649853,"",2649853,"",2018-01-17T15:32:03,2018-01-17T15:32:03,"","",,1,,,
48349206,2,,48348105,2018-01-19T20:40:36,,0,,<p>Changing the life cycle hook <code>mounted()</code> found in the Vue JS Lifecycle Diagram to <code>beforeUpdate()</code> Resolves the undefined error. Implementing a form of IoC where the component updates the store about it's state with the element would mean that the reference stays within the DOM.</p>&#xA;,3342835,"",3342835,"",2018-01-19T20:52:36,2018-01-19T20:52:36,"","",,0,,,
48349248,2,,48347415,2018-01-19T20:43:01,,0,,"<blockquote>&#xA;  <p>require the module, use the function wherever the place and have only one instance of the object.</p>&#xA;</blockquote>&#xA;&#xA;<p>TL:DR - no, that isn't possible.</p>&#xA;&#xA;<p>Long version: Nature of Electron is <em>multi process</em>, code you runs in main process (node.js side) and renderer (chromium browser) is runnning in different process. So even you require same module <em>file</em>, object created memory in each process is <em>different</em>. There is no way to share object between process except synchrnonize objects via ipc communication. There are couple of handful synchronization logic modules out there, or you could write your module do those job like</p>&#xA;&#xA;<pre><code>module.js&#xA;&#xA;if (//main process)&#xA;// setup object&#xA;//listen changes from renderer, update object, broadcast to renderer again&#xA;&#xA;else (//rendere process)&#xA;//send changes to main&#xA;//listen changes from main&#xA;</code></pre>&#xA;&#xA;<p>but either cases you can't get away from ipc.</p>&#xA;",2742189,"",,"",,2018-01-19T20:43:01,"","",,2,,,
48358955,2,,48288690,2018-01-20T17:17:10,,0,,"<p>Ok I've got this running.&#xA;The Problem was, that the cashing system first made a request for the printerstatus ""DLE EOT n"".&#xA;So I responded to the cashing system with the according status bits / byte (0x16).&#xA;Afterwards the POS sended the printjob which I decoded from CP437 to UTF8 to capture and to be able to let my script read the incoming printrequest.&#xA;Hope this post helps anyone who is developing anything similar like kitchen monitors, printservers etc. as I found very less informations in the web about this topic.</p>&#xA;",4630127,"",,"",,2018-01-20T17:17:10,"","",,0,,,
48224484,2,,48224116,2018-01-12T10:37:59,,1,,"<p>I usually use a diferent approach. Here's how a use do it:</p>&#xA;&#xA;<ol>&#xA;<li>create global var reference for the main window and the splash window, if not it will be self closed by the garbage collector.</li>&#xA;<li>load '<strong><em>splash</em></strong>' browserwindow </li>&#xA;<li>on '<em>show</em>' event I call a function to load '<strong><em>main</em></strong>' window</li>&#xA;<li>on <strong><em>main</em></strong> window '<em>dom-ready</em>', I close '<strong>splash</strong>' and show '<strong>main</strong>'</li>&#xA;</ol>&#xA;&#xA;<p>Here's one example of my <strong><em>main.js</em></strong> electron code, feel free to ask:</p>&#xA;&#xA;<pre><code>   'use strict';&#xA;&#xA;    //generic modules&#xA;    const { app, BrowserWindow, Menu } = require('electron');&#xA;    const path = require('path')&#xA;    const url = require('url')&#xA;&#xA;    const config = require('./config'); //                              =&gt; 1: archivo de configuracion&#xA;    const fileToLoad = config.files.current ? config.files.current : config.files.raw;&#xA;    const jsonData = require(fileToLoad); //                            =&gt; 2: archivo de datos (json) &#xA;    const pug = require('electron-pug')({ pretty: true }, jsonData); // =&gt; 3: pasamos datos ya tratados a plantillas pug/jade &#xA;&#xA;&#xA;    // Keep a global reference of the window object, if you don't, the window will&#xA;    // be closed automatically when the JavaScript object is garbage collected.&#xA;    let win, loading&#xA;    app.mainWindow = win;&#xA;&#xA;    function initApp() {&#xA;        showLoading(initPresentation)&#xA;    }&#xA;&#xA;    function showLoading(callback) {&#xA;        loading = new BrowserWindow({ show: false, frame: false })&#xA;        loading.once('show', callback);&#xA;        loading.loadURL(url.format({&#xA;            pathname: path.join(__dirname, '/src/pages/loading.html'),&#xA;            protocol: 'file:',&#xA;            slashes: true&#xA;        }))&#xA;&#xA;        loading.show();&#xA;    }&#xA;&#xA;    function initPresentation() {&#xA;        win = new BrowserWindow({&#xA;            width: 1280,&#xA;            height: 920,&#xA;            show: false,&#xA;            webPreferences: {&#xA;                experimentalFeatures: true&#xA;            }&#xA;        })&#xA;        win.webContents.once('dom-ready', () =&gt; {&#xA;                console.log(""main loaded!!"")&#xA;                win.setMenu(null);&#xA;                win.show();&#xA;                loading.hide();&#xA;                loading.close();&#xA;            })&#xA;            // Emitted when the window is closed.&#xA;        win.on('closed', () =&gt; {&#xA;            // Dereference the window object, usually you would store windows&#xA;            // in an array if your app supports multi windows, this is the time&#xA;            // when you should delete the corresponding element.&#xA;            win = null&#xA;        })&#xA;        win.loadURL(url.format({&#xA;            //pathname: path.join(__dirname, '/src/pages/home.pug'),&#xA;            pathname: path.join(__dirname, '/lab/pug/index.pug'),&#xA;            protocol: 'file:',&#xA;            slashes: true&#xA;        }))&#xA;&#xA;        win.webContents.openDevTools() // Open the DevTools.&#xA;    }&#xA;&#xA;    // This method will be called when Electron has finished&#xA;    // initialization and is ready to create browser windows.&#xA;    // Some APIs can only be used after this event occurs.&#xA;    app.on('ready', initApp)&#xA;&#xA;    // Quit when all windows are closed.&#xA;    app.on('window-all-closed', () =&gt; {&#xA;        // On macOS it is common for applications and their menu bar&#xA;        // to stay active until the user quits explicitly with Cmd + Q&#xA;        if (process.platform !== 'darwin') {&#xA;            app.quit()&#xA;        }&#xA;    })&#xA;&#xA;    app.on('activate', () =&gt; {&#xA;        // On macOS it's common to re-create a window in the app when the&#xA;        // dock icon is clicked and there are no other windows open.&#xA;        if (win === null) {&#xA;            initApp()&#xA;        }&#xA;    })&#xA;&#xA;    // In this file you can include the rest of your app's specific main process&#xA;    // code. You can also put them in separate files and require them here.*/&#xA;</code></pre>&#xA;",6503739,"",6503739,"",2018-01-12T10:52:25,2018-01-12T10:52:25,"","",,1,,,
48235001,2,,48234792,2018-01-12T22:39:17,,1,,"<p>It's cause of Electron's architecture based on multi process. Main / Renderer runs on <strong>different process</strong>, means you can't directly share object between as same as doesn't provide singleton object as well, cause main process creates one object and renderer process also creates one for is own as well. If you'd like to establish single state between process, you should consider synchronization via passing values between ipc protocol.</p>&#xA;",2742189,"",,"",,2018-01-12T22:39:17,"","",,0,,,
48239001,2,,46554673,2018-01-13T10:31:04,,1,,"<p>I had to move on to a framework called Node WebKit, which supports firebase messaging. Take a look into that. It is pretty simple and extremely similar to electron. Unfortunately, electron simply does not support firebase messaging. Hope this helps!</p>&#xA;",,user5803705,,"",,2018-01-13T10:31:04,"","",,1,,,
48239838,2,,48239072,2018-01-13T12:24:06,,1,,"<p>It seems that the default menu is not added to the app when in production.</p>&#xA;&#xA;<p>The solution is to check if you are in development:</p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/electron-is-dev"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/electron-is-dev</a></p>&#xA;&#xA;<pre><code>// Check if we are in development&#xA;var isDev = require('electron-is-dev');&#xA;</code></pre>&#xA;&#xA;<p>If in production, you have to construct the menu from scratch.</p>&#xA;&#xA;<pre><code>if(isDev){&#xA;    // In development&#xA;    // modify existing menu&#xA;}else{&#xA;    // In production&#xA;    // construct menu from scratch&#xA;    var template = [&#xA;            {&#xA;                label: ""File"",&#xA;                submenu: [&#xA;                    {&#xA;                        label: ""Exit"",&#xA;                        click: function () { quit(); }&#xA;                    }&#xA;                ]&#xA;            },&#xA;            {&#xA;                label: ""Project"",&#xA;                submenu: [&#xA;                    {&#xA;                        label: ""Delete"",&#xA;                        click: function () { deleteProject(); }&#xA;                    },&#xA;                    {&#xA;                        label: ""Build"",&#xA;                        click: function () { buildProject(); }&#xA;                    }&#xA;                ]&#xA;            }&#xA;        ];        &#xA;    // build menu from template&#xA;    var menu = Menu.buildFromTemplate(template);    &#xA;    // set menu for main window&#xA;    mainWindow.setMenu(menu);&#xA;};&#xA;</code></pre>&#xA;",5629360,"",5629360,"",2018-01-13T12:47:42,2018-01-13T12:47:42,"","",,0,,,
48255384,2,,48252381,2018-01-14T23:57:48,,1,,"<p>I see many questions in your post, but I'll answer these two:</p>&#xA;&#xA;<ol>&#xA;<li><blockquote>&#xA;  <p>My question is this, in order to distribute an Electron application&#xA;  with access to Firebase, do I have to have the localhost domain&#xA;  authorized?</p>&#xA;</blockquote>&#xA;&#xA;<p>That's not something implied by Firebase. Having the localhost&#xA;domain authorized is just for testing purposes when you're running&#xA;your app locally before deploying to another domain.</p></li>&#xA;<li><blockquote>&#xA;  <p>If I do have the localhost domain authorized, is this secure, in the&#xA;  context of couldn't malicious users set up their own localhost and&#xA;  redirect to an unintended page, giving them the ability to freely add&#xA;  data to Firebase databases?</p>&#xA;</blockquote>&#xA;&#xA;<p>Yes, it is secure. You said you haven't started with Firebase yet,&#xA;but when you do, you'll find out that you need to download the <a href=""https://firebase.google.com/docs/admin/setup#initialize_the_sdk"" rel=""nofollow noreferrer"">service credentials</a>&#xA;to be able to use the SDK in your app. Only you have access to these credentials. That's why other users can't setup their own localhost and access your authentication system.</p></li>&#xA;</ol>&#xA;",5861618,"",,"",,2018-01-14T23:57:48,"","",,5,,,
48272515,2,,48121006,2018-01-16T00:23:15,,1,,<p>You can see if you're running in electron like this:</p>&#xA;&#xA;<pre><code>if(process.versions['electron']) {&#xA;    console.log('we are running in electron');&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>if(window &amp;&amp; window.process &amp;&amp; window.process.type) {&#xA;    console.log('we are running in electron');&#xA;}&#xA;</code></pre>&#xA;,106623,"",106623,"",2018-01-16T16:05:18,2018-01-16T16:05:18,"","",,4,,,
48273103,2,,48269837,2018-01-16T02:03:05,,1,,"<p>Okay, it looks like this is currently <a href=""https://github.com/electron/spectron/issues/21"" rel=""nofollow noreferrer"">unsupported</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>... the require('electron').remote.Menu.getApplicationMenu() API does not serialize to JSON so it can't currently be fetched via Spectron.</p>&#xA;</blockquote>&#xA;",7663531,"",,"",,2018-01-16T02:03:05,"","",,1,,,
48288159,2,,48287172,2018-01-16T19:03:34,,1,,"<p>You can use <a href=""https://www.learnrxjs.io/operators/combination/combineall.html"" rel=""nofollow noreferrer""><code>combineAll</code></a> like this:</p>&#xA;&#xA;<pre><code>// Assume we emit 7 file names, starting immediately, but with some&#xA;// delay in between.&#xA;const file$ = Rx.Observable.timer(0, 300)&#xA;  .map(val =&gt; `file-${val}.png`)&#xA;  .take(7);&#xA;&#xA;// Assume your path is emitted only after a bit of time has passed.&#xA;const saveDialog$ = Rx.Observable.of('path/')&#xA;  .delay(1000);&#xA;&#xA;const result$ = saveDialog$&#xA;  // Map the path emission to the files observable.&#xA;  // This produces a higher-order observable.&#xA;  // To not lose the emitted path value, we map the emitted file&#xA;  // names together; instead of preparing the string here you&#xA;  // could also use&#xA;  //   file$.map(file =&gt; [path, file])&#xA;  .map(path =&gt; file$.map(file =&gt; `${path}${file}`))&#xA;  .combineAll();&#xA;</code></pre>&#xA;&#xA;<p>You can find a working example <a href=""https://rxviz.com/v/Y86aleJ3"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>As a side note, this only works with cold observables (you haven't specified whether your observables are hot or not). If <code>file$</code> is a hot observable, you'll need to multicast it through a <code>ReplaySubject</code>. <a href=""https://rxviz.com/v/9J9EM0Jl"" rel=""nofollow noreferrer"">Here's</a> a link that demonstrates this.</p>&#xA;",1675492,"",1675492,"",2018-01-16T19:12:23,2018-01-16T19:12:23,"","",,1,,,
48302737,2,,48300531,2018-01-17T13:50:36,,1,,"<p>Dynamic menus are <a href=""https://github.com/electron/electron/issues/528"" rel=""nofollow noreferrer"">not currently supported</a>. This has something to do with the fact that the menus in Electron use the Chromium menu code which has no dynamic features. </p>&#xA;&#xA;<p>When your File menu is empty, you could replace the entire menu with one that does not have the File menu in it?</p>&#xA;",106623,"",,"",,2018-01-17T13:50:36,"","",,1,,,
48305857,2,,48293934,2018-01-17T16:33:33,,1,,<p>Thanks. We do not currently support Electron or any node based tools. </p>&#xA;,2207583,"",,"",,2018-01-17T16:33:33,"","",,1,,,
48308353,2,,48306726,2018-01-17T19:12:12,,1,,"<p>There is the <strong>focus</strong> event for this.</p>&#xA;&#xA;<p>In your BrowserWindow you have to:</p>&#xA;&#xA;<pre><code>const {BrowserWindow} = require('electron')&#xA;let win = new BrowserWindow()&#xA;win.on('focus', () =&gt; {&#xA;   //do something&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>REF: <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/browser-window.md</a></p>&#xA;",6081475,"",,"",,2018-01-17T19:12:12,"","",,0,,,
48253845,2,,48250790,2018-01-14T20:27:43,,2,,"<p>This is what I ended up doing. It is actually really performant.</p>&#xA;&#xA;<pre><code>}).then((stream) =&gt; {&#xA;  const video = document.createElement('video');&#xA;  video.srcObject = stream;&#xA;  video.onloadedmetadata = () =&gt; {&#xA;  video.play();&#xA;  setInterval(() =&gt; {&#xA;    const canvas = document.createElement('canvas');&#xA;    canvas.getContext('2d').drawImage(video, 0, 0, 800, 800);&#xA;    canvas.toBlob(blob =&gt; {&#xA;      toBuffer(blob, function (err, buffer) {&#xA;        if (err) throw err;&#xA;        // do some magic with buffer&#xA;      });&#xA;    });&#xA;  }, 40);&#xA;};&#xA;</code></pre>&#xA;",4766136,"",,"",,2018-01-14T20:27:43,"","",,0,,,
48345056,2,,48337979,2018-01-19T16:03:42,,2,,"<p>There is no way to have <code>-webkit-app-region: drag;</code> and a context menu on Windows. That's because Windows displays its own context menu for these UI items.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/Y0xjD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Y0xjD.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>Another option is <a href=""https://www.npmjs.com/package/electron-drag"" rel=""nofollow noreferrer"">electron-drag</a> which can simulate <code>webkit-app-region</code>.</p>&#xA;",106623,"",106623,"",2018-01-23T14:50:40,2018-01-23T14:50:40,"","",,4,,,
48391842,2,,48382534,2018-01-22T23:23:09,,2,,"<blockquote>&#xA;  <p>__dirname gives / because of the webpack config</p>&#xA;</blockquote>&#xA;&#xA;<p>is obviously part you may need adjust. So 1. either main process correctly resolve path and send to ipc, then react component picks up render cycle or 2. configure wepback's external to not to wrap up node's internal so renderer directly access those context. </p>&#xA;",2742189,"",,"",,2018-01-22T23:23:09,"","",,2,,,
48217450,2,,48217413,2018-01-11T23:31:07,,3,,"<p>Electron's renderer process <em>is not</em> plain chromium process - when Electron launches renderer window, it internally inject global object enables Electron specific features. <code>require</code> is one of them, patching global to expose node.js module resolution in chromium process.</p>&#xA;",2742189,"",,"",,2018-01-11T23:31:07,"","",,0,,,
48245343,2,,48245202,2018-01-13T23:40:33,,3,,"<p>You cannot use colon ':' in the filename on Windows.</p>&#xA;&#xA;<p>From <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx"" rel=""nofollow noreferrer"">Naming Files, Paths, and Namespaces</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Use any character in the current code page for a name, including Unicode characters and characters in the extended character set (128–255), except for the following:</p>&#xA;  &#xA;  <ul>&#xA;  <li><p>The following reserved characters:</p>&#xA;  &#xA;  <ul>&#xA;  <li>&lt; (less than)</li>&#xA;  <li>&gt; (greater than)</li>&#xA;  <li>: (colon)</li>&#xA;  <li>"" (double quote)</li>&#xA;  <li>/ (forward slash)</li>&#xA;  <li>\ (backslash)</li>&#xA;  <li>| (vertical bar or pipe)</li>&#xA;  <li>? (question mark)</li>&#xA;  <li>&#42; (asterisk)</li>&#xA;  </ul></li>&#xA;  <li>Integer value zero, sometimes referred to as the ASCII NUL character.</li>&#xA;  <li>Characters whose integer representations are in the range from 1 through 31, except for alternate data streams where these characters are allowed. For more information about file streams, see File Streams.</li>&#xA;  <li>Any other character that the target file system does not allow.</li>&#xA;  </ul>&#xA;</blockquote>&#xA;",9206248,"",,"",,2018-01-13T23:40:33,"","",,0,,,
48302582,2,,48301083,2018-01-17T13:42:39,,3,,"<blockquote>&#xA;  <ol>&#xA;  <li>Use several printers at the same time and programmatically choose a specific printer.</li>&#xA;  </ol>&#xA;</blockquote>&#xA;&#xA;<p>Recent versions of Electron (>=1.7) allow you to <a href=""https://electronjs.org/docs/api/web-contents#contentsgetprinters"" rel=""nofollow noreferrer"">list printers</a> and print to specific ones. The only limitation we've found is that there is <a href=""https://github.com/electron/electron/issues/9868"" rel=""nofollow noreferrer"">no way to force landscape</a> through the electron API's. </p>&#xA;&#xA;<blockquote>&#xA;  <ol start=""2"">&#xA;  <li>Communicate with a device using serial communication.</li>&#xA;  </ol>&#xA;</blockquote>&#xA;&#xA;<p>Yes this is possible. We do it using the <a href=""https://www.npmjs.com/package/serialport"" rel=""nofollow noreferrer"">serialport</a> library.</p>&#xA;&#xA;<blockquote>&#xA;  <ol start=""3"">&#xA;  <li>Our application needs to display 2 different screens (on 2 different monitors) at the same time. Is it possible?</li>&#xA;  </ol>&#xA;</blockquote>&#xA;&#xA;<p>Yes this is possible as it works like any other app. You could either drag the Window across two screens or create two windows and maximise them on each screen. You can even use the Electron <a href=""https://electronjs.org/docs/api/screen"" rel=""nofollow noreferrer""><code>screen</code></a> API to list the screen and get their positions and dimensions.</p>&#xA;&#xA;<p>One possible issue with multiple windows to be aware of is that each window runs in its own process which can make communication between them trickier but not impossible.</p>&#xA;",106623,"",,"",,2018-01-17T13:42:39,"","",,0,,,
48304803,2,,48290415,2018-01-17T15:39:02,,3,,"<p>In situations where you get weird errors or something strange is not working with nedb and you cannot figure out what's wrong, try to delete the .dat file and try again.<br>&#xA;Often you accidentally modify the nedb file (e.g. with autosave of your editor) and you corrupt it.</p>&#xA;",9167669,"",,"",,2018-01-17T15:39:02,"","",,0,,,
48285550,2,,48284207,2018-01-16T16:14:54,,5,,"<p>The main process should almost always only be used for creating BrowserWindows and for accessing electron APIs which are marked in the docs as only accessible via the main process.</p>&#xA;&#xA;<p>Check out <a href=""https://codeburst.io/deep-dive-into-electrons-main-and-renderer-processes-7a9599d5c9e2"" rel=""noreferrer"">this article</a> for more details of the differences between the main/renderer and what they are used for. The Chromium process architecture means that any blocking code in the main process will block the renderers too.</p>&#xA;&#xA;<p>All your app code should be in render processes and if you're executing long-running processes these should be bumped into Web Workers or other renderer processes. <a href=""https://github.com/electron-userland/electron-remote"" rel=""noreferrer"">electron-remote</a> can help you do this.</p>&#xA;&#xA;<p>If you want to communicate between the main and renderer processes you should use the <a href=""https://electronjs.org/docs/api/ipc-main"" rel=""noreferrer"">documented</a> <a href=""https://electronjs.org/docs/api/web-contents#contentssendchannel-arg1-arg2-"" rel=""noreferrer"">API's</a>.</p>&#xA;",106623,"",,"",,2018-01-16T16:14:54,"","",,0,,,
48291637,2,,48291122,2018-01-16T23:49:30,,5,,"<p>This is purely a CSS question really as you can see this behaviour in the browser too with similar layouts. The easiest way to fix this is using a flex layout:</p>&#xA;&#xA;<p>HTML:</p>&#xA;&#xA;<pre><code>&lt;div class=""container""&gt;&#xA;  &lt;div class=""titlebar""&gt;&lt;/div&gt;&#xA;  &lt;div class=""content""&gt;&#xA;    &lt;h1&gt;So much content we scroll&lt;/h1&gt;&#xA;    &lt;h1&gt;So much content we scroll&lt;/h1&gt;&#xA;    &lt;!-- etc --&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>CSS:</p>&#xA;&#xA;<pre><code>body {&#xA;    margin: 0;&#xA;    padding: 0;&#xA;    overflow: hidden;&#xA;}&#xA;&#xA;.container {&#xA;  width: 100vw;&#xA;  height: 100vh;&#xA;  display: flex;&#xA;  flex-direction: column;&#xA;}&#xA;&#xA;.titlebar {&#xA;  background-color: blue;&#xA;  height: 35px;&#xA;  flex-shrink: 0;&#xA;}&#xA;&#xA;.content {&#xA;  flex-grow: 1;&#xA;  overflow-x: auto;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Check out this out in this <a href=""https://codepen.io/timfish/pen/xpyVKe"" rel=""nofollow noreferrer"">CodePen</a></p>&#xA;",106623,"",333061,"",2020-01-01T16:07:50,2020-01-01T16:07:50,"","",,0,,,
48305982,2,,48298364,2018-01-17T16:39:41,,5,,"<p>Thanks to Tim i managed to find a solution for this problem.</p>&#xA;&#xA;<p>If we try to prevent opening new windows or allow them to open, 'new-window' can't be of use for us if we're trying to handle it in renderer process. If we try to handle that event in renderer process, popup/window will open no matter what we do in that even handler.</p>&#xA;&#xA;<p>Solution is to handle that event in main process, but before that, we need to add <code>allowpopups</code> and <code>webpreferences=""nativeWindowOpen=true""</code> to our webview.</p>&#xA;&#xA;<p><code>allowpopups</code> obviously allows popups in the first place, and <code>webpreferences=""nativeWindowOpen=true""</code> uses native Chromium window.open, with added benefit that window opening and <code>new-window</code> event are happening in sequence, not asynchronously.</p>&#xA;&#xA;<p>Code for webview should look something like this:</p>&#xA;&#xA;<pre><code>&lt;webview src=""page.html"" webpreferences=""nativeWindowOpen=true"" allowpopups&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;&#xA;<p>After that in main process (usually <code>main.js</code>) we can handle what we want to allow to open in electron popup and what not. First we have to get right handle on webview and then we can handle the <code>new-window</code> event:</p>&#xA;&#xA;<pre><code>app.on('web-contents-created', function (webContentsCreatedEvent, contents) {&#xA;  if (contents.getType() === 'webview') {&#xA;    contents.on('new-window', function (newWindowEvent, url) {&#xA;      console.log('block');&#xA;      newWindowEvent.preventDefault();&#xA;    });&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I managed to scramble this solution with help of Tim and by reading the comments on pull request here <a href=""https://github.com/electron/electron/pull/9568#issuecomment-306339926"" rel=""noreferrer"">https://github.com/electron/electron/pull/9568#issuecomment-306339926</a></p>&#xA;&#xA;<p>Hope this will be helpful to someone.</p>&#xA;",230012,"",230012,"",2018-01-17T16:46:02,2018-01-17T16:46:02,"","",,0,,,
48386411,2,,48384476,2018-01-22T16:43:36,,7,,"<p>As document indicates (<a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentssendchannel-arg1-arg2-"" rel=""noreferrer"">https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentssendchannel-arg1-arg2-</a>), It is important to send message <em>once renderer is ready to listen</em>.</p>&#xA;&#xA;<pre><code>if(isDev()){&#xA;    mainWindow.openDevTools();&#xA;    mainWindow.setIgnoreMouseEvents(false);&#xA;    console.log(""======== DEV =========="");&#xA;    mainWindow.show();&#xA;    // send after did-finish-load&#xA;    mainWindow.webContents.on('did-finish-load', () =&gt; {&#xA;      mainWindow.webContents.send('test','This is a test');&#xA;    })&#xA;  }&#xA;</code></pre>&#xA;",2742189,"",,"",,2018-01-22T16:43:36,"","",,3,,,
48320623,2,,48308385,2018-01-18T11:48:07,,10,,"<p>Without seeing your code and Angular setup it's tricky to know why its not working. You should however be using the node.js <code>path</code> and <code>url</code> modules to build your url. </p>&#xA;&#xA;<p>At a guess, I would say that you need to load your base html file and the hash should be the route you're wanting to load:</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;const url = require('url');&#xA;&#xA;window.loadURL(url.format({&#xA;  pathname: path.join(__dirname, './index.html'),&#xA;  protocol: 'file:',&#xA;  slashes: true,&#xA;  hash: '/contact'&#xA;}));&#xA;</code></pre>&#xA;&#xA;<p>Which would give something like:</p>&#xA;&#xA;<pre><code>file:///full-path/to-your/app-root/index.html#/contact""&#xA;</code></pre>&#xA;&#xA;<p>That means your last example was the closest but manually building the url yourself means that it was not valid:</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>secondWindow.loadURL('file:' + __dirname + 'dist/index.html#/contact');</code></p>&#xA;</blockquote>&#xA;",106623,"",106623,"",2018-01-18T14:39:58,2018-01-18T14:39:58,"","",,12,,,
48231664,2,,46102851,2018-01-12T17:56:05,,28,,"<p>I ended up using <a href=""https://github.com/sindresorhus/electron-dl"" rel=""noreferrer"">electron-dl</a>.<br>&#xA;To send a download request (from the <code>renderer.js</code>):</p>&#xA;&#xA;<pre><code>ipcRenderer.send(""download"", {&#xA;    url: ""URL is here"",&#xA;    properties: {directory: ""Directory is here""}&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>In the <code>main.js</code>, your code would look something like this:</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow, ipcMain} = require(""electron"");&#xA;const {download} = require(""electron-dl"");&#xA;let window;&#xA;app.on(""ready"", () =&gt; {&#xA;    window = new BrowserWindow({&#xA;        width: someWidth,&#xA;        height: someHeight&#xA;    });&#xA;    window.loadURL(`file://${__dirname}/index.html`);&#xA;    ipcMain.on(""download"", (event, info) =&gt; {&#xA;        download(BrowserWindow.getFocusedWindow(), info.url, info.properties)&#xA;            .then(dl =&gt; window.webContents.send(""download complete"", dl.getSavePath()));&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The ""download complete"" listener is in the <code>renderer.js</code>, and would look like:</p>&#xA;&#xA;<pre><code>const {ipcRenderer} = require(""electron"");&#xA;ipcRenderer.on(""download complete"", (event, file) =&gt; {&#xA;    console.log(file); // Full file path&#xA;});&#xA;</code></pre>&#xA;&#xA;<h2>If you want to track your download's progress:</h2>&#xA;&#xA;<p>In <code>main.js</code>:</p>&#xA;&#xA;<pre><code>ipcMain.on(""download"", (event, info) =&gt; {&#xA;    info.properties.onProgress = status =&gt; window.webContents.send(""download progress"", status);&#xA;    download(BrowserWindow.getFocusedWindow(), info.url, info.properties)&#xA;        .then(dl =&gt; window.webContents.send(""download complete"", dl.getSavePath()));&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>In <code>renderer.js</code>:</p>&#xA;&#xA;<pre><code>ipcRenderer.on(""download progress"", (event, progress) =&gt; {&#xA;    console.log(progress); // Progress in fraction, between 0 and 1&#xA;    const progressInPercentages = progress * 100; // With decimal point and a bunch of numbers&#xA;    const cleanProgressInPercentages = Math.floor(progress * 100); // Without decimal point&#xA;});&#xA;</code></pre>&#xA;",8309806,"",8309806,"",2019-06-16T22:18:46,2019-06-16T22:18:46,"","",,1,,,
31188845,2,,31188722,2015-07-02T15:33:31,,0,,"<p>Most likely because execFile is not creating a shell so it doesn't know how to find the python interpreter. Try:</p>&#xA;&#xA;<pre><code>exec.exec('python db_app.py', {cwd:'.'},function(..){..})&#xA;</code></pre>&#xA;",98810,"",98810,"",2015-07-02T15:44:54,2015-07-02T15:44:54,"","",,5,,,
31302543,2,,31300373,2015-07-08T20:00:07,,0,,"<p>This may be possible in an electron app, but I don't think so as Electron is more multiplatform-oriented and this is a platform-oriented feature. You only will have access to methods that the developers chose to expose to you, and I doubt that they exposed a way to have this kind of information. (I have very little knowledge in the tech since I used it only once, so I might be wrong).</p>&#xA;&#xA;<p>The only solution I see is the one you talked about in your question, a real desktop app messaging with the chrome extension.</p>&#xA;",2367848,"",,"",,2015-07-08T20:00:07,"","",,1,,,
31349834,2,,31275827,2015-07-10T20:33:20,,0,,"<p>I figured out how to make it appear, and in case this happens to anyone else I fixed it by just pressing <strong>win+up</strong>.</p>&#xA;",1258622,"",,"",,2015-07-10T20:33:20,"","",,0,,,
31403914,2,,31383745,2015-07-14T10:20:49,,0,,"<p>Ok I found my mistake. In fact, I was compressing the folder containing the package json and the other files. So what I made was like that:</p>&#xA;&#xA;<pre><code>App.zip&#xA;|&#xA;|-App&#xA;   |-package.json&#xA;   |-Other files&#xA;</code></pre>&#xA;&#xA;<p>What is correct is this:</p>&#xA;&#xA;<pre><code>App.zip&#xA;   |-package.json&#xA;   |-Other files&#xA;</code></pre>&#xA;",5018688,"",,"",,2015-07-14T10:20:49,"","",,0,,,
31281559,2,,31251883,2015-07-08T00:20:00,,1,,"<p>Your code looks fine to me. Which version of <code>neon-animation</code> are you using? There is a bug in version 2.1.1 of the web animations polyfill that prevented animations from running, and <a href=""https://github.com/PolymerElements/neon-animation/releases/tag/v1.0.5"" rel=""nofollow"">version 1.0.5</a> of <code>neon-animation</code> pins the polyfill to a working version.</p>&#xA;",4236883,"",,"",,2015-07-08T00:20:00,"","",,1,,,
31315812,2,,31315117,2015-07-09T11:15:20,,1,,"<p>Please refer this Hello world example.&#xA;node.js&#xA;<br></p>&#xA;&#xA;<pre><code>var http = require(""http"");&#xA;var server = http.createServer(handler);&#xA;&#xA;var fs = require('fs');&#xA;&#xA;server.listen(3003)&#xA;&#xA;function handler(req,resp){&#xA;&#xA;    fs.readFile(""index.html"",function(err,data){&#xA;        if(err){&#xA;            console.log(""error in  loading file."");&#xA;            resp.end(""failed to load"")&#xA;        }else{&#xA;            resp.writeHead(200);&#xA;            resp.end(data)&#xA;        }&#xA;    })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><br>HTML</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;&lt;head&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    Hello world.!!&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Once you mentioned port number in <strong>listen</strong> function,&#xA;<br> node server will run on that port.<br>So until you are not giving same port number as Apache,you can run both <strong>Apache</strong> and <strong>nodejs</strong> parallel.<br>If  your <strong>Apache</strong> and <strong>nodejs</strong> server sharing same port number , then you need to stop one of them in order to use other.</p>&#xA;&#xA;<p>Your Question : </p>&#xA;&#xA;<p><strong>Can, we include nodejs as a external library like (jQuery, Bootstrap).</strong></p>&#xA;&#xA;<p><strong>Node.js is not library</strong>.So you can not include it like jQuery or bootstrap.&#xA;<br>It is platform for javascript to run on server side.<br>And using nodejs we can create Server which serve your content of Web like Apache do.</p>&#xA;&#xA;<p>When you say <strong>node app.js</strong> (insead of app.js it can be any name) from your command prompt,you starting your node server.<br><br>&#xA;In above example <strong>index.html</strong> you can include your jQuery or angular or bootstrap library as you do when using <strong>Apache</strong></p>&#xA;",4613933,"",4613933,"",2015-07-09T11:22:11,2015-07-09T11:22:11,"","",,1,,,
31324474,2,,31324026,2015-07-09T17:34:07,,1,,"<p>You're using an old school callback, which takes place outside of the Angular digest. It's good that you got it working by calling $apply, but you should try modifying your service to return a Promise. Promises are the Angular way of performing async operations. </p>&#xA;&#xA;<p>You can read up more about them at <a href=""https://thinkster.io/a-better-way-to-learn-angularjs/promises"" rel=""nofollow"">https://thinkster.io/a-better-way-to-learn-angularjs/promises</a> and <a href=""https://docs.angularjs.org/api/ng/service/$q"" rel=""nofollow"">https://docs.angularjs.org/api/ng/service/$q</a>.</p>&#xA;",1392364,"",,"",,2015-07-09T17:34:07,"","",,0,,,
31398099,2,,31397784,2015-07-14T05:11:07,,1,,"<p>Yes,you are right.&#xA;<br>&#xA;If you are using diskdb or sqlite than data will be stored locally. Hence user cannot login from another desktop, so in such caseyou need to use database on cloud than you might ask when will be local db helpfull, so i think it will be helpfull for data which has to be accessed frequently or repeatedly.for example when user logs in you have to fetch users details from cloud db every time user logs in and hence increases loads on server and network traffic.hence, to get rid from this overhead you can sync your localdb with server single time and hence when user logs in you will fetch user details from localdb hence saves load on server and network traffic.&#xA;<br>&#xA;example - <strong>Skype</strong> desktop does the same way.</p>&#xA;",4276650,"",,"",,2015-07-14T05:11:07,"","",,3,,,
31417960,2,,31417714,2015-07-14T21:46:26,,1,,"<p>It sounds like your routes file isn't being hit. Try including the following in your app.js:</p>&#xA;&#xA;<pre><code>var router = express.Router();    &#xA;var routes = require('./app/routes.js'); //the path to your routes file&#xA;router.use('/',routes);&#xA;</code></pre>&#xA;&#xA;<p>Also in your routes file you will need a few requires:</p>&#xA;&#xA;<pre><code>   var express = require('express'),&#xA;    app = express().Router();&#xA;</code></pre>&#xA;&#xA;<p>As far as debugging, I use node-inspector, you can install it via npm install node-inspector. They have instructions on their <a href=""https://github.com/node-inspector/node-inspector"" rel=""nofollow"">page</a> of how to use it, but it's basically similar to a Chrome inspector console, you should set a breakpoint on your route function, to see if it's being triggered.</p>&#xA;&#xA;<p>This is documented on the <a href=""http://expressjs.com/guide/routing.html"" rel=""nofollow"">Express page</a> under the express.Router() section at the bottom of the page, you will need to include the Router function in your call to break out your routes into a different file</p>&#xA;&#xA;<p>If that doesn't work, you can post more of your code and we can try to help out.</p>&#xA;",4855404,"",4855404,"",2015-07-14T22:12:23,2015-07-14T22:12:23,"","",,3,,,
31253167,2,,31252543,2015-07-06T18:36:12,,2,,"<p>ViewController is neither a 'Class' nor an instance, its a plain javascript object with two properties.</p>&#xA;&#xA;<p>If you want it to behave like a class and be able to acccess to other properties from a method when creating an instance this is how you should do:</p>&#xA;&#xA;<pre><code>var ViewController = function(ipc){&#xA;        this.ipc=ipc;&#xA;        this.ipc.on('page_count', this.getPageCount);&#xA;};&#xA;&#xA;ViewController.prototype.getPageCount: function (res) {&#xA;        this.total = res;&#xA;        this.showProgressbar(res);&#xA;},&#xA;&#xA;ViewController.prototype.showProgressBar: function (num) {&#xA;    $('.progress-container').addClass('show');&#xA;    $('.progress-bar').style('width', '0%');&#xA;}&#xA;module.exports = ViewController;&#xA;</code></pre>&#xA;&#xA;<p>You still need to instantiante ViewController :</p>&#xA;&#xA;<pre><code>var ViewController = require(__dirname + '/client/ViewController.js');&#xA;&#xA;var controller = new ViewController(ipc);&#xA;</code></pre>&#xA;",5074477,"",,"",,2015-07-06T18:36:12,"","",,0,,,
31305978,2,,31302253,2015-07-09T00:08:57,,2,,"<p>Use type annotations on the return values of the <code>require</code> function calls: </p>&#xA;&#xA;<pre><code>var BrowserWindow: GithubElectron.BrowserWindow = require('browser-window');&#xA;var app = GitHubElectron.App = require('app');&#xA;app.on(""ready"", function() {&#xA;  var mainWindow = new BrowserWindow({&#xA;    width: 600,&#xA;    height: 800&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",390330,"",,"",,2015-07-09T00:08:57,"","",,6,,,
31245787,2,,31215400,2015-07-06T12:25:11,,4,,"<p>At the end, i had to compile fibers on my own. As described in Update #4, i've tried it before. But node-gyp always failed and i didn't notice that i have to link to the new binary file on my own...</p>&#xA;&#xA;<pre><code>cd ~/my-project-root/&#xA;npm install sync&#xA;cd ./node_modules/sync/node_modules/fibers&#xA;node-gyp configure&#xA;HOME=~/.electron-gyp node-gyp rebuild --target=0.29.1 --arch=x64 --dist-url=https://atom.io/download/atom-shell</code></pre>&#xA;&#xA;<p>Then i've created the missing directory and moved the new binary there:</p>&#xA;&#xA;<pre><code>mkdir bin/win32-x64-v8-4.3&#xA;mv build/Release/fibers.node bin/win32-x64-v8-4.3/fibers.node</code></pre>&#xA;&#xA;<p>Now Sync works like a charm.</p>&#xA;",1435377,"",,"",,2015-07-06T12:25:11,"","",,4,,,
31255799,2,,31233935,2015-07-06T21:18:24,,4,,"<p>Well been playing and I have managed to get this to work in a way:</p>&#xA;&#xA;<p>Basically i set the remote and ipc modules within the html page, then pass in those, into my class for that page.</p>&#xA;&#xA;<p><a href=""https://github.com/simondavies/electron-vuejs-starter/blob/notification/app/pages/main.html"" rel=""nofollow"">main.html</a></p>&#xA;&#xA;<pre><code> &lt;script&gt;&#xA;   var remote = require('remote');&#xA;   var ipc = require('ipc');&#xA;   new Main(ipc);&#xA; &lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/simondavies/electron-vuejs-starter/blob/notification/resources/js/pages/Main.js"" rel=""nofollow"">Main.js - Class File</a></p>&#xA;&#xA;<pre><code> export default class Main extends Vue{&#xA;  constructor(ipc) {&#xA;   ....&#xA;   ipc.send('listener here','message here');&#xA;&#xA;   .....&#xA;</code></pre>&#xA;&#xA;<p>The files can be viewed within this <a href=""https://github.com/simondavies/electron-vuejs-starter/tree/notification"" rel=""nofollow"">Branch</a>:   </p>&#xA;",904045,"",,"",,2015-07-06T21:18:24,"","",,0,,,
31341341,2,,31329361,2015-07-10T12:55:09,,4,,"<p>Adapting the instructions documented at <a href=""https://github.com/atom/electron/blob/master/docs/tutorial/using-selenium-and-webdriver.md"" rel=""nofollow"">Using Selenium and WebDriver</a>, here is what you need to put into your protractor config (using <a href=""https://github.com/angular/protractor/blob/6ebc4c3f8b557a56e53e0a1622d1b44b59f5bc04/docs/server-setup.md#connecting-directly-to-browser-drivers"" rel=""nofollow""><code>directConnect</code></a>, as an example):</p>&#xA;&#xA;<pre><code>exports.config = {&#xA;    directConnect: true,&#xA;&#xA;    capabilities: {&#xA;         browserName: ""chrome"",&#xA;         chromeOptions: {&#xA;             binary: '/Path-to-Your-App.app/Contents/MacOS/Atom'  // &lt; IMPORTANT! &#xA;         },  &#xA;    },&#xA;&#xA;    // ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(not tested)</p>&#xA;",771848,"",771848,"",2015-08-17T15:41:11,2015-08-17T15:41:11,"","",,3,,,
31245052,2,,31242888,2015-07-06T11:47:00,,5,,<p>I found out how it has to be done. Node-webkit offers a function for that. It is working on MAC and should also work on windows. &#xA;The function below is an example function. <code>nw.gui</code> and <code>gui.Shell.showItemInFolder</code> did the thing for me. Thx for the input. </p>&#xA;&#xA;<pre><code>/*---------&#xA;Open Folder&#xA;---------*/&#xA;function openFolder(path){&#xA;    var gui = require('nw.gui');&#xA;    gui.Shell.showItemInFolder(path);&#xA;}&#xA;</code></pre>&#xA;,1551974,"",,"",,2015-07-06T11:47:00,"","",,0,,,
31360448,2,,31310904,2015-07-11T18:31:14,,11,,"<p>I finally found the solution! The blob which is passed to wavesurfer through the <code>loadBlob</code> method needs to transformed into an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"" rel=""noreferrer"">Uint8Array</a></p>&#xA;&#xA;<p>The working code looks like this</p>&#xA;&#xA;<pre><code>fs.readFile('/path/to/demo.wav', function(err, buffer) {&#xA;  // …&#xA;  var blob = new window.Blob([new Uint8Array(buffer)]);&#xA;  wavesurfer.loadBlob(blob);&#xA;}&#xA;</code></pre>&#xA;",5097199,"",490498,"",2016-08-18T01:23:39,2016-08-18T01:23:39,"","",,1,,,
31341666,2,,31336402,2015-07-10T13:11:51,,12,,"<p>An Electron app is no less secure than any other application hosted on a person's computer. If a nefarious individual gains access to your computer it really doesn't matter if your application is in Electron, WPF, or any other technology. They can find a way to use the application against the user. Furthermore, most code can be reverse engineered and vulnerabilities exploited. I don't think you have to worry about this. If it were that insecure companies like GitHub (who makes it), Microsoft, and Slack would avoid it.</p>&#xA;&#xA;<p>That being said, if you want to attempt to hide information from the user Electron source code is a little easier to view as it isn't in binary form. You can, for example, go into the app folder for Visual Studio Code which is built on Electron and view/manipulate the source code. I am not sure if the license allows it, but you can do it. There are ways you can mitigate this. You can obfuscate the JavaScript and put it into an ASAR among other things.</p>&#xA;&#xA;<p>I am not sure I understand your final question fully. Electron does indeed run on Windows, Mac (OSX not iOS), and Linux. A package can be downloaded and executed on all three assuming you have the correct modules. As for installation, Squirrel seems to be a popular choice. You're going to need to massage things for each platform. Check out how Visual Studio Code does it for each platform and I would recommend following suit.</p>&#xA;",3399439,"",,"",,2015-07-10T13:11:51,"","",,1,,,
31287581,2,,31286924,2015-07-08T08:40:03,,34,,"<p>You can package your program using <a href=""https://github.com/maxogden/electron-packager"">electron-packager</a> and then build a single setup EXE file using <a href=""http://www.jrsoftware.org/isinfo.php"">InnoSetup</a>.</p>&#xA;",31280,"",,"",,2015-07-08T08:40:03,"","",,10,,,
31229034,2,,31221980,2015-07-05T09:43:14,,82,,"<p>Turns out they are normal objects and you can access them through <code>user_id</code>.</p>&#xA;&#xA;<p>RowDataPacket is actually the name of the constructor function that creates an object, it would look like this  <code>new RowDataPacket(user_id, ...)</code>. You can check by accessing its name <code>[0].constructor.name</code></p>&#xA;&#xA;<p>If the result is an array, you would have to use <code>[0].user_id</code>.</p>&#xA;",3604594,"",8234457,"",2019-09-23T21:20:30,2019-09-23T21:20:30,"","",,2,,,
31327872,2,,31325946,2015-07-09T20:45:16,,-1,,"<p>Two Solutions:</p>&#xA;&#xA;<p><code>&#xA;gulp=spawn(process.env.SHELL, ['-c', 'cd ' + project.directory + ' &amp;&amp; gulp'])&#xA;</code>&#xA;OR&#xA;<code>&#xA;childProcess.execFileSync(process.env.SHELL, ['-c', 'launchctl setenv PATH ""$PATH""'])&#xA;</code></p>&#xA;",2610750,"",2610750,"",2015-07-15T20:04:09,2015-07-15T20:04:09,"","",,1,,,
23900211,2,,23880451,2014-05-27T22:52:37,,0,,"<p>Like WiredPrairie said it seem to be a bug in node webkit v0.9.2 I simply reverted to v0.8.6 and its now working I can correctly insert non-hardcoded text in mongoDB.</p>&#xA;&#xA;<p>Here's the link that made me realise the problem <a href=""https://stackoverflow.com/questions/23290362/"">stackoverflow.com/questions/23290362/</a></p>&#xA;",3678146,"",-1,"",2017-05-23T12:27:24,2014-05-27T22:52:37,"","",,0,,,
23969748,2,,23966094,2014-05-31T11:53:22,,0,,"<p>Assuming that I understand the question, it is not question wether it will wrap non gui app but if the app itself is written in a way that will work as intended and has sufficient permissions to do whatever it is supposed to do.</p>&#xA;&#xA;<p>Read here about ways to wrap it :</p>&#xA;&#xA;<p><a href=""https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps</a></p>&#xA;&#xA;<p>And for other stuff, you need to know if it will be allowed to do on your local OS what it does on your server (access disk in particular way, run apps etc), also if it is CLI app, arm it with needed interface, and implement debugging mode to it so you can find out what is happening when smt goes wrong.</p>&#xA;",1673211,"",,"",,2014-05-31T11:53:22,"","",,0,,,
23789080,2,,23767663,2014-05-21T16:35:16,,1,,"<p>This sounds similar to a problem I had. Downloading files (not just pdf) resulted in strange results. This is more likely your issue....not the fs functions. Rather than using the built in node http stuff we chose to use the <strong>Request</strong> library (npm request) and performed downloads in this fashion: </p>&#xA;&#xA;<pre><code> request({&#xA;      method: 'GET',&#xA;      uri: baseUrl + '/api/v1/documents/versions/contents/doc33',&#xA;      headers: {""Access-Control-Allow-Origin"": baseUrl, ""Cookie"": cookie}&#xA;    }, function (error, response, body) {&#xA;&#xA;      var contentDisp = response.headers['content-disposition'].split('""');&#xA;      var ext = contentDisp[1].split('.')[1];&#xA;&#xA;      // you can rename the downloaded file (temp) and add the proper extension here...&#xA;&#xA;    }).pipe(fs.createWriteStream('temp')); // you can append a directory to the temporary name as well..&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I would give this a shot and see if it works for you. Working with files across platforms can be difficult. </p>&#xA;",3501539,"",,"",,2014-05-21T16:35:16,"","",,1,,,
23874724,2,,23873412,2014-05-26T16:58:27,,1,,"<p>A simple directive to handle onscroll could be something like this:</p>&#xA;&#xA;<pre><code>    app.directive('myScrollWindow',function($window){&#xA;&#xA;    return function(scope,element,attrs) {&#xA;&#xA;       angular.element($window).bind('scroll',function(){&#xA;&#xA;       // do your stuff here&#xA;       // for example:&#xA;       if(this.pageYOffset &gt;= 50) {&#xA;         // do something&#xA;       }&#xA;&#xA;&#xA;       });&#xA;       scope.$apply();&#xA;     }&#xA;   });&#xA;</code></pre>&#xA;&#xA;<p>scope.$apply() is key here for this to work.</p>&#xA;&#xA;<p>Point being is that you can do pretty much anything inside a directive.</p>&#xA;&#xA;<p><strong>UPDATE</strong></p>&#xA;&#xA;<p>You can add a button and show the modal like this:&#xA;(I'm assuming you're using Twitter Bootstrap for the modal)</p>&#xA;&#xA;<pre><code>   app.directive('blah',function(){&#xA;&#xA;    function link(scope,elem,attrs){&#xA;        var modal = elem.find('.modal');&#xA;&#xA;        scope.openDialog = function(){&#xA;            modal.show();                &#xA;        }&#xA;    }&#xA;&#xA;return {&#xA;  restrict:'E,A',&#xA;  link: link,&#xA;  template:""&lt;button type=\""button\"" ng-click=\""openDialog()\""&gt;Click me&lt;/button&gt;&lt;div class=\""modal hide fade\""&gt;...&lt;/div&gt;""&#xA;}&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>element.find() will only look inside the template of the directive. It wont do a full DOM search for the modal css class. This is the beauty of directives</p>&#xA;",2259407,"",2259407,"",2014-05-26T17:17:12,2014-05-26T17:17:12,"","",,5,,,
23923934,2,,21948158,2014-05-29T00:26:59,,1,,"<p>node-webkit doesn't support mp3 by default, but you can workaround that limitation by using custom built, platform-specific versions of libffmpeg as described <a href=""https://github.com/rogerwang/node-webkit/wiki/Support-mp3-and-h264-in-video-and-audio-tag"" rel=""nofollow"">here</a>.</p>&#xA;",2353599,"",,"",,2014-05-29T00:26:59,"","",,2,,,
23830075,2,,23815026,2014-05-23T13:06:13,,3,,"<p>One solution I've found to be pretty effective is attaching pub/sub functionality to the <code>global</code>variable. The setup I've used so far is jQuery-based, though it could also be constructed without. First it is initialized using a variant of <a href=""http://api.jquery.com/jquery.callbacks/"" rel=""nofollow"">this</a> code:</p>&#xA;&#xA;<pre><code>    var messages = messages || {};&#xA;    global.Message = global.Message || function( id ) {&#xA;      var callbacks, method,&#xA;      message = id &amp;&amp; messages[ id ];&#xA;      if ( !message ) {&#xA;        callbacks = jQuery.Callbacks();&#xA;        message = {&#xA;          publish: callbacks.fire,&#xA;          subscribe: callbacks.add,&#xA;          unsubscribe: callbacks.remove&#xA;        };&#xA;        if ( id ) {&#xA;        messages[ id ] = message;&#xA;        }&#xA;      }&#xA;      return message;&#xA;    };&#xA;</code></pre>&#xA;&#xA;<p>Then anywhere between the windows events can be published and subscribed to using the following pattern. One window can publish the data:</p>&#xA;&#xA;<pre><code>global.Message(""someButtonClicked"").publish(data);&#xA;</code></pre>&#xA;&#xA;<p>Then the other can listen for it.</p>&#xA;&#xA;<pre><code>global.Message(""someButtonClicked"").subscribe(onButtonClicked);&#xA;&#xA;function onButtonClicked(data) {&#xA;  console.log(data);&#xA;};&#xA;</code></pre>&#xA;",1807481,"",,"",,2014-05-23T13:06:13,"","",,0,,,
23966558,2,,23966504,2014-05-31T05:05:02,,5,,"<p>This really is a ""lite"" interpretation of MongoDB and as such there really isn't the same concept of ""databases"" and ""collections"" that exists in the full featured product, as well as omitting a lots of other features.</p>&#xA;&#xA;<p>If you want things to appear as if you do have various ""collections"", then as suggested in the manual page you define various <code>DataStore</code> objects within a structure to make things look that way:</p>&#xA;&#xA;<pre><code>var db = {};&#xA;db.todols = new DataStore('/path/to/todols.db');&#xA;db.other = new DataStore('/path/to/other.db');&#xA;</code></pre>&#xA;&#xA;<p>That makes it appear that you have ""collections"" which are in fact to ""neDB"" actually just <code>DataStore</code> objects.</p>&#xA;",2313887,"",,"",,2014-05-31T05:05:02,"","",,0,,,
31419093,2,,31334594,2015-07-14T23:29:02,,0,,"<p>I had this exact problem today. I was unable to solve it using libvlc_log_set_file. I instead chose to use libvlc_log_set to set up the callback and use that method to write to a log file instead. Here is a example, it shows what needs to be done. I don't recommend the global file pointer, it is just for this quick sample.</p>&#xA;&#xA;<p>Note: logpath is a const char* that contains the path of your log file. Also, you probably want to flockfile to make this thread safe. You can also toss a switch statement in there to handle the level parameters for LIBVLC_NOTICE, LIBVLC_ERROR, LIBVLC_WARNING and LIBVLC_DEBUG to give your logging some granularity.</p>&#xA;&#xA;<pre><code>bool g_loggingEnabled = true;&#xA;FILE* g_logfp = nullptr;&#xA;&#xA;void logcb(void *data, int level, const libvlc_log_t *ctx, const char *fmt, va_list args)&#xA;{&#xA;    if (!g_loggingEnabled) return;&#xA;&#xA;    if (g_logfp == nullptr)&#xA;    {&#xA;        errno_t err = fopen_s(&amp;g_logfp, logpath, ""w"");&#xA;&#xA;        if (err != 0)&#xA;        {&#xA;            g_loggingEnabled = false;&#xA;            return;&#xA;        }&#xA;    }&#xA;&#xA;    vfprintf(g_logfp, fmt, args);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Addendum: On Windows you might want to use CreateFile instead with the FILE_SHARE_READ flag set and use WriteFile so that external text editors can view the file while the logging is occurring in real-time. If you do, look into vsprintf_s instead of vfprintf to fill a character buffer that you would then pass to WriteFile in the logcb method.</p>&#xA;",4935040,"",4935040,"",2015-07-15T22:30:53,2015-07-15T22:30:53,"","",,5,,,
31519244,2,,31518792,2015-07-20T14:33:53,,0,,"<p>After googled for 'MAC websocket connection error', I got a similar problem <a href=""http://andrewbolster.info/2014/07/ipython-websocket-failure-on-chrome/"" rel=""nofollow"">here</a>.</p>&#xA;&#xA;<p>And it is the proxy I set screwed 'localhost', which causes connection error. Disable the proxy fixed the issue. Sorry for any inconvenience.</p>&#xA;",826907,"",,"",,2015-07-20T14:33:53,"","",,0,,,
31550454,2,,31420673,2015-07-21T22:06:04,,0,,"<p>The suggestion from <a href=""https://github.com/atom/electron/issues/1613#issuecomment-100146829"" rel=""nofollow"">another related issue's comments</a> to add an environment variable of <code>{ATOM_SHELL_INTERNAL_RUN_AS_NODE : 0}</code> helped to successfully resolve the issue with using <code>fork</code> in place of <code>spawn</code></p>&#xA;&#xA;<p>More details can be seen on <a href=""https://github.com/atom/electron/issues/2226"" rel=""nofollow"">the GitHub issue</a></p>&#xA;",218882,"",,"",,2015-07-21T22:06:04,"","",,0,,,
31419089,2,,31414656,2015-07-14T23:28:46,,1,,"<p>We can target the mouse position adjusted for the zoom level, based on:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/nwjs/nw.js/issues/2023#issuecomment-71005188"" rel=""nofollow"">https://github.com/nwjs/nw.js/issues/2023#issuecomment-71005188</a></li>&#xA;<li><a href=""https://github.com/nwjs/nw.js/wiki/menu#menupopupint-x-int-y"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/menu#menupopupint-x-int-y</a></li>&#xA;</ul>&#xA;&#xA;<p>Fixed code:</p>&#xA;&#xA;<pre><code>// Load native UI library&#xA;var gui = require('nw.gui');&#xA;&#xA;// window (needed to get zoom level)&#xA;var win = gui.Window.get();&#xA;&#xA;// Create an empty menu&#xA;var menu = new gui.Menu();&#xA;&#xA;// Add some items&#xA;menu.append(new gui.MenuItem({ label: 'Item A' }));&#xA;menu.append(new gui.MenuItem({ label: 'Item B' }));&#xA;menu.append(new gui.MenuItem({ type: 'separator' }));&#xA;menu.append(new gui.MenuItem({ label: 'Item C' }));&#xA;&#xA;// Remove one item&#xA;menu.removeAt(1);&#xA;&#xA;// Popup as context menu&#xA;$(document).on(""contextmenu"", function(ev) {&#xA;&#xA;    // transform zoom level into factor&#xA;    var zoomFactor = Math.pow(1.2, win.zoomLevel);&#xA;&#xA;    menu.popup(&#xA;        Math.round(zoomFactor * ev.clientX),&#xA;        Math.round(zoomFactor * ev.clientY)&#xA;    );&#xA;})&#xA;</code></pre>&#xA;",3512867,"",,"",,2015-07-14T23:28:46,"","",,0,,,
31615412,2,,30987910,2015-07-24T16:24:19,,1,,"<p>Per my comment, <a href=""https://www.sqlite.org/"" rel=""nofollow"">Sqlite</a> seems to be what your looking for. It may not be your permanent solution in the long run but it will certainly work for the time being while you decided if you want to stick with it or code your own solution.</p>&#xA;&#xA;<p><strong>Inner Workings of Sqlite</strong></p>&#xA;&#xA;<p>Sqlite is optimized to the core but it has three major features that cause it to execute faster than normal disk reads, especially CSV files:</p>&#xA;&#xA;<ol>&#xA;<li>The entire database (every database you create) is stored in 1 single file, not multiple files or records.</li>&#xA;<li>This file is paged into 1024 byte (1K) chunks allowing you to jump easily around the data.</li>&#xA;<li>(Really part of 2) The entire database and paging system is one massive binary tree that usually takes under 10 jumps to find any given data. So in layman's terms, extremely fast!</li>&#xA;</ol>&#xA;&#xA;<p>If you are really interested in understanding the full scope of all of this, I have found no better explanation than <a href=""http://jvns.ca/blog/2014/09/27/how-does-sqlite-work-part-1-pages/"" rel=""nofollow"">this amazing blog post by Julia Evans</a>.</p>&#xA;&#xA;<p><strong>Possible Drawbacks</strong></p>&#xA;&#xA;<p>Besides the inner workings, Sqlite is designed to be client side working on the users machine. If this is not a viable solution there are workarounds that can be done. Sqlite can be used as a web server for example but it really thrives in a stand alone or mixed installation best. Also remember every clients computer is different. One computer may process records faster than the next but in general you do not need to worry since client side computers are usually under little load.</p>&#xA;&#xA;<ul>&#xA;<li>Standalone would require everything to be on the clients side. This is typically how Sqlite is used. I have used it for games in the past, utilizing <a href=""https://bitbucket.org/almworks/sqlite4java"" rel=""nofollow"">sqlite4java's</a> API to connect to the database with Java; the API made the whole experience feel like PHP and MySQL on a server. You may need to find other API's since Sqlite is written in C.</li>&#xA;<li>Mixed instillation is done the same way as standalone but you code into your program a link to an actual server. For the games I helped make we would track things like scores and user data, and then periodically in the background pass this to an actual server if we could get a connection. This also works in reverse. You can start the user with nothing but on first run it can download everything you need and from then on keep its self up-to-date with what is on the server.</li>&#xA;</ul>&#xA;&#xA;<p><strong>Summary</strong></p>&#xA;&#xA;<p>Sqlite will work for what you need but may require a little homework to setup in a fashion you need. Sqlite4java for example is easy to install but confusing to learn since their documentation is so poor; Stack Overflow got me through it though. Sqlite is also a use it and forget it type of installation so to answer your question, it will handle 25 rows a second like cake, you do not need to worry about optimizing it only your own code.</p>&#xA;",3193156,"",,"",,2015-07-24T16:24:19,"","",,0,,,
31643511,2,,31642429,2015-07-27T00:45:11,,1,,"<p>So the problem with your original <code>homeFactory</code> is that <code>db.find</code> happens asynchronously. Although you can use it just fine with callbacks, I think it is better practice to wrap these with <code>$q</code>.</p>&#xA;&#xA;<pre><code>app.service('db', function ($q) {&#xA;  // ...&#xA;  this.find = function (query) {&#xA;    var deferred = $q.defer();&#xA;&#xA;    db.find(query, function (err, docs) {&#xA;      if (err) {&#xA;        deferred.reject(err);&#xA;      } else {&#xA;        deferred.resolve(docs);&#xA;      }&#xA;    });&#xA;&#xA;    return deferred.promise;&#xA;  };&#xA;  // ...&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Once you begin wrapping non-Angular code like this, then it makes the interface consistent.</p>&#xA;&#xA;<pre><code>app.service('homeFactory', function (db) {&#xA;  this.getAllTitles = function () {&#xA;    return db.find({}).then(function (docs) {&#xA;      return docs.map(function (doc) {&#xA;        return doc.title;&#xA;      });&#xA;    });&#xA;  };&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And the controller would look like:</p>&#xA;&#xA;<pre><code>app.controller('homeCtrl', function ($scope, homeFactory) {&#xA;  homeFactory.getAllTitles().then(function (titles) {&#xA;    $scope.movieTitles = titles;&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",735923,"",,"",,2015-07-27T00:45:11,"","",,3,,,
31465796,2,,31465781,2015-07-16T22:43:04,,2,,"<p>Welcome to the world of modules!  </p>&#xA;&#xA;<p>First, inside of your <code>main.js</code> file, add a line at the top like this:</p>&#xA;&#xA;&#xA;&#xA;<pre><code>var Global = require('./npmMain.js').Global;&#xA;</code></pre>&#xA;&#xA;<p>Then at the end of <code>npmMain.js</code> add a line like this:</p>&#xA;&#xA;&#xA;&#xA;<pre><code>exports.Global = Global;&#xA;</code></pre>&#xA;&#xA;<p>Then remove that line from <code>index.html</code>. That should do it.</p>&#xA;&#xA;<p>I am guessing that you are not familiar with CommonJS style modules. Modules do not share global variables. Everything (except for a few properties supplied by the commonJS implementation) needs to be required before it can be used. Also, if you want to expose values between modules, you need to use <code>exports</code> keyword. </p>&#xA;&#xA;<p>There is a much more detailed explanation on the <a href=""http://www.commonjs.org/"" rel=""nofollow"">CommonJS site</a>.</p>&#xA;",172363,"",172363,"",2015-08-07T15:58:28,2015-08-07T15:58:28,"","",,1,,,
31498337,2,,31498110,2015-07-19T05:38:33,,2,,"<p>Maybe something like this:</p>&#xA;&#xA;<pre><code>newTitleListener = SetInterval(CheckForNewTitle, 200)&#xA;&#xA;oldTitle = '';&#xA;function CheckForNewTitle(){&#xA;    newTitle = $(""#app"").contents().find(""title"").text();&#xA;    if (newTitle != oldTitle){ //Set the new title&#xA;        document.title = newTitle;&#xA;        oldTitle = newTitle;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",4489233,"",4489233,"",2015-07-19T05:48:49,2015-07-19T05:48:49,"","",,2,,,
31609571,2,,31606454,2015-07-24T11:36:38,,2,,"<p>The notification API doesn't work on Windows, because there is no notification API that works on all versions of Windows (really Win10 is the first version where desktops have a documented API for it, Win8.x had it but it was WinRT-only)</p>&#xA;",5728,"",,"",,2015-07-24T11:36:38,"","",,2,,,
31432368,2,,31429394,2015-07-15T13:52:47,,3,,"<p>The answer depends on whether you want to debug the Main process or a Renderer process. </p>&#xA;&#xA;<p><strong>Main Process:</strong></p>&#xA;&#xA;<p>It is possible to debug the Main process using Visual Studio Code. You must pass <code>--debug=&lt;port&gt;</code> into Electron on startup and then configure the debugger in launch.json to attach to it. Attaching takes a little while so you may need to put a wait in to debug the parts that run on startup. Your launch.json file should have this:</p>&#xA;&#xA;<pre><code>    {&#xA;        ""name"": ""Attach"",&#xA;        ""type"": ""node"",&#xA;        ""address"": ""localhost"",&#xA;        ""port"": &lt;port&gt;,&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Alternatively, there is a way to configure Visual Studio Code to run Electron and attach the debugger in the same process. Check this thread here: <a href=""https://stackoverflow.com/questions/30009611/can-visual-studio-code-be-configured-to-launch-electron/30609953#30609953"">Can Visual Studio Code be configured to launch electron</a>. I also wrote about how to set this up on my blog here: <a href=""http://www.mylifeforthecode.com/getting-started-with-electron-in-visual-studio-code/"" rel=""nofollow noreferrer"">http://www.mylifeforthecode.com/getting-started-with-electron-in-visual-studio-code/</a> and here: <a href=""http://www.mylifeforthecode.com/a-better-way-to-launch-electron-from-visual-studio-code/"" rel=""nofollow noreferrer"">http://www.mylifeforthecode.com/a-better-way-to-launch-electron-from-visual-studio-code/</a></p>&#xA;&#xA;<p><strong>Renderer Process:</strong></p>&#xA;&#xA;<p>I am not aware of a way to debug a renderer process with Visual Studio Code. Per their documentation: </p>&#xA;&#xA;<blockquote>&#xA;  <p>Today we have good debugging support for Node.js (JavaScript and TypeScript) on all platforms and experimental support for mono (C# and F#) on OS X and Linux. At //build we highlighted the support we are adding for ASP.NET 5 and we plan to add more.</p>&#xA;</blockquote>&#xA;&#xA;<p>Check out <a href=""https://code.visualstudio.com/docs/debugging"" rel=""nofollow noreferrer"">https://code.visualstudio.com/docs/debugging</a>. Note there is no mention of JavaScript in the browser.</p>&#xA;&#xA;<p>However, you can use Chrome's DevTools to debug these processes. Call the <code>openDevTools()</code> or <code>toggleDevTools()</code> method on the BrowserWindow and you'll get the same set of tools that you do if you press F12 in Chrome. There are some timing issues you'll need to work out to get the debugger attached. See this thread: <a href=""https://stackoverflow.com/questions/31306452/atom-electron-detect-dev-tools-ready#comment50603676_31306452"">Atom Electron - Detect Dev Tools ready</a> for a work around. I also wrote about this on my blog here: <a href=""http://www.mylifeforthecode.com/debugging-renderer-process-in-electron/"" rel=""nofollow noreferrer"">http://www.mylifeforthecode.com/debugging-renderer-process-in-electron/</a>. </p>&#xA;",3399439,"",-1,"",2017-05-23T12:16:48,2015-07-15T13:52:47,"","",,1,,,
31464583,2,,31464419,2015-07-16T21:10:15,,3,,"<pre><code>import wx&#xA;from wx.lib.iewin import IEHtmlWindow&#xA;a = wx.App(redirect=False)&#xA;f = wx.Frame(None,-1,""My Desktop Application"")&#xA;browser = IEHtmlWindow(f)&#xA;browser.Navigate(""http://google.com"")&#xA;f.Show()&#xA;a.MainLoop()&#xA;</code></pre>&#xA;&#xA;<p>is a pretty good way for a remote web page to pretend to be a windows application ... assuming thats what you are asking for.. (this uses wxPython so of coarse you will need to install it)</p>&#xA;",541038,"",,"",,2015-07-16T21:10:15,"","",,2,,,
31602102,2,,31588048,2015-07-24T04:17:31,,5,,"<p>In order to UAC elevate, use the <code>runas</code> module: <a href=""https://www.npmjs.com/package/runas"" rel=""noreferrer"">https://www.npmjs.com/package/runas</a></p>&#xA;",5728,"",,"",,2015-07-24T04:17:31,"","",,1,,,
31538436,2,,31529772,2015-07-21T11:58:41,,153,,"<p>Setting the <code>icon</code> property when creating the <code>BrowserWindow</code> only has an effect on Windows and Linux.</p>&#xA;&#xA;<p>To set the icon on OS X, you can use <a href=""https://github.com/maxogden/electron-packager"" rel=""noreferrer"">electron-packager</a> and set the icon using the <code>--icon</code> switch.</p>&#xA;&#xA;<p>It will need to be in .icns format for OS X. There is an <a href=""https://iconverticons.com/online/"" rel=""noreferrer"">online icon converter</a> which can create this file from your .png.</p>&#xA;",31280,"",31280,"",2015-07-21T19:56:03,2015-07-21T19:56:03,"","",,10,,,
58276310,2,,58268545,2019-10-07T19:55:50,,0,,"<p>Try this and see if it works or not</p>&#xA;&#xA;<p>'get' returns (String|Stream|Buffer).</p>&#xA;&#xA;<pre><code>let dst = fs.createWriteStream('/local/file/path/data.txt');&#xA;sftp.get(filePath,dst)&#xA;</code></pre>&#xA;&#xA;<p>Refer <a href=""https://www.npmjs.com/package/ssh2-sftp-client#orga0dfcd5"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/ssh2-sftp-client#orga0dfcd5</a></p>&#xA;",12167785,"",,"",,2019-10-07T19:55:50,"","",,0,,,
58278920,2,,58259769,2019-10-08T01:01:50,,0,,"<p>Your code here:</p>&#xA;&#xA;<pre><code>mainWindow.once('ready-to-show', () =&gt; {&#xA;    mainWindow.show();&#xA;    const data = {id: 'checking_for_updates', display: 'none'}&#xA;    console.log(data)&#xA;    mainWindow.webContents.send('change_display', data) &#xA;})&#xA;</code></pre>&#xA;&#xA;<p>only sends the <code>change_display</code> once. And so you'll see <code>data</code> logged once as well.</p>&#xA;",127660,"",,"",,2019-10-08T01:01:50,"","",,0,,,
58300418,2,,58282332,2019-10-09T08:53:45,,1,,"<p>OK, this seems like a better method than using <code>protocol</code>:</p>&#xA;&#xA;<pre><code>session.defaultSession.webRequest.onBeforeRequest((details, callback) =&gt; {&#xA;  if (details.url.indexOf('file://api./') == 0) { //TODO Change to regex &amp; parametrize (optional - set default value)&#xA;    //TODO Test it works with non-GET (should work - using 307 redirect)&#xA;    callback({ redirectURL: `http://localhost/${details.url.substr(12)}` }); //TODO Parametrize (mandatory)&#xA;  } else {&#xA;    callback({}); //TODO Test this works&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Using <code>protocol</code> should still be valid, but I think it would be using <code>interceptBufferProtocol</code>:</p>&#xA;&#xA;<pre><code>protocol.interceptBufferProtocol('file', (request, result) =&gt; {&#xA;  if (request.url.indexOf('file://api./') == 0) {&#xA;    return result(new Buffer('{}')); //TODO Call API and return Buffer response (I suppose)&#xA;  } else {&#xA;    // FIXME What goes here!? As in ""just continue doing what you would have done""&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I still have no idea how to resolve the FIXME there, so if anybody can answer that it would be much appreciated.</p>&#xA;",4684673,"",,"",,2019-10-09T08:53:45,"","",,0,,,
58349519,2,,58349518,2019-10-11T23:27:48,,1,,"<p>Following this solution: <a href=""https://github.com/segmentio/nightmare/issues/1082#issuecomment-312115976"" rel=""nofollow noreferrer"">https://github.com/segmentio/nightmare/issues/1082#issuecomment-312115976</a></p>&#xA;&#xA;<p>In your app folder, go to \node_modules\nightmare\lib\preload.js&#xA;Lines 50 and 55: change</p>&#xA;&#xA;<pre><code>writable: false,&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>writable: true,&#xA;</code></pre>&#xA;",5750078,"",,"",,2019-10-11T23:27:48,"","",,0,,,
58350448,2,,58331678,2019-10-12T02:53:38,,0,,"<p>So when DanStarns asked for me to show where <code>convertVideos</code> is being called and I posted the <code>ConvertPanel.js</code> file, I felt something was amiss there, this did not seem right:</p>&#xA;&#xA;<pre><code>export default withRouter(&#xA;  connect(null, actions)(ConvertPanel)&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>No need for a <code>mapStateToProps</code> there? The <code>videos</code> object was defined when adding videos but it was not being set right by the Redux back-end when it came time to convert the file type of said object.</p>&#xA;&#xA;<p>So for the convert button I decided to use an arrow function and then passed <code>convertVideos</code> the <code>videos</code> prop. That in itself was not enough and I believed I also needed a <code>mapStateToProps</code> and after lots of painful wrangling, this is what I came up with that worked:</p>&#xA;&#xA;<pre><code>render() {&#xA;    return (&#xA;      &lt;div className=""convert-panel""&gt;&#xA;        &lt;button className=""btn red"" onClick={this.onCancelPressed}&gt;&#xA;          Cancel&#xA;        &lt;/button&gt;&#xA;        &lt;button&#xA;          className=""btn""&#xA;          onClick={() =&gt; this.props.convertVideos(this.props.videos)}&#xA;        &gt;&#xA;          Convert!&#xA;        &lt;/button&gt;&#xA;      &lt;/div&gt;&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;const mapStateToProps = state =&gt; {&#xA;  return { videos: _.at(state.videos, _.keys(state.videos)) };&#xA;};&#xA;&#xA;export default withRouter(&#xA;  connect(&#xA;    mapStateToProps,&#xA;    actions&#xA;  )(ConvertPanel)&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>For the above to work I had to import <code>lodash</code> library and I do not like the way that <code>mapStateToProps</code> looks, if anyone has a more elegant version, I would be willing to adopt it.</p>&#xA;",6719819,"",,"",,2019-10-12T02:53:38,"","",,0,,,
58350957,2,,58349320,2019-10-12T04:50:02,,1,,"<p>use <a href=""https://electronjs.org/docs/api/browser-window#winremovemenu-linux-windows"" rel=""nofollow noreferrer"">win.removeMenu()</a> function to remove the menu.</p>&#xA;&#xA;<p>Refer this <a href=""https://stackoverflow.com/questions/39091964/remove-menubar-from-electron-app"">answer</a>.</p>&#xA;",12167785,"",,"",,2019-10-12T04:50:02,"","",,0,,,
58351606,2,,58351575,2019-10-12T06:44:58,,4,,"<p>In main.js, specify icon</p>&#xA;&#xA;<pre><code>win = new BrowserWindow({&#xA; width: 800, &#xA; height: 600,&#xA; icon: __dirname + '/Icon/Icon.icns'&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>You can also use helper url methods</p>&#xA;&#xA;<pre><code>const path = require('path')&#xA;const url = require('url')&#xA;const iconUrl = url.format({&#xA; pathname: path.join(__dirname, 'Icon/Icon.icns'),&#xA; protocol: 'file:',&#xA; slashes: true&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Check this for reference: <a href=""https://medium.com/fantageek/changing-electron-app-icon-acf26906c5ad"" rel=""noreferrer"">https://medium.com/fantageek/changing-electron-app-icon-acf26906c5ad</a></p>&#xA;",11955314,"",603003,"",2019-10-12T15:21:50,2019-10-12T15:21:50,"","",,0,,,
58367570,2,,58357138,2019-10-13T20:32:33,,1,,"<p>I had exactly the same problem yesterday, and I have found a way to solve it. The ""e.preventDefault() stops the window from actually closing so it has time to send the message to the renderer process. When the main process receives a message from the renderer process it then calls the app.quit() method. This in turn call the close event again which continues in an infinite loop. To prevent this you have to check if the event is being called the second time to finally close the app. Hope this helps! </p>&#xA;&#xA;<p><strong>On the Main process:</strong></p>&#xA;&#xA;<pre><code>    const ipc = require('electron').ipcMain;&#xA;    let status = 0;&#xA;&#xA;    mainWindow.on('close', function (e) {&#xA;    if (status == 0) {&#xA;      if (mainWindow) {&#xA;        e.preventDefault();&#xA;        mainWindow.webContents.send('app-close');&#xA;      }&#xA;    }&#xA;  })&#xA;&#xA;ipc.on('closed', _ =&gt; {&#xA;  status = 1;&#xA;  mainWindow = null;&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit();&#xA;  }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><strong>On the renderer process:</strong></p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const ipc = electron.ipcRenderer;&#xA;&#xA;ipc.on('app-close', _ =&gt; {&#xA;&#xA;        //do something here...&#xA;&#xA;        ipc.send('closed');&#xA;    });&#xA;</code></pre>&#xA;",11489220,"",,"",,2019-10-13T20:32:33,"","",,0,,,
58386603,2,,58386602,2019-10-15T02:55:23,,3,,"<p>Following <a href=""https://stackoverflow.com/a/58376844/4612820"">Alex's example</a> and with help from a colleague, this is possible using the TestCafe <a href=""https://devexpress.github.io/testcafe/documentation/test-api/obtaining-data-from-the-client/"" rel=""nofollow noreferrer"">ClientFunction</a> and <a href=""https://electronjs.org/docs/api/browser-window#winshow"" rel=""nofollow noreferrer"">Electron native functions</a>:</p>&#xA;&#xA;<pre><code>import { ClientFunction } from 'testcafe';&#xA;&#xA;fixture `Electron page`&#xA;        .page ``;&#xA;&#xA;const isWindowVisible = ClientFunction(() =&gt; {&#xA;  const remote = require('electron').remote;&#xA;  const win = remote.getCurrentWindow();&#xA;  return win.isVisible();&#xA;});&#xA;&#xA;const hideWindow = ClientFunction(() =&gt; {&#xA;  const remote = require('electron').remote;&#xA;  const win = remote.getCurrentWindow();&#xA;  win.hide();&#xA;});&#xA;&#xA;const showWindow = ClientFunction(() =&gt; {&#xA;  const remote = require('electron').remote;&#xA;  const win = remote.getCurrentWindow();&#xA;  win.show();&#xA;});&#xA;&#xA;test('My test', async (t) =&gt; {&#xA;&#xA;  await showWindow();&#xA;  console.log(await isWindowVisible());&#xA;  await t.wait(2000);&#xA;  await hideWindow();&#xA;  console.log(await isWindowVisible());&#xA;});&#xA;</code></pre>&#xA;",4612820,"",4612820,"",2019-10-15T09:47:31,2019-10-15T09:47:31,"","",,0,,,
58420745,2,,56182770,2019-10-16T19:50:41,,1,,"<p>I think you need to point it to the folder containing your Electron app js file entry point.</p>&#xA;&#xA;<p>Here is a working sample with Electron 6:</p>&#xA;&#xA;<p><a href=""https://github.com/florin05/electron-spectron-example"" rel=""nofollow noreferrer"">https://github.com/florin05/electron-spectron-example</a></p>&#xA;",4386338,"",,"",,2019-10-16T19:50:41,"","",,0,,,
58432208,2,,58430094,2019-10-17T12:03:07,,1,,"<p>Dred,&#xA;Your querySelector value is outside of clickevent.&#xA;You cannot access elements while page loading&#xA;Put your block in click event</p>&#xA;&#xA;<pre><code>  var btn = document.getElementById(""send"")&#xA;  btn.addEventListener('click', function(){&#xA;    var Inom = document.querySelector('#lastname').value;&#xA;    var Iprenom = document.querySelector('#name').value;&#xA;    var Iage = document.querySelector('#year').value;&#xA;    var Isexe = document.querySelector('#genre').value;&#xA;&#xA;    var parameters = [Inom, Iprenom, Iage, Isexe];&#xA;    var sql = 'INSERT INTO patient(nom, prenom, age, sexe) VALUES (?, ?, ?, ?)';&#xA;    console.log(""ok"")&#xA;    db.run(sql, [parameters],function(err) {&#xA;      if (err) {&#xA;        console.error(err.message);&#xA;      }&#xA;    })&#xA;    db.close((err) =&gt; {&#xA;    if (err) {&#xA;      console.error(err.message);&#xA;    }&#xA;    console.log('Close the database connection.');&#xA;    });&#xA;  })&#xA;</code></pre>&#xA;",12175349,"",,"",,2019-10-17T12:03:07,"","",,0,,,
58465366,2,,58465334,2019-10-19T15:48:04,,1,,"<p>Sort is a method on an array, jQuery elements are not put into an array but instead a jQuery object ( I believe )&#xA;<code>$('element').toArray().sort(...)</code> would work</p>&#xA;",11998782,"",,"",,2019-10-19T15:48:04,"","",,0,,,
58467678,2,,58467485,2019-10-19T20:23:02,,2,,"<p>As I mentioned in the comment, you need to keep the state of your first condition and check it upon the second event taking place.</p>&#xA;&#xA;<p>In the following basic Vanilla JS example, I allowed the movement of the <code>foo</code> element only <strong>after</strong> it's clicked (and only while the mouse is still down).<br/>&#xA;For this state check I've used the <code>isClicked</code> variable.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const element = document.getElementById('foo');&#xD;&#xA;var isClicked = false;&#xD;&#xA;&#xD;&#xA;element.addEventListener('mousedown', function() {&#xD;&#xA;  isClicked = true;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;element.addEventListener('mouseup', function() {&#xD;&#xA;  isClicked = false;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;document.addEventListener(""mousemove"", function(event) {&#xD;&#xA;  if (isClicked) {&#xD;&#xA;    element.style.left = (event.clientX - 25) + 'px';&#xD;&#xA;    element.style.top = (event.clientY - 25) + 'px';&#xD;&#xA;    // Please note that I arbitrarily chosen foo's&#xD;&#xA;    // width and height to be 50px, hence the 25px offset&#xD;&#xA;  }&#xD;&#xA;});</code></pre>&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>#foo {&#xD;&#xA;  width: 50px;&#xD;&#xA;  height: 50px;&#xD;&#xA;  background-color: tomato;&#xD;&#xA;  position: absolute;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""foo""&gt;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>If you're using React, you can always (and preferably) use your <code>state</code> to store these... states ;)</p>&#xA;",3103891,"",3103891,"",2019-10-19T20:28:45,2019-10-19T20:28:45,"","",,0,,,
58475928,2,,58469550,2019-10-20T18:18:24,,0,,"<p>I solved this after some time studying.&#xA;The issue was solved using electrons built-in event listeners on the BrowserWindow (win.) object.</p>&#xA;&#xA;<p>Below in the code; the remote is imported with window.require('electron').remote. Then I save the CurrentWindow() object in a variable called 'window'. On that window variable you can call the .on method which can take the predefined event listeners built into electron. Using window.on('maximize', () => {})  / which is the 'maximize' event listener/ the callback function is ran whenever the window is maximized. On Electrons official API docs under BrowserWindow, there is a full list of event listeners. </p>&#xA;&#xA;<p>Hopefully this can help others out in the future!</p>&#xA;&#xA;<pre><code>import React, { useState } from 'react';&#xA;const remote = window.require('electron').remote&#xA;&#xA;const TitlebarDev = () =&gt; {&#xA;&#xA;    // React state&#xA;    const [isMaximized, setIsMaximized] = useState();&#xA;&#xA;    // Electron currentwindow call with remote&#xA;    const window = remote.getCurrentWindow()&#xA;&#xA;    // gets current state if maximized in real time&#xA;    window.on('maximize', () =&gt; {&#xA;        setIsMaximized(true)&#xA;    })&#xA;&#xA;    // gets current state if unmaximzed in real time&#xA;    window.on('unmaximize', () =&gt; {&#xA;        setIsMaximized(false)&#xA;    })&#xA;&#xA;    return (&#xA;        &lt;div className=""TitlebarDev""&gt;&#xA;            &lt;div className=""Title-BarDev""&gt;&#xA;                &lt;div className=""TitlebarDev-drag-region""&gt;&lt;/div&gt;&#xA;                &lt;div className=""Title-BarDev__section-icon""&gt;&#xA;                &lt;/div&gt;&#xA;                &lt;div className=""Title-BarDev__section-menubar""&gt;&#xA;                &lt;/div&gt;&#xA;                &lt;div className=""Title-BarDev__section-center""&gt;&#xA;                &lt;/div&gt;&#xA;                &lt;div className=""Title-BarDev__section-windows-control""&gt;&#xA;                &lt;/div&gt;&#xA;                &lt;div&#xA;                    style={isMaximized ? { display: 'none' } : {}}&#xA;                    className=""resizer""&gt;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div &gt;&#xA;    )&#xA;}&#xA;&#xA;export default TitlebarDev&#xA;</code></pre>&#xA;&#xA;<p>EDIT: if anyone finds this, don't use ""remote"" anymore!! Use IPC now, as remote is slow and old. IPC is much much faster and their writing async/await syntax for it.</p>&#xA;",8967338,"",8967338,"",2019-12-10T20:01:25,2019-12-10T20:01:25,"","",,0,,,
58376844,2,,58369151,2019-10-14T12:28:05,,3,,"<p>It can be done using Electron's API. Please refer to the following article to get details: <a href=""https://electronjs.org/docs/api/browser-window#winisvisible"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/browser-window#winisvisible</a></p>&#xA;&#xA;<p>And here is the test code:</p>&#xA;&#xA;<pre><code>import { ClientFunction } from 'testcafe';&#xA;&#xA;fixture `Electron page`&#xA;    .page ``;&#xA;&#xA;const isDocumentHidden = ClientFunction(() =&gt; {&#xA;    const remote = require('electron').remote;&#xA;    const win = remote.getCurrentWindow();&#xA;&#xA;    return !win.isVisible();&#xA;});&#xA;&#xA;test('is hidden', async t =&gt; {&#xA;    console.log(await isDocumentHidden());&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I checked the code on your project and it works as expected.</p>&#xA;",9994312,"",9994312,"",2019-10-14T18:00:25,2019-10-14T18:00:25,"","",,1,,,
58460851,2,,57839415,2019-10-19T05:41:59,,1,,"<p>Run <code>npm outdated</code> and check your version. In my version showOpenDialog was returning a string array and not a promise. After updating it, it worked.</p>&#xA;",50711,"",,"",,2019-10-19T05:41:59,"","",,1,,,
58351011,2,,58347778,2019-10-12T04:59:17,,10,,"<p>Do a test,</p>&#xA;&#xA;<p><code>electron /path/to/the/app</code> [You will get that Error]</p>&#xA;&#xA;<p>Try</p>&#xA;&#xA;<p><code>electron --disable-gpu /path/to/the/app</code> [You mayn't get that Error]</p>&#xA;&#xA;<blockquote>&#xA;  <p>The fix was to add ""--disable-gpu"" to the command-line to force the&#xA;  web view not to use gpu features. I was able to accomplish this in an&#xA;  electron app by editing the package.json file in app root and changing&#xA;  the line like ""start"": ""electron ."" to ""start"": ""electron .&#xA;  --disable-gpu""</p>&#xA;</blockquote>&#xA;&#xA;<p>Refer <a href=""https://github.com/electron/electron/issues/7834#issuecomment-275802528"" rel=""noreferrer"">https://github.com/electron/electron/issues/7834#issuecomment-275802528</a></p>&#xA;",12167785,"",,"",,2019-10-12T04:59:17,"","",,2,,,
58395830,2,,58358449,2019-10-15T13:25:10,,15,,"<p>TLDR: check your developer.apple.com account has admin permissions for your organization and go to <a href=""https://appstoreconnect.apple.com/"" rel=""noreferrer"">https://appstoreconnect.apple.com/</a> to accept the legal docs.</p>&#xA;&#xA;<p>I also got the error ""Error: You must first sign the relevant contracts online. (1048)"". </p>&#xA;&#xA;<p>Navigating to developer.apple.com memberships or anything else didn’t reveal prompt. It turned out, my Apple developer account had no ""admin"" rights within our organization and I could not see the legal prompts, but there was no indication of this.</p>&#xA;&#xA;<p>After a team member with admin access navigated to <a href=""https://appstoreconnect.apple.com/"" rel=""noreferrer"">https://appstoreconnect.apple.com/</a> there was a pending agreement that had to be accepted and the error went away. </p>&#xA;&#xA;<p><strong>UPD</strong>. Comments suggested that the agreements could also be directly reviewed at appstoreconnect.apple.com/agreements/# </p>&#xA;",236135,"",236135,"",2019-10-16T17:52:55,2019-10-16T17:52:55,"","",,2,,,
58446008,2,,58443683,2019-10-18T07:34:04,,0,,"<p>Listen for the event <a href=""https://electronjs.org/docs/api/web-contents#event-did-navigate"" rel=""nofollow noreferrer"">'did-navigate'</a>. I would like to but I can't test this for you at this time.</p>&#xA;&#xA;<p>Also: electron webview navigation event </p>&#xA;",388787,"",,"",,2019-10-18T07:34:04,"","",,2,,,
58460897,2,,58460758,2019-10-19T05:50:18,,2,,"<p>Your code works fine, only not in the jsFiddle or in a Stack Overflow snippet iframe. </p>&#xA;&#xA;<p>The reason is when you click ""Run"" your actually giving focus to another page (another window element). So after the timeout simulates the click on the button your element is focused alright, but your page is not, so you can't see it. </p>&#xA;&#xA;<p>You can try setting the delay to 5 seconds, then click anywhere on the preview window before the timeout simulates the click, and you will see that your input will have focus exactly like when clicking on the button. You can also access the current focused element with <code>document.activeElement</code></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var input = document.querySelector(""input"");&#xD;&#xA;&#xD;&#xA;var btn = document.querySelector(""#btn"");&#xD;&#xA;&#xD;&#xA;console.log('active element:', document.activeElement);&#xD;&#xA;&#xD;&#xA;btn.addEventListener(""click"", function(event) {&#xD;&#xA;  //when triggered by a mouse click on the button, produces desired result&#xD;&#xA;  console.log(""click"");&#xD;&#xA;  input.focus();&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;setTimeout(function(e) {&#xD;&#xA;  var event = new Event(""click"");&#xD;&#xA;  //does not produce desired result&#xD;&#xA;  btn.dispatchEvent(event);&#xD;&#xA;  //does not produce desired result&#xD;&#xA;  btn.click();&#xD;&#xA;  console.log('active element:', document.activeElement);&#xD;&#xA;}, 5000);</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""text"" /&gt;&#xD;&#xA;&lt;button id=""btn""&gt;&#xD;&#xA;button&#xD;&#xA;&lt;/button&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",8218652,"",,"",,2019-10-19T05:50:18,"","",,2,,,
58440967,2,,57979893,2019-10-17T21:30:11,,3,,"<p>On inspecting the build scripts and after many painful experiments, I've found and solved the 2 problems leading to this error.</p>&#xA;&#xA;<ol>&#xA;<li>The fact that .a static libraries are left behind hinted that some settings in the <code>binding.gyp</code>, <code>config.gpy</code> and/or makefiles are wrong, as Native Node Modules are normally dynamic libraries with an .node extension. One conditional line in the <code>binding.gyp</code> file under <code>vscode-sqlite3</code> seems to the the culprit:&#xA;<code>&#xA;...&#xA;[""target_arch=='arm'"", {""type"": ""static_library""}]&#xA;...&#xA;</code></li>&#xA;</ol>&#xA;&#xA;<p>Disable that line (by removing it or changing 'arm' to something else) and then run: </p>&#xA;&#xA;<pre><code>node-gyp configure&#xA;</code></pre>&#xA;&#xA;<p>to regenerate the config.gpy file(s) under the build directory. Then build the module with:</p>&#xA;&#xA;<pre><code>node-gyp build&#xA;</code></pre>&#xA;&#xA;<p>A <code>sqlite.node</code> will be generated in build/Release.</p>&#xA;&#xA;<ol start=""2"">&#xA;<li>Unfortunately, the latest electron ABI version rarely matches that of the Node.js version. In my configuration, the electron ABI version is 72 (v6.0.12) but the latest stable Node version is for ABI 64. Therefore we have to do an <code>electron-rebuild</code> to update the sqlite.node to match the electron version. </li>&#xA;</ol>&#xA;&#xA;<p>To do this, you would have to first install <code>electron-rebuild</code> (yarn add electron-rebuild) then run electron-rebuild by giving supplying explicitly the version number of the electron binary that vscode downloaded:</p>&#xA;&#xA;<pre><code>electron-rebuild -v 6.0.12 -m /home/dev/vscode -o vscode-sqlite3&#xA;</code></pre>&#xA;&#xA;<p>Of course you would have to state the version number of your particular version of electron you are building for.&#xA;(Please look up <code>electron-rebuild --help</code> for the meaning of the options. It takes a while to rebuild the binary module...)</p>&#xA;&#xA;<p>The resulting <code>sqlite.node</code> can then be moved into the build/Release/. directory under the vscode project directory. Voila, we have a working latest version VS-Code for Raspbian!</p>&#xA;",3485748,"",3485748,"",2019-10-18T04:52:54,2019-10-18T04:52:54,"","",,3,,,
58441267,2,,58374137,2019-10-17T21:59:07,,4,,"<p>What do you mean by ""most efficient"" is not exactly very clear. I'll make some assumptions and respond ahead according them.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Cache Solution</strong></p>&#xA;&#xA;<p>Basically what you have already done. It's pretty efficient loading it all at once (extracting to a temporary folder) because whenever you need to reuse something, the most spendable task doesn't have to be done again. It's a common practice of some heavy applications to load assets/modules/etc. at their startup. </p>&#xA;&#xA;<p>Obs¹: Since you are considering the lack of disk space as a problem, if you want to stick with this is desirable that you handle this case programmatically and give the user some alert, since having little free space on storage is critical.</p>&#xA;&#xA;<p>TL;DR - <strong>Spendable at first, but faster later for asset reutilization</strong>.</p>&#xA;&#xA;<p><strong>Lazy Loading</strong></p>&#xA;&#xA;<p>Another very common concept which consists in basically ""load as you need, only what you need"". This is efficient because this approach assures your application only loads the minimum needed to run and then load things as demanded by the user. </p>&#xA;&#xA;<p>Obs¹: It looks pretty much on what you have done at your try number 2.</p>&#xA;&#xA;<p>TL;DR - <strong>Faster at startup, slower during runtime</strong>.</p>&#xA;&#xA;<p><strong>""Smart"" Loading</strong></p>&#xA;&#xA;<p>This is not a real name, but it describes satisfactorily what i mean. Basicaly, focus on understanding the goal of your project and mix both of previous solutions according to your context, so you can achieve the <strong>best overall performance</strong> in your application, reducing trade offs of each approach.</p>&#xA;&#xA;<p>Ex:</p>&#xA;&#xA;<ul>&#xA;<li><p>Lazy loading images per view/page and keep a in-memory cache with&#xA;limited size</p></li>&#xA;<li><p>Loading images in background while the user navigates</p></li>&#xA;</ul>&#xA;&#xA;<hr>&#xA;&#xA;<p>Now, regardless of your final decision, the follow considerations should not be ignored:</p>&#xA;&#xA;<ol>&#xA;<li>Memory will always be faster to write/read than disk</li>&#xA;<li>Partially unzipping (setting specific files) is possible in many packages (including ADM-ZIP) and is always faster than unzipping everything, specially if the ZIP file is huge.</li>&#xA;<li>Using IndexedDB or a custom file-based database like SQLite offers overall good result for a huge number of files and a ""smart"" approach, since querying and organizing data is easier through those.</li>&#xA;<li>Always keep in mind the reason of every application design choice, the best you understand why you are doing something, the better your final result will be.</li>&#xA;<li>Topic 4 being said, <strong>in my opinion</strong>, in this case you really overthought a little, but that's not a bad thing and it's really admirable to have this kind of concern about how can you do things on the best possible way, I do this often even if it's not necessary and it's good for self improvement.</li>&#xA;</ol>&#xA;&#xA;<p>Well, I wrote a lot :P</p>&#xA;&#xA;<p>I would be very pleased if all of this help you somehow.</p>&#xA;&#xA;<p>Good luck!</p>&#xA;&#xA;<p>TL;DR - There is not a closed answer based on your question, it depends a lot on the context of your application; some of your tries are already pretty good, but putting some effort into understanding the usability context to handle image loading ""smartly"" would surely award you.</p>&#xA;",12232509,"",12232509,"",2019-10-20T13:56:05,2019-10-20T13:56:05,"","",,5,,,
58492594,2,,58342368,2019-10-21T18:58:28,,0,,"<p>For anyone who has the same problem, I found a solution.</p>&#xA;&#xA;<p>The problem was that I was using the windows service core image, and it has a problem to render the chromium. So I need to make it work was just change the base image to use the windows client that way I can make it work.</p>&#xA;",8548193,"",,"",,2019-10-21T18:58:28,"","",,0,,,
58504128,2,,58502369,2019-10-22T12:17:58,,0,,"<p>thank you all for reading this , my problem is solved by a nice guy who helped alot.</p>&#xA;",4727511,"",,"",,2019-10-22T12:17:58,"","",,0,,,
58509773,2,,58509526,2019-10-22T17:47:08,,0,,"<p>Have you test the auto update function in your develop mode, whithout packaging the application? </p>&#xA;&#xA;<p>I had the same error and the following solution worked for me. </p>&#xA;&#xA;<p>Take a look at the <a href=""https://www.electron.build/auto-update"" rel=""nofollow noreferrer"">documentation</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Note that in order to develop/test UI/UX of updating without packaging the application you need to have a file named dev-app-update.yml</p>&#xA;</blockquote>&#xA;&#xA;<p>In this case create an ""dev-app-update.yml"" file in your root directory and provide your publish properties from your package.json in yaml format.</p>&#xA;&#xA;<p><strong>dev-app-update.yml</strong></p>&#xA;&#xA;<pre><code>provider:""github""&#xA;owner: ""abc""&#xA;</code></pre>&#xA;",2948597,"",2948597,"",2019-10-22T18:12:31,2019-10-22T18:12:31,"","",,0,,,
58527397,2,,58527067,2019-10-23T16:34:00,,0,,"<p><code>electron-builder.json</code> had an entry for ""!src/"" telling it to ignore that folder. I'm sure this made my executable bigger but I don't care about packing up a few extra text files.</p>&#xA;&#xA;<p>Removing the <code>""!src/"",</code> fixed the production runtime problem! Woot.</p>&#xA;&#xA;<pre><code>    ""files"": [&#xA;        ""**/*"",&#xA;        ""!**/*.ts"",&#xA;        ""!*.code-workspace"",&#xA;        ""!LICENSE.md"",&#xA;        ""!package.json"",&#xA;        ""!package-lock.json"",&#xA;        ""!src/"",&#xA;        ""!e2e/"",&#xA;        ""!hooks/"",&#xA;        ""!angular.json"",&#xA;        ""!_config.yml"",&#xA;        ""!karma.conf.js"",&#xA;        ""!tsconfig.json"",&#xA;        ""!tslint.json""&#xA;    ],&#xA;</code></pre>&#xA;",310297,"",,"",,2019-10-23T16:34:00,"","",,0,,,
58568010,2,,58567745,2019-10-26T04:19:08,,1,,"<p>Looks like the session module in Main is how to definitively enable it.</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>session.fromPartition(partition[, options])</strong>&#xA;   - partition String&#xA;   - options Object (optional)&#xA;      -cache Boolean - Whether to enable cache.</p>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/eed72c35d74947853ed75dd10e85d5ed56c1ce86/docs/api/session.md#sessionfrompartitionpartition-options"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/eed72c35d74947853ed75dd10e85d5ed56c1ce86/docs/api/session.md#sessionfrompartitionpartition-options</a></p>&#xA;",4900682,"",,"",,2019-10-26T04:19:08,"","",,0,,,
58579127,2,,58438583,2019-10-27T11:48:52,,2,,"<p>I found it could be known issue between nuxt.js and amcharts.js and it has a solution as follows:</p>&#xA;&#xA;<blockquote>&#xA;  <p>create a file plugins/amcharts.js</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>import * as am4core from ""@amcharts/amcharts4/core"";&#xA;import * as am4charts from ""@amcharts/amcharts4/charts"";&#xA;import am4themes_animated from ""@amcharts/amcharts4/themes/animated"";&#xA;import am4themes_dark from ""@amcharts/amcharts4/themes/dark"";&#xA;&#xA;import Vue from ""vue"";&#xA;&#xA;Vue.prototype.$am4core = () =&gt; {&#xA;  return {&#xA;    am4core,&#xA;    am4charts,&#xA;    am4themes_animated,&#xA;    am4themes_dark&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>then add to nuxt.config.js</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>plugins: [&#xA;    {&#xA;      src: '~/plugins/amCharts.js',&#xA;      ssr: false&#xA;    }&#xA;  ],&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>in components file</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>mounted() {&#xA;     let {am4core, am4charts, am4themes_animated, am4themes_dark} = this.$am4core();&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>Solution is found on Github: <a href=""https://github.com/nuxt/nuxt.js/issues/3336"" rel=""nofollow noreferrer"">https://github.com/nuxt/nuxt.js/issues/3336</a></p>&#xA;",549910,"",,"",,2019-10-27T11:48:52,"","",,0,,,
58583721,2,,58583445,2019-10-27T21:58:25,,1,,"<p>It would be better to register the event handler on the component itself, that way you can tie the existence of the event handler to the lifetime of the component and the event handler will execute within the context of the component instance.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>export default {&#xA;    name: 'window-titlebar',&#xA;    data() {&#xA;        return {&#xA;            title: false&#xA;        }&#xA;    },&#xA;    created() {&#xA;        ipcRenderer.on('maximize', this.onMaximize)&#xA;    },&#xA;    destroyed() {&#xA;        ipcRenderer.off('maximize', this.onMaximize)&#xA;    },&#xA;    methods: {&#xA;        onMaximize() {&#xA;            this.title = true&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",734040,"",,"",,2019-10-27T21:58:25,"","",,0,,,
58594564,2,,58583679,2019-10-28T16:15:26,,0,,"<p>The way to access a React Router route locally would be to add ""#/[page-name]"" at the end of the index.html path because the HashRouter looks at the URL hash (URL fragment). So now my code looks like this:</p>&#xA;&#xA;<pre><code>`file://${path.join(__dirname, '../build/index.html#/settings')}`&#xA;</code></pre>&#xA;",12150447,"",12150447,"",2019-11-01T01:31:58,2019-11-01T01:31:58,"","",,0,,,
58617639,2,,58589896,2019-10-30T01:40:43,,1,,"<p>Yes, you can absolutely use <code>ipcRenderer</code> inside of the preload script, and you can see an example of that <a href=""https://electronjs.org/docs/api/sandbox-option#preload"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;&#xA;<p>Whether you should or not ultimately depends on your goal.</p>&#xA;&#xA;<p>If you need to have the main process do something, then you have to use ipc to send a message from the preload script to the main process. If you don't need the main process for anything and are OK with just executing your code in the context of the renderer that's running the preload script, then you can feel free to run your code there.</p>&#xA;&#xA;<p>In your case, it probably makes sense to just do all the DOM manipulation in the preload script. Sending a message to the main process only to have it send a message back to the renderer to execute your <code>get-view</code> handler is just extra work for no reason.</p>&#xA;",3479456,"",,"",,2019-10-30T01:40:43,"","",,0,,,
58631160,2,,58631159,2019-10-30T17:52:23,,0,,"<p>After staring at the <a href=""https://electronjs.org/docs/api/dialog"" rel=""nofollow noreferrer"">documentation</a> for quite a while I noticed the problem.&#xA;It was very subtle.  Here's the important part from the documentation:&#xA;<a href=""https://i.stack.imgur.com/LLQtU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LLQtU.png"" alt=""docs say...""></a></p>&#xA;&#xA;<p>Oops! The properties value is <code>openFile</code> not openFile<strong>s</strong>.</p>&#xA;&#xA;<p>The <strong>red herring</strong> was the fact that this <em>did work properly</em> (with the wrong property value) on Linux and Win10.</p>&#xA;&#xA;<p>Here is the fixed code:</p>&#xA;&#xA;<pre><code>ipc.on('open-file-dialog', function (event) {&#xA;  dialog.showOpenDialog({&#xA;    properties: ['openFile'],&#xA;    defaultPath: specialFoldersPath,&#xA;&#xA;  }, function (files) {&#xA;    if (files) event.sender.send('selected-file', files)&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",255243,"",,"",,2019-10-30T17:52:23,"","",,0,,,
58644218,2,,58628818,2019-10-31T13:16:56,,3,,"<p>For everyone who is experiencing the same problem..&#xA;This is a bug in the elctron framework, <strong>introduced in version 7</strong></p>&#xA;&#xA;<p><strong>Changing you're electron version to 6.1.2 will fix this</strong></p>&#xA;",2747308,"",,"",,2019-10-31T13:16:56,"","",,0,,,
58648466,2,,58648190,2019-10-31T17:24:04,,2,,"<p>invoking data from database, is something asynchronous and javascript is not waiting for you till your task be done unless <strong>you told it</strong>. use async/await in your query. something like this:</p>&#xA;&#xA;<pre><code>async myControllerFunction()=&gt;{&#xA;    arr = [];&#xA;    let firends = await db.table('friends').where('name').startsWithIgnoreCase('DoB/')&#xA;        .each(function (friend) {&#xA;            arr.push(String(friend.name));&#xA;        });&#xA;    console.log(arr[0]);&#xA;    console.log(arr);&#xA;}&#xA;</code></pre>&#xA;",5677187,"",5677187,"",2019-10-31T19:04:13,2019-10-31T19:04:13,"","",,0,,,
58650835,2,,58645876,2019-10-31T20:35:34,,0,,"<p>It turned out to be a rather stupid mistake, but as it's quite hard to find any good documantion about this API, I'd tend to not close this as a simple typo, as I think it might be of help to others.</p>&#xA;&#xA;<p>The <code>details</code> object has a <code>headers</code> property and a <code>requestHeaders</code> property. I'm actually not sure what the difference is, as there seem to be some overlappings. I correctly overwrote the <code>requestHeaders</code>, but I did so on the base og the <code>requestHeaders</code>. So all I had to do was changing</p>&#xA;&#xA;<pre><code>let requestHeaders = Object.assign({}, details.headers);&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>let requestHeaders = Object.assign({}, details.requestHeaders);&#xA;</code></pre>&#xA;",995800,"",,"",,2019-10-31T20:35:34,"","",,0,,,
58657183,2,,58491533,2019-11-01T09:53:31,,0,,"<p>I found a solution by using an <a href=""https://github.com/samuelhwilliams/Eel"" rel=""nofollow noreferrer"">amazing library called Eel</a> (described as ""A little Python library for making simple Electron-like HTML/JS GUI apps""). Its absolute simplicity and intuitiveness allowed me to achieve what I wanted a few simple lines. </p>&#xA;&#xA;<ol>&#xA;<li>Follow the intro to understand the layout.</li>&#xA;<li>Then your main python file (which I conveniently named main.py), you expose the stream function to eel, so it can be called from JS file, and pipe the stream into the JavaScript ""receive_price"" function which is exposed from the JS file!</li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-python prettyprint-override""><code>import sys&#xA;import rx&#xA;from csv import DictReader&#xA;&#xA;&#xA;def prepare_csv_timeseries_stream(filename):&#xA;    return rx.from_(DictReader(open(filename, 'r')))&#xA;&#xA;&#xA;def process_logic():&#xA;    return pipe(&#xA;        ops.map(lambda p: print(p)),  # just to view what's flowing through&#xA;        ops.map(lambda p: eel.receive_price(p)),  # KEY FUNCTION in JS file, exposed via eel, is called for each price. &#xA;    )&#xA;&#xA;&#xA;@eel.expose  # Decorator so this function can get triggered from JavaScript&#xA;def stream(filename):&#xA;    price_observable = prepare_csv_timeseries_stream(filename)&#xA;    price_observable.pipe(process_logic()).subscribe()  # apply the pipe and subscribe to trigger stream&#xA;&#xA;eel.init('web')&#xA;eel.start('main.html')  # look at how beautiful and elegant this is! &#xA;</code></pre>&#xA;&#xA;<ol start=""3"">&#xA;<li>Now we create the price_processing.js file (placed in the 'web' folder as per Eel instructions) to incorporate the exposed functions</li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>let button   = document.querySelector('#super-button');&#xA;let pyOutput = document.querySelector('#py-output'   );&#xA;let filename = '%path-to-file%'&#xA;&#xA;console.log(""ready to receive data!"")&#xA;&#xA;eel.expose(receive_price);  // Exposing the function to Python, to process each price&#xA;function receive_price(result) {&#xA;    var messages = pyOutput;&#xA;    message = document.createElement('li');&#xA;    content = document.createTextNode(result);&#xA;    message.appendChild(content);&#xA;    messages.appendChild(message);&#xA;    // in here you can add more functions to process data, e.g. logging, charting and so on..&#xA;};&#xA;&#xA;button.addEventListener('click', () =&gt; {&#xA;    console.log('Button clicked magnificently! Bloody good job')&#xA;    eel.stream(filename); // calling the Python function exposed through Eel to start stream.&#xA;})&#xA;</code></pre>&#xA;&#xA;<ol start=""4"">&#xA;<li>The HTML stays almost the same, apart from the changing the script refs: /eel.js, as per Eel documentation and our price_processing.js file. </li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;    &lt;head&gt;&#xA;        &lt;meta charset=""UTF-8""&gt;&#xA;        &lt;title&gt;Let's try Eel&lt;/title&gt;&#xA;    &lt;/head&gt;&#xA;    &lt;body&gt;&#xA;        &lt;h1&gt;Eel-saved-my-life: the App!&lt;/h1&gt;&#xA;        &lt;button id=""super-button""&gt;Trigger Python Code&lt;/button&gt;&#xA;        &lt;div id=""py-output""&gt;&#xA;&#xA;        &lt;/div&gt;&#xA;    &lt;/body&gt;&#xA;    &lt;script type=""text/javascript"" src=""/eel.js""&gt;&lt;/script&gt;&#xA;    &lt;script type=""text/javascript"" src=""price_processing.js""&gt;&lt;/script&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>I hope this can help anyone struggling with the same problem.</p>&#xA;",3748452,"",,"",,2019-11-01T09:53:31,"","",,0,,,
58659898,2,,58659479,2019-11-01T13:18:10,,0,,"<p>Aparently, as I'm seeing in the <a href=""https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture"" rel=""nofollow noreferrer"">docs</a>, you can get it with a <code>then</code> function.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>let mainWin;&#xA;function createMainWin(){&#xA;    mainWin = new BrowserWindow({&#xA;        width: 1920, &#xA;        height:1080, &#xA;        backgroundColor:'#ccc', &#xA;        title:'Test',&#xA;        webPreferences: {&#xA;            nativeWindowOpen: true,&#xA;        }&#xA;    });&#xA;&#xA;    mainWin.loadURL('https://example.com');&#xA;    mainWin.webContents.executeJavaScript(`&#xA;        document.querySelector('body').innerHTML; //value need to get&#xA;    `).then( (result) =&gt; {&#xA;        console.log(result);&#xA;    })&#xA;    mainWin.webContents.openDevTools();&#xA;}&#xA;</code></pre>&#xA;",12307763,"",12307763,"",2019-11-01T13:23:21,2019-11-01T13:23:21,"","",,0,,,
58676072,2,,56136073,2019-11-02T23:12:30,,0,,"<p>I've found the solution to my problem a while ago:</p>&#xA;&#xA;<pre><code>function sortOut() {&#xA;&#xA;    // get the classname chapcontainer&#xA;    var classname = document.getElementsByClassName('container');&#xA;&#xA;    // create a variable and put the classes it into an array. &#xA;    var divs = [];&#xA;&#xA;    for (var i = 0; i &lt; classname.length; ++i) {&#xA;        divs.push(classname[i]);&#xA;    }&#xA;&#xA;    // Sort the divs based on data-id. &#xA;    divs.sort(function(a, b) {&#xA;        return +a.getAttribute(""data-id"") - +b.getAttribute(""data-id"");&#xA;    });&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>divs.sort does the trick. More info about this function can be found here:</p>&#xA;&#xA;<p><a href=""https://www.w3schools.com/jsref/jsref_sort.asp"" rel=""nofollow noreferrer"">https://www.w3schools.com/jsref/jsref_sort.asp</a></p>&#xA;",10766616,"",,"",,2019-11-02T23:12:30,"","",,0,,,
58676244,2,,53691890,2019-11-02T23:41:15,,0,,"<p>Just to answer my own question:</p>&#xA;&#xA;<p>I added the childnodes to the wrong parents. This works:  </p>&#xA;&#xA;<pre><code>// The results of the subchapter column go into a second variable  &#xA;var item2 = document.createElement(""p"");&#xA;item2.setAttribute(""id"", ""subchaptertitle"");&#xA;item2.textContent = row.Subchapter;&#xA;&#xA;// add the subchapter as a childnode to the parentnode (var item)&#xA;rows.appendChild(item);&#xA;item.appendChild(item2);&#xA;</code></pre>&#xA;&#xA;<p>Append item to the <code>&lt;div id=""database""&gt;</code> (variable rows) and item2 to <code>&lt;p id=""chaptertitle""&gt;</code> (variable item).</p>&#xA;",10766616,"",,"",,2019-11-02T23:41:15,"","",,0,,,
58681916,2,,58681852,2019-11-03T15:59:20,,0,,"<p>The answer was fairly simply, but I had never run into the issue and never thought about it.</p>&#xA;&#xA;<p>It was because the IPC communication was happening outside of the Angular zone. I had to inject an instance of NgZone into my service and use NgZone.run() in order update the observable values inside the angular zone.</p>&#xA;",1272355,"",,"",,2019-11-03T15:59:20,"","",,0,,,
58557285,2,,58556505,2019-10-25T11:01:36,,1,,"<p><s>Unfortunately, I cannot provide an actual solution to your problem, but I think I examined its cause:</s> See end of answer for a workaround.</p>&#xA;&#xA;<p>The Node.js executable hides its options from the executed JS file. So if you run <code>node --inspect file.js</code>, the <code>process.argv</code> array will be <code>['/path/to/node', '/path/to/file.js']</code>, without the <code>--inspect</code> flag appearing anywhere.</p>&#xA;&#xA;<p>Electron however will not do the same. The <code>process.argv</code> array differs between <code>node_modules/.bin/electron file.js</code> and <code>node_modules/.bin/electron --inspect file.js</code>.</p>&#xA;&#xA;<p>Jest seems to take all arguments from the third onwards and use them as its own options. That means, when you run <code>node_modules/.bin/electron --inspect node_modules/.bin/jest</code>, Jest will use the <code>node_modules/.bin/jest</code> argument as a test file pattern — and not find any that match it. That's also why your test output states: <code>Pattern: node_modules/.bin/jest - 0 matches</code>.</p>&#xA;&#xA;<p><strong>EDIT:</strong></p>&#xA;&#xA;<p>I found a terribly inelegant workaround, but it solves the problem.</p>&#xA;&#xA;<p>You can create a ""proxy"" file which removes the <code>--inspect</code> argument from <code>process.argv</code> and run your tests through that:</p>&#xA;&#xA;<pre><code>// test.js&#xA;if (['--inspect', '--inspect-brk'].includes(process.argv[1])) {&#xA;  process.argv.splice(1, 1)&#xA;}&#xA;&#xA;require('./node_modules/.bin/jest')&#xA;</code></pre>&#xA;&#xA;<p>Running <code>electron test.js</code> will run Jest tests successfully, <code>electron --inspect test.js</code> will do so as well. Since the Electron binary itself is independent from the script it executes, it will still find the <code>--inspect</code> flag and go into debug mode.</p>&#xA;",2048874,"",2048874,"",2019-10-25T12:29:03,2019-10-25T12:29:03,"","",,1,,,
58557418,2,,58557300,2019-10-25T11:10:17,,2,,"<p>Your 100% will not include the border so it overflows and adds the scrollbar.</p>&#xA;&#xA;<p>Add <code>box-sizing: border-box;</code> to your <code>body</code></p>&#xA;&#xA;<blockquote>&#xA;  <p><code>border-box</code> tells the browser to account for any border and padding in the values you specify for an element's width and height. If you set an element's width to 100 pixels, that 100 pixels will include any border or padding you added, and the content box will shrink to absorb that extra width. This typically makes it much easier to size elements.</p>&#xA;  &#xA;  <p><sup><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing"" rel=""nofollow noreferrer""><strong>MDN</strong></a></sup></p>&#xA;</blockquote>&#xA;",2802040,"",9146982,"",2019-10-25T12:27:16,2019-10-25T12:27:16,"","",,1,,,
58569968,2,,58562559,2019-10-26T10:31:35,,1,,"<p>You have to build your project using this commande <code>npm run electron-build</code> after that you add it in a script to your package.json</p>&#xA;&#xA;<p>check in this <a href=""https://medium.com/@murshidhassen/angular-7-electron-web-desktop-love-2995349e8e61"" rel=""nofollow noreferrer"">doc</a> until the end </p>&#xA;&#xA;<p>I hope that can help you,</p>&#xA;",9183949,"",,"",,2019-10-26T10:31:35,"","",,1,,,
58589827,2,,55105961,2019-10-28T11:06:39,,1,,"<p>Using <code>pyshell.kill()</code> didn't actually kill the process rather it signals child process to stop. However, the child fails to stop sometimes.</p>&#xA;&#xA;<p>Try using <code>tree-kill</code> npm package to kill that process, it handles such scenarios nicely.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// Declaring tree-kill&#xA;var kill = require('tree-kill');&#xA;&#xA;//Killing python process&#xA;kill(pyshell.pid);&#xA;</code></pre>&#xA;",7534053,"",,"",,2019-10-28T11:06:39,"","",,1,,,
58616826,2,,58615762,2019-10-29T23:38:14,,1,,"<p>Yes and no.  Env vars are of course available to app code (<code>process.env</code>), and electron itself supports some (<a href=""https://github.com/electron/electron/issues/10257"" rel=""nofollow noreferrer"">but not all</a>) <code>NODE_*</code> vars.</p>&#xA;&#xA;<p>It's important to remember that electron is node and Chrome bolted together.  Of particular relevance to HTTP requests, this means that electron actually has two parallel HTTP implementations: the browser (<code>fetch</code>/XHR) and node's (<code>require('http')</code>).</p>&#xA;&#xA;<p>Thus, if HTTP requests are going through the browser plumbing, the <code>NODE_*</code> variables have no effect, and conversely, requests made through the node plumbing are not affected by <a href=""https://electronjs.org/docs/api/chrome-command-line-switches"" rel=""nofollow noreferrer"">Chrome flags</a>.</p>&#xA;&#xA;<p>There are additional quirks:</p>&#xA;&#xA;<ul>&#xA;<li>By default, Chrome will use the system's HTTP proxy settings; node does not</li>&#xA;<li>By default, Chrome will use the system's root CA certificate store; node uses a builtin list</li>&#xA;<li>Requests made through browser plumbing are visible in the electron Dev Tools' Network tab; node requests are not</li>&#xA;</ul>&#xA;&#xA;<p>So:</p>&#xA;&#xA;<ul>&#xA;<li>To ignore TLS cert errors everywhere, you must set <code>NODE_TLS_REJECT_UNAUTHORIZED=0</code> <strong>and</strong> at the very beginning of main.js, call <code>app.commandLine.appendSwitch('ignore-certificate-errors')</code>.  Of course, disabling cert errors across the board is dangerous for obvious reasons.</li>&#xA;<li>For browser plumbing to trust a self-signed certificate, you should add it to your system's CA store (Windows certmgr, OS X Keychain, Linux NSS).</li>&#xA;<li><p>Unfortunately, <code>NODE_EXTRA_CA_CERTS</code> is <a href=""https://github.com/electron/electron/issues/10257"" rel=""nofollow noreferrer"">broken</a> in electron, so getting the node plumbing to trust a self-signed cert is difficult.  <a href=""https://github.com/electron/electron/issues/10257#issuecomment-346310333"" rel=""nofollow noreferrer"">This comment</a> suggests monkey patching <code>NativeSecureContext.prototype.addRootCerts</code> to work around the issue.  You could also try monkey patching <code>https.globalAgent</code>.</p>&#xA;&#xA;<p>Either way, I don't believe there is a way to get a cert trusted without modifying app code.</p></li>&#xA;</ul>&#xA;&#xA;<p>You'll likely need to modify the app JS to get this working.  If you're dealing with a distributed app, <a href=""https://github.com/electron/asar#command-line-utility"" rel=""nofollow noreferrer""><code>asar extract</code></a> will likely be of interest.</p>&#xA;",201952,"",,"",,2019-10-29T23:38:14,"","",,1,,,
58622817,2,,58621179,2019-10-30T10:01:53,,4,,"<p>You have two options:</p>&#xA;&#xA;<ol>&#xA;<li><p>either upgrade cypress to <code>3.5.0</code>, which <a href=""https://docs.cypress.io/guides/references/changelog.html#3-5-0"" rel=""nofollow noreferrer"">uses</a> Electron 5.</p></li>&#xA;<li><p>or, use a polyfill.</p>&#xA;&#xA;<p>First, install the <a href=""https://github.com/es-shims/Promise.prototype.finally"" rel=""nofollow noreferrer"">es-shims/Promise.prototype.finally</a>:</p>&#xA;&#xA;<pre><code>npm install -D promise.prototype.finally&#xA;</code></pre>&#xA;&#xA;<p>Then, in your <code>cypress/support/index.js</code>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { implementation: FinallyPolyfill } = require('promise.prototype.finally');&#xA;&#xA;function loadPolyfill ( win ) {&#xA;    win.Promise.prototype.finally = FinallyPolyfill;&#xA;}&#xA;&#xA;// polyfill AUT's Promise&#xA;Cypress.on('window:before:load', win =&gt; {&#xA;    loadPolyfill(win);&#xA;});&#xA;&#xA;// polyfill Cypress runner's wrapper window Promise&#xA;before(() =&gt; {&#xA;    loadPolyfill(window);&#xA;});&#xA;</code></pre></li>&#xA;</ol>&#xA;",927631,"",927631,"",2019-10-30T20:25:26,2019-10-30T20:25:26,"","",,1,,,
58647434,2,,58639829,2019-10-31T16:16:17,,0,,"<p><strong>TL;DR:</strong> There's no standardised API for that and you cannot be sure that a distribution indicates the terminal application.</p>&#xA;&#xA;<p>First of all, XTerm, Mate's Terminal, Konsole, etc. are all different applications. And because Ubuntu Mate under the hood reports as Ubuntu, AFAIK, you cannot even be certain that this is the application registered as ""the"" terminal app. Also, nearly every desktop environment brings its own terminal application, and since you can install multiple terminal applications side by side, it is at most an educated guess to automatically select an ""appropriate"" terminal application.</p>&#xA;&#xA;<p>However, there are multiple approaches which can be considered to solve this (aesthetic) problem:</p>&#xA;&#xA;<ol>&#xA;<li><em>Let the user decide what terminal application they want.</em> If your application has a configuration file, you could use that to write a value specified by the user and take that as the terminal app. In theory, they could specify a path to an application which is not a terminal app, but then it's their fault.</li>&#xA;<li><em>Compile a list of known terminal applications and check if they're installed.</em> For example, you could make an (ordered) list of the apps your application should search for and if none of them is found, fall back to XTerm (because that is installed on most if not all desktop systems running Linux). To see if an application is installed and runnable on Linux, you can use the <code>which</code> command. Example:</li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { spawnSync } = require (""child_process"");&#xA;const terms = [ ""konsole"", ""mate-terminal"", ""gnome-terminal"" /* ... */ ];&#xA;var terminal = null;&#xA;&#xA;// In your startup method (e.g. before opening a BrowserWindow)&#xA;if (os.platform () === ""linux"") {&#xA;    for (term in terms) {&#xA;        which = spawnSync (""which"", [term]);&#xA;        if (which.status !== null &amp;&amp; which.status === 0) { // Command found&#xA;            terminal = term;&#xA;            break;&#xA;        }&#xA;    }&#xA;    if (terminal === null) terminal = ""xterm"";&#xA;} else {&#xA;    terminal = ""cmd"";&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Of course you could also use <code>spawn</code> in favour of <code>spawnSync</code> but this will get more complex. Also, this only provides you with the first application found to be installed, it does not select the one ""appropriate"" for the desktop environment. But I believe it is a good step in the right direction if you want your application the be (somewhat) seemlessly integrated into the DE.</p>&#xA;&#xA;<p>As a side note, your code does not take MacOS into account, but it is also possible to open a terminal on MacOS, it's simply called ""Terminal"" there.</p>&#xA;",6786876,"",6786876,"",2019-10-31T16:29:54,2019-10-31T16:29:54,"","",,1,,,
58653344,2,,58653223,2019-11-01T02:17:27,,1,,"<p>I'm pretty sure that's because you're sandboxing your window.</p>&#xA;&#xA;<p>See the <a href=""https://electronjs.org/docs/api/sandbox-option"" rel=""nofollow noreferrer"">docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>With this option enabled, the renderer must communicate via IPC to the main process in order to access node APIs.</p>&#xA;  &#xA;  <p>...</p>&#xA;  &#xA;  <p>A sandboxed renderer doesn't have a Node.js environment running and doesn't expose Node.js JavaScript APIs to client code. The only exception is the preload script, which has access to a <strong>subset of the Electron renderer API</strong>.</p>&#xA;</blockquote>&#xA;&#xA;<p>If you truly need your renderer process to be sandboxed, then you must instead <code>require</code> <code>ipcRenderer</code> and use its <code>send</code> function to communicate to the main process that can then require all your fancy node modules and send some response back through your preload.</p>&#xA;",3479456,"",,"",,2019-11-01T02:17:27,"","",,1,,,
58661459,2,,58646161,2019-11-01T15:04:32,,0,,"<p>To anyone that finds themselves in this situation, I was able to correct the issue by downgrading Electron to version 6.1.2.  Keep in mind that if you downgrade you'll need to deal with the fact that Angular is now bundling with type=""module"" so you'll likely see errors about that on load.</p>&#xA;&#xA;<p><strong>TL:DR</strong></p>&#xA;&#xA;<ul>&#xA;<li>Downgrade to Electron v6.1.2 </li>&#xA;<li>Set tsconfig.json to target es5</li>&#xA;</ul>&#xA;&#xA;<pre><code>tsconfig.json&#xA;{&#xA;  ""compileOnSave"": false,&#xA;  ""compilerOptions"": {&#xA;    ""baseUrl"": ""./"",&#xA;    ""outDir"": ""./dist/out-tsc"",&#xA;    ""sourceMap"": true,&#xA;    ""declaration"": false,&#xA;    ""downlevelIteration"": true,&#xA;    ""experimentalDecorators"": true,&#xA;    ""module"": ""esnext"",&#xA;    ""moduleResolution"": ""node"",    &#xA;    ""importHelpers"": true,&#xA;    ""target"": ""es5"",&#xA;    ""typeRoots"": [&#xA;      ""node_modules/@types""&#xA;    ],&#xA;    ""lib"": [&#xA;      ""es2018"",&#xA;      ""dom""&#xA;    ]&#xA;  }&#xA;}&#xA;&#xA;</code></pre>&#xA;",12303821,"",,"",,2019-11-01T15:04:32,"","",,1,,,
58641542,2,,56889026,2019-10-31T10:39:16,,1,,"<p>So I tackled the problems separately. I migrated everything to classes and use fields / constructor injection to put in all the dependencies in my classes, so I can mock them, including the things that come from electron.</p>&#xA;&#xA;<pre><code>export class LauncherRenderer implements Renderer {&#xA;&#xA;    protected mongo: MongoProcess;&#xA;    protected logger: Logger;&#xA;    protected ipc: IpcRenderer;&#xA;&#xA;    protected STATUS_LABEL: string = 'status-text';&#xA;&#xA;    constructor() {&#xA;        this.ipc = ipcRenderer;&#xA;&#xA;        this.mongo = new MongoProcess(this.ipc);&#xA;&#xA;        this.logger = new Logger('launcher', this.ipc);&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Inside the class I will always use <code>this.ipc</code> when subscribing to events. For unit tests I have a <code>FakeIpc</code> class:</p>&#xA;&#xA;<pre><code>import { EventEmitter } from 'events';&#xA;&#xA;export class FakeIpc {&#xA;&#xA;    public emitter: EventEmitter = new EventEmitter();&#xA;&#xA;    public send(channel: string, message?: any): void { }&#xA;&#xA;    public on(event: string, listener: () =&gt; void): void {&#xA;        this.emitter.on(event, listener);&#xA;    }&#xA;&#xA;    public emit(event: string): void {&#xA;        this.emitter.emit(event);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>When setting up the Unit tests for <code>LauncherRenderer</code> I inject the <code>FakeIpc</code> into the renderer: </p>&#xA;&#xA;<pre><code> beforeEach(() =&gt; {&#xA;        fakeIpc = new FakeIpc();&#xA;        spyOn(fakeIpc, 'on').and.callThrough();&#xA;        spyOn(fakeIpc, 'send').and.callThrough();&#xA;&#xA;        mongoMock = createSpyObj('mongoMock', ['start', 'stop', 'forceStop']);&#xA;&#xA;        underTest = new LauncherRenderer();&#xA;&#xA;        underTest.mongo = mongoMock;&#xA;        underTest.ipc = fakeIpc;&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>This way I can spy on the ipc if the subscriptions have been done, or use the public <code>trigger</code> method to shoot ipc events and test if my class reacts correctly to it.</p>&#xA;&#xA;<p>For integration tests I recognized I should not care about internals like events (this is done in unit tests), only about the results of those (windows closing and opening). Like this:</p>&#xA;&#xA;<pre><code>    it('should start the launcher', async () =&gt; {&#xA;        await app.client.waitUntilWindowLoaded();&#xA;        const title: string = await app.client.getTitle();&#xA;        expect(title).toEqual('Launcher');&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>In the next test, I wait until the launcher dissapeared and a new window opens, that way the events must have worked or that will not happen.</p>&#xA;&#xA;<pre><code>    it('should open main window after all services started within 120s', async () =&gt; {&#xA;        let handles: any = await app.client.windowHandles();&#xA;&#xA;        try {&#xA;            await Utils.waitForPredicate(async () =&gt; {&#xA;                handles = await app.client.windowHandles();&#xA;                return Promise.resolve(handles.value.length === 2);&#xA;            }, 120000);&#xA;            await app.client.windowByIndex(1);&#xA;        } catch (err) {&#xA;            return Promise.reject(err);&#xA;        }&#xA;&#xA;        const title: string = await app.client.getTitle();&#xA;        expect(title).toEqual('Main Window');&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>The <code>waitForPredicate</code> is merely a helper method that waits for a promise to resolve or kills the test after a timeout is reached.</p>&#xA;&#xA;<pre><code>public static waitForPredicate(&#xA;    predicate: () =&gt; Promise&lt;boolean&gt;,&#xA;    timeout: number = 10000,&#xA;    interval: number = 1000,&#xA;    expectation: boolean = true): Promise&lt;void&gt; {&#xA;        return new Promise&lt;any&gt;(async (res, rej) =&gt; {&#xA;            let currentTime: number = 0;&#xA;            while (currentTime &lt; timeout) {&#xA;                // performance.now() would be nicer, but that doesn't work in jasmin tests&#xA;                const t0: number = Date.now();&#xA;                const readyState: boolean | void = await predicate().catch(() =&gt; rej());&#xA;                if (readyState === expectation) {&#xA;                    res();&#xA;                    return;&#xA;                }&#xA;                await Utils.sleep(interval);&#xA;                const t1: number = Date.now();&#xA;                currentTime += t1 - t0;&#xA;            }&#xA;            // timeout&#xA;            rej();&#xA;        });&#xA;}&#xA;&#xA;public static sleep(ms: number): Promise&lt;void&gt; {&#xA;    if (this.skipSleep) {&#xA;        return Promise.resolve();&#xA;    }&#xA;    return new Promise&lt;void&gt;((res) =&gt; setTimeout(res, ms));&#xA;}&#xA;</code></pre>&#xA;",1417633,"",1417633,"",2019-10-31T15:49:14,2019-10-31T15:49:14,"","",,3,,,
58653945,2,,58652854,2019-11-01T03:58:13,,1,,"<p>So I think requestAnimationFrame is your solution<br>&#xA;see : <a href=""https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame</a></p>&#xA;&#xA;<p>you can also use a delay with&#xA;the code look like this ( not tested ) I just made it more readable</p>&#xA;&#xA;<pre><code>&lt;p&gt;La cadena: &lt;/p&gt;  &lt;ul&gt;&lt;/ul&gt;   &lt;p&gt; es válida. &lt;/p&gt;&#xA;&lt;p&gt;Diagrama:&lt;/p&gt;&#xA;&lt;button id=""Bt-Diag-Anim""&gt;Ver movimiento en diagrama&lt;/button&gt;&#xA;&lt;!-- Contenedor del diagrama --&gt;&#xA;&lt;img src=""images/blanco.png"" alt=""Diagrama en Blanco"" id=""blanco"" style=""display: block;""&gt;&#xA;&lt;img src=""images/q1.png"" alt=""Estado Q1"" id=""q1"" style=""display: none;""&gt;&#xA;&lt;img src=""images/q2.png"" alt=""Estado Q2"" id=""q2"" style=""display: none;""&gt;&#xA;&lt;img src=""images/q3.png"" alt=""Estado Q3"" id=""q3"" style=""display: none;""&gt;&#xA;&lt;img src=""images/q4.png"" alt=""Estado Q4"" id=""q4"" style=""display: none;""&gt;&#xA;</code></pre>&#xA;&#xA;<pre><code>const status= &#xA;        { q1: { a: 'q2', b: 'q3'} &#xA;        , q2: { a: 'q4', b: 'q3'} &#xA;        , q3: { a: 'q2', b: 'q4'} &#xA;        , q4: { a: 'q4', b: 'q4'}&#xA;        }&#xA;    , E_Img= &#xA;        { Bl : document.getElementById('blanco')&#xA;        , q1 : document.getElementById('q1')&#xA;        , q2 : document.getElementById('q2')&#xA;        , q3 : document.getElementById('q3')&#xA;        , q4 : document.getElementById('q4')&#xA;        }&#xA;&#xA;document.getElementById('Bt-Diag-Anim').onclick=_=&gt;&#xA;  {&#xA;  E_Img.Bl.style.display = 'none'&#xA;  E_Img.q1.style.display = 'block'&#xA;&#xA;  let estado = 'q1'&#xA;    , p      = 0&#xA;    , pMax   = cadena.length&#xA;&#xA;  function anim() &#xA;    {&#xA;    estado = status[estado][cadena.charAt(p)]&#xA;    for (zImg in E_Img )&#xA;      {&#xA;      E_Img[zImg].style.display = (zImg === estado) ? 'block' : 'none'&#xA;      }&#xA;    if(++p&lt;pMax)&#xA;      { requestAnimationFrame(anim) }&#xA;    }&#xA;  requestAnimationFrame(anim) &#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>(WhiteSmith style)</p>&#xA;&#xA;<p>Bonus:</p>&#xA;&#xA;<pre><code>function validarCadena()&#xA;  {&#xA;  let cadenaValue  = document.getElementById(""cadena"").value  // Obtener cadena&#xA;    , cadenaString = String(cadenaValue)                     // Guardar cadena como String&#xA;    , valid        = true                                   // Var para validez de la cadena&#xA;&#xA;  for(let p=0, pMax=cadenaString.length; p&lt;pMax;p++)&#xA;    {&#xA;    if (!/^[a-b]/.test(cadenaString.charAt(p))&#xA;    || cadenaString.charAt(p)===cadenaString.charAt(p+1) )&#xA;      {&#xA;      valid = false&#xA;      break&#xA;      }&#xA;    }&#xA;&#xA;  //Enviar cadena a main.js&#xA;  ipcRenderer.send('item:add', cadenaValue, valid);&#xA;  }&#xA;</code></pre>&#xA;&#xA;<pre><code>ipcMain.on('item:add', function(e, item, valid)&#xA;  {&#xA;  cadena = item;&#xA;  if(valid)&#xA;    {&#xA;    createValidWindow();&#xA;    }&#xA;  else&#xA;    {&#xA;    createInvalidWindow();&#xA;    }&#xA;  enviarCadena(cadena);&#xA;  });&#xA;</code></pre>&#xA;",10669010,"",10669010,"",2019-11-01T05:47:02,2019-11-01T05:47:02,"","",,5,,,
58662723,2,,58495256,2019-11-01T16:33:26,,8,,"<p>I was able to set up an auto update configuration using a <code>generic</code> publish option following the docs, having never done it before. So it's definitively doable, and it does not require signing via a certificate, but I initially had issues because I had set <code>publisherName</code> in the build config, but no certificate. If the current version had a publisher or certificate specified, and the new one does not, it will also not be installed.</p>&#xA;&#xA;<p><strong>1. Enable logging</strong></p>&#xA;&#xA;<p>You can enable logging of the <code>electron-updater</code> package by also installing <code>electron-log</code> and then assigning the logger to the <code>autoUpdater</code>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const log = require('electron-log');&#xA;autoUpdater.logger = log;&#xA;autoUpdater.logger.transports.file.level = 'info';&#xA;</code></pre>&#xA;&#xA;<p>The default output paths are:</p>&#xA;&#xA;<ul>&#xA;<li><em>Linux:</em> <code>~/.config/&lt;app name&gt;/log.log</code></li>&#xA;<li><em>macOS:</em> <code>~/Library/Logs/&lt;app name&gt;/log.log</code></li>&#xA;<li><em>Windows:</em> <code>%USERPROFILE%\AppData\Roaming\&lt;app name&gt;\log.log</code></li>&#xA;</ul>&#xA;&#xA;<p>If the following steps don't solve your issues, please post the log contents.</p>&#xA;&#xA;<p><strong>2. Don't call <code>autoUpdater.setFeedURL()</code></strong></p>&#xA;&#xA;<p>The <a href=""https://www.electron.build/auto-update#quick-setup-guide"" rel=""nofollow noreferrer"">official docs</a> state:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Do not call <a href=""https://www.electron.build/auto-update#appupdatersetfeedurloptions"" rel=""nofollow noreferrer"">setFeedURL</a>. electron-builder automatically creates <code>app-update.yml</code> file for you on build in the <code>resources</code> (this file is internal, you don’t need to be aware of it).</p>&#xA;</blockquote>&#xA;&#xA;<p>The URL is already defined in your <code>publish</code> provider object and that's enough for the updater to work with. Also, a URL string as argument of <code>setFeedURL()</code> is incorrect, <a href=""https://www.electron.build/auto-update#module_electron-updater.AppUpdater+setFeedURL"" rel=""nofollow noreferrer"">it should be an options object</a>. But again, specifying everything in your <code>publish</code> provider is sufficient.</p>&#xA;&#xA;<p><strong>3. Also upload the <code>.blockmap</code> files to your server</strong></p>&#xA;&#xA;<p>These should be created upon build in addition to your setup <code>.exe</code> files. Otherwise, you will see errors in your log that the files of the old and new version could not be found for comparison.</p>&#xA;&#xA;<p><strong>4. Add a trailing slash to your update server URL</strong></p>&#xA;&#xA;<p>Make sure that the <code>url</code> parameter of your provider object ends with a slash. While the yml file may still be found without it, there can be issues during the actual download otherwise.</p>&#xA;&#xA;<p><strong>5. Try the simpler approach using <code>autoUpdater.checkForUpdatesAndNotify()</code></strong></p>&#xA;&#xA;<p>Instead of using the more flexible, but also more complicated way listening to the different update events and reacting to them within your app, try to get it to work with the following code first. Once that works, you can still go back to handling the different events for a better user experience.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>app.on('ready', async () =&gt; {&#xA;  autoUpdater.checkForUpdatesAndNotify();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This will check for and download the update in the background and automatically install it as soon as you close your app. A default Windows notification will pop up to inform you about the available update and the procedure.</p>&#xA;",995800,"",995800,"",2019-12-20T22:22:37,2019-12-20T22:22:37,"","",,15,,,
18817768,2,,18291476,2013-09-15T21:40:42,,2,,"<p>I found the solution. after using following sqlite3 for node-webkit and rebuilding it as in the </p>&#xA;&#xA;<p><a href=""https://github.com/developmentseed/node-sqlite3/"" rel=""nofollow"">node sqlite 3 for node-webkit</a>&#xA;<br /> It creates a folder named ""node_sqlite3"" inside the node_modules . I renamed ""node_sqlite3"" to ""sqlite3"". and then did npm-install of sequelize-sqlite . &#xA;<br />after this sequelize-sqlite automatically recognizes and gets connected to sqlite3 and it can normally be used.</p>&#xA;&#xA;<pre><code>var Sequelize = require('sequelize-sqlite').sequelize&#xA;var sqlite    = require('sequelize-sqlite').sqlite&#xA;&#xA;var sequelize = new Sequelize('database', 'username', '', {&#xA;dialect: 'sqlite',&#xA;storage: 'file:data.db'&#xA;})&#xA;&#xA;var Record = sequelize.define('Record', {&#xA;name: Sequelize.STRING,&#xA;quantity: Sequelize.INTEGER&#xA;})&#xA;&#xA;sequelize.sync()&#xA;.success(function(){&#xA;console.log('synced')&#xA;})&#xA;&#xA;var rec = Record.build({ name: ""sunny"", quantity: 3 });&#xA;rec.save()&#xA;.error(function(err) {&#xA;// error callback&#xA;alert('somethings wrong')&#xA;})&#xA;.success(function() {&#xA;// success callback&#xA;console.log('inserted')&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>and the records are in the database.</p>&#xA;",1915179,"",,"",,2013-09-15T21:40:42,"","",,3,,,
35850062,2,,35633541,2016-03-07T17:26:28,,0,,"<p>Finally I found a working solution to my problem.</p>&#xA;&#xA;<p>The work-around is as follows:</p>&#xA;&#xA;<p>1) I updated pouchDB to 5.3.0  </p>&#xA;&#xA;<blockquote>&#xA;  <p>npm update pouchdb --save</p>&#xA;</blockquote>&#xA;&#xA;<p>2) Then navigate to node_modules/leveldown  </p>&#xA;&#xA;<blockquote>&#xA;  <p>cd node_modules/leveldown</p>&#xA;</blockquote>&#xA;&#xA;<p>3) configure gyp with nw.js target version</p>&#xA;&#xA;<blockquote>&#xA;  <p>sudo nw-gyp configure --target=0.12.3</p>&#xA;</blockquote>&#xA;&#xA;<p>4) Build again the nw gyp</p>&#xA;&#xA;<blockquote>&#xA;  <p>nw-gyp build</p>&#xA;</blockquote>&#xA;&#xA;<p>5) And then in my javascript module file</p>&#xA;&#xA;<pre><code> var PouchDB = require('pouchdb');&#xA;    var arincPouchDB = new PouchDB('./db/arincAirports'); // new pouch db for node without adapter // means you get leveldb adapter in this case.&#xA;    var jsonData = require(""../datasrc/output/data.json"");&#xA;    arincPouchDB.bulkDocs(jsonData);&#xA;&#xA;    arincPouchDB.info().then(function (info) {&#xA;        console.log(info);&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>6) And the console says...</p>&#xA;&#xA;<pre><code>Objectadapter: ""leveldb"" &#xA;auto_compaction: false&#xA;backend_adapter:""LevelDOWN""&#xA;db_name: ""./db/arincAirports""doc_count: 12&#xA;update_seq: 12&#xA;__proto__: Object...&#xA;</code></pre>&#xA;&#xA;<p><strong>Note:</strong> If you try to use pouchDB from a script tag in your html file, and at the same time you have to use it in a javascript function, that will be exported via module exports e.g </p>&#xA;&#xA;<pre><code>exports.pouchDBFunction = new pouchDBFunction();&#xA;</code></pre>&#xA;&#xA;<p>and to use this exported function in another javascript file,&#xA;like this </p>&#xA;&#xA;<pre><code>var json2PouchDB = require(""./js/pouchDBFunction.js"");&#xA; json2PouchDB.pouchDBFunction;&#xA;</code></pre>&#xA;&#xA;<p>will not work and you will get the error pouchdb is not defined. That's why you need to have pouchDB via require() function.</p>&#xA;&#xA;<p>Hope this workaround helps...</p>&#xA;",2931630,"",2931630,"",2016-03-07T17:36:51,2016-03-07T17:36:51,"","",,0,,,
35650391,2,,35510066,2016-02-26T11:21:39,,1,,"<p>This was not an electron issue. My app makes several different requests and most of the are to services that return proper headers. Originally, I was using the <code>request-promise</code> library to handle all calls, but I needed to modify the one call that returned bad headers.</p>&#xA;&#xA;<p>The problem was that I was still using <code>request-promise</code> for the other calls and that library conflicts with the custom code I had to write to deal with the malformed headers. Once I modified my custom code to handle all requests, things worked much more smoothly.</p>&#xA;",1665,"",,"",,2016-02-26T11:21:39,"","",,0,,,
35676527,2,,35671037,2016-02-27T23:00:40,,1,,"<p>We discussed this in Slack, but for posterity:</p>&#xA;&#xA;<p>Workers use a share-nothing model, so you can't define a variable in your page (even globally or attached to <code>window</code>) and expect it to show up inside the Worker. You can only send items over <code>postMessage</code> (or fetch them from the Worker in other ways, e.g. Ajax requests).  However, the data sent over <code>postMessage</code> must be able to be cloned. From <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage"" rel=""nofollow"">Worker.postMessage()</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>This may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references</p>&#xA;</blockquote>&#xA;&#xA;<p>and from <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm"" rel=""nofollow"">The structured clone algorithm</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Property descriptors, setters, and getters (as well as similar metadata-like features) are not duplicated. For example, if an object is marked read-only using a property descriptor, it will be read-write in the duplicate, since that's the default condition.&#xA;  The prototype chain does not get walked and duplicated.</p>&#xA;</blockquote>&#xA;&#xA;<p>Thus there's no way to ""send"" the <code>electron</code> object into the Worker; one solution would be to require it using Electron's node integration, but that's not supported for reasons stated in <a href=""https://github.com/atom/electron/issues/797"" rel=""nofollow"">#797</a>. One potential way to support what you're wanting to do is to send the message from the main process to the render process, and then forward it on to the Worker</p>&#xA;",62082,"",,"",,2016-02-27T23:00:40,"","",,0,,,
35725359,2,,35724987,2016-03-01T14:19:57,,1,,"<p>What you are describing is the ES6 arrow function which isn't available in the version of node you are using.   <a href=""https://nodejs.org/en/docs/es6/"" rel=""nofollow"">ES6 in Node.js</a></p>&#xA;&#xA;<pre><code>server.start(function(err){&#xA;&#xA;    if (err) {&#xA;       throw err;&#xA;    }&#xA;    console.log('Server running at:', server.info.uri);&#xA;});&#xA;</code></pre>&#xA;",5651026,"",5651026,"",2016-03-03T05:31:06,2016-03-03T05:31:06,"","",,0,,,
35768430,2,,35754668,2016-03-03T09:42:56,,1,,"<p>The <a href=""https://github.com/hstove/electron-cookies"" rel=""nofollow"">electron-cookies</a> package it is meant to be used in the renderer process, you're attempting to use it in the main/browser process. In the render process you should be able to do something like:</p>&#xA;&#xA;<pre><code>require('electron-cookies');&#xA;&#xA;document.cookie = 'key=value; key2=value2';&#xA;// or to clear the cookies&#xA;document.clearCookies();&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-03-03T09:42:56,"","",,3,,,
35821568,2,,35821531,2016-03-06T00:18:59,,1,,"<p>Electron is probably running your code in <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Strict_mode"" rel=""nofollow"">strict mode</a>.</p>&#xA;&#xA;<p>Strict mode will throw a <code>ReferenceError</code> if you try to assign a value to a variable that hasn't yet been defined. This helps prevent you from accidentally declaring global variables.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Assignments which would accidentally create global variables instead throw in strict mode:</p>&#xA;</blockquote>&#xA;&#xA;<p>Add the <code>'use strict';</code> directive to the top of your file or function to evaluate the code with the strict rules in the browser.</p>&#xA;&#xA;<p>You can fix it by adding <code>var</code> to your loop binding.</p>&#xA;&#xA;<pre><code>for(var key in userData){&#xA;  // ...&#xA;}&#xA;</code></pre>&#xA;",1088797,"",1088797,"",2016-03-06T00:23:24,2016-03-06T00:23:24,"","",,1,,,
35838247,2,,35834480,2016-03-07T07:22:54,,1,,"<p>It makes little sense to use React in the main Electron process, the main process doesn't have access to the DOM. So, unless your plan is to render React components to string and then send the result to the renderer process via IPC you need to rethink your approach.</p>&#xA;&#xA;<p>As for the <code>SyntaxError</code>, it looks like Babel isn't converting <code>import</code> to <code>require</code>, though I'm not sure if it's supposed to or if that's something that Webpack is supposed to handle. Are you using the <a href=""https://github.com/chentsulin/webpack-target-electron-renderer"" rel=""nofollow"">electron-renderer plugin</a>? You may want to start with the <a href=""https://github.com/chentsulin/electron-react-boilerplate"" rel=""nofollow"">electron-react-boilerplate</a>.</p>&#xA;",1259938,"",,"",,2016-03-07T07:22:54,"","",,2,,,
35691651,2,,35691216,2016-02-29T03:48:03,,2,,"<p>i suspect the problem is with digest cycle not getting fired. Angular will trigger the digest cycle only during events recognized by angular. If you have custom event, then it is developers responsibility to let angular know to trigger digest cycle. Try changing the code to the following</p>&#xA;&#xA;<pre><code>client.trackDevices()&#xA;.then(function(tracker) {&#xA;  tracker.on('add', function(device) {&#xA;    forceUpdate(device.id); //this doesn't assign &#xA;    console.log('Device %s was plugged in', device.id); //shows in console&#xA;    $scope.$apply();&#xA;  });&#xA;  tracker.on('end', function() {&#xA;    console.log('Tracking stopped');&#xA;  });&#xA;})&#xA;.catch(function(err) {&#xA;  console.error('Something went wrong:', err.stack);&#xA;});&#xA;</code></pre>&#xA;",1533437,"",,"",,2016-02-29T03:48:03,"","",,2,,,
35847392,2,,35846392,2016-03-07T15:20:30,,2,,"<p>You'll need to install TypeScript type definitions for Electron, the first section of <a href=""https://blog.jetbrains.com/webstorm/2015/10/working-with-reactjs-in-webstorm-coding-assistance/"" rel=""nofollow"">this blog post</a> explains how to setup code completion for ReactJS in WebStorm:</p>&#xA;&#xA;<blockquote>&#xA;  <p>To enhance code completion with typed parameter information we recommend that you add a TypeScript definition file for <code>react.d.ts</code> as a JavaScript library for the project.</p>&#xA;  &#xA;  <p>Go to Preferences | Languages &amp; Frameworks | JavaScript | Libraries, click Download…, select TypeScript community stubs, search for react and click Download. The file will be added as JavaScript library for WebStorm to use in coding assistance.</p>&#xA;</blockquote>&#xA;&#xA;<p>You should be able to install the Electron type definitions the same way, keep in mind that the typings for Electron are named <code>github-electron</code> (as opposed to just <code>electron</code>).</p>&#xA;",1259938,"",,"",,2016-03-07T15:20:30,"","",,1,,,
35662893,2,,35521176,2016-02-26T22:26:58,,3,,"<p>There are two things that I wan to point out first:</p>&#xA;&#xA;<ol>&#xA;<li>Including node modules in a web worker</li>&#xA;</ol>&#xA;&#xA;<p>In order to include the module <code>ivona-node</code> I had to change a little its code. When I try to browserify it I get an error: <code>Uncaught Error: Cannot find module '/node_modules/ivona-node/src/proxy'</code>. Checking the <code>bundle.js</code> generated I notice that it doesn't include the code of the module <code>proxy</code> which is in the file <code>proxy.js</code> in the <code>src</code> folder of <code>ivona-node</code>. I can load the <code>proxy</code> module changing this line <code>HttpsPA = require(__dirname + '/proxy');</code> by this: <code>HttpsPA = require('./proxy');</code>. After that <code>ivona-node</code> can be loaded in the client side through <code>browserify</code>. Then I was facing another error when trying to follow the example. Turn out that this code:</p>&#xA;&#xA;<pre><code>ivona.createVoice(Text2Speak.data[0], {&#xA;    body: {&#xA;        voice: {&#xA;            name: 'Salli',&#xA;            language: 'en-US',&#xA;            gender: 'Female'&#xA;        }&#xA;    }&#xA;}).pipe(fs.createWriteStream('text.mp3'));&#xA;</code></pre>&#xA;&#xA;<p>is no longer correct, it cause the error: <code>Uncaught Error: Cannot pipe. Not readable.</code> The problem here is in the module <code>http</code>. the module <code>browserify</code> has wrapped many built-in modules of <code>npm</code>, which mean that  they are available when you use <code>require()</code> or use their functionality. <code>http</code> is one of them, but as you can reference here: <a href=""https://www.npmjs.com/package/stream-http"" rel=""nofollow"">strem-http</a>, It tries to match node's api and behavior as closely as possible, but some features aren't available, since browsers don't give nearly as much control over requests. Very significant is the fact of the class <code>http.ClientRequest</code>, this class in <code>nodejs</code> environment create an <code>OutgoingMessage</code> that produce this statement <code>Stream.call(this)</code> allowing the use of the method <code>pipe</code> in the request, but in the <code>browserify</code> version when you call <code>https.request</code> the result is a <code>Writable</code> Stream, this is the call inside the <code>ClientRequest</code>: <code>stream.Writable.call(self)</code>. So we have explicitly a <code>WritableStream</code> even with this method:</p>&#xA;&#xA;<pre><code>Writable.prototype.pipe = function() {&#xA;  this.emit('error', new Error('Cannot pipe. Not readable.'));&#xA;}; &#xA;</code></pre>&#xA;&#xA;<p>The responsible of the above error. Now we have to use a different approach to save the data from <code>ivona-node</code>, which leave me to the second issue.</p>&#xA;&#xA;<ol start=""2"">&#xA;<li>Create a file from a web worker</li>&#xA;</ol>&#xA;&#xA;<p>Is well know that having access to the FileSystem from a web application have many security issues, so the problem is how we can have access to the FileSystem from the web worker. One first approach is using the HTML5 <a href=""http://dev.w3.org/2009/dap/file-system/file-dir-sys.html"" rel=""nofollow"">FileSystem API</a>. This approach has the inconvenient that it operate in a sandbox, so if we have in a desktop app we want to have access to the OS FileSystem. To accomplish this goal we can pass the data from the web worker to the main thread where we can use all the <code>nodejs</code> FileSystem functionalities.  Web worker provide a functionality called <code>Transferable Objects</code>, you can get more info <a href=""http://www.html5rocks.com/en/tutorials/workers/basics/"" rel=""nofollow"">here</a> and <a href=""http://w3c.github.io/html/infrastructure.html#transferable-objects"" rel=""nofollow"">here</a> that we can use to pass the data received from the module <code>ivona-node</code> in the web worker to the main thread and then use <code>require('fs')</code> in the same way that <code>node-webkit</code> provide us.  These are the step you can follow:</p>&#xA;&#xA;<ol>&#xA;<li><p>install <code>browserify</code></p>&#xA;&#xA;<pre><code>npm install -g browserify&#xA;</code></pre></li>&#xA;<li><p>install <code>ivona-node</code></p>&#xA;&#xA;<pre><code>npm install ivona-node --save&#xA;</code></pre></li>&#xA;<li><p>go to <code>node_modules/ivona-node/src/main.js</code> and change this line:</p>&#xA;&#xA;<p><code>HttpsPA = require(__dirname + '/proxy');</code></p>&#xA;&#xA;<p>by this:</p>&#xA;&#xA;<p><code>HttpsPA = require('./proxy');</code></p></li>&#xA;<li><p>create your <code>bundle.js</code>. </p>&#xA;&#xA;<p>Here you have some alternatives, create a <code>bundle.js</code> to allow a <code>require()</code>  or put some code in a file with some logic of what you want (you can actually include all the code of the web worker) and then create the <code>bundle.js</code>. In this example I will create the <code>bundle.js</code> only for have access to <code>require()</code> and use <code>importScripts()</code> in the web worker file</p>&#xA;&#xA;<p><code>browserify -r ivona-node &gt; ibundle.js</code></p></li>&#xA;<li><p>Put all together</p>&#xA;&#xA;<p>Modify the code of the web worker and <code>index.html</code> in order to receive the data in the web worker and send it to the main thread (in index.html)</p></li>&#xA;</ol>&#xA;&#xA;<p>this is the code of web worker (MyWorker.js)</p>&#xA;&#xA;<pre><code>importScripts('ibundle.js');&#xA;var Ivona = require('ivona-node');&#xA;&#xA;onmessage = function T2MP3(Text2Speak)&#xA;{&#xA;    var ivona = new Ivona({&#xA;        accessKey: 'xxxxxxxxxxxx',&#xA;        secretKey: 'xxxxxxxxxxxx'&#xA;    });&#xA;&#xA;    var req = ivona.createVoice(Text2Speak.data[0], {&#xA;        body: {&#xA;            voice: {&#xA;                name: 'Salli',&#xA;                language: 'en-US',&#xA;                gender: 'Female'&#xA;            }&#xA;        }&#xA;    });&#xA;&#xA;    req.on('data', function(chunk){&#xA;        var arr = new Uint8Array(chunk);&#xA;        postMessage({event: 'data', data: arr}, [arr.buffer]);&#xA;    });&#xA;&#xA;    req.on('end', function(){&#xA;        postMessage(Text2Speak.data[0]);&#xA;    });&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and index.html:</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;title&gt;apptitle&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;&lt;p&gt;&lt;output id=""result""&gt;&lt;/output&gt;&lt;/p&gt;&#xA;&lt;button onclick=""startWorker()""&gt;Start Worker&lt;/button&gt;&#xA;&lt;button onclick=""stopWorker()""&gt;Stop Worker&lt;/button&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;&#xA;&lt;script&gt;&#xA;    var w;&#xA;    var fs = require('fs');&#xA;&#xA;    function startWorker() {&#xA;        var writer = fs.createWriteStream('text.mp3');&#xA;        if(typeof(Worker) !== ""undefined"") {&#xA;            if(typeof(w) == ""undefined"") {&#xA;                w = new Worker(""MyWorker.js"");&#xA;&#xA;                w.postMessage(['This is some text to speak.']);&#xA;            }&#xA;            w.onmessage = function(event) {&#xA;                var data = event.data;&#xA;                if(data.event !== undefined &amp;&amp; data.event == 'data'){&#xA;                     var buffer = new Buffer(data.data);&#xA;                     writer.write(buffer);&#xA;                }&#xA;                else{&#xA;                    writer.end();&#xA;                    document.getElementById(""result"").innerHTML = data;&#xA;                }&#xA;&#xA;            };&#xA;        } else {&#xA;            document.getElementById(""result"").innerHTML = ""Sorry! No Web Worker support."";&#xA;        }&#xA;    }&#xA;&#xA;    function stopWorker() {&#xA;        w.terminate();&#xA;        w = undefined;&#xA;    }&#xA;&lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",4346603,"",4346603,"",2016-02-29T15:32:28,2016-02-29T15:32:28,"","",,0,,,
35742228,2,,35698408,2016-03-02T08:44:10,,3,,"<p>I fixed the error with the electron module not being recognized by the debugger. The problem was due to the electron application not starting prior to my application being launched.</p>&#xA;&#xA;<p>I found a stackoverflow question and linked blog post which addressed this issue -&#xA;<a href=""https://stackoverflow.com/questions/31429394/debugging-electron-atom-script-with-visual-studio-code"">Debugging Electron-Atom script with Visual Studio Code</a>  /<br>&#xA;<a href=""http://www.mylifeforthecode.com/a-better-way-to-launch-electron-from-visual-studio-code/"" rel=""nofollow noreferrer"">http://www.mylifeforthecode.com/a-better-way-to-launch-electron-from-visual-studio-code/</a></p>&#xA;&#xA;<p>Adding the line <code>""runtimeExecutable"": ""${workspaceRoot}/node_modules/electron-prebuilt/dist/electron""</code> to my ""launch.json"" file started electron before the debugger launched.</p>&#xA;&#xA;<p>My final ""launch.json"" file was:</p>&#xA;&#xA;<pre><code>{&#xA;    ""version"": ""0.2.0"",&#xA;    ""configurations"": [&#xA;        {&#xA;            ""name"": ""Launch Black-Screen"",&#xA;            ""type"": ""node"",&#xA;            ""request"": ""launch"",&#xA;            ""program"": ""${workspaceRoot}/src/main/Main.ts"",&#xA;            ""stopOnEntry"": false,&#xA;            ""cwd"": ""${workspaceRoot}/src"",&#xA;            ""sourceMaps"": true,&#xA;            ""outDir"": ""${workspaceRoot}/src/bin"",&#xA;            ""runtimeExecutable"": ""${workspaceRoot}/node_modules/electron-prebuilt/dist/electron""&#xA;        }&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The debugger is stopping at the breakpoints I set. I noticed the performance of electron is much slower using the debugger but that's another issue I'll work through :)</p>&#xA;",4527697,"",-1,"",2017-05-23T12:24:27,2016-03-02T08:44:10,"","",,1,,,
35729673,2,,35729554,2016-03-01T17:40:08,,4,,"<p>You need to add the <code>babel-loader</code> so webpack knows to use babel to process your files</p>&#xA;&#xA;<pre><code>$ npm install --save-dev babel-loader&#xA;</code></pre>&#xA;&#xA;<p>And then in your `webpack.config.js:</p>&#xA;&#xA;<pre><code>module.exports = {&#xA;  entry: path.resolve(__dirname, ""js/helloworld.jsx""),&#xA;  output: {&#xA;    path: path.resolve(__dirname, ""out""),&#xA;    publicPath: 'out/',&#xA;    filename: 'app.js'&#xA;  },&#xA;  module: {&#xA;    loaders: [&#xA;        {&#xA;            test: /\.jsx?$/,&#xA;            loader: 'babel',&#xA;            exclude: /node_modules/&#xA;        }&#xA;    ]&#xA;  }&#xA;};&#xA;</code></pre>&#xA;",115049,"",,"",,2016-03-01T17:40:08,"","",,0,,,
35677768,2,,35677387,2016-02-28T01:47:24,,5,,"<p>I'm not too sure about all this myself, but here is how I do it anyway:</p>&#xA;&#xA;<ol>&#xA;<li><p>Go to settings (ctrl-alt-s), Languages &amp; Frameworks, Libraries.</p></li>&#xA;<li><p>Click download. Change dropdown from <code>Official libraries</code> to <code>Typescript community stubs</code>.</p></li>&#xA;<li><p>Find <code>node-webkit</code>. This is the old name for nw.js. There is no stub for nw.js yet that I know of. Download and install.</p></li>&#xA;<li><p>This is usually enough for other libraries, but for some reason I must fix the scopes for it to work with nw.js.  Therefore click <code>manage scopes</code>.</p></li>&#xA;<li><p>Choose your project root directory, and click on the space to the right of the directory below <code>Library</code>. Make sure <code>node-webkit</code> is checked.</p></li>&#xA;</ol>&#xA;&#xA;<p>With that done I was able to resolve dependencies and get code completions for nw.js.  It might be old though but at least it's something.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/bKGTm.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/bKGTm.png"" alt=""enter image description here""></a></p>&#xA;",1497533,"",1497533,"",2016-02-28T01:58:10,2016-02-28T01:58:10,"","",,0,,,
35643478,2,,35630934,2016-02-26T04:27:50,,12,,"<p>I believe the issue is that you're pointing Electron to your script directly, meaning Electron is ignoring the existence of your <code>package.json</code> file entirely. Thus it does not know the name of your app.</p>&#xA;&#xA;<p>Try:</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ""start"": ""electron .""&#xA;}&#xA;</code></pre>&#xA;",418710,"",,"",,2016-02-26T04:27:50,"","",,2,,,
35703812,2,,35697058,2016-02-29T15:52:20,,13,,"<p>Well, you can use the snippet from <a href=""https://stackoverflow.com/questions/11944932/how-to-download-a-file-with-node-js-without-using-third-party-libraries"">this answer</a> and do it the node way. </p>&#xA;&#xA;<pre><code>var http = require('http');&#xA;var fs   = require('fs');&#xA;var app  = require('remote').require('app')&#xA;&#xA;var file = fs.createWriteStream(app.getDataPath() + ""externalFiles/file.jpg"");&#xA;var request = http.get(""http://url-to-api/some-image.jpg"", function(response) {&#xA;  response.pipe(file);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And you could use the <code>App Data Path</code> for storing the files. Of course, you would have to parse the name of the file from the URL, and then you are ready to go.</p>&#xA;&#xA;<p>You could also use web contents</p>&#xA;&#xA;<p><a href=""https://github.com/atom/electron/blob/master/docs/api/web-contents.md"" rel=""noreferrer"">https://github.com/atom/electron/blob/master/docs/api/web-contents.md</a></p>&#xA;&#xA;<p>Then your app would be working as a browser, and offline support would have to be added by using local storage or some other technics. </p>&#xA;&#xA;<p><strong>UPDATE:</strong></p>&#xA;&#xA;<p>As today there are a couple of packages that can help with this like this one <a href=""https://github.com/sindresorhus/electron-dl"" rel=""noreferrer"">https://github.com/sindresorhus/electron-dl</a></p>&#xA;",1034110,"",1034110,"",2017-08-21T19:59:31,2017-08-21T19:59:31,"","",,1,,,
35782702,2,,35008347,2016-03-03T20:45:55,,13,,"<p>try this</p>&#xA;&#xA;<pre><code>if (process.platform === 'darwin') {&#xA;  var forceQuit = false;&#xA;  app.on('before-quit', function() {&#xA;    forceQuit = true;&#xA;  });&#xA;  mainWindow.on('close', function(event) {&#xA;    if (!forceQuit) {&#xA;      event.preventDefault();&#xA;&#xA;      /*&#xA;       * your process here&#xA;       */&#xA;    }&#xA;  });&#xA;}&#xA;</code></pre>&#xA;",6015330,"",,"",,2016-03-03T20:45:55,"","",,1,,,
35712608,2,,35711134,2016-03-01T00:40:07,,14,,"<p>You can send messages from the main process to a renderer process via webContents.send as called out in the documentation here: <a href=""https://github.com/atom/electron/blob/master/docs/api/web-contents.md#webcontentssendchannel-arg1-arg2-"" rel=""noreferrer"">https://github.com/atom/electron/blob/master/docs/api/web-contents.md#webcontentssendchannel-arg1-arg2-</a>. </p>&#xA;&#xA;<p>Here is how you do it straight from the docs:</p>&#xA;&#xA;<p>In the main process:</p>&#xA;&#xA;<pre><code>// In the main process.&#xA;var window = null;&#xA;app.on('ready', function() {&#xA;  window = new BrowserWindow({width: 800, height: 600});&#xA;  window.loadURL('file://' + __dirname + '/index.html');&#xA;  window.webContents.on('did-finish-load', function() {&#xA;    window.webContents.send('ping', 'whoooooooh!');&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>In index.html:</p>&#xA;&#xA;<pre><code>&lt;!-- index.html --&gt;&#xA;&lt;html&gt;&#xA;&lt;body&gt;&#xA;  &lt;script&gt;&#xA;    require('electron').ipcRenderer.on('ping', function(event, message) {&#xA;      console.log(message);  // Prints ""whoooooooh!""&#xA;    });&#xA;  &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Note it is asynchronous. I am not sure how that affects things with your particular solution, but this should at least get you talking back to the renderer process.</p>&#xA;",3399439,"",,"",,2016-03-01T00:40:07,"","",,0,,,
35691476,2,,35682131,2016-02-29T03:27:30,,15,,"<p>Two things you can try:</p>&#xA;&#xA;<ul>&#xA;<li>Make sure every node modules that you need to run on production build added into <code>dependencies</code> in package.json. E.g: <code>npm install &lt;module_name&gt; --save</code></li>&#xA;<li>How does it work when --asar=false (More info at <a href=""https://github.com/electron-userland/electron-packager"" rel=""noreferrer"">https://github.com/electron-userland/electron-packager</a>)</li>&#xA;</ul>&#xA;",3614616,"",,"",,2016-02-29T03:27:30,"","",,3,,,
35672988,2,,35672602,2016-02-27T17:28:24,,16,,"<p>You can set the User-Agent header in the main process using <a href=""https://github.com/atom/electron/blob/v0.36.9/docs/api/session.md#seswebrequestonbeforesendheadersfilter-listener"" rel=""noreferrer"">onBeforeSendHeaders</a>:</p>&#xA;&#xA;<pre><code>import { session } from 'electron';&#xA;&#xA;session.defaultSession.webRequest.onBeforeSendHeaders((details, callback) =&gt; {&#xA;  details.requestHeaders['User-Agent'] = 'SuperDuperAgent';&#xA;  callback({ cancel: false, requestHeaders: details.requestHeaders });&#xA;});&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-02-27T17:28:24,"","",,3,,,
35840732,2,,35840347,2016-03-07T10:00:47,,17,,"<p>Use the <a href=""https://github.com/atom/electron/blob/v0.36.10/docs/api/shell.md#shellopenitemfullpath"" rel=""noreferrer""><code>openItem()</code></a> function provided by Electron's <code>shell</code> module, for example:</p>&#xA;&#xA;<pre><code>const shell = require('electron').shell;&#xA;const path = require('path');&#xA;&#xA;shell.openItem(path.join(__dirname, 'test.docx'));&#xA;</code></pre>&#xA;&#xA;<p>According to the docs the <code>shell</code> module should be available in both the main/browser and renderer processes.</p>&#xA;",1259938,"",,"",,2016-03-07T10:00:47,"","",,3,,,
35656261,2,,35654730,2016-02-26T15:57:44,,20,,"<p>If you're going to process the file on the user's machine then there is no need to upload the file anywhere, it's already exactly where you need it. All you need to do is popup a dialog to allow the user to browse their file system and select the file they want your app to process. You can create a button and call <a href=""https://github.com/atom/electron/blob/v0.36.9/docs/api/dialog.md#dialogshowopendialogbrowserwindow-options-callback"" rel=""noreferrer"">dialog.showOpenDialog</a> when the user presses it, that will get you a filename and you can then use Node's <a href=""https://nodejs.org/api/fs.html#fs_fs_readfile_file_options_callback"" rel=""noreferrer"">fs.readFile</a> to read it from disk, then you can go ahead and process the contents in whichever way you want.</p>&#xA;",1259938,"",,"",,2016-02-26T15:57:44,"","",,1,,,
35664860,2,,35660043,2016-02-27T02:08:15,,20,,"<p>Your only option in Electron would be to create a <a href=""https://electronjs.org/docs/api/frameless-window"" rel=""noreferrer"">frameless</a> (aka borderless) window, and then create a ""fake"" title bar with CSS, including any UI elements you need.</p>&#xA;&#xA;<p>Electron/webkit provides CSS properties that allows you to make any element draggable, like a titlebar:</p>&#xA;&#xA;<pre><code>.titlebar {&#xA;  -webkit-user-select: none;&#xA;  -webkit-app-region: drag;&#xA;}&#xA;</code></pre>&#xA;",418710,"",418710,"",2018-05-20T10:30:05,2018-05-20T10:30:05,"","",,0,,,
27127686,2,,27099053,2014-11-25T13:10:59,,0,,"<p>Initially executable file which was created was 92mb. While creating a nw file, I was adding unnecessary files as showin figure<img src=""https://i.stack.imgur.com/EXtT6.png"" alt=""""></p>&#xA;&#xA;<p>Some of folders which are selected contain big files like <code>node_modules</code> which is 126mb (In my case)&#xA;Because of this, Once file was completely packaged and run on different machines, It was taking time to load due to extraction of compressed file in windows which was approximately two minutes.  </p>&#xA;&#xA;<p>Solution was to select only required folders for packaging and eliminate others as shown in image below:<br>&#xA;<img src=""https://i.stack.imgur.com/ePI9v.png"" alt=""enter image description here""></p>&#xA;&#xA;<p>And also to minimise size of application, If any of files were big from selected files, I minified them before packaging.  </p>&#xA;&#xA;<p>In this way, instead of getting a 95mb compressed file, I got 1mb file which I packaged and ran it and it took only 5 seconds to load application instead of 2 minutes.</p>&#xA;",1355500,"",,"",,2014-11-25T13:10:59,"","",,0,,,
27206762,2,,26946858,2014-11-29T20:29:03,,0,,"<p>I eventually gave up, and wrapped console.log() with:</p>&#xA;&#xA;<pre><code>log = function() {&#xA;   console.log(util.format.apply(this, arguments));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The actual terminal console output is done via <code>RenderFrameHostImpl::OnAddMessageToConsole</code> in chromium, with the prefix info being generated via <code>LogMessage::Init()</code> in the format:</p>&#xA;&#xA;<pre><code>[pid:MMDD/HHMMSS:severity:filename(line)]&#xA;</code></pre>&#xA;&#xA;<p>The javascript console.log is implemented in console.cc, via the Log() function. The printf style formatting is being done at a higher level, so that by the time the Log() function (or similar) are called, they are only passed a single string.</p>&#xA;&#xA;<p>It's not a satisfying answer, but a tolerable workaround.</p>&#xA;",4255828,"",,"",,2014-11-29T20:29:03,"","",,0,,,
27255982,2,,27255155,2014-12-02T18:00:54,,0,,"<p>Got it working!</p>&#xA;&#xA;<pre><code>client.readFile(""package.nw"", {binary : true}, function(error, data) {&#xA;          if (error) {&#xA;            return showError(error);  // Something went wrong.&#xA;            throw new Error(error);&#xA;          }&#xA;            toastr.info(""Storing update.."");&#xA;            console.log(data);&#xA;            fs.writeFile(""package.nw"", data, 'binary', function(err) {&#xA;                if(err) {&#xA;                    return showError(error);&#xA;                }&#xA;&#xA;                toastr.info(""Update complete!"");&#xA;            });&#xA;        });&#xA;</code></pre>&#xA;&#xA;<p>had to use {binary : true} to get it working!&#xA;<a href=""https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client.readFile"" rel=""nofollow"">https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client.readFile</a></p>&#xA;",2004976,"",,"",,2014-12-02T18:00:54,"","",,0,,,
27194597,2,,27194464,2014-11-28T18:59:11,,1,,"<p>As far as I know NeDB does not have an option to create initial data.</p>&#xA;&#xA;<p>I think the easiest way to achieve this is to simply query whether there is data. If counting documents returns <code>0</code>, obviously the initial data have not yet been saved, so you should do this now.</p>&#xA;&#xA;<p>If you include this check in the startup code of your application, it will automatically initialize the data on first run, and afterwards simply do nothing.</p>&#xA;",1333873,"",,"",,2014-11-28T18:59:11,"","",,2,,,
27195174,2,,27192782,2014-11-28T19:55:57,,2,,"<ol>&#xA;<li>Your module's short name will be used in ""require""</li>&#xA;<li>Your 32-bit code (compiled with target=ia32) will work on 64-bit platform, but not the other way around</li>&#xA;<li>After you have compiled your module for all platforms, it should be enough to pack different zip, .app or .exe versions for different platforms, with different respective binaries of your module.</li>&#xA;</ol>&#xA;",2056720,"",,"",,2014-11-28T19:55:57,"","",,2,,,
27207915,2,,27195364,2014-11-29T22:36:53,,4,,"<p>To minimize node-webkit app to task bar, AFAIK you have to do two things</p>&#xA;&#xA;<pre><code>window.hide()&#xA;&#xA;window.setShowInTaskbar(true);&#xA;</code></pre>&#xA;",597441,"",,"",,2014-11-29T22:36:53,"","",,0,,,
55053219,2,,55035728,2019-03-07T21:40:01,,0,,"<p>As Janith said, you don't need to use a preload script. Here is a working sample based on your Github repo :</p>&#xA;&#xA;<p>Index.html - in HEADER part, modify like this :</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;script&gt;window.$ = window.jQuery = require('jquery');&lt;/script&gt;&#xA;&lt;script src=""./node_modules/popper.js/dist/umd/popper.min.js""&gt;&lt;/script&gt;&#xA;&lt;script src=""./node_modules/bootstrap/dist/js/bootstrap.min.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Note that you have to use the path <code>./node_modules/popper.js/dist/umd/popper.min.js</code> or you will get an error in the console (see <a href=""https://stackoverflow.com/questions/46459767/popper-js-in-bootstrap-4-gives-syntaxerror-unexpected-token-export/46460112"">popper.js in bootstrap 4 gives SyntaxError Unexpected token export</a>)</p>&#xA;&#xA;<p>Index.html - FOOTER, add :</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;script src=""./index.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Rename preload.js to index.js</p>&#xA;&#xA;<p>index.js can be :</p>&#xA;&#xA;<pre><code>console.log('Preload.js');&#xA;setTimeout(() =&gt; {&#xA;    console.log('Open Boostrap Modal');&#xA;    $('#myModal').modal('show');&#xA;}, 5000);&#xA;</code></pre>&#xA;&#xA;<p>and finally, main.js can be :</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>const { app, BrowserWindow } = require('electron');&#xA;const path = require('path')&#xA;const url = require('url')&#xA;&#xA;let createWindow = () =&gt; {&#xA;    let win = new BrowserWindow({&#xA;        width: 800,&#xA;        height: 500,&#xA;        center: true,&#xA;        resizable: false,&#xA;        show: false&#xA;    });&#xA;    win.setMenu(null);&#xA;    const mainUrl = url.format({ // https://electronjs.org/docs/api/browser-window#winloadurlurl-options&#xA;        protocol: 'file',&#xA;        slashes: true,&#xA;        pathname: path.join(__dirname, 'index.html')&#xA;      })&#xA;    win.loadURL(mainUrl);&#xA;    win.once('ready-to-show', () =&gt; {&#xA;        win.show();&#xA;        win.webContents.openDevTools();&#xA;    });&#xA;    win.on('closed', () =&gt; {&#xA;        win = null;&#xA;    });&#xA;};&#xA;app.on('ready', createWindow);&#xA;</code></pre>&#xA;&#xA;<p>I made a pull request to your repo to get changes.</p>&#xA;",3207990,"",,"",,2019-03-07T21:40:01,"","",,0,,,
55055781,2,,54953950,2019-03-08T02:15:44,,0,,"<p>I was able to achieve this by using readdir instead of readdirSync to examine the files, and by launching powershell off the main process.  The problem was the readdirSync.</p>&#xA;",3461268,"",,"",,2019-03-08T02:15:44,"","",,0,,,
55060178,2,,55044221,2019-03-08T09:25:04,,1,,"<p>SOLVED!</p>&#xA;&#xA;<p>It turns out to be a very simple issue. I've been using windows for too long, I forgot that Linux is case-sensitive with the directory and file names. I just renamed my directories and files based on my code and <code>yarn run dev</code> now works!</p>&#xA;",4809171,"",,"",,2019-03-08T09:25:04,"","",,0,,,
55064458,2,,55064333,2019-03-08T13:41:44,,0,,"<p>Like @tehhowch says in the comments, the syntax is <code>Object.entries(foo)</code></p>&#xA;&#xA;<p>You can see the MDn page: <a href=""https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object/entries"" rel=""nofollow noreferrer"">https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object/entries</a></p>&#xA;",9013688,"",,"",,2019-03-08T13:41:44,"","",,0,,,
55078562,2,,55078315,2019-03-09T14:52:35,,0,,"<p>In Electron apps, you distinguish between the main process (usually setting up the main BrowserWindow) from the renderer processes (which execute inside a BrowserWindow).</p>&#xA;&#xA;<p>Only the main process has access to GUI-related functionality, such as creating new windows. In order to have the renderer process have access to such functionality, the Electron developers built this shortcut that allows to access objects belonging to the main process.</p>&#xA;&#xA;<p>From <a href=""https://electronjs.org/docs/api/remote"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/remote</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>With the remote module, you can invoke methods of the main process object without explicitly sending inter-process messages, [..]</p>&#xA;</blockquote>&#xA;",1335237,"",,"",,2019-03-09T14:52:35,"","",,0,,,
55082734,2,,55081020,2019-03-09T22:47:14,,1,,<p>I had to disabled <code>mode: 'history'</code> in vue router and load this url: <code>http://localhost:9080/#/bot</code>.</p>&#xA;,8425145,"",,"",,2019-03-09T22:47:14,"","",,0,,,
55089198,2,,55086634,2019-03-10T15:23:50,,0,,"<p>I successfully installed <code>robotjs</code> after following the <a href=""https://github.com/octalmage/robotjs#building"" rel=""nofollow noreferrer"">building</a> section and then executing the code <a href=""https://github.com/felixrieseberg/windows-build-tools/issues/56#issuecomment-308739624"" rel=""nofollow noreferrer"">in the reply to the issue</a> in order to first install <code>windows-build-tools</code>.<br>&#xA;Then, I executed the code in the 3rd step of <a href=""https://stackoverflow.com/a/46897783/8309806"">this answer</a> (except for tweaking the Electron version so it fits with <code>gRPC</code>, i.e. <code>--target=4.0.3</code> and tweaking the <code>--abi</code> value to fit my Node version - 10.15.2, so it's <code>--abi=64</code>).</p>&#xA;&#xA;<h2>EDIT</h2>&#xA;&#xA;<p>At some point, <code>RobotJS</code> caused my application to suddenly exit for some reason.<br>&#xA;I sought for another library and found <a href=""https://github.com/garimpeiro-it/node-key-sender"" rel=""nofollow noreferrer"">node-key-sender</a>, which not only solved that problem but was also much simpler to install.</p>&#xA;",8309806,"",8309806,"",2019-03-12T11:40:56,2019-03-12T11:40:56,"","",,0,,,
55111855,2,,55111757,2019-03-11T23:23:59,,0,,"<p>Second <code>then</code> argument is reserved for error handler, <code>then(returnvalue1=&gt;funct1, returnvalue2=&gt;funct2)</code> isn't a correct way ti handle return values.</p>&#xA;&#xA;<p><code>then</code> callback receives the only one return value as a parameter, a value that previous <code>then</code> callback returns.</p>&#xA;&#xA;<p>In case values from different <code>then</code> need to be used together, they should be either passed through entire promise chain as array or object value and destructured:</p>&#xA;&#xA;<pre><code>promise&#xA;.then(foo =&gt; {&#xA;   const bar = 'bar';&#xA;   return [foo, bar];&#xA; })&#xA;.then(([foo, bar]) =&gt; {&#xA;  // can access both foo and bar&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Or <code>then</code> should be nested to have access to the scope where necessary value is available:</p>&#xA;&#xA;<pre><code>promise&#xA;.then(foo =&gt; {&#xA;   const bar = 'bar';&#xA;&#xA;   return Promise.resolve(bar);&#xA;   .then(bar =&gt; {&#xA;     // can access both foo and bar&#xA;   })&#xA; })&#xA;</code></pre>&#xA;&#xA;<p>This is one of the problems that <code>async..await</code> solves.</p>&#xA;",3731501,"",,"",,2019-03-11T23:23:59,"","",,0,,,
55120618,2,,55072982,2019-03-12T11:40:36,,1,,"<p>The reason it blocks Electron is the <code>sleep(10)</code>. That call doesn't return for 10 seconds.</p>&#xA;&#xA;<p>So yes, there is a way to offload heavy computation to another thread. The biggest complication from doing so is that the thread can't make a callback to JavaScript without taking extra precautions nor can the thread access JavaScript data structures, so it must be provided with all the data necessary.</p>&#xA;&#xA;<p>Here's the example the C++ abstraction provides for N-API using a thread to calculate Pi.</p>&#xA;&#xA;<p><a href=""https://github.com/nodejs/abi-stable-node-addon-examples/blob/master/async_pi_estimate/node-addon-api/async.cc"" rel=""nofollow noreferrer"">node-addon-example</a></p>&#xA;&#xA;<p>And here are C++ wrappers to create thread-safe callbacks.</p>&#xA;&#xA;<p><a href=""https://github.com/mika-fischer/napi-thread-safe-callback"" rel=""nofollow noreferrer"">napi-threadsafe-callback</a></p>&#xA;&#xA;<p>It's not trivial but these two examples should get you through it.</p>&#xA;",2288754,"",,"",,2019-03-12T11:40:36,"","",,0,,,
55180193,2,,55180123,2019-03-15T10:11:07,,5,,"<p>Make an HTTP request and check the <code>Content-Type</code> and (if it is there) <code>Content-Disposition</code> headers. </p>&#xA;&#xA;<p>If <code>Content-Disposition</code> says it is an attachment, then it is a download. If it says it is inline, then it is intended to be displayed in the browser window.</p>&#xA;&#xA;<p>If <code>Content-Disposition</code> isn't specified, then you'll need to make the decision based on the MIME type. e.g. <code>text/html</code> should probably be shown in the browser window.</p>&#xA;",19068,"",,"",,2019-03-15T10:11:07,"","",,0,,,
55181476,2,,55180864,2019-03-15T11:20:25,,3,,"<p>Short answer is NO, you cannot extract a form value from a <code>Dialog MessageBox</code>. </p>&#xA;&#xA;<p>The MessageBox API is very clear, it only returns the index of the button pressed, even when using an async callback as you have done above.</p>&#xA;&#xA;<p>The proper way to accomplish your goal is to construct a new <a href=""https://electronjs.org/docs/api/browser-window#browserwindow"" rel=""nofollow noreferrer"">Browser Window</a> that would contain a proper form and that you can interact with properly.</p>&#xA;&#xA;<p>Additionally, if you want to remove the Chrome from the Window, you can add <a href=""https://electronjs.org/docs/api/frameless-window#frameless-window"" rel=""nofollow noreferrer"">Frameless Window Settings</a>.</p>&#xA;&#xA;<p>In either case, you would use the normal messaging API to communicate between the main process and the browser window.</p>&#xA;",9078341,"",,"",,2019-03-15T11:20:25,"","",,0,,,
55186080,2,,55160789,2019-03-15T15:37:17,,0,,<p>Eventually I've added the configuration in following way:</p>&#xA;&#xA;<p>For reading configuration file I used electron-store package.&#xA;The configuration read in main thread once per start. I used IPC for passing configuration data from main thread to render thread and cache it in angular service.&#xA;That worked for me.</p>&#xA;,1229440,"",,"",,2019-03-15T15:37:17,"","",,0,,,
55189806,2,,55189451,2019-03-15T19:51:52,,1,,"<p>Are you sure? I have tested this with node v8.9.1 and the code works for me as expected: </p>&#xA;&#xA;<ul>&#xA;<li>The outer loop starts at index 0 which gets printed on the console, </li>&#xA;<li>then the inner loop prints numbers 0 to 31. </li>&#xA;<li>In turn the outer loop continues at index 1 which gets printed on console and </li>&#xA;<li>then the inner loop prints 0 to 31,</li>&#xA;<li>and so on</li>&#xA;</ul>&#xA;&#xA;<p>May be you got confused with the output at some point. Thus, my suggestion is to prefix the console outputs with x and y as shown below.</p>&#xA;&#xA;<pre><code>for(let x = 0; x &lt; 64; x++) {&#xA;    console.log('x=' + x);&#xA;    for(let y = 0; y &lt; 32; y++) {&#xA;        console.log('y=' + y);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can also trial this on <a href=""https://repl.it/@mwittig/Dump-Coordinates"" rel=""nofollow noreferrer"">repl.it</a></p>&#xA;",4816693,"",4816693,"",2019-03-15T20:40:40,2019-03-15T20:40:40,"","",,0,,,
55189822,2,,55168327,2019-03-15T19:53:27,,0,,<p>As mentioned in the comments: The maps container needs to be given an explicit height &amp; width via CSS in order for the map to show up.</p>&#xA;&#xA;<pre><code>#container {&#xA;  width: 400px;&#xA;  height: 400px;&#xA;}&#xA;</code></pre>&#xA;,3038392,"",,"",,2019-03-15T19:53:27,"","",,0,,,
55191378,2,,55191189,2019-03-15T22:21:59,,3,,"<pre><code>let contentHeight = myWindow.getContentSize()[1];&#xA;</code></pre>&#xA;&#xA;<p>Ref: <a href=""https://electronjs.org/docs/api/browser-window#wingetcontentsize"" rel=""nofollow noreferrer"">win.getContentSize()</a></p>&#xA;",,user8022331,,"",,2019-03-15T22:21:59,"","",,0,,,
55192780,2,,55093405,2019-03-16T02:03:27,,0,,"<p>Try replacing <code>app.quit()</code> with <code>app.exit()</code>.</p>&#xA;&#xA;<p><code>app.exit()</code> does not emit events before quitting as opposed to <code>app.quit()</code> which does the proper cleanup.</p>&#xA;&#xA;<p>It's hard to say exactly where the error is coming from and why, but this issue is documented <a href=""https://github.com/electron/electron/issues/8862"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;",3479456,"",,"",,2019-03-16T02:03:27,"","",,0,,,
55193372,2,,55193218,2019-03-16T04:09:19,,1,,"<p>No. You got a wrong impression. You can use classes without any transpilers. There was a time when you couldn't, but <a href=""https://node.green/#ES2015-functions-class"" rel=""nofollow noreferrer"">starting from NodeJS version 6</a>, that is not the case anymore.</p>&#xA;",189673,"",189673,"",2019-03-16T07:56:14,2019-03-16T07:56:14,"","",,0,,,
55198615,2,,50460038,2019-03-16T15:48:59,,1,,"<p>As my solution is that you can't directly store but what you can do is to convert the image first into a string or base64 string using whatever library you can find but it will generate a very long string depending on the image type and quality. </p>&#xA;&#xA;<p>I used the FileReader API provided by native JavaSCript :</p>&#xA;&#xA;<pre><code> const fileReader = new FileReader();&#xA;    fileReader.addEventListener('load', e =&gt; {&#xA;&#xA;                   let  imageStrings = (e.target.result);&#xA;&#xA;                });&#xA;   fileReader.readAsDataURL(file);&#xA;</code></pre>&#xA;&#xA;<p>So as you send this to Express or any web server you will find that it would cause a  Size error message or Post 413 Payload Error Message in the terminal or console of your client so if you were using express then you could tune the JSON limit and the encoding parameters. &#xA;Even if you save the image string it will be ugly to see in the nedb file (but hey it works at least now .)</p>&#xA;&#xA;<p>Another option is to consider what was said on this thread on the <a href=""https://github.com/louischatriot/nedb/issues/38"" rel=""nofollow noreferrer"">GitHub</a> page or  <a href=""https://github.com/louischatriot/nedb/issues/38"" rel=""nofollow noreferrer"">https://github.com/louischatriot/nedb/issues/38</a> This link they talk about uploading the file into your file system and storing it elsewhere and make a database reference to it in your nedb database.</p>&#xA;&#xA;<p>If you could find or anyone find a viable solution then please add a solution</p>&#xA;",6334851,"",,"",,2019-03-16T15:48:59,"","",,0,,,
55203597,2,,55203515,2019-03-17T03:32:19,,0,,"<p><strong><em>The problem using localStorage</em></strong></p>&#xA;&#xA;<p>the problem is that when the application is deleted the data stored using localStorage can continue to persist</p>&#xA;&#xA;<pre><code>C:\Users\%USERNAME%\AppData\Roaming\Atom&#xA;</code></pre>&#xA;&#xA;<p>contains localDB, indexedDB and a few other cache things</p>&#xA;&#xA;<p><strong><em>use some other way of persisting data</em></strong></p>&#xA;&#xA;<p>I think you can persist in the data in a JSON file or any configuration file text, in this case, create a json file(in any path)</p>&#xA;&#xA;<p>javascript</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const path = require('path');&#xA;const fs = require('fs');&#xA;&#xA;class Store {&#xA;constructor(opts) {&#xA;    // Renderer process has to get `app` module via `remote`, whereas the main process can get it directly&#xA;    // app.getPath('userData') will return a string of the user's app data directory path.&#xA;    const userDataPath = (electron.app || electron.remote.app).getPath('userData');&#xA;    // We'll use the `configName` property to set the file name and path.join to bring it all together as a string&#xA;    this.path = path.join(userDataPath, opts.configName + '.json');&#xA;&#xA;    this.data = parseDataFile(this.path, opts.defaults);&#xA;}&#xA;&#xA;// This will just return the property on the `data` object&#xA;get(key) {&#xA;    return this.data[key];&#xA;}&#xA;&#xA;// ...and this will set it&#xA;set(key, val) {&#xA;    this.data[key] = val;&#xA;    // Wait, I thought using the node.js' synchronous APIs was bad form?&#xA;    // We're not writing a server so there's not nearly the same IO demand on the process&#xA;    // Also if we used an async API and our app was quit before the asynchronous write had a chance to complete,&#xA;    // we might lose that data. Note that in a real app, we would try/catch this.&#xA;    fs.writeFileSync(this.path, JSON.stringify(this.data));&#xA;}&#xA;}&#xA;&#xA;function parseDataFile(filePath, defaults) {&#xA;// We'll try/catch it in case the file doesn't exist yet, which will be the case on the first application run.&#xA;// `fs.readFileSync` will return a JSON string which we then parse into a Javascript object&#xA;try {&#xA;    return JSON.parse(fs.readFileSync(filePath));&#xA;} catch(error) {&#xA;    // if there was some kind of error, return the passed in defaults instead.&#xA;    return defaults;&#xA;}&#xA;}&#xA;&#xA;// expose the class&#xA;module.exports = Store;&#xA;</code></pre>&#xA;&#xA;<p>the file is created for the first time and there if it could be validated if this value exists in the configuration file</p>&#xA;&#xA;<p>javascript</p>&#xA;&#xA;<pre><code>const { app, BrowserWindow } = require('electron');&#xA;const path = require('path');&#xA;const Store = require('./store.js');&#xA;let mainWindow; //do this so that the window object doesn't get GC'd&#xA;&#xA;// First instantiate the class&#xA;const store = new Store({&#xA;  configName: 'user-preferences',&#xA;  defaults: {&#xA;    initialLaunch: true&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>and get that value and process it</p>&#xA;&#xA;<pre><code>let { initialLaunch } = store.get('initialLaunch');&#xA;if(initialLaunch){&#xA;  //show initial config window&#xA;}else{&#xA;  //show other window&#xA;}&#xA;</code></pre>&#xA;",2872775,"",2872775,"",2019-03-17T03:40:03,2019-03-17T03:40:03,"","",,0,,,
55212551,2,,55200616,2019-03-17T22:24:07,,1,,"<p>I figured out what I was doing wrong. I was writing the Menu Items incorrectly. It should be:</p>&#xA;&#xA;<p><em>main.js:</em></p>&#xA;&#xA;<pre><code>const { Menu } = require('electron')&#xA;&#xA;let mainMenu = Menu.buildFromTemplate(require('./renderer/Menus/mainMenu'))&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  mainWindow.createWindow(),&#xA;  Menu.setApplicationMenu(mainMenu)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>mainMenu.js:</em></p>&#xA;&#xA;<pre><code>const foo = require('./itemFoo')&#xA;const bar = require('./itemBar')&#xA;&#xA;module.exports = [&#xA;    foo,&#xA;    bar&#xA;]&#xA;</code></pre>&#xA;&#xA;<p><em>itemBar.js:</em></p>&#xA;&#xA;<pre><code>module.exports = {&#xA;    label: 'Foo',&#xA;    id: 'itemFoo',&#xA;    submenu: [&#xA;        {label: 'Enter Foo'},&#xA;        {label: 'Exit Foo'}&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><em>itemFoo.js:</em></p>&#xA;&#xA;<pre><code>module.exports = {&#xA;    label: 'Bar',&#xA;    id: 'itemBar',&#xA;    submenu: [&#xA;        {label: 'Enter Bar'},&#xA;        {label: 'Exit Bar'}&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>That will allow me to have each main menu item in its own file and clear <em>main.js</em>.</p>&#xA;",1952287,"",,"",,2019-03-17T22:24:07,"","",,0,,,
55024886,2,,55023882,2019-03-06T13:59:52,,0,,"<p>What you are looking for is <a href=""https://electronjs.org/docs/api/browser-view"" rel=""nofollow noreferrer"">BrowserView</a></p>&#xA;&#xA;<p>From the docs: </p>&#xA;&#xA;<blockquote>&#xA;  <p>A <code>BrowserView</code> can be used to embed additional web content into a <code>BrowserWindow</code>. It is like a child window, except that it is positioned relative to its owning window. It is meant to be an alternative to the <code>webview</code> tag.</p>&#xA;</blockquote>&#xA;&#xA;<p>It looks like this is what you want, the views can render separate HTML pages and position them relatively inside the same browser window.</p>&#xA;&#xA;<pre><code>// In the main process.&#xA;const { BrowserView, BrowserWindow } = require('electron')&#xA;&#xA;let win = new BrowserWindow({ width: 800, height: 600 })&#xA;win.on('closed', () =&gt; {&#xA;  win = null&#xA;})&#xA;&#xA;let view = new BrowserView({&#xA;  webPreferences: {&#xA;    nodeIntegration: false&#xA;  }&#xA;})&#xA;win.setBrowserView(view)&#xA;view.setBounds({ x: 0, y: 0, width: 300, height: 300 })&#xA;view.webContents.loadURL('https://electronjs.org')&#xA;</code></pre>&#xA;",4505310,"",,"",,2019-03-06T13:59:52,"","",,1,,,
55030940,2,,55029098,2019-03-06T19:36:14,,1,,"<p>The <code>BrowserView</code> is currently an experimental feature of Electron.  Most of its functionality is still in beta releases of Electron.  Since this is still only in beta releases of Electron it is not safe to use in production releases.</p>&#xA;&#xA;<p>Having said that we can still get this to work.  First, install the Electron beta <code>npm install --save electron@v5.0.0-beta.5</code>.</p>&#xA;&#xA;<p>Then change your Electron file: </p>&#xA;&#xA;<pre><code>const { app, BrowserWindow, BrowserView } = require('electron');&#xA;function createWindow() {&#xA;    browserWindow = new BrowserWindow({ width: 1200, height: 600 });&#xA;    let browserView1 = new BrowserView({ webPreferences: { nodeIntegration: false }});&#xA;    let browserView2 = new BrowserView({ webPreferences: { nodeIntegration: false }});&#xA;    browserWindow.addBrowserView(browserView1);&#xA;    browserWindow.addBrowserView(browserView2);&#xA;    browserView1.setBounds({ x: 0, y: 0, width: 600, height: 600 });&#xA;    browserView2.setBounds({ x: 600, y: 0, width: 600, height: 600 });&#xA;    browserView1.webContents.loadURL('https://www.example.com');&#xA;    browserView2.webContents.loadURL('https://www.google.com');&#xA;    browserWindow.on('closed', function () { browserWindow = null; });&#xA;}&#xA;app.on('ready', createWindow);&#xA;</code></pre>&#xA;&#xA;<p>Instead of using <code>setBrowserView()</code> use <code>addBrowserView()</code>.</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/pull/16148"" rel=""nofollow noreferrer"">Feature request on git</a></p>&#xA;",4505310,"",4505310,"",2019-03-06T19:56:38,2019-03-06T19:56:38,"","",,1,,,
55062272,2,,55033691,2019-03-08T11:26:04,,0,,"<p>The solution is to have multiple BrowserViews and switch between them. That way each will remember its history.</p>&#xA;&#xA;<pre><code>var browserViews = [];&#xA;var activeBW;&#xA;&#xA;function addAndSwitchToTab() {&#xA;  activeBW = browserViews.length;&#xA;  browserViews[activeBW] = new BrowserView();&#xA;  browserWindow.setBrowserView(activeBW);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Start with the first one:</p>&#xA;&#xA;<pre><code>addAndSwitchToTab();&#xA;</code></pre>&#xA;&#xA;<p>When the user opens a new tab, just call the function again.</p>&#xA;",5734311,"",,"",,2019-03-08T11:26:04,"","",,1,,,
55066667,2,,55066086,2019-03-08T15:50:24,,1,,"<p>It's not clear in your question whether you're storing this sensitive data on Angular's side or Electron's side.&#xA;In any case, you're not supposed to store sensitive data such as API keys and whatnot inside Angular or any front-end framework, as all of these files are going to be visible by the browser once built.</p>&#xA;&#xA;<p>What you need to do is make sure you store such files in your back-end (e.g. <code>.env</code> file), or in the case of ElectronJS, there's <a href=""https://electronjs.org/docs/api/environment-variables"" rel=""nofollow noreferrer"">this simple technique</a> explained by Electron's DOCs.</p>&#xA;",2918731,"",,"",,2019-03-08T15:50:24,"","",,1,,,
55090754,2,,55090653,2019-03-10T18:05:39,,1,,"<p>This means that <code>electron</code> binary from locally installed <code>electron</code> package is executed. This is supported by NPM scripts.</p>&#xA;&#xA;<p>It can be run from a terminal with globally installed <a href=""https://github.com/zkat/npx"" rel=""nofollow noreferrer""><code>npx</code></a> package or by running the binary from relative path, with project root as current working directory:</p>&#xA;&#xA;<pre><code>./node_modules/.bin/electron&#xA;</code></pre>&#xA;",3731501,"",,"",,2019-03-10T18:05:39,"","",,1,,,
55152504,2,,55152272,2019-03-13T23:08:54,,0,,"<p>You could use something like this:</p>&#xA;&#xA;<pre><code>let menu_spans = document.querySelectorAll("".menu_spans"");&#xA;&#xA;for (var i = 0; i &lt; menu_spans.length; i++) {&#xA;  menu_spans[i].addEventListener('click', smth, false);&#xA;}&#xA;&#xA;function smth() {&#xA;  console.log(this.id);&#xA;}&#xA;</code></pre>&#xA;",3711189,"",,"",,2019-03-13T23:08:54,"","",,1,,,
55213234,2,,55212880,2019-03-18T00:12:59,,0,,"<p>First, you need to remove that <code>unchecked</code> tag its useless.&#xA;Secondly, give a class to the checkbox for example "" checkButton "".&#xA;Lastly, you need to select the Item from the DOM. </p>&#xA;&#xA;<pre><code>const checkBtn = document.querySelector('.checkButton');&#xA;</code></pre>&#xA;&#xA;<p>If you want to DO something when the checkbox is checked you just need to use the .checked property -></p>&#xA;&#xA;<pre><code> if(checkBtn.checked) {&#xA; // do something &#xA;} else {&#xA; // do something else &#xA; }&#xA;</code></pre>&#xA;&#xA;<p>Also use <code>function</code> because if you are gonna use it with capital ,,F'' JS is gonna think this is a <code>function constructor</code>. </p>&#xA;",11017666,"",11017666,"",2019-05-21T21:19:17,2019-05-21T21:19:17,"","",,1,,,
55223533,2,,55209139,2019-03-18T14:21:13,,0,,"<p>The answer was just beyond my understanding of how all these components are working together.  Hopefully this will help someone else just coming up to speed on developing a Quasar/Vue/Electron app.  If you launch your app/website using</p>&#xA;&#xA;<pre><code>quasar dev&#xA;</code></pre>&#xA;&#xA;<p>you get a browser (renderer) that communicates with main electron process that cannot handle node main process stuff like: </p>&#xA;&#xA;<pre><code>const electron = require('electron')&#xA;const fs = require('fs')&#xA;&#xA;const files = fs.readdirSync('/')&#xA;console.log(files)&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li>I couldn't find a clear, concise and simple way. It appears there is a webpack config that can provide the same 'deep' integration, but I was looking for a more out of the box solution.</li>&#xA;</ul>&#xA;&#xA;<p>If you launch your app </p>&#xA;&#xA;<pre><code>quasar dev -m electron&#xA;</code></pre>&#xA;&#xA;<p>You get deep integration and now can 'require()' or import the above modules within Vue components in your Quasar app.</p>&#xA;",749738,"",749738,"",2019-03-18T14:26:51,2019-03-18T14:26:51,"","",,1,,,
55030865,2,,55030682,2019-03-06T19:31:11,,1,,"<p>Yes, there is. It's enabled using a feature called <code>scripts</code> in <code>npm</code>. <code>npm</code> provides hooks for you to trigger your script. I recommend using the <code>postinstall</code> hook which will run <code>bower i</code> after you run <code>npm i</code>.</p>&#xA;&#xA;<p>Adapting from the <a href=""https://docs.npmjs.com/misc/scripts#examples"" rel=""nofollow noreferrer"">docs</a>:</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""foo"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""scripts"" :&#xA;  { &#xA;    ""postinstall"" : ""bower i""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",2691993,"",,"",,2019-03-06T19:31:11,"","",,2,,,
55090086,2,,55061908,2019-03-10T16:53:18,,3,,"<p>So, I managed to get this working but in a very, very, roundabout way. Effectively session hijacking your own session, saving and loading it on app close/open. Code below with some comments, prefaced with some useful links. This worked when running as dev, and when running with a build application.</p>&#xA;&#xA;<p>You may need to look into possible security issues here with storing cookies locally like this.</p>&#xA;&#xA;<p>The only thing I have not tackled in this answer is:</p>&#xA;&#xA;<blockquote>&#xA;  <p>keep history ... after restart of the Electron app</p>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/electron-userland/electron-json-storage"" rel=""nofollow noreferrer"">Electron-Json-Storage Package</a> - We use this to store/retrieve cookies. The default location for storage is <code>C:\Users\%user%\AppData\Roaming\%appname%\storage</code>.</li>&#xA;<li><a href=""https://electronjs.org/docs/api/cookies"" rel=""nofollow noreferrer"">Electron Cookies documentation</a> </li>&#xA;<li><a href=""https://electronjs.org/docs/api/session"" rel=""nofollow noreferrer"">Electron Session documentation</a> - Notably the <code>session.fromPartition</code> docs.</li>&#xA;</ul>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code>const { app, BrowserWindow, BrowserView, globalShortcut, session } = require('electron');&#xA;const eJSONStorage = require('electron-json-storage');&#xA;&#xA;// Our two different sesions, views, and base URL for our 'tabs'.&#xA;let bv1Session, bv2Session = session;&#xA;let bv1, bv2 = BrowserView;&#xA;const appTabUrl = 'https://www.twitter.com';&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  const width = 1200; const height = 600;&#xA;  let b1Active = true;&#xA;&#xA;  // Our browser window&#xA;  browserWindow = new BrowserWindow({&#xA;    width: width,&#xA;    height: height,&#xA;  });&#xA;&#xA;  // Our first browser window with it's own session instance.&#xA;  bv1Session = session.fromPartition('persist:bv1Session', { cache: true });&#xA;  bv1 = createBrowserView(appTabUrl, bv1Session, width, height);&#xA;  loadCookieState('view1Cookies', bv1Session);&#xA;&#xA;  // Our second browser window with it's own session instance.&#xA;  bv2Session = session.fromPartition('persist:bv2Session', { cache: true });&#xA;  bv2 = createBrowserView(appTabUrl, bv2Session, width, height);&#xA;  loadCookieState('view2Cookies', bv2Session);&#xA;&#xA;  // Our initial setting of the browserview&#xA;  browserWindow.setBrowserView(bv1);&#xA;&#xA;  // Our shortcut listener and basic switch mechanic&#xA;  // Set to [CTRL + /] for windows or [CMD + /] for OSX&#xA;  globalShortcut.register('CommandOrControl+/', () =&gt; {&#xA;    b1Active ? browserWindow.setBrowserView(bv2) : browserWindow.setBrowserView(bv1);&#xA;    b1Active = !b1Active&#xA;  });&#xA;});&#xA;&#xA;// When the app closes, exit gracefully.&#xA;// Unregister keypress listener, save cookie states, exit the app.&#xA;app.on('window-all-closed', () =&gt; {&#xA;  globalShortcut.unregisterAll();&#xA;  saveCookieState('view1Cookies', bv1Session);&#xA;  saveCookieState('view2Cookies', bv2Session);&#xA;  app.quit();&#xA;})&#xA;&#xA;// Helper method to generate a browser view.&#xA;function createBrowserView(url, session, width, height) {&#xA;  let browserView = new BrowserView({&#xA;    webPreferences: {&#xA;      nodeIntegration: false,&#xA;      nodeIntegrationInWorker: false,&#xA;      session: session&#xA;    }&#xA;  });&#xA;  browserView.setBounds({ x: 0, y: 0, width: width, height: height });&#xA;  browserView.webContents.loadURL(url);&#xA;  return browserView;&#xA;}&#xA;&#xA;// Method that takes a session name, and our current session to save its state.&#xA;function saveCookieState(sessionName, currentSession) {&#xA;  currentSession.cookies.get({}, (_, cookies) =&gt; {&#xA;    cookies.forEach(cookie =&gt; {&#xA;      // URL is a required paramater, take it from the domain with a little parsing.&#xA;      // Twitter always uses HTTPS otherwise, we would need to check for http vs https too.&#xA;      const cDomain = !cookie.domain.startsWith('.') ? `.${cookie.domain}` : cookie.domain;&#xA;      cookie.url = `https://www${cDomain}`&#xA;    });&#xA;    // Save the set of cookies against the session name.&#xA;    eJSONStorage.set(sessionName, cookies, err =&gt; {&#xA;      if (err) {&#xA;        throw err;&#xA;      }&#xA;    });&#xA;  });&#xA;}&#xA;&#xA;// Method that loads a session based on its name, into a session created by us.&#xA;function loadCookieState(sessionName, currentSession) {&#xA;  eJSONStorage.get(sessionName, (error, cookieData) =&gt; {&#xA;    // Check for empty object returned, this means no saved sessions.&#xA;    if (Object.entries(cookieData).length === 0) {&#xA;      return;&#xA;    }&#xA;    if (error) {&#xA;      throw error;&#xA;    }&#xA;    // If we have saved sessions and no errors, load the sessions.&#xA;    cookieData.forEach(cookie =&gt; currentSession.cookies.set(cookie, error =&gt; {&#xA;      if (error) console.error(error);&#xA;    }));&#xA;  });&#xA;}&#xA;</code></pre>&#xA;",5872672,"",5872672,"",2019-03-10T18:00:19,2019-03-10T18:00:19,"","",,2,,,
55116409,2,,55115019,2019-03-12T07:45:47,,3,,"<p>Command line interfaces installed with npm are put in the <code>node_modules/.bin/</code> directory. You can't just run them from the command line because that directory isn't in your <code>PATH</code> (unless you put it there, or you installed it globally).</p>&#xA;&#xA;<p>So, if you want to run electron without <code>npm start</code>, you can run <code>./node_modules/.bin/electron .</code>. Since this is a bit verbose, newer versions of <code>npm</code> provide the command <code>npx</code> to run things without the <code>./node_modules/.bin/</code> part, so <code>npx electron .</code> also works.</p>&#xA;&#xA;<p>Since npm scripts often use the packages you've installed, they automatically add <code>node_modules/.bin/</code> to the <code>PATH</code> before running your command. As a result, the start script can just reference electron directly.</p>&#xA;&#xA;<p><code>npx</code> can do some other cool things too – npm has a <a href=""https://blog.npmjs.org/post/162869356040"" rel=""nofollow noreferrer"">blog post</a> about it.</p>&#xA;",7282573,"",7282573,"",2019-03-12T07:56:20,2019-03-12T07:56:20,"","",,2,,,
55129417,2,,55128495,2019-03-12T19:34:10,,3,,"<p>While not totally obvious, I fixed my issue - my <code>win</code> object was throwing warnings since I am using service workers and therefore, did not load the html properly. </p>&#xA;&#xA;<p>The solution: use the <code>nodeIntegrationInWorker: true</code> property. Once that was added everything worked like magic.</p>&#xA;&#xA;<pre><code>  // Create the browser window.&#xA;  win = new BrowserWindow({&#xA;    x: 0,&#xA;    y: 0,&#xA;    width: size.width,&#xA;    height: size.height,&#xA;    webPreferences: {&#xA;      nodeIntegration: true,&#xA;      nodeIntegrationInWorker: true&#xA;    }&#xA;  });&#xA;</code></pre>&#xA;",1140218,"",,"",,2019-03-12T19:34:10,"","",,2,,,
55096470,2,,55096400,2019-03-11T06:44:26,,2,,"<p>If you were to keep the same logic, you need to add a flag to see if you switched from no connection to connected. I did that with the <code>isConnected</code>&#xA;flag:</p>&#xA;&#xA;<pre><code>const dns = require(""dns"");&#xA;let isConnected = false;&#xA;&#xA;function liveCheck() {&#xA;  dns.resolve(""www.google.com"", function(err, addr) {&#xA;    if (err) {&#xA;      if (isConnected) {&#xA;        notifier.notify({&#xA;          appName: ""com.myapp.id"",&#xA;          title: ""network error"",&#xA;          message: ""disconnected"",&#xA;          icon: ""./facebook.png"",&#xA;        });&#xA;      }&#xA;      isConnected = false;&#xA;    } else {&#xA;      if (isConnected) {&#xA;        //connection is still up and running, do nothing&#xA;      } else {&#xA;        notifier.notify({&#xA;          appName: ""com.myapp.id"",&#xA;          title: ""connection gained"",&#xA;          message: ""connected"",&#xA;          icon: ""./facebook.png"",&#xA;        });&#xA;      }&#xA;      isConnected = true;&#xA;    }&#xA;  });&#xA;}&#xA;&#xA;setInterval(function() {&#xA;  liveCheck();&#xA;}, 1000);&#xA;</code></pre>&#xA;",3233388,"",51685,"",2019-03-11T08:34:37,2019-03-11T08:34:37,"","",,4,,,
55150354,2,,55150151,2019-03-13T20:05:48,,1,,"<p>I guess it's more related to your linux desktop environment reather than electron itself. If you can, you could try to simulate the fullscreen behaviour by setting the size of your BrowserWindow according to your screen resolution.</p>&#xA;&#xA;<pre><code> const { width, height } = electron.screen.getPrimaryDisplay().workAreaSize&#xA; win = new BrowserWindow({ width, height, fullscreen: false })&#xA;</code></pre>&#xA;",3858761,"",3858761,"",2019-03-13T20:12:06,2019-03-13T20:12:06,"","",,4,,,
34221186,2,,33314400,2015-12-11T10:22:07,,0,,"<p>Recent versions of <a href=""https://github.com/arboleya/electrify"" rel=""nofollow"">Electrify</a> enable an easy IPC connection between Electron's NodeJS and Meteor as RPC, allowing the Meteor client to remotely call the functions of Electron's NodeJS.</p>&#xA;",378979,"",,"",,2015-12-11T10:22:07,"","",,0,,,
34024769,2,,33690411,2015-12-01T16:08:33,,1,,"<p>I solved this problem.</p>&#xA;&#xA;<p>So first thing to know is that an external manifest won't count if an embedded manifest is already present. (see answer to <a href=""https://superuser.com/questions/905103/what-does-it-mean-to-enable-windows-to-prioritise-external-manifests"">https://superuser.com/questions/905103/what-does-it-mean-to-enable-windows-to-prioritise-external-manifests</a>)</p>&#xA;&#xA;<p>And it turns out that the electron.exe has already a manifest embedded &#xA;and the package done with electron-package is mostly a rename of the &#xA;electron executable.</p>&#xA;&#xA;<p>So in order to embed a news manifest with the right privileges needed, I took the manifest in the electron repo (see <a href=""https://github.com/atom/electron/blob/master/atom/browser/resources/win/atom.manifest"" rel=""nofollow noreferrer"">https://github.com/atom/electron/blob/master/atom/browser/resources/win/atom.manifest</a>), edited the security section and used the mt.exe tool to add the new manifest (see <a href=""https://msdn.microsoft.com/en-us/library/aa375649%28v=vs.85%29.aspx"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/aa375649%28v=vs.85%29.aspx</a>)</p>&#xA;&#xA;<p>And tadaa !</p>&#xA;",2403230,"",-1,"",2017-03-20T10:04:20,2015-12-01T16:08:33,"","",,0,,,
34154274,2,,34084323,2015-12-08T11:07:19,,1,,"<p>Yes, it is possible, but not trivial. First, you will need to use the ""sqlite3"" NPM package, but there's also an additional step:</p>&#xA;&#xA;<p>You will need to build SQLite into your Node Webkit though, which is well documented on the <a href=""https://www.npmjs.com/package/sqlite3"" rel=""nofollow"">SQLite website</a>.</p>&#xA;",991479,"",,"",,2015-12-08T11:07:19,"","",,0,,,
34182579,2,,34182410,2015-12-09T15:27:03,,1,,"<p>First of all you don't need to return anything from the service factory recipe, you just need to assign a method to the <code>this</code> variable.</p>&#xA;&#xA;<p>At least, you need:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>// service.js&#xD;&#xA;&#xD;&#xA;self.loadCategories = function() {&#xD;&#xA;  var deferred = $q.defer();&#xD;&#xA;  db.find({type: 'categorie'}, function (err, docs) {&#xD;&#xA;    deferred.resolve(docs);&#xD;&#xA;  });&#xD;&#xA;  &#xD;&#xA;  return deferred.promise;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;// controller.js&#xD;&#xA;&#xD;&#xA;service&#xD;&#xA;  .loadCategories()&#xD;&#xA;  .then(function(categories) {&#xD;&#xA;    $scope.categories = categories;&#xD;&#xA;  })&#xD;&#xA;;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4099454,"",,"",,2015-12-09T15:27:03,"","",,1,,,
34198461,2,,31967854,2015-12-10T09:47:36,,1,,"<p>For future reference, the correct way to solve this is to set the <code>""node-integration""</code> option on BrowserWindow to <code>false</code>, like so:</p>&#xA;&#xA;<pre><code>var app = require ('app')&#xA;var BrowserWindow = require ('browser-window')&#xA;app.on('ready', function(){&#xA;    var mainWindow = new BrowserWindow({&#xA;        width:1115,&#xA;        height:945,&#xA;        ""node-integration"": false&#xA;    })&#xA;    mainWindow.loadUrl('http://my-app-at-heroku.herokuapp.com')&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Source: <a href=""https://github.com/atom/electron/issues/254#issuecomment-82322963"" rel=""nofollow"">https://github.com/atom/electron/issues/254#issuecomment-82322963</a></p>&#xA;",834459,"",,"",,2015-12-10T09:47:36,"","",,0,,,
34216990,2,,34216989,2015-12-11T05:55:24,,1,,"<p>You have to use separate mechanisms to include libraries based on whether they are server-side or client-side.   Server-side libraries can be loaded with <code>require()</code>.   Client-side libraries (if they need access to the document environment) need to be loaded with <code>&lt;script&gt;</code> tags in the index.html file.</p>&#xA;&#xA;<p>In hindsight it is obvious, but it took me the better part of a day to figure out, so posting in case anyone else has the same confusion...</p>&#xA;",1539989,"",,"",,2015-12-11T05:55:24,"","",,1,,,
34222329,2,,33369992,2015-12-11T11:18:47,,1,,<p>The reason for this turned out to be that our network was using an NTLM proxy which required ISA client to be running on our machines but it was not running on the other machine. Installing ISA client on that machine allowed traffic to go through the proxy as normal.</p>&#xA;,4300292,"",,"",,2015-12-11T11:18:47,"","",,0,,,
34085901,2,,34085584,2015-12-04T10:14:25,,3,,<p>According to logs you provided the <code>fpm</code> is missing. You have to install it globally for build to work by</p>&#xA;&#xA;<pre><code>npm install -g fpm&#xA;</code></pre>&#xA;,820948,"",,"",,2015-12-04T10:14:25,"","",,1,,,
34210063,2,,34209960,2015-12-10T19:23:06,,6,,"<p>Just use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer""><code>Array.prototype.forEach()</code></a></p>&#xA;&#xA;<blockquote>&#xA;  <p>The <code>forEach()</code> method executes a provided function once per array element.</p>&#xA;</blockquote>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var data = [{ title: 'Break You', artist: 'Lamb Of God', album: 'Ashes Of The Wake' }, { title: 'An Extra Nail For Your Coffin', artist: 'Lamb Of God', album: 'Ashes Of The Wake' }, { title: 'Envy And Doubt', artist: 'Sever The King', album: 'Traitor' }, { title: 'Self Destruct', artist: 'Sever The King', album: 'Traitor' }],&#xD;&#xA;    grouped = {};&#xD;&#xA;&#xD;&#xA;data.forEach(function (a) {&#xD;&#xA;    grouped[a.album] = grouped[a.album] || [];&#xD;&#xA;    grouped[a.album].push({ title: a.title, artist: a.artist });&#xD;&#xA;});&#xD;&#xA;document.write('&lt;pre&gt;' + JSON.stringify(grouped, 0, 4) + '&lt;/pre&gt;');</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",1447675,"",,"",,2015-12-10T19:23:06,"","",,0,,,
34220561,2,,34174124,2015-12-11T09:53:15,,6,,"<p>In node.js there are two methods to launch an external program using standard module <code>child_process</code>: <code>exec</code> and <code>spawn</code>.</p>&#xA;&#xA;<p>When using <code>exec</code> you get stdout and stderror information upon the external program exit. Data is returned to node.js only then, as Mi Ke Bu correctly noted in comments. </p>&#xA;&#xA;<p>But if you want receieve data from the external program interactively (I suspect you are not really going to launch notepad.exe), you should use another method - <code>spawn</code>.</p>&#xA;&#xA;<p>Consider the example:</p>&#xA;&#xA;<pre><code>var spawn = require('child_process').spawn,&#xA;    child    = spawn('C:\\windows\\notepad.exe', [""C:/Windows/System32/Drivers/etc/hosts""]);&#xA;&#xA;child.stdout.on('data', function (data) {&#xA;  console.log('stdout: ' + data);&#xA;});&#xA;&#xA;child.stderr.on('data', function (data) {&#xA;  console.log('stderr: ' + data);&#xA;});&#xA;&#xA;child.on('close', function (code) {&#xA;  console.log('child process exited with code ' + code);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Also you need to use double backward slashes in path name: <code>C:\\Windows\\notepad.exe</code>, otherwise your path is evaluated as<br>&#xA;<code>C:windows&#xA;notepad.exe</code>&#xA;(with line return) which of course does not exist.  </p>&#xA;&#xA;<p>Or you could just use forward slashes, as in command-line arguments in the example.</p>&#xA;",2715393,"",,"",,2015-12-11T09:53:15,"","",,2,,,
34168483,2,,34146019,2015-12-09T00:06:39,,10,,"<p>Check out this page <a href=""https://nodejs.org/api/os.html"" rel=""noreferrer"">https://nodejs.org/api/os.html</a>. It is nodejs documentation, but since electron and node are very much the same thing it will work.</p>&#xA;&#xA;<pre><code>var os = require('os');&#xA;</code></pre>&#xA;&#xA;<p>is what you are looking for though.</p>&#xA;",1792676,"",,"",,2015-12-09T00:06:39,"","",,0,,,
34170467,2,,33944837,2015-12-09T03:58:13,,12,,"<p>Alright figured it out, we can use Electrons 'web-preferences' property.</p>&#xA;&#xA;<pre><code>var nightmare = Nightmare({&#xA;  show: false,&#xA;  webPreferences: {&#xA;    partition: 'nopersist'&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>when initiating nightmare use 'web-prefences' partition property to handle sessions. more info here: <a href=""https://github.com/atom/electron/blob/master/docs/api/browser-window.md"" rel=""noreferrer"">https://github.com/atom/electron/blob/master/docs/api/browser-window.md</a>. The gist of is as follows:</p>&#xA;&#xA;<blockquote>&#xA;  <p>the page will use a persistent session available to all pages in the app with the same partition. if there is no persist: prefix, the page will use an in-memory session.</p>&#xA;</blockquote>&#xA;&#xA;<p>so basically if you init nightmare as:</p>&#xA;&#xA;<pre><code>var nightmare = Nightmare({&#xA;  show: false,&#xA;  webPreferences: {&#xA;    partition: 'persist:derp'&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>then the session will persist under 'derp', this can be helpful when you are testing features inside authenticated routes. (derp isn't significant, can be anything following <strong>persist:</strong>)</p>&#xA;&#xA;<p>if you don't want session to persist don't use <strong>persist:</strong>. I use <strong>nopersist</strong> but this could be any string that isn't prefixed by <strong>persist:</strong></p>&#xA;&#xA;<p><strong>EDIT:</strong> <code>show:false</code> isn't significant to session, it just shows what electron (which nightmare uses) is doing if you set <code>show:true</code>, but this line can be removed</p>&#xA;",353217,"",2864502,"",2016-10-20T14:35:50,2016-10-20T14:35:50,"","",,4,,,
57665093,2,,57591204,2019-08-26T21:22:02,,1,,"<p>Just put <code>&lt;script src=""node_modules/jquery/dist/jquery.min.js""&gt;&lt;/script&gt;</code> in your html.</p>&#xA;&#xA;<p>Note: In order for your scripts to be executed on electron, you need to write as follows inside your html:</p>&#xA;&#xA;<pre><code>  &lt;script&gt;&#xA;         if (typeof module === 'object') {&#xA;             window.module = module;&#xA;             module = undefined;&#xA;          }&#xA;   &lt;/script&gt;&#xA;&#xA;   &lt;script src=""node_modules/jquery/dist/jquery.min.js""&gt;&lt;/script&gt;&#xA;    &lt;script&gt;&#xA;      $(document).keydown(function(event) {&#xA;                alert(event.which)&#xA;        })&#xA;   &lt;/script&gt;&#xA;    //Put your other scripts here&#xA;&#xA;     &lt;script&gt;&#xA;        if (window.module) module = window.module;&#xA;&#xA;     &lt;/script&gt;&#xA;</code></pre>&#xA;",10914570,"",,"",,2019-08-26T21:22:02,"","",,0,,,
57676679,2,,57575970,2019-08-27T14:16:55,,2,,"<p>The <code>esm.js</code> file is a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"" rel=""nofollow noreferrer"">Javascript Module</a> which will be served to browsers that support it.</p>&#xA;&#xA;<p>When you use the old way of including a Stencil component (<code>/dist/mwc.js</code>) you will get a console warning about how to properly include it, which is also documented <a href=""https://github.com/ionic-team/stencil/blob/master/BREAKING_CHANGES.md#indexhtmls-scripts-updated-to-use-typemodule"" rel=""nofollow noreferrer"">in the breaking changes</a> for version 1:</p>&#xA;&#xA;<pre><code>[mwc] Deprecated script, please remove: &lt;script src=""/dist/mwc.js""&gt;&lt;/script&gt;&#xA;To improve performance it is recommended to set the differential scripts in the head as follows:&#xA;&lt;script type=""module"" src=""/dist/mwc/mwc.esm.js""&gt;&lt;/script&gt;&#xA;&lt;script nomodule src=""/dist/mwc/mwc.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>I don't know why <code>Map</code> and <code>Set</code> loops would not work with the non-module file but the module is the recommended way of importing in Chrome.</p>&#xA;&#xA;<p>The MIME type error seems to be <a href=""https://github.com/electron/electron/issues/12011"" rel=""nofollow noreferrer"">a known issue in Electron</a> which seems to be because Electron uses the <code>file://</code> protocol by default which doesn't allow including modules, as per spec.</p>&#xA;",1242317,"",,"",,2019-08-27T14:16:55,"","",,0,,,
57705752,2,,48420819,2019-08-29T08:05:14,,2,,"<p>This is probably <a href=""https://github.com/electron/electron/issues/7688"" rel=""nofollow noreferrer"">this PATH issue</a>.</p>&#xA;&#xA;<p>And you can fix it with <a href=""https://github.com/sindresorhus/fix-path"" rel=""nofollow noreferrer"">this package</a>.</p>&#xA;&#xA;<pre><code>const fixPath = require('fix-path');&#xA;&#xA;fixPath();&#xA;&#xA;console.log(process.env.PATH);&#xA;//=&gt; '/usr/local/bin:/usr/bin'&#xA;</code></pre>&#xA;",2666094,"",,"",,2019-08-29T08:05:14,"","",,0,,,
57709716,2,,57708778,2019-08-29T11:57:39,,0,,"<p>Actually the problem was on <code>start</code> cmd, as it executes <code>electron</code> before completion of <code>start:dev</code> due to which electron app launches before webpack-dev-server compiles the react app.  </p>&#xA;&#xA;<p>At firstly, you can execute <code>start:dev</code> cmd, wait until the completion of webpack-dev-server to compile the react app and then execute <code>electron</code> cmd.</p>&#xA;&#xA;<p>You can use this cmd </p>&#xA;&#xA;<pre><code> ""start"": ""concurrently \""npm run start:dev\"" \""wait-on http://localhost:4172  &amp;&amp; npm run electron\"""",&#xA;</code></pre>&#xA;&#xA;<p>Here you need to add <code>wait-on</code> and <code>concurrently</code> as dev dependencies. </p>&#xA;",7642160,"",,"",,2019-08-29T11:57:39,"","",,0,,,
57722535,2,,57690039,2019-08-30T07:41:07,,0,,"<p>While trying to look for an answer, I tried and came across that the issue lies in the <code>loadURL</code> of <strong>main.js</strong>. The below code change resolved the issue for me.</p>&#xA;&#xA;<p><strong>main.js</strong></p>&#xA;&#xA;<p>From</p>&#xA;&#xA;<pre><code>win.loadURL(`file://${__dirname}/dist/index.html`)&#xA;</code></pre>&#xA;&#xA;<p>To</p>&#xA;&#xA;<pre><code>win.loadURL(`file:///${__dirname}/dist/angular-electron-first-app/index.html`);&#xA;</code></pre>&#xA;&#xA;<p>Here, angular-election-first-app is the project folder that gets created in the dist folder.</p>&#xA;",8532303,"",,"",,2019-08-30T07:41:07,"","",,0,,,
57746870,2,,57746786,2019-09-01T14:34:23,,0,,"<p>Try to use quick start app officially provided in the <a href=""https://electronjs.org/docs/tutorial/first-app#trying-this-example"" rel=""nofollow noreferrer"">electron website</a></p>&#xA;&#xA;<p>Direct github url is provided in the link</p>&#xA;&#xA;<p>Otherwise download demo apps from officially provided in the <a href=""https://electronjs.org/#get-started"" rel=""nofollow noreferrer"">electron demo apps</a></p>&#xA;",4489164,"",,"",,2019-09-01T14:34:23,"","",,0,,,
57759319,2,,57755371,2019-09-02T15:14:36,,0,,"<p>Found the reason, I was missing a parameter in my api request, the 'oauth_token'. I was expecting this to work out of the box, since I've passed the oAuth2Client object (which had the token info) to the google.drive() function.</p>&#xA;&#xA;<pre><code>  drive.files.list(&#xA;    {&#xA;      pageSize: 10,&#xA;      fields: 'nextPageToken, files(id, name)',&#xA;      oauth_token: oAuth2Client.credentials.access_token&#xA;    },&#xA;    (err, res) =&gt; {&#xA;&#xA;    }&#xA;  );&#xA;</code></pre>&#xA;",2852132,"",,"",,2019-09-02T15:14:36,"","",,0,,,
57761134,2,,57746272,2019-09-02T18:03:04,,0,,"<p><strong>Figured out how to fix this to help someone else in future here is what i did:</strong></p>&#xA;&#xA;<ul>&#xA;<li>You need to install electron in your current project. I was using globally installed electron...also don't forget to save the dependency. If not saved you'll get errors when rebuilding. </li>&#xA;<li>i was running the <code>electron-rebuild</code> wrongly to run electron rebuild:</li>&#xA;</ul>&#xA;&#xA;<p><strong>On macOS and linux</strong></p>&#xA;&#xA;<blockquote>&#xA;  <p>Every time you run ""npm install"", run this:</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>   ./node_modules/.bin/electron-rebuild&#xA;</code></pre>&#xA;&#xA;<p><strong>On Windows</strong></p>&#xA;&#xA;<blockquote>&#xA;  <p>On Windows if you have trouble, try:</p>&#xA;</blockquote>&#xA;&#xA;<pre><code> .\node_modules\.bin\electron-rebuild.cmd&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/tutorial/using-native-node-modules"" rel=""nofollow noreferrer"">https://electronjs.org/docs/tutorial/using-native-node-modules</a></p>&#xA;",11565835,"",,"",,2019-09-02T18:03:04,"","",,0,,,
57772361,2,,57765776,2019-09-03T13:03:59,,1,,"<p>If I understand your question, the way I've solved this is to use the <code>toUnix</code> method of the <a href=""https://www.npmjs.com/package/upath"" rel=""nofollow noreferrer"">upath</a> lib</p>&#xA;&#xA;<pre><code>upath.toUnix(upath.join(__dirname, ""assets"", ""email.svg""));&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>Normal path doesn't convert paths to a unified format (ie /) before&#xA;  calculating paths (normalize, join), which can lead to numerous&#xA;  problems. Also path joining, normalization etc on the two formats is&#xA;  not consistent, depending on where it runs. Running path on Windows&#xA;  yields different results than when it runs on Linux / Mac.</p>&#xA;  &#xA;  <p>In general, if you code your paths logic while developing on Unix/Mac&#xA;  and it runs on Windows, you may run into problems when using path.</p>&#xA;  &#xA;  <p>Note that using Unix / on Windows works perfectly inside nodejs (and&#xA;  other languages), so there's no reason to stick to the Windows legacy&#xA;  at all.</p>&#xA;</blockquote>&#xA;",840992,"",,"",,2019-09-03T13:03:59,"","",,0,,,
57797987,2,,57797875,2019-09-05T03:17:55,,1,,"<p>There are several ways to do that:</p>&#xA;&#xA;<p>1) Using the <code>BrowserWindow</code> object</p>&#xA;&#xA;<pre><code>win = new BrowserWindow({width: 800, height: 600});&#xA;win.loadURL('http://my-website/foo.html', {&#xA;    userAgent: 'MyFakeAgent/1.0'&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>2) Inside a <code>&lt;webview&gt;</code></p>&#xA;&#xA;<pre><code>&lt;webview src=""http://my-website/foo.html"" useragent=""MyFakeAgent/1.0""&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;&#xA;<p>3) Using the <code>onBeforeSendHeaders</code> callback in the main process</p>&#xA;&#xA;<pre><code>import { session } from 'electron';&#xA;&#xA;session.defaultSession.webRequest.onBeforeSendHeaders((details, callback) =&gt; {&#xA;    details.requestHeaders['User-Agent'] = 'MyFakeAgent/1.0';&#xA;    callback({&#xA;        cancel: false,&#xA;        requestHeaders: details.requestHeaders&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",11697360,"",,"",,2019-09-05T03:17:55,"","",,0,,,
57812072,2,,57811832,2019-09-05T19:44:00,,0,,"<p>Nevermind. Just put this in your package.json:</p>&#xA;&#xA;<pre><code>""build"": {&#xA;    ""asar"": false&#xA;  },&#xA;</code></pre>&#xA;",4607004,"",,"",,2019-09-05T19:44:00,"","",,0,,,
57857644,2,,57832597,2019-09-09T16:12:07,,0,,"<p>So it looks like my problem was caused from improper packaging after all. Adding this in <code>package.json</code> ""build"" configuration fixed it:</p>&#xA;&#xA;<pre><code>""directories"": {&#xA;  ""buildResources"": ""build"",&#xA;  ""app"": ""build""&#xA;}&#xA;</code></pre>&#xA;",10031533,"",,"",,2019-09-09T16:12:07,"","",,0,,,
57721951,2,,57721529,2019-08-30T06:58:44,,2,,"<p>Careful here, <code>showOpenDialog()</code> is an async function and returns a promise.</p>&#xA;&#xA;<p>In your case the correct usage is:</p>&#xA;&#xA;<pre><code>dialog.showOpenDialog(mainWindow, {&#xA;    properties: ['openFile'],&#xA;    filters: [{ name: 'Markdown', extensions: ['md', 'markdown', 'txt'] }]&#xA;}).then(result =&gt; {&#xA;    const file = result.filePaths[0];&#xA;    const fileContent = fs.readFileSync(file).toString();&#xA;    console.log(fileContent);&#xA;}).catch(err =&gt; {&#xA;    console.log(err)&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Also consider using <code>readFile</code> instead of <code>readFileSync</code> to avoid blocking the Electron main thread.</p>&#xA;",11697360,"",,"",,2019-08-30T06:58:44,"","",,1,,,
57769629,2,,55927086,2019-09-03T10:15:51,,2,,"<p>I once faced this issue and below was what solved it for me:</p>&#xA;&#xA;<p>I had to leverage on the module <code>react-app-rewired</code>. this module Tweaks the webpack config(s), even for those using <code>create-react-app(CRA)</code> without using 'eject' and without creating a fork of the react-scripts.</p>&#xA;&#xA;<p>all you need is to add a <code>config-overrides.js</code> file in the root of your project, and populate it with the snippet below:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>module.exports = function override (config) {&#xA;  config.target = 'electron-renderer'&#xA;  return config;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>then you proceed to your <code>package.json</code> and replace your start script with </p>&#xA;&#xA;<p><code>""start"": ""react-app-rewired start""</code> . and you are done. you can thereafter rebuild and run your test script without getting the <code>window.require is not a function</code> error.</p>&#xA;&#xA;<p>I hope I have been able to help.</p>&#xA;&#xA;<p>cheers!</p>&#xA;",7576653,"",,"",,2019-09-03T10:15:51,"","",,1,,,
57675148,2,,57641033,2019-08-27T12:52:47,,2,,"<p>Yes, because <code>ipcMain</code> which needs to be listening to <code>asynchronous-message</code> event not <code>app</code>!</p>&#xA;&#xA;<p>Your main.js should be like this:</p>&#xA;&#xA;<pre><code>const { app, BrowserWindow, dialog, ipcMain } = require(""electron"");&#xA;const path = require(""path"");&#xA;&#xA;app.on(""ready"", createWindow);&#xA;&#xA;// app.on(""asynchronous-message"", (event, arg) =&gt; {// Wrong&#xA;&#xA;ipcMain.on(""asynchronous-message"", (event, arg) =&gt; {&#xA;    console.log(""asynchronous-message received "");&#xA;    // event.sender.send('asynchronous-reply', 'pong')&#xA;});&#xA;&#xA;let mainWindow;&#xA;&#xA;console.log(""\nmain.js starts"");&#xA;</code></pre>&#xA;",3632172,"",,"",,2019-08-27T12:52:47,"","",,2,,,
57757430,2,,57756913,2019-09-02T13:03:14,,0,,"<p>Range selector is available only for Highstock.</p>&#xA;&#xA;<p>To use it, you need to change source code: </p>&#xA;&#xA;<p><code>&lt;script src=""https://code.highcharts.com/stock/highstock.js""&gt;&lt;/script&gt;</code></p>&#xA;&#xA;<p>and use <code>stockChart</code> constructor:</p>&#xA;&#xA;<pre><code>Highcharts.stockChart('graph', {...});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Live demo:</strong> <a href=""http://jsfiddle.net/BlackLabel/mtkcg6aj/"" rel=""nofollow noreferrer"">http://jsfiddle.net/BlackLabel/mtkcg6aj/</a></p>&#xA;&#xA;<p><strong>Docs:</strong> <a href=""https://www.highcharts.com/docs/stock/understanding-highstock"" rel=""nofollow noreferrer"">https://www.highcharts.com/docs/stock/understanding-highstock</a></p>&#xA;",8951377,"",,"",,2019-09-02T13:03:14,"","",,2,,,
57800705,2,,57728359,2019-09-05T07:45:19,,0,,"<p>Based on the command you said you use, in the comments, I think you are mixing up electron-builder and electron-packager. The latter does not need those script entries in package.json (so I don't know how that command gives the error you see).</p>&#xA;&#xA;<p>But if you are using electron-builder, I think it is a simple copy and paste mistake. See <a href=""https://github.com/electron-userland/electron-builder#quick-setup-guide"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-builder#quick-setup-guide</a>  In the scripts section, you should have:</p>&#xA;&#xA;<pre><code>  ""pack"": ""electron-builder --dir"",&#xA;  ""dist"": ""electron-builder""&#xA;</code></pre>&#xA;&#xA;<p>But you have:</p>&#xA;&#xA;<pre><code>    ""pack"": ""build --dir"",&#xA;    ""dist"": ""build""&#xA;</code></pre>&#xA;&#xA;<p>That is why the error message is saying ""build: not found.""</p>&#xA;&#xA;<p>BTW, the instructions are saying you should use <code>yarn dist</code> or <code>yarn pack</code> to run it.</p>&#xA;",841830,"",,"",,2019-09-05T07:45:19,"","",,2,,,
57680447,2,,57672237,2019-08-27T18:33:54,,1,,"<p>Your code works correctly for me when using NSIS v3.04 and JSON plug-in v1.1.1.0 (November 2017):</p>&#xA;&#xA;<pre><code>Unicode True&#xA;&#xA;!macro DumpTxtFile file&#xA;Push ""${file}""&#xA;Call DumpTxtFile &#xA;!macroend&#xA;Function DumpTxtFile &#xA;Exch $0&#xA;Push $1&#xA;FileOpen $0 $0 r&#xA;loop:&#xA;    ClearErrors&#xA;    FileRead $0 $1&#xA;    IfErrors done&#xA;    DetailPrint $1&#xA;    Goto loop&#xA;done:&#xA;FileClose $0&#xA;Pop $1&#xA;Pop $0&#xA;FunctionEnd&#xA;&#xA;!include LogicLib.nsh&#xA;Section&#xA;FileOpen $0 ""$temp\NSIStest.json"" w&#xA;FileWrite $0 '{   ""header_left_lebel"": ""LEFT LEBEL"",$\r$\n'&#xA;FileWrite $0 '    ""header_center_label"": ""CENTER LEBEL"",$\r$\n'&#xA;FileWrite $0 '    ""base_path"": ""E:\Workspace\my-demo-app""$\r$\n'&#xA;FileWrite $0 '}'&#xA;FileClose $0&#xA;!insertmacro DumpTxtFile ""$temp\NSIStest.json""&#xA;&#xA;Var /Global installationPath&#xA;StrCpy $installationPath ""c:\dummy\path""&#xA;&#xA;ClearErrors&#xA;nsJSON::Set /file `$temp\NSIStest.json`&#xA;nsJSON::Set `base_path` /value `""$installationPath""`&#xA;nsJSON::Serialize /format /file `$temp\NSIStest.json`&#xA;${If} ${Errors}&#xA;  Abort ""Unable to update JSON file!""&#xA;${EndIf}&#xA;&#xA;!insertmacro DumpTxtFile ""$temp\NSIStest.json""&#xA;SectionEnd&#xA;</code></pre>&#xA;",3501,"",3501,"",2019-08-29T22:06:15,2019-08-29T22:06:15,"","",,3,,,
57814371,2,,57813389,2019-09-06T00:32:04,,2,,"<p>I have been building and running Electron Apps in AppImage format on Raspbian for quite a while and it (mostly) works without any issues. Some advice however:</p>&#xA;&#xA;<ul>&#xA;<li>If possible use the latest Raspbian ""Buster"" as previous versions can not properly build recent versions of Electron due to a glibc issue</li>&#xA;<li>Set the proper target <code>armv7l</code>, this (currently) still applies to the RPI 4</li>&#xA;<li>Use at least Electron version 5.0.10 as previous versions of the 5.x branch had a weird issue of AppImage format Apps crashing when you clicked any menu item</li>&#xA;<li>If you build your App using <code>electron-builder</code> you may need to manually add a working version of <code>mksquashfs</code> as <a href=""https://github.com/electron-userland/electron-builder-binaries/issues/20"" rel=""nofollow noreferrer"">described here</a></li>&#xA;</ul>&#xA;&#xA;<p>Other than that I never found any issues and it works just fine on Raspberry 3 / 3+ and 4.</p>&#xA;&#xA;<p><strong>* Edit *</strong></p>&#xA;&#xA;<p>An example how to configure the build target for Linux / Raspberry 4 in <code>package.json</code>:</p>&#xA;&#xA;<pre><code>linux: {&#xA;    target: {&#xA;        target: 'appimage',&#xA;        arch: ['armv7l']&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",11697360,"",11697360,"",2019-09-06T04:18:15,2019-09-06T04:18:15,"","",,13,,,
39382983,2,,39349423,2016-09-08T05:09:27,,0,,"<p>A pretty general question. I would use <a href=""http://socket.io/"" rel=""nofollow"">http://socket.io/</a> </p>&#xA;",1770432,"",,"",,2016-09-08T05:09:27,"","",,1,,,
39401471,2,,39401343,2016-09-08T23:09:59,,0,,"<p>You're including <code>{&gt;someTemplate/}</code>, but you've registered the template with a different name: <code>src/templates/someTemplate</code>.</p>&#xA;&#xA;<p>If you want Dust to register your templates without the <code>src/templates</code> prefix, <a href=""http://www.dustjs.com/docs/dustc-api/#pwd"" rel=""nofollow"">pass the <code>--pwd</code> parameter to dustc</a>:</p>&#xA;&#xA;<pre><code>./node_modules/dustjs-linkedin/bin/dustc ./src/templates/*.dust -o ./dist/templates.js --pwd=src/templates&#xA;</code></pre>&#xA;",938516,"",,"",,2016-09-08T23:09:59,"","",,3,,,
39425931,2,,39425407,2016-09-10T12:08:55,,0,,"<p>I think I know now how it works:</p>&#xA;&#xA;<pre><code>ref.get(handler, 0, 'int')&#xA;</code></pre>&#xA;&#xA;<p>This will return the correct int.</p>&#xA;",5868190,"",,"",,2016-09-10T12:08:55,"","",,0,,,
39557830,2,,39557441,2016-09-18T12:52:22,,0,,<p>I got it. I forgot to <code>var win = nw.Window.get();</code>&#xA;Thanks</p>&#xA;,2756466,"",,"",,2016-09-18T12:52:22,"","",,2,,,
39592082,2,,39576753,2016-09-20T10:45:57,,0,,<p>Solution is to use <code>--enable-gcm</code> flag in command line.</p>&#xA;&#xA;<p>Example(OS X):</p>&#xA;&#xA;<pre><code>open -n -a nwjs --args --enable-gcm /path/to/app/&#xA;</code></pre>&#xA;,1204527,"",,"",,2016-09-20T10:45:57,"","",,0,,,
39438410,2,,39435066,2016-09-11T16:50:40,,1,,"<p>If it's not something you can accomplish with <a href=""http://electron.atom.io/docs/api/browser-window/#parent-and-child-windows"" rel=""nofollow"">parent/child windows</a> then you could call <code>SetWindowPos()</code> via <a href=""https://github.com/node-ffi/node-ffi"" rel=""nofollow""><code>node-ffi</code></a> (or write a native Node module/addon). To get the <code>HWND</code> for a <code>BrowserWindow</code> call <a href=""http://electron.atom.io/docs/api/browser-window/#wingetnativewindowhandle"" rel=""nofollow""><code>getNativeWindowHandle()</code></a>. I have no idea how you'd do this natively on macOS or Ubuntu.</p>&#xA;",1259938,"",,"",,2016-09-11T16:50:40,"","",,1,,,
39452604,2,,39448201,2016-09-12T14:23:14,,1,,"<p>OK, I searched a lot on the internet could not find a thing, asked my friends (they helped me for hours) still, couldn't solve. Finally, I tried something and it worked.</p>&#xA;&#xA;<p>My Updated code:</p>&#xA;&#xA;<pre><code>var menu = [];&#xA;for(index in file) {&#xA;    menu.push(&#xA;    {      &#xA;        label: file[index]['name'],&#xA;        id: box[index]['path'], //**Added id parameter**&#xA;        click: function(currentItem) {&#xA;&#xA;            console.log(currentItem.id)&#xA;            // When click event is triggered it sends &#xA;            // the current Menu Item as Object&#xA;            // From that object I can access the 'id' &#xA;            // example: currentItem.label will give the current items label.&#xA;        }&#xA;    }, //Sample Code&#xA;</code></pre>&#xA;",4135793,"",,"",,2016-09-12T14:23:14,"","",,0,,,
39466940,2,,39462731,2016-09-13T09:46:30,,1,,"<p>finally this simple code helped me to download the html file</p>&#xA;&#xA;<pre><code>var htmlContent = [""""];&#xA;var bl = new Blob(htmlContent, {type: ""text/html""});&#xA;var a = document.createElement(""a"");&#xA;a.href = urlStr;&#xA;a.download = ""new.html"";&#xA;a.hidden = true;&#xA;document.body.appendChild(a);&#xA;a.innerHTML = ""something random - nobody will see this, it doesn't matter  what you put here"";&#xA;a.click()&#xA;</code></pre>&#xA;",6799539,"",,"",,2016-09-13T09:46:30,"","",,0,,,
39577852,2,,39562812,2016-09-19T16:29:05,,1,,"<p>Teak comment is right , socket io in devlopement mode expose an api route <code>/socket.io/socket.io.js</code> at the main root of your application , once you package the app with electron this will not work anymore . so the solution would be to modify the entry point of your socket io client library and replace it by a CDN or a local file that you will include in your app. </p>&#xA;&#xA;<p>so instead of this </p>&#xA;&#xA;<pre><code> &lt;script src=""/socket.io/socket.io.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>you can put this </p>&#xA;&#xA;<pre><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.8/socket.io.min.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>hope it helps !</p>&#xA;",4778342,"",,"",,2016-09-19T16:29:05,"","",,0,,,
39596047,2,,35573767,2016-09-20T13:54:36,,1,,"<p>I am not an expert, but perhaps CouchDB/PouchDB may help you out? DBs specifically designed for replication. However, not sure about the NeDB-compatible API requirement. </p>&#xA;",2256928,"",,"",,2016-09-20T13:54:36,"","",,1,,,
39422285,2,,39417628,2016-09-10T03:39:31,,2,,"<p>You need to set <code>target: 'electron-renderer'</code> in your Webpack config, if you still have issues after that take a look at <a href=""https://github.com/chentsulin/electron-react-boilerplate"" rel=""nofollow"">https://github.com/chentsulin/electron-react-boilerplate</a></p>&#xA;",1259938,"",1259938,"",2016-09-10T10:17:06,2016-09-10T10:17:06,"","",,3,,,
39574029,2,,39573311,2016-09-19T13:08:48,,2,,"<p>Unfortunately there isn't a way to return values inside the close event. However, you can run a function before the window will close using <code>window.onbeforeunload</code>.</p>&#xA;&#xA;<p>In this function you could get the information or data you need from your <code>BrowserWindow</code> instance and send a synchronous IPC message to your main process in order to get the variables you need.<br>&#xA;If you send it synchronously, and then return <code>undefined</code> you will get the variables you need, and the <code>BrowserWindow</code> will still close, firing your <code>close</code> event as desired.</p>&#xA;&#xA;<p>From their docs:  </p>&#xA;&#xA;<blockquote>&#xA;  <p>Usually you would want to use the <code>beforeunload</code> handler to decide whether the window should be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <code>undefined</code> would cancel the close.</p>&#xA;</blockquote>&#xA;&#xA;<p>Look at the <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#event-close"" rel=""nofollow"">close event</a> for more information.</p>&#xA;",5552584,"",,"",,2016-09-19T13:08:48,"","",,0,,,
39473992,2,,39468688,2016-09-13T15:38:30,,4,,"<p>Try with this code </p>&#xA;&#xA;<pre><code>const app = require('electron').remote.app&#xA;</code></pre>&#xA;&#xA;<p>And in your Main process you can do this :</p>&#xA;&#xA;<pre><code>const {app, ipcMain, BrowserWindow, session, dialog} = require('electron')&#xA;var fs = require('fs');&#xA;</code></pre>&#xA;",2623248,"",2623248,"",2017-07-24T12:09:52,2017-07-24T12:09:52,"","",,1,,,
39512101,2,,39506154,2016-09-15T13:19:06,,4,,"<p>Working example:</p>&#xA;&#xA;<p>Put into <code>main.js</code> and copy an icon to be shown while dragging (<code>yourAppDir/img/icon/folder.png)</code>:</p>&#xA;&#xA;<pre><code>const {ipcMain} = require('electron')&#xA;&#xA;ipcMain.on('ondragstart', (event, filePath) =&gt; {&#xA;  event.sender.startDrag({&#xA;    file: filePath,&#xA;    icon: 'img/icon/folder.png'&#xA;  })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Put into <code>renderer.js</code>, and set the path to the file you want to drop out:</p>&#xA;&#xA;<pre><code>var ipcRenderer = require('electron').ipcRenderer&#xA;&#xA;document.getElementById('drag').ondragstart = (event) =&gt; {&#xA;    event.preventDefault()&#xA;    ipcRenderer.send('ondragstart', '/Users/tim/dev/test/elektron-drag-out-test/img/icon/folder.png')&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Create the draggable element inside the body tags of <code>index.html</code>:</p>&#xA;&#xA;<pre><code>...&#xA;&lt;body&gt;&#xA;  ...&#xA;  &lt;a href=""#"" id=""drag"" class=""draggable""&gt;drag item&lt;/a&gt;&#xA;&lt;/body&gt;&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>I also created a <a href=""https://gist.github.com/timpulver/452670e4a0ec9619a06347ff61c3f60c"" rel=""nofollow"">gist</a> for drag in / out.  </p>&#xA;&#xA;<p>Another helpful resource: <a href=""https://github.com/electron/electron/pull/6333"" rel=""nofollow"">Electron – Add <code>webContents.startDrag(item)</code> API</a></p>&#xA;",1052107,"",,"",,2016-09-15T13:19:06,"","",,2,,,
39556979,2,,39556205,2016-09-18T11:08:00,,4,,"<p>You can make it work with:</p>&#xA;&#xA;<pre><code>performAction :: forall e. T.PerformAction (fs :: FS | e) State _ Action&#xA;performAction (SetEditText s)           _ _ = void do&#xA;  T.cotransform $ _ { dir = s }&#xA;performAction (UpdateFiles s)           _ _ = void do&#xA;   filenames &lt;- lift (liftEff (either (const []) id &lt;$&gt; try (readdir s)))&#xA;   T.cotransform $ _ { names = filenames }&#xA;  -- T.cotransform $ _ { dir = """"}&#xA;</code></pre>&#xA;&#xA;<p><code>liftEff</code> takes your <code>Eff</code> to an <code>Aff</code> and <code>lift</code> then raises that into the <code>FreeT ...</code> that Thermite uses. The extra <code>lift</code> shouldn't be necessary, but I think the problem is type inference around rows and typeclasses here and the situation should get better with the next release where we'll most likely have functional dependencies.</p>&#xA;",3027554,"",,"",,2016-09-18T11:08:00,"","",,1,,,
39478987,2,,39478579,2016-09-13T21:06:07,,5,,"<p>Asar is used to concatenate your application files to one big file, it mitigate issues and it slightly speed up <strong>require</strong>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>To mitigate issues around long path names on Windows, slightly speed&#xA;  up require and conceal your source code from cursory inspection, you&#xA;  can choose to package your app into an asar archive with little&#xA;  changes to your source code.</p>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/tutorial/application-packaging.md"" rel=""noreferrer"">https://github.com/electron/electron/blob/master/docs/tutorial/application-packaging.md</a></p>&#xA;",6828011,"",,"",,2016-09-13T21:06:07,"","",,0,,,
39501928,2,,39499331,2016-09-15T01:28:56,,5,,"<p>Yes you can.</p>&#xA;&#xA;<p>In your main process (probably main.js) put this line in your main process :</p>&#xA;&#xA;<pre><code>global.HelloWorld = function(name){&#xA;    return 'Hello World! said ' + name;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and in your HTML :</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;    &lt;head&gt;&#xA;        &lt;script type=""text/javascript""&gt;&#xA;            let {remote} = require('electron');&#xA;            const hello = remote.getGlobal(""HelloWorld"")(); // &lt;-- () this is important&#xA;        &lt;/script&gt;&#xA;    &lt;/head&gt;&#xA;    &lt;body onLoad=""alert(hello);""&gt;&#xA;    &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>But I suggest use <code>ipcMain</code> and <code>ipcRenderer</code> to send data between process.</p>&#xA;",2623248,"",,"",,2016-09-15T01:28:56,"","",,0,,,
39395655,2,,39391983,2016-09-08T16:06:18,,6,,"<p>The closest thing there is to what you're looking for is global shortcuts: <a href=""https://github.com/electron/electron/blob/master/docs/api/global-shortcut.md"" rel=""noreferrer"">https://github.com/electron/electron/blob/master/docs/api/global-shortcut.md</a>. While you don't have anything in core Electron to support capturing all keyboard events out of the box, luckily node.js is pretty extensible with <a href=""https://nodejs.org/api/addons.html"" rel=""noreferrer"">native node addons</a>.</p>&#xA;",1397311,"",,"",,2016-09-08T16:06:18,"","",,0,,,
39395885,2,,39362292,2016-09-08T16:18:02,,7,,"<p>UPDATE 2019/12</p>&#xA;&#xA;<p>Use <code>app.isPackaged</code>: <a href=""https://electronjs.org/docs/api/app#appispackaged-readonly"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/app#appispackaged-readonly</a></p>&#xA;&#xA;<p>It returns true if the app is packaged, false otherwise. Assuming you only need a check if it's in production or not, that should do it. The env file solution detailed below would be more suitable if you had different environments/builds with different behaviors.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>To my knowledge, you can't pass env vars to a packaged electron app on start (unless you want your users to always start it from the command line and pass it themselves). You can always set that env variable in your application like this: <code>process.env.NODE_ENV = 'production'</code>. You could integrate that with electron-packager by having an env file that gets set in your build and is required by your application to determine what environment it's in.</p>&#xA;&#xA;<p>For example, have a packaging script that looks like:</p>&#xA;&#xA;<pre><code>""package"": ""cp env-prod.json src/env.json &amp;&amp; npm run build""&#xA;</code></pre>&#xA;&#xA;<p>and in your <code>src/main.js</code> file: </p>&#xA;&#xA;<pre><code>const appEnv = require('./env.json');&#xA;console.log(appEnv) //=&gt; { env: ""prod"", stuff: ""hey"" }&#xA;//you don't really need this, but just in case you're really tied to that NODE_ENV var&#xA;if(appEnv.env === 'prod') {&#xA;  process.env.NODE_ENV = 'production';&#xA;}&#xA;</code></pre>&#xA;",1397311,"",1397311,"",2019-12-10T20:35:33,2019-12-10T20:35:33,"","",,1,,,
39395924,2,,39395195,2016-09-08T16:20:08,,7,,"<p>You can convert the Blob to a Typed Array and then to a Buffer for passing directly to <code>fs.writeFileSync()</code>:</p>&#xA;&#xA;<pre><code>var fileReader = new FileReader();&#xA;fileReader.onload = function() {&#xA;  fs.writeFileSync('test.wav', Buffer.from(new Uint8Array(this.result)));&#xA;};&#xA;fileReader.readAsArrayBuffer($scope.recordedInput);&#xA;</code></pre>&#xA;",2050455,"",2050455,"",2016-09-08T22:11:12,2016-09-08T22:11:12,"","",,8,,,
39374588,2,,39291779,2016-09-07T16:00:11,,8,,"<p>In my experience, the simplest way of handling these issues is to use <a href=""https://github.com/clojure/core.async"" rel=""noreferrer"">core.async</a>. </p>&#xA;&#xA;<p><strong>Callback Style</strong></p>&#xA;&#xA;<p>For example, reading a directory:</p>&#xA;&#xA;<pre><code>(def fs (js/require ""fs""))&#xA;&#xA;(defn read-dir [path]&#xA;  (let [out (async/chan)]&#xA;    (.readdir fs path&#xA;      (fn [err files]&#xA;        (async/put! (if err err files))&#xA;        (async/close! out)))&#xA;    out))&#xA;</code></pre>&#xA;&#xA;<p>I pass the result in to a channel, even if that result is an error. This way, the caller can handle the error by doing. E.g.:</p>&#xA;&#xA;<pre><code>(let [res (&lt;! (read-dir "".""))]&#xA;  (if (instance? js/Error res)&#xA;    (throw res)&#xA;    (do-something res))&#xA;</code></pre>&#xA;&#xA;<p>In my own projects I use <a href=""https://github.com/gilbertw1/cljs-asynchronize"" rel=""noreferrer"">cljs-asynchronize</a>, which allows you to convert NodeJS callback style functions in to core.async compatible functions. For example, this is the same as the first example:</p>&#xA;&#xA;<pre><code>(defn read-dir [path]&#xA;  (asynchronize &#xA;    (.readdir fs path ...)))&#xA;</code></pre>&#xA;&#xA;<p>Lastly, for a nicer way of handling errors through channels, I personally found <a href=""https://wyegelwel.github.io/Error-Handling-with-Clojure-Async/"" rel=""noreferrer"">""Error Handling with Clojure Async""</a> quite useful. So, you can write the error handling code above like:</p>&#xA;&#xA;<pre><code>(try &#xA;  (let [res (&lt;? (read-dir "".""))]&#xA;    (do-something res))&#xA;  (catch js/Error e&#xA;    (handle-error e))&#xA;</code></pre>&#xA;&#xA;<p><strong>Streams</strong></p>&#xA;&#xA;<p>Stream API's are even simpler:</p>&#xA;&#xA;<pre><code>(defn create-read-stream [path]&#xA;   (let [out (async/chan)&#xA;         stream (.createReadStream fs path)]&#xA;     (.on stream ""close"" #(async/close! out))&#xA;     (.on stream ""data"" #(async/put! out %))&#xA;     out))&#xA;</code></pre>&#xA;",2040340,"",2040340,"",2016-09-07T16:05:25,2016-09-07T16:05:25,"","",,2,,,
39547511,2,,39547292,2016-09-17T13:43:55,,15,,"<p>This is a <a href=""https://github.com/EmergingTechnologyAdvisors/node-serialport/issues/904"" rel=""noreferrer"">known issue</a> which is caused by the <code>serialport</code> module using native code that is built for a different version of Node. You can read a bit more about addons <a href=""https://nodejs.org/api/addons.html"" rel=""noreferrer"">here</a>, if you're interested; they're just modules written in C/C++ that can interface with Node so the module can interface with the hardware more easily.</p>&#xA;&#xA;<p>The solution proposed by that issue is this:</p>&#xA;&#xA;<pre><code>npm rebuild --runtime=electron --target=1.2.5 --disturl=https://atom.io/download/atom-shell --build-from-source&#xA;</code></pre>&#xA;&#xA;<p>If you've not already installed <code>electron-rebuild</code>, that might be helpful to ensure that the rebuilding process works correctly:</p>&#xA;&#xA;<pre><code>npm install --save-dev electron-rebuild&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>even though when I run node -v it prints v6.6.0, running process.versions.node in the web console gives me v6.5.0. What's going on here?</p>&#xA;</blockquote>&#xA;&#xA;<p>Electron uses its own version of Node that isn't connected to your system Node installation (see the <a href=""http://electron.atom.io/"" rel=""noreferrer"">homepage</a> to view the Node version that the latest Electron uses, or use <code>process.versions.node</code>, like you did in the question).</p>&#xA;&#xA;<p>You could try an older version (perhaps <a href=""https://github.com/electron/electron/releases/tag/v1.1.0"" rel=""noreferrer"">1.1.0</a>, which uses Chrome 50?) in case that is the cause of the issue.</p>&#xA;",6650102,"",6650102,"",2016-11-29T17:45:55,2016-11-29T17:45:55,"","",,2,,,
39443029,2,,39441448,2016-09-12T03:38:22,,26,,"<p>You can access Electron APIs in the <code>webview</code> <a href=""http://electron.atom.io/docs/api/web-view-tag/#preload"" rel=""noreferrer"">preload</a> script, including IPC, even when <code>nodeIntegration</code> is disabled. Your preload script can inject functions into the global namespace that will then be accessible within the page loaded in the <code>webview</code>. A simple example:</p>&#xA;&#xA;<p><code>webview-preload.js</code>:</p>&#xA;&#xA;<pre><code>const { ipcRenderer } = require('electron')    &#xA;&#xA;global.pingHost = () =&gt; {&#xA;  ipcRenderer.sendToHost('ping')&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><code>webview-index.html</code>:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;  pingHost()&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p><code>window-index.html</code>:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;  const webview = document.getElementById('mywebview')&#xA;  webview.addEventListener('ipc-message', event =&gt; {&#xA;    // prints ""ping""&#xA;    console.log(event.channel)&#xA;  })&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-09-12T03:38:22,"","",,5,,,
39442342,2,,39441846,2016-09-12T01:37:18,,-3,,"<p>If you are getting ADDRINUSE or similar errors, make sure your program is exiting cleanly.  You could also try the <code>kill</code> command or use pm2.</p>&#xA;&#xA;<p>But if you really need to look for a port, can you post the rest of the code?  It says the error is in the server.listen.  Are you sure you started listening <em>after</em> the findAPortNotInUse came back?</p>&#xA;",281920,"",,"",,2016-09-12T01:37:18,"","",,5,,,
37975226,2,,37955003,2016-06-22T18:01:09,,0,,"<p>Ok, after posting this issue on the Github repo, turns out that the Electron related changes have not been released to npm yet. They will be in the next release, but as of now, they are only in master.</p>&#xA;&#xA;<p><a href=""https://github.com/benmosher/eslint-plugin-import/issues/393#issuecomment-227821876"" rel=""nofollow"">https://github.com/benmosher/eslint-plugin-import/issues/393#issuecomment-227821876</a></p>&#xA;",632806,"",,"",,2016-06-22T18:01:09,"","",,0,,,
38064737,2,,38063800,2016-06-27T23:23:16,,0,,"<p>Use the <a href=""https://github.com/electron/electron/blob/master/docs/api/shell.md#shellopenexternalurl"" rel=""nofollow"">shell module</a>: </p>&#xA;&#xA;<p>Add the following code to your main.js:</p>&#xA;&#xA;<p>At its beginning:</p>&#xA;&#xA;<pre><code>const {ipcMain} = require('electron');&#xA;const {shell} = require('electron');&#xA;</code></pre>&#xA;&#xA;<p>After the app.on function:</p>&#xA;&#xA;<pre><code>ipcMain.on('loadGH', (event, arg) =&gt; {&#xA;    shell.openExternal(arg);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Within the head of your index.html you then need to instantiate the ICP module:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;const ipc = require('electron').ipcRenderer;&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Then use the onclick event  to actually perform the loading of the new window:</p>&#xA;&#xA;<pre><code>&lt;a HREF=""#"" onclick=""ipc.send('loadGH','http://github.com/yourGitHubName');""&gt;Link&lt;/a&gt;&#xA;</code></pre>&#xA;",1792564,"",1792564,"",2016-06-28T09:36:45,2016-06-28T09:36:45,"","",,1,,,
38080910,2,,38063029,2016-06-28T15:53:25,,0,,"<p>I found out the problem: if you want to include your own module in the renderer process in an electron project, you have to use <code>remote.require(module)</code>.</p>&#xA;&#xA;<p>Here's more documentation if needed:&#xA;<a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md"" rel=""nofollow"">https://github.com/electron/electron/blob/master/docs/api/remote.md</a></p>&#xA;",1227353,"",,"",,2016-06-28T15:53:25,"","",,0,,,
38117948,2,,38080920,2016-06-30T08:38:11,,0,,"<p>We do not recommend that you make API calls from client side JavaScript (server side is fine). API token should be kept a secret, and never made available to frontend code directly.</p>&#xA;&#xA;<p>What we recommend is to make a backend script that makes API calls using a secret token, and have your client side JavaScript communicate with that backend script, instead of with Active Collab API directly.</p>&#xA;&#xA;<p>If you are using PHP, you can save a lot of time by using Active Collab API SDK:</p>&#xA;&#xA;<p><a href=""https://github.com/activecollab/activecollab-feather-sdk"" rel=""nofollow"">https://github.com/activecollab/activecollab-feather-sdk</a></p>&#xA;",338473,"",,"",,2016-06-30T08:38:11,"","",,0,,,
38121419,2,,38103677,2016-06-30T11:10:44,,0,,"<p>Take a look at either <a href=""https://github.com/kothic/kothic-js"" rel=""nofollow"">Kothic</a> or <a href=""http://mapnik.org/"" rel=""nofollow"">Mapnik</a>, Both should be more than capable of handling offline osm files. I guess Kothic will be a tad easier to implement (pure JS), since Mapnik essentially is a C++ library with a node.js interface. Additionally, Kothic claims easy integration with Leaflet, so I imagine this should suit you quite well.</p>&#xA;",1792564,"",,"",,2016-06-30T11:10:44,"","",,0,,,
38045319,2,,38041293,2016-06-27T03:06:26,,1,,"<p>Electron doesn't provide an implementation for <code>window.prompt()</code>, you can read more about it in <a href=""https://github.com/electron/electron/issues/472"" rel=""nofollow"">issue #472</a>.</p>&#xA;",1259938,"",,"",,2016-06-27T03:06:26,"","",,0,,,
38060082,2,,38003168,2016-06-27T17:43:54,,1,,"<p>How about using <a href=""https://github.com/electron/electron/blob/master/docs/api/tray.md#traygetbounds-macos-windows"" rel=""nofollow"">tray.getBounds()</a>?</p>&#xA;",1792564,"",,"",,2016-06-27T17:43:54,"","",,0,,,
38146653,2,,38144065,2016-07-01T13:25:25,,1,,"<p>When you get ""the specified module cannot be found"", this refers to the DLL you tried to load or any of its dependencies.</p>&#xA;&#xA;<p>You have given a full path to the <code>ffi.Library</code> function, but when FDColor.dll loads its dependencies it will probably use no path, which causes LoadLibrary to look first in the current-working-directory of the process and then in the directories of the PATH environment variable.</p>&#xA;&#xA;<p>So,</p>&#xA;&#xA;<ol>&#xA;<li><p>Use DependencyWalker (<a href=""http://www.dependencywalker.com/"" rel=""nofollow"">http://www.dependencywalker.com/</a>) on FDColor.dll to see if it has any dependencies.  The best way to do that is to call it from the same place as you call this script (giving the same path you pass to ffi.Library).  </p></li>&#xA;<li><p>For each DLL it would try to load, but is not found, you need to add the folder to the PATH environment variable of the environment that calls this script.  </p></li>&#xA;<li><p>You can check that you have done this right by repeating step 1 after setting PATH at the command prompt. DependencyWalker will now show that it can find those DLLs.</p></li>&#xA;</ol>&#xA;",3937,"",,"",,2016-07-01T13:25:25,"","",,5,,,
38153357,2,,37872239,2016-07-01T20:18:53,,1,,"<p>You can use the <a href=""http://electron.atom.io/docs/all/#class-cookies"" rel=""nofollow"">native Electron Cookies interface</a>. The electron-cookies third party lib you're trying to load seems a little out of date and is probably no longer working with current versions of Electron.</p>&#xA;",1792564,"",,"",,2016-07-01T20:18:53,"","",,1,,,
38165938,2,,38165850,2016-07-03T01:28:14,,1,,"<p>The error is in the way you check equality. One of the array is JSON.stringified the other is not. Don't use JSON.stringify(stringArray) for defining array2.</p>&#xA;&#xA;<pre><code>var foo = [""bar""];&#xA;foo.toString();&#xA;</code></pre>&#xA;&#xA;<p>Outputs : <code>""foo""</code></p>&#xA;&#xA;<pre><code>JSON.stringify(foo).toString()&#xA;</code></pre>&#xA;&#xA;<p>Outputs : <code>""[""foo""]""</code></p>&#xA;&#xA;<p>This condition should be working (haven't tested) : </p>&#xA;&#xA;<pre><code> if (array1.toString() != stringArray.toString()) {&#xA;    console.log(""there's been a change"");&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>if you want the best option to compare arrays check this one :&#xA;<a href=""https://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript"">How to compare arrays in JavaScript?</a></p>&#xA;",2923336,"",-1,"",2017-05-23T10:28:54,2016-07-03T01:28:14,"","",,0,,,
38172855,2,,38169132,2016-07-03T18:05:13,,1,,"<p>With electron you can use all the APIs Node.js have additional to the APIs Chrome have.&#xA;So you can Download the game useing ftp or http like you would do in Node.js or use Ajax ($http).&#xA;For saveing you can use the normal file system, and for the version you can use the filesystem or localstorage.&#xA;Here is a snippet to save the game:</p>&#xA;&#xA;<pre><code>const http = require('http');&#xA;const fs   = require('fs');&#xA;const app  = require('remote').require('app');&#xA;&#xA;var file = fs.createWriteStream(app.getDataPath() + ""externalFiles/game.zip"");&#xA;var request = http.get(""http://dl.example.com/game.zip"", response =&gt; {&#xA;  response.pipe(file);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>on the server you can simply have a request returning the version or the hash of the latest version, and if that changes it will download the game again.</p>&#xA;",6540936,"",,"",,2016-07-03T18:05:13,"","",,29,,,
37969072,2,,33117738,2016-06-22T13:10:24,,2,,"<p>This question is not actually related to Electron. It can be divided into two parts:</p>&#xA;&#xA;<ol>&#xA;<li>Creating custom dynamic context menu entries during installation passing the respective selected file as command line argument to its target</li>&#xA;<li>Node.js command line argument parsing</li>&#xA;</ol>&#xA;&#xA;<h2>Creating custom dynamic context menu entries during installation</h2>&#xA;&#xA;<p>Windows:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://stackoverflow.com/questions/27012090/wix-add-registry-key-to-customize-context-menu"">Adding context menu entries during installation using WiX</a></li>&#xA;<li>Since it boils down to adding registry keys, <a href=""https://stackoverflow.com/questions/2123762/add-menu-item-to-windows-context-menu-only-for-specific-filetype"">this more general SO post about adding context menu entries for specific file types</a> may also interest you.</li>&#xA;</ul>&#xA;&#xA;<p>OSX:</p>&#xA;&#xA;<ul>&#xA;<li>I really can't tell.</li>&#xA;</ul>&#xA;&#xA;<h2>Node.js command line argument parsing</h2>&#xA;&#xA;<p>Multiple options exist for command line argument parsing in Node.js, here is just a handful I've been using in the past:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://www.npmjs.com/package/minimist"" rel=""nofollow noreferrer"">Minimist</a></li>&#xA;<li><a href=""https://www.npmjs.com/package/command-line-args"" rel=""nofollow noreferrer"">command-line-args</a></li>&#xA;<li>and my current favourite, <a href=""https://www.npmjs.com/package/yargs"" rel=""nofollow noreferrer"">Yargs</a></li>&#xA;</ul>&#xA;",1792564,"",-1,"",2017-05-23T10:30:34,2016-06-22T13:10:24,"","",,0,,,
38001583,2,,38000874,2016-06-23T20:48:18,,2,,"<p>Not exactly. But there is even better solution .</p>&#xA;&#xA;<p>You should Separate from your react app the bootstrap file.&#xA;Bootstrap file which load your app and pass to it some additional params from outside.</p>&#xA;&#xA;<p>In your situation you will create two bootstrap files, one for electron - with memoryHistory (I think it is better for electron) and second one for browsers with browser history.</p>&#xA;&#xA;<p>Example of bootstrap file for electron <strong>index-electron.jsx</strong>:</p>&#xA;&#xA;<pre><code>import React from ""react"";&#xA;import ReactDOM from ""react-dom"";&#xA;import { createMemoryHistory } from ""react-router"";&#xA;import App from ""./App.jsx"";&#xA;&#xA;const initialState = window.__INITIAL_STATE__;&#xA;const config = window.__CONFIG__;&#xA;&#xA;const history = createMemoryHistory(""begin-path"");&#xA;&#xA;ReactDOM.render(&#xA;  &lt;App&#xA;    config={config}&#xA;    history={history}&#xA;    initialState={initialState}&#xA;  /&gt;, document.getElementById(""root""));&#xA;</code></pre>&#xA;&#xA;<p>Example of bootstrap file for browsers index-browser.jsx:</p>&#xA;&#xA;<pre><code>import React from ""react"";&#xA;import ReactDOM from ""react-dom"";&#xA;import { browserHistory } from 'react-router';&#xA;import App from ""./App.jsx"";&#xA;&#xA;const initialState = window.__INITIAL_STATE__;&#xA;const config = window.__CONFIG__;&#xA;&#xA;ReactDOM.render(&#xA;  &lt;App&#xA;    config={config}&#xA;    history={history}&#xA;    initialState={initialState}&#xA;  /&gt;, document.getElementById(""root""));&#xA;</code></pre>&#xA;&#xA;<p>In my examples difference is small (only history) but you can make more changes. As you see I also provide additional begin params from outside (initialState, config); </p>&#xA;&#xA;<p>And how your App should :</p>&#xA;&#xA;<pre><code>import React from 'react';&#xA;import { Router, Route } from 'react-router';&#xA;class App extends React.Component {&#xA;  static propsTypes = {&#xA;    history: React.PropTypes.object,&#xA;    config: React.PropTypes.object,&#xA;    initialState: React.PropTypes.object&#xA;  };&#xA;  render() {&#xA;    return (&#xA;      &lt;Router history={this.props.history}&gt;&#xA;        &lt;Route ...&gt;&#xA;          ...&#xA;        &lt;/Route&gt;&#xA;      &lt;/Router&gt;&#xA;    );&#xA;  }&#xA;}&#xA;export default App;&#xA;</code></pre>&#xA;&#xA;<p><em>Above code is only conception. It is from my project, where I removed obsolete things. Therefore without some modification it may not work</em></p>&#xA;&#xA;<p>Now for electron you use index-electron.jsx, and for browsers index-browser.jsx. Most of your code is reusable cross both envs. And it is very flexible.</p>&#xA;",4138339,"",,"",,2016-06-23T20:48:18,"","",,0,,,
38027243,2,,37775759,2016-06-25T10:01:29,,2,,"<p>Electron exposes the menu control via the <a href=""http://electron.atom.io/docs/api/menu/#menusetapplicationmenumenu"" rel=""nofollow"">menu.SetApplicationMenu(menu) function</a>.</p>&#xA;&#xA;<p>Listening for the window.focus event and setting this menu via the remote module everytime the event triggers should enable you to achieve the desired functionality:</p>&#xA;&#xA;<pre><code>&lt;!-- index.html --&gt;&#xA;&lt;script&gt;&#xA;const {remote} = require('electron');&#xA;const {Menu, MenuItem} = remote;&#xA;&#xA;const menu = new Menu();&#xA;menu.append(new MenuItem({label: 'MenuItem1', click() { console.log('item 1 clicked'); }}));&#xA;&#xA;&#xA;window.addEventListener('focus', (e) =&gt; {   remote.setApplicationMenu(menu); }, true);&#xA;&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>See the <a href=""http://electron.atom.io/docs/api/menu/"" rel=""nofollow"">electron menu API</a> for more info and the code snippet the above one is based on. I haven't actually tested the code, but it should outline a solution.</p>&#xA;&#xA;<p><strong>Additional Information regarding possible future solutions:</strong></p>&#xA;&#xA;<p>As of End of June 2016, there are two possible solutions down the line that are currently under development by the electron dev team:</p>&#xA;&#xA;<ol>&#xA;<li>A new event might be introduced which is triggered on changes in the clipboard (<a href=""https://github.com/electron/electron/issues/2280"" rel=""nofollow"">GitHub issue</a>)</li>&#xA;<li>Dynamic menus are a possible focus in the current development (<a href=""http://github.com/electron/electron/issues/528"" rel=""nofollow"">Github issue</a>)</li>&#xA;</ol>&#xA;",1792564,"",1792564,"",2016-06-28T18:44:26,2016-06-28T18:44:26,"","",,5,,,
38168672,2,,38168186,2016-07-03T09:42:27,,2,,"<p>I think the only ways to do that is :</p>&#xA;&#xA;<ul>&#xA;<li>Create an HTML popup with that interface, clickable buttons... but you'll have to define all styles by yourself ;</li>&#xA;<li>Else you'll have to make a C++ addon like a lot of projects, this addon will create the custom window when you ask, but that's complicated to do.</li>&#xA;</ul>&#xA;&#xA;<p>I know you can make custom dialog windows but less complex than this one with the <code>dialog.showMessageBox()</code> API (<a href=""https://github.com/electron/electron/blob/master/docs/api/dialog.md#dialogshowmessageboxbrowserwindow-options-callback"" rel=""nofollow"">See more here</a>)</p>&#xA;",4016380,"",,"",,2016-07-03T09:42:27,"","",,1,,,
38059711,2,,38043100,2016-06-27T17:19:45,,4,,"<p>First of all, you should really try to avoid packing multiple questions into a single post.</p>&#xA;&#xA;<ol>&#xA;<li><p>(already answered yourself)</p></li>&#xA;<li><p>While electron-packager should in theory sign your apps (at least that's how I understand the respective readme entry), it seems your app has not been signed properly. Have you followed <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/mac-app-store-submission-guide.md"" rel=""nofollow"">the tutorial that can be found at the github page</a>?</p></li>&#xA;<li><p>Please check:</p>&#xA;&#xA;<ul>&#xA;<li>Did you copy the whole directory before executing or just the executable? (Electron executables are not self-contained)</li>&#xA;<li>Can you make sure that the node.dll can be found somewhere within the applications folder or within its subdirectories?</li>&#xA;</ul></li>&#xA;</ol>&#xA;",1792564,"",,"",,2016-06-27T17:19:45,"","",,4,,,
38199398,2,,38172308,2016-07-05T09:08:12,,4,,"<p>Finally, I've solved it.</p>&#xA;&#xA;<p>The way I solved this is doing exactly the reverse, NodeJS is available on the production machines so I just wrote a <code>start.js</code> script that basically spawn a child process to run Electron and on the parent process I'm running this long running task and finally I'm using IPC to communicate between the two processes. </p>&#xA;",1539277,"",,"",,2016-07-05T09:08:12,"","",,2,,,
38039796,2,,38038827,2016-06-26T15:00:51,,5,,<p>The <strong>source</strong> needs to be set to <strong>dt</strong> and it seems to work just fine.</p>&#xA;&#xA;<pre><code>$ typings install github-electron --source dt --global&#xA;</code></pre>&#xA;,5152732,"",,"",,2016-06-26T15:00:51,"","",,3,,,
38166865,2,,38166617,2016-07-03T04:57:06,,5,,"<p><strong>Chromium</strong> is a Webkit based web browser with the V8 javascript engine. It supports all the usual browser and DOM APIs and thus is good for making web pages and not good at interacting with the underlying system.</p>&#xA;&#xA;<p><strong>Node.js</strong> was built by striping out the V8 engine, making a headless command line application, and adding extensive APIs to access the file system, <code>require()</code> other files, run other shell programs, etc. (things you'd expect of a true scripting language.</p>&#xA;&#xA;<p><strong>Electron</strong> in a simplified way is an attempt to replace the V8 engine used in Chromium with the new more general purpose oriented one of Node.js. It exposes a few extra APIs to node.js to allow for opening chromium windows, but also every chromium window using a <code>&lt;script&gt;</code>&#xA;tag will interpret it with the node.js engine.</p>&#xA;&#xA;<p><strong>Why Electron?</strong> The reason that Chromium can't do this by itself is because it was originally designed to be a web browser and in web browsers file system APIs would be unheard of as typically files are hosted on a remote server and accessing files on a user's computer would be a security risk (because why should any single webpage have access to all your files?).</p>&#xA;&#xA;<p><code>require</code> statements now work out of the box because node.js has filesystem support will allows them to be synchronously read from the disk without the need for bundling them into the same javascript file or requesting them from a server.</p>&#xA;",6535935,"",,"",,2016-07-03T04:57:06,"","",,0,,,
38197778,2,,38194457,2016-07-05T07:38:11,,5,,"<p>I went through this over the evening and came up with a function I am pleased with. Thanks for the help in getting started-</p>&#xA;&#xA;<p>Separated it out into <code>log.ts</code></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>require('source-map-support').install({&#xD;&#xA;	environment: 'node'&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * eLog - displays calling line number &amp; message &amp; dumps vars as pretty json string&#xD;&#xA; * @param {string} msg - string to display in log message&#xD;&#xA; * @param {any} dispVars - any number of variables (ellipsis , aka Rest parameters) to dump&#xD;&#xA; * {@link https://github.com/evanw/node-source-map-support usable by typescript node-source-map-support module}&#xD;&#xA; * {@link https://github.com/mozilla/source-map/ Mozilla source-map library &amp; project}&#xD;&#xA; * {@link http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/ good introduction to sourcemaps}&#xD;&#xA; */&#xD;&#xA;export function eLog(msg:string,...dispVars:any[]){&#xD;&#xA;	/**&#xD;&#xA;	 * go one line back for the caller&#xD;&#xA;	 * @type {string}&#xD;&#xA;	 */&#xD;&#xA;	let stackLine = (new Error).stack.split(""\n"")[2];&#xD;&#xA;	/**&#xD;&#xA;	 * retrieve the file basename &amp; positional data, after the last `/` to the `)` &#xD;&#xA;	 */&#xD;&#xA;	// &#xD;&#xA;	let caller_line = stackLine.slice(stackLine.lastIndexOf('/'),stackLine.lastIndexOf(')'))&#xD;&#xA;	/**&#xD;&#xA;	 *  test for no `/` ; if there is no `/` then use filename without a prefixed path&#xD;&#xA;	 */ &#xD;&#xA;	if ( caller_line.length == 0 ) {&#xD;&#xA;		caller_line = stackLine.slice(stackLine.lastIndexOf('('),stackLine.lastIndexOf(')'))&#xD;&#xA;	}&#xD;&#xA;	// &#xD;&#xA;	/**&#xD;&#xA;	 * filename_base - parse out the file basename; remove first `/` char and go to `:`&#xD;&#xA;	 */&#xD;&#xA;	let filename_base = caller_line.slice(0+1,caller_line.indexOf(':'));&#xD;&#xA;	/**&#xD;&#xA;	 * line_no - parse out the line number ; remove first `:` char and go to 2nd `:`&#xD;&#xA;	 */&#xD;&#xA;	let line_no = caller_line.slice(caller_line.indexOf(':')+1,caller_line.lastIndexOf(':'));&#xD;&#xA;	/**&#xD;&#xA;	 * line_pos - line positional - from the last `:` to the end of the string&#xD;&#xA;	 */&#xD;&#xA;	let line_pos = caller_line.slice(caller_line.lastIndexOf(':')+1);&#xD;&#xA;	console.log(`eLog called by ${filename_base} on line# ${line_no} @ char# ${line_pos} said:\n${msg}`);&#xD;&#xA;	// print out the input variables as pretty JSON strings&#xD;&#xA;	dispVars.forEach(value =&gt; {&#xD;&#xA;		console.log(JSON.stringify(value,null,2));&#xD;&#xA;	});&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Which can be called with a simple:</p>&#xA;&#xA;<pre><code>eLog(""eLog Test"",this);&#xA;</code></pre>&#xA;&#xA;<p>from any file so long as the function is loaded (such as)</p>&#xA;&#xA;<pre><code>import { eLog } from './log'&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>I hope that helps somebody else.</p>&#xA;&#xA;<p>Cheers guys.&#xA;-Eric </p>&#xA;",377252,"",,"",,2016-07-05T07:38:11,"","",,0,,,
38137655,2,,38129722,2016-07-01T05:26:51,,6,,"<p>There really is nothing <em>standard</em> in the *nix world. You will always have to support specific ditributions, and each of these distribution can in turn have multiple possible ways of creating an auto-updater.</p>&#xA;&#xA;<p>To your questions:</p>&#xA;&#xA;<ol>&#xA;<li><p>There is no standard way. </p></li>&#xA;<li><p>That depends on your way of actually distributing he package. If you plan on using package managers like rpm/apt-get/apt install, then each of these managers has a specific way of configuring your application to be among those packages that are checked for automatic updates.</p></li>&#xA;<li><p>Difference between .rpm / .deb:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Main difference for a package maintainer (I think that would be&#xA;  'developer' in Debian lingo) is the way package meta-data and&#xA;  accompanying scripts come together. <a href=""https://unix.stackexchange.com/questions/634/what-are-the-pros-cons-of-deb-vs-rpm"">Link</a></p>&#xA;</blockquote>&#xA;&#xA;<p>Difference between Ubuntu &amp; Fedora: As creating a detailed answer on this questions would both be too lengthy and too much effort to maintain, check out <a href=""http://beebom.com/ubuntu-vs-fedora/"" rel=""nofollow noreferrer"">this blog post</a> detailing the differences between these two distributions.</p></li>&#xA;</ol>&#xA;",1792564,"",-1,"",2017-04-13T12:36:28,2016-07-01T05:26:51,"","",,4,,,
38180960,2,,36333141,2016-07-04T09:15:59,,7,,"<p>Yes, it is possible via <code>electron</code>.</p>&#xA;&#xA;<p>You can use <a href=""https://github.com/jorangreef/sudo-prompt"" rel=""noreferrer"">https://github.com/jorangreef/sudo-prompt</a> to <code>exec</code> a command using <code>sudo</code> and show a graphical OS password prompt.</p>&#xA;&#xA;<p>You can use <code>sudo-prompt</code> from Electron as well as from any Node script.</p>&#xA;&#xA;<p>It is regularly updated, has no dependencies and does not require any native compilation.</p>&#xA;",2138743,"",,"",,2016-07-04T09:15:59,"","",,4,,,
38042362,2,,38041171,2016-06-26T19:25:27,,8,,"<p>I solved it by using <code>__dirname</code> :</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;var datafile = path.join(__dirname, 'test.txt');&#xA;</code></pre>&#xA;",1422096,"",,"",,2016-06-26T19:25:27,"","",,0,,,
38059895,2,,38031768,2016-06-27T17:30:36,,13,,"<p>Depending on interpretation, there are two possible answers to your question:</p>&#xA;&#xA;<p>If you want to implement an elasticsearch library that enables the use of elasticsearch from within electron, try <a href=""https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html"">elasticsearch.js</a>.</p>&#xA;&#xA;<p>If you want to implement local offline search within a client, try using either <a href=""http://lunrjs.com/"">lunr.js</a>, or its weird but loveable cousin, <a href=""http://elasticlunr.com/"">elasticlunr</a>.</p>&#xA;",1792564,"",,"",,2016-06-27T17:30:36,"","",,0,,,
38021584,2,,37994441,2016-06-24T20:26:49,,17,,<p>Problem is solved.</p>&#xA;&#xA;<p>Need use in electron app (where you add the bundle):</p>&#xA;&#xA;<pre><code>var remote = require('electron').remote;&#xA;var electronFs = remote.require('fs');&#xA;var electronDialog = remote.dialog;&#xA;</code></pre>&#xA;,6504684,"",,"",,2016-06-24T20:26:49,"","",,2,,,
38083657,2,,38067298,2016-06-28T18:27:13,,45,,"<p>If you are targeting multiple platforms, I answered <a href=""https://stackoverflow.com/questions/30465034/where-to-store-user-settings-in-electron-atom-shell-application"">a similar question here</a>. Basically <a href=""http://electron.atom.io/docs/api/app/#appgetpathname"" rel=""noreferrer"">app.getPath(name)</a>, <a href=""http://electron.atom.io/docs/api/app/#appsetpathname-path"" rel=""noreferrer"">app.setPath(name, path)</a>, and <a href=""http://electron.atom.io/docs/api/app/#appgetapppath"" rel=""noreferrer"">app.getAppPath()</a> are very useful in saving files to the the right place regardless of the OS.</p>&#xA;&#xA;<p>You may also want to check out these Nodejs packages which help simplify saving files directly to the host machine...</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://www.npmjs.com/package/fs-jetpack"" rel=""noreferrer"">fs-jetpack</a></li>&#xA;<li><a href=""https://www.npmjs.com/package/graceful-fs"" rel=""noreferrer"">graceful-fs</a></li>&#xA;<li><a href=""https://nodejs.org/api/fs.html"" rel=""noreferrer"">Node.js fs</a></li>&#xA;</ul>&#xA;&#xA;<p>If you intend for users to save files you might also have a look at the <a href=""http://electron.atom.io/docs/api/dialog/"" rel=""noreferrer"">Dialog api</a> where you can specifically invoke a <a href=""http://electron.atom.io/docs/api/dialog/#dialogshowsavedialogbrowserwindow-options-callback"" rel=""noreferrer"">save dialog</a> for that purpose.</p>&#xA;",1846224,"",-1,"",2017-05-23T12:00:28,2016-06-28T18:27:13,"","",,1,,,
17280582,2,,17278087,2013-06-24T16:39:28,,1,,<p>From my knowledge you can't. But you can pipe the steams&#xA;child.stdout and child.stdin&#xA;to&#xA;process.stdout and process.stdin</p>&#xA;&#xA;<p><strong>Edit</strong></p>&#xA;&#xA;<p>After the explanations from your comment I think you're looking for exec or execFile.</p>&#xA;&#xA;<pre><code>var exec = require('child_process').exec;&#xA;exec('explorer'); exec('notepad'); exec('start cmd');&#xA;</code></pre>&#xA;&#xA;<p>Something like this?</p>&#xA;,2515996,"",2515996,"",2013-06-25T12:01:58,2013-06-25T12:01:58,"","",,5,,,
17263769,2,,14799035,2013-06-23T18:12:12,,18,,"<p>I wrote a node script that captures hotkeys on windows using the <a href=""https://github.com/rbranson/node-ffi""><code>ffi</code></a>, <a href=""http://github.com/TooTallNate/ref""><code>ref</code></a>, and <a href=""http://github.com/TooTallNate/ref-struct""><code>ref-struct</code></a> modules. I've had some issues getting them to work in a packaged .exe since <code>ffi</code> and <code>ref</code> are native add-ons. For more information, see this <a href=""https://github.com/rogerwang/node-webkit/issues/803"">github issue</a> I opened awhile ago.</p>&#xA;&#xA;<p>Anyways, here's the code:</p>&#xA;&#xA;<pre><code>var FFI = require('ffi'),&#xA;    ref = require('ref'),&#xA;    Struct = require('ref-struct');&#xA;&#xA;/* First, create the necessary data structures that'll be used&#xA;   by our windows api calls. */&#xA;&#xA;var pointStruct = Struct({&#xA;  'x': 'long',&#xA;  'y': 'long'&#xA;});&#xA;&#xA;var msgStruct = Struct({&#xA;  'hwnd': 'int32',&#xA;  'message': 'int32', &#xA;  'wParam': 'int32', &#xA;  'lParam': 'int32', &#xA;  'time': 'int32', &#xA;  'pt': pointStruct&#xA;});&#xA;&#xA;var msgStructPtr = ref.refType(msgStruct);&#xA;&#xA;/* Second, register the functions we'd like to use by providing&#xA;   their method signatures. */&#xA;&#xA;var user32 = new FFI.Library('user32', {&#xA;&#xA;  'RegisterHotKey': [ &#xA;    'bool', ['int32', 'int', 'int32', 'int32'] &#xA;  ],&#xA;&#xA;  'GetMessageA': [ &#xA;    'bool', [msgStructPtr, 'int32', 'int32', 'int32'] &#xA;  ]&#xA;&#xA;  /* You may prefer to use PeekMessageA which has the same&#xA;     signature as GetMessageA, but is non-blocking. I haven't&#xA;     tested it, though.&#xA;&#xA;});&#xA;&#xA;/* Third, register your hotkeys. I wanted to control a media player,&#xA;   so these keys reflect that. */&#xA;&#xA;var ALT = 0x0001,&#xA;    CTRL = 0x0002,&#xA;    SHIFT = 0x0004;&#xA;&#xA;var MEDIA_NEXT = 0xB0,&#xA;    MEDIA_PREV = 0xB1,&#xA;    MEDIA_STOP = 0xB2,&#xA;    MEDIA_PLAY_PAUSE = 0xB3,&#xA;    MEDIA_LAUNCH = 0xB5;&#xA;&#xA;var PERIOD = 0xBE,&#xA;    COMMA = 0xBC,&#xA;    EQUAL = 0xBB,&#xA;    DIVIDE = 0xBF,&#xA;    SQUOTE = 0xDE,&#xA;    PAGEUP = 0x21,&#xA;    PAGEDOWN = 0x22;&#xA;&#xA;registrations = [];&#xA;registrations.push(user32.RegisterHotKey(0, 1, 0, MEDIA_NEXT));&#xA;registrations.push(user32.RegisterHotKey(0, 1, 0, MEDIA_PREV));&#xA;registrations.push(user32.RegisterHotKey(0, 1, 0, MEDIA_STOP));&#xA;registrations.push(user32.RegisterHotKey(0, 1, 0, MEDIA_PLAY_PAUSE));&#xA;registrations.push(user32.RegisterHotKey(0, 1, 0, MEDIA_LAUNCH));&#xA;registrations.push(user32.RegisterHotKey(0, 1, CTRL, PERIOD));&#xA;registrations.push(user32.RegisterHotKey(0, 1, CTRL, COMMA));&#xA;registrations.push(user32.RegisterHotKey(0, 1, CTRL, EQUAL));&#xA;registrations.push(user32.RegisterHotKey(0, 1, CTRL, DIVIDE));&#xA;registrations.push(user32.RegisterHotKey(0, 1, CTRL | ALT, PAGEUP));&#xA;registrations.push(user32.RegisterHotKey(0, 1, CTRL | ALT, PAGEDOWN));&#xA;&#xA;// an array of booleans telling us which registrations failed/succeeded&#xA;console.log(registrations);&#xA;&#xA;/* Fourth, wait for new hotkey events from the message queue. */&#xA;&#xA;var myMsg = new msgStruct;&#xA;while (user32.GetMessageA(myMsg.ref(), 0, 0, 0)) {&#xA;    var key = myMsg.lParam &gt;&gt; 16;&#xA;    switch (key) {&#xA;        case MEDIA_NEXT: console.log('media next'); break;&#xA;        case MEDIA_PREV: console.log('media prev'); break;&#xA;        case MEDIA_STOP: console.log('media stop'); break;&#xA;        case MEDIA_PLAY_PAUSE: console.log('media play/pause'); break;&#xA;        case MEDIA_LAUNCH: console.log('media launch'); break;&#xA;        case PERIOD: console.log('next'); break;&#xA;        case COMMA: console.log('previous'); break;&#xA;        case EQUAL: console.log('play/pause'); break;&#xA;        case DIVIDE: console.log('info'); break;&#xA;        case PAGEUP: console.log('volume up'); break;&#xA;        case PAGEDOWN: console.log('volume down'); break;&#xA;        default: console.log('undefined hotkey', key, key.toString(16));&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you want this to work with node-webkit, make sure you build all the native add-ons with <code>nw-gyp</code> with the <code>--target</code> set to your version of node-webkit (0.5.1 in my case):</p>&#xA;&#xA;<pre><code># Make sure you run this command in the following directories (where the binding.gyp files are):&#xA;#  node_modules/ffi/&#xA;#  node_modules/ffi/node_modules/ref/&#xA;#  node_modules/ref/&#xA;$ nw-gyp clean configure --target=v0.5.1 build&#xA;</code></pre>&#xA;&#xA;<p>Review the MSDN docs to understand the method signatures and structs used. Hope this helps!</p>&#xA;",568420,"",,"",,2013-06-23T18:12:12,"","",,0,,,
29808819,2,,29806669,2015-04-22T21:05:24,,0,,"<p>Without seeing how you are compiling the TypeScript, and without seeing how you are attempting to <code>require()</code> these files from node, it's hard to answer this question.</p>&#xA;&#xA;<p>Even so, I can tell you that <em>both</em> TypeScript and node.js are expecting <code>require()</code> to be given a path which is <strong>relative to the file doing the require</strong>.</p>&#xA;&#xA;<p>If I were to have a js/A.ts that looked like so:</p>&#xA;&#xA;<pre><code>import B = require(""./B"");&#xA;console.log(B.thing);&#xA;</code></pre>&#xA;&#xA;<p>And a js/B.ts that looked like so:</p>&#xA;&#xA;<pre><code>var myStuff = {&#xA;    thing: ""I'm a thing!""&#xA;}&#xA;export = myStuff;&#xA;</code></pre>&#xA;&#xA;<p>I could then compile <em>both</em> files with a single <code>tsc -m commonjs ./js/A.ts</code></p>&#xA;&#xA;<p>And then I could run node with: <code>node ./js/A.js</code> and would see the output:</p>&#xA;&#xA;<pre><code>I'm a thing!&#xA;</code></pre>&#xA;",4817677,"",,"",,2015-04-22T21:05:24,"","",,3,,,
29840529,2,,19968325,2015-04-24T06:47:20,,0,,"<p>I am using <a href=""http://karma-runner.github.io/0.12/index.html"" rel=""nofollow"">karma</a> and <a href=""http://jasmine.github.io/"" rel=""nofollow"">jasmine</a> for testing my node-webkit applications. There is a <a href=""https://www.npmjs.com/package/karma-nodewebkit-launcher"" rel=""nofollow"">karma-node-webkit launcher</a> which makes it possible to run those tests.</p>&#xA;",2552918,"",,"",,2015-04-24T06:47:20,"","",,0,,,
29804224,2,,29705135,2015-04-22T16:58:19,,1,,"<p>I'm not sure if you're using exactly the code that you pasted here, but it doesn't appear to be doing anything <em>when the user actually chooses something</em>.  If you were to pick something using the input <em>then</em> call <code>chooseFiles()</code> it should work.  At least it did in my nw.js app I quickly set up.</p>&#xA;&#xA;<p>If you want the files to appear in <code>console.log()</code> when the user completes their selection, I think you should be able to do it using the code below:</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;script src=""jquery.js""&gt;&lt;/script&gt;&#xA;    &lt;script&gt;&#xA;    $(function () {&#xA;        $(""#fileDialog"").on(""change"", function () {&#xA;            var files = $(this)[0].files;&#xA;            for (var i = 0; i &lt; files.length; ++i) {&#xA;            console.log(files[i].path);&#xA;            }&#xA;        });&#xA;    });&#xA;    &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;input type=""file"" id=""fileDialog"" nwdirectory /&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>If you want the files to be logged immediately when user selects a directory using the file dialog, I think the <code>on(""change"")</code> might be what you're looking for.  It worked for me using nw.js v0.12 so give it a shot and see if that is what you're looking for.</p>&#xA;",4817677,"",,"",,2015-04-22T16:58:19,"","",,3,,,
29858643,2,,26336689,2015-04-24T22:34:44,,1,,"<p>You could do that if you manage to launch nw.exe in debug mode using <code>child_process.exec</code> and make sure the line ""Debugger listening on port [nnnnn]"" is written to stderr, because according to <a href=""https://youtrack.jetbrains.com/issue/WEB-1919#comment=27-556387"" rel=""nofollow"">https://youtrack.jetbrains.com/issue/WEB-1919#comment=27-556387</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>IDE parses it and can understand that a new debug session should be initialized and what debug port is.</p>&#xA;</blockquote>&#xA;&#xA;<p>That would be enough <strong>BUT</strong> the problem is: </p>&#xA;&#xA;<ol>&#xA;<li><p><code>child_process.exec</code> will not return stderr until the child process ends and it does not provide a way to pipe it to the node.js host.</p></li>&#xA;<li><p>node-webkit only provide a <code>--remote-debugging-port</code> option to specify the port to open a devtools debugger; there's no option to start in debug mode (something like <code>--debug</code> or <code>--debug-brk</code>)</p></li>&#xA;</ol>&#xA;",149444,"",149444,"",2015-04-25T14:08:45,2015-04-25T14:08:45,"","",,0,,,
29860336,2,,29797634,2015-04-25T02:31:46,,5,,"<p>Yes, of course, that's the point :)  Once built correctly, you require native node.js modules just like you require JavaScript-based ones.</p>&#xA;",5728,"",,"",,2015-04-25T02:31:46,"","",,0,,,
29860314,2,,29860278,2015-04-25T02:28:36,,6,,"<p>Setting node-integration to false will disable node.js in the renderer process - i.e. your app can <em>only</em> do what a web browser will do. Instead of doing this, use Zepto.js which is compatible with Electron and has the same API.</p>&#xA;",5728,"",,"",,2015-04-25T02:28:36,"","",,6,,,
29945856,2,,29944526,2015-04-29T13:54:27,,6,,"<p>NW.js (which is what node-webkit was renamed to) has two contexts in which scripts can be executed - browser or Node. See <a href=""https://github.com/nwjs/nw.js/wiki/Differences-of-JavaScript-contexts#determining-thecontext-ofascript"" rel=""nofollow"">Determining the context of a script</a> on the NW.js wiki</p>&#xA;&#xA;<p>Note that the starter project you linked to bundles its JavaScript up using browserify and loads it via a <code>&lt;script&gt;</code> tag. As a result that code is being run in the browser context, in which <code>document</code> is available.</p>&#xA;&#xA;<p>If you're using <code>require()</code> directly to import your code, that's running in the Node context, in which <code>document</code> is not available. If you'd got any further you'd also have hit issues using React if it was imported with <code>require()</code>, as it detects whether or not it's being executed in a browser context and behaves accordingly.</p>&#xA;",6760,"",6760,"",2015-04-29T14:01:22,2015-04-29T14:01:22,"","",,0,,,
29917107,2,,29902347,2015-04-28T10:39:12,,11,,"<p>as PSkocik said, first detect the platform and get the command line : </p>&#xA;&#xA;<pre><code>function getCommandLine() {&#xA;   switch (process.platform) { &#xA;      case 'darwin' : return 'open';&#xA;      case 'win32' : return 'start';&#xA;      case 'win64' : return 'start';&#xA;      default : return 'xdg-open';&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>second , execute the command line followed by the path</p>&#xA;&#xA;<pre><code>var sys = require('sys');&#xA;var exec = require('child_process').exec;&#xA;&#xA;exec(getCommandLine() + ' ' + filePath);&#xA;</code></pre>&#xA;",3857170,"",3857170,"",2016-07-10T17:46:26,2016-07-10T17:46:26,"","",,1,,,
29895329,2,,29857555,2015-04-27T12:07:47,,19,,"<p>It turns out that <code>express</code> for some reason didn't like my document root mapping.</p>&#xA;&#xA;<p>Rather than using:</p>&#xA;&#xA;<pre><code>//configure Express to default web requests to /workspace/ folder&#xA;expressApp.use(express.static(process.cwd() + '/workspace'));&#xA;</code></pre>&#xA;&#xA;<p>I instead use this:</p>&#xA;&#xA;<pre><code>expressApp.use(express.static(path.join(__dirname, 'workspace')));&#xA;</code></pre>&#xA;",551436,"",551436,"",2015-04-27T14:55:02,2015-04-27T14:55:02,"","",,1,,,
29966094,2,,29966093,2015-04-30T11:06:20,,202,,"<p>Visual Studio Code is built using web technologies on top of Github's <a href=""http://electron.atom.io/"" rel=""noreferrer"">Electron</a>. </p>&#xA;&#xA;<p>Electron is an app runtime for writing <em>native</em> apps that uses <a href=""https://www.chromium.org/"" rel=""noreferrer"">Chromium</a> <em>(which Google Chrome is built on)</em> for rendering the interface and <a href=""https://nodejs.org/"" rel=""noreferrer"">node.js</a> for local APIs <em>(example: file system access)</em>, it was built primarily as the shell for Github's <a href=""https://atom.io/"" rel=""noreferrer"">Atom</a> code editor. <em>(Note: Electron is very similar to <a href=""http://nwjs.io/"" rel=""noreferrer"">NW.js</a>)</em>. </p>&#xA;&#xA;<p>Node.js is a <em>(JavaScript)</em> app runtime built on Google's V8 JavaScript engine with C and C++ code to give it access to native APIs for each operating system <em>(example: file system access)</em>.</p>&#xA;&#xA;<p>Essentially, Microsoft's new product is built completely upon open source software whose major components were created by Google.</p>&#xA;&#xA;<p>There are rumors that Visual Studio code is either a fork or rebranding of Github's Atom Editor. This is not even remotely true. Inspecting the source of Visual Studio Code reveals that it uses Electron and <a href=""https://github.com/atom/asar"" rel=""noreferrer"">Atom Shell Archive</a>, but nothing else is from the Atom editor.</p>&#xA;&#xA;<p>The 'editor' <em>(the thing that renders the code with syntax highlighting, line numbers, etc..)</em> part of Visual Studio Code is Microsoft's Monaco editor. It is the same editor used for OneDrive, Windows Azure, TypeScript Playground, and Visual Studio Online. I have yet to find any real documentation on this editor from Microsoft but there are <a href=""http://www.hanselman.com/blog/ARichNewJavaScriptCodeEditorSpreadingToSeveralMicrosoftWebSites.aspx"" rel=""noreferrer"">some articles</a> about it around the web. </p>&#xA;&#xA;<p><a href=""http://www.omnisharp.net/"" rel=""noreferrer"">Omnisharp</a> is used to provide IntelliSense and other code editing tools for C# <em>(example: refactoring)</em>.</p>&#xA;&#xA;<p>The JavaScript Intellisense appears to be all custom code. It provides impressive JavaScript completions but it many cases it appears to be inferior to <a href=""http://ternjs.net/"" rel=""noreferrer"">Tern</a> <em>(see <a href=""http://sevin7676.github.io/Ace.Tern/demo.html"" rel=""noreferrer"">Tern Demo</a>)</em>. </p>&#xA;",1571103,"",1571103,"",2017-11-06T15:11:33,2017-11-06T15:11:33,"","",,5,,,
28364181,2,,28364084,2015-02-06T10:56:21,,0,,"<p>No, exceptions - only title attribute when hover, as on the screenshot</p>&#xA;",1221082,"",,"",,2015-02-06T10:56:21,"","",,0,,,
28400729,2,,28400618,2015-02-08T23:44:14,,0,,"<p>Simply <a href=""http://expressjs.com/api.html#res.send"" rel=""nofollow""><code>send</code></a> the response, once you got the neccessary data! You are not required to <code>end</code> or <code>send</code> directly in your route but can do it in a nested callback as well:</p>&#xA;&#xA;<pre><code>router.get('/cal', function(req, res, next) {&#xA;    var db = req.db;&#xA;    var ical = new icalendar.iCalendar();&#xA;&#xA;    db.find({&#xA;        evauthor: 'mykey'&#xA;    }, function(err, docs) {&#xA;        docs.forEach(function(obj) {&#xA;            var event2 = ical.addComponent('VEVENT');&#xA;            event2.setSummary(obj.evics.evtitle);&#xA;            event2.setDate(new Date(obj.evics.evdatestart), new Date(obj.evics.evdateend));&#xA;            event2.setLocation(obj.evics.evlocation)&#xA;        });&#xA;&#xA;        res.type('ics');&#xA;        res.send(ical.toString());&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I also included sending the proper <code>Content-Type</code> by using <a href=""http://expressjs.com/api.html#res.type"" rel=""nofollow""><code>res.type</code></a>.</p>&#xA;&#xA;<p>Also: Don't forget to add proper error handling. You can for example use <a href=""http://expressjs.com/api.html#res.sendStatus"" rel=""nofollow""><code>res.sendStatus(500)</code></a> if an error occured while retrieving the documents.</p>&#xA;",782822,"",,"",,2015-02-08T23:44:14,"","",,1,,,
28296510,2,,27773247,2015-02-03T10:22:37,,1,,"<p>Well you could use <a href=""http://127.0.0.1/"" rel=""nofollow"">http://127.0.0.1/</a> or localhost URL to register API on Google Console but on your client side attach a listener to browser's window, So that when google api redirects to our end we could intercept that action and get <code>Authorization Code</code> from url. I have tried this on phonegap/cordova app, It works perfectly. Check the codebase for reference.</p>&#xA;&#xA;<pre><code>var authUrl = AUTH_URL + '?' +&#xA;'&amp;client_id=' + options.client_id +&#xA;'&amp;redirect_uri=' + options.redirect_uri +&#xA;'&amp;response_type=code' +&#xA;'&amp;scope=' + options.scopez +&#xA;'&amp;approval_prompt=force';&#xA;&#xA;//Open the OAuth consent page in the InAppBrowser&#xA;var authWindow = window.open(authUrl, '_blank', 'location=no,toolbar=no,clearcache=yes,clearsessioncache=yes,closebuttoncaption=""Close""');&#xA;&#xA;authWindow.addEventListener('loadstart', function(e) {&#xA;   var url = e.url;&#xA;   var code = /\?code=(.+)$/.exec(url);&#xA;   var error = /\?error=(.+)$/.exec(url);&#xA;   //alert(""code : "" + JSON.stringify(code));&#xA;   if (code || error) {&#xA;   //Always close the browser when match is found&#xA;      console.log(""code : "" + code);&#xA;      console.log(""Closing OAuth Window."");&#xA;      authWindow.close();&#xA;   }&#xA;   if (code) {&#xA;   //Exchange the authorization code for an access token&#xA;   OAuthService.getAccessTokenByCode(code[1]).then(function(data) {&#xA;      deferred.resolve(data);&#xA;   }, function(error) {&#xA;      deferred.reject(error);&#xA;   });&#xA;} else if (error) {&#xA;   //The user denied access to the app&#xA;      deferred.reject({&#xA;        error: error[1]&#xA;      });&#xA;    }&#xA;  });&#xA;</code></pre>&#xA;",258086,"",,"",,2015-02-03T10:22:37,"","",,0,,,
28536480,2,,28341591,2015-02-16T07:30:33,,1,,"<p>You can register a callback function from your main application into your iframe's content window. and then call that function from your iframe.&#xA;example:</p>&#xA;&#xA;<p>in your main application:</p>&#xA;&#xA;<pre><code>function copy_do(text){&#xA;    clipboard.set(text, 'text');&#xA;}&#xA;&#xA;var iframe = document.getElementsByTagName('iframe')[0];&#xA;iframe.onload = function(){&#xA;   iframe.contentWindow.myCallback = copy_do;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>in your iframe script:</p>&#xA;&#xA;<pre><code>window.myCallback('sometext');&#xA;</code></pre>&#xA;",2420102,"",,"",,2015-02-16T07:30:33,"","",,0,,,
28366917,2,,28300192,2015-02-06T13:31:21,,6,,"<blockquote>&#xA;  <p>I want to prevent scripts that don't originate from the iframes' source</p>&#xA;</blockquote>&#xA;&#xA;<p>This is exactly what a <a href=""http://www.html5rocks.com/en/tutorials/security/content-security-policy/"" rel=""nofollow"">Content Security Policy</a> (CSP) is for. A CSP can specify which origins are permitted for scripts, plugins, styles, media, etc. You need to cause each the iframe to have a CSP that prevents script loads outside of the current origin; this can be done with the simple policy <code>script-src 'self' 'unsafe-inline';</code> (the <code>unsafe-inline</code> allows the iframe to have inline scripts and the <code>self</code> restricts loads to the same-origin resources only)</p>&#xA;&#xA;<p>Traditionally, you need the server to send the <code>Content-Security-Policy</code> response header when serving the page. However, if you don't have control over the server-sent response headers (but <em>do</em> have control over the page content) you can imitate an HTTP response header with a <code>&lt;meta&gt;</code> tag like so:</p>&#xA;&#xA;<pre><code>&lt;meta http-equiv=""Content-Security-Policy"" content=""script-src 'self' 'unsafe-inline';""&gt;&#xA;</code></pre>&#xA;&#xA;<p>You can inject this programmatically (but read on for issues):</p>&#xA;&#xA;<pre><code>var m = document.createElement(""meta"");&#xA;m.httpEquiv = ""content-security-policy"";&#xA;m.content = ""script-src 'self' 'unsafe-inline';"";&#xA;iframeElem.contentDocument.documentElement.appendChild(m);&#xA;</code></pre>&#xA;&#xA;<p>However, this script-based injection might not work for you, because you'll only have a DOM to work with after the DOM is parsed from the HTML source. At that time, and the scripts from any (non-<code>async</code>) <code>&lt;script&gt;</code> elements will already have been fetched and run. You may need to manipulate the HTML directly, but I don't know enough about NW.js to tell you the best way to do that.</p>&#xA;&#xA;<p>If you want to disallow <em>all</em> external script resources (even ones from the same origin), you can use <code>script-src 'none' 'unsafe-inline';</code>. To disallow <em>all</em> scripts, including loaded scripts and inline scripts, use <code>script-src 'none';</code></p>&#xA;&#xA;<p>In order to whitelist specific origins, simply add them as unquoted items in the CSP:</p>&#xA;&#xA;<pre><code>Content-Security-Policy: script-src 'self' *.twitter.com https://api.facebook.com&#xA;</code></pre>&#xA;&#xA;<p>A leading <code>*.</code> allows all subdomains, and a leading <code>https://</code> limits the whitelist for that domain to secure <code>https://</code> addresses only.</p>&#xA;",710446,"",710446,"",2015-03-30T16:39:30,2015-03-30T16:39:30,"","",,3,,,
36722515,2,,36633868,2016-04-19T15:13:36,,0,,<p>The project was using Bootstrap 4 and not Bootstrap 3 as I thought...</p>&#xA;,3215167,"",,"",,2016-04-19T15:13:36,"","",,0,,,
36735278,2,,36734830,2016-04-20T06:16:03,,0,,"<p>Try using the icon option:</p>&#xA;&#xA;<pre><code>--icon=/path/to/icon.icns&#xA;</code></pre>&#xA;&#xA;<p><strong><em>icon</em></strong></p>&#xA;&#xA;<blockquote>&#xA;  <p>the icon file to use as the icon for the app. Note: Format&#xA;  depends on platform.</p>&#xA;</blockquote>&#xA;&#xA;<p>↳ <a href=""https://github.com/electron-userland/electron-packager/blob/9849daef5356ea810ab4e509c1061d81b2ea80a0/usage.txt#L34"" rel=""nofollow"">electron-packager usage.txt</a></p>&#xA;",499581,"",,"",,2016-04-20T06:16:03,"","",,3,,,
36744093,2,,36647973,2016-04-20T12:39:39,,0,,"<p>Ok, my bad.... I was using the standard version of nw whereas you need the sdk version if you need the devtools.</p>&#xA;",645854,"",,"",,2016-04-20T12:39:39,"","",,1,,,
36575860,2,,36575210,2016-04-12T14:13:10,,1,,"<p>The idea behind is that you can deliver you application bundled with electron, so that you don't need a web server/application server and your application runs fully locally.</p>&#xA;&#xA;<p>the supported platform are defined here:&#xA;<a href=""http://electron.atom.io/docs/v0.37.5/tutorial/supported-platforms/"" rel=""nofollow"">http://electron.atom.io/docs/v0.37.5/tutorial/supported-platforms/</a></p>&#xA;&#xA;<p>And you need the specific binary for the specific platform that you want to use. (jvm like)</p>&#xA;&#xA;<p>I hope it helps.</p>&#xA;",4786416,"",4786416,"",2016-04-12T14:47:10,2016-04-12T14:47:10,"","",,2,,,
36682884,2,,36682670,2016-04-17T22:24:12,,1,,"<p>You can do that by using websockets.</p>&#xA;&#xA;<p>In Node.js there's a great lib for websockets called socket.io <a href=""http://socket.io/"" rel=""nofollow"">http://socket.io/</a>&#xA;You can find examples by googling, it's very easy to use. </p>&#xA;&#xA;<p>Basically your client (browser with your HTML page loaded) connects to the server via websocket. It creates a connection between server and client that it's always listen to events in both ways. Server can emmit messages to client and vice versa. Analogously server can listen to messages from the client and vice versa. </p>&#xA;&#xA;<p>Using this technology you can listen to messages from server and make your DOM manipulations in the client in real time.</p>&#xA;",3866134,"",,"",,2016-04-17T22:24:12,"","",,1,,,
36711468,2,,36710439,2016-04-19T07:31:04,,1,,"<p>On Windows you need to call the <a href=""https://msdn.microsoft.com/en-us/library/aa376875%28VS.85%29.aspx"" rel=""nofollow""><code>LockWorkStation</code></a> function. You can either write a native Node module to invoke this function, or just execute <code>rundll32.exe user32.dll, LockWorkStation</code> on the command line (which is what the <a href=""https://github.com/abinpal/lockpc"" rel=""nofollow"">lockpc</a> package does).</p>&#xA;",1259938,"",,"",,2016-04-19T07:31:04,"","",,1,,,
36711665,2,,36528965,2016-04-19T07:39:46,,1,,"<p>Try using the <a href=""https://github.com/stevenvachon/hidefile#ishiddensyncpath"" rel=""nofollow""><code>isHiddenSync</code></a> function in the <a href=""https://github.com/stevenvachon/hidefile"" rel=""nofollow"">hidefile</a> module.</p>&#xA;",1259938,"",,"",,2016-04-19T07:39:46,"","",,1,,,
36715159,2,,34328961,2016-04-19T10:05:17,,1,,"<p>Finally after some time I found a working solution:</p>&#xA;&#xA;<pre><code>var node_modules = [""child_process"",""fs""];&#xA;var fetch = System.fetch;&#xA;window.remote=require(""remote"");&#xA;System.fetch = function () {&#xA;    var promise= fetch.apply(System,arguments);&#xA;    return promise.then(function (js) {&#xA;        for(var m of node_modules){&#xA;            var requireExpression = 'require(""'+m+'"");';&#xA;            var remoteRequire = 'remote.require(""'+m+'"");'&#xA;            js=js.replace(requireExpression,remoteRequire);&#xA;        }&#xA;        return js;&#xA;    });&#xA;}&#xA;System.import(""aurelia-bootstrapper"");&#xA;</code></pre>&#xA;&#xA;<p>Just add all imported node_modules to the array and things are fine</p>&#xA;",3985687,"",,"",,2016-04-19T10:05:17,"","",,0,,,
36753978,2,,36698080,2016-04-20T19:58:59,,1,,"<p>So as of the current version of Electron (0.37.6) the way to set a global variable is to specify a preload script on the <code>preload</code> attribute on the <code>&lt;webview&gt;</code> tag. For example in the preload script:</p>&#xA;&#xA;<pre><code>window['ipcRenderer'] = require('electron').ipcRenderer;&#xA;</code></pre>&#xA;&#xA;<p>This will allow the guest page that the <code>&lt;webview&gt;</code> is displaying, to use the ipcRenderer. It seems like the previous method i was using, which was setting the global variable in the parent view HTML, does not work anymore</p>&#xA;",4126230,"",,"",,2016-04-20T19:58:59,"","",,0,,,
36627882,2,,36626181,2016-04-14T15:41:29,,2,,"<p><code>ipcRenderer</code> and <code>ipcMain</code> do not support complex things transfer like objects or functions. You need to send your instructions from your first <code>BrowserWindow</code> to your main process, then the main process should send an instruction (like a string) to your second window that should handle it.</p>&#xA;&#xA;<p>If you want to transfer streams, you will have to create a localhost server and use a socket library (<a href=""http://socket.io"" rel=""nofollow"">socket.io</a>), coupled with the corresponding npm package, for example <a href=""https://www.npmjs.com/package/socket.io-stream"" rel=""nofollow"">socket.io-stream</a></p>&#xA;",3766528,"",3766528,"",2016-04-18T11:42:34,2016-04-18T11:42:34,"","",,3,,,
36653450,2,,36637201,2016-04-15T17:31:47,,2,,"<p>After a few hours of looking into it <a href=""https://discuss.atom.io/t/requiring-electron-dialog-from-render-process-is-undefined/27877"" rel=""nofollow noreferrer"">someone else</a> pointed out to me that the ""new"" way (4/15/16) of doing this is the following. </p>&#xA;&#xA;<pre><code>var remote = require('remote');&#xA;var dialog = remote.require('dialog');&#xA;&#xA;dialog.showOpenDialog({ &#xA;  properties: [ 'openFile' ] }, function ( filename ) {&#xA;    console.log( filename.toString() );&#xA;  }&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>You must require <code>remote</code> and then from remote require dialog. It looks like you no longer need to require <code>electron</code> </p>&#xA;",1914652,"",3185307,"",2016-11-01T19:34:19,2016-11-01T19:34:19,"","",,0,,,
36734502,2,,36721461,2016-04-20T05:22:57,,2,,<p>look into <code>process.resourcesPath</code></p>&#xA;,5501413,"",,"",,2016-04-20T05:22:57,"","",,0,,,
36746290,2,,36737603,2016-04-20T14:03:53,,2,,"<p>There are some classic characters that should not be in urls. Examples are: ? # @ / \ : and %. I think / and \ are obvious why not (file paths). ? is used for get requests. # is used as an shortcut to an id on a page. An email-address uses @'s, also ftp can use @. You can specify a port in a url bij :. % is used for url encodings.</p>&#xA;&#xA;<p>These characters escaping will probably work, (most of those characters aren't allowed in filenames by your filesystem):</p>&#xA;&#xA;<pre><code>? -&gt; %3F&#xA;# -&gt; %23&#xA;@ -&gt; %40&#xA;/ -&gt; %2F&#xA;\ -&gt; %5C&#xA;: -&gt; %3A&#xA;% -&gt; %25&#xA;</code></pre>&#xA;&#xA;<p>In my linux mint I can rename a file to: '?#@:\.txt'. You can experiment which characters you need te replace. </p>&#xA;&#xA;<p><strong>Note</strong> If you're replacing in javascript don't forget to set a global flag: <code>"""".replace(/\?/g, ""%3F"")</code>.</p>&#xA;",6153247,"",,"",,2016-04-20T14:03:53,"","",,0,,,
36772727,2,,36772664,2016-04-21T14:31:56,,2,,<p>No. Otherwise malicious websites would be able to overwrite important files on your computer</p>&#xA;,1577190,"",,"",,2016-04-21T14:31:56,"","",,6,,,
36778487,2,,36777393,2016-04-21T19:12:13,,2,,"<p>Have you tried <code>process.arch</code>?</p>&#xA;&#xA;<p>I believe that returns the architecture of the current process, rather than the architecture of the operating system</p>&#xA;",4126230,"",,"",,2016-04-21T19:12:13,"","",,1,,,
36790171,2,,36781524,2016-04-22T09:35:23,,2,,"<p>Finally I solved it in two easy steps:</p>&#xA;&#xA;<ol>&#xA;<li>puting my Babel stuff in seperate file</li>&#xA;</ol>&#xA;&#xA;<p><strong>index.js</strong></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>'use strict';&#xA;&#xA;require('babel-core/register');&#xA;require(""babel-polyfill"");&#xA;require(""./src/main"");&#xA;</code></pre>&#xA;&#xA;<ol start=""2"">&#xA;<li>updated package.json to execute it on <code>npm start</code></li>&#xA;</ol>&#xA;&#xA;<p><strong>package.json</strong>&#xA;</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ""start"": ""electron index.js""&#xA;},&#xA;</code></pre>&#xA;",827134,"",,"",,2016-04-22T09:35:23,"","",,0,,,
36600009,2,,36598995,2016-04-13T13:31:04,,3,,"<p>The sample electron boilerplate app includes a line like this in the main electron startup code:</p>&#xA;&#xA;<pre><code>app.commandLine.appendSwitch('host-rules', 'MAP * 127.0.0.1');&#xA;</code></pre>&#xA;&#xA;<p>If your code includes that, then all network requests are going to be re-routed back to localhost, which will be a problem.</p>&#xA;&#xA;<p>If that line of code is in your electron startup code, try commenting it out...</p>&#xA;",5888928,"",,"",,2016-04-13T13:31:04,"","",,0,,,
36673022,2,,36640701,2016-04-17T05:31:20,,3,,"<p>Writing app data to the application installation directory is generally a bad idea since the user running the app may not have permission to write files to the application installation directory. What you should probably do instead is store whatever your application downloads at the location returned by <a href=""https://github.com/electron/electron/blob/v0.37.6/docs/api/app.md#appgetpathname"" rel=""nofollow""><code>app.getPath('userData')</code></a>.</p>&#xA;",1259938,"",,"",,2016-04-17T05:31:20,"","",,1,,,
36733042,2,,36498756,2016-04-20T03:00:33,,3,,"<p>The latest version of sqlectron has a .deb file to install in debian like distro <a href=""https://github.com/sqlectron/sqlectron-gui/releases/latest"" rel=""nofollow"">https://github.com/sqlectron/sqlectron-gui/releases/latest</a></p>&#xA;",1481312,"",,"",,2016-04-20T03:00:33,"","",,0,,,
36614996,2,,36614776,2016-04-14T06:07:52,,7,,"<p>It is not webpack which is used in electron. The require function is part of the node.js, which is the base for electron.</p>&#xA;&#xA;<p>More informations about the modules at the node.js docs:&#xA;<a href=""https://nodejs.org/dist/latest-v5.x/docs/api/modules.html"" rel=""noreferrer"">https://nodejs.org/dist/latest-v5.x/docs/api/modules.html</a></p>&#xA;&#xA;<p>But as long as webpack is also availiable as a node module (<a href=""https://www.npmjs.com/package/webpack"" rel=""noreferrer"">https://www.npmjs.com/package/webpack</a>) it is also possible to use webpack with electron. At this point you are also able to use the build on the fly in production, because node and chrome are availiable inside one app.</p>&#xA;&#xA;<p>Why use webpack with electron?&#xA;When you use react or vue.js components maybe it is a good idea to separate the components. To bundle your code into one app you need browserfy or webpack. That would be for example a good cause, why to use it.</p>&#xA;",5291427,"",,"",,2016-04-14T06:07:52,"","",,1,,,
36739986,2,,36733761,2016-04-20T09:49:08,,8,,"<p>The black screen is probably due to the css files routes. Check them.</p>&#xA;&#xA;<p>If you followed the starter electron tutorial, you are most likely calling <code>mainWindow.openDevTools();</code>. Remove that line and you will not get the console.</p>&#xA;",549003,"",,"",,2016-04-20T09:49:08,"","",,0,,,
36766210,2,,36103547,2016-04-21T10:02:09,,8,,"<p>I just tried the same scenario, and it worked as expected.</p>&#xA;&#xA;<p>Do you have the <code>&lt;webview&gt;</code> dev tools open? As a <code>&lt;webview&gt;</code>has its own dev tools, That would be the only reason i can see for the preload script not showing the <code>console.log</code> output. They can be opened by:</p>&#xA;&#xA;<pre><code>var webview = document.getElementById(""link-view"");&#xA;webview.openDevTools();&#xA;</code></pre>&#xA;&#xA;<p>Or your path to the script is incorrect, which i doubt as you seem sure about that.</p>&#xA;",4126230,"",,"",,2016-04-21T10:02:09,"","",,0,,,
19057302,2,,19056567,2013-09-27T18:05:28,,0,,"<p>I suspect you have a problem with <a href=""http://nodejs.org/api/stream.html#stream_class_stream_readable"" rel=""nofollow"">non-flowing streams</a>.</p>&#xA;&#xA;<p>Since you never consume the data of your responses, the connection never closes. The <a href=""http://nodejs.org/api/http.html#http_agent_maxsockets"" rel=""nofollow"">HTTP Agent</a> limits the number of concurrent connections and refuses to open any new connection after a while.</p>&#xA;&#xA;<p>You should try to manually switch the response to flowing mode:</p>&#xA;&#xA;<pre><code>mainMenu.click(function () {&#xA;  var menulink = $(this).attr('rel');&#xA;  var menuvar = http.get(url, function (res) {&#xA;    // FORCE FLOWING MODE&#xA;    res.resume();&#xA;    window.location = menulink;&#xA;  }).on('error', function () {&#xA;    alert('Cannot Connect to Server');&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",1572524,"",,"",,2013-09-27T18:05:28,"","",,2,,,
18956153,2,,18783944,2013-09-23T09:43:48,,2,,"<p>After discovering the NodeWebkit Issue`s i saw this thread:&#xA;<a href=""https://github.com/rogerwang/node-webkit/issues/542"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/issues/542</a></p>&#xA;&#xA;<p>It describes a way with NodeWebkit IFrames:&#xA;my code looks like this:</p>&#xA;&#xA;<pre><code>var def     = $.Deferred();        &#xA;var $iframe = $('&lt;iframe nwfaketop nwdisable&gt;&lt;/iframe&gt;')&#xA;                .attr('src', SoundCloud.ConnectUrl)&#xA;                .load(function(e) {&#xA;&#xA;                    var parser      = document.createElement('a');&#xA;                        parser.href = this.contentWindow.location.href;&#xA;&#xA;                    var search = parser.search.substr(1, parser.search.length);&#xA;                    var result = URLToArray(search);&#xA;&#xA;                    if (result.error !== void 0) {&#xA;                        $iframe.remove();&#xA;                        def.reject(result.error_description);&#xA;                    }&#xA;&#xA;                    if (result.code !== void 0) {&#xA;                        SoundCloud.LoginCode = result.code;&#xA;                        $iframe.remove();&#xA;                        def.resolve();&#xA;                    }&#xA;                })&#xA;                .appendTo($(opts.iframe));&#xA;&#xA;return def;&#xA;</code></pre>&#xA;&#xA;<p>hope it helps others with the same problem.</p>&#xA;",1067061,"",,"",,2013-09-23T09:43:48,"","",,0,,,
18968798,2,,18867489,2013-09-23T21:01:10,,7,,<p>Looks like the new version of RequireJS has a function called: <code>requirejs()</code> in addition to <code>require()</code> to avoid conflicts with node's <code>require()</code>.</p>&#xA;,33522,"",,"",,2013-09-23T21:01:10,"","",,0,,,
24805556,2,,21608255,2014-07-17T13:55:17,,0,,"<p>In my case the problem has two reasons:</p>&#xA;&#xA;<ol>&#xA;<li><p>If I want to use node modules, which written on C++, I can't give for my app custom name (in my case 'app'), I should use default name 'nw'. <a href=""https://github.com/rogerwang/node-webkit/wiki/Using-Node-modules#3rd-party-modules-with-cc-addons"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/Using-Node-modules#3rd-party-modules-with-cc-addons</a></p></li>&#xA;<li><p>As I understood, it's not possible to load modules into appliacation from external folder 'node_modules' using function 'require'.</p></li>&#xA;</ol>&#xA;",2915797,"",,"",,2014-07-17T13:55:17,"","",,0,,,
24917413,2,,24892606,2014-07-23T17:47:35,,0,,"<p>If you still want to try PDF.js, this is how I have gotten it working.</p>&#xA;&#xA;<p>After downloading all the files, the main ones that do all the work are viewer.html and viewer.js. You can point to viewer.html from anywhere in your node-webkit app by doing something like:</p>&#xA;&#xA;<pre><code>$("".some-pdf"").on(""click"", function(){&#xA;   window.location.href = ""path-to-pdfjs/viewer.html"";&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>To determine which file it opens, there's a variable in view.js.</p>&#xA;&#xA;<pre><code>var DEFAULT_URL = 'pdfs/something.pdf';&#xA;</code></pre>&#xA;&#xA;<p>Since you're using node-webkit, it won't have any issues accessing the file system.</p>&#xA;&#xA;<p>I made it a little more dynamic, where the link can point to any specific pdf, by doing the following. In any file, the link adds a hash with the file name:</p>&#xA;&#xA;<pre><code>$("".some-pdf"").on(""click"", function(){&#xA;   window.location.href = ""path-to-pdfjs/viewer.html#specific.pdf"";&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then in viewer.js:</p>&#xA;&#xA;<pre><code>var DEFAULT_URL = 'pdfs/' + window.location.hash.replace(""#"", """");&#xA;</code></pre>&#xA;&#xA;<p>Then it is a bit reusable through your app, if there are multiple pdf files involved. </p>&#xA;",1807481,"",,"",,2014-07-23T17:47:35,"","",,0,,,
24848928,2,,24846015,2014-07-20T09:01:30,,1,,"<p>It turns out that the issue was that I also had <a href=""http://ace.c9.io/"" rel=""nofollow"">ace.js</a> loaded, which also assigns a global <code>require</code> function. </p>&#xA;&#xA;<p>To solve this, you can add the following code snippet: (<a href=""https://github.com/rogerwang/node-webkit/wiki/faq-name-conflict"" rel=""nofollow"">source</a>)</p>&#xA;&#xA;<pre><code>&lt;script type=""text/javascript""&gt;&#xA;    window.requireNode = window.require;&#xA;    window.require = undefined; &#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>in the <code>head</code> of your main html file. Then just use <code>requireNode</code> instead of <code>require</code>. </p>&#xA;",2646898,"",,"",,2014-07-20T09:01:30,"","",,0,,,
24997560,2,,24975889,2014-07-28T14:30:59,,1,,"<p>The problem was when zipping everything. There was no error with the module.&#xA;I forgot to add the -r when zipping, therefore the subdirs were not included.</p>&#xA;",2009311,"",,"",,2014-07-28T14:30:59,"","",,0,,,
24934597,2,,24934596,2014-07-24T13:07:02,,4,,"<p>I managed to make it work.</p>&#xA;&#xA;<p>As I had already installed the <code>mdns</code> module, I already had the source code of the module in the folder <code>node_modules/mdns</code> inside my project folder.</p>&#xA;&#xA;<p>So these are the steps I followed to build the <code>mdns</code> module for the i386 architecture:</p>&#xA;&#xA;<p>1) Install nw-gyp by running: <code>npm install -g nw-gyp</code><br/>&#xA;2) Enter in the <code>node_modules/mdns</code> folder of your node-webkit project<br/>&#xA;3) Run <code>nw-gyp configure --target=0.8.6</code> (this target is the version of the node-webkit you have installed)<br/>&#xA;4) And finally run <code>nw-gyp build</code><br/></p>&#xA;&#xA;<p>I got a lot of warnings of deprecated functions, but it was built OK and now my node-webkit application can publish the Bonjour service successfully.</p>&#xA;&#xA;<p>Unfortunately this is not the best solution, though, because the next person that installs the project will have to do the same after the regular <code>npm install</code>... But at least it's something to get it working.</p>&#xA;",2035596,"",,"",,2014-07-24T13:07:02,"","",,0,,,
53682198,2,,53666474,2018-12-08T11:46:58,,0,,<p>Finally fixed it. The problem was typographical. My app couldnt get to the main.js because the file path was wrong. If youre having a similar problem check your file path.</p>&#xA;,10112707,"",,"",,2018-12-08T11:46:58,"","",,0,,,
53706293,2,,53390156,2018-12-10T13:04:54,,2,,"<p>You can easily emulate Notification API</p>&#xA;&#xA;<pre><code>window.Notification = function() {&#xA;  const notificationEnabled = Notification.permission === 'granted';&#xA;  return notificationEnabled ? new window.oldNotification(...arguments) : {};&#xA;};&#xA;&#xA;Object.defineProperty(Notification, 'permission', {&#xA;  get() {&#xA;    return localStorage.getItem('notification-permissions') === 'true' ? 'granted' : 'denied';&#xA;  }&#xA;});&#xA;&#xA;Notification.requestPermission = (callback) =&gt; {&#xA;  if (typeof callback === 'function') {&#xA;    callback(Notification.permission);&#xA;  }&#xA;&#xA;  return Promise.resolve(Notification.permission);&#xA;};&#xA;</code></pre>&#xA;",1193884,"",,"",,2018-12-10T13:04:54,"","",,0,,,
53744427,2,,53742744,2018-12-12T13:44:51,,1,,"<pre><code>var options = {&#xA;  protocol: 'https',&#xA;  hostName: 'pokeapi.co',&#xA;  versionPath: '/api/v2/',&#xA;  cacheLimit: 100 * 1000, // 100s&#xA;  timeout: 5 * 1000 // 5s&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I assume you're not running the API on your local machine. So asking localhost on something that is not running will result in a <strong>ERR_CONNECTION_REFUSED</strong></p>&#xA;&#xA;<p>The Pokedex has a default option if you don't parse the option object, that one is already set up how you'll need it.</p>&#xA;&#xA;<p>So basically you just need <code>var P = new Pokedex();</code> without the option.</p>&#xA;",5115009,"",,"",,2018-12-12T13:44:51,"","",,0,,,
53753328,2,,53752792,2018-12-13T00:21:24,,1,,"<p>Best shot would be using <code>console-message</code> event in webContents. (<a href=""https://electronjs.org/docs/api/web-contents#event-console-message"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/web-contents#event-console-message</a>) </p>&#xA;&#xA;<p>It allows to hook console messages from certain webcontents' console, but mind there is one known issue of param for those consoles are not forwareded: i.e <code>console.log('message', ...args);</code> you'll likely not able to grab args. </p>&#xA;",2742189,"",,"",,2018-12-13T00:21:24,"","",,0,,,
53795490,2,,53795444,2018-12-15T17:20:32,,2,,<p>I had the same problem before. Highly possible that you already have another electron instance running in the background. Start activity monitor and get rid of all running electron instances then try again.</p>&#xA;,10792451,"",,"",,2018-12-15T17:20:32,"","",,0,,,
53820946,2,,53820228,2018-12-17T18:17:39,,1,,"<p>Using <code>--skipLibCheck</code> will suppress the errors, not fix them. It's okay in the short run (just to get you going while you deal with the root cause) but since it opts out from library type-checking entirely, it's really a footgun.</p>&#xA;&#xA;<p>For TypeScript to scan a declaration file and include it in the compilation, it must be either something you depend on explicitly (you <code>import</code> or <code>require</code> in your project) or implicitly (it's added to <code>types</code> it in your <code>tsconfig.json</code>). Often times it's not exactly your dependency, but a dependency of your dependency. For real type-safety, everything in the tree must be in order. Sometimes it's just because the provided typings are imperfect, and need fixing.</p>&#xA;&#xA;<p>You can start with updating <code>@types/selenium-webdriver</code> and updating your dependencies in general. Try running <code>npx npm-check --update</code> to see what needs updating.</p>&#xA;&#xA;<p>If that doesn't help, you can write your type declarations for the library in question (and either send them to DefinitelyTyped or keep them in your project).</p>&#xA;",10325032,"",,"",,2018-12-17T18:17:39,"","",,0,,,
53887536,2,,53886141,2018-12-21T15:48:28,,1,,"<p>Your assumption that it won't be included in your production build is correct. So you need a way to know if the module is available.</p>&#xA;&#xA;<p>In <a href=""https://stackoverflow.com/a/33067955"">this</a> answer, <a href=""https://stackoverflow.com/users/286685/stijn-de-witt"">Stijn de Witt</a> presents a way of doing so:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// See https://stackoverflow.com/a/33067955, by Stijn de Witt&#xA;function moduleAvailable (name) {&#xA;    try {&#xA;        require.resolve (name);&#xA;        return true;&#xA;    } catch (e) {&#xA;        // empty&#xA;    }&#xA;&#xA;    return false;&#xA;}&#xA;&#xA;// Query for your particular module&#xA;if (moduleAvailable (""electron-debug"")) require (""electron-debug"") ();&#xA;</code></pre>&#xA;&#xA;<p>I'm not too sure of that, but there is a possibility that it also works with packaged (e.g. by <code>electron-packager</code>) builds of your app.</p>&#xA;",6786876,"",,"",,2018-12-21T15:48:28,"","",,0,,,
53898211,2,,53892650,2018-12-22T18:17:35,,0,,"<p>Solved using the <strong>extraFiles</strong> option: <a href=""https://www.electron.build/configuration/contents#extrafiles"" rel=""nofollow noreferrer"">https://www.electron.build/configuration/contents#extrafiles</a></p>&#xA;",6416249,"",,"",,2018-12-22T18:17:35,"","",,0,,,
53759767,2,,53720798,2018-12-13T10:29:13,,0,,"<p>After searching a lot and trying different-2 scenarios finally i found a solution that how to store the address and retrieve in future for further operations :-</p>&#xA;&#xA;<p>(Note:- here i am using <a href=""https://www.npmjs.com/package/ref"" rel=""nofollow noreferrer"">ref</a>, <a href=""https://www.npmjs.com/package/ffi"" rel=""nofollow noreferrer"">ffi</a> modules)&#xA;so for storing pointer , create a buffer that can hold pointer type like below</p>&#xA;&#xA;<pre><code>     const ref = require('ref');        &#xA;     const  ffi = require('ffi');&#xA;&#xA;     var buf = ref.alloc('pointer');&#xA;     ref.writePointer(buf, 0, pointer);  // pointer or memory address&#xA;</code></pre>&#xA;&#xA;<p>so here you store the memory address in buffer and where you want to use you can retrieve it from buffer like below:-</p>&#xA;&#xA;<pre><code>     memory_pointer = ref.readPointer(buf,0);   // buf is buffer which we created above, 0 for offset &#xA;</code></pre>&#xA;&#xA;<p>so now you get the <code>memory_pointer</code> so you can pass it to your function call using <code>ffi</code> module.</p>&#xA;",10346580,"",,"",,2018-12-13T10:29:13,"","",,1,,,
53813994,2,,53783659,2018-12-17T11:09:25,,0,,"<p>After some time of debugging, I have a solution. I tried to use native <code>fs.mkdir</code> with no luck, but after I added mode as the second argument - it worked.</p>&#xA;&#xA;<pre><code>const _0777 = parseInt('0777', 8);&#xA;const mode = _0777 &amp; (~process.umask());&#xA;&#xA;fs.mkdir(&lt;folderPath&gt;, mode, () =&gt; {});&#xA;</code></pre>&#xA;&#xA;<p>Hope, this will help someone.</p>&#xA;",4691435,"",,"",,2018-12-17T11:09:25,"","",,1,,,
53883409,2,,53880880,2018-12-21T10:46:01,,4,,"<p>Yes it does. You can get it like this: <code>mainWindow.id</code> And it'll be something like <code>1</code> or <code>2</code> depending on how many windows were already open when this window opened.</p>&#xA;&#xA;<p>Also you can get a <code>BrowserWindow</code> from it's id like this:</p>&#xA;&#xA;<pre><code>var myWindow = BrowserWindow.fromId(id);&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/browser-window#browserwindowfromidid"" rel=""nofollow noreferrer""><code>BrowserWindow.fromId</code> Docs.</a></p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/browser-window#winid"" rel=""nofollow noreferrer""><code>window.id</code> Docs.</a></p>&#xA;",6577664,"",,"",,2018-12-21T10:46:01,"","",,1,,,
53703056,2,,53692359,2018-12-10T09:48:29,,1,,"<p>The great thing is that Electron apps can be very similarly developed to normal web applications. This is possibly why you didn't find specific instructions for using Electron with the tools you are used to using.</p>&#xA;&#xA;<p>You should be able to go ahead and use whichever tools you would normally use to generate stubs for calling REST from any web application, and the stubs should work fine when referenced within Electron (as long as they generate in Javascript or Typescript).</p>&#xA;&#xA;<p>Have you tried using Swagger codegen, did you try use the resulting client code API, and did it give you an error? Try posting any specific errors as new questions on Stack Overflow for solutions (or edit this question to be more specific).</p>&#xA;&#xA;<p>Electron is almost like a blank canvas - there is no ""right"" or ""wrong"" way to develop, although there are certainly ""good practises"" and ""bad practises"".</p>&#xA;&#xA;<p>There are definitely concepts that are unique to developing applications within Electron and for this it would be good to couple your development experience with some general Electron reading and learning.</p>&#xA;&#xA;<p>You will very soon run in to ""unique"" Electron concepts such as ""main"" and ""renderer"" and it will be much easier if you have learning material to guide you. There is a lot of material for learning Electron so I won't try make a list here.</p>&#xA;&#xA;<p>Also note that Stack Overflow is more useful when specific errors or minimum examples are provided and you'll probably get better answers that way :-) See: <a href=""https://stackoverflow.com/help/mcve"">https://stackoverflow.com/help/mcve</a> for more info on this.</p>&#xA;",45817,"",,"",,2018-12-10T09:48:29,"","",,2,,,
53754812,2,,53753181,2018-12-13T03:57:32,,1,,<blockquote>&#xA;  <p>Would somebody care to explain to me why I have to wrap webContents.send within another function for it to work properly?</p>&#xA;</blockquote>&#xA;&#xA;<p>It's that if you send a message to the window as soon as it's created it doesn't have time to load the page and if the js that receives it isn't loaded yet nothing will happen. But if you send it when it's loaded (which is what the <code>'did-finish-load'</code> does) then the js ready to receive the event.</p>&#xA;,6577664,"",,"",,2018-12-13T03:57:32,"","",,2,,,
53762459,2,,53738150,2018-12-13T13:00:15,,0,,"<p>The Problem was the app wasn't run from electron itself, my script started the index.html file, not the app!</p>&#xA;",9460996,"",,"",,2018-12-13T13:00:15,"","",,2,,,
53751545,2,,53748070,2018-12-12T21:21:47,,10,,"<p>Problem was with electron plugin. Im using electron-vue repo from github, and there is a plugin used:</p>&#xA;&#xA;<pre><code>export default new Vuex.Store({&#xA;  modules,&#xA;  plugins: [&#xA;    createPersistedState(),&#xA;    createSharedMutations()&#xA;  ],&#xA;  strict: process.env.NODE_ENV !== 'production'&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>createSharedMutations plugin was the problem. After commenting this out, everything works fine:</p>&#xA;&#xA;<pre><code>export default new Vuex.Store({&#xA;  modules,&#xA;  plugins: [&#xA;    createPersistedState()&#xA;  ],&#xA;  strict: process.env.NODE_ENV !== 'production'&#xA;})&#xA;</code></pre>&#xA;",3987354,"",,"",,2018-12-12T21:21:47,"","",,3,,,
53805491,2,,53805415,2018-12-16T19:00:46,,2,,"<p>try:</p>&#xA;&#xA;<pre><code>getPorts() {&#xA;     this.serial.serialPort.list((err, ports) =&gt; {&#xA;       ports.forEach(port =&gt; {&#xA;         this.comPorts.push(port);&#xA;       });&#xA;     });&#xA;   }&#xA;</code></pre>&#xA;",8990367,"",,"",,2018-12-16T19:00:46,"","",,4,,,
53866540,2,,53866219,2018-12-20T10:12:52,,0,,"<p>You can follow the example below:</p>&#xA;&#xA;<p><strong>main.js</strong></p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron')&#xA;const path = require('path')&#xA;const url = require('url')&#xA;&#xA;let mainWindow&#xA;&#xA;function createWindow () {&#xA;  mainWindow = new BrowserWindow({width: 800, height: 600})&#xA;  mainWindow.loadFile('index.html')&#xA;  mainWindow.on('closed', function () {&#xA;    mainWindow = null&#xA;  })&#xA;}&#xA;&#xA;app.on('ready', createWindow)&#xA;&#xA;app.on('window-all-closed', function () {&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;&#xA;app.on('activate', function () {&#xA;  if (mainWindow === null) {&#xA;    createWindow()&#xA;  }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><strong>index.html</strong></p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;meta charset=""UTF-8""&gt;&#xA;    &lt;title&gt;Hello World!&lt;/title&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;button onclick=""myne()""&gt;PRESS ME&lt;/button&gt;&#xA;    &lt;script&gt;&#xA;      require('./renderer.js')&#xA;    &lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>renderer.js</strong></p>&#xA;&#xA;<pre><code>window.myne = function() {&#xA;    document.write(new Date());&#xA;}&#xA;</code></pre>&#xA;",5291422,"",,"",,2018-12-20T10:12:52,"","",,4,,,
53893913,2,,53853632,2018-12-22T07:42:55,,1,,"<p>From what I understand, you want to open a new BrowserWindow in place of the current BrowserWindow base on the clicked item and you want to shorten your code by making a single function that will do the trick.</p>&#xA;&#xA;<p>Your close enough mate.</p>&#xA;&#xA;<p>You actually don't need a conditional statement in your click event but you can if you choose, I notice your using <code>JQuery</code> so this will be your code on element clicked:</p>&#xA;&#xA;<pre><code>&lt;script src=""../js/renderer.js""&gt;&lt;/script&gt; &#xA;&lt;script&gt;window.$ = window.jQuery = require('jquery');&lt;/script&gt;&#xA;&lt;script&gt;&#xA;$('.category a').on('click',function(){&#xA;    const {&#xA;        ipcRenderer&#xA;    } = require('electron');&#xA;    ipcRenderer.send('createBrowserWindow', $(this).attr('href'));&#xA;&#xA;    const remote = require('electron').remote;&#xA;    remote.getCurrentWindow().close();&#xA;});&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>notice that I used the <code>remote</code> function.</p>&#xA;&#xA;<p>here is your <code>main.js</code></p>&#xA;&#xA;<pre><code>const {&#xA;    app,&#xA;    BrowserWindow&#xA;} = electron;&#xA;let {&#xA;    ipcMain&#xA;} = electron;&#xA;let mainWindow;&#xA;&#xA;/*1*/&#xA;var toQuit = true; //very important&#xA;var category = 'window_1'; //default category&#xA;&#xA;/*2*/&#xA;app.on('ready', function () {&#xA;    ""use strict"";&#xA;    createWindow(); //call this function to create a BrowserWindow on its lunch&#xA;});&#xA;&#xA;app.on('closed', function () {&#xA;    ""use strict"";&#xA;    mainWindow = null;&#xA;});&#xA;&#xA;app.on('window-all-closed', function () {&#xA;    ""use strict"";&#xA;    if (process.platform !== 'darwin') {&#xA;        app.quit();&#xA;    }&#xA;});&#xA;&#xA;/*3*/&#xA;function createWindow() {&#xA;    ""use strict"";&#xA;    var height;&#xA;    var width;&#xA;    var address;&#xA;&#xA;    switch (category) {&#xA;        case 'window_1': &#xA;            height = 600; //Initialize size of BrowserWindow&#xA;            width = 400; //Initialize size of BrowserWindow&#xA;            address = '../html/window_1.html'; //Initialize the address or the file location of your HTML&#xA;            break;&#xA;        case 'window_2':&#xA;            height = 600; //Initialize size of BrowserWindow&#xA;            width = 400; //Initialize size of BrowserWindow&#xA;            address = '../html/window_1.html'; //Initialize the address or the file location of your HTML&#xA;            break;&#xA;        case 'window_3':&#xA;            height = 600; //Initialize size of BrowserWindow&#xA;            width = 400; //Initialize size of BrowserWindow&#xA;            address = '../html/window_1.html'; //Initialize the address or the file location of your HTML&#xA;            break;&#xA;        default:&#xA;            break;&#xA;    }&#xA;&#xA;    mainWindow = new BrowserWindow({ &#xA;        height: height, //height and width of BrowserWindow&#xA;        width: width, //height and width of BrowserWindow&#xA;        minHeight: height, //minimum height and width of BrowserWindow, you can remove this if you want&#xA;        minWidth: width, //minimum height and width of BrowserWindow, you can remove this if you want&#xA;        icon: __dirname + iconPath,&#xA;        frame: false,&#xA;        backgroundColor: '#FFF',&#xA;        show: false&#xA;    });&#xA;&#xA;    mainWindow.loadURL(url.format({ &#xA;        pathname: path.join(__dirname, address), //file location of html&#xA;        protocol: 'file',&#xA;        slashes: true&#xA;    }));&#xA;&#xA;    mainWindow.once('ready-to-show', () =&gt; {&#xA;        mainWindow.show(); //we only want to show it when its ready to avoid the FLASH WHITE during lunch of BrowserWindow&#xA;        mainWindow.focus(); //We make sure to focus on it after showing&#xA;    });&#xA;&#xA;    /**The magic start here, **/&#xA;    mainWindow.on('closed', (e) =&gt; {&#xA;        e.preventDefault(); //We have to prevent the closed event from doing it.&#xA;        if(toQuit){ //if the value of toQuit is true, then we want to quit the entire application&#xA;            mainWindow = null;&#xA;            app.exit(); //quit or exit the entire application&#xA;        }else{&#xA;            mainWindow.hide(); //just hide the BrowserWindow and don't quit the entire application&#xA;            toQuit = true;  //reset the value of toQuit to true&#xA;        }&#xA;    });&#xA;}&#xA;&#xA;//call this function from your any Javascript&#xA;ipcMain.on('createBrowserWindow', function (e, cat) {&#xA;    ""use strict"";&#xA;    category = cat; //get the category of window on which we want to show&#xA;    toQuit = false; //set the value to false, meaning we don't want to close the entire application but just hide the current BrowserWindow&#xA;    createWindow(); //call this function over and over again&#xA;}); &#xA;</code></pre>&#xA;&#xA;<p>how it happened:</p>&#xA;&#xA;<ul>&#xA;<li><p>We start a <code>BrowserWindow</code> with the default category which is the <code>window1</code>.</p></li>&#xA;<li><p>From your Javascript, we use <code>ipcMain</code> and <code>ipcRenderer</code> to call the function from your <code>main.js</code> and then we use <code>remote</code> to close the <code>BrowserWindow</code> but during the closed event we prevent it from quitting the BrowserWindow, instead we hide it.  </p></li>&#xA;</ul>&#xA;&#xA;<p>Hope it helps.</p>&#xA;",3721822,"",,"",,2018-12-22T07:42:55,"","",,4,,,
53680009,2,,53679217,2018-12-08T06:03:57,,1,,"<h1>Short answer :</h1>&#xA;&#xA;<ol>&#xA;<li><p>Install @types/node</p>&#xA;&#xA;<pre><code>npm install --save-dev @types/node&#xA;</code></pre></li>&#xA;<li><p>Modify your tsconfig.json like so-</p>&#xA;&#xA;<pre><code>{&#xA;  ""compileOnSave"": false,&#xA;   .....&#xA;      ""compilerOptions"": {&#xA;      ""allowSyntheticDefaultImports"": true,&#xA;      ""moduleResolution"": ""node"",&#xA;      ""types"": [&#xA;          ""node""&#xA;       ]&#xA;   }&#xA; } &#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;  <p>Take note of <code>types</code> and <code>allowSyntheticDefaultImports</code> key.</p>&#xA;</blockquote>&#xA;&#xA;<ol start=""3"">&#xA;<li><p>Add this to your polyfills.ts</p>&#xA;&#xA;<p><code>(window as any).global = window;</code></p></li>&#xA;<li><p>Require serialport</p>&#xA;&#xA;<pre><code>import { Component } from '@angular/core';&#xA;import { } from 'electron';&#xA;import Serialport from 'serialport';&#xA;&#xA;@Component({&#xA;  selector: 'app-root',&#xA;  templateUrl: './app.component.html',&#xA;  styleUrls: ['./app.component.scss']&#xA;})&#xA;export class AppComponent {&#xA;&#xA;  constructor() {&#xA;    //check if platform is electron&#xA;    let isElectron: boolean = window &amp;&amp; window['process'] &amp;&amp; &#xA;       window['process'].type;&#xA;&#xA;   if (isElectron) {&#xA;      let serialport: typeof Serialport = window['require']('serialport');&#xA;      let app: Electron.App = window['require']('electron').remote;&#xA;      console.log(serialport, app, window['process']);&#xA;   }&#xA; }&#xA;}&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;  <p>Note : You do not directly <code>require</code> or <code>import</code> native dependencies in angular. Instead we use window['require'] to require the module in our app. The <code>import</code> statement above is just used to provide for typings information to typescript.</p>&#xA;</blockquote>&#xA;&#xA;<h1>Long answer :</h1>&#xA;&#xA;<p>See my comment <a href=""https://github.com/angular/angular-cli/issues/9827#issuecomment-435350839"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;",9639020,"",,"",,2018-12-08T06:03:57,"","",,5,,,
53712029,2,,53711304,2018-12-10T19:03:54,,0,,"<p>V8 does not do any networking requests and has no networking code, so there is nothing to intercept there. You'll have to look at the respective embedder (i.e. Electron/Node).</p>&#xA;",6036428,"",,"",,2018-12-10T19:03:54,"","",,5,,,
53719848,2,,53719012,2018-12-11T08:10:16,,0,,"<p>Here is a version of <code>UserPreferences</code> which will be more natural to use as you write your code. You can create it like you see in <code>isFirstTime</code>.</p>&#xA;&#xA;<pre><code>console.debug(userPreferences[accountId]);&#xA;userPreferences[accountId] = 1;&#xA;</code></pre>&#xA;&#xA;<p>This is preferred because there is no reason for a developer not to treat <code>UserPreferences</code> as an object. Another good idea would be separating the writing to the file into a separate <code>flush</code> method, in case you are updating preferences often.</p>&#xA;&#xA;<pre><code>const electron = require(""electron"");&#xA;const fs = require(""fs"");&#xA;const path = require(""path"");&#xA;&#xA;class UserPreferences {&#xA;    constructor(defaultPrefs, pathToPrefs) {&#xA;        const app = electron.app || electron.remote.app;&#xA;        this.pathToPrefs = path.join(app.getPath(""userData""), pathToPrefs + "".json"");&#xA;&#xA;        try {&#xA;            this.store = require(this.pathToPrefs);&#xA;        }&#xA;        catch (error) {&#xA;            this.store = defaultPrefs;&#xA;        }&#xA;        return new Proxy(this, {&#xA;            get(target, property) {&#xA;                return target.store[property];&#xA;            },&#xA;            set(target, property, value) {&#xA;                target.store[property] = value;&#xA;                fs.writeFileSync(target.pathToPrefs, JSON.stringify(target.store));&#xA;            }&#xA;        });&#xA;    }&#xA;}&#xA;&#xA;module.exports = UserPreferences;&#xA;</code></pre>&#xA;&#xA;<p>Here is a pure version of <code>isFirstTime</code>, that should do what you want, while maintaining a more robust method of checking for <code>isFirstTime</code>. The check can also be changed so check whether <code>lastSignIn</code> is equal to <code>createdAt</code> (with appropriate defaults, of course).</p>&#xA;&#xA;<pre><code>function isFirstTime() {&#xA;    const account = new UserPreferences({&#xA;        user: {&#xA;            accountId: 0,&#xA;            createdAt: new Date(),&#xA;            lastSignIn: null,&#xA;            profileId: """"&#xA;        }&#xA;    }, ""fipes-user-preferences"");&#xA;&#xA;    const {lastSignIn} = account;&#xA;&#xA;    return lastSignIn === null;&#xA;}&#xA;</code></pre>&#xA;",7267809,"",7267809,"",2018-12-13T04:46:10,2018-12-13T04:46:10,"","",,6,,,
53810095,2,,53673319,2018-12-17T06:43:45,,5,,"<p>One way of doing this is to overwrite the <code>console.log</code> with your custom implementation, so whenever any part of the code calls the <code>console.log</code> the call will be intercepted by your custom function where you can log the message to your remote server using some API calls.</p>&#xA;&#xA;<p>Once you have logged your message you can call the original <code>console.log</code> method.</p>&#xA;&#xA;<p>Following example shows a custom implementation of <code>console.log</code> method.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var orgLog = console.log;&#xD;&#xA;&#xD;&#xA;console.log = function(message) {&#xD;&#xA;  alert(""Intercepted -&gt; "" + message); //Call Remote API to log the object.&#xD;&#xA;  //Invoke the original console.log&#xD;&#xA;  return orgLog(message);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let a = {&#xD;&#xA;  foo: ""bar""&#xD;&#xA;};&#xD;&#xA;console.log(a);</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",297322,"",297322,"",2018-12-19T11:14:24,2018-12-19T11:14:24,"","",,6,,,
53704965,2,,53675260,2018-12-10T11:42:18,,0,,"<p>It seems that you mix commonjs modules with ES modules by the wrong way.</p>&#xA;&#xA;<p>There are a lot of modules (include node built-in) which have no <a href=""https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export"" rel=""nofollow noreferrer"">default export</a>. To <a href=""https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#Import_an_entire_module&#39;s_contents"" rel=""nofollow noreferrer"">import</a> such a module you need to use <code>* as moduleAlias</code> or <code>{ exportedField }</code> in your import statement. Try to rewrite your code by this way:</p>&#xA;&#xA;<pre><code>import * as fs from 'fs'&#xA;import * as typeorm from 'typeorm'&#xA;import { Public } from '../entity/Public'&#xA;&#xA;export default class ConnectionManager&#xA;{&#xA;    constructor(){}&#xA;&#xA;    getConnection(type, name, options) {&#xA;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Because this class is <a href=""https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export"" rel=""nofollow noreferrer"">exported</a> as a default value, you can use the following construction to <a href=""https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#Importing_defaults"" rel=""nofollow noreferrer"">import</a> it as a default field, where ConnectionManager is an alias for the current scope:</p>&#xA;&#xA;<pre><code>import ConnectionManager from '../service/connectionManager'&#xA;</code></pre>&#xA;",1193884,"",1193884,"",2018-12-14T03:24:05,2018-12-14T03:24:05,"","",,7,,,
53841373,2,,53841162,2018-12-18T21:30:09,,1,,"<p>You should import the <code>fs</code> module into your code.&#xA;If you're running on the <code>main</code>process, then do a simple <code>const fs = require('fs');</code> but if you're on the renderer process then run <code>const fs = require('electron').remote.require('fs')</code></p>&#xA;&#xA;<p>Then with the <code>fs</code> module you can run a simple exists method on the file:</p>&#xA;&#xA;<pre><code>if (fs.existsSync(`~/.config/myApp/bookmarks.json`)) {&#xA;  console.log('exists')&#xA;} else {&#xA;  console.log('does not')&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Although you really should check for this asynchronously:</p>&#xA;&#xA;<pre><code>fs.access(`~/.config/myApp/bookmarks.json`, (err) =&gt; {&#xA;  if (err) {&#xA;      console.log('does not exist')&#xA;    } else {&#xA;      console.log('exists')&#xA;    }&#xA;})&#xA;</code></pre>&#xA;",9274408,"",,"",,2018-12-18T21:30:09,"","",,8,,,
13793993,2,,13783542,2012-12-10T01:58:10,,5,,"<p>The answer to this question was discussed here: <a href=""https://groups.google.com/d/topic/node-webkit/IwGzluFC9iU/discussion"" rel=""nofollow"">https://groups.google.com/d/topic/node-webkit/IwGzluFC9iU/discussion</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>On Windows, use ""process.execPath"" to see the path of the executable that launched it. Then work from there, removing the executable's filename from the path to get the folder's path (assuming your app's .nw is relative to the executable or is combined with it).</p>&#xA;  &#xA;  <p>This works for me whether it is running with the zipped 'app.nw' or where 'nw.exe' and 'app.nw' are combined into one executable file (app.exe).</p>&#xA;</blockquote>&#xA;",180197,"",253683,"",2014-10-10T04:05:30,2014-10-10T04:05:30,"","",,4,,,
60127592,2,,60122197,2020-02-08T14:12:12,,0,,"<p>I solve the problem by rewriting the 'build.js'. </p>&#xA;&#xA;<p>I got <a href=""https://github.com/electron/electron-packager/blob/master/docs/api.md"" rel=""nofollow noreferrer"">API Documentation</a> of electron packager and there I found that some options I need the specify in my build script. Among these options win32metadata.companyName, name, and buildVersion are mandatory, but by default, the values should set from 'package.json'.&#xA;The 'win32metadata.companyName' defaults to 'author' name, 'name' defaults to 'productName' and 'buildVersion' defaults to 'version' from package.json. But anyhow the program can not get these options from 'package.json'. So, I just specify these options in 'build.js'. and it works. My final 'build.js' script is:</p>&#xA;&#xA;<pre><code>&#xA;const packager = require('electron-packager');&#xA;const rebuild = require('electron-rebuild');&#xA;&#xA;packager({&#xA;    name: ""project-name"",&#xA;    buildPath: __dirname,&#xA;    electronVersion: '7.1.2',&#xA;    version: '1.0.1',&#xA;    buildVersion: '1.0.1',&#xA;    dir: '../output',&#xA;    overwrite: true,&#xA;    asar: true,&#xA;    platform: 'win32',&#xA;    arch: 'ia32',&#xA;    icon: '/src/img/icon.ico',&#xA;    prune: true,&#xA;    appVersion: ""1.0.1"",&#xA;    win32metadata: {&#xA;        CompanyName: ""Takiuddin Ahmed""&#xA;    },&#xA;    afterCopy: [(buildPath, electronVersion, platform, arch, callback) =&gt; {&#xA;        rebuild({ buildPath, electronVersion, arch })&#xA;            .then(() =&gt; callback())&#xA;            .catch((error) =&gt; callback(error));&#xA;    }],&#xA;});&#xA;</code></pre>&#xA;",6152835,"",,"",,2020-02-08T14:12:12,"","",,0,,,
60143128,2,,60124479,2020-02-10T01:50:45,,1,,"<p>using <a href=""https://capacitor.ionicframework.com/docs/getting-started"" rel=""nofollow noreferrer"">Capacitor</a> for this is far easier, <a href=""https://capacitor.ionicframework.com/docs/electron"" rel=""nofollow noreferrer"">just follow this document</a>.</p>&#xA;&#xA;<p>Then add <code>electron-builder</code> as dev to the <code>electron</code> project added by capacitor. Add these scripts to package your app, and you're good to go.</p>&#xA;&#xA;<pre><code>{&#xA;  ""scripts"": {&#xA;    ""pack"": ""electron-builder --dir"",&#xA;    ""dist"": ""electron-builder""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",206466,"",,"",,2020-02-10T01:50:45,"","",,0,,,
60169429,2,,57005561,2020-02-11T13:01:10,,0,,"<p>Based on the suggestion provided by @Richard Zhang, I tried out the template in Notifications Visualizer.</p>&#xA;&#xA;<p>It produced the same messed up UI that I see happening through NodeRT. It seems that the <code>incomingCall</code> scenario mandatorily requires the template to provide the two (or three, I don't remember exactly) buttons right after the body. And then a final row with Answer and Decline button.</p>&#xA;&#xA;<p>It would have been really cool to be able to use that scenario, however, I had to go with the regular toast notification. </p>&#xA;",6238914,"",,"",,2020-02-11T13:01:10,"","",,0,,,
60170487,2,,56564071,2020-02-11T13:55:01,,0,,<p>Doesn't look to be possible in the current version (v8)</p>&#xA;,310021,"",,"",,2020-02-11T13:55:01,"","",,0,,,
60172322,2,,60171775,2020-02-11T15:29:13,,2,,"<p>I'd suggest passing in a parent window</p>&#xA;&#xA;<p>From the <a href=""https://www.electronjs.org/docs/api/dialog#dialogshowmessageboxsyncbrowserwindow-options"" rel=""nofollow noreferrer"">docs</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>The browserWindow argument allows the dialog to attach itself to a&#xA;  parent window, making it modal.</p>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code> const iconPath = upath.toUnix(upath.join(__dirname, ""app"", ""assets"", ""icon.png""));&#xA;    const dialogIcon = nativeImage.createFromPath(iconPath);&#xA;&#xA;    var options = {&#xA;        type: 'question',&#xA;        buttons: ['&amp;Yes', '&amp;No'],&#xA;        title: 'Confirm Quit',&#xA;        icon: dialogIcon,&#xA;        normalizeAccessKeys: true,&#xA;        message: 'Do you really want to close the application?'&#xA;    };&#xA;&#xA;    const win = BrowserWindow.getFocusedWindow();&#xA;    dialog.showMessageBox(win, options)&#xA;        .then((choice) =&gt; {&#xA;            if (choice.response === 0) {&#xA;                quitApplication();&#xA;            }&#xA;        }).catch(err =&gt; {&#xA;            console.log('ERROR', err);&#xA;        });&#xA;</code></pre>&#xA;",840992,"",,"",,2020-02-11T15:29:13,"","",,0,,,
60192729,2,,60181481,2020-02-12T16:17:53,,1,,"<p>The <a href=""https://electronjs.org/docs/api/dialog"" rel=""nofollow noreferrer"">dialog API</a> has been modified with the release of Electron 6.</p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options"" rel=""nofollow noreferrer""><code>dialog.showOpenDialog()</code></a> and other dialog functions now return promises and no longer take callback functions. There also are synchronous counterparts which return the selection result in a blocking fashion, e.g. <a href=""https://electronjs.org/docs/api/dialog#dialogshowopendialogsyncbrowserwindow-options"" rel=""nofollow noreferrer""><code>dialog.showOpenDialogSync()</code></a>.</p>&#xA;&#xA;<p><strong>Example usage</strong> (in renderer process)</p>&#xA;&#xA;<pre><code>const remote = require(""electron"").remote&#xA;const dialog = remote.dialog&#xA;&#xA;dialog.showOpenDialog(remote.getCurrentWindow(), {&#xA;    properties: [""openFile"", ""multiSelections""]&#xA;}).then(result =&gt; {&#xA;    if (result.canceled === false) {&#xA;        console.log(""Selected file paths:"")&#xA;        console.log(result.filePaths)&#xA;    }&#xA;}).catch(err =&gt; {&#xA;    console.log(err)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>As of February 2020, the <a href=""http://%20https://github.com/electron/electron-api-demos"" rel=""nofollow noreferrer""><code>electron-api-demos</code></a> use Electron 5. That is why their dialog calling code still uses the old form.</p>&#xA;",1335237,"",,"",,2020-02-12T16:17:53,"","",,0,,,
60195480,2,,60193118,2020-02-12T19:19:36,,0,,"<p>After some test, it was my connection the problem, I switched on my 4G and now it work perfectly.</p>&#xA;",12576717,"",,"",,2020-02-12T19:19:36,"","",,0,,,
60197965,2,,59254682,2020-02-12T22:40:33,,0,,"<p>I don't have an actual answer to this problem, but it was fixed when I upgraded to Electron 7.1.9 as I commented in the bug report <a href=""https://github.com/electron/electron/issues/21544#issuecomment-577242668"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/21544#issuecomment-577242668</a></p>&#xA;&#xA;<p>During the upgrade some process took an unusually long time to complete but when it did my application ran successfully. I was also able to downgrade to a previous version of Electron and my application still ran, even when using a version that was failing earlier.</p>&#xA;",843459,"",,"",,2020-02-12T22:40:33,"","",,0,,,
60208295,2,,60207888,2020-02-13T12:50:35,,0,,"<p>Many thanks to Andrea Franchini's answer for putting me on the right tracks but it appears that ready-to-show is only sent once however after some research i found this solution which worked for me:</p>&#xA;&#xA;<pre><code>function logout(authFail) {&#xA;  win.loadFile(path.join(__dirname, 'src','login.html'));&#xA;  currentusername = null&#xA;  currentpassword = null&#xA;  win.webContents.on('did-finish-load', () =&gt;{&#xA;    if (authFail == true) {&#xA;      dialog.showErrorBox(""Error"",""Unauthorised Access!"")&#xA;    }&#xA;  })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Reference:&#xA;<a href=""https://stackoverflow.com/a/50980097/12887221"">https://stackoverflow.com/a/50980097/12887221</a></p>&#xA;",12887221,"",,"",,2020-02-13T12:50:35,"","",,0,,,
60212808,2,,60105487,2020-02-13T16:46:25,,1,,"<p>So in order to use a <code>nativeImage</code> with the <code>dialog</code> module in a <code>render</code> process, the <code>nativeImage</code> needs to be accessed through <code>remote</code> even though <code>nativeImage</code> is available to both <code>main</code> and <code>render</code> contexts:</p>&#xA;&#xA;<pre><code>const { ipcRenderer, remote } = require('electron');&#xA;</code></pre>&#xA;&#xA;<p><strong>Wrong:</strong>   </p>&#xA;&#xA;<pre><code>const { ipcRenderer, remote, nativeImage } = require('electron');&#xA;</code></pre>&#xA;&#xA;<p><strong>Right:</strong></p>&#xA;&#xA;<pre><code>const { BrowserWindow, dialog, nativeImage } = require('electron').remote;&#xA;</code></pre>&#xA;",840992,"",840992,"",2020-02-13T19:22:24,2020-02-13T19:22:24,"","",,0,,,
60213837,2,,60210550,2020-02-13T17:53:49,,0,,"<p>After multiple hours of pulling my hair out, I managed to get a working solution I don't know why this fixes it but if anyone wants to alter this answer to explain why this works go ahead.</p>&#xA;&#xA;<p>But I changed my code from this:</p>&#xA;&#xA;<pre><code>const jQuery = require('jQuery');&#xA;const $ = jQuery.noConflict();&#xA;</code></pre>&#xA;&#xA;<p>To this:</p>&#xA;&#xA;<pre><code>global.jQuery = require('jquery');&#xA;global.$ = jQuery.noConflict();&#xA;</code></pre>&#xA;",12887221,"",,"",,2020-02-13T17:53:49,"","",,0,,,
60217237,2,,60191573,2020-02-13T22:10:22,,0,,"<p>Ok so i finally solved my problem. This <a href=""https://github.com/electron-userland/electron-installer-debian/issues/187"" rel=""nofollow noreferrer"">github topic</a> put me on the way saying that the problem was not at the debian installer creation but in the way the application was packaged.</p>&#xA;&#xA;<p>After that i realized that instead of using <strong>electron-packager</strong>, run <code>npm run electron:build</code> was also creating a package of my application named <strong>linux-unpacked</strong> in the <strong>dist_electron</strong> folder. When i tryed to use it as package to create my installer, <strong>electron-installer-debian</strong> specified me that some files where missing, LICENSE and version (<strong><em>version</em></strong> <em>contain the electron version. I don't know if that is a rule but that is what mine contain</em>). </p>&#xA;&#xA;<p>So i just added them and my installer was created and my software was finally able to be launch on the computer.</p>&#xA;",11126403,"",11126403,"",2020-02-13T22:18:18,2020-02-13T22:18:18,"","",,0,,,
60223799,2,,60149740,2020-02-14T09:48:14,,0,,"<p>Finally got it working, in case if this helps anyone, if the machine you are recording is on a power saving mode, the audio/video not in sync issue can be resolved by enabling performance mode from control panel </p>&#xA;",10288163,"",,"",,2020-02-14T09:48:14,"","",,0,,,
60224946,2,,60091130,2020-02-14T10:55:58,,0,,"<p>I found a (albeit a bit hack'ish imo) solution which I will use for now.</p>&#xA;&#xA;<p>I simply added ""--c.extraMetadata.productName=dev-"" (and test instead of dev for the test build) to the build script, and then in my code i would check which environment that had been prepended to the build, and switch the URL accordingly. The good thing about this approach is that now I can also see which environment the .exe file is pointing at!</p>&#xA;&#xA;<p>I'm still convinced that the ""correct"" way is having multiple YAML files, like Rhayene suggests, but the approach above just seems much easier and more directly controlled.</p>&#xA;",1824045,"",,"",,2020-02-14T10:55:58,"","",,0,,,
60235682,2,,60231688,2020-02-15T03:11:17,,1,,"<p>Citing from the corresponding <a href=""https://www.electronjs.org/docs/api/app#appsetasdefaultprotocolclientprotocol-path-args"" rel=""nofollow noreferrer"">docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Once registered, all links with your-protocol:// will be opened with&#xA;  the current executable. The whole link, including protocol, will be&#xA;  passed to your application as a parameter.</p>&#xA;</blockquote>&#xA;&#xA;<p>That means that a new instance of your app will be launched whenever a URL of that type is requested.</p>&#xA;&#xA;<p>You should therefore check for arguments on app startup and if there is one, you can handle it:</p>&#xA;&#xA;<pre><code>if (process.argv.length &gt;= 3) {&#xA;    const url_to_open = process.argv[2];&#xA;    console.log(""Received: "" + url_to_open);&#xA;&#xA;    // should print:&#xA;    // Received: masslinker://123/456&#xA;    // now take URL apart using string operations ..&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The exact number of parameters may change depending on how you launch your app and/or when you go into production. You may work around that by checking if the <em>last</em> argument matches your protocol prefix.</p>&#xA;&#xA;<p>Note that if you don't take further measures, this will open a new instance of your app for each URL you open. You can counteract that using <code>app.requestSingleInstanceLock()</code> and the <code>second-instance</code> event. The event handler will get as second parameter all the command line parameters of the new instance, so that you can handle them in the first instance.</p>&#xA;&#xA;<p>Further note that setting up a protocol handler seems to be quite dependent on the operating system and may be part of the <em>installation procedure</em> of your app. However, once the handler is set up, processing incoming calls should work as above regardless of the operating system.</p>&#xA;",1335237,"",,"",,2020-02-15T03:11:17,"","",,0,,,
60237100,2,,60236676,2020-02-15T08:31:54,,0,,"<p>The information given in the post helped me ( <a href=""https://stackoverflow.com/questions/54689968/angular-application-build-in-electron-print-a-div-shows-blank-window"">angular application build in electron print a div shows blank window</a> ).</p>&#xA;&#xA;<p>The answer is : in main.ts for electron, need to add &#xA;nativeWindowOpen: true  as below.</p>&#xA;&#xA;<pre><code>win = new BrowserWindow({&#xA;    x: 0,&#xA;    y: 0,&#xA;    width: size.width,&#xA;    height: size.height,&#xA;    webPreferences: {&#xA;      nodeIntegration: true,&#xA;      nativeWindowOpen: true, //**** add this**&#xA;      allowRunningInsecureContent: (serve) ? true : false,&#xA;    },&#xA;  });&#xA;</code></pre>&#xA;",9336761,"",,"",,2020-02-15T08:31:54,"","",,0,,,
60240061,2,,60220814,2020-02-15T15:14:45,,1,,"<p>Have you installed .NET 4.7.1 or later on the Windows 7 machine?</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/19569"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/19569</a></p>&#xA;",1824045,"",,"",,2020-02-15T15:14:45,"","",,0,,,
60258124,2,,60170872,2020-02-17T08:01:58,,0,,"<p>Finally I did it in <em>build/installer.nsh</em>:</p>&#xA;&#xA;<pre><code>!macro RunApp&#xA;  ${StdUtils.ExecShellAsUser} $0 ""$launchLink"" ""open"" """"&#xA;!macroend&#xA;&#xA;!macro customInstall&#xA;    !insertmacro RunApp&#xA;    !insertmacro quitSuccess&#xA;!macroend&#xA;</code></pre>&#xA;",9203252,"",,"",,2020-02-17T08:01:58,"","",,0,,,
60269985,2,,60175346,2020-02-17T20:31:57,,0,,"<p>Actually, after a quick lookup, I've found an answer to this.</p>&#xA;&#xA;<p><a href=""https://github.com/SimulatedGREG/electron-vue/issues/214"" rel=""nofollow noreferrer"">https://github.com/SimulatedGREG/electron-vue/issues/214</a></p>&#xA;&#xA;<p>Here, in the case of electron-vue, this can be used to easily get a console while just entering a manual command on your keyboard !</p>&#xA;",12453573,"",,"",,2020-02-17T20:31:57,"","",,0,,,
60274965,2,,60274470,2020-02-18T06:26:43,,0,,"<p>add ""view-source:"" before your URL, It will provide you all source code of any website.</p>&#xA;",12529204,"",,"",,2020-02-18T06:26:43,"","",,0,,,
60275418,2,,60266241,2020-02-18T07:00:08,,0,,"<p>After muiltple trial and error, The following changes worked for me</p>&#xA;&#xA;<p>1) index.html</p>&#xA;&#xA;<pre><code>`&lt;base href=""/""&gt;` &#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>&lt;base href=""./""&gt;&#xA;</code></pre>&#xA;&#xA;<p>2) in main.ts, change the directory name dist to something else</p>&#xA;&#xA;<p>from :</p>&#xA;&#xA;<pre><code>win.loadURL(url.format({&#xA;  pathname: path.join(__dirname, 'dist/index.html'),     &#xA;  protocol: 'file:',&#xA;  slashes: true&#xA;}));&#xA;</code></pre>&#xA;&#xA;<p>To:</p>&#xA;&#xA;<pre><code>win.loadURL(url.format({&#xA;  pathname: path.join(__dirname, 'angular_build/index.html'),     &#xA;  protocol: 'file:',&#xA;  slashes: true&#xA;}));&#xA;</code></pre>&#xA;&#xA;<p>3) Angular.js</p>&#xA;&#xA;<pre><code>""outputPath"": ""dist/"",&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>""outputPath"": ""angular_build/"",&#xA;</code></pre>&#xA;&#xA;<p>Although I have seen suggesions to change step 2 &amp; 3 , I was quite skepitcal.&#xA;Looks like dist directlory some how does not work and have to change to some thing like as mentioned above</p>&#xA;",9336761,"",,"",,2020-02-18T07:00:08,"","",,0,,,
60280540,2,,60208594,2020-02-18T12:05:19,,1,,"<p>You have to use numsub instead of '-' directly. </p>&#xA;&#xA;<p>like <code>globalShortcut.register(""CmdOrCtrl+numsub"", () =&gt; false);</code></p>&#xA;&#xA;<p>ref : <a href=""https://www.electronjs.org/docs/api/accelerator"" rel=""nofollow noreferrer"">https://www.electronjs.org/docs/api/accelerator</a></p>&#xA;",3502805,"",,"",,2020-02-18T12:05:19,"","",,0,,,
60095022,2,,60018146,2020-02-06T12:26:56,,2,,"<p>We've faced similar requirements in past and that's why I created a blog post about translations in Angular as a code (without libs just your code and project architecture).</p>&#xA;&#xA;<p><a href=""https://medium.com/angular-in-depth/angular-typed-translations-29353f0a60bc"" rel=""nofollow noreferrer"">https://medium.com/angular-in-depth/angular-typed-translations-29353f0a60bc</a></p>&#xA;&#xA;<p>To answer all of the challenges:</p>&#xA;&#xA;<p><strong>CDN</strong>:</p>&#xA;&#xA;<ul>&#xA;<li>language mutation is on the route level (not domain)&#xA;&#xA;<ul>&#xA;<li><code>domain.com/language/page</code></li>&#xA;</ul></li>&#xA;<li><code>domain.com</code> may include some redirect logic&#xA;&#xA;<ul>&#xA;<li>for example, redirect to default language or determine it (we have a cloud function there that does that based on the browser request language preferences</li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p><strong>Electron</strong>:</p>&#xA;&#xA;<ul>&#xA;<li>Translations are present on the build time</li>&#xA;<li>Modules containing different i18n data are shipped with the app and lazyloaded when needed (but available for the electron instantly as it is bundled together)</li>&#xA;</ul>&#xA;&#xA;<p><strong>Domain</strong>:</p>&#xA;&#xA;<ul>&#xA;<li>again, language is switched using ""route"" not domain&#xA;&#xA;<ul>&#xA;<li>example: <code>domain.com/en/contact</code> for English <code>domain.com/cs/contact</code> for Czech</li>&#xA;</ul></li>&#xA;<li>it is great not only because of cors but also because of SEO and Crawlers&#xA;&#xA;<ul>&#xA;<li>the most relevant part of the route comes first (language)</li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p><strong>Google Play Store</strong>:</p>&#xA;&#xA;<ul>&#xA;<li>same as with electron, it is bundled together</li>&#xA;<li>uses routing not domain</li>&#xA;</ul>&#xA;&#xA;<hr>&#xA;&#xA;<p>Even if you decide not going with the ""route"" based switching, you may store the translations in your state management or wrapping service and access them as you would do with any other ""async"" data in the template via <code>async</code> pipe</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><em>3rd Party</em>:&#xA;Some other solutions involving 3rd party libs are ngx-translate (deprecated) and Transloco</p>&#xA;",3833314,"",,"",,2020-02-06T12:26:56,"","",,1,,,
60196581,2,,60196006,2020-02-12T20:45:13,,1,,"<p>As usual, reading the documentation is probably the first and best thing to do...</p>&#xA;&#xA;<p>The webContents method <a href=""https://www.electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture"" rel=""nofollow noreferrer"">contents.executeJavaScript</a> is expecting a <em>string</em> of code as first argument...</p>&#xA;&#xA;<p>This could do the trick:</p>&#xA;&#xA;<pre><code>newRoom.webContents.executeJavaScript(&#xA;        'client.emit(""authentication"", { username: ""bob"", password: ""1234"" })'&#xA;      );&#xA;</code></pre>&#xA;&#xA;<p>or:</p>&#xA;&#xA;<pre><code>newRoom.webContents.executeJavaScript(&#xA;        `client.emit(""authentication"", {&#xA;          username: ""bob"",&#xA;          password: ""1234""&#xA;        })`&#xA;      );&#xA;</code></pre>&#xA;&#xA;<p>However, the original question mentions that ""the code executes fine"", which would mean that it doesn't even need to be passed to the renderer process to get executed...</p>&#xA;&#xA;<pre><code>client.emit(""authentication"", {&#xA;              username: ""bob"",&#xA;              password: ""1234""&#xA;            });&#xA;</code></pre>&#xA;",12888321,"",12888321,"",2020-02-12T21:59:38,2020-02-12T21:59:38,"","",,1,,,
60201916,2,,60200745,2020-02-13T06:45:35,,0,,"<pre><code>win = new BrowserWindow({&#xA;    webPreferences: {&#xA;      nodeIntegration: true&#xA;    }&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>Remove <code>webPreferences</code> from <code>win.loadURL</code> and add to <code>BrowserWindow</code> option. The below is the sample code to enable the Node api in <code>BrowserWindow</code></p>&#xA;&#xA;<pre><code>// Create the browser window.&#xA;  mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    webPreferences: {&#xA;      nodeIntegration: true&#xA;    }&#xA;  })&#xA;&#xA;  // and load the index.html of the app.&#xA;  mainWindow.loadFile('index.html')&#xA;</code></pre>&#xA;",10909844,"",10909844,"",2020-02-13T06:59:51,2020-02-13T06:59:51,"","",,1,,,
60211332,2,,60204100,2020-02-13T15:30:48,,2,,"<p>Use a package like electron-store</p>&#xA;&#xA;<p>It's less than &lt;100 lines of code and only has a few dependencies.</p>&#xA;&#xA;<p><a href=""https://github.com/sindresorhus/electron-store"" rel=""nofollow noreferrer"">https://github.com/sindresorhus/electron-store</a></p>&#xA;",758038,"",,"",,2020-02-13T15:30:48,"","",,1,,,
60227981,2,,60227586,2020-02-14T14:11:18,,2,,"<pre><code>let mainWindow = new BrowserWindow(&#xA;  {&#xA;    width: 800,&#xA;    height: 600,&#xA;    webPreferences:{&#xA;      nodeIntegration:true&#xA;    }&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>Please add nodeIntegration when you are creating the browser window.&#xA;You are using the Node API at your renderer. When you don't enable nodeIntegration then you won't be able to use any node modules at your renderer js.</p>&#xA;&#xA;<p>To confirm this you can see this error message from your app debug console.</p>&#xA;&#xA;<pre><code>mainWindow.webContents.on('did-finish-load', () =&gt; {&#xA;    // open dev tools&#xA;    mainWindow.webContents.openDevTools()&#xA;    mainWindow.webContents.send(""from-main"", ""teste"");&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p><code>Uncaught ReferenceError: require is not defined</code></p>&#xA;&#xA;<p>This means you didn't enable the nodeIntegration when you are creating the browserWindow.</p>&#xA;",10909844,"",,"",,2020-02-14T14:11:18,"","",,1,,,
60228998,2,,60228725,2020-02-14T15:15:48,,1,,"<p>Your iframe is expecting one path to a file, you're giving him reference to one folder.</p>&#xA;&#xA;<p>Try something more like this&#xA;<code>&lt;iframe id=""preview-section-iframe"" title=""Banner preview"" width=""300"" height=""600"" src=""G:\BANNERS\300x600\html\yourfile.extention""&gt;<br>&#xA;&lt;/iframe&gt;</code></p>&#xA;",12899163,"",,"",,2020-02-14T15:15:48,"","",,1,,,
60240101,2,,60170653,2020-02-15T15:18:49,,2,,"<p>The installer will indeed install in %appdata% if you have set build/nsis/perMachine to false (which is default) in your package.json. If you set perMachine to true, the program will be installed in program files, and furthermore if you set oneClick to false, you allow the user to choose where to install.</p>&#xA;",1824045,"",,"",,2020-02-15T15:18:49,"","",,1,,,
60247552,2,,60247493,2020-02-16T10:30:44,,2,,"<p>The <code>opendirSync</code> method was added in node version: <code>v12.12.0</code>, You have to upgrade the node version.</p>&#xA;&#xA;<p><strong>History:</strong></p>&#xA;&#xA;<pre><code>Version Changes&#xA;v13.1.0  The bufferSize option was introduced.&#xA;&#xA;v12.12.0 Added in: v12.12.0 &#xA;&#xA;</code></pre>&#xA;&#xA;<p>You can read more about this <a href=""https://nodejs.org/api/fs.html#fs_fs_opendirsync_path_options"" rel=""nofollow noreferrer"">here</a></p>&#xA;",4148902,"",,"",,2020-02-16T10:30:44,"","",,1,,,
60270391,2,,60258352,2020-02-17T21:04:56,,1,,"<p>@Vasniktel Technically it could be possible to record the video client side as there are a number of WebRTC examples that record locally on the client, however this is not natvie to openvidu. However recording on electronjs is... </p>&#xA;&#xA;<p>github.com/hokein/electron-screen-recorder </p>&#xA;&#xA;<p>tutorialspoint.com/electron/… You could integrate recording separately along side your openvidu app.</p>&#xA;&#xA;<p>The main difference here is that you want to record an incoming call and while you likely won't be able to just write the incoming webrtc data you should be able to record the area of the app (canvas) where the video player is rendered.  You will be re-encoding the decoded rendered video stream, but it shouldn't be too much of a hit performance wise.</p>&#xA;",12905479,"",,"",,2020-02-17T21:04:56,"","",,1,,,
60244499,2,,60244363,2020-02-16T00:46:35,,1,,"<p>You create your own https server (with appropriate certificates) and then bind socket.io to that server.   Every socket.io connection starts with an http(s) request so that's why you need that kind of server.</p>&#xA;&#xA;<pre><code>const https = require('https');&#xA;&#xA;const options = {&#xA;  key: fs.readFileSync('somePath/agent2-key.pem'),&#xA;  cert: fs.readFileSync('somePath/agent2-cert.pem')&#xA;};&#xA;const server = https.createServer(options);&#xA;const io = require('socket.io')(server);&#xA;server.listen(443);&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>I also heard I need a certification thing, how to I get that?</p>&#xA;</blockquote>&#xA;&#xA;<p>There are lots and lots of sources.  You can start here: <a href=""https://letsencrypt.org/"" rel=""nofollow noreferrer"">https://letsencrypt.org/</a>. You will have to bind a certificate to a particular domain as that's part of the security that it delivers.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Then, in the client, you would connect using an <code>https</code> URL such as:</p>&#xA;&#xA;<pre><code>const socket = io('https://example.com');&#xA;</code></pre>&#xA;",816620,"",816620,"",2020-02-16T00:54:17,2020-02-16T00:54:17,"","",,3,,,
60194853,2,,60193298,2020-02-12T18:29:41,,1,,"<pre><code>import findProcess from 'find-process'&#xA;import { exec } from 'child-process'&#xA;&#xA;const stop = async () =&gt; {&#xA;    const yourSubProcessName = 'xxx'&#xA;    if(process.platform === 'win32') {&#xA;        // Consider OS type&#xA;        // This is just for WinOS&#xA;        exec(`taskkill /IM ${yourSubProcessName}`)&#xA;    } else {&#xA;        // Other OS&#xA;        exec(`kill xxx`)&#xA;    }&#xA;&#xA;    while(1) {&#xA;        const processList = await findProcess('name', yourSubProcessName)&#xA;        if(processList.length === 0) break&#xA;    }&#xA;&#xA;}&#xA;&#xA;app.on('will-quit', async () =&gt; {&#xA;    await stop()&#xA;});&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>This is terminating the subProcess when the main app is closing.&#xA;Listen then <code>will-quit</code> event and terminate the subProcess on handler.</p>&#xA;&#xA;<p>This code is to close the subprocess by ProcessName but you can change this as your needs.</p>&#xA;&#xA;<p>And you should consider your running OS type.</p>&#xA;",10909844,"",,"",,2020-02-12T18:29:41,"","",,4,,,
25336666,2,,25336641,2014-08-16T03:31:29,,0,,"<p>To trigger <code>catch</code> you need to <code>throw</code> something. So if you want to get error on no devices, you should add <code>if (devices.length &lt;= 0) throw new Error('error description')</code></p>&#xA;",2275049,"",,"",,2014-08-16T03:31:29,"","",,16,,,
25344666,2,,25344215,2014-08-16T22:41:41,,0,,"<p>JavaScript is asynchronous programming language, it is built on callbacks. Every function should have callback with data passed to it, if you will watch on <a href=""https://github.com/CyberAgent/adbkit#clientshellserial-command-callback"" rel=""nofollow"">documentation</a>, you have <code>client.shell(serial, command[, callback])</code> so data from executing <code>client.shell()</code> will be passed to <code>callback</code>. You should assign some function that will process callback, for your case will be this</p>&#xA;&#xA;<pre><code>client.shell(devices, ""su -c 'grep ro.product.model /system/build.prop'"", function(data) {&#xA;    console.log(data);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>P.S. there is no <code>alert</code> in nodejs</p>&#xA;",2275049,"",,"",,2014-08-16T22:41:41,"","",,0,,,
25522316,2,,25487685,2014-08-27T08:25:48,,1,,"<p>There are at least two ways to do this in node-webkit (maybe more that I haven't thought of):</p>&#xA;&#xA;<p>You can just use the node.js <code>fs</code> module to write a file, like so:</p>&#xA;&#xA;<pre><code>fs = require('fs')&#xA;fs.writeFileSync('foo.csv', csv);&#xA;</code></pre>&#xA;&#xA;<p>On the other hand, if you want to bring up a standard system file chooser dialog, you can use an input tag and trigger a click event on it.  Details can be found here - <a href=""https://github.com/rogerwang/node-webkit/wiki/File-dialogs"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/File-dialogs</a></p>&#xA;",3476918,"",,"",,2014-08-27T08:25:48,"","",,1,,,
25300874,2,,21497010,2014-08-14T05:49:50,,3,,"<p>Found the solution as new Screen Geometry added at node-webkit v0.10.2. This will let you listen to Screen Bound, Display add, Display remove events.</p>&#xA;&#xA;<p>Here is the documentation - <a href=""https://github.com/rogerwang/node-webkit/wiki/Screen"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/Screen</a></p>&#xA;&#xA;<p>This is added by a very recently new commit on nodewebkit to resolve this issue - <a href=""https://github.com/rogerwang/node-webkit/pull/2178"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/pull/2178</a>. </p>&#xA;&#xA;<p>Note - I did not test the code but looks like this is what I was looking for.</p>&#xA;",172285,"",,"",,2014-08-14T05:49:50,"","",,0,,,
25408075,2,,24913133,2014-08-20T14:59:07,,3,,"<p>NeDB CRUD operations are upwards compatible with MongoDB, but initialization is indeed not. NeDB implements part of MongoDB's API but not all, the part implemented is upwards compatible.</p>&#xA;&#xA;<p>It's definitely fast enough for your requirements, and we've made it very stable over the past few months (no more bug reports)</p>&#xA;",1844871,"",,"",,2014-08-20T14:59:07,"","",,1,,,
25534200,2,,25390458,2014-08-27T18:09:09,,5,,"<p>I expect that <code>createMacBuiltin</code> isn't defined when you're running on non-Mac platforms.  You should probably protect that code with an os-specific check, like this:</p>&#xA;&#xA;<pre><code>var gui = require('nw.gui');&#xA;var mb = new gui.Menu({type:""menubar""});&#xA;if (process.platform === ""darwin"") {  // this should indicate you're on Mac OSX&#xA;    mb.createMacBuiltin(""your-app-name"");&#xA;}&#xA;gui.Window.get().menu = mb;&#xA;</code></pre>&#xA;&#xA;<p>This is assuming, of course, that the surrounding code is platform independent and you want it to run on all platforms.</p>&#xA;",3476918,"",,"",,2014-08-27T18:09:09,"","",,1,,,
14017100,2,,14016933,2012-12-24T04:33:04,,3,,<p>Yes. It's possible and supported. Just write the code in the same way as you would do in Node.js.</p>&#xA;,180197,"",,"",,2012-12-24T04:33:04,"","",,0,,,
13938799,2,,13726877,2012-12-18T18:00:49,,6,,"<p>I've just been doing this:</p>&#xA;&#xA;<pre><code>//detect node-webkit&#xA;var isNodeWebkit = (typeof process == ""object"");&#xA;&#xA;if (isNodeWebkit)&#xA;{&#xA;    console.log( 'in node-webkit v' + process.versions['node-webkit']);&#xA;      //node webkit specific code&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>ie, checking if 'process' is a valid object reference.</p>&#xA;",156671,"",,"",,2012-12-18T18:00:49,"","",,1,,,
16742153,2,,16710788,2013-05-24T19:16:08,,0,,<p>node-webkit (at this time) has an application folder under under process.env.LOCALAPPPATH (for windows users anyway) which could be used.</p>&#xA;&#xA;<p>Another option which is viable is to use an application directory in the exe directory of the program.</p>&#xA;&#xA;<p>IE for node with process global.</p>&#xA;&#xA;<pre><code>var path = require('path');&#xA;&#xA;var appDir = path.dirname( process.execPath ) + path.sep + 'data' + path.sep;&#xA;//might produce something like c:\\programs\\node-webkit\\data\\&#xA;</code></pre>&#xA;,1261865,"",,"",,2013-05-24T19:16:08,"","",,0,,,
16556302,2,,16303838,2013-05-15T03:26:13,,3,,"<p>Don't use client-side oauth, make it through the ""server side"" of node-webkit. That means, you can popup a window, redirect it, close it when you are done. All the necessary information you need to pass using the <code>request</code> library, or API SDK for the Facebook oauth.</p>&#xA;&#xA;<p>Part of this process I've posted in here  <a href=""https://stackoverflow.com/questions/16361813/window-open-without-popup-blocker-using-ajax-and-manipulating-the-window-locatio"">window.open without popup blocker using AJAX and manipulating the window.location</a></p>&#xA;",647380,"",-1,"",2017-05-23T11:46:02,2013-05-15T03:26:13,"","",,2,,,
16497425,2,,16464727,2013-05-11T13:08:03,,4,,"<p>The limit is just removed by this commit: <a href=""https://github.com/zcbenz/chromium/commit/e1c7731d5bd099ca5544fcf8eda3867d4ce5bab5"" rel=""nofollow"">https://github.com/zcbenz/chromium/commit/e1c7731d5bd099ca5544fcf8eda3867d4ce5bab5</a></p>&#xA;",180197,"",,"",,2013-05-11T13:08:03,"","",,1,,,
54592590,2,,54553683,2019-02-08T12:34:02,,0,,"<p>I have figure out how we can detect number of screen and any device attached with USB.&#xA;Below code might help someone who want to check duplicate screen or USB drive attached to a windows computer:</p>&#xA;&#xA;<pre><code>const shell = require('node-powershell');&#xA;&#xA;let ps = new shell({&#xA;      executionPolicy: 'Bypass',&#xA;      noProfile: true&#xA;    });&#xA;//To get number of screen attached uncomment the below line&#xA;//ps.addCommand('(Get-CimInstance -Namespace root\\wmi -ClassName WmiMonitorBasicDisplayParams | where {$_.Active -like ""True""}).Active.Count')&#xA;&#xA;//To get attached USB drive with computer&#xA;    ps.addCommand('wmic logicaldisk where drivetype=2 get caption')&#xA;    ps.invoke()&#xA;      .then(output =&gt; {&#xA;        console.log('output '+output);&#xA;      })&#xA;      .catch(err =&gt; {&#xA;        console.log(err);&#xA;        ps.dispose();&#xA;      });&#xA;</code></pre>&#xA;",1864027,"",,"",,2019-02-08T12:34:02,"","",,0,,,
54617023,2,,54616028,2019-02-10T13:47:26,,1,,"<p>An Electron app is basically a Chromium browser with NodeJS support which loads any file you want to display from disk. It does not start any server (neither HTTP nor anything else).</p>&#xA;&#xA;<p>With ""default app page"" I believe you mean the <a href=""https://github.com/electron/electron-quick-start/blob/master/index.html"" rel=""nofollow noreferrer""><code>index.html</code> file of the electron-quick-start project</a>. This file, for example, gets loaded in <a href=""https://github.com/electron/electron-quick-start/blob/master/main.js"" rel=""nofollow noreferrer""><code>main.js</code>, line 13</a> using Electron's <a href=""https://electronjs.org/docs/api/browser-window#winloadfilefilepath-options"" rel=""nofollow noreferrer""><code>BrowserWindow#loadFile (...)</code></a> function. This basically behaves equivalently to loading it using <code>#loadURL (""file:///..."")</code> or by using <code>file://</code> in your browser to load any file from disk.</p>&#xA;",6786876,"",,"",,2019-02-10T13:47:26,"","",,0,,,
54620858,2,,54617813,2019-02-10T20:41:58,,0,,"<p>I figured it was an encoding-issue in the end. I created my files using TotalEdit Pro as unicode-files, but node/electron seems to want UTF-8. Now it works.</p>&#xA;",11041457,"",,"",,2019-02-10T20:41:58,"","",,0,,,
54621992,2,,54621922,2019-02-10T22:59:04,,2,,"<p>Why dont you make a new object? For example:<br></p>&#xA;&#xA;<pre><code>app.post('/api/texts/', function (req, res, next) {&#xA;    const obj = {};&#xA;    for (let [key, value] of Object.entries(req.body)) {&#xA;        obj[key] = value;&#xA;    }&#xA;    obj.additionalField = 0;&#xA;&#xA;&#xA;    texts.insert(obj, function (err, text) {&#xA;        if (err) return res.status(500).end(err);&#xA;        return res.json(text);&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Or you can simply use <code>req.body.additionalField = 0;</code> instead of creating a new object</p>&#xA;",6827918,"",,"",,2019-02-10T22:59:04,"","",,0,,,
54647445,2,,54642163,2019-02-12T10:04:31,,2,,"<p>I found a solution. I changed </p>&#xA;&#xA;<p>""SELECT CHECKINOUT.CHECKTIME""</p>&#xA;&#xA;<p>to </p>&#xA;&#xA;<p>""SELECT format(CHECKINOUT.CHECKTIME,'yyyy/mm/dd HH:mm:ss')"" </p>&#xA;&#xA;<p>and now it returns date in correct timezone.&#xA;I hope its helpful if someone is looking for that</p>&#xA;&#xA;<pre><code>let ab = '2019/02/11 11:10:00';&#xA;connection&#xA;.query(""SELECT format(CHECKINOUT.CHECKTIME,'yyyy/mm/dd HH:mm:ss') ,USERINFO.Badgenumber     FROM CHECKINOUT INNER JOIN USERINFO ON CHECKINOUT.USERID = USERINFO.USERID WHERE         format(CHECKINOUT.CHECKTIME,'yyyy/mm/dd HH:mm:ss') &gt;=  '""+ab+""'"")&#xA;.then(data =&gt; {&#xA;    this.dData = data;&#xA;    console.log(JSON.stringify(data, null, 2));&#xA;    this.ldsRllrDisplay = 'none';&#xA;})&#xA;.catch(error =&gt; {&#xA;    console.error(error);&#xA;});&#xA;</code></pre>&#xA;",4257737,"",,"",,2019-02-12T10:04:31,"","",,0,,,
54647783,2,,54385107,2019-02-12T10:20:53,,1,,"<p>I found a solution for this. I tried to used a library &#xA;<a href=""https://github.com/emilsedgh/modem"" rel=""nofollow noreferrer"">https://github.com/emilsedgh/modem</a></p>&#xA;&#xA;<p>and it worked well. So i didn't need to do anything (convert to ucs2) manually. </p>&#xA;&#xA;<pre><code>let isElectron: boolean = window &amp;&amp; window['process'] &amp;&amp;  window['process'].type;&#xA;if(isElectron){&#xA;    modem.open(""COM7"",function(){&#xA;        console.log('modem opened');&#xA;        modem.sms({&#xA;            receiver:""00923325200***"",&#xA;            text:""abc i am a msg"",&#xA;            encoding:'16bit'&#xA;        }, function(err, sent_ids) {&#xA;            console.log('&gt;&gt;', arguments);&#xA;            if(err)&#xA;                console.log('Error sending sms:', err);&#xA;            else&#xA;                console.log('Message sent successfully, here are reference ids:', sent_ids.join(','));&#xA;                modem.close();&#xA;        });&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",4257737,"",,"",,2019-02-12T10:20:53,"","",,0,,,
54648020,2,,54647354,2019-02-12T10:32:07,,1,,"<p>as from sep 2018 the option flatten been removed<br>&#xA;<a href=""https://github.com/felixrieseberg/electron-windows-store/commit/dcc654df2ec2bb706dc4f1664aa4775ab320541e"" rel=""nofollow noreferrer"">https://github.com/felixrieseberg/electron-windows-store/commit/dcc654df2ec2bb706dc4f1664aa4775ab320541e</a></p>&#xA;&#xA;<p>that mean just remove it from the command and everything going to be okay!</p>&#xA;",1017305,"",1017305,"",2019-02-12T10:40:57,2019-02-12T10:40:57,"","",,0,,,
54652206,2,,54596594,2019-02-12T14:23:33,,1,,"<p>To tackle this problem, there is an Electron module which lets you create native (file) dialogs with your desired specs.</p>&#xA;&#xA;<p>Creating a modal browser window without any filters (like directory opening, multi-selection or file type filters) is as simple as the following snippet:</p>&#xA;&#xA;<pre><code>const { dialog, remote } = require (""electron"");&#xA;&#xA;var selected = dialog.showOpenDialog (&#xA;    remote.getCurrentWindow (),&#xA;    { properties: [""openFile""] }&#xA;);&#xA;&#xA;if (typeof selected === ""undefined"") {&#xA;    // Oh no! The user didn't select anything!&#xA;} else {&#xA;    // ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/dialog"" rel=""nofollow noreferrer"">The documentation on <code>dialog</code></a> has some more sophisicated examples of using this API.</p>&#xA;",6786876,"",,"",,2019-02-12T14:23:33,"","",,0,,,
54653010,2,,54633739,2019-02-12T15:03:06,,2,,"<p>Finally, if you had this issue too, there is no need to call the localhost of the angular project, you just need to call directly the API and it works.</p>&#xA;&#xA;<p>For example,</p>&#xA;&#xA;<pre><code>this.httpClient.get('http://localhost:4200/api/v1/...').subscribe(...);&#xA;</code></pre>&#xA;&#xA;<p>becomes</p>&#xA;&#xA;<pre><code>this.httpClient.get('http://localhost:3000/api/v1/...').subscribe(...);&#xA;</code></pre>&#xA;&#xA;<p>Simply as this.</p>&#xA;",8215068,"",,"",,2019-02-12T15:03:06,"","",,0,,,
54704119,2,,54687358,2019-02-15T06:58:37,,0,,"<p>Seems like the problem has gone. I don't need the linux zip, deb works fine. And windows zip works well (tested via VirtualBox).</p>&#xA;",11061132,"",,"",,2019-02-15T06:58:37,"","",,0,,,
54721846,2,,52981897,2019-02-16T09:55:35,,2,,<p>I had a similar issue and it ended up being related to yarn version. I fixed it by installing yarn this way:</p>&#xA;&#xA;<pre><code>sudo npm install --global yarn &#xA;</code></pre>&#xA;,386590,"",,"",,2019-02-16T09:55:35,"","",,0,,,
54728494,2,,54728170,2019-02-16T22:56:56,,1,,"<p>After looking at your question a little more carefully, it looks as if you might be having a little confusion between app, BrowserWindow, and some of the other components within electron. Here is a little more verbose example that hopefully ties all of the pieces together.</p>&#xA;&#xA;<p>In a nutshell, the app is referred to as the <a href=""https://electronjs.org/docs/glossary#main-process"" rel=""nofollow noreferrer"">main process</a>, which is not actually a Browser Window (also called a <a href=""https://electronjs.org/docs/glossary#renderer-process"" rel=""nofollow noreferrer"">renderer process</a>) itself. You have to create any windows you want. If you need it, communication between the main process and renderer processes is handled through <a href=""https://electronjs.org/docs/glossary#ipc"" rel=""nofollow noreferrer"">Inter-Process Communication channels</a>.</p>&#xA;&#xA;<pre><code>const { app, BrowserWindow } = require('electron');&#xA;app.on('ready', () =&gt; {&#xA;  let child = new BrowserWindow({ parent: top, show: false });&#xA;  child.loadURL('https://github.com');&#xA;  child.on('focus', () =&gt; { child.setOpacity(1); });&#xA;  child.on('blur', () =&gt; { child.setOpacity(0.5); });&#xA;  child.once('ready-to-show', () =&gt; {&#xA;    child.show();&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",1233305,"",,"",,2019-02-16T22:56:56,"","",,0,,,
54739983,2,,54739824,2019-02-18T03:11:28,,0,,"<p>If you need to access the local files, you can create an endpoint in flask that launches a file dialog GUI.  This only works because you application is hosted locally.  You can use either <code>tkinter</code> or the native windows API using <code>win32ui</code>.</p>&#xA;&#xA;<p>Assuming you are using the standard Flask format:</p>&#xA;&#xA;<pre><code>from app import app&#xA;&#xA;@app.route('/file_select', methods=['GET', 'POST'])&#xA;def file_select():&#xA;    from tkinter import Tk&#xA;    from tkinter.filedialog import askopenfilename&#xA;    root = Tk()&#xA;    root.withdraw()&#xA;    # ensure the file dialog pops to the top window&#xA;    root.wm_attributes('-topmost', 1)&#xA;    fname = askopenfilename(parent=root)&#xA;    return jsonify({'filepath': fname})&#xA;</code></pre>&#xA;&#xA;<p>or using the win32ui API</p>&#xA;&#xA;<pre><code>@app.route('/file_select', methods=['GET', 'POST'])&#xA;def file_select():&#xA;    import win32ui&#xA;    winobj = win32ui.CreateFileDialog(1, "".pdf"", """", 0, &#xA;        ""PDF Files (*.pdf)|*.pdf|All Files (*.*)|*.*|"")&#xA;    winobj.DoModal()&#xA;    return jsonify({'filepath': winobj.GetPathName()})&#xA;</code></pre>&#xA;&#xA;<p>Now just add a button that points to the <code>/file_select</code> route and you will open a file dialog via the python local server and return the selected file.</p>&#xA;",5003756,"",,"",,2019-02-18T03:11:28,"","",,0,,,
54742766,2,,54734970,2019-02-18T08:03:24,,2,,<p>The issue may be that you don't have <code>fireConfig</code> in your <code>environment.prod.ts</code>.</p>&#xA;&#xA;<p>In your <code>environment.prod.ts</code> file add <code>fireConfig</code> that you have used in your <code>environemnt.ts</code>.</p>&#xA;,5673943,"",,"",,2019-02-18T08:03:24,"","",,0,,,
54747826,2,,54747780,2019-02-18T12:55:29,,2,,"<p>The dom can only be manipulated from the <code>renderer</code> thread. You need to send a request to the renderer thread from main to do what you are asking.</p>&#xA;&#xA;<p>You could also create an abstract HTML request listener like:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var actions = {&#xD;&#xA;  hide: function(elem) {&#xD;&#xA;    elem.style.display = ""none"";&#xD;&#xA;  },&#xD;&#xA;  show: function(elem) {&#xD;&#xA;    elem.style.display = null;&#xD;&#xA;  }&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;function customQuery(query, action) {&#xD;&#xA;  for (var element of document.querySelectorAll(query)) {&#xD;&#xA;    if (typeof element[action] === ""function"") element[action]();&#xD;&#xA;    else actions[action](element);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;ipcRenderer.on(""customQuery"", function (event, ...args) {&#xD;&#xA;  customQuery(...args);&#xD;&#xA;});</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Which can be accessed by doing <code>win.webContents.send(""customQuery"", ""#myElement"", ""hide"");</code></p>&#xA;",3133418,"",3133418,"",2019-02-18T13:08:34,2019-02-18T13:08:34,"","",,0,,,
54778008,2,,50736153,2019-02-20T02:36:22,,27,,"<p>you can try this: </p>&#xA;&#xA;<pre><code>pm2 restart id --name newName&#xA;</code></pre>&#xA;&#xA;<p>Example: your id is 1 , then you can type : pm2 restart 1 --name development</p>&#xA;",9217793,"",4758119,"",2020-02-29T11:01:10,2020-02-29T11:01:10,"","",,0,,,
54784584,2,,54738225,2019-02-20T10:53:05,,3,,"<h1>The Problem</h1>&#xA;&#xA;<p>That a Node function is not defined when using Electron or does not take a specific parameter even though it works fine with your local Node installation can happen, when the Node version that Electron supports is older than your local Node installation.</p>&#xA;&#xA;<h1>Find out the version you use</h1>&#xA;&#xA;<p>A good first start is to look when the function in question was added to Node. You can do that by looking in the <a href=""https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html#crypto_crypto_scryptsync_password_salt_keylen_options"" rel=""nofollow noreferrer"">Node.js documentation</a>. You will find a History table right below the function name in a drop down block.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/DRKXv.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/DRKXv.jpg"" alt=""Node.js History Table""></a></p>&#xA;&#xA;<p>Here we see that <code>scryptSync</code> was added in Node 10.5.0.</p>&#xA;&#xA;<p>If you don't know what Node version your Electron installation supports, you can run the following with Electron:</p>&#xA;&#xA;<p><code>console.log(process.versions)</code></p>&#xA;&#xA;<p>You should find the used Node version in the output. For example for Electron 3.1.4 it should look like this:</p>&#xA;&#xA;<pre><code>{ http_parser: '2.8.0',&#xA;  node: '10.2.0',&#xA;  v8: '6.6.346.32',&#xA;  uv: '1.20.3',&#xA;  zlib: '1.2.11',&#xA;  ares: '1.14.0',&#xA;  modules: '64',&#xA;  nghttp2: '1.29.0',&#xA;  napi: '3',&#xA;  openssl: '1.1.0h',&#xA;  electron: '3.1.4',&#xA;  chrome: '66.0.3359.181' }&#xA;</code></pre>&#xA;&#xA;<p>For comparison here is the output of my Electron 4.0.2 installation:</p>&#xA;&#xA;<pre><code>{ http_parser: '2.8.0',&#xA;  node: '10.11.0',&#xA;  v8: '6.9.427.24-electron.0',&#xA;  uv: '1.23.0',&#xA;  zlib: '1.2.11',&#xA;  ares: '1.14.0',&#xA;  modules: '64',&#xA;  nghttp2: '1.33.0',&#xA;  napi: '3',&#xA;  openssl: '1.1.0',&#xA;  electron: '4.0.2',&#xA;  chrome: '69.0.3497.106',&#xA;  icu: '62.1',&#xA;  unicode: '11.0',&#xA;  cldr: '33.1',&#xA;  tz: '2018e' }&#xA;</code></pre>&#xA;&#xA;<p>As we see Electron 3 uses Node 10.2.0. So in the Node that Electron uses <code>scryptSync</code> is not yet implemented and therefore <code>undefined</code>.</p>&#xA;&#xA;<h1>How to solve this</h1>&#xA;&#xA;<p>You can solve this if a newer Electron version  that supports the Node version you need is already released.</p>&#xA;&#xA;<p>You can look this up in the <a href=""https://electronjs.org/releases/stable?version=4&amp;page=2"" rel=""nofollow noreferrer"">Electron release notes</a>. Up until now Node version upgrades were implemented in major versions so looking at the next x.0.0 version is a good start.</p>&#xA;&#xA;<p>In this case we are in luck: Electron 4 supports Node 10.11.0 which implements <code>scryptSync</code>.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/SJJxF.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SJJxF.jpg"" alt=""Electron release notes for Electron 4.0.0""></a></p>&#xA;&#xA;<p>So upgrading to the latest Electron version should solve this problem.</p>&#xA;",4945892,"",,"",,2019-02-20T10:53:05,"","",,0,,,
54785005,2,,54783945,2019-02-20T11:15:18,,2,,"<p>In a <strong>renderer process</strong>, <a href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout"" rel=""nofollow noreferrer"">setTimeout()</a> or <a href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout"" rel=""nofollow noreferrer"">window.setTimeout()</a> is a Web API function which returns an integer:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Return value</p>&#xA;  &#xA;  <p>The returned timeoutID is a positive integer value which identifies&#xA;  the timer created by the call to setTimeout(); this value can be&#xA;  passed to clearTimeout() to cancel the timeout.</p>&#xA;</blockquote>&#xA;&#xA;<p>Whereas in the <strong>main process</strong>, <a href=""https://nodejs.org/api/globals.html#globals_settimeout_callback_delay_args"" rel=""nofollow noreferrer"">setTimeout()</a> is a Node.js <em>global object</em> method (described in <a href=""https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_args"" rel=""nofollow noreferrer"">Timers</a>) which returns a <a href=""https://nodejs.org/api/timers.html#timers_class_timeout"" rel=""nofollow noreferrer"">Timeout</a> object:</p>&#xA;&#xA;<blockquote>&#xA;  <p>setTimeout(callback, delay[, ...args])</p>&#xA;  &#xA;  <ul>&#xA;  <li><em>callback</em>  The function to call when the timer elapses.</li>&#xA;  <li><em>delay</em>  The number of milliseconds to wait before calling the callback.</li>&#xA;  <li><em>...args</em>  Optional arguments to pass when the callback is called.</li>&#xA;  </ul>&#xA;  &#xA;  <p>Returns: &lt;Timeout&gt; for use with clearTimeout()</p>&#xA;</blockquote>&#xA;&#xA;<p>In order to call the Node.js method from the <em>renderer process</em>, you would have to use Electron's remote <a href=""https://electronjs.org/docs/api/remote#remotegetglobalname"" rel=""nofollow noreferrer"">getGlobal</a> method; for instance: </p>&#xA;&#xA;<pre><code>require('electron').remote.getGlobal('setTimeout')(() =&gt; { console.log('done'); }, 2000);&#xA;</code></pre>&#xA;",,user8022331,,user8022331,2019-02-20T11:41:00,2019-02-20T11:41:00,"","",,0,,,
54790507,2,,54790446,2019-02-20T16:00:16,,2,,"<p>When you update the innerHTML like this</p>&#xA;&#xA;<pre><code>hook.innerHTML += `&lt;button id=""${this.id}""&gt;${this.id}&lt;/button&gt;`;&#xA;</code></pre>&#xA;&#xA;<p>It erasing anything attached to the elements. So that means you are clearing all of the event handlers attached.</p>&#xA;&#xA;<p>You should be appending elements to the DOM</p>&#xA;&#xA;<pre><code>const button = document.createElement(""button"")&#xA;button.id = this.id&#xA;button.textContent = this.id&#xA;hook.appendChild(button)&#xA;</code></pre>&#xA;",14104,"",,"",,2019-02-20T16:00:16,"","",,0,,,
54793467,2,,54791869,2019-02-20T18:59:21,,0,,"<p>This bit of code will be used in the code that follows after:</p>&#xA;&#xA;<pre><code>  const fileSystem = require(""fs"");&#xA;  const getDirectoryContents = path =&gt; fileSystem.readdirSync(path);&#xA;</code></pre>&#xA;&#xA;<p>Assuming your <code>ul</code> has an id called <code>main</code>, this is what I'd do:</p>&#xA;&#xA;<pre><code>$(""#main li"").on(""click"", function clickHandler() {&#xA;    const $clickedElement = $(this);&#xA;    const elementName = $clickedElement.text(); // gets the text that was clicked&#xA;    const fsEntry = fileSystem.statSync(elementName);&#xA;    if (fsEntry.isDirectory()) { // retrieve the contents only if the clicked text represents a folder&#xA;      const files = ['&lt;ul&gt;'].concat(&#xA;        getDirectoryContents(elementName).map(entryName =&gt; `&lt;li&gt;${entryName}&lt;/li&gt;`),&#xA;        '&lt;/ul&gt;'&#xA;      ).join('');&#xA;      $clickedElement.append(files); // not exactly the best way to do it, but does the job&#xA;    } else {&#xA;      // do something if the entry is a file&#xA;    }&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps.</p>&#xA;",312716,"",,"",,2019-02-20T18:59:21,"","",,0,,,
54591348,2,,54590893,2019-02-08T11:22:33,,1,,"<p>I have recently started learning nodejs as well, could you try the following maybe ...using the path module</p>&#xA;&#xA;<pre><code>    var fs = require('fs'); &#xA;var path = require('path'); &#xA;var ffmpegPath = path.join(__dirname, '..', 'ffmpeg', 'ffmpeg.exe'); &#xA;</code></pre>&#xA;&#xA;<p>Then the ffmpegPath variable will give you access to the path you want, </p>&#xA;&#xA;<p>Or try using</p>&#xA;&#xA;<pre><code>.setFfmpegPath('../ffmpeg/ffmpeg.exe'). &#xA;</code></pre>&#xA;&#xA;<p>Where the .. represents the current directory</p>&#xA;",3636427,"",,"",,2019-02-08T11:22:33,"","",,1,,,
54621499,2,,54619650,2019-02-10T21:58:05,,0,,"<blockquote>&#xA;  <p>expect that Electron accepts the URL and loads the app</p>&#xA;</blockquote>&#xA;&#xA;<p>You cannot. Entrypoint of electron app is not a renderer process (chromium) but a node.js process which owns responsibility to create browserwindow. You should point local file first, and inside of that file you can point remote address via <code>BrowserWindow.loadURL</code>.</p>&#xA;",2742189,"",,"",,2019-02-10T21:58:05,"","",,1,,,
54628628,2,,54628097,2019-02-11T10:37:28,,1,,"<p>I found the solution, but if it isn't correct please comment it.&#xA;So instead of using ""mainWindo.webContents"" in Node, must be used ""ipcMain"" what imports from electron: </p>&#xA;&#xA;<pre><code>const { ipcMain } = require('electron');&#xA;&#xA;ipcMain.on('test', (event, data) =&gt; {&#xA;  console.log(data);&#xA;});  &#xA;</code></pre>&#xA;",10802374,"",,"",,2019-02-11T10:37:28,"","",,1,,,
54651996,2,,54651698,2019-02-12T14:12:32,,0,,"<ol>&#xA;<li>You probably want to move all source files to <code>src</code> directory. This is not required but this is how usually people structure projects.&#xA;&#xA;<ul>&#xA;<li>src&#xA;&#xA;<ul>&#xA;<li>controllers (or w/e you call it)&#xA;&#xA;<ul>&#xA;<li>ts files</li>&#xA;</ul></li>&#xA;<li>gui&#xA;&#xA;<ul>&#xA;<li>html files</li>&#xA;</ul></li>&#xA;</ul></li>&#xA;</ul></li>&#xA;<li><p>I would recommend to use webpack instead of raw tsc. You want to use <a href=""https://www.npmjs.com/package/copy-webpack-plugin"" rel=""nofollow noreferrer"">CopyWebpackPLugin</a></p>&#xA;&#xA;<pre><code>const CopyWebpackPlugin = require('copy-webpack-plugin');&#xA;&#xA;plugins: [&#xA; new CopyWebpackPlugin([&#xA;   {from: './src/gui', to: ''},&#xA;]),&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<p>If you still want to use tsc, you can copy files manually my using <code>cp</code> in package.json. </p>&#xA;&#xA;<p><strong>package.json</strong>:</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;    ""copyHtml"": ""cp ./src/gui ./dist"",&#xA;    ""build"": ""tsc &amp;&amp; npm run copyHtml"",&#xA;    ""prestart"": ""npm run build"",&#xA;    ""start"": ""tsc &amp;&amp; npm run copyHtml &amp;&amp; electron ./dist/main.js"",&#xA;    ""pack"": ""electron-packager . sample --out=dist --arch=x64 --platform=win32 --electron-version=3.0.3 --overwrite --prune --ignore=dist""&#xA;  },&#xA;</code></pre>&#xA;&#xA;<p>You can also use <a href=""https://github.com/mysticatea/cpx"" rel=""nofollow noreferrer"">cpx</a> if you worry about crossOs support.</p>&#xA;&#xA;<p>Anyway the point is that dist directory should contain all output files. And it's self-contained, meaning you can send this directory to anyway and he/she should be able to run your project w/o any other dependencies.</p>&#xA;",3872976,"",3872976,"",2019-02-12T14:18:32,2019-02-12T14:18:32,"","",,1,,,
54655931,2,,54655659,2019-02-12T17:52:19,,0,,"<p>You can try to create a custom instance of axios and use it instead. </p>&#xA;&#xA;<p><em>axiosConfig.js</em></p>&#xA;&#xA;<pre><code>const customAxiosInstance = axios.create({&#xA;  baseURL: 'localhost:5000',&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><em>The below code comes where you call the endpoint of the API</em></p>&#xA;&#xA;<pre><code>import APIEndPoint from './axiosConfig';&#xA;&#xA;APIEndPoint&#xA;  .get('/your-end-points-here')&#xA;  .then((response) =&gt; {&#xA;    // handle success&#xA;  })&#xA;  .catch((error) =&gt; {&#xA;    // handle error&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",10604378,"",,"",,2019-02-12T17:52:19,"","",,1,,,
54680417,2,,54644898,2019-02-13T22:26:48,,0,,"<p>It appears the openssl dependency is missing, were dependencies installed?</p>&#xA;",1070012,"",,"",,2019-02-13T22:26:48,"","",,1,,,
54711134,2,,54318292,2019-02-15T14:12:34,,1,,<p>I had the same problem. I resolved it doing it in my SCSS :</p>&#xA;&#xA;<pre><code>mat-icon {&#xA;  svg {&#xA;    pointer-events: none;&#xA;   }&#xA;}&#xA;</code></pre>&#xA;,9004468,"",,"",,2019-02-15T14:12:34,"","",,1,,,
54746416,2,,54746238,2019-02-18T11:36:22,,4,,"<p>To answer most of your questions: do what makes the code better, not ""faster"". If you were seriously concerned about performance, you would be writing your app in C or assembly. Electron on its own is already causing a lot of slowdown – it's a browser running an interpreted language, evaluating CSS and HTML, what did you expect?</p>&#xA;&#xA;<p>The entire reason for things like Electron is because it makes development easier, in particular to people who are familiar with web technologies already.</p>&#xA;&#xA;<p>So:</p>&#xA;&#xA;<ul>&#xA;<li>Yes, split your app into files. There may be some overhead if you don't use a transpiler / uglifier, but this is relatively tiny and only has to happen at application load time.</li>&#xA;<li>Yes, use TypeScript. It is a transpiled language that only adds type safety to your code at compilation time – the additional information is stripped away after compilation, producing ""vanilla JS"".</li>&#xA;<li>If you are doing a lot of DOM manipulation and you are familiar with jQuery, then go ahead. In modern browsers (including Electron), you don't really have to be concerned about various features not working, so most DOM manipulation that you would want is <a href=""http://youmightnotneedjquery.com/"" rel=""nofollow noreferrer"">trivial without jQuery</a>. Nevertheless, it is once again a relatively tiny slowdown. And <code>el = $('some selector')</code> produces most of the ""slowdown"" only once.</li>&#xA;</ul>&#xA;&#xA;<p>One more thing – if you are seriously concerned about your performance (personally I doubt this will be an issue), then your best bet is to profile your app! Run tests with different implementations, see which is faster, quantify performance speedups. But keep in mind:</p>&#xA;&#xA;<blockquote>&#xA;  <p>We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%</p>&#xA;  &#xA;  <p>– Donald Knuth</p>&#xA;</blockquote>&#xA;",392025,"",,"",,2019-02-18T11:36:22,"","",,1,,,
54748634,2,,54748566,2019-02-18T13:42:01,,2,,"<p>I feel like you can use <code>minWidth</code> property to achieve your goal. Try to pass it when you create your window.</p>&#xA;&#xA;<pre><code>const window = new BrowserWindow({&#xA;  minWidth: 700,&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You can also you <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winsetminimumsizewidth-height"" rel=""nofollow noreferrer"">setMinimumSize</a> function.</p>&#xA;",10976794,"",,"",,2019-02-18T13:42:01,"","",,1,,,
54630185,2,,54630120,2019-02-11T12:02:01,,1,,"<p>The event handling of IPC runs outside of the angular zone. The event is not so called 'monkey patched'. You should apply the change inside a <code>ngZone.run</code> call. Besides that, you are using the <code>function</code> keyword, which causes the <code>this</code> context to change to that function, and cannot access the class <code>this</code> anymore. Use the arrow notation:</p>&#xA;&#xA;<pre><code>constructor(readonly nz: NgZone) { }&#xA;&#xA;ngOnInit() {&#xA;  ipcRenderer.on('msg', (event, arg) =&gt; {&#xA;    this.nz.run(() =&gt; this.text = arg);&#xA;  });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Don't forget to 'unlisten' for msg in the <code>ngOnDestroy</code> though, otherwise you trigger a detectChanges on a destroyed directive, and angular doesn't like that :)</p>&#xA;",3106920,"",3106920,"",2019-02-11T12:05:35,2019-02-11T12:05:35,"","",,2,,,
54665179,2,,54633871,2019-02-13T08:00:56,,0,,"<p>I think you can do this like this :</p>&#xA;&#xA;<p>Create BE and FE test projects in the same project,</p>&#xA;&#xA;<p>Create one object that stores your responses datas from both BE and FE:</p>&#xA;&#xA;<p>While tests are running, initialize this object and feed it with your results.</p>&#xA;&#xA;<p>How to feed this object:</p>&#xA;&#xA;<ul>&#xA;<li>For BE, if it is an API store responses as a JSON.</li>&#xA;<li>For FE, collect datas from elements and store them as <code>String</code> or&#xA;Json again.</li>&#xA;</ul>&#xA;&#xA;<p>Then assert every actions for BE and FE on the corresponding steps and validate them with comparing this JSON or <code>String</code> datas.</p>&#xA;",7819964,"",2664350,"",2019-02-14T12:33:39,2019-02-14T12:33:39,"","",,2,,,
54773110,2,,54772990,2019-02-19T18:51:42,,8,,"<p>You are injecting MatDialogRef in component:</p>&#xA;&#xA;<pre><code>constructor(private dialogRef: MatDialogRef&lt;Mytest1Component&gt;) { }&#xA;</code></pre>&#xA;&#xA;<p>So the testBed expects the same to be injected as <code>provider</code> to the TestBed. Or you can also provide a <code>MockDialogueService</code> to it.</p>&#xA;&#xA;<pre><code>beforeEach(async(() =&gt; {&#xA;    TestBed.configureTestingModule({&#xA;        declarations: [ Mytest1Component ],&#xA;        providers: [ MatDialogRef ],&#xA;    })&#xA;    .compileComponents();&#xA;}));&#xA;</code></pre>&#xA;",9386929,"",,"",,2019-02-19T18:51:42,"","",,2,,,
54764480,2,,54762693,2019-02-19T10:50:35,,1,,"<p>In your <code>page.js</code> your promise should look something like the following</p>&#xA;&#xA;<pre><code>module.exports = function(inputDate){&#xA;  return new Promise(async(resolve, reject) =&gt; {&#xA;    try{&#xA;      ...your code&#xA;      resolve(response);&#xA;    } catch (e) {&#xA;      reject(e.message)&#xA;    }&#xA;  })&#xA;}&#xA;</code></pre>&#xA;",4440646,"",,"",,2019-02-19T10:50:35,"","",,3,,,
54608622,2,,54608230,2019-02-09T17:17:16,,1,,"<p>I strongly recommend to use the <code>async</code> pipe instead of subscribing to the stream. What you experience is not a malfunctioning component but a memory leak.</p>&#xA;&#xA;<p>When you subscribe to <code>data$</code> that subscription will stay in memory until the subscription is cancelled, which never happens in your case. So the instance of Component A needs to remain in memory as well.</p>&#xA;&#xA;<p>The problem is that changing the route to Component B lets Angular abandon the instance of Component A. So Angular is no longer connected to it. From its point of view the component no longer exists. When you switch back the route to Component A, Angular will create a <strong>new instance</strong> and it starts with <code>['test1', 'test2']</code>.</p>&#xA;",2151351,"",,"",,2019-02-09T17:17:16,"","",,5,,,
54784577,2,,54763647,2019-02-20T10:52:55,,2,,"<p>I have encounter the same problem as you and so I have written :</p>&#xA;&#xA;<ul>&#xA;<li>this StackOverFlow question :&#xA;<a href=""https://stackoverflow.com/questions/53538215/cant-succeed-in-making-transparent-window-in-electron-javascript"">Can&#39;t succeed in making transparent window in Electron (javascript)</a></li>&#xA;<li>this Electron issue : <a href=""https://github.com/electron/electron/issues/15947"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/15947</a></li>&#xA;<li>and finally request this feature : <a href=""https://github.com/electron/electron/issues/16809"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/16809</a></li>&#xA;</ul>&#xA;&#xA;<p>Till the requested feature is implemented, the solution is simple just add a delay before launching the window.</p>&#xA;&#xA;<p><strike>You can clone <a href=""https://gitlab.com/doom-fr/electron-transparency-bug"" rel=""nofollow noreferrer"">this git repo</a>, put the delay to 500, and normally magic will appear.</strike></p>&#xA;&#xA;<p>EDIT 1 :&#xA;Use this repo : <a href=""https://gitlab.com/doom-fr/electron-transparency-demo"" rel=""nofollow noreferrer"">https://gitlab.com/doom-fr/electron-transparency-demo</a></p>&#xA;&#xA;<pre><code>git clone https://gitlab.com/doom-fr/electron-transparency-demo&#xA;cd electron-transparency-demo&#xA;npm install&#xA;npm start&#xA;# or npm run startWithTransparentOption&#xA;# or npm run startWithAllOptions&#xA;</code></pre>&#xA;&#xA;<p>For me, it works out of the box with Debian Jessie and electron 4.0.5, for <code>npm start</code>, <code>npm run startWithTransparentOption</code> but not with <code>npm run startWithAllOptions</code>.</p>&#xA;&#xA;<p>NB : be carefull to set at least 500ms to have chance it works. After you can reduce the delay but it is not stable. It is why an event on transparentReady is needed.</p>&#xA;&#xA;<p>Doom</p>&#xA;",1619521,"",1619521,"",2019-02-20T11:44:09,2019-02-20T11:44:09,"","",,5,,,
31959629,2,,31957393,2015-08-12T08:14:25,,0,,"<p>Windows opened using <code>window.open()</code> use the window settings from the manifest file (package.json).</p>&#xA;&#xA;<p>If you use the nw.js Window object to create the window, instead of the DOM object, you can pass in window settings in manifest format to override the defaults.</p>&#xA;&#xA;<pre><code>var gui = require(""nw.gui"")&#xA;gui.Window.open('http://www.example.com', {  &#xA;    width: 100,&#xA;    height: 100,&#xA;}); &#xA;</code></pre>&#xA;&#xA;<p>Alternatively, if you must use the DOM <code>window.open</code> and need to control the defaults, you will need to handle the ""new-win-policy"" event and provide window settings using <code>setNewWindowManifest</code>:</p>&#xA;&#xA;<pre><code>// set up handler for new-win-policy event&#xA;var gui = require('nw.gui');&#xA;var win = gui.Window.get();&#xA;&#xA;win.on('new-win-policy', function (frame, url, policy) {&#xA;    policy.setNewWindowManifest({&#xA;        width: 600, &#xA;        height: 300&#xA;    });&#xA;});&#xA;&#xA;// open window using DOM object, uses arguments set in event handler&#xA;window.open('http://www.example.com', '_blank', '');&#xA;</code></pre>&#xA;&#xA;<p>Further documentation available here: <a href=""https://github.com/nwjs/nw.js/wiki/Window#new-win-policy"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/Window#new-win-policy</a></p>&#xA;",271879,"",271879,"",2015-08-12T13:31:34,2015-08-12T13:31:34,"","",,0,,,
32043202,2,,31890338,2015-08-17T05:14:40,,0,,"<p>I am not able to find one for Electron, but here is the one from Atom</p>&#xA;&#xA;<p><a href=""https://github.com/atom/atom/blob/master/README.md#building"" rel=""nofollow"">https://github.com/atom/atom/blob/master/README.md#building</a></p>&#xA;&#xA;<p>Atom is made using Electron so ideally these are the supported platforms</p>&#xA;",1882326,"",,"",,2015-08-17T05:14:40,"","",,0,,,
31896169,2,,31895727,2015-08-08T16:34:53,,1,,"<p>A Google search for <a href=""https://www.google.com/webhp?#q=nwjs%20default%20menu%20mac"" rel=""nofollow noreferrer"">nwjs default menu mac</a> led me to <a href=""https://www.npmjs.com/package/nwjs-osx-menu"" rel=""nofollow noreferrer"">Dickson Tam's nwjs-osx-menu npm package</a>.</p>&#xA;&#xA;<p>My additional steps were:</p>&#xA;&#xA;<ol>&#xA;<li>In a Terminal window, <code>cd</code> to the folder containing the main index.html file</li>&#xA;<li>Run <code>npm install nwjs-osx-menu</code>. This adds (a node-modules folder containing) a folder named nwjs-osx-menu.</li>&#xA;<li>In a text editor, open the file nwjs-osx-menu/index.js</li>&#xA;<li>Change the line <code>mb.createMacBuiltin('My App');</code> to <code>mb.createMacBuiltin('Hello World');</code></li>&#xA;<li>Create a new ZIP, including the new nwjs-osx-menu folder</li>&#xA;<li>Rename the zip file as app.nw</li>&#xA;<li>Replace the existing file at HelloWorld.app/Content/Resources/app.nw with the new one</li>&#xA;<li>Launch the HelloWorld.app</li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/MBGsC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/MBGsC.png"" alt=""Hello World application with default menus on Mac OS X""></a></p>&#xA;",1927589,"",,"",,2015-08-08T16:34:53,"","",,0,,,
31927957,2,,31526993,2015-08-10T19:50:23,,1,,"<p>I am the author of php-webkit. PHP is packaged with a copy of sqlite and php-webkit works with this. If you are having issues make sure the copy of PHP you included has the sqlite extension and sqlite enabled in your PHP.ini. Connecting to a stand alone copy of sqlite should be possible with the sqlite PHP extension. <a href=""https://stackoverflow.com/questions/16728265/how-do-i-connect-to-an-sqlite-database-with-php"">Here are some examples of connecting to sqlite from php.</a></p>&#xA;",2223704,"",-1,"",2017-05-23T10:27:13,2015-08-10T19:50:23,"","",,3,,,
32077595,2,,32064290,2015-08-18T16:15:23,,1,,<p>There is a typo while you are calling update method.</p>&#xA;&#xA;<p><code>{_id = game_id}</code> change query with <code>{_id : game_id}</code></p>&#xA;&#xA;<p><strong><em>Update :</em></strong></p>&#xA;&#xA;<p>Try to change your models.games.update instead of new function and directly assign <code>db.games.update</code> like following code block.</p>&#xA;&#xA;<pre><code>var models = {&#xA;  games : {&#xA;     update : db.games.update&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and you might call <code>models.games.update(/*queries and cb functions*/)</code>.</p>&#xA;,1136403,"",1136403,"",2015-08-19T06:01:55,2015-08-19T06:01:55,"","",,8,,,
32098157,2,,27183678,2015-08-19T14:20:40,,1,,"<p>The problem here is, that you cannot require('nw.gui') in the nodejs context, because in the nodejs environment is no window. No window, no gui. So what you can do, is just create a <code>script</code> tag in your main file (index.html) with the src to your db.js file with the above content, it should work fine.</p>&#xA;&#xA;<p>in index.html</p>&#xA;&#xA;<pre><code>&lt;script src=""db/db.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>in db/db.js</p>&#xA;&#xA;<pre><code>var Datastore = require('nedb')&#xA;,   path = require('path')&#xA;,   dbFile = path.join(require('nw.gui').App.dataPath, 'something.db')&#xA;,   db = new Datastore({ filename: dbFile })&#xA;</code></pre>&#xA;",5004923,"",,"",,2015-08-19T14:20:40,"","",,1,,,
32105543,2,,32081903,2015-08-19T20:57:05,,2,,"<p>SOLVED.</p>&#xA;&#xA;<p>I've ended up using the solution from this <a href=""https://stackoverflow.com/questions/29891458/webpack-require-every-file-in-directory"">page</a>, and adapting it a bit.&#xA;The regex provided by @user3335966 returned the file that I meant to exclude, but thanks anyway :)</p>&#xA;&#xA;<p><code>/(\w*\/)*(\w*_index|\w*\.spec)\.js/</code></p>&#xA;&#xA;<p>The idea was to include all the files in the folder and subfolders, but not the <code>_index.js</code>.</p>&#xA;&#xA;<p>This regex however does return every .js file:</p>&#xA;&#xA;<p><code>/^(.*\.(js$))[^.]*$/igm</code></p>&#xA;&#xA;<p>And since I don't know regex, I ended up excluding the <code>_index.js</code> in the function where I have it as a result:</p>&#xA;&#xA;<pre><code>var req = require.context(""./"", true, /^(.*\.(js$))[^.]*$/igm);&#xA;req.keys().forEach(function(key){&#xA;    if (key !== './_index.js') {&#xA;        req(key);&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>So now I basically do this:</p>&#xA;&#xA;<pre><code>module.exports = angular.module('app.homeModule', []);&#xA;&#xA;var req = require.context(""./"", true, /^(.*\.(js$))[^.]*$/igm);&#xA;req.keys().forEach(function(key){&#xA;    if (key !== './_index.js') {&#xA;        req(key);&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>That way I define an angular module, and make it available to all other files inside that folder (controllers, services, directives).</p>&#xA;&#xA;<p>I'd appreciate if anyone have an idea how to do the exclusion in the regex.</p>&#xA;",1896429,"",-1,"",2017-05-23T12:07:34,2015-08-19T20:57:05,"","",,0,,,
31926059,2,,31925683,2015-08-10T17:54:26,,3,,"<p>Your expectations are wrong. Everything at the class level goes in the object's prototype so given this:</p>&#xA;&#xA;<pre><code>class C&#xA;  p: 6&#xA;  m: -&gt;&#xA;o = new C&#xA;</code></pre>&#xA;&#xA;<p>the object <code>o</code> will be empty because there are no instance variables but if you look at the ""class"" (via <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor"" rel=""nofollow""><code>Object.prototype.constructor</code></a> to get the ""class"" and <code>::</code> to get the prototype):</p>&#xA;&#xA;<pre><code>o.constructor::p&#xA;</code></pre>&#xA;&#xA;<p>you'll see things.</p>&#xA;&#xA;<p>If you add some instance variables (i.e. something that really is part of your object):</p>&#xA;&#xA;<pre><code>class C&#xA;  constructor: -&gt; @p = 6&#xA;</code></pre>&#xA;&#xA;<p>then you'll see them in the object:</p>&#xA;&#xA;<pre><code>c = new C&#xA;console.log c&#xA;# { p: 6 } will appear in the console&#xA;</code></pre>&#xA;",479863,"",,"",,2015-08-10T17:54:26,"","",,5,,,
31977438,2,,31969238,2015-08-13T00:07:45,,3,,"<p>There does appear to be a resize event:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/nwjs/nw.js/issues/799"" rel=""nofollow"">https://github.com/nwjs/nw.js/issues/799</a></li>&#xA;<li><a href=""https://github.com/nwjs/nw.js/wiki/window"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/window</a></li>&#xA;</ul>&#xA;&#xA;<p>You could use code like this to set your event listener:</p>&#xA;&#xA;<pre><code>gui = require('nw.gui');&#xA;w = gui.Window.get();&#xA;w.on('resize', yourFunctionHere);&#xA;</code></pre>&#xA;&#xA;<p>but be careful about changing the window size in the handler (e.g. using <code>resizeTo()</code>) as that will trigger a resize and could cause all kinds of chaos.  It might work to make the resize conditional on the current aspect ratio, but I can imagine you could still run into problems if you hit some limit or other.  Offhand I don't know if there are some facilities (akin to event bubbling &amp;c) that would help in this situation.</p>&#xA;",3476918,"",,"",,2015-08-13T00:07:45,"","",,0,,,
32058361,2,,32058265,2015-08-17T19:38:27,,8,,"<p>Minification is generally to save bandwidth when downloading script files over the internet, so there isn't any real point to minifying your node.js files on your server if they aren't served anywhere.</p>&#xA;&#xA;<p>I really doubt your server's storage needs to save a few kilobytes.</p>&#xA;",3038608,"",,"",,2015-08-17T19:38:27,"","",,1,,,
32052326,2,,32038709,2015-08-17T13:58:09,,10,,"<p>In the nedb docs it says followings :</p>&#xA;&#xA;<blockquote>&#xA;  <p>localStorage has size constraints, so it's probably a good idea to set&#xA;  recurring compaction every 2-5 minutes to save on space if your client&#xA;  app needs a lot of updates and deletes. See <a href=""https://github.com/louischatriot/nedb#compacting-the-database"" rel=""noreferrer"">database compaction</a> for&#xA;  more details on the append-only format used by NeDB.</p>&#xA;</blockquote>&#xA;&#xA;<p>&nbsp;    </p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Compacting the database</strong></p>&#xA;  &#xA;  <p>Under the hood, NeDB's persistence uses an append-only format, meaning&#xA;  that all updates and deletes actually result in lines added at the end&#xA;  of the datafile. The reason for this is that disk space is very cheap&#xA;  and appends are much faster than rewrites since they don't do a seek.&#xA;  The database is automatically compacted (i.e. put back in the&#xA;  one-line-per-document format) everytime your application restarts.</p>&#xA;  &#xA;  <p>You can manually call the compaction function with&#xA;  yourDatabase.persistence.compactDatafile which takes no argument. It&#xA;  queues a compaction of the datafile in the executor, to be executed&#xA;  sequentially after all pending operations.</p>&#xA;  &#xA;  <p>You can also set automatic compaction at regular intervals with&#xA;  yourDatabase.persistence.setAutocompactionInterval(interval), interval&#xA;  in milliseconds (a minimum of 5s is enforced), and stop automatic&#xA;  compaction with yourDatabase.persistence.stopAutocompaction().</p>&#xA;  &#xA;  <p>Keep in mind that compaction takes a bit of time (not too much: 130ms&#xA;  for 50k records on my slow machine) and no other operation can happen&#xA;  when it does, so most projects actually don't need to use it.</p>&#xA;</blockquote>&#xA;&#xA;<p>I didn't use this but it seems , it uses localStorage and it has append-only format for update and delete methods.</p>&#xA;&#xA;<p>When investigated its source codes, <a href=""https://github.com/louischatriot/nedb/search?utf8=%E2%9C%93&amp;q=%24%24deleted"" rel=""noreferrer"">in that search</a> in persistence.tests they wanted to sure checking <code>$$delete</code> key also they have mentioned `If a doc contains $$deleted: true, that means we need to remove it from the data``. </p>&#xA;&#xA;<p>So, In my opinion you can try to compacting db manually, or in your question; second way can be useful.</p>&#xA;",1136403,"",,"",,2015-08-17T13:58:09,"","",,3,,,
21216636,2,,21108598,2014-01-19T12:16:28,,1,,"<p>I figured this out, after downloading the node-webkit source code and building a few times editing <code>page-setup.cc::CalculateSizesWithinRect</code> has allowed me to print without margins.</p>&#xA;&#xA;<p>The source code now reads</p>&#xA;&#xA;<pre><code>void PageSetup::CalculateSizesWithinRect(const gfx::Rect&amp; bounds, int text_height) {&#xA;  effective_margins_.header = 0;&#xA;  effective_margins_.footer = 0;&#xA;  effective_margins_.left = 0;&#xA;  effective_margins_.top = 0;&#xA;  effective_margins_.right = 0;&#xA;  effective_margins_.bottom = 0;&#xA;</code></pre>&#xA;",871617,"",871617,"",2014-01-19T22:02:51,2014-01-19T22:02:51,"","",,4,,,
21207797,2,,21054355,2014-01-18T18:01:36,,3,,"<p>e.g create a link in your app.&#xA;Set a on click event handler on this link.&#xA;Set a data attribute with the URL of the pdf file.&#xA;Then use <a href=""https://github.com/rogerwang/node-webkit/wiki/Shell"" rel=""nofollow"">gui.Shell.openExternal()</a> method to open the pdf with the system default application.</p>&#xA;&#xA;<p>html code:</p>&#xA;&#xA;<pre><code>...&#xA;&lt;a id=""pdfLink"" data-href=""file://file.pdf""&gt;&lt;/a&gt;&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>javascript code:</p>&#xA;&#xA;<pre><code>...&#xA;$('#pdfLink').on('click', function () {&#xA;  gui.Shell.openExternal($(this).data('href'));&#xA;});&#xA;...&#xA;</code></pre>&#xA;",1177850,"",,"",,2014-01-18T18:01:36,"","",,2,,,
21209170,2,,21033221,2014-01-18T20:01:32,,4,,"<p>You could use the canvas tag to resize your image.</p>&#xA;&#xA;<p>Load the image in a canvas with the new size:</p>&#xA;&#xA;<pre><code>...&#xA;var tempCanvas = document.createElement('canvas');&#xA;tempCanvas.width = newWidth;&#xA;tempCanvas.height = newHeight;&#xA;var ctx = tempCanvas.getContext('2d');&#xA;var img = new Image();&#xA;img.src = imageSrc;&#xA;img.onload = function () {&#xA;  ctx.drawImage(this, 0, 0);&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Get resized image back from canvas:</p>&#xA;&#xA;<pre><code>...&#xA;var image = canvas.toDataURL('image/png');&#xA;image = image.replace('data:image/png;base64,', '');&#xA;var buffer = new Buffer(image, 'base64');&#xA;fs.writeFile('filename.png', buffer, function (error) {&#xA;  if (error) {&#xA;    // TODO handle error&#xA;  }&#xA;});&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>In this example the resulting image will be a png. You can use as result type whatever node-webkit supports. If you have different image types as input and want to output in the same type you need to add some code that sets the correct mime type to <code>canvas.toDataURL</code>.</p>&#xA;",1177850,"",,"",,2014-01-18T20:01:32,"","",,2,,,
27832061,2,,25385431,2015-01-08T02:31:58,,1,,"<p>I had the same issue and managed to fix it by authorizing the node context to remote sites.</p>&#xA;&#xA;<p>Simply add the <a href=""https://github.com/rogerwang/node-webkit/wiki/Manifest-format#node-remote"" rel=""nofollow"">node-remote</a> configuration item to your <em>package.json</em> file. (But be warned that this can cause some libraries to load differently as they will detect the change in context).</p>&#xA;&#xA;<pre><code>{&#xA;    node-remote : ""*"" // Or the src url of your iframe&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Google login should be working fine after that. </p>&#xA;",1323349,"",,"",,2015-01-08T02:31:58,"","",,1,,,
27893605,2,,27893565,2015-01-12T00:10:32,,1,,"<p>You should use <a href=""http://nodejs.org/docs/latest/api/child_process.html#child_process_child_process_spawn_command_args_options"" rel=""nofollow""><code>.spawn()</code></a> instead of <code>.exec()</code>/<code>.execFile()</code> for streaming the output:</p>&#xA;&#xA;<pre><code>var spawn = require('child_process').spawn;&#xA;&#xA;var child = spawn(""path/to/the/file"", args);&#xA;&#xA;child.stdout.on('data', function(data) {&#xA;  console.log(data.toString());&#xA;});&#xA;&#xA;child.on('close', function(code, signal) {&#xA;  // process exited and no more data available on `stdout`/`stderr`&#xA;});&#xA;</code></pre>&#xA;",2050455,"",2050455,"",2016-08-29T15:27:05,2016-08-29T15:27:05,"","",,0,,,
28002315,2,,26599550,2015-01-17T17:42:13,,3,,"<p>You can't use anything other than pure html5 as your main file as far as node-webkit is concerned.  You would have to use the <a href=""https://www.npmjs.com/package/ejs"" rel=""nofollow"">ejs</a> module to first compile the content you want to appear in your document, then place said content into the document as you wish.</p>&#xA;&#xA;<p>Here's an example that might help:</p>&#xA;&#xA;<p>index.html</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;script&gt;&#xA;        var fs = require('fs');&#xA;        var ejs = require('ejs');&#xA;&#xA;        fs.readFile('./index.ejs', function(err, data){&#xA;            if(err){&#xA;                document.body.innerHTML = err.toString();&#xA;                return;&#xA;            }&#xA;&#xA;            var template = ejs.compile(data.toString());&#xA;            document.body.innerHTML = template({ name: 'world' });&#xA;        });&#xA;    &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    Not yet rendered...&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>index.ejs</p>&#xA;&#xA;<pre><code>&lt;div&gt;hello, &lt;%= name %&gt;!&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>Make sure that you have ejs installed as a dependency through npm, then when you run this, your body should then contain:</p>&#xA;&#xA;<pre><code>&lt;div&gt;hello, world!&lt;/div&gt;&#xA;</code></pre>&#xA;",2939688,"",,"",,2015-01-17T17:42:13,"","",,0,,,
28005682,2,,28000089,2015-01-17T23:55:09,,3,,"<p>Found it...</p>&#xA;&#xA;<p>This code always got executed:</p>&#xA;&#xA;<pre><code>return done(null, false, {&#xA;    error : 'Incorrect username or password.'&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>moving the code into the else branch of  if (doc) fixes the problem.</p>&#xA;",756233,"",,"",,2015-01-17T23:55:09,"","",,0,,,
28034319,2,,27923107,2015-01-19T22:06:37,,5,,"<p>Could you provide the complete portion of code you are testing ?</p>&#xA;&#xA;<p>The following snippet works fine on OSX (tested with <code>nw.js 0.12.0</code>):</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>var gui = require('nw.gui');&#xA;gui.Shell.openExternal('http://www.google.com');&#xA;</code></pre>&#xA;&#xA;<p>Also, the <code>gui.Shell.openItem</code> command is not made to execute commands (see the <a href=""https://github.com/nwjs/nw.js/wiki/Shell"" rel=""noreferrer"">Shell documentation</a>).</p>&#xA;&#xA;<p>You should rather use the <a href=""http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"" rel=""noreferrer""><code>child_process</code></a> module shipped with nodejs:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>var exec = require('child_process').exec;&#xA;exec(commandString, function (error, stdout, stderr)&#xA;{&#xA;    console.log('stdout:' + stdout);&#xA;    console.log('stderr:' + stderr);&#xA;});&#xA;</code></pre>&#xA;",2992644,"",,"",,2015-01-19T22:06:37,"","",,0,,,
13505321,2,,13497037,2012-11-22T03:01:10,,2,,"<p>Currently you can do this in your app with some library like this: <a href=""http://www.seabreezecomputers.com/tips/find.htm"" rel=""nofollow"">http://www.seabreezecomputers.com/tips/find.htm</a></p>&#xA;&#xA;<p>In current node-webkit there is no native UI to support this feature, but we'll see it in future if it has advantage.</p>&#xA;",180197,"",,"",,2012-11-22T03:01:10,"","",,1,,,
26153994,2,,26152395,2014-10-02T03:14:00,,1,,"<p>It may depend on how you're starting node-webkit and how you're setting your <code>PATH</code>.  When I start from the command line, it inherits the environment variables from my command-line environment, including <code>PATH</code>.  If I start by double clicking in a gui, it inherits from the system (presumably <code>/etc/paths</code>), and any additions I make in my .bashrc/.bash_profile have no effect.</p>&#xA;&#xA;<p>Also, I'm no security expert, but my understanding of best practices would include using an absolute path to the executable you're running, so it's harder to spoof by setting an environment variable.  By that measure, you're better off using the full path to <code>brew</code> anyway.</p>&#xA;",3476918,"",,"",,2014-10-02T03:14:00,"","",,5,,,
26171948,2,,26163539,2014-10-03T01:12:39,,1,,"<p>It's more typically related to the common program name that the user sees, but it doesn't have to be.  For example on the Mac, the standard location for app specific data is <code>~/Library/Application Support/</code>.  When I look there I see things like <code>GIMP</code>, <code>Skype</code>, <code>XDK</code> &amp;c.  If your app happened to have the same name as another app, it would cause problems as they'd both writing to the same location, i.e. if I gave my app the name <code>GIMP</code>, both apps would try to write files to that dir.</p>&#xA;&#xA;<p>Typically a user doesn't have to access this directly, so there's probably no harm in using a UUID here, though I would probably append it to a name related to my app name, just for clarity/simplicity, i.e. instead of making the name <code>foo</code> I'd make it <code>foo-&lt;UUID&gt;</code>.</p>&#xA;&#xA;<p>But I'm no expert . . . .</p>&#xA;",3476918,"",,"",,2014-10-03T01:12:39,"","",,0,,,
26192822,2,,26192726,2014-10-04T12:29:06,,1,,"<p>Twitter Bootstrap's requires <a href=""http://jquery.com/"" rel=""nofollow"">jQuery</a>. It seems like you forgot to include it. You should download it and insert <code>&lt;script src=""jquery-1.11.0.min.js""&gt;&lt;/script&gt;</code> right before where you include <code>bootstrap.js</code>.</p>&#xA;",1797198,"",,"",,2014-10-04T12:29:06,"","",,1,,,
26215763,2,,26215684,2014-10-06T11:58:13,,1,,"<p>To refer to the same path, prepend <code>./</code>, otherwise it will resolve to <code>node_modules</code> in the current or a parent directory.</p>&#xA;&#xA;<pre><code>var officegen = require('./officegen/lib/index.js'); &#xA;</code></pre>&#xA;&#xA;<p><a href=""http://nodejs.org/api/modules.html#modules_file_modules"" rel=""nofollow"">http://nodejs.org/api/modules.html#modules_file_modules</a></p>&#xA;",941764,"",,"",,2014-10-06T11:58:13,"","",,6,,,
26298990,2,,26298862,2014-10-10T12:01:54,,1,,<p>That's not really a good idea. Just create a folder for app files and put downloaded packages there.</p>&#xA;,1391953,"",,"",,2014-10-10T12:01:54,"","",,2,,,
26204989,2,,26204935,2014-10-05T16:59:42,,5,,"<p>The tilde <code>~</code> is a bash function, so Node doesn't recognize its meaning. </p>&#xA;&#xA;<p>In this case, you will need to use the absolute path of your home directory in the <code>readDirSync()</code> function.</p>&#xA;&#xA;<p>On Unix systems, you can also use the environment variable $HOME, of which ~ is an alias. </p>&#xA;&#xA;<pre><code>var path = process.env.HOME;&#xA;</code></pre>&#xA;&#xA;<p>The Windows equivalent environment variable is HOMEPATH.</p>&#xA;&#xA;<p>Edit : </p>&#xA;&#xA;<p><strong>As OP mentioned, the npm pakage path-extra provides a homedir() method which is cross-platforms</strong></p>&#xA;",2383685,"",2383685,"",2014-10-05T17:24:34,2014-10-05T17:24:34,"","",,6,,,
26280142,2,,16434533,2014-10-09T13:47:45,,19,,<p>You can use nodewebkit command called nwsnapshot to compile the javascript code into binary which will be loaded into the app without specifying any js file </p>&#xA;&#xA;<pre><code>nwsnapshot --extra-code application.js application.bin&#xA;</code></pre>&#xA;&#xA;<p>in your <code>package.json</code> add this:</p>&#xA;&#xA;<pre><code>snapshot: 'application.bin'&#xA;</code></pre>&#xA;,3464230,"",3489230,"",2014-10-09T14:07:40,2014-10-09T14:07:40,"","",,3,,,
39627992,2,,39627721,2016-09-21T23:26:08,,0,,"<p>One approach to this problem is to bind the .load event for all images and then you will know when the image has finished loading, after a src change.  I'm not sure if there is a more direct way to observe src changes.  However, for this to work consistently, you need to bind .load before anything touches the image element's .src.</p>&#xA;&#xA;<p>If you are creating the image elements dynamically that shouldn't be a problem, or if you are re-using the same image tags over and over that shouldn't be an issue (besides for the initial first load on page load, but you probably don't need to worry about that?)</p>&#xA;",2143424,"",,"",,2016-09-21T23:26:08,"","",,3,,,
39662260,2,,39578613,2016-09-23T13:38:38,,0,,"<p>Coming back to this, I resolved it by saving the reference inside de callback : ""notificationWin = new_notification;"" and then just calling notificationWin.close();</p>&#xA;&#xA;<p>The first time I tried this it closed my main window but now works : )</p>&#xA;",3311928,"",,"",,2016-09-23T13:38:38,"","",,0,,,
39750017,2,,39661183,2016-09-28T14:11:30,,0,,"<p>You have to add ""Save as Pdf"" in the printer option : </p>&#xA;&#xA;<pre><code>win.print({&#xA;    printer: 'Save as Pdf',&#xA;    headerFooterEnabled: false&#xA;&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>As simple as that :) </p>&#xA;",1356026,"",,"",,2016-09-28T14:11:30,"","",,0,,,
39771356,2,,39617386,2016-09-29T13:14:12,,0,,"<p>We can disable the auto-launch at any time using : </p>&#xA;&#xA;<pre><code>appLauncher.disable();&#xA;</code></pre>&#xA;&#xA;<p>This is the full code : </p>&#xA;&#xA;<pre><code>var today = new Date();&#xA;var year = today.getFullYear();&#xA;var AutoLaunch = require('auto-launch');&#xA;var appLauncher = new AutoLaunch({&#xA;    name: 'app',&#xA;});&#xA;&#xA;appLauncher.isEnabled().then(function (enabled) {&#xA;    console.log(""start  "", enabled);&#xA;    if (enabled &amp;&amp; year &gt; ""2016"") {&#xA;        return  appLauncher.disable();&#xA;    }&#xA;    if (enabled) {&#xA;        return;&#xA;    }&#xA;    return appLauncher.enable();&#xA;&#xA;}).then(function (err) {&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Hope this will help :) </p>&#xA;",1356026,"",,"",,2016-09-29T13:14:12,"","",,0,,,
39678263,2,,39678147,2016-09-24T15:58:48,,1,,"<p>MongoDB allows you to specify a unique constraint on an index. These constraints prevent applications from inserting documents that have duplicate values for the inserted fields.</p>&#xA;&#xA;<p>Use the following code to make unique</p>&#xA;&#xA;<pre><code>db.collection.createIndex( { ""id"": 1 }, { unique: true } )&#xA;</code></pre>&#xA;&#xA;<p>Also refer the <a href=""https://docs.mongodb.com/v3.0/tutorial/create-a-unique-index/"" rel=""nofollow"">MongoDB documentation</a> for more clarification. </p>&#xA;",5849770,"",,"",,2016-09-24T15:58:48,"","",,0,,,
39684484,2,,39684470,2016-09-25T07:36:16,,1,,"<p>It looks like you're trying to use ES2015 functionality to print the URL. This needs backticks instead of normal quotes:</p>&#xA;&#xA;<pre><code>win.loadURL(`file://${__dirname}/index.html`)&#xA;</code></pre>&#xA;&#xA;<p>Or you could just use normal string concatonation:</p>&#xA;&#xA;<pre><code>win.loadURL('file://' + __dirname + '/index.html')&#xA;</code></pre>&#xA;&#xA;<p><strong>More Detailed Explanation</strong></p>&#xA;&#xA;<p>To expand on this, ES2015 (or ES6), is an updated specification for JavaScript which has been adopted by modern browsers and Node versions. It adds some functionality for including variables in Strings, which could be called 'Template Strings'. It allows you to instantiate a String with backticks (instead of single or double quotes) and allows you to drop variables into those strings delimited by a dollar sign and curly braces. It is designed to make String concatenation easier and more verbose.</p>&#xA;&#xA;<p>What you are doing in your code is using the dollar sign and curly braces, but not instantiating the String appropriately to make use of that functionality.</p>&#xA;&#xA;<p>See more <a href=""http://babeljs.io/docs/learn-es2015/#template-strings"" rel=""nofollow"">here</a>.</p>&#xA;",726766,"",726766,"",2016-09-25T09:05:35,2016-09-25T09:05:35,"","",,1,,,
39716553,2,,39714033,2016-09-27T05:22:53,,1,,"<p>You need to add </p>&#xA;&#xA;<pre><code>import injectTapEventPlugin from 'react-tap-event-plugin';&#xA;&#xA;injectTapEventPlugin();&#xA;</code></pre>&#xA;&#xA;<p>to the top level of your javascript files as explained in <a href=""http://www.material-ui.com/#/get-started/installation"" rel=""nofollow"">this</a> page of the documentation . It's because there is a dependencey on this module for <code>onTouchTap</code> to work So move it up before the class definition or to the top js file you have.</p>&#xA;",6710925,"",,"",,2016-09-27T05:22:53,"","",,1,,,
39733782,2,,39732845,2016-09-27T20:32:09,,1,,"<p>I was getting this problem when dragging the folder to the NW executable. When I packaged it, it worked fine.</p>&#xA;",2734665,"",,"",,2016-09-27T20:32:09,"","",,1,,,
39743748,2,,39741035,2016-09-28T09:45:01,,1,,"<p>First of all use <a href=""https://nodejs.org/api/fs.html#fs_class_fs_stats"" rel=""nofollow"">fs stats</a> to check if that is a directory. </p>&#xA;&#xA;<p>Then use <a href=""https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback"" rel=""nofollow"">fs node module</a> to read available files and folders in the folder.</p>&#xA;&#xA;<p><strong>UPDATE</strong></p>&#xA;&#xA;<p>If you use webpack as builder be sure to set up <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md#renderer-process"" rel=""nofollow""><code>target: ""electron-renderer""</code></a> as mentioned in <a href=""https://github.com/webpack/docs/wiki/Configuration#target"" rel=""nofollow"">webpack docs</a>.</p>&#xA;&#xA;<p>TS would complain at <code>import * as fs from 'fs'</code>.</p>&#xA;&#xA;<p><strong>First way</strong> to solve this issue is to add <code>declare var require:any</code> and use <code>const fs = require('fs')</code> - ugly hack.</p>&#xA;&#xA;<p><strong>Second</strong> is to add node typings <code>typings install dt~node -GS</code>, configure <code>tsconfig.json</code> as:</p>&#xA;&#xA;<pre><code>{&#xA;  ""compilerOptions"": {&#xA;    ""target"": ""ES6"",&#xA;    ""module"": ""commonjs"",&#xA;    ""removeComments"": true,&#xA;    ""emitDecoratorMetadata"": true,&#xA;    ""experimentalDecorators"": true,&#xA;    ""sourceMap"": true&#xA;  },&#xA;  ""exclude"": [&#xA;    ""node_modules""&#xA;  ],&#xA;  ""filesGlob"": [&#xA;    ""./src/customDefinitions.d.ts"",&#xA;    ""./src/app/**/*.ts"",&#xA;    ""!./node_modules/**/*.ts"",&#xA;    ""typings/index.d.ts""&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And use <code>import * as fs from 'fs';</code></p>&#xA;",3665197,"",3665197,"",2016-09-28T11:03:44,2016-09-28T11:03:44,"","",,0,,,
39750078,2,,39743152,2016-09-28T14:14:18,,1,,<p>The file is automatically saved in a Temp folder.<br>&#xA;just call: </p>&#xA;&#xA;<pre><code> window.open('output.pdf'); &#xA;</code></pre>&#xA;&#xA;<p>And that's it </p>&#xA;,1356026,"",,"",,2016-09-28T14:14:18,"","",,0,,,
39807783,2,,39795126,2016-10-01T14:29:21,,1,,"<p>It's best to be explicit when specifying paths, so if your icon is in the same directory as <code>index.html</code> you should do the following:</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;win.setOverlayIcon(path.join(__dirname, 'icon.ico', ''));&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-10-01T14:29:21,"","",,0,,,
39817186,2,,39753564,2016-10-02T12:50:11,,1,,"<p>Most probably the issue is with parser's config. Instead of a ReadLine parser:</p>&#xA;&#xA;<pre><code> parser: SerialPort.parsers.readline('W\n'),&#xA;</code></pre>&#xA;&#xA;<p>Try a Delimiter parser :</p>&#xA;&#xA;<pre><code>var weight_parser = port.pipe(new Delimiter({delimiter: new Buffer('W\n')}));&#xA;...&#xA;parser: weight_parser,&#xA;...&#xA;parser.on('data', console.log);&#xA;</code></pre>&#xA;&#xA;<p>If that does not work, to troubleshoot try a ByteLength parser to see if 'data' event is getting fired or not. </p>&#xA;",655855,"",,"",,2016-10-02T12:50:11,"","",,3,,,
39634522,2,,39633709,2016-09-22T08:57:06,,2,,"<p>If you don't want to fire every request at once, which seems to be the case reading the comments you made, then instead of running everything in parallel with:</p>&#xA;&#xA;<pre><code>.each(function (x) {&#xA;  // ...&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You can instead create an empty array before you run <code>fs.createReadStream</code>:</p>&#xA;&#xA;<pre><code>var requests = [];&#xA;</code></pre>&#xA;&#xA;<p>and in your <code>each</code> callback create functions to add to your array:</p>&#xA;&#xA;<pre><code>.each(function (x) {&#xA;  requests.push(function (next) {&#xA;    // ...&#xA;    next();&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>and then you can run it in series with:</p>&#xA;&#xA;<pre><code>async.series(requests);&#xA;</code></pre>&#xA;&#xA;<p>using the <a href=""https://www.npmjs.com/package/async"" rel=""nofollow""><code>async</code></a> module.</p>&#xA;&#xA;<p>Just make sure that the <code>next()</code> is called at the right moment, e.g. in the last <code>.then()</code> callback of the given chain of promises.</p>&#xA;&#xA;<p>Another way would be to use <code>async.queue</code>:</p>&#xA;&#xA;<pre><code>var queue = async.queue(function(x, callback) {&#xA;  // &#xA;  callback();&#xA;}, 1);&#xA;</code></pre>&#xA;&#xA;<p>(Here make sure that the <code>callback()</code> is called when it should. Instead of 1 at the end you could use some other number to have a certain number of requests done in parallel.)</p>&#xA;&#xA;<p>And then in your <code>each</code> callback:</p>&#xA;&#xA;<pre><code>.each(function (x) {&#xA;  queue.push(x);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>See the <a href=""http://caolan.github.io/async/docs.html#.queue"" rel=""nofollow"">async.queue</a> docs for more info. (Thanks to robertklep for mentioning <code>async.queue()</code> in the comments.)</p>&#xA;&#xA;<p>By the way: do you even use the <code>x</code> in your iterations or are you just making a bunch of identical request for each line of your input?</p>&#xA;&#xA;<h2>Example</h2>&#xA;&#xA;<p>To answer your question from the comments, here is a way to construct the array of functions.</p>&#xA;&#xA;<p>If this was your original code:</p>&#xA;&#xA;<pre><code>yourStream.each(function (x) {&#xA;  doRequest1()&#xA;  .then(function (response1) {&#xA;    return doRequest2();&#xA;  })&#xA;  .then(function (response2) {&#xA;    return doRequest3();&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then you could consruct that array of functions with something like:</p>&#xA;&#xA;<pre><code>var requests = [];&#xA;yourStream.each(function (x) {&#xA;  requests.push(function (next) {&#xA;    doRequest1()&#xA;    .then(function (response1) {&#xA;      return doRequest2();&#xA;    })&#xA;    .then(function (response2) {&#xA;      return doRequest3();&#xA;    })&#xA;    .then(function () {   &#xA;      next();&#xA;    });&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And you could run them with:</p>&#xA;&#xA;<pre><code>async.series(requests);&#xA;</code></pre>&#xA;&#xA;<p>Hope it helps.</p>&#xA;",613198,"",613198,"",2016-09-23T11:51:44,2016-09-23T11:51:44,"","",,4,,,
39637498,2,,39637255,2016-09-22T11:14:29,,2,,"<p>Use a proper filesystem path, without a scheme:</p>&#xA;&#xA;<pre><code>fs.accessSync(`${__dirname}/config/config.ini`, ...)&#xA;</code></pre>&#xA;",893780,"",,"",,2016-09-22T11:14:29,"","",,6,,,
39671285,2,,39671195,2016-09-24T00:24:26,,2,,"<p>For non-GUI applications, you can just use <a href=""https://nodejs.org"" rel=""nofollow"">node.js</a> directly. If you want to make a TUI, you can use node.js + a module like <a href=""https://github.com/chjj/blessed"" rel=""nofollow""><code>blessed</code></a> (and possibly <a href=""https://github.com/yaronn/blessed-contrib"" rel=""nofollow""><code>blessed-contrib</code></a>).</p>&#xA;",2050455,"",,"",,2016-09-24T00:24:26,"","",,0,,,
39725579,2,,39719888,2016-09-27T13:11:02,,2,,"<p>I've managed to fix this almost accidentally after bashing my head against my desk for a while. I was attempting to implement some logging to see whether there were issues with the node module not being recognised correctly when packaged, when I noticed the log file wasn't being created where I was expecting it to be - it was being created outside of the actual app directory and therefore was not accessible. The same thing happened with my database file.</p>&#xA;&#xA;<p>See fix below:</p>&#xA;&#xA;<pre><code>var db = new sqlite3.Database(__dirname + '/app.db');&#xA;</code></pre>&#xA;&#xA;<p>The addition of __dirname to the db file definition fixed the issue!</p>&#xA;",4070477,"",,"",,2016-09-27T13:11:02,"","",,1,,,
39823988,2,,39817320,2016-10-03T02:54:28,,2,,"<p>Electron provides the <a href=""http://electron.atom.io/docs/api/app/#appsetasdefaultprotocolclientprotocol-path-args-macos-windows"" rel=""nofollow""><code>app.setAsDefaultProtocolClient</code></a> API specifically for that purpose.</p>&#xA;",1259938,"",,"",,2016-10-03T02:54:28,"","",,5,,,
39832470,2,,39831261,2016-10-03T13:09:28,,2,,"<p>I found an easy way, you cannot rely on the window.on('hide') event.</p>&#xA;&#xA;<p>So in your shortcut registration, I made your app emit a custom event that your Vue.js will listen to reset your input before hiding the app:</p>&#xA;&#xA;<p>main.js</p>&#xA;&#xA;<pre><code>const retShow = globalShortcut.register('CmdOrCtrl+Alt+V', () =&gt; {&#xA;  if (!win.isVisible()) {&#xA;    win.show()&#xA;  } else {&#xA;    app.emit('hide-window'); // Let the window hide the app&#xA;  }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>In your Vue.js app, in the created hook:</p>&#xA;&#xA;<p>app.js</p>&#xA;&#xA;<pre><code>app.on('hide-window', function () {&#xA;  vm.reset();&#xA;  setTimeout(app.hide, 10);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Here my pull request: <a href=""https://github.com/Cronos87/electron-vue-flash-issue/pull/1/files"" rel=""nofollow"">https://github.com/Cronos87/electron-vue-flash-issue/pull/1/files</a></p>&#xA;",846206,"",,"",,2016-10-03T13:09:28,"","",,0,,,
39746814,2,,39746261,2016-09-28T11:58:35,,3,,"<p>Take a look at the ipc modules, <a href=""http://electron.atom.io/docs/api/ipc-main/"" rel=""nofollow"">ipcMain</a> and <a href=""http://electron.atom.io/docs/api/ipc-renderer/"" rel=""nofollow"">ipcRenderer</a>. The ipc module allows you to send and receive synchronous and asynchronous messages between the main and the render process.</p>&#xA;&#xA;<p>Here the print to PDF example from the <a href=""http://electron.atom.io/#get-started"" rel=""nofollow""><strong>ELECTRON API DEMOS</strong></a> app.</p>&#xA;&#xA;<p><strong>Renderer Process</strong></p>&#xA;&#xA;<pre><code>const ipc = require('electron').ipcRenderer&#xA;&#xA;const printPDFBtn = document.getElementById('print-pdf')&#xA;&#xA;printPDFBtn.addEventListener('click', function (event) {&#xA;  ipc.send('print-to-pdf')&#xA;})&#xA;&#xA;ipc.on('wrote-pdf', function (event, path) {&#xA;  const message = `Wrote PDF to: ${path}`&#xA;  document.getElementById('pdf-path').innerHTML = message&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><strong>Main Process</strong></p>&#xA;&#xA;<pre><code>const fs = require('fs')&#xA;const os = require('os')&#xA;const path = require('path')&#xA;const electron = require('electron')&#xA;const BrowserWindow = electron.BrowserWindow&#xA;const ipc = electron.ipcMain&#xA;const shell = electron.shell&#xA;&#xA;ipc.on('print-to-pdf', function (event) {&#xA;  const pdfPath = path.join(os.tmpdir(), 'print.pdf')&#xA;  const win = BrowserWindow.fromWebContents(event.sender)&#xA;  // Use default printing options&#xA;  win.webContents.printToPDF({}, function (error, data) {&#xA;    if (error) throw error&#xA;    fs.writeFile(pdfPath, data, function (error) {&#xA;      if (error) {&#xA;        throw error&#xA;      }&#xA;      shell.openExternal('file://' + pdfPath)&#xA;      event.sender.send('wrote-pdf', pdfPath)&#xA;    })&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",4878695,"",,"",,2016-09-28T11:58:35,"","",,1,,,
39625904,2,,39580639,2016-09-21T20:21:33,,4,,"<p>just figured I'd let you all know the solution I found. Turns out when you do an ng-build using the CLI it is completely dropping the dist folder and then remakes it using the src folder. This means it gets rid of the main.js, renderer.js, and package.json electron needs which are stored in the dist folder.</p>&#xA;&#xA;<p>In order to ensure the Electron files (main.js, package.json, and renderer.js) get carried over to the Dist folder each time I use ng build, I set up a task using GulpJS to copy them to the correct location. Anyways, hope this helps anyone facing the same issue!</p>&#xA;",6850360,"",,"",,2016-09-21T20:21:33,"","",,3,,,
39611756,2,,39610578,2016-09-21T08:51:04,,5,,"<blockquote>&#xA;  <p>Whats the difference between the two? electron-packager and electron-builder.</p>&#xA;</blockquote>&#xA;&#xA;<p>electron-builder includes electron-packager. electron-packager only pack your app, but electron-builder pack, build in distributable format (e.g. dmg, setup exe, AppImage) and publish to GitHub Releases or Bintray.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The problem with the app(created from electron-builder) is that, everytime I run the app(MyApp) on </p>&#xA;</blockquote>&#xA;&#xA;<p>You should handle Squirrel.Windows events, please see <a href=""https://github.com/electron/windows-installer#handling-squirrel-events"" rel=""noreferrer"">https://github.com/electron/windows-installer#handling-squirrel-events</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Why can't I create an installer like other windows application.</p>&#xA;</blockquote>&#xA;&#xA;<p>Using electron-builder, you can — just set <code>build.win.target</code> to <code>nsis</code> and <code>build.nsis.perMachine</code> to <code>true</code>. Please see all available options — <a href=""https://github.com/electron-userland/electron-builder/wiki/Options#NsisOptions"" rel=""noreferrer"">https://github.com/electron-userland/electron-builder/wiki/Options#NsisOptions</a></p>&#xA;",1910191,"",,"",,2016-09-21T08:51:04,"","",,5,,,
49354569,2,,49354526,2018-03-19T01:27:57,,2,,"<p>You can use <strong><a href=""https://electronjs.org/docs/api/screen"" rel=""nofollow noreferrer"">the screen API</a></strong>, and use a fixed with to offset from the edge of the screen:</p>&#xA;&#xA;<pre><code>let display = electron.screen.getPrimaryDisplay();&#xA;let width = display.bounds.width;&#xA;win = new BrowserWindow({&#xA;  width: 600,&#xA;  x: width - 600,&#xA;  y: 0&#xA;});&#xA;</code></pre>&#xA;",2341603,"",,"",,2018-03-19T01:27:57,"","",,0,,,
49364849,2,,49364464,2018-03-19T14:01:27,,0,,"<p>The error says clearly what's wrong:</p>&#xA;&#xA;<p><code>EACCES: permission denied, access '/usr/lib/node_modules/sinopia'</code></p>&#xA;&#xA;<p>And also provides a solution:</p>&#xA;&#xA;<p><code>Please try running this command again as root/Administrator</code></p>&#xA;&#xA;<p>So, just run the command as an administrator, like this: <code>sudo npm install -g sinopia</code>.</p>&#xA;",4518022,"",,"",,2018-03-19T14:01:27,"","",,0,,,
49365901,2,,48499495,2018-03-19T14:55:12,,0,,<p>It seems like there is no way to specify build order.&#xA;Finally I've ended up splitting config into several separate config's using Webpack merge + moved call to electron builder to NPM script. </p>&#xA;,5298800,"",,"",,2018-03-19T14:55:12,"","",,0,,,
49368889,2,,49178456,2018-03-19T17:23:12,,1,,<p>There are two ways to get Auth object then sign in.</p>&#xA;&#xA;<pre><code>import Amplify from 'aws-amplify';&#xA;&#xA;Amplify.Auth.signIn(...)&#xA;</code></pre>&#xA;&#xA;<p>Or</p>&#xA;&#xA;<pre><code>import { Auth } from 'aws-amplify';&#xA;&#xA;Auth.signIn(...)&#xA;</code></pre>&#xA;,920054,"",,"",,2018-03-19T17:23:12,"","",,0,,,
49392169,2,,49392033,2018-03-20T18:56:41,,1,,"<p>Socket.io is likely the easiest way to do what you are trying to do. It'll allow you to communicate between the machines with a relatively low amount of effort.</p>&#xA;&#xA;<p>Sockets generally work on a ""server"" and ""client"" basis, so you may want a central server that will coordinate with the clients.</p>&#xA;&#xA;<p><a href=""https://nodesource.com/blog/understanding-socketio/"" rel=""nofollow noreferrer"">This blog post from node source provides a really good intro to using them.</a> </p>&#xA;",4358492,"",,"",,2018-03-20T18:56:41,"","",,0,,,
49394690,2,,49393845,2018-03-20T21:51:03,,0,,"<p>I found the solution by myself, I just had to create a fileProtocol interceptor in my electron app:</p>&#xA;&#xA;<pre><code>function createMainWindow() {&#xA;&#xA;  protocol.interceptFileProtocol('file', function(req, callback) {&#xA;    var url = req.url.substr(7);&#xA;    callback({path: path.normalize(__dirname + url)})&#xA;  },function (error) {&#xA;    if (error)&#xA;      console.error('Failed to register protocol')&#xA;  })&#xA;...&#xA;</code></pre>&#xA;",74264,"",,"",,2018-03-20T21:51:03,"","",,0,,,
49403418,2,,49261747,2018-03-21T10:08:27,,0,,"<p>Changing <code>href</code> in the navBar to: <code>#&lt;componentName&gt;</code> fixed the issue. &#xA;Example: </p>&#xA;&#xA;<pre><code>&lt;li class=""nav-item waves-light"" mdbRippleRadius&gt;&#xA;                &lt;a class=""nav-link"" href=""#about""&gt;About&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;</code></pre>&#xA;",3468639,"",,"",,2018-03-21T10:08:27,"","",,0,,,
49436885,2,,49436292,2018-03-22T19:24:51,,1,,"<p>The solution is to simply add <code>excludeChunks: [""secondary""],</code> to the original <code>HtmlWebpackPlugin</code> property.</p>&#xA;&#xA;<h3>In its totality:</h3>&#xA;&#xA;<pre><code> new HtmlWebpackPlugin({&#xA;  inject: true,&#xA;  template: paths.appHtml,&#xA;  excludeChunks: [""secondary""]&#xA;}),&#xA;new HtmlWebpackPlugin({&#xA;  inject: true,&#xA;  chunks: [""secondary""],&#xA;  template: paths.secondaryHtml,&#xA;  filename: 'secondary.html',&#xA;}),&#xA;</code></pre>&#xA;",5178406,"",,"",,2018-03-22T19:24:51,"","",,0,,,
49462021,2,,49426346,2018-03-24T06:44:40,,3,,"<p>I managed to solve it, I'm posting it in case anyone needs a clear answer regarding <code>Blockly.prompt</code> overriding. It seems the <code>callback</code> function when overriding must return the string of the new variable, so I tried using the <code>promise</code> within the overriding and calling a simple function just to apply the value of <code>then()</code> as follows:</p>&#xA;&#xA;<pre><code>var prompt = require('electron-prompt');&#xA;var renameVar = function(name)&#xA;{&#xA;    return name;&#xA;}&#xA;&#xA;Blockly.prompt = function(msg, defaultValue, callback)&#xA;{&#xA;    prompt&#xA;    ({&#xA;        title: 'Renaming',&#xA;        label: 'Renaming variable to:',&#xA;        type: 'input'&#xA;    }).then((name)=&gt;{callback(renameVar(name))})&#xA;}&#xA;</code></pre>&#xA;",3439351,"",,"",,2018-03-24T06:44:40,"","",,0,,,
49479777,2,,49471440,2018-03-25T19:03:28,,0,,"<p>This turned out to be an issue with the nw.js build in use. I tried nightly build 30, and its now working as intended with nwjc compiled js on macos.</p>&#xA;",906805,"",,"",,2018-03-25T19:03:28,"","",,0,,,
49519289,2,,49478050,2018-03-27T17:43:31,,0,,"<p>After spending a lot of time, I finally found <a href=""http://electron.rocks/angular2-electron/"" rel=""nofollow noreferrer"">this hack</a>. Now I have the following code which works for me:&#xA;File <code>index.html</code>:</p>&#xA;&#xA;<pre><code>&lt;!doctype html&gt;&#xA;&lt;html lang=""en""&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=""utf-8""&gt;&#xA;  &lt;title&gt;Fotomanager&lt;/title&gt;&#xA;  &lt;base href=""./""&gt;&#xA;&#xA;  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;&#xA;  &lt;link rel=""icon"" type=""image/x-icon"" href=""favicon.ico""&gt;&#xA;&#xA;  &lt;script&gt;  &#xA;    var electron = require('electron');  &#xA;  &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;  &lt;app-root&gt;&lt;/app-root&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>And <code>my.component.ts</code>:</p>&#xA;&#xA;<pre><code>import { Component } from '@angular/core';&#xA;&#xA;declare var electron: any;&#xA;&#xA;@Component({&#xA;  selector: 'app-root',&#xA;  templateUrl: './app.component.html',&#xA;  styleUrls: ['./app.component.css']&#xA;})&#xA;export class AppComponent {&#xA;  title = 'FotoManager';&#xA;&#xA;  openImages(){&#xA;    console.log(""function called"");&#xA;    electron.remote.dialog.showOpenDialog({properties: ['openFile', 'openDirectory', 'multiSelections']});&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",4919526,"",,"",,2018-03-27T17:43:31,"","",,0,,,
49548008,2,,49547966,2018-03-29T04:23:47,,1,,"<p>In dev mode the file is where you expect it to be, but most likely, your production code is running from a different file location. So...</p>&#xA;&#xA;<p>This will likely be a path problem. Try to create absolute paths everywhere to ease this pain.  You can use node <code>__dirname</code> to help with this.</p>&#xA;",9078341,"",9078341,"",2018-03-29T04:36:55,2018-03-29T04:36:55,"","",,0,,,
49555459,2,,49517953,2018-03-29T11:59:08,,0,,"<p>This is how I fixed my issue for Aurelia Skeleton Typescript with JSPM &amp; SystemJS: I put in index.html head which is my entry:</p>&#xA;&#xA;<pre><code>  &lt;script type=""text/javascript""&gt;&#xA;    window.node_require = require;&#xA;    delete window.require;&#xA;    delete window.exports;&#xA;    delete window.module;&#xA;  &lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Then I set <code>nodeIntegration: true</code> for BrowserWindow.</p>&#xA;&#xA;<p>And in my TS file:</p>&#xA;&#xA;<pre><code>declare global {&#xA;  interface Window {&#xA;    node_require: any;&#xA;  }&#xA;}&#xA;&#xA;var remote: any;&#xA;&#xA;if (typeof window.node_require == ""function"") {&#xA;  remote = window.node_require('electron').remote;&#xA;}&#xA;&#xA;  closeApp() {&#xA;    var window = remote.getCurrentWindow();&#xA;    window.close();&#xA;  }&#xA;</code></pre>&#xA;",7803933,"",,"",,2018-03-29T11:59:08,"","",,0,,,
49368502,2,,49368339,2018-03-19T17:00:56,,1,,"<p>Well, JavaScript is giving you what you are asking for:</p>&#xA;&#xA;<pre><code>var checkedBoxes = document.querySelectorAll('input[...');&#xA;</code></pre>&#xA;&#xA;<p><code>querySelectorAll</code> returns a <code>NodeList</code> of <code>HTMLInputElement</code> (in this case).</p>&#xA;&#xA;<p>If you want the actual file names, the easiest way would be for you to set every <code>checkbox</code>'s <code>value</code> property with the filename:</p>&#xA;&#xA;<pre><code>files.forEach(file =&gt; {&#xA;                    document.getElementById('list').innerHTML +=&#xA;                            '&lt;input type=""checkbox"" name=""mycheckboxes"" value=""' + file + '""&gt;' + &#xA;file + '&lt;br&gt;';&#xA;            });&#xA;</code></pre>&#xA;&#xA;<p>Then you can get the filenames (in <code>next</code> function):</p>&#xA;&#xA;<pre><code>var checkedBoxes = document.querySelectorAll('input[name=mycheckboxes]:checked');&#xA;var files = [];&#xA;for (var i = 0; i &lt; checkedBoxes.length; i++) {&#xA;    files.push(checkedBoxes[i].value);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And no, you can't use <code>forEach</code> with a variable of type <code>NodeList</code> as it is not an array, but an array-like object.</p>&#xA;",3203588,"",,"",,2018-03-19T17:00:56,"","",,1,,,
49412517,2,,49412192,2018-03-21T17:05:24,,1,,"<p>Hard to answer, as your project is in such an early stage, maybe <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Editable_content"" rel=""nofollow noreferrer"">content editable</a> is what you want to use, but this would mean you have to develop it all from scratch</p>&#xA;&#xA;<p>But yeah your idea sounds ok too, have a button to switch the page into a kind of edit mode, let the user change elements of the page and finally save the modified version before turning it back to view mode</p>&#xA;&#xA;<p>Or you use a library like react and use plugins like this <a href=""https://www.npmjs.com/package/react-contenteditable"" rel=""nofollow noreferrer"">content editable plugin</a> or use a wysiwyg editor like <a href=""https://github.com/jpuri/react-draft-wysiwyg"" rel=""nofollow noreferrer"">draft</a> </p>&#xA;",656689,"",,"",,2018-03-21T17:05:24,"","",,1,,,
49444817,2,,49434416,2018-03-23T07:54:30,,1,,"<p>You can expect unique ID for every instance based on the current source (1.8.4 release or 2.0.0-beta.5)</p>&#xA;&#xA;<p>On the native side <code>BrowserWindow</code> implementation inherits from <code>TrackableObject</code> which actually handles IDs. <code>win.id</code> API looks like <a href=""https://github.com/electron/electron/blob/v2.0.0-beta.5/atom/browser/api/atom_api_window.cc#L983"" rel=""nofollow noreferrer"">this</a></p>&#xA;&#xA;<pre class=""lang-cpp prettyprint-override""><code>int32_t Window::ID() const {&#xA;  return weak_map_id();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>ID returned by <code>weak_map_id()</code> is constructed in <code>TrackableObject</code> like <a href=""https://github.com/electron/electron/blob/b429dafa381bb9685e347f5547a03861ab4f2b19/atom/browser/api/trackable_object.h#L121"" rel=""nofollow noreferrer"">this</a></p>&#xA;&#xA;<pre class=""lang-cpp prettyprint-override""><code>weak_map_id_ = ++next_id_;&#xA;weak_map_-&gt;Set(isolate, weak_map_id_, wrapper);&#xA;</code></pre>&#xA;&#xA;<p>where <code>next_id_</code> is a static member across trackable instances and is never decreased.</p>&#xA;&#xA;<p>Thus, browser IDs should always keep incrementing during the whole run of your app regardless of deletions. </p>&#xA;&#xA;<hr>&#xA;&#xA;<p>The following silly example confirms the behavior</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow } = require('electron')&#xA;let win = null&#xA;app.once('ready', () =&gt; {&#xA;  setInterval(() =&gt; {&#xA;    win = new BrowserWindow()&#xA;    console.log(win.id)&#xA;  }, 1000)&#xA;  setInterval(() =&gt; {&#xA;    win.destroy()&#xA;  }, 2100)&#xA;})&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2018-03-23T08:27:30,2018-03-23T08:27:30,"","",,1,,,
49500300,2,,49500170,2018-03-26T20:44:18,,1,,"<p>Just prevent the default behavior when a <kbd>Ctrl</kbd>+<kbd>Backspace</kbd> is pressed:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var ta = document.getElementById(""ta"");&#xD;&#xA;&#xD;&#xA;ta.addEventListener(""keydown"", function(ev) {       // when a keydown event happens in the textarea&#xD;&#xA;  if(ev.ctrlKey &amp;&amp; ev.keyCode === 8) {              // check if control key is pressed along with the backspace (key code 8)&#xD;&#xA;    ev.preventDefault();                            // if so, prevent the default behavior of this event&#xD;&#xA;  }&#xD;&#xA;});</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;textarea id=""ta""&gt;&lt;/textarea&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p><strong>Note:</strong> After you prevent the default behavior, you can do whatever you like (add some text at the current cursor, delete some characters, ... anything you want).</p>&#xA;",9867451,"",9867451,"",2018-03-26T20:50:21,2018-03-26T20:50:21,"","",,1,,,
49342975,2,,49342888,2018-03-17T23:31:36,,2,,"<p>I think what you're looking for is <code>global.require</code> as stated in <a href=""https://stackoverflow.com/a/37349344/1423359"">this similar question</a>.</p>&#xA;&#xA;<p>Note that as it's Node's <code>require</code>, it will cache required module, so modifying a plugin's code will not have effect until you restart your electron application so that it does call <code>global.require</code> again. If that is an issue, you can <em>force-reload</em> a specific module with this (unrecommended) snippet:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>delete global.require.cache[global.require.resolve(moduleName)]&#xA;</code></pre>&#xA;",1423359,"",,"",,2018-03-17T23:31:36,"","",,2,,,
49446451,2,,49416674,2018-03-23T09:37:48,,6,,"<p>Whatever way you access the HTML you can always render it in your page if you parse it as a string. If you want to read from a file you can do something like:</p>&#xA;&#xA;<pre><code>const fs = require('fs')&#xA;&#xA;fs.readFile('path/to/thehtml.html', (err, data) =&gt; {&#xA;   document.getElementById('some-element').innerHTML = data&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>If you want the user to select the file you should use Electron's <code>dialog</code> API which allows you to prompt the user with a dialog for choosing a file. Or you could have an input where they can enter the text and read from there. </p>&#xA;",1034110,"",1034110,"",2018-03-25T19:58:32,2018-03-25T19:58:32,"","",,3,,,
49553597,2,,49552703,2018-03-29T10:20:54,,4,,"<p>Yes, the passed command line arguments appear in the <code>process.argv</code> array, but only from the <strong>main process</strong>.</p>&#xA;&#xA;<p>From a <strong>renderer process</strong>, you'll need to access the main process arguments using <a href=""https://electronjs.org/docs/api/remote#remoteprocess"" rel=""nofollow noreferrer"">remote.process</a>:</p>&#xA;&#xA;<pre><code>require('electron').remote.process.argv&#xA;</code></pre>&#xA;",,user8022331,,user8022331,2018-03-29T11:17:22,2018-03-29T11:17:22,"","",,3,,,
49376852,2,,49363577,2018-03-20T05:23:38,,4,,"<p>I was using powershell which has some unexpected behavior.Check <a href=""https://github.com/ElectronNET/Electron.NET/issues/28"" rel=""nofollow noreferrer"">here</a> for more details.</p>&#xA;",3971546,"",,"",,2018-03-20T05:23:38,"","",,4,,,
49524130,2,,49523482,2018-03-28T00:00:37,,1,,"<p>NSIS itself (makensis and the stubs) needs to be built with the logging turned on for <code>LogSet</code> to work.</p>&#xA;&#xA;<p>You can <a href=""http://nsis.sourceforge.net/Special_Builds"" rel=""nofollow noreferrer"">download a logging build</a> from the NSIS website.</p>&#xA;",3501,"",,"",,2018-03-28T00:00:37,"","",,4,,,
49533164,2,,49143875,2018-03-28T11:20:39,,2,,"<p>First of all to use the sign script (written by me ;) ) you need to change the paths. &#xA;Contents/Versions/64.0.3282.186 has to be changed to the path of the version you have. I guess Contents/Versions/57.0.2987.133/</p>&#xA;&#xA;<p>If you want to change the name you might also have to change.&#xA;Contents/Resources/en.lproj/InfoPlist.strings - CFBundleDisplayName&#xA;I deleted it.</p>&#xA;&#xA;<p>Apple does not recognize that immediately. To speed this up you can go to the terminal and do the following command. ""touch your_app.app"" &#xA;Apple resets the know parameters for this app now. </p>&#xA;&#xA;<p>If you want to change the name of the nwjs helper.app you have to do the following. </p>&#xA;&#xA;<ul>&#xA;<li><p>Add a product string to you package.json with the name like this (Important: DO NOT ADD THE STRING HELPER)</p>&#xA;&#xA;<pre><code>{&#xA;""name"": ""your_app"",&#xA;""version"": ""0.0.1"",&#xA;""main"": ""index.html"",&#xA;""window"": {&#xA;  ""width"": 1150,&#xA;  ""height"": 650,&#xA;  ""show_in_taskbar"": true&#xA;},&#xA;""scripts"": {&#xA;  ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1""&#xA;},&#xA;""product_string"": ""your_app"", //THIS IS WHAT YOU ADD&#xA;""dependencies"": {&#xA;}&#xA;}&#xA;</code></pre></li>&#xA;<li><p>Contents/Versions/n.n.n.n/nwjs Helper.app/Contents/MacOS/nwjs Helper - rename the file to ‘your_app Helper’</p></li>&#xA;<li>Contents/Versions/n.n.n.n/nwjs Helper.app/Contents/Info.plist - change CFBundleDisplayName = your_app Helper</li>&#xA;<li>Contents/Versions/n.n.n.n/nwjs Helper.app - rename the directory to ‘your_app Helper.app’</li>&#xA;</ul>&#xA;&#xA;<p>You might also have to do the touch command for the ...helper.app but usually u don't. </p>&#xA;&#xA;<p>For more Infos look a &#xA;<a href=""http://docs.nwjs.io/en/latest/For%20Users/Package%20and%20Distribute/"" rel=""nofollow noreferrer"">http://docs.nwjs.io/en/latest/For%20Users/Package%20and%20Distribute/</a> &#xA;Section Mac OS X</p>&#xA;",1551974,"",,"",,2018-03-28T11:20:39,"","",,4,,,
49474791,2,,49348298,2018-03-25T10:27:13,,0,,"<p>This code is working, but I was using multimedia keys shortcuts with module <a href=""https://electronjs.org/docs/api/global-shortcut"" rel=""nofollow noreferrer"">globalShortcuts</a> and because of that this element didn't appear.</p>&#xA;",2452483,"",,"",,2018-03-25T10:27:13,"","",,5,,,
49511611,2,,49508950,2018-03-27T11:22:49,,2,,"<p>getUserMedia can be very... peculiar currently in most browsers, electron included.</p>&#xA;&#xA;<p>First, make sure you are using your constraints correctly. To get 4k you should be trying something similar to this:</p>&#xA;&#xA;<pre><code>{&#xA;  audio: false,&#xA;  video: {&#xA;    width: { exact: 3840 },&#xA;    height: { exact: 2160 }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then if that works, go from there on toning down the constraints to get other non-UHD webcams to work. Make sure you <a href=""https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia"" rel=""nofollow noreferrer"">read up on the constraints and what is possible here</a>, and always include the <a href=""https://github.com/webrtc/adapter"" rel=""nofollow noreferrer"">WebRTC adapter.js</a> even in the latest version of electron it is still needed (mainly for converstion of error names to the proper ""standard"" ones).</p>&#xA;&#xA;<p>Most likely you will end up with a constraints setup similar to this:</p>&#xA;&#xA;<pre><code>{&#xA;  audio: false,&#xA;  video: {&#xA;    width: {&#xA;      min: 1280,&#xA;      ideal: 3840,&#xA;      max: 3840&#xA;    },&#xA;    height: {&#xA;      min: 720,&#xA;      ideal: 2160,&#xA;      max: 2160&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>That will make the browser attempt to get a 4k resolution, but then will step down to a minimum of 720p if needed.</p>&#xA;&#xA;<p>Also, if you want to check if your browser/camera supports UHD correctly, you can always try <a href=""https://webrtchacks.github.io/WebRTC-Camera-Resolution/"" rel=""nofollow noreferrer"">this website</a> which will run a test to get which resolutions getUserMedia supports on your system.</p>&#xA;&#xA;<p>And finally, make sure you are choosing the right camera. Many new devices are including multiple environment-facing cameras, and if you don't define the <code>deviceId</code> you want to use, the useragent will pick for you, and they often choose poorly (for example, a Kyocera phone I recently worked with used a wide-angle lens by default unless told otherwise, and the wide-angle lens didn't support any ""normal"" resolutions making it fallback to a very low resolution and very strange aspect ratio.</p>&#xA;",1724045,"",1724045,"",2018-05-15T14:31:44,2018-05-15T14:31:44,"","",,5,,,
53462862,2,,53456844,2018-11-24T22:22:20,,1,,"<p>Using <code>location.assign('#start');</code> works for me inside a local URL.</p>&#xA;&#xA;<p>You may want to try something like this (untested) from the main process:</p>&#xA;&#xA;<pre><code>let window = new BrowserWindow(/*...*/);&#xA;window.loadURL(""http://google.com"");&#xA;//&#xA;window.webContents.executeJavaScript(""location.assign('#start');"");&#xA;</code></pre>&#xA;&#xA;<p>References:</p>&#xA;&#xA;<ul>&#xA;<li><p><a href=""https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture-callback"" rel=""nofollow noreferrer"">contents.executeJavaScript()</a></p></li>&#xA;<li><p><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Location/assign"" rel=""nofollow noreferrer"">Location.assign()</a></p></li>&#xA;</ul>&#xA;",,user8022331,,"",,2018-11-24T22:22:20,"","",,0,,,
53482747,2,,53481433,2018-11-26T14:00:01,,1,,"<p><a href=""https://electronjs.org/docs/tutorial/notifications"" rel=""nofollow noreferrer"">Notifications</a> says all about it.</p>&#xA;&#xA;<p>From main process</p>&#xA;&#xA;<pre><code>new Notification({&#xA;  title: 'My Title',&#xA;  body: 'Lorem Ipsum Dolor Sit Amet'&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>From renderer process</p>&#xA;&#xA;<pre><code>new Notification('My Title', {&#xA;  body: 'Lorem Ipsum Dolor Sit Amet'&#xA;})&#xA;</code></pre>&#xA;",4377266,"",,"",,2018-11-26T14:00:01,"","",,0,,,
53486446,2,,53426331,2018-11-26T17:45:14,,3,,"<p>I found a solution. You can run a preload.js into a window on creation and then call the items like javascript objects.</p>&#xA;&#xA;<p>Found this issue on the github&#xA;<a href=""https://github.com/electron/electron/issues/9920"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/9920</a></p>&#xA;&#xA;<pre><code>  mainWindow = new BrowserWindow({&#xA;    width: 800, &#xA;    height: 600,&#xA;    webPreferences: {&#xA;      nodeIntegration: false,&#xA;      preload: __dirname + '/preload.js'&#xA;    }&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>Preload.js</p>&#xA;&#xA;<pre><code>const { dialog } = require('electron').remote;&#xA;window.electron = {};&#xA;window.electron.dialog = dialog;&#xA;</code></pre>&#xA;&#xA;<p>Then anything I want to load into the window I can just add to the window.electron object and call it with no issues. React pre-compiler is more the issue than anything with electron.</p>&#xA;",2927848,"",-1,"",2019-09-24T05:24:52,2019-09-24T05:24:52,"","",,0,,,
53488591,2,,53488517,2018-11-26T20:31:01,,0,,"<p>Have you tried :</p>&#xA;&#xA;<pre><code>nightmare&#xA;.goto('https://www.google.com')&#xA;.end(() =&gt; 'some value')&#xA;//prints ""some value""&#xA;.then(data =&gt; console.log(data));&#xA;</code></pre>&#xA;&#xA;<p>?</p>&#xA;",8166445,"",,"",,2018-11-26T20:31:01,"","",,0,,,
53526745,2,,44813403,2018-11-28T19:28:58,,1,,"<p>This issue has since been fixed.</p>&#xA;&#xA;<p>All I need to do now is set the <code>nativeWindowOpen</code> and <code>allowpopups</code> attributes on my webview tag, and I can use the native <code>window.open</code>.</p>&#xA;&#xA;<pre><code>&lt;webview webpreferences=""nativeWindowOpen=yes"" allowpopups /&gt;&#xA;</code></pre>&#xA;",3479456,"",,"",,2018-11-28T19:28:58,"","",,0,,,
53569631,2,,53538559,2018-12-01T09:56:54,,0,,"<p>For anyone who may come across this question in the future with the same problem, I solved it by using:</p>&#xA;&#xA;<p><strong><a href=""https://github.com/standard-things/esm"" rel=""nofollow noreferrer"">ESM:  Tomorrow's ECMAScript modules today!</a></strong>.</p>&#xA;&#xA;<p>Further, I restructured my code so that the constants file I am sharing between the <em>Main Process</em> and the <em>Renderer Process</em> is now located within my <code>./build</code> folder with the <em>Main Process</em> files. </p>&#xA;&#xA;<p><strong>Project Structure:</strong></p>&#xA;&#xA;<pre><code>root&#xA;│&#xA;├── build (main process)&#xA;│   ├── js&#xA;│   │   ├── main&#xA;│   │   │   ├── mainElectronESM.js&#xA;│   │   │   └── mainElectron.js&#xA;│   │   └── support&#xA;│   │       └── constants.js&#xA;│   └── package.json&#xA;│&#xA;├── source (render process)&#xA;│   └── js&#xA;│       └── index.js&#xA;│&#xA;└── package.json&#xA;</code></pre>&#xA;&#xA;<p><strong>constants.js</strong></p>&#xA;&#xA;<pre><code>export {&#xA;&#xA;    Location,&#xA;    People,&#xA;};&#xA;&#xA;const Location = {&#xA;&#xA;    COUNTRY: ""Canada"",&#xA;    CITY: ""Montreal""&#xA;};&#xA;&#xA;const People = {&#xA;&#xA;    OWNER: ""Mr. Owner"",&#xA;    MANAGER: ""Mrs. Manager"",&#xA;    DEVELOPER: ""Mr. Developer"",&#xA;};&#xA;</code></pre>&#xA;&#xA;<p><strong>mainElectronESM.js</strong> <em>(Main Process, Node CJS)</em></p>&#xA;&#xA;<pre><code>require = require(""esm"")(module);&#xA;module.exports = require(""./mainElectron.js"");&#xA;</code></pre>&#xA;&#xA;<p><strong>mainElectron.js</strong> <em>(Main Process, Node ESM)</em></p>&#xA;&#xA;<pre><code>import { app } from ""electron"";&#xA;import * as C from ""../support/constants.js"";&#xA;&#xA;app.on(""ready"", () =&gt; {&#xA;&#xA;    console.log(`${C.People.DEVELOPER} lives in ${C.Location.CITY}`);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>index.js</strong> <em>(Render Process, Web ESM)</em></p>&#xA;&#xA;<pre><code>import * as C from ""../../build/js/support/constants.js"";&#xA;&#xA;console.log(`${C.People.DEVELOPER} lives in ${C.Location.CITY}`);&#xA;</code></pre>&#xA;",336929,"",336929,"",2018-12-01T10:15:43,2018-12-01T10:15:43,"","",,0,,,
53574566,2,,53569452,2018-12-01T19:59:41,,1,,"<p>Are you calling it from a view? (an html file)&#xA;It must be called in the main process (main.js) and it is a BrowserWindow method.</p>&#xA;&#xA;<p><code>win.webContents.toggleDevTools();</code> where <code>win</code> is your BrowserWindow object.</p>&#xA;&#xA;<p>If you need to open the dev tools from the view, look into ipcRenderer</p>&#xA;",10732816,"",,"",,2018-12-01T19:59:41,"","",,0,,,
53594831,2,,53593571,2018-12-03T13:24:40,,0,,"<p>Apparently this worked:</p>&#xA;&#xA;<pre><code>asar pack . app.asar --unpack-dir ""node_modules/electron"" &amp;&amp; rd ""app.asar.unpacked"" /s /q&#xA;</code></pre>&#xA;",5592493,"",,"",,2018-12-03T13:24:40,"","",,0,,,
53599285,2,,53564469,2018-12-03T17:59:27,,1,,"<p>I was able to solve my own issue. It turns out as long as you enable nodeIntegration in your background window to run the web worker, you can actually use NodeJS in the web worker.</p>&#xA;&#xA;<p>What was throwing my error was that I was requiring the node modules via electron.remote(). In the web worker, you can just import node modules as you normally would in node, with require(). </p>&#xA;&#xA;<p>This <a href=""https://github.com/trusktr/electron-web-worker-example/blob/master/src/worker.js"" rel=""nofollow noreferrer"">repository</a> details how to use node modules in web workers inside Electron.</p>&#xA;",8115597,"",,"",,2018-12-03T17:59:27,"","",,0,,,
53610675,2,,53223100,2018-12-04T10:20:20,,0,,"<p>In case of running a compressed package, code is not able to find chromedriver.exe file</p>&#xA;&#xA;<p>For solving this, I added chromedriver.exe file to a folder and pointed to its path in the code In case of running a compressed package, code is not able to find chromedriver.exe file</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/w2dSz.png"" rel=""nofollow noreferrer"">Chromedriver.js code</a></p>&#xA;",4708730,"",,"",,2018-12-04T10:20:20,"","",,0,,,
53612021,2,,53538215,2018-12-04T11:31:24,,8,,"<p>It's a very old regression bug in Electron project.</p>&#xA;&#xA;<p>See <a href=""https://github.com/electron/electron/issues/15947"" rel=""noreferrer"">https://github.com/electron/electron/issues/15947</a></p>&#xA;&#xA;<p>To bypass that problem, just downgrade to <s><code>1.4.16</code></s> <code>2.0.16</code>, the last working version.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>EDIT 1 : if you wait at least 300ms after ready event to open windows it will work correctly</p>&#xA;&#xA;<pre><code>app.on('ready', () =&gt; setTimeout(onAppReady, 300));&#xA;</code></pre>&#xA;&#xA;<p>And you do not need <code>--disable-gpu</code> option in your package.json</p>&#xA;&#xA;<pre><code>""start"": ""electron --enable-transparent-visuals .""&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>EDIT 2 :&#xA;To make it works out of the box, use this repo : <a href=""https://gitlab.com/doom-fr/electron-transparency-demo"" rel=""noreferrer"">https://gitlab.com/doom-fr/electron-transparency-demo</a></p>&#xA;&#xA;<pre><code>git clone https://gitlab.com/doom-fr/electron-transparency-demo&#xA;cd electron-transparency-demo&#xA;npm install&#xA;npm start&#xA;# or npm run startWithTransparentOption&#xA;# or npm run startWithAllOptions&#xA;</code></pre>&#xA;&#xA;<p>for me works with <code>npm start</code> and <code>npm run startWithTransparentOption</code></p>&#xA;",1619521,"",1619521,"",2019-02-20T16:10:43,2019-02-20T16:10:43,"","",,0,,,
53627346,2,,53625950,2018-12-05T07:37:45,,0,,"<p>It was because I saved the excel file in my app folder.</p>&#xA;&#xA;<p>After I changed fileName's path outside app folder, there was no reload.</p>&#xA;&#xA;<p>May this be helpful for some developers who are in the same level with me.</p>&#xA;&#xA;<p>referecne : <a href=""https://github.com/Unitech/pm2/issues/2710#event-959600970"" rel=""nofollow noreferrer"">https://github.com/Unitech/pm2/issues/2710#event-959600970</a></p>&#xA;",9628022,"",,"",,2018-12-05T07:37:45,"","",,0,,,
53636773,2,,53290156,2018-12-05T16:33:37,,0,,"<p>I was able to finally get things working by doing the following:</p>&#xA;&#xA;<ul>&#xA;<li>copy all the assets found in my node package under /dist/collection/assets into my own static/assets folder</li>&#xA;<li>copy all the compiled javascript source code to static/js/</li>&#xA;</ul>&#xA;&#xA;<p>then from the html, if i refer to the code found in static everything resolves correctly.</p>&#xA;&#xA;<p>I don't know why I need to move things around from my node_modules directory into my local application directory, but at least it works!</p>&#xA;",2179289,"",,"",,2018-12-05T16:33:37,"","",,0,,,
53638713,2,,53638404,2018-12-05T18:36:50,,1,,"<p>According to the Electron documentation, <code>window.open</code> returns a <a href=""https://electronjs.org/docs/api/browser-window-proxy"" rel=""nofollow noreferrer"">BrowserWindowProxy</a> object:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Class: BrowserWindowProxy</p>&#xA;  &#xA;  <p>Process: Renderer</p>&#xA;  &#xA;  <p>The <code>BrowserWindowProxy</code> object is returned from <code>window.open</code>  and&#xA;  provides limited functionality with the child window.</p>&#xA;</blockquote>&#xA;&#xA;<p>Instead of:</p>&#xA;&#xA;<pre><code>myWindow.document.body.innerHTML = ""&lt;iframe allowFullScreen='true'&gt;&lt;/iframe&gt;"";&#xA;</code></pre>&#xA;&#xA;<p>you may try:</p>&#xA;&#xA;<pre><code>myWindow.eval (`document.body.innerHTML = ""&lt;iframe allowFullScreen='true'&gt;&lt;/iframe&gt;"";`);&#xA;</code></pre>&#xA;&#xA;<p>Please note the use of the back-tick string notation here to avoid having to escape both single and double quotes, but it's definitely a matter of taste...</p>&#xA;&#xA;<p>HTH...</p>&#xA;",,user8022331,,"",,2018-12-05T18:36:50,"","",,0,,,
53656835,2,,53656462,2018-12-06T17:33:33,,1,,"<p>You have two options I can think of.</p>&#xA;&#xA;<p>1) ACLs which will take a bit of a learning curve.&#xA;2) Simple permissions and groups which can be done quite easily.</p>&#xA;&#xA;<p>I created a group mygroup and added a couple of users to it.</p>&#xA;&#xA;<pre><code># groupadd mygroup&#xA;# usermod -G mygroup user1&#xA;# usermod -G mygroup user2&#xA;</code></pre>&#xA;&#xA;<p>I then change the permissions and group on the folder you want the users to have access to:</p>&#xA;&#xA;<pre><code># chmod 02770  /opt/pcapp/resourcees/monitor&#xA;# chgrp mygroup /opt/pcapp/resourcees/monitor&#xA;</code></pre>&#xA;&#xA;<p>You should now see the following:</p>&#xA;&#xA;<pre><code># ls -ld /opt/pcapp/resourcees/monitor&#xA;drwxrws---. 4 root mygroup 4096 Dec  6 17:23 /opt/pcapp/resourcees/monitor&#xA;</code></pre>&#xA;&#xA;<p>Now any <strong>new</strong> file created in the folder will have a group mygroup. You will have to change existing files and folders.</p>&#xA;&#xA;<p>As user2</p>&#xA;&#xA;<pre><code>$ touch /opt/pcapp/resourcees/monitor/testfile1&#xA;$ ls -ld /opt/pcapp/resourcees/monitor/testfile1&#xA;-rw-rw-r--. 1 user2 mygroup 0 Dec  6 17:29 /opt/pcapp/resourcees/monitor/testfile1&#xA;</code></pre>&#xA;&#xA;<p>As user1</p>&#xA;&#xA;<pre><code>$ rm -v /opt/pcapp/resourcees/monitor/testfile1 &#xA;removed ‘/opt/pcapp/resourcees/monitor/testfile1’&#xA;</code></pre>&#xA;&#xA;<p>If this isn't granular enough, read about Linux ACLs.</p>&#xA;&#xA;<p>Hope this helps.</p>&#xA;",3829197,"",,"",,2018-12-06T17:33:33,"","",,0,,,
53510624,2,,53396434,2018-11-28T01:12:06,,1,,"<p>You could use <code>npm</code> as a child process.</p>&#xA;&#xA;<p>You can implement your own:</p>&#xA;&#xA;<pre><code>require('child_process').exec(&#xA;  'npm ...',&#xA;  { maxBuffer: 1024 * 500 },&#xA;  function (error, stdout, stderr) {&#xA;    var response = JSON.parse(stdout).dependencies;&#xA;    ...&#xA;  }&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>or use a library, as an example: <a href=""https://github.com/getstation/electron-package-manager"" rel=""nofollow noreferrer"">https://github.com/getstation/electron-package-manager</a></p>&#xA;",2308745,"",,"",,2018-11-28T01:12:06,"","",,1,,,
53538183,2,,53535101,2018-11-29T11:38:08,,3,,"<p>Add the <code>""perMachine"": true,</code> option, e.g.:</p>&#xA;&#xA;<pre><code>""build"": {&#xA;  ""fileAssociations"": [&#xA;    {&#xA;      ""ext"": ""asdf"",&#xA;      ""name"": ""ASDF File"",&#xA;      ""role"": ""Editor"",&#xA;      ""perMachine"": true&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The reason it is needed, is because on Windows, per-user installed program cannot register file associations, and that is the default setting.</p>&#xA;",1129815,"",,"",,2018-11-29T11:38:08,"","",,1,,,
53484911,2,,53453504,2018-11-26T16:03:07,,3,,"<p>I found this : <a href=""https://github.com/maximegris/angular-electron"" rel=""nofollow noreferrer"">https://github.com/maximegris/angular-electron</a>&#xA;It's an empty project template, using Electron and Angular.&#xA;Execute <code>yarn start</code> allow the hot reloading.&#xA;It's well written in the README.md !</p>&#xA;",10626524,"",,"",,2018-11-26T16:03:07,"","",,2,,,
53640310,2,,53587048,2018-12-05T20:34:09,,2,,"<p>Fixed the issue for myself:</p>&#xA;&#xA;<ol>&#xA;<li>Delete node modules folder</li>&#xA;</ol>&#xA;&#xA;<p></p>&#xA;&#xA;<ol start=""2"">&#xA;<li><p>Open PowerShell with admin privileges and run in order</p>&#xA;&#xA;<p>npm install --global --production --vs2015 --add-python-to-path windows-build-tools</p>&#xA;&#xA;<p>npm install --global --production --add-python-to-path windows-build-tools node-gyp</p></li>&#xA;</ol>&#xA;&#xA;<p></p>&#xA;&#xA;<ol start=""3"">&#xA;<li><p>Go to <code>~/.npmrc</code> and make sure these are your settings:</p>&#xA;&#xA;<p>msvs_version=2015</p>&#xA;&#xA;<p>python=python2.7</p></li>&#xA;</ol>&#xA;",5875610,"",,"",,2018-12-05T20:34:09,"","",,2,,,
53472646,2,,53472235,2018-11-25T22:26:45,,3,,"<p>Your JSON contains single quotes, rather than double quotes, which will throw an error.&#xA;<br>&#xA;You are also using ANSI escape codes, versus UTF-16 codes. UTF-16 codes are what JSON use, therefore producing an error when your Javascript attempts to read the JSON.&#xA;<br>&#xA;It's also possible you were using UTF-8 escape codes, which share 127 identical characters to ANSI. In that case, you could use <a href=""http://www.fileformat.info/info/unicode/"" rel=""nofollow noreferrer"">http://www.fileformat.info/info/unicode/</a> to convert your commands to UTF-16.</p>&#xA;",9307371,"",9307371,"",2018-11-27T04:50:28,2018-11-27T04:50:28,"","",,3,,,
53531190,2,,53508839,2018-11-29T02:58:08,,5,,"<p>If you want to test, just start a local server then put your files (dmg, zip, yml, json) there (assuming that's on localhost:3000). Then, call API <code>.setFeedURL</code> (<a href=""https://www.electron.build/auto-update#module_electron-updater.AppUpdater+setFeedURL"" rel=""nofollow noreferrer"">document here</a>). </p>&#xA;&#xA;<p>For example: <code>autoUpdater.setFeedURL(""http://localhost:3000/latest-mac.json"")</code> and call <code>autoUpdater.checkForUpdates()</code>. </p>&#xA;&#xA;<p>Note from  electron-builder document:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Note that in order to develop/test UI/UX of updating without packaging&#xA;  the application you need to have a file named dev-app-update.yml in&#xA;  the root of your project, which matches your publish setting from&#xA;  electron-builder config (but in yaml format). But it is not&#xA;  recommended, better to test auto-update for installed application&#xA;  (especially on Windows). Minio is recommended as a local server for&#xA;  testing updates.</p>&#xA;</blockquote>&#xA;",6522713,"",6522713,"",2019-07-09T02:46:43,2019-07-09T02:46:43,"","",,3,,,
53482010,2,,53481346,2018-11-26T13:19:04,,4,,"<p><a href=""https://blazor.net/docs/components/index.html#lifecycle-methods"" rel=""nofollow noreferrer"">Blazor live cycle</a> don't have any method ready to be called <code>OnExit</code>.</p>&#xA;&#xA;<p>An idea may be to <a href=""https://blazor.net/docs/components/index.html#component-disposal-with-idisposable"" rel=""nofollow noreferrer"">implement IDisposable on your component</a> and call <code>saveState</code> &#xA; from <code>Dispose</code>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>If a component implements IDisposable, the Dispose method is called when the component is removed from the UI. </p>&#xA;</blockquote>&#xA;&#xA;<pre><code>@using System&#xA;@implements IDisposable&#xA;&#xA;...&#xA;&#xA;@functions {&#xA;    public void Dispose()&#xA;    {&#xA;        //anti-pattern work around&#xA;        //liveCycle OnUnload don't exists&#xA;        save_your_state();&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><em>Disclaimer: This approach is an anti-pattern and it is just a workaround until a more elegant solution be ready.</em></p>&#xA;",842935,"",,"",,2018-11-26T13:19:04,"","",,4,,,
53595118,2,,53592389,2018-12-03T13:43:51,,2,,"<p>Try to reinstall modules:</p>&#xA;&#xA;<p><code>rm -rf node_modules &amp;&amp; npm i</code></p>&#xA;&#xA;<p>If it has no effect, try to set executable flag of build script:</p>&#xA;&#xA;<p><code>chmod +x ""$(npm bin)/build""</code></p>&#xA;",1193884,"",,"",,2018-12-03T13:43:51,"","",,6,,,
53523388,2,,53523191,2018-11-28T15:54:57,,3,,"<p>You will have to use <code>NgZone.run()</code>. More here - <a href=""https://angular.io/api/core/NgZone"" rel=""nofollow noreferrer"">Angular NgZone</a>. That's what I had to do to make Angular work with Electron and using route navigation inside <code>ipcRenderer</code>.</p>&#xA;&#xA;<h3>Example</h3>&#xA;&#xA;<pre><code>import { OnInit, NgZone } from '@angular/core';&#xA;let ipcRenderer = require('electron').ipcRenderer;&#xA;&#xA;export class MyComponent implements OnInit {&#xA;&#xA;    constructor(private ngZone: NgZone) { }&#xA;&#xA;    ngOnInit() {&#xA;        ipcRenderer.on('goto-sar', (event, arg) =&gt; {&#xA;            this.ngZone.run(() =&gt; {&#xA;                this.openSar();&#xA;            });&#xA;        });&#xA;    }&#xA;&#xA;}&#xA;</code></pre>&#xA;",4377266,"",,"",,2018-11-28T15:54:57,"","",,7,,,
26475116,2,,26287822,2014-10-20T21:21:10,,0,,"<p>Remove max_width and max_height. Those restrict the size to 800x600. </p>&#xA;&#xA;<p><a href=""https://groups.google.com/forum/#!topic/node-webkit/1n8rTqwv_V0"" rel=""nofollow"">https://groups.google.com/forum/#!topic/node-webkit/1n8rTqwv_V0</a></p>&#xA;",3617959,"",,"",,2014-10-20T21:21:10,"","",,1,,,
26329336,2,,26329287,2014-10-12T19:54:38,,1,,"<p>You could check </p>&#xA;&#xA;<pre><code>navigator.userAgent&#xA;</code></pre>&#xA;&#xA;<p>or write your code in a way that you're first checking the features you want to use and fall back to another solution, which is the recommended way in most cases. Because what if some feature gets implemented in an update? You want to go back and change your code every time any browser updates?</p>&#xA;",3288831,"",,"",,2014-10-12T19:54:38,"","",,0,,,
26397515,2,,26396168,2014-10-16T06:20:19,,1,,<p>This script moves the window to the center of the other screen (if there is one).</p>&#xA;&#xA;<pre><code>var gui = require('nw.gui');&#xA;&#xA;// initialize the Screen singleton&#xA;gui.Screen.Init();&#xA;&#xA;// get the current window&#xA;var win = gui.Window.get();&#xA;&#xA;function moveToOtherWindow() {&#xA;    for(var i = 0; i &lt; gui.Screen.screens.length; i++) {&#xA;        var screen = gui.Screen.screens[i];&#xA;        // check if the window is horizontally outside the bounds of this screen&#xA;        if (win.x &lt; screen.bounds.x || win.x &gt; screen.bounds.x + screen.bounds.width) {&#xA;            // move the window to this screen&#xA;            win.x = screen.bounds.x + (screen.bounds.width - win.width) / 2;&#xA;            win.y = screen.bounds.y + (screen.bounds.height - win.height) / 2;&#xA;            break;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;moveToOtherWindow();&#xA;</code></pre>&#xA;,3212415,"",3212415,"",2014-10-16T06:27:52,2014-10-16T06:27:52,"","",,2,,,
26448928,2,,26445797,2014-10-19T08:55:50,,1,,"<p>The 'document-start' event should be helpful. See <a href=""https://github.com/rogerwang/node-webkit/wiki/Window#document-start"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/Window#document-start</a></p>&#xA;&#xA;<p>See also Window.eval() in <a href=""https://github.com/rogerwang/node-webkit/wiki/Window#windowevalframe-script"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/Window#windowevalframe-script</a></p>&#xA;",180197,"",,"",,2014-10-19T08:55:50,"","",,0,,,
26472278,2,,26173143,2014-10-20T18:17:41,,1,,"<p>I am working on a similar issue. It appears that we have access to webkit's page cache, but it is defaulted to disabled. In package.json you would have to add:</p>&#xA;&#xA;<pre><code>""webkit"": {                             // (object) controls what features of WebKit should be on/off.&#xA;""plugin"": false,                      // (boolean) whether to load external browser plugins like Flash, default to false.&#xA;""java"": false,                        // (boolean) whether to load Java applets, default to false.&#xA;""page-cache"": true                   // (boolean) whether to enable page cache, default to false. }&#xA;</code></pre>&#xA;&#xA;<p>Given that you have turned the page-cache on you must also manage clearing the cache as there would be no mechanism for the end user to clear it themselves unless you provide it. So you would at some point either programmatically or by user input need to call:</p>&#xA;&#xA;<pre><code>// Load native UI library&#xA;var gui = require('nw.gui');&#xA;&#xA;// Clear the HTTP cache in memory and on disk. This method call is synchronized.&#xA;gui.App.clearCache();&#xA;</code></pre>&#xA;&#xA;<p>*I haven't run the code and in another post I see that there may be some problem with the clearCache() method, so a way of handling this manually is suggested <a href=""https://stackoverflow.com/questions/25143532/node-webkit-clear-cache"">Node Webkit clear cache</a></p>&#xA;",1700884,"",-1,"",2017-05-23T11:57:10,2014-10-20T19:56:25,"","",,0,,,
26475767,2,,18872259,2014-10-20T22:09:48,,1,,<p>An extensible way is to create your own prompts with a javascript modal window.  Many of the common JS frameworks have easy ways of creating a modal window which will give you complete control over the text and inputs being displayed.</p>&#xA;,3617959,"",,"",,2014-10-20T22:09:48,"","",,0,,,
26441482,2,,26373592,2014-10-18T15:37:45,,2,,"<p>Yes, it is possible and below is the code for each of the files.</p>&#xA;&#xA;<p>You can download the entire <a href=""https://drive.google.com/file/d/0BxelXtnaMWq-Zi1vem1LUTVqZmc/view?usp=sharing"" rel=""nofollow"">file here</a> </p>&#xA;&#xA;<p>INDEX.HTML</p>&#xA;&#xA;<pre><code>&lt;iframe src=""iframe.html"" frameborder=""2"" height=""200px"" width=""100%"" &gt;&lt;/iframe&gt;&#xA;</code></pre>&#xA;&#xA;<p>IFRAME.HTML</p>&#xA;&#xA;<pre><code>&lt;body style=""background:#cecece;""&gt;&#xA;&#xA;    &lt;h2&gt;This is an iFrame&lt;/h2&gt;&#xA;&#xA;    &lt;a href=""#"" id=""link""&gt;Right click here&lt;/a&gt;&#xA;&#xA;    &lt;script&gt;&#xA;&#xA;        // Load native UI library&#xA;        var nw = require('nw.gui');&#xA;&#xA;        // Create an empty menu&#xA;        var menu = new nw.Menu(); &#xA;&#xA;        // Add an item with label&#xA;        menu.append(new nw.MenuItem({ &#xA;            label: 'open in browser',&#xA;            click: function(e) {&#xA;                nw.Shell.openExternal('http://google.com'); &#xA;            }&#xA;        }));&#xA;&#xA;        // Listen for a right click on link&#xA;        document.getElementById('link').addEventListener('contextmenu', function(e) {&#xA;            e.preventDefault();&#xA;            menu.popup(e.x, e.y);&#xA;        });&#xA;&#xA;    &lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;&#xA;<p>PACKAGE.JSON</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""NW APP"",&#xA;  ""main"": ""index.html"",&#xA;  ""description"": ""Contextmenu from within an iframe""&#xA;}&#xA;</code></pre>&#xA;",2169313,"",2169313,"",2014-10-18T15:50:25,2014-10-18T15:50:25,"","",,2,,,
26332761,2,,25642385,2014-10-13T04:08:42,,10,,"<p>Confirmed. Full screen on v0.10.5 (node.js v0.11.13-pre) doesn't work for me either on Windows. I can notice it attempts to full screen but then goes back to a window for some reason.</p>&#xA;&#xA;<p>This isn't an ideal answer, but this is a workaround I've been using:</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;title&gt;Hello World!&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Hello World!&lt;/h1&gt;&#xA;    &lt;script&gt;&#xA;    var ngui = require('nw.gui');&#xA;    var nwin = ngui.Window.get();&#xA;    nwin.enterFullscreen();&#xA;    &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Full screen still works via the JavaScript call.</p>&#xA;",693291,"",,"",,2014-10-13T04:08:42,"","",,0,,,
26313829,2,,26311577,2014-10-11T10:51:17,,31,,"<p>This is because, when you run you app (main.js) using node-webkit the root (working) directory is where the index.html is in, so './' refers to that directory not the one in which the file you requesting the module from is in. </p>&#xA;&#xA;<p>You can easily solve this problem by using <a href=""http://nodejs.org/api/path.html#path_path_resolve_from_to"" rel=""noreferrer"">resolve method in 'path' node module</a> and provide the output from it to the require method in your working file</p>&#xA;&#xA;<p>Simply do the following:</p>&#xA;&#xA;<pre><code>var path = require('path');&#xA;var updater = require( path.resolve( __dirname, ""./updater.js"" ) );&#xA;</code></pre>&#xA;&#xA;<p>EDIT : info on global node object '__dirname' (and others) can by found <a href=""http://nodejs.org/docs/latest/api/globals.html#globals_dirname"" rel=""noreferrer"">here</a>.</p>&#xA;",2695054,"",2695054,"",2014-10-11T11:00:51,2014-10-11T11:00:51,"","",,3,,,
55838994,2,,55838890,2019-04-24T21:44:16,,0,,"<p>I think that the problem you have is what you think the method returns. In your function <code>getDbs</code>, I'm really not sure that the method <code>window.ipc.on</code> returns what is returned by the callback; it is returning the EventEmitter created by the method.</p>&#xA;&#xA;<p>Since it seems that you are working with an async callback, what I would do is something like this.</p>&#xA;&#xA;<pre><code>// Call to IPC Main&#xA;getDbs(config) {&#xA;  window.ipc.send('auth-getdbs', config);&#xA;  return new Promise((resolve, reject) =&gt; {&#xA;    window.ipc.on('auth-getdbs-reply', (event, result) =&gt; {&#xA;      resolve(result);&#xA;    });&#xA;  });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The function would return a Promise which resolves to the result you are expecting to be returned. The way you call this function, since you are using the <code>await</code> keyword, should stay the same.</p>&#xA;",7817501,"",,"",,2019-04-24T21:44:16,"","",,0,,,
55840749,2,,55838605,2019-04-25T01:52:11,,1,,"<p>Yes you can!</p>&#xA;&#xA;<p>By using Electron's <code>shell.openExternal</code> function like this:</p>&#xA;&#xA;<pre><code>const { shell } = require('electron');&#xA;&#xA;shell.openExternal('https://www.google.com/search?q=Google+search+here')&#xA;</code></pre>&#xA;&#xA;<p>This opens the given link in the user's default browser.</p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/shell#shellopenexternalurl-options"" rel=""nofollow noreferrer""><code>openExternal</code> Documentation</a></p>&#xA;",6577664,"",,"",,2019-04-25T01:52:11,"","",,0,,,
55858696,2,,55850616,2019-04-25T23:01:21,,2,,"<p>This is caused by a breaking change in Electron 5.0. </p>&#xA;&#xA;<p>In order to have node integration in your app, you have to specify it in the webPreferences settings like this:</p>&#xA;&#xA;<p>mainWindow = new BrowserWindow({&#xA;    webPreferences: {&#xA;      nodeIntegration: true,&#xA;    }&#xA;  });</p>&#xA;&#xA;<p>Reference:&#xA;<a href=""https://github.com/electron/electron/blob/master/docs/api/breaking-changes.md#new-browserwindow-webpreferences-"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/breaking-changes.md#new-browserwindow-webpreferences-</a></p>&#xA;&#xA;<p>Kind regards,&#xA;Tailor</p>&#xA;",5766200,"",5766200,"",2019-04-26T04:55:34,2019-04-26T04:55:34,"","",,0,,,
55865477,2,,55765540,2019-04-26T10:17:32,,4,,"<p>From my understanding you want to inspect or manipulate some HTML of a electron app which is installed?</p>&#xA;&#xA;<p>This is how I figured out how to access (on Mac OS) using Slack as an example:</p>&#xA;&#xA;<ol>&#xA;<li>Go to your Applications Folder -> Slack -> Right click ""Show Package Contents"" </li>&#xA;<li>Go To ""Contents->Resources -> app.asar.unpacked"" </li>&#xA;<li>You can check out how for example parts of the slack app work.</li>&#xA;</ol>&#xA;&#xA;<p>I tried this also with GChat app and they have an <code>app</code> folder. Technically speaking, you could add a script or something into the index.html / index.jade (slack) and hijack into the main.js or index.js scripts.</p>&#xA;&#xA;<p>For example I was able to search for <code>BrowserWindow</code> Object inside the Chat App of Google Chat and add <code>.webContents.openDevTools();</code> easily.</p>&#xA;&#xA;<p>Yet any solution involves manual work.</p>&#xA;&#xA;<p>For example in the <code>main.js</code> of of GChat I beautified the code, I searched for the Electron method <code>buildFromTemplate</code> and found the specific function where the <code>View</code> Menu is created. I simply added the following to that </p>&#xA;&#xA;<pre><code> {&#xA;          role: ""toggledevtools"",&#xA;          label: ""Toogle Dev Tools""&#xA;        }&#xA;</code></pre>&#xA;&#xA;<p>And at the end I was able to easily toogle devtools (seen in the screenshot)</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/bFBDP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bFBDP.png"" alt=""enter image description here""></a></p>&#xA;",1071432,"",1071432,"",2019-04-26T10:27:49,2019-04-26T10:27:49,"","",,0,,,
55881934,2,,55880038,2019-04-27T15:11:41,,0,,"<p><a href=""https://github.com/axios/axios"" rel=""nofollow noreferrer"">Axios</a> has a lot of devDependencies. Those do not get installed when you just copy it. I'd suggest duplicating your existing project (assuming it works there). </p>&#xA;&#xA;<pre><code>""devDependencies"": {&#xA;    ""bundlesize"": ""^0.17.0"",&#xA;    ""coveralls"": ""^3.0.0"",&#xA;    ""es6-promise"": ""^4.2.4"",&#xA;    ""grunt"": ""^1.0.2"",&#xA;    ""grunt-banner"": ""^0.6.0"",&#xA;    ""grunt-cli"": ""^1.2.0"",&#xA;    ""grunt-contrib-clean"": ""^1.1.0"",&#xA;    ""grunt-contrib-watch"": ""^1.0.0"",&#xA;    ""grunt-eslint"": ""^20.1.0"",&#xA;    ""grunt-karma"": ""^2.0.0"",&#xA;    ""grunt-mocha-test"": ""^0.13.3"",&#xA;    ""grunt-ts"": ""^6.0.0-beta.19"",&#xA;    ""grunt-webpack"": ""^1.0.18"",&#xA;    ""istanbul-instrumenter-loader"": ""^1.0.0"",&#xA;    ""jasmine-core"": ""^2.4.1"",&#xA;    ""karma"": ""^1.3.0"",&#xA;    ""karma-chrome-launcher"": ""^2.2.0"",&#xA;    ""karma-coverage"": ""^1.1.1"",&#xA;    ""karma-firefox-launcher"": ""^1.1.0"",&#xA;    ""karma-jasmine"": ""^1.1.1"",&#xA;    ""karma-jasmine-ajax"": ""^0.1.13"",&#xA;    ""karma-opera-launcher"": ""^1.0.0"",&#xA;    ""karma-safari-launcher"": ""^1.0.0"",&#xA;    ""karma-sauce-launcher"": ""^1.2.0"",&#xA;    ""karma-sinon"": ""^1.0.5"",&#xA;    ""karma-sourcemap-loader"": ""^0.3.7"",&#xA;    ""karma-webpack"": ""^1.7.0"",&#xA;    ""load-grunt-tasks"": ""^3.5.2"",&#xA;    ""minimist"": ""^1.2.0"",&#xA;    ""mocha"": ""^5.2.0"",&#xA;    ""sinon"": ""^4.5.0"",&#xA;    ""typescript"": ""^2.8.1"",&#xA;    ""url-search-params"": ""^0.10.0"",&#xA;    ""webpack"": ""^1.13.1"",&#xA;    ""webpack-dev-server"": ""^1.14.1""&#xA;},&#xA;</code></pre>&#xA;",840992,"",,"",,2019-04-27T15:11:41,"","",,0,,,
55885232,2,,55542435,2019-04-27T22:02:45,,2,,"<p>The id comes from <a href=""https://github.com/electron/electron/blob/master/atom/browser/api/atom_api_screen.h"" rel=""nofollow noreferrer"">electron's screen object</a> as you already pointed out.  That internally uses Chromium's screen (see the <code>#include ""ui/display/screen.h""</code>.  After more digging, I found that the id comes from the method at line 59 of the implementation of <a href=""https://github.com/chromium/chromium/blob/master/ui/display/win/display_info.cc"" rel=""nofollow noreferrer"">display_info.cc</a>.  It is just a hash generated from the device name which comes from the os, namely from the MonitorInfoEXA struct.</p>&#xA;&#xA;<p>Maybe you can repeat the hash they do to the name and match it with the id though.</p>&#xA;&#xA;<pre><code>static_cast&lt;int64_t&gt;(base::Hash(base::WideToUTF8(device_name))&#xA;</code></pre>&#xA;&#xA;<p>where device name is szDevice from <a href=""https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-tagmonitorinfoexa"" rel=""nofollow noreferrer"">this struct</a>.</p>&#xA;",11357398,"",11357398,"",2019-04-27T22:12:21,2019-04-27T22:12:21,"","",,0,,,
55890521,2,,55872558,2019-04-28T13:00:48,,0,,"<p>A couple of things I tried before I got this code working:</p>&#xA;&#xA;<ol>&#xA;<li>deleted node_modules directory</li>&#xA;<li>deleted package-lock.json</li>&#xA;<li>deleted npm cache</li>&#xA;</ol>&#xA;&#xA;<p>None of these resolved the issue.  I finally got this code working by removing, then adding back the headers used in the request.</p>&#xA;",1040535,"",,"",,2019-04-28T13:00:48,"","",,0,,,
55918989,2,,55521018,2019-04-30T10:28:33,,0,,"<p>It was a silly mistake.</p>&#xA;&#xA;<p>The file that contains the server that listen in that port is in my case server.js.</p>&#xA;&#xA;<p>When you run it with node, the start file is server.js but when you run it with electron the start file is main.js and I was never running server.js when I executed with electron, so I was not listening in that port.</p>&#xA;",6831979,"",,"",,2019-04-30T10:28:33,"","",,0,,,
55919798,2,,45213956,2019-04-30T11:20:09,,0,,"<p>I found the answer after 1 day of trying and reading the documentation of electron-packager. When packaging with electron-packager, change the <strong><code>devDependencies</code></strong> to <strong><code>dependencies</code></strong> in the <strong>package.json</strong>. That's because electron-packager looks for dependencies instead of devDependencies.</p>&#xA;&#xA;<p>So, before trying to package the app, either rename the devDependencies to dependencies or <strong><code>npm install package_name --save</code></strong> .</p>&#xA;&#xA;<p>** Note: Do not use <code>--save-dev</code> when packaging using electron-packager, as <code>-dev</code> will make the dependencies development dependencies.</p>&#xA;",6849682,"",6849682,"",2019-05-29T09:01:26,2019-05-29T09:01:26,"","",,0,,,
55921171,2,,55920476,2019-04-30T12:38:53,,1,,"<p>You can combine the get and set method to update the data</p>&#xA;&#xA;<pre><code>const book = store.get('bookmark.book');&#xA;const newBooks = [...(book || []), {""title"": ""Snow White"", ""page"": 300}];&#xA;store.set('bookmark.book', newBooks);&#xA;</code></pre>&#xA;",5928186,"",,"",,2019-04-30T12:38:53,"","",,0,,,
55922960,2,,55921486,2019-04-30T14:19:59,,2,,"<blockquote>&#xA;  <p>Is it something I have to accept? I don't think this is normal behavior.</p>&#xA;</blockquote>&#xA;&#xA;<p>It's normal behavior, as the lifetime of your BrowserWindow is not the same as the lifetime of your HTML(DOM). You can load URL into BrowserWindow multiple times and perform a lot of other tasks not related to HTML.</p>&#xA;&#xA;<p>So I don't think it's reasonable to expect that the BrowserWindow will follow the DOM state of your HTML. However you can make it that way</p>&#xA;&#xA;<p>Use <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-dom-ready"" rel=""nofollow noreferrer""><code>'dom-ready'</code></a> or <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#event-ready-to-show"" rel=""nofollow noreferrer""><code>'ready-to-show'</code></a> events to avoid showing anything before the HTML is completely loaded (including original window title)</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#using-ready-to-show-event"" rel=""nofollow noreferrer"">From docs</a>&#xA;</p>&#xA;&#xA;<pre><code>const { BrowserWindow } = require('electron')&#xA;let win = new BrowserWindow({ show: false })&#xA;win.once('ready-to-show', () =&gt; {&#xA;  win.show()&#xA;})&#xA;</code></pre>&#xA;",2550156,"",,"",,2019-04-30T14:19:59,"","",,0,,,
55975684,2,,55959745,2019-05-03T18:56:35,,0,,"<p>I found a solution that suits my needs. I created another epic which catch the same type. Using ignoreElements after the tap operatator.</p>&#xA;&#xA;<pre><code>const viewPackageEpic = pipe(&#xA;    ofType(viewPackageStart.type),&#xA;    map(() =&gt; updatePackageLoader({&#xA;        loading: true&#xA;    })),&#xA;);&#xA;&#xA;const viewPackageLoaderEpic = pipe(&#xA;    ofType(viewPackageStart.type),&#xA;    tap(({ payload: { options } }) =&gt; {&#xA;        ipcRenderer.send('npm-view', options)&#xA;    }),&#xA;    ignoreElements()&#xA;);&#xA;</code></pre>&#xA;",5252752,"",5252752,"",2019-05-03T21:28:56,2019-05-03T21:28:56,"","",,0,,,
55978552,2,,55978441,2019-05-04T00:42:28,,3,,"<p>I have been using <code>Electron</code> for a few years now and I have never, ever used a ""renderer.js"" file. I tend to use ""app.js"" or something more specific to the app but it is just habit.</p>&#xA;&#xA;<p>It doesn't matter what the files are named - you could call ""main.js"" anything -  ""late-for-dinner.js"" and so long as you reference it as the entry point in your <code>package.json</code> all will be well. Same for ""renderer.js""</p>&#xA;&#xA;<p>I would guess that the names ""main.js"" and ""renderer.js"" were picked to illustrate the separate domains, not because they are in any way ""required"",</p>&#xA;",840992,"",,"",,2019-05-04T00:42:28,"","",,0,,,
55986590,2,,55986231,2019-05-04T20:35:21,,1,,"<p>Adding</p>&#xA;&#xA;<pre><code>webPreferences: {&#xA;            nodeIntegration: true&#xA;},&#xA;</code></pre>&#xA;&#xA;<p>to the new BrowserWindow instance fixed this issue for me. </p>&#xA;",8832853,"",,"",,2019-05-04T20:35:21,"","",,0,,,
55993159,2,,55992878,2019-05-05T14:45:00,,0,,"<p>With <code>electron-builder</code> did you set <code>""oneClick"": false</code>? That will give you the ""install wizard"" style installer on the PC. The default for <code>oneClick</code> is true so you have to set it explicitly.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>From the <a href=""https://www.electron.build/configuration/nsis"" rel=""nofollow noreferrer"">docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <ul>&#xA;  <li><p>oneClick = true Boolean - Whether to create one-click installer or assisted.</p></li>&#xA;  <li><p>perMachine = false Boolean - Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).</p></li>&#xA;  <li><p>If oneClick is true (default): Whether to install per all users    (per-machine).</p></li>&#xA;  <li><p>If oneClick is false and perMachine is true: no install mode installer page, always install per-machine.</p></li>&#xA;  <li><p>If oneClick is false and perMachine is false (default): install mode installer page.</p></li>&#xA;  <li><p>allowElevation = true Boolean - assisted installer only. Allow requesting for elevation. If false, user will have to restart<br>&#xA;  installer with elevated permissions.</p></li>&#xA;  <li>allowToChangeInstallationDirectory = false Boolean - assisted installer only. Whether to allow user to change installation<br>&#xA;  directory.</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<p>On OSX, using <code>DMG</code> format, if you specify a license (and maybe the ""licenseButtons"" JSON file as well – that is what works for me) you will get an agreement dialog before the <code>DMG</code> mounts.</p>&#xA;&#xA;<p>From the <a href=""https://www.electron.build/configuration/dmg"" rel=""nofollow noreferrer"">docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>To add license to DMG, create file license_LANG_CODE.txt in the build&#xA;  resources. Multiple license files in different languages are supported&#xA;  — use lang postfix (e.g. _de, _ru)). For example, create files&#xA;  license_de.txt and license_en.txt in the build resources. If OS&#xA;  language is german, license_de.txt will be displayed. See map of&#xA;  language code to name.</p>&#xA;  &#xA;  <p>You can also change the default button labels of the DMG by passing a&#xA;  json file named licenseButtons_LANG_CODE.json. The german file would&#xA;  be named: licenseButtons_de.json. The contain file should have the&#xA;  following format:</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>{&#xA;  ""lang"": ""English"",&#xA;  ""agree"": ""Agree"",&#xA;  ""disagree"": ""Disagree"",&#xA;  ""print"": ""Print"",&#xA;  ""save"": ""Save"",&#xA;  ""description"": ""Here is my own description""&#xA;}&#xA;</code></pre>&#xA;",840992,"",,"",,2019-05-05T14:45:00,"","",,0,,,
56000214,2,,55979353,2019-05-06T07:00:21,,0,,"<p>In the end, I used <code>fs.readFileSync</code> since it takes an absolute file path.  I simply assigned it a path based on the environment.  The main obstruction was webpack; I just couldn't find a way during build to mitigate require calls being compiled (aliasing didn't seem to make any difference).  </p>&#xA;&#xA;<p>Not, perhaps, the most elegant solution but sufficient for the purposes of simply reading a JSON file on launch (which is all I need it for). </p>&#xA;",1383065,"",,"",,2019-05-06T07:00:21,"","",,0,,,
56011508,2,,56007461,2019-05-06T19:50:44,,0,,"<p>Still not sure what the root of the issue was. But to fix this, I downloaded a fresh CRA and ejected it, copied over the custom monorepo code and tweaked some things, catered to the monorepo, primarily the paths.js file from the ejection. Also took all of the CRA packages and merged them into package.json. A little bit of a roundabout way to get it done but all is well now, it runs and builds successfully.</p>&#xA;",4546901,"",,"",,2019-05-06T19:50:44,"","",,0,,,
56021294,2,,56007911,2019-05-07T11:11:06,,0,,"<p>I've set up my project anew. And it does work now. I still don't know what went wrong, though.</p>&#xA;",5490827,"",,"",,2019-05-07T11:11:06,"","",,0,,,
55868318,2,,55865638,2019-04-26T13:07:32,,1,,"<p>The usual way is to defer the execution of the rest of the code right after the next rendering stage, by using the function <a href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout"" rel=""nofollow noreferrer"">setTimeout()</a> with a delay value of 0 (by default):</p>&#xA;&#xA;<pre><code>document.getElementById('pleasewait').style.display = 'block';&#xA;setTimeout&#xA;(&#xA;    () =&gt;&#xA;    {&#xA;        longRunningTask();&#xA;        document.getElementById('pleasewait').style.display = 'none';&#xA;    }&#xA;);&#xA;</code></pre>&#xA;",11415991,"",11415991,"",2019-04-26T13:24:23,2019-04-26T13:24:23,"","",,1,,,
55954865,2,,55954117,2019-05-02T14:41:31,,1,,"<p>The problem seems to be that the event is triggered synchronously, therefore it runs before the function finished executing, and <code>ready =</code> did not yet run. To resolve that, you have to defer the window creation:</p>&#xA;&#xA;<pre><code>  return new Promise((resolve, reject) =&gt; {&#xA;   setTimeout(() =&gt; {&#xA;     //...&#xA;   });&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>You could also defer that using another promise when assigning to <code>ready</code> inside <code>get</code>:</p>&#xA;&#xA;<pre><code>  ready = Promise.resolve().then(createWindow);&#xA;</code></pre>&#xA;&#xA;<p>Alternatively you could reassign <code>ready</code> before creating the window, for that you have to expose <code>resolve</code> from the callback:</p>&#xA;&#xA;<pre><code>  let resolve;&#xA;  ready = new Promise(it =&gt; resolve = it);&#xA;&#xA;  // create window ...&#xA;  // somewhen ...&#xA;  resolve(win);&#xA;</code></pre>&#xA;",5260024,"",,"",,2019-05-02T14:41:31,"","",,1,,,
55957874,2,,55937967,2019-05-02T17:59:40,,0,,"<p>I found the problem.&#xA; When I cloned the code in a new notebook, it downloaded Electron version 5.0.0 with npm, and the version that works with my app is 4.1.0. &#xA; So I fixed the Electron version in package.json and works fine.</p>&#xA;",11437520,"",,"",,2019-05-02T17:59:40,"","",,1,,,
55974961,2,,55974684,2019-05-03T17:56:19,,1,,"<p>electron version ?</p>&#xA;&#xA;<p>you need to rebuild that module according to electron's node version !!!</p>&#xA;&#xA;<p>use electron-rebuild  <a href=""https://github.com/electron/electron-rebuild"" rel=""nofollow noreferrer"">https://github.com/electron/electron-rebuild</a></p>&#xA;",11420055,"",11420055,"",2019-05-03T18:05:02,2019-05-03T18:05:02,"","",,1,,,
56002544,2,,56001835,2019-05-06T09:39:32,,1,,"<p>From the main process, use the window's webContents.<a href=""https://electronjs.org/docs/api/web-contents#contentsgeturl"" rel=""nofollow noreferrer"">getURL()</a> method:</p>&#xA;&#xA;<pre><code>[...]&#xA;win = new BrowserWindow({ /* options */});&#xA;win.loadFile('index.html');&#xA;console.log (win.webContents.getURL();)&#xA;</code></pre>&#xA;&#xA;<p>See: <a href=""https://stackoverflow.com/questions/54185293/how-to-get-the-url-of-the-browserwindow/54187857#54187857"">How to get the url of the BrowserWindow?</a></p>&#xA;",11458723,"",,"",,2019-05-06T09:39:32,"","",,1,,,
56014680,2,,55994212,2019-05-07T02:21:02,,1,,"<p>The following code returns the integer value you're looking for:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const os = require(""os"")&#xA;&#xA;function getNativeWindowHandle_Int(win) {&#xA;    let hbuf = win.getNativeWindowHandle()&#xA;&#xA;    if (os.endianness() == ""LE"") {&#xA;        return hbuf.readInt32LE()&#xA;    }&#xA;    else {&#xA;        return hbuf.readInt32BE()&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It appears safe to assume that Windows is Little-Endian, but the code nevertheless checks the endianness using Node's <code>os.endianness()</code>. About reading only 32 bits, Microsoft's <a href=""https://docs.microsoft.com/en-us/windows/desktop/WinProg64/interprocess-communication"" rel=""nofollow noreferrer"">documentation</a> says the following:</p>&#xA;&#xA;<blockquote>&#xA;  <p>When sharing a handle between 32-bit and 64-bit applications, only the lower 32 bits are significant, so it is safe to truncate the handle (when passing it from 64-bit to 32-bit) [..]</p>&#xA;</blockquote>&#xA;&#xA;<p>Call the function on a BrowserWindow as such:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>let myWin = new BrowserWindow()&#xA;console.log(getNativeWindowHandle_Int(myWin))&#xA;</code></pre>&#xA;",1335237,"",1335237,"",2019-05-13T20:51:25,2019-05-13T20:51:25,"","",,1,,,
56038277,2,,56037850,2019-05-08T10:10:10,,3,,"<p>I found an example in the <a href=""https://stackoverflow.com/questions/13760805/how-to-take-a-snapshot-of-html5-javascript-based-video-player"">following question</a> regarding taking snapshots from a video.</p>&#xA;&#xA;<p>You could do something like this:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.getElementById(""snap"").addEventListener(""click"", function() {&#xD;&#xA;  snap();&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;// Get handles on the video and canvas elements&#xD;&#xA;var video = document.querySelector('video');&#xD;&#xA;var canvas = document.querySelector('canvas');&#xD;&#xA;// Get a handle on the 2d context of the canvas element&#xD;&#xA;var context = canvas.getContext('2d');&#xD;&#xA;// Define some vars required later&#xD;&#xA;var w, h, ratio;&#xD;&#xA;&#xD;&#xA;// Add a listener to wait for the 'loadedmetadata' state so the video's dimensions can be read&#xD;&#xA;video.addEventListener('loadedmetadata', function() {&#xD;&#xA;  // Calculate the ratio of the video's width to height&#xD;&#xA;  ratio = video.videoWidth / video.videoHeight;&#xD;&#xA;  // Define the required width as 100 pixels smaller than the actual video's width&#xD;&#xA;  w = video.videoWidth - 100;&#xD;&#xA;  // Calculate the height based on the video's width and the ratio&#xD;&#xA;  h = parseInt(w / ratio, 10);&#xD;&#xA;  // Set the canvas width and height to the values just calculated&#xD;&#xA;  canvas.width = w;&#xD;&#xA;  canvas.height = h;&#xD;&#xA;}, false);&#xD;&#xA;&#xD;&#xA;// Takes a snapshot of the video&#xD;&#xA;function snap() {&#xD;&#xA;  // Define the size of the rectangle that will be filled (basically the entire element)&#xD;&#xA;  context.fillRect(0, 0, w, h);&#xD;&#xA;  // Grab the image from the video&#xD;&#xA;  context.drawImage(video, 0, 0, w, h);&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;video width=""400"" controls&gt;&#xD;&#xA;  &lt;source src=""https://www.w3schools.com/html/mov_bbb.mp4"" type=""video/mp4""&gt;&#xD;&#xA;  &lt;source src=""https://www.w3schools.com/html/mov_bbb.ogg"" type=""video/ogg""&gt;&#xD;&#xA;  Your browser does not support HTML5 video.&#xD;&#xA;&lt;/video&gt;&#xD;&#xA;&#xD;&#xA;&lt;canvas width=""364"" height=""204""&gt;&lt;/canvas&gt;&#xD;&#xA;&#xD;&#xA;&lt;button id=""snap""&gt;Take screenshot&lt;/button&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p><a href=""https://jsfiddle.net/b4oqkmws/"" rel=""nofollow noreferrer"">JSFiddle</a></p>&#xA;",3437688,"",3437688,"",2019-05-08T10:17:43,2019-05-08T10:17:43,"","",,1,,,
55908510,2,,44391448,2019-04-29T17:53:38,,207,,"<p>As of version 5, the default for <code>nodeIntegration</code> changed from true to false.&#xA;You can enable it when creating the Browser Window:</p>&#xA;&#xA;<pre><code>app.on('ready', () =&gt; {&#xA;    mainWindow = new BrowserWindow({&#xA;        webPreferences: {&#xA;            nodeIntegration: true&#xA;        }&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",8057071,"",3737308,"",2019-05-23T11:01:21,2019-05-23T11:01:21,"","",,4,,,
55987889,2,,55987650,2019-05-05T00:22:57,,1,,"<p>Looks like this works</p>&#xA;&#xA;<pre><code>canvas.toBlob(saveBlob);&#xA;&#xA;function saveBlob(blob) {&#xA;  const reader = new FileReader();&#xA;  reader.onloadend = () =&gt; {&#xA;    fs.writeFile('filename.png', new Uint8Array(reader.result), err =&gt; {&#xA;      if (err) {&#xA;        alert(""An error ocurred creating the file "" + err.message);&#xA;      } else {&#xA;        console.log(""The file has been successfully saved"");&#xA;      }&#xA;    });&#xA;  }&#xA;  reader.readAsArrayBuffer(blob);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>note in 2019 I might switch to promises and async stuff. There's little bit of setup but then usage is easier for some definition of easier</p>&#xA;&#xA;<pre><code>const fs = require('fs');  // would prefer import&#xA;const util = require('util');&#xA;&#xA;const writeFile = util.promisify(fs.writeFile);&#xA;&#xA;function readBlobAsUint8Array(blob) {&#xA;  return new Promise((resolve, reject) =&gt; {&#xA;    const reader = new FileReader();&#xA;    reader.onloadend = () =&gt; {&#xA;      return new Uint8Array(reader.result);&#xA;    };&#xA;    reader.onerror = reject;&#xA;    reader.readAsArrayBuffer(blob);&#xA;  });&#xA;}&#xA;&#xA;function getCanvasAsBlob(canvas) {&#xA;  return new Promise((resolve) =&gt; {&#xA;     canvas.toBlob(resolve);&#xA;  });&#xA;}&#xA;&#xA;async function saveCanvasAsPNG(filename, canvas) {&#xA;  const blob = await getCanvasAsBlob(canvas);&#xA;  const data = await readBlobAsUint8Array(blob);&#xA;  await writeFile(filename, data);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>which can be called from another async function like</p>&#xA;&#xA;<pre><code>async function someFunc() {&#xA;  try {&#xA;    await saveCanvasAsPNG('foo.png', canvas);&#xA;    console.log('success');&#xA;  } catch (e) {&#xA;    alert(e);&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>or from a non-async function as</p>&#xA;&#xA;<pre><code>saveCanvasAsPng('foo.png', canvas)&#xA;  .then(() =&gt; {&#xA;     console.log('success');&#xA;  })&#xA;  .catch(alert);&#xA;</code></pre>&#xA;&#xA;<p>note this also works</p>&#xA;&#xA;<pre><code>const dataUrl = canvas.toDataURL();&#xA;const uu = dataUrl.substring('data:image/png;base64,'.length);&#xA;fs.writeFileSync(filename, uu, 'base64');&#xA;</code></pre>&#xA;",128511,"",128511,"",2019-05-05T01:17:53,2019-05-05T01:17:53,"","",,4,,,
56011213,2,,56010699,2019-05-06T19:25:23,,1,,"<p>I believe this is most probably an artifact of your console logging in Chrome.</p>&#xA;&#xA;<p>Most probably your ipcMain logs in a terminal, preserving your object keys order.</p>&#xA;&#xA;<p>Whereas your renderer window.ipc logs in Chromium dev tools console, which renders your object keys sorted alphabetically.</p>&#xA;&#xA;<p>See also <a href=""https://stackoverflow.com/questions/39054764/show-original-order-of-object-properties-in-console-log"">Show original order of object properties in console.log</a></p>&#xA;",5108796,"",,"",,2019-05-06T19:25:23,"","",,4,,,
46804795,2,,46804642,2017-10-18T07:24:56,,1,,"<p>You could try to put a path to your template url</p>&#xA;&#xA;<pre><code>.when('/test', {&#xA;   templateUrl: './test.html',&#xA;   controller: 'ctrl'&#xA;  })&#xA;</code></pre>&#xA;",8687811,"",,"",,2017-10-18T07:24:56,"","",,0,,,
46806052,2,,46805831,2017-10-18T08:41:45,,1,,"<p>That is not valid syntax for a class function in Javascript.</p>&#xA;&#xA;<p>A class has functions like so:</p>&#xA;&#xA;<pre><code>class Test {&#xA;  constructor() {&#xA;    // do stuff  &#xA;  }&#xA;&#xA;  // basic function&#xA;  doSomething() {&#xA;    this.test++;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So in your case you just need to make add use the correct syntax for a function in a class</p>&#xA;&#xA;<pre><code>add() {&#xA;  this.setState({active: !this.state.active});&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The syntax you have used is coming in the future as part of the <a href=""https://github.com/tc39/proposal-class-fields"" rel=""nofollow noreferrer"">Class Fields Proposal</a></p>&#xA;",2234076,"",,"",,2017-10-18T08:41:45,"","",,0,,,
46817282,2,,46816898,2017-10-18T18:55:53,,2,,"<p>I actually solved this as I was typing up the question but figured since I did some searching and couldn't find any solutions I thought I might answer my own question in order to help others.</p>&#xA;&#xA;<p>I needed to get the typings for webdriver io</p>&#xA;&#xA;<pre><code>npm i -S @types/webdriverio&#xA;</code></pre>&#xA;&#xA;<p>and then I imported that type into my <code>login.ts</code> script and use that as the SpectronClient</p>&#xA;&#xA;<pre><code>import * as WebdriverIO from 'webdriverio';&#xA;export class Login {&#xA;    constructor(private client: WebdriverIO.Client&lt;void&gt;) { }&#xA;&#xA;    public async waitForPageToLoad() {&#xA;        return await this.client.waitForVisible('#username');&#xA;    }&#xA;&#xA;    public login(username: string, password: string) {&#xA;        this.client.setValue('#username', username);&#xA;        this.client.setValue('#Password', password);&#xA;        this.client.click('#login');&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and here is my full <code>test.ts</code> test script</p>&#xA;&#xA;<pre><code>import * as ava from 'ava';&#xA;import { Application } from 'spectron';&#xA;import { Login } from './pages/login';&#xA;import { Settings } from './settings';&#xA;&#xA;function contextualize&lt;T&gt;(getContext: () =&gt; Promise&lt;T&gt;): ava.RegisterContextual&lt;T&gt; {&#xA;    ava.test.beforeEach(async (t) =&gt; {&#xA;        Object.assign(t.context, await getContext());&#xA;    });&#xA;    return ava.test;&#xA;}&#xA;const test = contextualize(async () =&gt; {&#xA;    const app = new Application({&#xA;        path: '../electron.exe',&#xA;        args: ['../app/index.html'],&#xA;    });&#xA;    await app.start();&#xA;    return { app };&#xA;});&#xA;&#xA;test.afterEach.always(async (t) =&gt; await t.context.app.stop());&#xA;&#xA;test('can login', async (t) =&gt; {&#xA;    const login = new Login(t.context.app.client);&#xA;    await login.waitForPageToLoad();&#xA;    login.login(Settings.username, Settings.password);&#xA;});&#xA;</code></pre>&#xA;",224125,"",,"",,2017-10-18T18:55:53,"","",,0,,,
46817568,2,,46817454,2017-10-18T19:12:38,,1,,"<p>You can use <code>win.focus()</code> (documentation <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winfocus"" rel=""nofollow noreferrer"">here</a>) on other windows to put them on top, letting the new one behind.</p>&#xA;&#xA;<p>Edit:</p>&#xA;&#xA;<ul>&#xA;<li>If by <em>all runnings applications</em> you mean even applications that are not part of your Electron app, I would suggest to use <a href=""http://mixu.net/nwm/"" rel=""nofollow noreferrer"">nwm</a>. Assuming that you are using X11.</li>&#xA;</ul>&#xA;",4879301,"",4879301,"",2017-10-19T05:30:02,2017-10-19T05:30:02,"","",,0,,,
46821336,2,,46821122,2017-10-19T00:51:37,,3,,"<pre><code>'file://${__dirname}/index.html'&#xA;</code></pre>&#xA;&#xA;<p>This is just a string. No dirname gets injected here. </p>&#xA;&#xA;<p>Try this instead:</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;&#xA;win.loadURL(path.join(__dirname, 'index.html'));&#xA;</code></pre>&#xA;&#xA;<p>It is the recommended way:&#xA;<a href=""https://electron.atom.io/docs/tutorial/quick-start/"" rel=""nofollow noreferrer"">Electron Guide</a></p>&#xA;",6293426,"",6293426,"",2017-10-19T00:58:30,2017-10-19T00:58:30,"","",,0,,,
46821493,2,,46795199,2017-10-19T01:14:25,,0,,"<p>That must be why I remembered running into a similar issue and not knowing how it was fixed. Someone should open an issue on the <a href=""https://github.com/electron/electron"" rel=""nofollow noreferrer"">github repo</a> if a similar issue doesn't already exist.</p>&#xA;",8019995,"",,"",,2017-10-19T01:14:25,"","",,0,,,
46825877,2,,46825763,2017-10-19T08:40:04,,5,,<p><code>this.state.birthDate</code> and <code>this.setState({birthdate: event.target.value})}</code> wrong.</p>&#xA;&#xA;<p>setState is case-sensitive. try:</p>&#xA;&#xA;<p><code>this.setState({birthDate: event.target.value})}</code></p>&#xA;,5669415,"",,"",,2017-10-19T08:40:04,"","",,0,,,
46831502,2,,46735573,2017-10-19T13:49:08,,0,,"<p>From the <code>nw.js</code> <a href=""http://docs.nwjs.io/en/latest/References/webview%20Tag/"" rel=""nofollow noreferrer"">docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>loading local files in webview</strong></p>&#xA;  &#xA;  <p>Add the following permission to the manifest:</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>  ""webview"": {&#xA;     ""partitions"": [&#xA;        {&#xA;          ""name"": ""trusted"",&#xA;          ""accessible_resources"": [ ""&lt;all_urls&gt;"" ]&#xA;        }&#xA;     ]&#xA;  }&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>and add 'partition=""trusted""' attribute to the webview tag.</p>&#xA;</blockquote>&#xA;&#xA;<p>This is one reason why the <code>&lt;script</code> tag cannot access your <code>../js/script.js</code> file. I also suggest using a non-relative path to your local file example: <code>chrome-extension://yourdomain/js/script.js</code> (and that it be relative to the root not 'up' a directory).</p>&#xA;&#xA;<p>From google's <a href=""https://developer.chrome.com/apps/tags/webview"" rel=""nofollow noreferrer"">docs</a>, you can set <code>accessible_resources</code> to be specific patterns or files.</p>&#xA;&#xA;<p>The <code>insertCss</code>, <code>setUserAgentOverride</code>, <code>permissionrequest</code> event, and especially <code>executeScript</code> from google's documentation will likely be of interest to you.</p>&#xA;&#xA;<p>NOTE: you may not want to give that webview access to your nwjs context (<code>allownw</code>) because it can access <em>anything</em> that your program has access to.  This is especially true of both an external URL and http where <a href=""https://en.wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""nofollow noreferrer"">MITM</a> tampering or a third-party change could potentially cause someone to gain elevated access to the PC your application is running on.</p>&#xA;&#xA;<p>For your example, I would keep the <code>script.js</code> outside of the webview and have it instrument the webview via script injection.</p>&#xA;",675561,"",,"",,2017-10-19T13:49:08,"","",,0,,,
46833710,2,,46550597,2017-10-19T15:37:20,,2,,"<p>I ran into the same confusion. The renderer process is the code that runs your site/app, so your index.html file or any other application js files. I was able to place the following into index.html and get the results I was looking for. </p>&#xA;&#xA;<pre><code>    &lt;script type=""text/javascript""&gt;&#xA;        const webFrame = require('electron').webFrame;&#xA;        webFrame.setZoomFactor(1);&#xA;        webFrame.setZoomLevelLimits(1, 1);&#xA;        webFrame.setVisualZoomLevelLimits(1, 1);&#xA;        webFrame.setLayoutZoomLevelLimits(0, 0);&#xA;    &lt;/script&gt;&#xA;</code></pre>&#xA;",680667,"",,"",,2017-10-19T15:37:20,"","",,0,,,
46864079,2,,46836685,2017-10-21T14:05:50,,0,,"<pre><code>app.config(['$compileProvider', function ($compileProvider) {&#xA;    $compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|local|data|chrome-extension):/);&#xA;}]);&#xA;</code></pre>&#xA;&#xA;<p>This solves the problem with displaying images. I helped</p>&#xA;",7902255,"",,"",,2017-10-21T14:05:50,"","",,0,,,
46882965,2,,46866735,2017-10-23T06:12:34,,4,,"<p>This can be fixed by using <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#browserwindowgetfocusedwindow"" rel=""nofollow noreferrer"">getFocusedWindow</a> instead of <a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md#remotegetcurrentwindow"" rel=""nofollow noreferrer"">getCurrentWindow</a>.</p>&#xA;&#xA;<p>In your script.js file, update the the functions, <code>closeWindow()</code>, <code>minimizeWindow()</code> and <code>maximizeWindow()</code>, as:</p>&#xA;&#xA;<pre><code>const {remote} = require('electron');&#xA;&#xA;document.getElementById('close').addEventListener('click', closeWindow);&#xA;document.getElementById('minimize').addEventListener('click', minimizeWindow);&#xA;document.getElementById('maximize').addEventListener('click', maximizeWindow);&#xA;&#xA;function closeWindow () {&#xA;    var window = remote.BrowserWindow.getFocusedWindow();&#xA;    window.close();&#xA;}&#xA;&#xA;function minimizeWindow () {  &#xA;    var window = remote.BrowserWindow.getFocusedWindow();&#xA;    window.minimize();&#xA;}&#xA;&#xA;function maximizeWindow () {&#xA;    var window = remote.BrowserWindow.getFocusedWindow();&#xA;    window.isMaximized() ? window.unmaximize() : window.maximize();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The reason why <code>getFocusedWindow()</code> works instead of <code>getCurrentWindow()</code> can be explained by an experienced developer.</p>&#xA;",7434393,"",6735912,"",2017-10-23T12:11:43,2017-10-23T12:11:43,"","",,0,,,
46885158,2,,46785179,2017-10-23T08:43:45,,1,,"<p>To keep the separation in your application I would propose that you don't mix up Electron and React parts. Depending on your application, two solutions could be:</p>&#xA;&#xA;<ol>&#xA;<li>Use dispatchers to send events from your React components and run the actions from pure JS functions.</li>&#xA;<li>Listen for <a href=""https://electron.atom.io/docs/api/webview-tag/#event-new-window"" rel=""nofollow noreferrer"">new-window</a> event on the WebView you're rendering, and from that event run <code>openExternal</code></li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/webview-tag/#event-new-window"" rel=""nofollow noreferrer"">Example from Electron</a>:</p>&#xA;&#xA;<pre><code>const {shell} = require('electron')&#xA;const webview = document.querySelector('webview')&#xA;&#xA;webview.addEventListener('new-window', (e) =&gt; {&#xA;  const protocol = require('url').parse(e.url).protocol&#xA;  if (protocol === 'http:' || protocol === 'https:') {&#xA;    shell.openExternal(e.url)&#xA;  }&#xA;})&#xA;</code></pre>&#xA;",7434393,"",,"",,2017-10-23T08:43:45,"","",,0,,,
46896054,2,,46431699,2017-10-23T18:24:21,,1,,"<p>It showed that this was a global problem that was fixed in the new update 1.17.2 of VS Code. So I don't know why some people have downgraded this question although it was a relevant question and why stackoverflow allows that, but for all the people who have had this problem, I post this answer.<br>&#xA;After installing the new update 1.17.2 the problem was fixed. VS Code has solved that in version 1.17. <a href=""https://code.visualstudio.com/docs/nodejs/debugging-recipes"" rel=""nofollow noreferrer"">Here</a> are some info about the features and bug fixes (including the electron feature in VS Code).</p>&#xA;",3446051,"",,"",,2017-10-23T18:24:21,"","",,0,,,
46898186,2,,46898185,2017-10-23T20:43:27,,9,,"<p>It took me a few days but finally, I found this answer in <a href=""https://www.jamestease.co.uk/blether/mock-es6-imports-with-jest"" rel=""noreferrer"">this great blog post</a>. Quote:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Jest is called from Node and doesn't run test code through Webpack.&#xA;  Instead, we have to use Jest's mocking functions to replace the import&#xA;  with a stub file.</p>&#xA;</blockquote>&#xA;&#xA;<p>Jest has a helper method called <code>moduleNameMapper [object&lt;string, string&gt;]</code> . From jest documentation:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A map from regular expressions to module names that allow to stub out&#xA;  resources, like images or styles with a single module.</p>&#xA;</blockquote>&#xA;&#xA;<p>It should be added in your <strong>package.json</strong> root object like this:</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""My awesome app"",&#xA;  ""jest"": {&#xA;    ""moduleNameMapper"": {&#xA;      ""electron"": ""&lt;rootDir&gt;/src/components/tests/mock/electron.js""&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and the mock file itself (/src/components/tests/mock/electron.js):</p>&#xA;&#xA;<pre><code>export const ipcRenderer = {&#xA;  on: jest.fn()&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>This way you can stub other electron modules and methods (like remote which is shown in the blog above).</p>&#xA;",3013005,"",3013005,"",2017-10-23T20:51:22,2017-10-23T20:51:22,"","",,0,,,
46966979,2,,46949194,2017-10-27T03:19:49,,2,,"<p>I learned that I need these two things:</p>&#xA;&#xA;<ol>&#xA;<li><a href=""https://electron.atom.io/docs/all/#browserwindowgetfocusedwindow"" rel=""nofollow noreferrer"">BrowserWindow.getFocusedWindow()</a></li>&#xA;<li><a href=""https://electron.atom.io/docs/all/#wingetposition"" rel=""nofollow noreferrer"">win.getPosition()</a></li>&#xA;</ol>&#xA;&#xA;<p>Combining with @pergy's response, I got the following code which finds the focused window if there is any and offsets a new window from its position, otherwise creates a new window in the center:</p>&#xA;&#xA;<pre><code>let win = null&#xA;function window_open(path){&#xA;  const opts = {show: false}&#xA;  if (BrowserWindow.getFocusedWindow()) {&#xA;    current_win = BrowserWindow.getFocusedWindow()&#xA;    const pos = current_win.getPosition()&#xA;    Object.assign(opts, {&#xA;      x: pos[0] + 22,&#xA;      y: pos[1] + 22&#xA;    })&#xA;  }&#xA;  win = new BrowserWindow(opts)&#xA;  win.loadURL(path)&#xA;  win.once('ready-to-show', () =&gt; {win.show()})&#xA;}&#xA;&#xA;app.once('ready',event=&gt;{&#xA;  window_open(`file://${__dirname}/index.html`)&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This does what I asked for in my original question, so I have decided to post this.  However, I do feel that it is slow in spawning the new windows, so I won't mark this as an answer to see if there are faster approaches to this.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Update:</strong>&#xA;I have found out that waiting on <code>'ready-to-show'</code> is what makes it slow, as it waits for the ready state.  I have accepted this as the answer as I feel that the speed issue is dependent to the content and not the browser.  Feel free to add comments on this as I am still open ears.</p>&#xA;",6935886,"",6935886,"",2017-10-28T03:47:11,2017-10-28T03:47:11,"","",,0,,,
46969120,2,,46968479,2017-10-27T06:51:01,,10,,"<p>Not exactly sure why you resort to inject JS code into a WebView, but why not… Make sure it is not an <a href=""https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem"">XY problem</a>.</p>&#xA;&#xA;<ol>&#xA;<li><p><a href=""https://electron.atom.io/docs/api/webview-tag/#webviewexecutejavascriptcode-usergesture-callback"" rel=""noreferrer""><code>webview.executeJavascript()</code></a> method does not return anything. You can pass a <em>callback</em> as 3rd argument (more on that below), but I do not think it receives anything from the executed code.</p></li>&#xA;<li><p>In your injected code, you create a callback that will get executed on page ready. Therefore anything returned by your function (like your <code>url</code> variable) will not have been affected yet by the callback code. Make sure you understand <a href=""https://stackoverflow.com/questions/14220321/how-to-return-the-response-from-an-asynchronous-call"">How to return the response from an asynchronous call?</a></p></li>&#xA;</ol>&#xA;&#xA;<p>If I understand correctly, you are trying to scrap some data on your embedded page, and send it back to your Renderer (browser).</p>&#xA;&#xA;<p>A more appropriate way of achieving this result would be to use the <a href=""https://electron.atom.io/docs/api/webview-tag/#preload"" rel=""noreferrer""><code>preload</code></a> attribute of electron <code>&lt;webview&gt;</code>:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;webview src=""urlToGuestPage"" preload=""./inject.js""&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;&#xA;<p>In <code>inject.js</code>, you can <code>require(electron)</code>, and use the electron IPC scheme (<code>electron.ipcRenderer</code>) to communicate between the <code>Webview</code> (<a href=""https://electron.atom.io/docs/api/ipc-renderer/#ipcrenderersendtohostchannel-arg1-arg2-"" rel=""noreferrer""><code>ipcRendrer.sendToHost()</code></a>) and the ""parent"" Renderer. You have a simple example there: <a href=""https://electron.atom.io/docs/api/webview-tag/#event-ipc-message"" rel=""noreferrer"">https://electron.atom.io/docs/api/webview-tag/#event-ipc-message</a></p>&#xA;&#xA;&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// In embedder page. (parent Renderer / browser.js)&#xA;const webview = document.querySelector('webview')&#xA;webview.addEventListener('ipc-message', (event) =&gt; {&#xA;  console.log(event.channel)&#xA;  // Prints ""pong""&#xA;})&#xA;webview.send('ping')&#xA;&#xA;// In guest page. (preload script for the webview / inject.js)&#xA;const {ipcRenderer} = require('electron')&#xA;ipcRenderer.on('ping', () =&gt; {&#xA;  ipcRenderer.sendToHost('pong')&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>You should be able to find more detailed tutorials for such communication between a Renderer and a webview, e.g. <a href=""https://ourcodeworld.com/articles/read/201/how-to-send-retrieve-information-and-manipulate-the-dom-from-a-webview-with-electron-framework"" rel=""noreferrer"">https://ourcodeworld.com/articles/read/201/how-to-send-retrieve-information-and-manipulate-the-dom-from-a-webview-with-electron-framework</a></p>&#xA;",5108796,"",,"",,2017-10-27T06:51:01,"","",,0,,,
46976619,2,,46957205,2017-10-27T13:48:24,,0,,"<p>From the docs:</p>&#xA;&#xA;<blockquote>&#xA;  <p>The <code>process</code> object is a <code>global</code> that provides information about, and control over, the current Node.js process. As a global, it is always available to Node.js applications without using <code>require()</code>.</p>&#xA;</blockquote>&#xA;&#xA;<p>Yes the process object is the general process of the app.</p>&#xA;&#xA;<p>So if you do <code>process.exit</code> it will quit the whole process.</p>&#xA;&#xA;<p><a href=""https://nodejs.org/api/process.html#process_process"" rel=""nofollow noreferrer"">Process docs</a></p>&#xA;",6577664,"",,"",,2017-10-27T13:48:24,"","",,0,,,
46978618,2,,46930628,2017-10-27T15:31:02,,1,,"<p>I found a solution to the problem using <code>yarn link</code>: <a href=""https://yarnpkg.com/lang/en/docs/cli/link/"" rel=""nofollow noreferrer"">https://yarnpkg.com/lang/en/docs/cli/link/</a></p>&#xA;&#xA;<p>here I saved the working project:&#xA;<a href=""https://github.com/BiancoA/electron-webpack-quick-start-nm"" rel=""nofollow noreferrer"">https://github.com/BiancoA/electron-webpack-quick-start-nm</a></p>&#xA;&#xA;<p>If there are other possible ways, I'll be happy to learn them</p>&#xA;",2047359,"",,"",,2017-10-27T15:31:02,"","",,0,,,
47002581,2,,47002510,2017-10-29T16:32:26,,2,,"<pre><code>@NgModule({&#xA;imports: [&#xA;    QuillModule&#xA;],&#xA;</code></pre>&#xA;&#xA;<p>needs to be added to the module where you actually use components of the imported module.<br>&#xA;It is not enough to import the module in <code>AppModule</code> or some other module that is not imported directly into the module where you are using the editor component.</p>&#xA;",217408,"",,"",,2017-10-29T16:32:26,"","",,0,,,
47002701,2,,47002391,2017-10-29T16:42:57,,1,,"<p>Electron actually <strong>is</strong> a node.js app so the full node API is available from the used version. It is pretty much always the most recent version (<a href=""https://electron.atom.io/docs/faq/#when-will-electron-upgrade-to-latest-nodejs"" rel=""nofollow noreferrer"">at least in one month</a>)   but you can check it with</p>&#xA;&#xA;<p><code>process.versions</code></p>&#xA;&#xA;<p>in any Electron app</p>&#xA;",2550156,"",2550156,"",2017-10-29T16:50:13,2017-10-29T16:50:13,"","",,0,,,
47015559,2,,46983569,2017-10-30T12:41:07,,0,,"<p>Seems that a hard reboot of my computer fixed the issue. Something beyond the cache and DNS was causing issues. Upon coming back to it after the weekend, a stable connection was established. Thank you @Miguel</p>&#xA;",7400603,"",,"",,2017-10-30T12:41:07,"","",,0,,,
46783197,2,,46782996,2017-10-17T05:41:54,,2,,"<p>Since your code is at the bottom of the page you can us an IIFE (Immediately Invoking Function Expression):</p>&#xA;&#xA;<pre><code>(function() {&#xA;alert(""!@#$%^&amp;*"");&#xA;}());&#xA;</code></pre>&#xA;&#xA;<p>You can also use a setTimeout:</p>&#xA;&#xA;<pre><code>(function() {&#xA;    setTimeout(function () { &#xA;        alert(""!@#$%^&amp;*""); &#xA;    } , 2000)&#xA;}());&#xA;</code></pre>&#xA;",2085237,"",,"",,2017-10-17T05:41:54,"","",,1,,,
46802702,2,,46802671,2017-10-18T04:13:52,,2,,"<p>This part:</p>&#xA;&#xA;<pre><code>componentDidMount() {&#xA;    ipcRenderer.on('log-out', function() {&#xA;        localStorage.setItem('user', 'null');&#xA;        this.forceUpdate();&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The <code>this</code> in <code>this.forceUpdate();</code> is not the <code>this</code> you are looking for. To fix the problem, you need to bind <code>this</code> to the corresponding context (your component), as:</p>&#xA;&#xA;<pre><code>componentDidMount() {&#xA;    ipcRenderer.on('log-out', function() {&#xA;        localStorage.setItem('user', 'null');&#xA;        this.forceUpdate();&#xA;    }.bind(this));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Or creating a closure using the <code>this</code> to <code>self</code> like:</p>&#xA;&#xA;<pre><code>componentDidMount() {&#xA;    self = this;&#xA;    ipcRenderer.on('log-out', function() {&#xA;        localStorage.setItem('user', 'null');&#xA;        self.forceUpdate();&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",3286605,"",3286605,"",2017-10-22T03:57:00,2017-10-22T03:57:00,"","",,1,,,
46918407,2,,46917644,2017-10-24T19:18:48,,2,,"<p>For everyone that is having this same problem, I just found a solution. Instead of loading my resources through the <code>index.html</code> file, I've placed them in the <code>.angular-cli.json</code>. Basically, Angular 2+ has the own way of importing resources and seems that is not correct loading resources from the main .html file.</p>&#xA;&#xA;<p>Well, for scripts (I mean, .js files), I'm placing it in the <code>scripts</code> array and styles inside the <code>styles</code> array. The <code>.angular-cli.json</code> file section that I've changed looks like this:</p>&#xA;&#xA;<pre><code>  ""styles"": [&#xA;    ""styles.css"",&#xA;    ""../node_modules/clarity-icons/clarity-icons.min.css"",&#xA;    ""../node_modules/clarity-ui/clarity-ui.min.css""&#xA;  ],&#xA;  ""scripts"": [&#xA;    ""../node_modules/@webcomponents/custom-elements/custom-elements.min.js"",&#xA;    ""../node_modules/clarity-icons/clarity-icons.min.js""&#xA;  ]&#xA;</code></pre>&#xA;&#xA;<p>Hope that this information will help someone else. For me everything is working just fine.</p>&#xA;",4027692,"",,"",,2017-10-24T19:18:48,"","",,1,,,
46922137,2,,46886915,2017-10-25T00:43:13,,1,,"<p>The file system on macOS is case-<em>in</em>sensitive by default, which means when you ask for a file that doesn't exist, let's say <code>file.js</code>, it will gladly give you <code>FILE.js</code> if that one exists. On a case-sensitive file system, it would just tell you that <code>file.js</code> doesn't exist and result in an error. The file systems on Linux are case-sensitive.</p>&#xA;&#xA;<p>The files you are looking for are <a href=""https://github.com/lodash/lodash/blob/e8c87cfc45ceb1a5b6ba578bf7c78b669042275b/cloneDeep.js"" rel=""nofollow noreferrer""><code>cloneDeep.js</code></a> and <a href=""https://github.com/lodash/lodash/blob/e8c87cfc45ceb1a5b6ba578bf7c78b669042275b/snakeCase.js"" rel=""nofollow noreferrer""><code>snakeCase.js</code></a>, but you're trying to import <code>clonedeep</code> and <code>snakecase</code> respectively, which do not exist. <code>lodash/filter</code> works because <a href=""https://github.com/lodash/lodash/blob/e8c87cfc45ceb1a5b6ba578bf7c78b669042275b/filter.js"" rel=""nofollow noreferrer""><code>filter.js</code></a> actually exists.</p>&#xA;&#xA;<p>The correct imports would be:</p>&#xA;&#xA;<pre><code>let _snakecase = require('lodash/snakeCase')&#xA;let _cloneDeep = require('lodash/cloneDeep')&#xA;</code></pre>&#xA;",6447491,"",,"",,2017-10-25T00:43:13,"","",,1,,,
46942561,2,,46919662,2017-10-25T21:46:37,,0,,"<p>electron-packager <a href=""https://github.com/electron-userland/electron-packager#building-windows-apps-from-non-windows-platforms"" rel=""nofollow noreferrer"">is using Wine for building Win dist on non-Win platforms.</a> Wine <a href=""https://source.winehq.org/git/wine.git/?a=shortlog;h=refs/tags/wine-2.0.3"" rel=""nofollow noreferrer"">released a new version five days ago</a> So what happened was that electron-packager triggered Wine to start, which checked for updates and prompted you to install it. You should feel safe :)</p>&#xA;",7434393,"",,"",,2017-10-25T21:46:37,"","",,1,,,
46955556,2,,46947260,2017-10-26T13:23:30,,6,,"<p>A full example for communication between main and renderer's react component could be something like the following.</p>&#xA;&#xA;<p>For sending ipc message to renderer you can use <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentssendchannel-arg1-arg2-"" rel=""noreferrer""><code>webContents.send</code></a></p>&#xA;&#xA;<p><em>main.js</em>&#xA;</p>&#xA;&#xA;<pre><code>const { app, BrowserWindow } = require('electron')&#xA;const path = require('path')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  const win = new BrowserWindow()&#xA;  win.webContents.once('dom-ready', () =&gt; {&#xA;    setTimeout(() =&gt; {&#xA;      win.webContents.send('ready') // send to renderer&#xA;    }, 3000)&#xA;  })&#xA;  win.loadURL(path.join(__dirname, 'renderer.html'))&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>renderer.html</em>&#xA;</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;script src=""./renderer.js"" charset=""utf-8""&gt;&lt;/script&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;div id=""render""&gt;&lt;/div&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p><em>renderer.js</em>&#xA;</p>&#xA;&#xA;<pre><code>const React = require('react')&#xA;const ReactDOM = require('react-dom')&#xA;require('babel-register')&#xA;&#xA;const Comp = require('./component')&#xA;&#xA;window.onload = () =&gt; {&#xA;  ReactDOM.render(&#xA;    React.createElement(Comp),&#xA;    document.getElementById('render')&#xA;  )&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><em>component.js</em>&#xA;</p>&#xA;&#xA;<pre><code>const { ipcRenderer } = require('electron')&#xA;const React = require('react')&#xA;&#xA;module.exports = class extends React.Component {&#xA;  constructor (props) {&#xA;    super(props)&#xA;    this.state = {isReady: false}&#xA;    ipcRenderer.on('ready', () =&gt; {&#xA;      this.setState({isReady: true})&#xA;    })&#xA;  }&#xA;  render () {&#xA;    return &lt;p&gt;Is ready: {`${this.state.isReady}`}&lt;/p&gt;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2017-10-27T06:59:14,2017-10-27T06:59:14,"","",,1,,,
47008515,2,,47008185,2017-10-30T05:19:07,,0,,"<p>I figured it out. It turns out it takes a little bit more code than I first posted to open an external file. The full code looks like this:</p>&#xA;&#xA;<pre><code>// Create a child process&#xA;var spawn = require('child_process').spawn;&#xA;var child = spawn('Path_To_.exe', ['parameters', 'Path_To_File']);&#xA;</code></pre>&#xA;&#xA;<p>Also just in case anyone is wondering it was not necessary to escape sequence the spaces within the file name. </p>&#xA;&#xA;<p>Thank you for everyone who offered to help!</p>&#xA;",5989485,"",,"",,2017-10-30T05:19:07,"","",,1,,,
47013353,2,,46893170,2017-10-30T10:46:36,,0,,"<p>OK, maybe not a good idea since I'm patching jQuery but I've managed to get around this by changing jQuery's .done callback to add status code '0' to success callback;</p>&#xA;&#xA;<pre><code>// Determine if successful&#xA;&#xA;isSuccess = status === 0 || status &gt;= 200 &amp;&amp; status &lt; 300 || status === 304;&#xA;</code></pre>&#xA;",3397521,"",,"",,2017-10-30T10:46:36,"","",,1,,,
46789486,2,,38986692,2017-10-17T11:52:44,,30,,"<p>You need to put the following code into your ""shell"" (core electron init) file:</p>&#xA;&#xA;<pre><code>    // SSL/TSL: this is the self signed certificate support&#xA;    app.on('certificate-error', (event, webContents, url, error, certificate, callback) =&gt; {&#xA;        // On certificate error we disable default behaviour (stop loading the page)&#xA;        // and we then say ""it is all fine - true"" to the callback&#xA;        event.preventDefault();&#xA;        callback(true);&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>But this you allow insecure (invalid) certificates like self signed one.</p>&#xA;&#xA;<p>Please note that this is NOT secure way of connecting to the server.</p>&#xA;&#xA;<p>For more you can check documentation: <a href=""https://electron.atom.io/docs/api/app/#event-certificate-error"" rel=""noreferrer"">https://electron.atom.io/docs/api/app/#event-certificate-error</a></p>&#xA;",99422,"",99422,"",2017-10-17T12:11:26,2017-10-17T12:11:26,"","",,2,,,
46834198,2,,46834087,2017-10-19T16:03:51,,1,,"<p>As you can see in <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">the documentation</a>, animate is an optional argument that need to be a Boolean:</p>&#xA;&#xA;<blockquote>&#xA;  <p>win.setSize(width, height[, animate])</p>&#xA;  &#xA;  <ul>&#xA;  <li>width Integer</li>&#xA;  <li>height Integer</li>&#xA;  <li>animate Boolean (optional) macOS</li>&#xA;  </ul>&#xA;  &#xA;  <p>Resizes the window to width and height.</p>&#xA;</blockquote>&#xA;&#xA;<p>You are passing a variable named <code>animate</code> as an argument, and I guess that you don't have it defined anywhere, hence the error.</p>&#xA;&#xA;<p>The same way <code>width</code> and <code>height</code> are Integers and you pass Integers, <code>animate</code> being a boolean you have to pass <code>true</code> or <code>false</code>:</p>&#xA;&#xA;<pre><code>window.setSize(1024, 786, true);&#xA;// or&#xA;window.setSize(1024, 786, false);&#xA;</code></pre>&#xA;&#xA;<p>depending if you want animation or not, applicable only to <code>macOS</code>, as the documentation says.</p>&#xA;",1525495,"",6487675,"",2019-07-23T08:37:43,2019-07-23T08:37:43,"","",,2,,,
46844993,2,,46843495,2017-10-20T08:17:53,,2,,"<p>The problem is that the browser caches the image after it has been loaded once, and the animation is run only when the image is fresh, not when the browser pulls it from its cache.</p>&#xA;&#xA;<p>You can force the browser to reload the image by adding an arbitrary parameter to the URL that changes every time the image is referenced, like a time stamp, for example.</p>&#xA;&#xA;<p>This method is also known as “cache busting”.</p>&#xA;&#xA;<p>In your case, you can force the browser to reload the gif and retrigger its animation like this:</p>&#xA;&#xA;<pre><code>function f(obj) {&#xA;    obj.innerHTML = '&lt;img src=""images/ok.gif?timestamp=' + Date.now() + '""&gt;';&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><em>Date.now()</em> gives us the number of milliseconds that have elapsed since 1970, so we can be reasonably sure that the URL will be slightly different every time the function is called.</p>&#xA;&#xA;<p>Since the browser has no way of knowing that <em>ok.gif?timestamp=1508487387065</em> is the same file as <em>ok.gif?timestamp=1508487401817</em>, it will not use its cache and reload the image, giving you the desired effect.</p>&#xA;",1253156,"",,"",,2017-10-20T08:17:53,"","",,2,,,
46879094,2,,46876930,2017-10-22T20:56:34,,1,,"<p>When storing files in your application you should use <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#appgetpathname"" rel=""nofollow noreferrer"">app.getPath('userData')</a> to store them outside of your applications scope, which keeps them persisted.</p>&#xA;&#xA;<p><a href=""https://github.com/louischatriot/nedb"" rel=""nofollow noreferrer"">nedb</a> is a common choice for Electron applications since it's a lightweight database written in JavaScript. If you haven't checked it out, I recommend you to do.</p>&#xA;",7434393,"",,"",,2017-10-22T20:56:34,"","",,2,,,
46906839,2,,46896536,2017-10-24T09:26:42,,0,,"<p>You can bundle your Python application inside the Electron application and initiate the Python script as a <a href=""https://nodejs.org/api/child_process.html"" rel=""nofollow noreferrer"">child_process</a>.</p>&#xA;&#xA;<p>In your main process you can run something like</p>&#xA;&#xA;<pre><code>require('child_process').spawn('python', pathToScript)&#xA;</code></pre>&#xA;&#xA;<p>For a complete implementation you can checkout <a href=""https://github.com/fyears/electron-python-example"" rel=""nofollow noreferrer"">electron-python-example on GitHub</a>.</p>&#xA;",7434393,"",,"",,2017-10-24T09:26:42,"","",,2,,,
46983382,2,,46965658,2017-10-27T21:02:58,,0,,"<p>It's by design. The modal is only as big as it's content (and padding). By setting <code>.uk-open&gt;.uk-modal-dialog</code> to <code>height: 100vh</code> you'll get it as big as the window (but you have to adjust some inner padding, etc to get rid of the scroll bar).</p>&#xA;",7434393,"",,"",,2017-10-27T21:02:58,"","",,3,,,
47005373,2,,47005059,2017-10-29T21:23:38,,2,,"<p>For me the size of my finished app is around 50mb and if your adding 45mb to the package is going to get quite big. </p>&#xA;&#xA;<p>Here's a <a href=""https://github.com/electron/electron/issues/2003"" rel=""nofollow noreferrer"">github issue</a> on it.</p>&#xA;&#xA;<p>The comment I'm emphasizing is:</p>&#xA;&#xA;<blockquote>&#xA;  <p>That's the expected size, there is no way to make it smaller.</p>&#xA;</blockquote>&#xA;&#xA;<p>The reason why it's so big is because electron is loading most of chromium inside that 50mb file which I think it's pretty darn small for 50mb</p>&#xA;&#xA;<p>So no unfortunately there is no way to make it smaller sorry.</p>&#xA;",6577664,"",,"",,2017-10-29T21:23:38,"","",,3,,,
46783598,2,,46783581,2017-10-17T06:13:19,,2,,"<p>You have just declared your variable, but have not initialized. Initialize it with an <code>object</code> and then you can add properties to it.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>let win = {};&#xD;&#xA;&#xD;&#xA;win.jQuery = 'Test';</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",5496973,"",,"",,2017-10-17T06:13:19,"","",,4,,,
46867549,2,,46866925,2017-10-21T20:04:02,,0,,"<p>After reading your question again, I think I have a solution for you.</p>&#xA;&#xA;<p>You basically need to iterate through your rows in one loop and then get for each row-id all associated options (that have the same value).</p>&#xA;&#xA;<p>You can do that easily using jQuery:</p>&#xA;&#xA;<pre><code>for (var k=0; k&lt;rows.length; k++){&#xA;  var rowId = rows[k].TestID;&#xA;  $(""[value='""+rowId+""']"").each(function(element){&#xA;      this.selected = ""selected"";&#xA;  });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This code makes all <code>&lt;option&gt;</code>entries <code>selected</code> that match your row`s id. The full code would be:</p>&#xA;&#xA;<pre><code>//execute queries here&#xA;var id = document.getElementById('idtext').value&#xA;&#xA;connection.query('SELECT * FROM doneon WHERE SampID LIKE ?', id, (err, rows, fields) =&gt; {&#xA;  if (err){&#xA;    return console.log('An error ocurred with the query', err)&#xA;  }&#xA;&#xA;  for (var k=0; k&lt;rows.length; k++){&#xA;    var rowId = rows[k].TestID;&#xA;    $(""[value='""+rowId+""']"").each(function(element){&#xA;      this.selected = ""selected"";&#xA;    });&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If have created a sample fiddle, that uses this code with some example data: <a href=""https://jsfiddle.net/qgadhsLh/"" rel=""nofollow noreferrer"">https://jsfiddle.net/qgadhsLh/</a></p>&#xA;",3098783,"",3098783,"",2017-10-21T22:00:04,2017-10-21T22:00:04,"","",,5,,,
46913418,2,,42218566,2017-10-24T14:38:13,,2,,"<p><strong>Option 1: Use <code>window.open()</code></strong></p>&#xA;&#xA;<p>As of May 2017, it is now possible to open a new window in Electron using <code>window.open()</code>, in a similar way to how nwjs does it. This means there is no need to worry about sending the image over different processes. See the <a href=""https://github.com/electron/electron/blob/master/docs/api/window-open.md#using-chromes-windowopen-implementation"" rel=""nofollow noreferrer"">electron documentation</a> for more details. With a DOM reference to the canvas in the new window, you can easily copy the image from the old canvas every frame.</p>&#xA;&#xA;<pre><code>newCanvas.drawImage(oldCanvas, 0, 0, width, height)&#xA;</code></pre>&#xA;&#xA;<p><strong>Option 2: Use WebRTC</strong></p>&#xA;&#xA;<p>You can do a stream from a canvas to a video element via WebRTC, locally between two windows. My solution is based on an answer to a <a href=""https://stackoverflow.com/a/35300241/686043"">related question</a> as well as a useful <a href=""http://Useful%20WebRTC%20canvas%20example:%20https://webrtc.github.io/samples/src/content/capture/canvas-pc/"" rel=""nofollow noreferrer"">WebRTC canvas example</a>. Open the below two links and click connect.</p>&#xA;&#xA;<p>The canvas to be streamed:&#xA;<a href=""https://jsfiddle.net/f5y48hcd/26/"" rel=""nofollow noreferrer"">https://jsfiddle.net/f5y48hcd/26/</a></p>&#xA;&#xA;<pre><code>var stream = canvas.captureStream();&#xA;&#xA;...&#xA;&#xA;stream.getTracks().forEach(&#xA;    function(track) {&#xA;      pc.addTrack(&#xA;        track,&#xA;        stream&#xA;      );&#xA;    }&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>The video element receiving the stream:&#xA;<a href=""https://jsfiddle.net/rfqhwo4z/10/"" rel=""nofollow noreferrer"">https://jsfiddle.net/rfqhwo4z/10/</a></p>&#xA;&#xA;<pre><code>pc.ontrack = gotRemoteStream;&#xA;&#xA;...&#xA;&#xA;function gotRemoteStream(e) {&#xA;  if (video.srcObject !== e.streams[0]) {&#xA;    video.srcObject = e.streams[0];&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Please note that you'll need the canvas tab actively running for it to be animating on the video tab. I'm yet to test this in an electron build.</p>&#xA;",686043,"",686043,"",2017-11-06T13:12:44,2017-11-06T13:12:44,"","",,6,,,
45395335,2,,45394753,2017-07-30T00:43:36,,0,,"<p>this seems like a good place to use a <a href=""https://angular.io/api/core/FactoryProvider"" rel=""nofollow noreferrer"">FactoryProvider</a> as long as both services have the same interface. This pattern works with AOT in other applications I've worked on. </p>&#xA;&#xA;<pre><code>import { FactoryProvider } from '@angular/core';&#xA;import { MyService as MySerivceWindows } from './path/to/the/windows/service/file';&#xA;import { MyService as MyServiceMac } from './path/to/the/mac/service/file';&#xA;&#xA;export abstract class MyService{};&#xA;&#xA;export function myFactoryProvider(){&#xA;       if (process.platform === 'darwin') { // Mac&#xA;            return new MyServiceMac();&#xA;       }else{&#xA;            return new MySeviceWindows();&#xA;       }&#xA;}&#xA;&#xA;const MY_SERVICE_PROVIDER: FactoryProvider = {&#xA;     provide: MyService, &#xA;     useFactory: myFactoryProvider&#xA; };&#xA;</code></pre>&#xA;&#xA;<p>You can then import and inject the abstract class into your components where needed.</p>&#xA;&#xA;<p>it would also probably be best to provide the process and inject it as well in the deps for the factory. </p>&#xA;",771630,"",,"",,2017-07-30T00:43:36,"","",,1,,,
45401097,2,,45400785,2017-07-30T14:51:35,,0,,"<p>this is because you are running async code in a loop.</p>&#xA;&#xA;<p>To overcome this you need to create a closure by wrapping the async code in a function:</p>&#xA;&#xA;<pre><code>for(i = 0; i &lt; docs.length; i++){&#xA;  console.log(doc = docs[i]);&#xA;  console.log(i);&#xA;    runAsyncCode(doc)&#xA;  }&#xA;&#xA;function runAsyncCode(doc){&#xA;    request('GET', doc.URL).done(function(res) {&#xA;          data = fs.readFileSync(DataPath + ""/savedpages/"" + doc.Name + "".html"");&#xA;          console.log(data);&#xA;          console.log(res.getBody())&#xA;          if(data == res.getBody()){&#xA;            index.update({_id: doc.ID}, {$set: {Changes:false}}, function(err, updateval){&#xA;              if(err) throw err;&#xA;              console.log(doc.Name);&#xA;              event.sender.send('update-false', doc.Name + ""-changescell"")&#xA;            })&#xA;          } else {&#xA;            index.update({_id: doc.ID}, {$set: {Changes:true}}, function(err, updateval){&#xA;              if(err) throw err;&#xA;              console.log(doc.Name);&#xA;              event.sender.send('update-true', doc.Name + ""-changescell"")&#xA;            })&#xA;          }&#xA;        })&#xA;}&#xA;</code></pre>&#xA;",812303,"",,"",,2017-07-30T14:51:35,"","",,0,,,
45410154,2,,45288585,2017-07-31T07:49:31,,0,,<p>The problem seemed to be in that I was running a very old version of electron-builder. I upgraded and now it's working.</p>&#xA;,6068,"",,"",,2017-07-31T07:49:31,"","",,2,,,
45469173,2,,45448726,2017-08-02T19:12:22,,0,,"<p>If anyone comes across this, I never figured a way around the HTML5 filesystem way of moving the temp file before the users selects the download location. Instead I am using nodejs file system with electrons showSaveDialog. I also had to change JSZip to use .generateNodeStream instead of .generateAsync. Below is my function that I got working for me.</p>&#xA;&#xA;<pre><code>savePNGButton.addEventListener('click', function(e) {&#xA;  var zip = new JSZip();&#xA;  if (WatermarkText == """"){&#xA;    var img = zip.folder(""images"");&#xA;  } else {&#xA;    var img = zip.folder(WatermarkText);&#xA;  }&#xA;  $("".WatermarkPhoto"").each(function(index) {&#xA;   imgsrc = this.src;&#xA;   var DataURL = imgsrc.replace('data:image/png;base64,','');&#xA;   img.file(WatermarkText+index+"".png"", DataURL, {base64: true});&#xA;  });&#xA;  // zip.file(""file"", content);&#xA;  // ... and other manipulations&#xA;    dialog.showSaveDialog({title: 'Test',defaultPath: '~/'+WatermarkText+'.zip',extensions: ['zip']},(fileName) =&gt; {&#xA;      if (fileName === undefined){&#xA;          console.log(""You didn't save the file"");&#xA;          return;&#xA;      }&#xA;    zip&#xA;    .generateNodeStream({type:'nodebuffer',streamFiles:true})&#xA;    .pipe(fs.createWriteStream(fileName))&#xA;    .on('finish', function () {&#xA;        // JSZip generates a readable stream with a ""end"" event,&#xA;        // but is piped here in a writable stream which emits a ""finish"" event.&#xA;        console.log(""zip written."");&#xA;    });&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",8327708,"",,"",,2017-08-02T19:12:22,"","",,0,,,
45469889,2,,45458489,2017-08-02T19:57:36,,0,,"<p>Turns out I made some unrelated mistakes in my event handler code and so the approach I described above works just fine:</p>&#xA;&#xA;<pre><code>Movie.findAll().then((movies) =&gt; {&#xA;    $('#movie-search-field').on('input', (event) =&gt; {&#xA;        /*Use movies here to build and show a suggestions list*/&#xA;    })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Also, if you are doing several database queries and would like your handler to have access to all of those, you can do:</p>&#xA;&#xA;<pre><code>let movies = Movie.findAll()&#xA;let tickets = Ticket.findAll()&#xA;&#xA;Promise.all([movies, tickets]).then(values =&gt; {&#xA;    let [movies, tickets] = values&#xA;    /* register your handlers here and pass the data to them */&#xA;&#xA;    $(""#some-selector"").on('input', {movies: movies, tickets: tickets}, (event) =&gt; {&#xA;        let movies = event.data.movies&#xA;        let tickets = event.data.tickets&#xA;        /* some event handling code that uses both movies and tickets */&#xA;    })&#xA;})&#xA;</code></pre>&#xA;",1269892,"",,"",,2017-08-02T19:57:36,"","",,0,,,
45553031,2,,45477959,2017-08-07T18:00:47,,0,,"<p>Both of those errors are function scope binding errors. The functions <code>this.setupMetaMaskPageStream</code> and <code>this._runtime.onConnect</code> are called from within the MetaMaskController from other functions, but they seem to be getting called without preserving the scope of the MetaMask controller, defaulting to the global context (hence <code>window._setupMetaMaskPageStream</code>).</p>&#xA;&#xA;<p>Without seeing your code, it's hard to know how you called these methods with the wrong context, but it probably involves the <code>bind</code> or <code>call</code> functions.</p>&#xA;",272576,"",,"",,2017-08-07T18:00:47,"","",,0,,,
45603044,2,,45597599,2017-08-10T01:31:34,,0,,"<p>The reason you get undefined function is that you're trying <code>openDatabase</code> in node and not in the browser. If you still really want to use websql but in node you can try out <a href=""https://github.com/nolanlawson/node-websql#readme"" rel=""nofollow noreferrer"">https://github.com/nolanlawson/node-websql#readme</a> (<code>npm install websql -S</code> to add it to your <code>package.json</code>)</p>&#xA;",106205,"",,"",,2017-08-10T01:31:34,"","",,0,,,
45608097,2,,45607684,2017-08-10T08:17:05,,0,,"<pre><code>npm install excel --save&#xA;&#xA;var parseXlsx = require('excel');&#xA;&#xA;parseXlsx('Spreadsheet.xlsx', function(err, data) { //need to pass path to excel-shhet or stream&#xA;  if(err) throw err;// throw error&#xA;  console.log(data);// data is an array of arrays&#xA;});&#xA; Or&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>use <a href=""https://www.npmjs.com/package/xlsx"" rel=""nofollow noreferrer"">this</a></p>&#xA;  &#xA;  <p>check <a href=""https://stackoverflow.com/questions/28860728/reading-excel-file-using-node-js"">this answer</a></p>&#xA;</blockquote>&#xA;",,user7110739,,user7110739,2017-08-10T08:38:24,2017-08-10T08:38:24,"","",,6,,,
45431616,2,,45428131,2017-08-01T07:33:19,,1,,"<p>I believe you are looking for the clipboard api.</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/clipboard.md#clipboard"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/clipboard.md#clipboard</a></p>&#xA;&#xA;<p>The write and read buffer is currently experimental.</p>&#xA;",3743683,"",,"",,2017-08-01T07:33:19,"","",,0,,,
45435455,2,,45426553,2017-08-01T10:33:49,,1,,"<p>The reason you get the error is because the main-process and the renderer-process do not have access to the same modules. For example <code>app</code> can be accessed in the main-process directly via <code>const {app} = require(""electron"")</code>, but in the renderer you can only access a proxy object via <code>const {app} = require(""electron"").remote</code>. But you shouldn't use <code>remote.app</code> either to fix your problem. If you were to modify your main.js script to run on both main-process and renderer-process, you would probably create a loop of creating new windows!</p>&#xA;&#xA;<p>You should outsource the <code>sayWord</code> to a different file. If you plan to send data between main and renderer, then I would suggest to use <a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-main.md"" rel=""nofollow noreferrer"">ipcMain</a> and <a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md"" rel=""nofollow noreferrer"">ipcRenderer</a> instead.</p>&#xA;",2016129,"",,"",,2017-08-01T10:33:49,"","",,0,,,
45463545,2,,45463141,2017-08-02T14:23:51,,1,,"<p>I recommend you to use <a href=""https://github.com/chentsulin/electron-react-boilerplate"" rel=""nofollow noreferrer"">https://github.com/chentsulin/electron-react-boilerplate</a></p>&#xA;&#xA;<p>If you don't want to use boilerplate for react app, consider to use <a href=""https://github.com/electron-userland/electron-webpack"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-webpack</a> (but boilerplate is strongly recommended).</p>&#xA;",1910191,"",,"",,2017-08-02T14:23:51,"","",,1,,,
45482180,2,,45479219,2017-08-03T10:55:04,,1,,"<p>Your best bet would be to use <a href=""https://nodejs.org/api/fs.html"" rel=""nofollow noreferrer"">fs</a> you could create a splash screen when assets load since fs is asynchronous.</p>&#xA;&#xA;<pre><code>fs.readFile(__dirname + ""/models/foot.babylon"", (err, data) =&gt; {&#xA;    if (err) {&#xA;        console.error(err);&#xA;    } else {&#xA;        console.log(data);&#xA;        // Process file data&#xA;        // Remove splash screen and show app&#xA;    }&#xA;});&#xA;</code></pre>&#xA;",7325243,"",,"",,2017-08-03T10:55:04,"","",,2,,,
45506403,2,,45279841,2017-08-04T12:04:53,,1,,"<p>I think you should pass the date with '.' separator, have you tried passing like this?</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;     ""dist"": ""build --em.mode=prod --em.version=07.24.2017"" &#xA;}&#xA;</code></pre>&#xA;",4129063,"",,"",,2017-08-04T12:04:53,"","",,0,,,
45548200,2,,45537448,2017-08-07T13:32:09,,1,,"<p>Try adding the option <code>frame=0</code>.</p>&#xA;&#xA;<pre><code>&lt;button onclick=""window.open('https://electron.atom.io/docs/', 'electron', 'frame=true')""&gt;documentation&lt;/button&gt;&#xA;</code></pre>&#xA;&#xA;<p>See <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/open"" rel=""nofollow noreferrer"">window.open</a> docs for more, specifically <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features"" rel=""nofollow noreferrer"">window features</a></p>&#xA;",266535,"",,"",,2017-08-07T13:32:09,"","",,0,,,
45613879,2,,29669244,2017-08-10T12:33:22,,1,,"<p>On windows, you can use the npm package <a href=""https://github.com/sindresorhus/is-admin"" rel=""nofollow noreferrer"">is-admin</a>, to check if the node process is elevated.</p>&#xA;&#xA;<pre><code>const isAdmin = require('is-admin');&#xA;&#xA;isAdmin().then(elevated =&gt; {&#xA;    if (elevated) {&#xA;        console.log('Elevated');&#xA;    } else {&#xA;        console.log('Not elevated');&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>There is also a cross platform implementation called <a href=""https://github.com/sindresorhus/is-elevated"" rel=""nofollow noreferrer"">is-elevated</a> which bundles elevation checks for Unix and Windows</p>&#xA;",968734,"",,"",,2017-08-10T12:33:22,"","",,0,,,
45469435,2,,45469200,2017-08-02T19:28:33,,2,,"<p><code>printf()</code>/<code>fprintf()</code> buffers its output by default. You can either manually call <code>fflush(stdout);</code> after your calls to <code>fprintf()</code> to force the buffered output to stdout <em>or</em> you can disable buffering entirely with <code>setvbuf(stdout, NULL, _IONBF, 0);</code> (this must be done once and <em>before</em> any output to stdout).</p>&#xA;",2050455,"",,"",,2017-08-02T19:28:33,"","",,0,,,
45471822,2,,45471774,2017-08-02T22:08:39,,2,,"<p>If I understand your question correctly, it sounds like you are just having a styling issue. Just make some tweaks to your CSS or inline page styling and you will fix this issue.</p>&#xA;",4941412,"",,"",,2017-08-02T22:08:39,"","",,0,,,
45613159,2,,45605216,2017-08-10T12:00:07,,2,,<p>All you have to do in the front end is to use <code>hosSchema[0]._doc.status</code> instead of <code>hosSchema[0].status</code></p>&#xA;,5848664,"",,"",,2017-08-10T12:00:07,"","",,0,,,
45453825,2,,45452960,2017-08-02T07:07:36,,3,,"<p>I think that this is a potential solution to what you are looking for...</p>&#xA;&#xA;<p>I think it wise to use the <code>directory-tree</code> package as opposed to the <code>readdirp</code> package.</p>&#xA;&#xA;<p>Pass the <code>TreeView</code> component a root prop like so <code>&lt;TreeView root='c:\' /&gt;</code></p>&#xA;&#xA;<pre><code>import React, { Component } from 'react';&#xA;import dirTree from 'directory-tree'; // use this istead of 'readdirp`&#xA;&#xA;&#xA;export default class TreeView extends Component {&#xA;    constructor() {&#xA;        super();&#xA;&#xA;        this.state = {&#xA;            tree: null //initialize tree&#xA;        }&#xA;&#xA;        this.renderTreeNodes = this.renderTreeNodes.bind(this);&#xA;    }&#xA;&#xA;    componentWillMount() {&#xA;        const { root } = this.props;&#xA;        const tree = dirTree(root);&#xA;&#xA;        this.setState({ tree });&#xA;    }&#xA;&#xA;    renderTreeNodes(children) {&#xA;        if (children.length === 0) return null;&#xA;&#xA;        return (&#xA;            children.map(child =&gt; {&#xA;                return (&#xA;                    &lt;div key={child.path} id={child.path}&gt;&#xA;                        { child.hasOwnProperty('children') &amp;&amp; child.type === 'directory'?&#xA;                            this.renderTreeNodes(child.children) : null}&#xA;                    &lt;/div&gt;&#xA;                )&#xA;            })&#xA;        )&#xA;    }&#xA;&#xA;    render() {&#xA;        const { tree } = this.state;&#xA;&#xA;        return (&#xA;            &lt;div id=""default""&gt;&#xA;                &lt;div id={tree.path}&gt;&#xA;                    { this.renderTreeNodes(tree.children) }&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        );&#xA;    }&#xA;&#xA;}&#xA;</code></pre>&#xA;",7496355,"",7496355,"",2017-08-02T17:59:14,2017-08-02T17:59:14,"","",,7,,,
45454098,2,,45448049,2017-08-02T07:23:02,,3,,<p>You can open Command Prompt as Administrator and then run the app via <code>electron .</code></p>&#xA;,7325243,"",,"",,2017-08-02T07:23:02,"","",,0,,,
45455553,2,,39557365,2017-08-02T08:31:23,,4,,"<p>Unfortunately Electron disables the <code>shell.openItem()</code> API in Mac App Store builds. From their <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/mac-app-store-submission-guide.md#shellopenitemfilepath"" rel=""nofollow noreferrer"">signing guide</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>[<code>shell.openItem()</code>] will fail when the app is signed for distribution in the Mac App Store. Subscribe to <a href=""https://github.com/electron/electron/issues/9005"" rel=""nofollow noreferrer"">#9005</a> for updates.</p>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<p>However, there is a work-around that will enable you to have the same functionality:</p>&#xA;&#xA;<pre><code>shell.openExternal('file://' + myFilePath);&#xA;</code></pre>&#xA;&#xA;<p>This approach is also confirmed to pass the Apple Store Reviews (<a href=""https://github.com/electron/electron/issues/9005#issuecomment-313493809"" rel=""nofollow noreferrer"">see here</a>).</p>&#xA;",5552584,"",,"",,2017-08-02T08:31:23,"","",,0,,,
45576825,2,,45554249,2017-08-08T19:42:14,,4,,"<p>It's nice to see a question from someone familiar here. :)</p>&#xA;&#xA;<p>I'd suggest you to disable web security preference within BrowserWindow. Also there is an <a href=""https://github.com/electron/electron/issues/5107"" rel=""nofollow noreferrer"">issue</a> related to this topic.</p>&#xA;",2324048,"",,"",,2017-08-08T19:42:14,"","",,0,,,
45393324,2,,43934593,2017-07-29T19:36:34,,5,,"<p>Store your desired information in a global state store, and then access it from within your context menu click event.</p>&#xA;&#xA;<p>For Example</p>&#xA;&#xA;<pre><code>// Instantiate a Global Store&#xA;const globalStore = {&#xA;  eventTargetHref = null&#xA;}&#xA;&#xA;// Set value inside your DOM node event listener&#xA;aDOMnode.addEventListener('contextmenu', (event) =&gt; {&#xA;  event.preventDefault()&#xA;  globalStore.eventTargetHref = event.target.href&#xA;  aContextMenu.popup(remote.getCurrentWindow())&#xA;}&#xA;&#xA;// Access value from your context menu click event&#xA;aContextMenu.append(new MenuItem({&#xA;  label: 'Open In New Tab',&#xA;  click() {&#xA;    addNewTab(globalStore.eventTargetHref)&#xA;  },&#xA;}))&#xA;</code></pre>&#xA;",3954694,"",,"",,2017-07-29T19:36:34,"","",,0,,,
45463599,2,,45314006,2017-08-02T14:25:44,,8,,"<p>The issue here was</p>&#xA;&#xA;<pre><code>    return {&#xA;        ...state,&#xA;        elementsMap: {&#xA;            ...state.elementsMap,&#xA;            ...elements,&#xA;        },&#xA;        visibleElements: [...state.visibleElements, ...visibleIds],&#xA;        unplacedElements: [...state.unplacedElements, ...unplacedIds],&#xA;    };&#xA;</code></pre>&#xA;&#xA;<p>namely, the <code>visibleElements</code> (and <code>unplacedElements</code> values). </p>&#xA;&#xA;<p><code>[...state.visibleElements, ...visibleIds]</code> will concat 2 arrays so since this code was being hit each time I went back to the <code>Sky</code> tab, it was adding the new ids in <code>...visibleIds</code>, to the array I already had in <code>...state.visibleElements</code> and doubling values</p>&#xA;",602210,"",,"",,2017-08-02T14:25:44,"","",,0,,,
45489272,2,,45489129,2017-08-03T15:59:02,,8,,"<p>You have to <code>return</code> a promise:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>function waitForCondition(conditionObj) {&#xA;  return new Promise(resolve =&gt; {&#xA;    var start_time = Date.now();&#xA;    function checkFlag() {&#xA;      if (conditionObj.arg == conditionObj.test) {&#xA;        console.log('met');&#xA;        resolve();&#xA;      } else if (Date.now() &gt; start_time + 3000) {&#xA;        console.log('not met, time out');&#xA;        resolve();&#xA;      } else {&#xA;        window.setTimeout(checkFlag, 1000); &#xA;      }&#xA;    }&#xA;    checkFlag();&#xA;  });&#xA;}&#xA;&#xA;async function run() {&#xA;  console.log('before');&#xA;  await waitForCondition({arg: '1', test: '1'})&#xA;  console.log('after');&#xA;}&#xA;run();&#xA;</code></pre>&#xA;&#xA;<p>I refactored your code a bit. To get the current time, use <code>Date.now()</code>. And you should be OK with calling <code>resolve</code> without a timeout of 1 millisecond.</p>&#xA;",5989584,"",,"",,2017-08-03T15:59:02,"","",,4,,,
45487191,2,,45485262,2017-08-03T14:30:37,,10,,"<p>Enabling the Chrome devtools in production can be done in various ways:</p>&#xA;&#xA;<ol>&#xA;<li>A environment variable:&#xA;&#xA;<ul>&#xA;<li>E.g. under Windows <code>set ELECTRON_ENV=development&amp;&amp; myapp.exe</code></li>&#xA;</ul></li>&#xA;<li>Pass a special parameter to your app&#xA;&#xA;<ul>&#xA;<li>E.g. <code>myapp.exe --debug</code></li>&#xA;</ul></li>&#xA;<li>Debug mode via user settings (if you have persistent settings)</li>&#xA;<li>Menu entry to open the devtools&#xA;&#xA;<ul>&#xA;<li>Can be combined with 1.-3. to only have that menu entry when in debug mode</li>&#xA;</ul></li>&#xA;</ol>&#xA;&#xA;<p>You can just check if 1.-3. are set and if they are, you simply open the devtools via <code>mainWindow.webContents.openDevTools()</code></p>&#xA;&#xA;<p>Personally I use a combination of 1., 3. and 4. I simply unlock a developer menu that allows me to open the devtools or opens the userdata folder for me.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>If you also want to log critical errors, then <a href=""https://www.npmjs.com/package/electron-log"" rel=""noreferrer"">electron-log</a> looks like a rather popular option for electron.</p>&#xA;",2016129,"",,"",,2017-08-03T14:30:37,"","",,1,,,
45462603,2,,45462096,2017-08-02T13:42:18,,-2,,"<p>well i fix the problem by changing the id3js library  file &#xA;they use <code>fs.open</code> so i change it to be </p>&#xA;&#xA;<pre><code>fs.openSync(self.file, 'r', function(err, fd) {&#xA;                        if(err) {&#xA;                            return callback(err);&#xA;                        }&#xA;                        self.fd = fd;&#xA;                        callback();&#xA;                    });&#xA;</code></pre>&#xA;&#xA;<p>and no more problem , i will submit this on git </p>&#xA;",3689646,"",,"",,2017-08-02T13:42:18,"","",,4,,,
45670372,2,,45668292,2017-08-14T08:29:10,,0,,"<p>I have found a solution that does not require SPAWN, in an application with Node.js, Express.js and Electron. And works perfectly well even after packaging the electron app.</p>&#xA;&#xA;<p>Here is the link to its GitHub repository:</p>&#xA;&#xA;<p><a href=""https://medium.com/@meakaakka/a-complete-guide-to-packaging-your-electron-app-1bdc717d739f"" rel=""nofollow noreferrer"">GitHub repository for the solution's boilerplate.</a></p>&#xA;&#xA;<p>One thing to remember is that after packaging the electron app through third party packagers like <a href=""https://medium.com/@meakaakka/a-complete-guide-to-packaging-your-electron-app-1bdc717d739f"" rel=""nofollow noreferrer"">electron-builder</a> it is necessary to put the <strong>config.json</strong> file into the new distribution/dist folder where the packaged files are present otherwise it throws the <strong>config.json</strong> not found error on the application execution.</p>&#xA;",5800637,"",5800637,"",2017-08-14T08:34:34,2017-08-14T08:34:34,"","",,0,,,
45675754,2,,45673501,2017-08-14T13:34:06,,0,,"<p>So as I allready said I'm using bootstrap4 Beta. After researching in the doc's I found the class sticky-top which does what i want! So if you have a simular problem, just use the class=""sticky-top""! Careful it wont work in Edge and IE 11</p>&#xA;",6199464,"",,"",,2017-08-14T13:34:06,"","",,0,,,
45709210,2,,40640653,2017-08-16T08:57:32,,0,,"<p>Add this piece of code in <code>webview</code>'s <code>preload</code> and the message disappears and clipboard works as expected:</p>&#xA;&#xA;<pre><code>(function () {&#xA;  window._docs_chrome_extension_exists = !0;&#xA;  window._docs_chrome_extension_features_version = 1;&#xA;  window._docs_chrome_extension_permissions = [""alarms"", ""clipboardRead"", ""clipboardWrite"", ""storage"", ""unlimitedStorage""];&#xA;})()&#xA;</code></pre>&#xA;&#xA;<p>Indeed, by looking closely at what the <a href=""https://chrome.google.com/webstore/detail/google-docs-offline/ghbmnnjooekpmoecnnnilnnbdlolhkhi"" rel=""nofollow noreferrer"">Google Drive extension</a> is doing, I realized that the extension is loading this piece of code in every tab matching Google Drive's URLs.</p>&#xA;",1501565,"",,"",,2017-08-16T08:57:32,"","",,0,,,
45734497,2,,45732352,2017-08-17T11:56:41,,0,,"<p>Base on this readme, <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/browser-window.md</a></p>&#xA;&#xA;<p>you can do it something like</p>&#xA;&#xA;<p><code>&#xA;win.loadURL(`file://${__dirname}/app/index.html`)&#xA;</code></p>&#xA;&#xA;<p>but you have to put this inside <code>app.on('ready', function() {}</code> to avoid getting the <code>Cannot create BrowserWindow before app is ready</code> error. </p>&#xA;&#xA;<p><strong>Reason why that error appears</strong>&#xA;Because the app is not yet ready and is still loading</p>&#xA;",3792278,"",,"",,2017-08-17T11:56:41,"","",,0,,,
45767982,2,,45767529,2017-08-19T05:23:13,,0,,"<p>You can try this npm package <a href=""https://www.npmjs.com/package/virtual-keyboard"" rel=""nofollow noreferrer"">virtual keyboard</a> for number pad ,etc.</p>&#xA;",6906028,"",,"",,2017-08-19T05:23:13,"","",,5,,,
45805690,2,,45741910,2017-08-21T21:19:39,,0,,"<p>This task can be achieved using IPC.</p>&#xA;&#xA;<p>On the controller just add:</p>&#xA;&#xA;<pre><code>const {ipcRenderer} = require('electron');&#xA;$scope.openPlayer = function () {&#xA;    $scope.playerOpen = true;&#xA;    ipcRenderer.send('open-player-window', 'an-argument');&#xA;};&#xA;&#xA;$scope.closePlayer = function () {&#xA;    $scope.playerOpen = false;&#xA;    ipcRenderer.send('close-player-window', 'an-argument');&#xA;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>And on the main.js</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow, electron, ipcMain} = require('electron');&#xA;&#xA;&#xA;app.on('ready', () =&gt; {&#xA;&#xA;mainWindow = new BrowserWindow(etc... //&#xA;&#xA;ipcMain.on('close-player-window', (event, arg) =&gt; {&#xA;    playerWindow.setClosable(true);&#xA;    playerWindow.hide();&#xA;});&#xA;&#xA;ipcMain.on('open-player-window', (event, arg) =&gt; {&#xA;    playerWindow = new BrowserWindow({etc...});&#xA;    playerWindow.loadURL(`file://${__dirname}/index.html#/player`);&#xA;    playerWindow.setClosable(false);&#xA;    playerWindow.setMinimizable(false);&#xA;&#xA;&#xA;});&#xA;</code></pre>&#xA;",1433073,"",,"",,2017-08-21T21:19:39,"","",,0,,,
45623471,2,,45600000,2017-08-10T21:07:02,,1,,"<p>I guess the question shows how little I work with html.  Anyway, in case someone else gets stuck like I did. After a lot of trial and error here is some test code that does what I need.</p>&#xA;&#xA;<pre><code> &lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;title&gt;Test&lt;/title&gt;&#xA;&#xA;    &lt;!-- Stylesheets --&gt;&#xA;    &lt;link rel=""stylesheet"" href=""./css/photon.min.css""&gt;&#xA;&#xA;    &lt;!-- Javascript --&gt;&#xA;    &lt;!--&lt;script src=""js/menu.js"" charset=""utf-8""&gt;&lt;/script&gt; --&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;div class=""window""&gt;&#xA;&#xA;      &lt;!-- .toolbar-header sits at the top of your app --&gt;&#xA;      &lt;header class=""toolbar toolbar-header""&gt;&#xA;          &lt;h1 class=""title""&gt;Test&lt;/h1&gt;&#xA;      &lt;/header&gt;&#xA;&#xA;        &lt;div class=""tab-group""&gt;&#xA;          &lt;div class=""tab-item"" onclick=""showTab(event, 'income')"" &gt;&#xA;            &lt;span class=""icon icon-cancel icon-close-tab""&gt;&lt;/span&gt;&#xA;            Income&#xA;          &lt;/div&gt;&#xA;          &lt;div class=""tab-item active"" onclick=""showTab(event, 'expense')""&gt;&#xA;            &lt;span class=""icon icon-cancel icon-close-tab""&gt;&lt;/span&gt;&#xA;            Expense&#xA;          &lt;/div&gt;&#xA;          &lt;div class=""tab-item"" onclick=""showTab(event, 'names')""&gt;&#xA;            &lt;span class=""icon icon-cancel icon-close-tab""&gt;&lt;/span&gt;&#xA;            Names&#xA;          &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;      &lt;!-- Your app's content goes inside .window-content --&gt;&#xA;    &lt;div id=""income""  class=""window-content"" style=""display: none;""&gt;&#xA;        Test1&#xA;    &lt;/div&gt;&#xA;    &lt;div id=""expense"" class=""window-content"" style=""display:none;""&gt;&#xA;        Test2&#xA;    &lt;/div&gt;&#xA;    &lt;div id=""names"" class=""window-content"" style=""display:none;""&gt;&#xA;        Test3&#xA;    &lt;/div&gt;&#xA;    &lt;script&gt;&#xA;        function showTab(event, tabName) {&#xA;            //alert('test');&#xA;            var i, tabcontent, tablinks;&#xA;            tabcontent = document.getElementsByClassName(""window-content"");&#xA;            for (i=0; i &lt; tabcontent.length; i++) {&#xA;                tabcontent[i].style.display = ""none"";   &#xA;            }&#xA;&#xA;            tablinks = document.getElementsByClassName(""tablinks"");&#xA;            for ( i=0; i &lt; tablinks.length; i++) {&#xA;                tablinks[i].className = tablinks[i].className.replace(""active"", """");   &#xA;            }&#xA;            document.getElementById(tabName).style.display = ""block"";&#xA;            event.currentTarget.className += "" active"";&#xA;        }&#xA;        &lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Regards,  Jim</p>&#xA;",810838,"",,"",,2017-08-10T21:07:02,"","",,1,,,
45625802,2,,45600819,2017-08-11T01:57:49,,1,,"<p>I think this is possible (or should be) in both projects, you might try changing:</p>&#xA;&#xA;<pre><code>navigator.geolocation&#xA;</code></pre>&#xA;&#xA;<p>To</p>&#xA;&#xA;<pre><code>window.navigator.geolocation&#xA;</code></pre>&#xA;&#xA;<p>This is because most evaluate calls are run in a clean context, or so I think. If this doesn't work then Navalia might be able to do it as it's fairly ""bare-metal"" so-to-speak.</p>&#xA;&#xA;<p>Best of luck!</p>&#xA;",2055669,"",,"",,2017-08-11T01:57:49,"","",,1,,,
45627847,2,,45626303,2017-08-11T05:52:06,,1,,"<p>I would suggest you to use <code>Handlebars</code> as @Amit mentioned.</p>&#xA;&#xA;<p>first move out the code inside <code>&lt;div id=""page-inner""&gt;</code> as below:</p>&#xA;&#xA;<pre><code>&lt;div id=""page-inner""&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;script id= ""requests-template"" type=""text/x-handlebars-template""&gt;&#xA;    &lt;div class=""row""&gt;&#xA;        {{#each requests}}&#xA;        &lt;div class=""col-md-4 col-sm-4""&gt;&#xA;            &lt;div class=""card""&gt;&#xA;                &lt;div class=""card-content""&gt;&#xA;                    &lt;span class=""card-title""&gt;{{this.fieldName}}&lt;/span&gt;&#xA;                    &lt;p&gt;{{this.fieldName}}&lt;/p&gt;&#xA;                &lt;/div&gt;&#xA;                &lt;div class=""card-action""&gt;&#xA;                    &lt;a href=""#""&gt;{{this.fieldName}}&lt;/a&gt;&#xA;                    &lt;a href=""#""&gt;{{this.fieldName}}&lt;/a&gt;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;            {{/each}}&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Then inside another script page of type <code>text/javascript</code> you create the requests and assigned <code>obj/hosSchema</code> to it as below:</p>&#xA;&#xA;<pre><code>&lt;script type=""text/javascript""&gt;&#xA;var requestInfo = document.getElementById('requests-template').innerHTML;&#xA;&#xA;        var template = Handlebars.compile(requestInfo);&#xA;&#xA;        var requestData = template({&#xA;            requests: obj&#xA;        })&#xA;        $('#page-inner').html(requestData);&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>NOTE: you need <code>handlebars</code> package installed (<code>npm install handlebars --save</code>)</p>&#xA;",5848664,"",5848664,"",2017-08-11T05:55:43,2017-08-11T05:55:43,"","",,0,,,
45640790,2,,45638656,2017-08-11T17:31:22,,1,,"<p>If you want to query multiple attributes, express them like <code>el[propA=val][propB=val]</code>, so, in your case</p>&#xA;&#xA;<pre><code>var ROWS= RPT_ACCOUNTS.querySelectorAll('tr[data-rpt_accounts_code=""' + searchvalue + '""][data-rpt_accounts_type=""' + searchvalue2 + '""]')&#xA;</code></pre>&#xA;",540955,"",,"",,2017-08-11T17:31:22,"","",,0,,,
45650882,2,,45650760,2017-08-12T13:30:46,,1,,"<p>Attach an <code>id</code> to the image and write some JavaScript to download the <code>src</code>.</p>&#xA;&#xA;<pre><code>var link = document.createElement('a');&#xA;link.download = document.getElementById(""someid"").src;&#xA;link.href = document.getElementById(""someid"").src;&#xA;link.click();&#xA;</code></pre>&#xA;",2827296,"",,"",,2017-08-12T13:30:46,"","",,0,,,
45668401,2,,45641983,2017-08-14T06:13:56,,1,,"<p>The issue is the <code>$nin</code> operator - it does not work as it does in mongo.</p>&#xA;&#xA;<p>NEDB's <code>$in</code> operator works differently: Only one of the operands can be an array. Check out the definition of <a href=""https://github.com/louischatriot/nedb/blob/397c6821ca4e011aa4f8483e0ded3d24c882d9f8/lib/model.js#L601"" rel=""nofollow noreferrer""><code>$in</code></a> (<a href=""https://github.com/louischatriot/nedb/blob/397c6821ca4e011aa4f8483e0ded3d24c882d9f8/lib/model.js#L613"" rel=""nofollow noreferrer""><code>$nin</code></a> is just a negation of <code>$in</code> after all). When it checks if <a href=""https://github.com/louischatriot/nedb/blob/397c6821ca4e011aa4f8483e0ded3d24c882d9f8/lib/model.js#L540"" rel=""nofollow noreferrer"">things are equal</a> for arrays, it makes sure only one of the items is an array i.e. neither <code>a</code> or <code>b[i]</code> can  be arrays. If they are, then return false. <code>$nin</code> hence returns true - explaining the presence of both the documents in the results.</p>&#xA;&#xA;<p>You can verify this as follows: try changing <code>[email]</code> to something like <code>[""someotheraddress@gmail.com"", ""anotheraddress@gmail.com"", ""foo@bar.com""]</code>, you'll notice that the two results disappear - proving that it doesn't check if each element in <code>data.readBy</code> is not in the list we provide, but check if the entire <code>data.readBy</code> is present in the list we provide.</p>&#xA;&#xA;<p><strong>Solution</strong>&#xA;Use <code>{ $not: { elemMatch }</code></p>&#xA;&#xA;<p>You can overcome the problem by changing your query to the following:</p>&#xA;&#xA;<pre><code>message_query.push({&#xA;  $and: [{ to: ""All"" }, { $not: { ""data.readBy"": { $elemMatch: email } } }]&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Here's the code to verify:</p>&#xA;&#xA;<pre><code>const Datastore = require(""nedb"");&#xA;&#xA;const db = new Datastore({&#xA;  inMemoryOnly: true,&#xA;  autoload: false&#xA;});&#xA;&#xA;db.insert(&#xA;  [&#xA;    {&#xA;      to: ""All"",&#xA;      toname: ""Some Name"",&#xA;      from: ""someaddress@gmail.com"",&#xA;      fromname: ""Some other Name"",&#xA;      message: ""A message for all..."",&#xA;      timestamp: 1502473320,&#xA;      imtype: ""msg"",&#xA;      data: {&#xA;        readBy: [""someotheraddress@gmail.com"", ""anotheraddress@gmail.com""]&#xA;      }&#xA;    },&#xA;    {&#xA;      to: ""All"",&#xA;      toname: ""Some Name"",&#xA;      from: ""someoneelse@gmail.com"",&#xA;      fromname: ""Some other Name"",&#xA;      message: ""A message for all..."",&#xA;      timestamp: 1502473420,&#xA;      imtype: ""msg"",&#xA;      data: {&#xA;        readBy: [""someotheraddress@gmail.com"", ""anotheraddress@gmail.com""]&#xA;      }&#xA;    },&#xA;    {&#xA;      to: ""All"",&#xA;      toname: ""Some Name"",&#xA;      from: ""someoneelse@gmail.com"",&#xA;      fromname: ""Some other Name"",&#xA;      message: ""A message for all..."",&#xA;      timestamp: 1502473420,&#xA;      imtype: ""msg"",&#xA;      data: {&#xA;        readBy: [""someotheraddress@gmail.com"" ]&#xA;      }&#xA;    },&#xA;    {&#xA;      to: ""foo@bar.com"",&#xA;      toname: ""Some Name"",&#xA;      from: ""someoneelse@gmail.com"",&#xA;      fromname: ""Some other Name"",&#xA;      message: ""A message for all..."",&#xA;      timestamp: 1502473420,&#xA;      imtype: ""msg"",&#xA;      data: {&#xA;        readBy: [""someotheraddress@gmail.com"", ""anotheraddress@gmail.com""]&#xA;      }&#xA;    },&#xA;    {&#xA;      to: ""anotheraddress@gmail.com"",&#xA;      toname: ""Some Name"",&#xA;      from: ""someoneelse@gmail.com"",&#xA;      fromname: ""Some other Name"",&#xA;      message: ""A message for all..."",&#xA;      timestamp: 1502473420,&#xA;      imtype: ""msg"",&#xA;      data: {&#xA;        read: true&#xA;      }&#xA;    },&#xA;    {&#xA;      to: ""anotheraddress@gmail.com"",&#xA;      toname: ""Some Name"",&#xA;      from: ""someoneelse@gmail.com"",&#xA;      fromname: ""Some other Name"",&#xA;      message: ""A message for all..."",&#xA;      timestamp: 1502473420,&#xA;      imtype: ""msg"",&#xA;      data: {&#xA;      }&#xA;    }&#xA;  ],&#xA;  (...args) =&gt; {&#xA;    var email = ""anotheraddress@gmail.com"";&#xA;&#xA;    var _list = [""someotheraddress@gmail.com"", ""anotheraddress@gmail.com"", ""foo@bar.com""];&#xA;&#xA;    var message_query = [];&#xA;&#xA;    message_query.push({&#xA;      $and: [{ to: ""All"" }, { $not: { ""data.readBy"": { $elemMatch: email } } }]&#xA;    });&#xA;&#xA;    // message_query.push({&#xA;    //   $and: [{ to: ""All"" }, { ""data.readBy"": { $nin: [email] } }]&#xA;    // });&#xA;&#xA;    // message_query.push({&#xA;    //   $and: [{ to: ""All"" }, { ""data.readBy"": { $nin: _list } }]&#xA;    // });&#xA;&#xA;    message_query.push({&#xA;      $and: [{ to: email }, { ""data.read"": { $exists: false } }]&#xA;    });&#xA;&#xA;    db.find({&#xA;      $and: [ { $not: { from: email } }, { $or: message_query } ]&#xA;    }).exec(function(err, results) {&#xA;      console.log(JSON.stringify(results, null, 2));&#xA;    });&#xA;&#xA;  }&#xA;);&#xA;</code></pre>&#xA;",2065736,"",,"",,2017-08-14T06:13:56,"","",,4,,,
45804282,2,,45802123,2017-08-21T19:27:05,,1,,"<p>Figured it out, it was a problem with <code>react-hot-loader</code>. Apparently saving the value of <code>this</code> doesn't work in the constructor with <code>react-hot-loader</code>. The fix is to manually enable the <code>transform-es2015-classes</code> plugin in your babelrc.</p>&#xA;&#xA;<p>See <a href=""https://github.com/gaearon/react-hot-loader/issues/597"" rel=""nofollow noreferrer"">https://github.com/gaearon/react-hot-loader/issues/597</a></p>&#xA;",587706,"",,"",,2017-08-21T19:27:05,"","",,0,,,
45807010,2,,45806910,2017-08-21T23:50:07,,1,,"<p>Yes, this is definitely possible. First install shelljs with </p>&#xA;&#xA;<pre><code>npm install shelljs&#xA;</code></pre>&#xA;&#xA;<p>In your app, you now need to import this module with</p>&#xA;&#xA;<pre><code>var shell = require('shelljs');&#xA;</code></pre>&#xA;&#xA;<p>To make your mac go to sleep, simply use</p>&#xA;&#xA;<pre><code>shell.exec('pmset sleepnow');&#xA;</code></pre>&#xA;",8497346,"",1402846,"",2018-11-08T01:28:48,2018-11-08T01:28:48,"","",,2,,,
45811101,2,,45810126,2017-08-22T07:10:43,,1,,"<p>To add custom code and change the DOM of arbitrary websites, add this to your <code>index.html</code>:</p>&#xA;&#xA;<pre><code>&lt;webview preload=""./yourscript.js"" src=""http://yourpage.com"" style=""position:absolute;width:100%;height:100%;""&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;&#xA;<p>Here is a detailed documentation: <a href=""https://electron.atom.io/docs/api/webview-tag/"" rel=""nofollow noreferrer"">https://electron.atom.io/docs/api/webview-tag/</a></p>&#xA;&#xA;<p>Here is an github issue I've found about this topic: <a href=""https://github.com/electron/electron/issues/2048#issuecomment-115092053"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/2048#issuecomment-115092053</a></p>&#xA;",6429774,"",,"",,2017-08-22T07:10:43,"","",,0,,,
45658469,2,,45655715,2017-08-13T08:24:43,,2,,<p>You have to use build in packages such as <code>express</code>. The command to install it is: <code>npm install express --save</code> (to install locally in the project directory) or <code>npm install express -g</code> to install it globally.</p>&#xA;,5848664,"",,"",,2017-08-13T08:24:43,"","",,0,,,
45661141,2,,45656842,2017-08-13T13:59:20,,2,,"<p>I use the <a href=""https://github.com/electron/electron/blob/master/docs/api/dialog.md"" rel=""nofollow noreferrer"">showOpenDialog</a> with the <code>openDirectory</code> flag for this.    </p>&#xA;&#xA;<p>Logically it doesn't make sense to ""save"" a folder since it is just a &#xA;virtual ""container"". Allowing the user to select a folder to ""open"" in order to ""save"" data into it is the usual flow.</p>&#xA;",840992,"",,"",,2017-08-13T13:59:20,"","",,1,,,
45757407,2,,45698998,2017-08-18T13:04:35,,2,,"<p>I'm guessing that there is either a bug with elasticsearchJS and Electron or that you're doing something wrong.</p>&#xA;&#xA;<p>Since you are using Electron, you should try to use the browser build of the package. </p>&#xA;&#xA;<p>Instead of requiring elasticsearch, try to require elasticsearch-browser:</p>&#xA;&#xA;<p><code>yarn add elasticsearch-browser // or npm install elasticsearch-browser</code></p>&#xA;&#xA;<p>then just replace your </p>&#xA;&#xA;<p><code>import elasticsearch from 'elasticsearch'</code> </p>&#xA;&#xA;<p>by </p>&#xA;&#xA;<p><code>import elasticsearch from 'elasticsearch-browser'.</code> </p>&#xA;&#xA;<p>This version of the package will make XHRHttpRequest instead of using the native http module from node. You will then be able to monitor your request more easily with Chrome Network tab. </p>&#xA;&#xA;<p>I hope this helps</p>&#xA;&#xA;<p>More information here: <a href=""https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/browser-builds.html"" rel=""nofollow noreferrer"">https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/browser-builds.html</a>&#xA;Chat Conversation End&#xA;Type a message...</p>&#xA;",7189154,"",,"",,2017-08-18T13:04:35,"","",,1,,,
45769947,2,,45768571,2017-08-19T09:33:09,,2,,"<p>In your app files, look for the file where you define your electron app configurations. Find the line calling <code>openDevTools()</code> method and comment or delete that line.</p>&#xA;&#xA;<p>As per your comment about the app template, open this file, </p>&#xA;&#xA;<blockquote>&#xA;  <p><a href=""https://github.com/c4wrd/angular2-electron-boilerplate/blob/master/src/index.ts"" rel=""nofollow noreferrer"">https://github.com/c4wrd/angular2-electron-boilerplate/blob/master/src/index.ts</a> </p>&#xA;</blockquote>&#xA;&#xA;<p>... and remove or comment the line:</p>&#xA;&#xA;<pre><code>mainWindow.webContents.openDevTools();&#xA;</code></pre>&#xA;",1791913,"",1791913,"",2017-08-19T19:37:31,2017-08-19T19:37:31,"","",,0,,,
45701973,2,,45699964,2017-08-15T21:40:32,,3,,<p>I' ve used electron-mocha package instead of mocha and it works</p>&#xA;,6001509,"",,"",,2017-08-15T21:40:32,"","",,1,,,
45756675,2,,45755614,2017-08-18T12:29:17,,3,,"<p>You need to send the data to the third screen,too.</p>&#xA;&#xA;<p>Instead of </p>&#xA;&#xA;<pre><code>&lt;route-link to=""third_screen""&gt;&lt;/router-link&gt;&#xA;</code></pre>&#xA;&#xA;<p>You need to write,</p>&#xA;&#xA;<pre><code>&lt;router-link :to=""{ path: 'third_screen', params: { session_id: this.session_id, userName:this.user_name}}""&gt;User&lt;/router-link&gt;&#xA;</code></pre>&#xA;&#xA;<p>And instead of router.go(-1) you need to send the data as params again to your second screen using router.push() method.</p>&#xA;&#xA;<p>But I won't suggest the above method as you need to pass the same data as params to all routes.</p>&#xA;&#xA;<p>You should also have a look at <a href=""https://vuex.vuejs.org/en/"" rel=""nofollow noreferrer"">Vuex</a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Vuex is a state management pattern + library for Vue.js applications. It serves as a centralized store for all the components in an application, with rules ensuring that the state can only be mutated in a predictable fashion. </p>&#xA;</blockquote>&#xA;&#xA;<p>You should store your Session Id as cookie instead of passing it as props.</p>&#xA;&#xA;<p><strong>Update</strong></p>&#xA;&#xA;<p>Also have a look at <code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>.</p>&#xA;&#xA;<p><a href=""https://vuejs.org/v2/guide/components.html#keep-alive"" rel=""nofollow noreferrer"">Reference</a></p>&#xA;",4461764,"",4461764,"",2017-08-18T13:44:20,2017-08-18T13:44:20,"","",,2,,,
45692172,2,,45689376,2017-08-15T11:44:59,,8,,"<p>Solved it by:</p>&#xA;&#xA;<p>1) Eject webpack: <code>ng eject</code></p>&#xA;&#xA;<p>2) Add <code>target: 'electron-renderer'</code> to the <code>module.exports</code> array inside <code>webpack.config.js</code></p>&#xA;&#xA;<p>3) Require remote, since we're in the <code>renderer</code>, but <code>fs</code> is only available in the <code>main process</code> (<a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md"" rel=""noreferrer"">Read more</a>): <code>var remote = require('electron').remote;</code></p>&#xA;&#xA;<p>4) Require fs (this time using remotes implementation of require): <code>var fs = remote.require('fs');</code></p>&#xA;&#xA;<p>And now it works!</p>&#xA;",5535775,"",,"",,2017-08-15T11:44:59,"","",,1,,,
43313573,2,,43313236,2017-04-10T01:00:30,,1,,"<p>The simplest way I can think of to fix it would be to put each button in a separate form that each has a separate dimension set in it.  Then, the dimension you get in the form post would be the only the one for the button that was pressed.</p>&#xA;&#xA;<p>My handlebars might be a bit rusty, but perhaps something like this:</p>&#xA;&#xA;<pre><code>{{#each rows}}&#xA;&#xA;    &lt;form method=""post"" action=""/delivery/chooseBoxSelected""&gt;&#xA;        &lt;input type=""hidden"" name=""userHashtag"" value=""{{userHashtag}}""&gt;&#xA;        &lt;input type=""hidden"" name=""boxSelectedValue"" value=""{{this.box_id}}""&gt;&#xA;        &lt;input type=""hidden"" name=""boxSelectedDimension"" value=""{{this.longestDimension}}""&gt;&#xA;&#xA;        &lt;button class=""btn-dimension"" type=""submit""&gt;&#xA;            &lt;i class=""fa fa-cube"" aria-hidden=""true""&gt;&lt;/i&gt;&#xA;            &amp;nbsp;Longest dimension {{this.longestDimension}}""&#xA;        &lt;/button&gt;&#xA;    &lt;/form&gt;&#xA;{{/each}}  &#xA;</code></pre>&#xA;&#xA;<p>And, you may have to adjust the CSS to deal with the fact that this is now N separate forms (one for each button).</p>&#xA;",816620,"",,"",,2017-04-10T01:00:30,"","",,0,,,
43323609,2,,43313808,2017-04-10T12:48:58,,0,,<p>The error you are seeing is being thrown by this line:</p>&#xA;&#xA;<pre><code>var workbook = XLSX.readfile(f.toString());&#xA;</code></pre>&#xA;&#xA;<p>That's because your method that contains that line declares a local variable <code>f</code> that is conflicting with your service-level variable <code>f</code> which is your test file name. If you move that test filename into your <code>ExcelToJson</code> method you should be set. </p>&#xA;,334913,"",,"",,2017-04-10T12:48:58,"","",,0,,,
43325309,2,,43310224,2017-04-10T14:01:49,,0,,<p>Ended up giving up on this. I verified that the HWND was correct but it still wouldn't work for whatever reason. I ended up writing a small function in C# and executed it from within node/electron using node-edge.</p>&#xA;,1116870,"",,"",,2017-04-10T14:01:49,"","",,0,,,
43341741,2,,43321892,2017-04-11T09:19:54,,0,,"<p>Using this code, that is deprecated using my compile versión (23), express detects the get request.</p>&#xA;&#xA;<pre><code>HttpClient httpclient = new DefaultHttpClient();&#xA;// Prepare a request object&#xA;HttpGet httpget = new HttpGet(sURL.substring(0, sURL.lastIndexOf(""/"")));&#xA;// Execute the request&#xA;HttpResponse response;&#xA;response = httpclient.execute(httpget);&#xA;</code></pre>&#xA;",3978308,"",,"",,2017-04-11T09:19:54,"","",,0,,,
43346220,2,,43346055,2017-04-11T12:40:53,,3,,<p>Set <code>target: 'electron-main'</code> in your Webpack configuration.</p>&#xA;,6623953,"",,"",,2017-04-11T12:40:53,"","",,0,,,
43362152,2,,43309163,2017-04-12T06:41:32,,0,,"<p>Simple steps:</p>&#xA;&#xA;<ol>&#xA;<li>Create a login page to let user login with username and password</li>&#xA;<li>Store username and password in a variable, cookie or <a href=""https://www.w3schools.com/html/html5_webstorage.asp"" rel=""nofollow noreferrer"">local storage</a></li>&#xA;<li>Send the request by using <a href=""https://github.com/SamDecrock/node-http-ntlm"" rel=""nofollow noreferrer"">httpntml</a> with username, password, domain</li>&#xA;</ol>&#xA;",6587650,"",,"",,2017-04-12T06:41:32,"","",,0,,,
43386631,2,,43386536,2017-04-13T07:58:54,,11,,"<p>Electron is using nodejs, so you can still package cpp code as a node module and then use it as dependency in your electron app.</p>&#xA;&#xA;<p>See the Hello World example <a href=""https://nodejs.org/api/addons.html"" rel=""noreferrer"">here</a> which basically does this:</p>&#xA;&#xA;<pre><code>module.exports.hello = () =&gt; 'world';&#xA;</code></pre>&#xA;&#xA;<p>This is the example from their tutorial:</p>&#xA;&#xA;<pre><code>// hello.cc&#xA;#include &lt;node.h&gt;&#xA;&#xA;namespace demo {&#xA;&#xA;using v8::FunctionCallbackInfo;&#xA;using v8::Isolate;&#xA;using v8::Local;&#xA;using v8::Object;&#xA;using v8::String;&#xA;using v8::Value;&#xA;&#xA;void Method(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {&#xA;  Isolate* isolate = args.GetIsolate();&#xA;  args.GetReturnValue().Set(String::NewFromUtf8(isolate, ""world""));&#xA;}&#xA;&#xA;void init(Local&lt;Object&gt; exports) {&#xA;  NODE_SET_METHOD(exports, ""hello"", Method);&#xA;}&#xA;&#xA;NODE_MODULE(addon, init)&#xA;&#xA;}  // namespace demo&#xA;</code></pre>&#xA;",3867787,"",,"",,2017-04-13T07:58:54,"","",,0,,,
43450657,2,,43450616,2017-04-17T11:33:39,,3,,<p>You loose context in <code>map</code>. Should be</p>&#xA;&#xA;<pre><code>this.props.people.map((person) =&gt; {&#xA;// use arrow function here ----^&#xA;</code></pre>&#xA;,949476,"",,"",,2017-04-17T11:33:39,"","",,0,,,
43475983,2,,43475150,2017-04-18T15:13:04,,0,,"<p>Okay guys, first I would like to thank you very much for the answers about my question !&#xA;But I also want to apologize because it was an error from my controller.&#xA;My code was : </p>&#xA;&#xA;<pre><code>$scope.getAllUsers = function() {&#xA;    $http.get(""users"").then(function(response) {&#xA;        $scope.users = response;&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And I resolve it with a simple modification : </p>&#xA;&#xA;<pre><code>$scope.getAllUsers = function() {&#xA;    $http.get(""users"").then(function(response) {&#xA;        $scope.users = response.data;&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",7857308,"",,"",,2017-04-18T15:13:04,"","",,0,,,
43491154,2,,43489676,2017-04-19T09:05:53,,0,,"<p>Unless you getting any error. It should work.</p>&#xA;&#xA;<p>I tried with the following code using onmousemove event listener, its working. So I believe the problem is not with mousemove listener. </p>&#xA;&#xA;<p>Try the following code and check whether its working</p>&#xA;&#xA;<pre><code>        &lt;div&#xA;          style=""background:black; height:605;width:400;border:1px solid""&#xA;          onmousemove=""alert(event.clientY)""&#xA;        &gt;&#xA;        oii&#xA;        &lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>The complete working code below,</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;script&gt;&#xA;      console.log('about')&#xA;    &lt;/script&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;h1&gt;ABOUT PAGE&lt;/h1&gt;&#xA;    &lt;div&#xA;      style=""background:black; height:605;width:400;border:1px solid""&#xA;      onmousemove=""onmove(event)""&#xA;    &gt;&#xA;    oii&#xA;    &lt;/div&gt;&#xA;    &lt;p id=""text""&gt;&lt;/p&gt;&#xA;    &lt;p&gt;Hello!!!&lt;/p&gt;&#xA;    &lt;script&gt;&#xA;      function onmove(event){&#xA;        document.getElementById('text').innerHTML = event.clientY;&#xA;      }&#xA;    &lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",2877591,"",,"",,2017-04-19T09:05:53,"","",,0,,,
43499003,2,,43497811,2017-04-19T14:43:47,,5,,"<p><code>mainWindow</code> is not available in your Vue code because it is defined in your main process.</p>&#xA;&#xA;<p>In your single file component, however, you can import <code>remote</code> from electron, where you can get access to the current window. So your code would look something like this.</p>&#xA;&#xA;<pre><code>const {remote} = require(""electron"")&#xA;&#xA;export default {&#xA;  name: 'mainComponent',&#xA;  methods: {&#xA;    setFullScreen: function() {&#xA;      remote.getCurrentWindow().setFullScreen(true);&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",38065,"",,"",,2017-04-19T14:43:47,"","",,0,,,
43504750,2,,43503748,2017-04-19T19:43:07,,1,,<p>I had to specify in the output part of my webpack config. I set the key <code>publicPath</code> with the value <code>http://localhost:8080/</code> and it worked.</p>&#xA;,6213048,"",4693496,"",2017-08-18T07:29:20,2017-08-18T07:29:20,"","",,0,,,
43521161,2,,42755028,2017-04-20T13:36:22,,0,,"<p><a href=""https://gitscout.com/"" rel=""nofollow noreferrer"">Gitscout</a>'s guys discussed this in a San-Francisco based (and then Paris based) Electron Meetup.&#xA;You can find the video <a href=""https://youtu.be/EruDxnLK_bg?t=19m4s"" rel=""nofollow noreferrer"">here</a>, the deck <a href=""https://speakerdeck.com/gitscout/gitscout-at-electron-techtalks-sf"" rel=""nofollow noreferrer"">here</a> and the code <a href=""https://github.com/gitscout/sf-electron-tech-talks"" rel=""nofollow noreferrer"">there</a>.</p>&#xA;&#xA;<p>The bottom line of their talk is that it's possible: they create a dedicated <code>BrowserWindow</code> for the popover on top of the main one and synchronize the 2. However, it requires a lot of work to have a perfect user experience.</p>&#xA;",1501565,"",1501565,"",2017-08-16T07:58:03,2017-08-16T07:58:03,"","",,0,,,
43536689,2,,43518779,2017-04-21T07:37:35,,0,,<p>The issue was that it's not possible to directly get a 32-bit COM object in a 64-bit application. So I build my electron application for ia32 architecture (with rebuilding electron-edge) and it works now.</p>&#xA;,5756398,"",5756398,"",2017-04-24T03:28:24,2017-04-24T03:28:24,"","",,0,,,
43356864,2,,43355050,2017-04-11T21:56:00,,1,,"<p>The first thing I'd to do solve this would be to make sure I'm using the full path to the required module, as in:</p>&#xA;&#xA;<pre><code>const Path = require('path')&#xA;const App = require(Path.join(__dirname,'../app')) // the .js isn't needed here.&#xA;</code></pre>&#xA;&#xA;<p>Note that this assumes that the <code>app.js</code> file is in the immediate parent directory of the one in which the application runs.</p>&#xA;&#xA;<p>If that doesn't work, I'd make sure the files are where you think they are, and that the process you're running is located within the file system where you think it is. You can determine this by adding this to the top of your main script file:</p>&#xA;&#xA;<pre><code>console.log(""current working directory:"",process.cwd())&#xA;</code></pre>&#xA;&#xA;<p>Or in es6:</p>&#xA;&#xA;<pre><code>console.log(`current working directory: %s`, process.cwd())&#xA;</code></pre>&#xA;&#xA;<p>If the printed directory doesn't match your assumptions, modify your <code>require</code> statement accordingly.</p>&#xA;&#xA;<p>And for the record, the ""correct"" way to export your App map would be to:</p>&#xA;&#xA;<pre><code>const App = {&#xA;  ... &#xA;}&#xA;module.exports = App&#xA;</code></pre>&#xA;&#xA;<p>Or using es7:</p>&#xA;&#xA;<pre><code>export default App = {&#xA;  ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(See <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"" rel=""nofollow noreferrer"">export</a> for more on es7 modules.)</p>&#xA;&#xA;<p>Either way, you'd then require the module as:</p>&#xA;&#xA;<pre><code>const App = require(PATH_TO_APP)&#xA;</code></pre>&#xA;",747355,"",747355,"",2017-04-11T22:02:07,2017-04-11T22:02:07,"","",,1,,,
43394940,2,,43380900,2017-04-13T14:27:43,,1,,"<p>Store a reference of remote on global object in main file.&#xA;You can do that as follows:-</p>&#xA;&#xA;<pre><code>global.remote = remote; // import remote as it works for you prior to this statement.&#xA;</code></pre>&#xA;&#xA;<p>Thereafter you can refer to this in other ts files as well without importing. But you will have to use, global.remote instead of directly using remote</p>&#xA;",3209082,"",,"",,2017-04-13T14:27:43,"","",,1,,,
43412247,2,,43357105,2017-04-14T13:12:28,,2,,"<p>From the JXCore site(<a href=""http://jxcore.com/tech/"" rel=""nofollow noreferrer"">http://jxcore.com/tech/</a>):</p>&#xA;&#xA;<blockquote>&#xA;  <p>JXcore is a fork on the open source Node.js project</p>&#xA;</blockquote>&#xA;&#xA;<p>It uses <a href=""http://llvm.org/"" rel=""nofollow noreferrer"">LLVM</a> to compile javascript as opposed to <a href=""https://github.com/v8/v8/wiki/Introduction"" rel=""nofollow noreferrer"">V8</a> which NodeJS does.</p>&#xA;&#xA;<p>In terms of what are the main differences- <a href=""https://electron.atom.io/docs/tutorial/about/"" rel=""nofollow noreferrer"">Electron</a> is a framework for building native, cross platform desktop applications, where it appears JXCore is a javascript engine forked from NodeJS.</p>&#xA;&#xA;<p>Electron is built with NodeJS, and Chromium. So to make it fair, the comparison would be better stated ""How does Electron work with NodeJS vs JXcore"". Since I don't have any experience with JXCore, I can't answer that question. I would venture to say the only way to know that is to fork electron and replace Node with JXCore.</p>&#xA;&#xA;<p>Based on your background, I would assume you are thinking about making one application that works cross platform across mobile and desktop environments. To that, I would say it is possible, but you are going to have 2 different projects. There are things in Electron that you wouldn't want included in your mobile app, since they are working with completely different operating systems. You are right that electron does not support mobile (it wasn't built for that).</p>&#xA;&#xA;<p>As far as your side question goes, there are any number of technologies that slack could have used to create their mobile app. They could have used Java , Swift, Objective-C, .NET, Ruby, or Javascript. </p>&#xA;&#xA;<p>There are cross platform tools such as <a href=""http://www.rubymotion.com/"" rel=""nofollow noreferrer"">RubyMotion</a>, <a href=""https://www.nativescript.org/"" rel=""nofollow noreferrer"">NativeScript</a>, <a href=""https://facebook.github.io/react-native/"" rel=""nofollow noreferrer"">React Native</a>, and <a href=""https://www.xamarin.com/"" rel=""nofollow noreferrer"">Xamarin</a> that could also be used to create native mobile apps, that all compile down into the native language the mobile OS understands.</p>&#xA;&#xA;<p>A final approach could be the use of tools such as <a href=""https://cordova.apache.org/"" rel=""nofollow noreferrer"">Cordova</a>/<a href=""http://phonegap.com/"" rel=""nofollow noreferrer"">Phonegap</a> which create mobile apps via a ""web view"". Essentially, this is like creating an app that launches a web browser to interact with your phone.</p>&#xA;&#xA;<p>If you are looking for an example on how to build once and use everywhere, I would look at the github repo found here <a href=""https://github.com/NathanWalker/angular-seed-advanced"" rel=""nofollow noreferrer"">https://github.com/NathanWalker/angular-seed-advanced</a>. This shows a common codebase that can be used in Electron, Web, and Mobile.</p>&#xA;",5847412,"",5847412,"",2017-04-14T14:08:27,2017-04-14T14:08:27,"","",,1,,,
43500098,2,,43474545,2017-04-19T15:30:38,,-1,,"<p>So, after replacing foreach with simple for loop it solved the problem but I don't know whats the exact reason. Anyone had same problem?</p>&#xA;",5433263,"",,"",,2017-04-19T15:30:38,"","",,1,,,
43445047,2,,43383399,2017-04-17T04:14:19,,1,,<p>This problem literally just fixed itself today without me changing anything. I'm not sure what about my system changed (other than a reboot) but it's now working exactly as it should. </p>&#xA;,5865,"",,"",,2017-04-17T04:14:19,"","",,2,,,
43509672,2,,43509383,2017-04-20T03:25:33,,2,,"<p>You need to keep both processes open as a child will close immediately and so will the parent.  You can do so with something like this:</p>&#xA;&#xA;<p>parent.js</p>&#xA;&#xA;<pre><code>var child = require('child_process').fork('./child.js');&#xA;&#xA;child.on('message', function () {&#xA;  console.log(""Hi"");&#xA;});&#xA;&#xA;child.on('exit', function () {&#xA;  console.log(""Exited"");&#xA;});&#xA;&#xA;setTimeout(() =&gt; {&#xA;  child.send('hello');&#xA;}, 1000);&#xA;&#xA;&#xA;process.stdin.resume();&#xA;</code></pre>&#xA;&#xA;<p>child.js</p>&#xA;&#xA;<pre><code>process.on('message', function () {&#xA;  console.log(""sending hi"");&#xA;  process.send('hi');&#xA;});&#xA;</code></pre>&#xA;",234867,"",,"",,2017-04-20T03:25:33,"","",,2,,,
43529786,2,,43529350,2017-04-20T20:57:49,,3,,"<p>Found it! If you look at <a href=""https://github.com/webdriverio/webdriverio/blob/master/examples/standalone/webdriverio.with.mocha.and.chai.js"" rel=""nofollow noreferrer"">https://github.com/webdriverio/webdriverio/blob/master/examples/standalone/webdriverio.with.mocha.and.chai.js</a></p>&#xA;&#xA;<p>you will see that you need to return the promise from each of the tests. This is typical for async chai/mocha tests:</p>&#xA;&#xA;<pre><code>it('tests the page title', function () {&#xA;    return page.getApplicationTitle().should.eventually.equal(""NO WAY"");&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>If you do that, then the chai test is actually correctly evaluated.</p>&#xA;",54745,"",54745,"",2017-04-21T21:55:15,2017-04-21T21:55:15,"","",,2,,,
43456792,2,,43456269,2017-04-17T18:00:14,,3,,"<p>There is probably an almost infinite number of ways to do this, but the first thing that I thought of is WebSockets. Presumably you would start your java CLI app first, which could start a WebSocket server. Then start the Electron app, and have it connect to the CLI. </p>&#xA;&#xA;<p>As far as libraries and frameworks, this is explicitly <strong>not</strong> the place to ask/answer that, and doing so will likely get your question down-voted and closed.</p>&#xA;",982341,"",,"",,2017-04-17T18:00:14,"","",,3,,,
43486549,2,,43486438,2017-04-19T04:41:37,,7,,"<p><code>mainWindow</code> is not able to receive the event because it is not getting sent to it. The <code>events.sender.send()</code> code in <code>main.js</code> will send the data back to whoever sent the <code>notes</code> event, which in this case is the <code>noteWindow</code>. So the <code>notes2</code> event is getting sent back to <code>noteWindow</code> instead of <code>mainWindow</code>. </p>&#xA;&#xA;<p>To send the <code>notes2</code> event to <code>mainWindow</code>, check out <a href=""https://electron.atom.io/docs/api/web-contents/#contentssendchannel-arg1-arg2-"" rel=""noreferrer""><strong><code>webContents.send()</code></strong></a>. This allows the main process to send data via events to a specific window. After some modifications to <code>main.js</code> it would look similar to this:</p>&#xA;&#xA;<pre><code>ipcMain.on('notes', function(event, data) {&#xA;    mainWindow.webContents.send('notes2', data);&#xA;});&#xA;</code></pre>&#xA;",1343333,"",,"",,2017-04-19T04:41:37,"","",,4,,,
54355670,2,,53906689,2019-01-24T21:37:35,,0,,"<p>I found that I needed to download the electron binaries, and put my app inside it, instead of installing as an npm module. I used <a href=""https://github.com/electron-userland/electron-packager"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-packager</a>, which was really simple.</p>&#xA;",,user10124491,,"",,2019-01-24T21:37:35,"","",,0,,,
54371049,2,,54368125,2019-01-25T18:34:31,,1,,"<p>Use <code>$(^Name)</code> to access the standard language string set by the <a href=""https://nsis.sourceforge.io/Docs/Chapter4.html#aname"" rel=""nofollow noreferrer""><code>Name</code> attribute</a> in a script.</p>&#xA;&#xA;<p>It looks like electron-builder has a define named <code>${PRODUCT_NAME}</code>.</p>&#xA;",3501,"",3501,"",2019-01-25T18:41:21,2019-01-25T18:41:21,"","",,0,,,
54373621,2,,54371004,2019-01-25T22:26:47,,0,,"<p>Electron has two processes </p>&#xA;&#xA;<p>The main process: This is a JS file that runs when you open the app. This is where you create your window, and point it to (usually) an HTML file. &#xA;This HTML file runs exactly like it would in chrome. Except you can include nodejs libraries. &#xA;The HTML file you open is ran under the <strong>Render Process</strong></p>&#xA;&#xA;<p>So you basically always have two JavaScript files running. The <em>Main</em> which interfaces with the OS and the <em>Render</em> which is where most the code goes, and works much more like a browser </p>&#xA;&#xA;<p>For example if you did &#xA;Console.Log in the main process. It would not show up in the chrome web console. &#xA;However if you did it in the Render process it would </p>&#xA;",10577103,"",,"",,2019-01-25T22:26:47,"","",,0,,,
54385125,2,,54133079,2019-01-27T04:40:05,,0,,"<p>After a lot of hit and trial with different solutions - I found a solution.</p>&#xA;&#xA;<p>I am embedding a http server in the exe app which let me communicate with web app. In the web app, i have added a web worker, which will ping the exe app server every 10 sec. If response received means exe app is active, then i turn off the notification on server by calling api. This will also make sure when the exe app is quitted, web worker wont get any response means exe is not active, so it activates the notification. </p>&#xA;&#xA;<p>Now another issue was that - after installing the app, user didn't open the web app and he is getting two notification still. For overcoming this - i open the web app url when the exe app starts for the first time and it detects the status and turn off the browser notification. In the same process - i also save the browserId (a unique guid to identify the browser ) to the exe app and whenever exe app starts, i call the api to turn off the notification for these browserId.</p>&#xA;&#xA;<p>Hope this helps someone.    </p>&#xA;",4393136,"",,"",,2019-01-27T04:40:05,"","",,0,,,
54387144,2,,54380862,2019-01-27T10:29:19,,8,,"<p>Electron has an API for this:</p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/app#appgetpathname"" rel=""noreferrer"">https://electronjs.org/docs/api/app#appgetpathname</a></p>&#xA;&#xA;<pre><code>const {app} = require('electron');&#xA;app.getPath('home');&#xA;</code></pre>&#xA;",1244884,"",,"",,2019-01-27T10:29:19,"","",,0,,,
54393027,2,,54388226,2019-01-27T21:26:21,,1,,"<p>Ok, figured this out. &#xA;Basically you cannot access Electron's Node.js API straight from Angular.&#xA;For that you need an awesome tool called <code>ngx-electron</code>. Read about it <a href=""https://thorsten-hans.com/integrating-angular-and-electron-using-ngx-electron-9c36affca25e"" rel=""nofollow noreferrer"">here</a> or just Google it.&#xA;After you install this tool you can just DI its service as most guides instruct you and then use Electron <code>remote</code> to get access to <code>robotjs</code>.&#xA;Basically this: </p>&#xA;&#xA;<pre><code>const robot = this._electronService.remote.require('robotjs');&#xA;// The example supplied by robotjs&#xA;robot.setMouseDelay(2);&#xA;&#xA;const twoPI = Math.PI * 2.0;&#xA;const screenSize = robot.getScreenSize();&#xA;const height = (screenSize.height / 2) - 10;&#xA;const width = screenSize.width;&#xA;&#xA;for (let x = 0; x &lt; width; x++) {&#xA;  const y = height * Math.sin((twoPI * x) / width) + height;&#xA;  robot.moveMouse(x, y);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Might not be the best solution but with my current limited knowledge about these technologies this will have to do. &#xA;I'm open to opinions tho.</p>&#xA;&#xA;<p>Thanks for your time, have a nice one!</p>&#xA;",2449110,"",,"",,2019-01-27T21:26:21,"","",,0,,,
54398636,2,,54376169,2019-01-28T09:12:05,,1,,"<p>No, if you plan to publish your application to the Microsoft Store, make sure that your application operates correctly on devices that run Windows 10 S. This is a Store requirement.</p>&#xA;&#xA;<p>You could see this requirement in the official document:<a href=""https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-distribute#distribute-your-application-by-publishing-it-to-the-microsoft-store"" rel=""nofollow noreferrer"">Distribute your application by publishing it to the Microsoft Store</a></p>&#xA;",9862794,"",,"",,2019-01-28T09:12:05,"","",,0,,,
54399912,2,,54389818,2019-01-28T10:25:30,,1,,"<p>Finally found a solution to use Node.js API in Angular 6. </p>&#xA;&#xA;<p>Installed <a href=""https://github.com/angular-guru/electron-builder"" rel=""nofollow noreferrer"">electron-builder</a> and follwed the instruction, I can now use regular import statement.</p>&#xA;&#xA;<p>The configuration I mentioned above helps to suppress errors like <code>Module 'fs' not found</code> and to help IDEs to recognize <code>fs</code> module</p>&#xA;",7432968,"",,"",,2019-01-28T10:25:30,"","",,0,,,
54415489,2,,54398357,2019-01-29T07:00:56,,1,,"<p>I was experimenting with Anders answer however without much luck, then by utilising some git issue tracker and try - error method i figured out how its done for nsis with electron builder setup.</p>&#xA;&#xA;<p>so these are the steps you take:</p>&#xA;&#xA;<ol>&#xA;<li>download <code>inetc</code> plugin and unpack it, then open <code>Plugins</code> directory&#xA;<a href=""https://i.stack.imgur.com/PiqvC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PiqvC.png"" alt=""step2""></a></li>&#xA;<li>open your <code>electron</code> project directory, open <code>build</code> directory&#xA;<a href=""https://i.stack.imgur.com/Cpf6S.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Cpf6S.png"" alt=""step1""></a></li>&#xA;<li>copy contents of <code>Plugins</code> directory from <code>intec</code> into your project <code>build</code> location&#xA;<a href=""https://i.stack.imgur.com/y3dLE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/y3dLE.png"" alt=""step3""></a></li>&#xA;</ol>&#xA;&#xA;<p>At this point you are good to go and you can use <code>inetc</code> functionality inside your <code>installer.nsh</code> file.</p>&#xA;",2668182,"",,"",,2019-01-29T07:00:56,"","",,0,,,
54420878,2,,54392248,2019-01-29T12:16:40,,0,,"<p>I fixed it.&#xA;I just remove <code>position: fixed;</code> from both <code>html, body</code> and <code>#print</code>.</p>&#xA;",4752779,"",,"",,2019-01-29T12:16:40,"","",,0,,,
54432205,2,,54412645,2019-01-30T01:41:19,,2,,"<p>Seems that there is an open issue regarding this on the Electron Githib, my code is all correct. &#xA;<a href=""https://github.com/electron/electron/issues/16558"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/16558</a></p>&#xA;",2103129,"",,"",,2019-01-30T01:41:19,"","",,0,,,
54445969,2,,54440919,2019-01-30T17:11:11,,1,,"<p>I think i found the solution myself.</p>&#xA;&#xA;<p>The problem is with the ""electron-compile"" module. After running ""electron-forge package"" it seem to interfere when loading my custom binary files and prevent them from being loaded correctly via XMLHttpRequest.</p>&#xA;&#xA;<p>The solution seems to use the ""addBypassChecker"" that comes with the electron-compile package to ignore files to be recompiled by electron-compiled if they are not part of the App.</p>&#xA;&#xA;<pre><code>import { app } from 'electron';&#xA;import { addBypassChecker } from 'electron-compile';&#xA;&#xA;addBypassChecker((filePath) =&gt; {&#xA;  return filePath.indexOf(app.getAppPath()) === -1;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>more infos here:</p>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-compile/pull/199"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-compile/pull/199</a></p>&#xA;",3942486,"",,"",,2019-01-30T17:11:11,"","",,0,,,
54507682,2,,54401613,2019-02-03T21:18:08,,0,,"<p>This eventually worked later on but I had to add hot reloading to my code using foreman as directed in this tutorial&#xA;<a href=""https://competenepal.com/ionic2-electron/"" rel=""nofollow noreferrer"">https://competenepal.com/ionic2-electron/</a>&#xA;Other than adding hot reloading,  I also added a build to my package.json file. It's all in the link above though. Hope it helps</p>&#xA;",10112707,"",,"",,2019-02-03T21:18:08,"","",,0,,,
54524020,2,,54507056,2019-02-04T20:42:27,,1,,"<p>Wow, that was way easier than I thought:</p>&#xA;&#xA;<p>Turns out that because of the subscription to the Electron Service, the code ran outside the NgZone and it stayed there.</p>&#xA;&#xA;<p>I found out because I inserted this in the called function:&#xA;    console.log(NgZone.isInAngularZone());</p>&#xA;&#xA;<p>The same function returned one time true, one time false on this, depending on how I called it.</p>&#xA;&#xA;<p>The solution was really straightforward:</p>&#xA;&#xA;<p>In the subscription to the electron service, I now call the createTab function like this:&#xA;    this.ngZone.run(() => this.createNewTab());</p>&#xA;",10046739,"",,"",,2019-02-04T20:42:27,"","",,0,,,
54543965,2,,38193739,2019-02-05T22:22:00,,4,,"<p>Electron 3.0 introduced an API that prevents waiting for double-click.</p>&#xA;&#xA;<pre><code>// Ignore double click events for the tray icon&#xA;tray.setIgnoreDoubleClickEvents(true)&#xA;</code></pre>&#xA;&#xA;<p>""Sets the option to ignore double click events. Ignoring these events allows you to detect every individual click of the tray icon. This value is set to false by default.""</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/tray.md#traysetignoredoubleclickeventsignore-macos"" rel=""nofollow noreferrer"">Related Docs</a> | <a href=""https://electronjs.org/blog/electron-3-0"" rel=""nofollow noreferrer"">Release Notes for Electron 3.0</a></p>&#xA;",3516664,"",,"",,2019-02-05T22:22:00,"","",,0,,,
54547028,2,,54522702,2019-02-06T05:15:15,,0,,"<p>Ok. That wasn't fun. Looks like something actually broke. But after I restarted the console, Windows then reinstalled the project, Electron, and NPM it finally worked. The problem is now solved. </p>&#xA;",7387243,"",,"",,2019-02-06T05:15:15,"","",,0,,,
54412999,2,,54380261,2019-01-29T02:25:46,,1,,"<p>try this</p>&#xA;&#xA;<p>in your <code>main.js</code></p>&#xA;&#xA;<p>replace this line:</p>&#xA;&#xA;<pre><code>mainWindow.loadFile(`index.html`);&#xA;</code></pre>&#xA;&#xA;<p>with this</p>&#xA;&#xA;<pre><code>mainWindow.loadURL(`file://${__dirname}/index.html`);&#xA;</code></pre>&#xA;&#xA;<p>ref:<a href=""https://www.ryadel.com/en/visual-studio-2017-setup-electron-project-run-hello-world-sample-vs2017-template-quick-start/"" rel=""nofollow noreferrer"">https://www.ryadel.com/en/visual-studio-2017-setup-electron-project-run-hello-world-sample-vs2017-template-quick-start/</a></p>&#xA;",6298219,"",,"",,2019-01-29T02:25:46,"","",,1,,,
54449770,2,,54448328,2019-01-30T21:25:08,,1,,"<p>Since PyCharm uses the <strong>W3C CSS Validator</strong>, the <code>-webkit-app-region</code> property is flagged as unknown because it's a non-standard CSS property.</p>&#xA;&#xA;<p>Either way, you can easily add custom CSS props.</p>&#xA;&#xA;<p>For <strong>PyCharm 2018.3.2</strong>:</p>&#xA;&#xA;<ul>&#xA;<li>Go to <strong>File</strong> > <strong>Settings</strong></li>&#xA;<li>Navigate to <strong>Editor</strong> > <strong>Inspections</strong> > <strong>Invalid elements</strong></li>&#xA;<li>Click on <strong>Unknown CSS property</strong>, go to the options on the right bottom corner</li>&#xA;<li>Add <code>-webkit-app-region</code> to the <strong>Custom CSS properties</strong> field</li>&#xA;</ul>&#xA;&#xA;<p><strong>VS 2017</strong> has adaptive custom CSS properties, so no configuration required here!<br><br></p>&#xA;&#xA;<p>Also, make sure you restart Pycharm for the changes to take effect! I hope this helps!</p>&#xA;",10992683,"",10992683,"",2019-01-30T21:30:33,2019-01-30T21:30:33,"","",,1,,,
54470340,2,,54446385,2019-01-31T22:45:22,,2,,"<p>If you run multiple instances of your app, the first instance might lock the cache, which will prevent another instance from reading the cache.</p>&#xA;&#xA;<p>Take a look at <a href=""https://github.com/electron/electron/issues/7246#issuecomment-248519152"" rel=""nofollow noreferrer"">this</a> Github issue:</p>&#xA;&#xA;<blockquote>&#xA;  <p>You should not run multiple instances of the same app at the same time, for certain operations global locks are applied. In your case the cache database is locked by one instance and all other instances will fail to read cache.</p>&#xA;</blockquote>&#xA;&#xA;<p>You can use the <a href=""https://electronjs.org/docs/api/app#apprequestsingleinstancelock"" rel=""nofollow noreferrer""><code>app.requestSingleInstanceLock()</code></a> API to prevent multiple instances of your application from running if that is appropriate for you.</p>&#xA;",3479456,"",,"",,2019-01-31T22:45:22,"","",,1,,,
54550245,2,,54549970,2019-02-06T09:26:02,,0,,"<pre><code>for (var doc in docs) {&#xA;      var element = document.createElement(""button"");&#xA;      //Assign different attributes to the element. &#xA;      element.setAttribute(""name"", doc.name);&#xA;      element.innerHTML = doc.name&#xA;      element.setAttribute(""id"", doc._id);           &#xA;      //element.setAttribute(""onclick"", ); If you wish to add click event&#xA;&#xA;      //Append the element in page (in span).  &#xA;      document.body.appendChild(element);&#xA;}&#xA;</code></pre>&#xA;",5546672,"",5546672,"",2019-02-06T15:57:31,2019-02-06T15:57:31,"","",,1,,,
54356476,2,,54356336,2019-01-24T22:43:59,,2,,"<p>You would have to export a function that returns the template</p>&#xA;&#xA;<pre><code>module.exports = window =&gt; { &#xA;    const template = [&#xA;        {&#xA;            label: 'File',&#xA;            submenu: [&#xA;                {&#xA;                    label: 'Log out',&#xA;                    click() {&#xA;                        window.webContents.on(...)&#xA;                    }&#xA;                }&#xA;            ]&#xA;        }&#xA;     ]&#xA;   return template;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>from the <code>main.js</code> file you will require the <code>menu.js</code> module like this</p>&#xA;&#xA;<pre><code>const menuTemplate = require('./menu')&#xA;&#xA;function createwindow() {&#xA;   window = new BrowserWindow(...)&#xA;   window.show()&#xA;   menuTemplate(window)        &#xA;}&#xA;</code></pre>&#xA;",5402401,"",5402401,"",2019-01-24T22:58:51,2019-01-24T22:58:51,"","",,2,,,
54364333,2,,54363814,2019-01-25T11:22:14,,1,,"<p>Pages are displayed in the same order as they appear in your source file so you can just do:</p>&#xA;&#xA;<pre><code>Page Directory&#xA;Page InstFiles&#xA;Page Custom MyPage&#xA;</code></pre>&#xA;&#xA;<p>Ideally you should collect the required information before the installation step (<code>InstFiles</code>) and you are almost there already. Your custom page is storing the information in global variables, all you have to do is to move the <code>File*</code> operations to a <code>Section</code>. If you do it this way then your custom page can appear any time before the <code>InstFiles</code> page.</p>&#xA;",3501,"",,"",,2019-01-25T11:22:14,"","",,2,,,
54498649,2,,54176560,2019-02-02T23:46:57,,5,,"<p>I had the same problem and as I couldn't find a solution, I've developed an extension to disable it:</p>&#xA;&#xA;<p><a href=""https://atom.io/packages/disable-middle-click-paste"" rel=""noreferrer"">https://atom.io/packages/disable-middle-click-paste</a></p>&#xA;",1772990,"",,"",,2019-02-02T23:46:57,"","",,2,,,
54522749,2,,51431188,2019-02-04T19:07:12,,1,,"<p>I'd say yes, you have to bundle the binaries together with your app, if you don't want to distribute your app via a package repository or require your user to install GraphicsMagick previously.</p>&#xA;&#xA;<p>It does support CLI commands like <code>gm.exe convert test.jpg</code>. If your using electron-builder for packaging, you must add a configuration to prevent the binaries from being asar-packed:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>  ""build"": {&#xA;    ""asarUnpack"": [&#xA;      ""path/to/your/GraphicsMagick/binary/**""&#xA;    ],&#xA;</code></pre>&#xA;&#xA;<p>From electron you can call the program e.g. with </p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const child_process = require('child_process')&#xA;child_process.execFile('relative/path/to/your/gm.exe', ['version'], &#xA; (error, stdout, stderr) =&gt; { &#xA;   console.log(stdout) &#xA; } )&#xA;</code></pre>&#xA;&#xA;<p>You can download the windows binaries e.g. from the <a href=""https://sourceforge.net/projects/graphicsmagick/files/graphicsmagick-binaries/"" rel=""nofollow noreferrer"">sourceforge host</a>. After installing those binaries you have to copy the installed folder to your app.</p>&#xA;",6040478,"",,"",,2019-02-04T19:07:12,"","",,2,,,
54560886,2,,54544519,2019-02-06T19:08:48,,8,,"<p>When you have <code>nodeIntegration</code> disabled but aren't using <code>contextIsolation</code>, you could use a preload script to expose a safe version of it on the global object. (Note: you shouldn't expose the entire <code>fs</code> module to a remote page!)</p>&#xA;&#xA;<p>Here's an example of using a preload script in this way:</p>&#xA;&#xA;<pre><code>// main process script&#xA;const mainWindow = new BrowserWindow({&#xA;  webPreferences: {&#xA;    contextIsolation: false,&#xA;    nodeIntegration: false,&#xA;    preload: './preload.js'&#xA;  }&#xA;})&#xA;&#xA;mainWindow.loadURL('my-safe-file.html')&#xA;&#xA;&#xA;&#xA;// preload.js&#xA;const { readFileSync } = require('fs')&#xA;&#xA;// the host page will have access to `window.readConfig`,&#xA;// but not direct access to `readFileSync`&#xA;window.readConfig = function () {&#xA;  const data = readFileSync('./config.json')&#xA;  return data&#xA;}&#xA;&#xA;&#xA;&#xA;// renderer.js&#xA;const config = window.readConfig()&#xA;</code></pre>&#xA;&#xA;<p>If you're only loading local pages, and those pages don't load or execute unsafe dynamic content then you <em>might</em> reconsider the use of <code>contextIsolation</code> for this strategy. If you want to keep <code>contextIsolation</code> on, however (and you definitely should if you have a chance of showing unsafe content), you can only communicate with the preload script with <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"" rel=""nofollow noreferrer"">message passing via <code>postMessage</code></a>.</p>&#xA;&#xA;<p>Here's an example of the same scenario above, but with <code>contextIsolation</code> on and using message passing.</p>&#xA;&#xA;<pre><code>// main process script&#xA;const mainWindow = new BrowserWindow({&#xA;  webPreferences: {&#xA;    contextIsolation: true,&#xA;    nodeIntegration: false,&#xA;    preload: './preload.js'&#xA;  }&#xA;})&#xA;&#xA;mainWindow.loadURL('my-unsafe-file.html')&#xA;&#xA;&#xA;&#xA;// preload.js&#xA;const { readFileSync } = require('fs')&#xA;&#xA;const readConfig = function () {&#xA;  const data = readFileSync('./config.json')&#xA;  return data&#xA;}&#xA;&#xA;window.addEventListener('message', (event) =&gt; {&#xA;  if (event.source !== window) return&#xA;  if (event.data.type === 'request') {&#xA;    window.postMessage({ type: 'response', content: readConfig() })&#xA;  }&#xA;})&#xA;&#xA;&#xA;&#xA;// renderer.js&#xA;window.addEventListener('message', (event) =&gt; {&#xA;  if (event.source !== window) return&#xA;  if (event.data.type === 'response') {&#xA;    const config = event.data.content&#xA;  }&#xA;})&#xA;window.postMessage('request')&#xA;</code></pre>&#xA;&#xA;<p>While this is definitely more verbose and difficult to deal with (and forces things to be async, because message passing is async), it's also much more secure. A pair of small JS wrappers around the <code>postMessage</code> API could make this easier to work with (e.g. via an RPC-like mechanism), but remember that the whole point of using <code>contextIsolation</code> is because you can't trust the renderer, so your preload script shouldn't trust just any message it gets via the <code>postMessage</code> API — you should always verify the event that you receive to ensure that you trust it.</p>&#xA;&#xA;<p><a href=""https://doyensec.com/resources/Asia-19-Carettoni-Preloading-Insecurity-In-Your-Electron.pdf"" rel=""nofollow noreferrer"">This slide deck</a> describers in detail why turning off Node integration without using context isolation is not always a good idea.</p>&#xA;",62082,"",62082,"",2019-06-11T23:47:29,2019-06-11T23:47:29,"","",,2,,,
54471172,2,,54469481,2019-02-01T00:19:01,,0,,"<blockquote>&#xA;  <p>How can I use my files with node integration disabled?</p>&#xA;</blockquote>&#xA;&#xA;<p>If your files require Node, then you can't. Turn node integration on.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>You should disable node integration only if you don't need Node since disabling it will reduce the attack surface. Also <a href=""https://en.wikipedia.org/wiki/Principle_of_least_privilege"" rel=""nofollow noreferrer"">Principle of least privilege</a>.</p>&#xA;&#xA;<p>If you need to use <code>require</code> in your script, then don't disable Node integration.</p>&#xA;&#xA;<p>That being said, you can disable node integration and supply a <a href=""https://electronjs.org/docs/api/webview-tag#preload"" rel=""nofollow noreferrer"">preload script</a> to your <code>webview</code> tag, which will let you expose specific Node APIs to that script only. (If you need to <code>require</code> modules in your file though, it sounds like you'd need to keep Node enabled).</p>&#xA;&#xA;<p>Electron's <a href=""https://electronjs.org/docs/tutorial/security"" rel=""nofollow noreferrer"">Security page</a> says the following (emphasis added):</p>&#xA;&#xA;<blockquote>&#xA;  <p>Under no circumstances should you load and execute remote code with Node.js integration enabled. Instead, use only local files (packaged together with your application) to execute Node.js code. To display <strong>remote content</strong>, use the <a href=""https://electronjs.org/docs/api/webview-tag"" rel=""nofollow noreferrer""><code>&lt;webview&gt;</code></a> tag and make sure to disable the <code>nodeIntegration</code>.</p>&#xA;</blockquote>&#xA;&#xA;<p>Note: you should disable Node for <strong>remote content</strong>. If you're loading your own page, then it's fine to keep Node integration on.</p>&#xA;",3479456,"",,"",,2019-02-01T00:19:01,"","",,3,,,
59347695,2,,59347694,2019-12-15T20:16:55,,1,,"<h2>Resources</h2>&#xA;&#xA;<ol>&#xA;<li><a href=""https://electronjs.org/docs/tutorial/first-app"" rel=""nofollow noreferrer"">Writing Your First Electron App</a>.</li>&#xA;<li><a href=""https://www.youtube.com/watch?v=RV868-R4F2Y&amp;t=30s"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=RV868-R4F2Y&amp;t=30s</a> (based on this video).</li>&#xA;</ol>&#xA;&#xA;<h2>Step by step</h2>&#xA;&#xA;<p>Create a new Angular project (I did it with Webstrom): </p>&#xA;&#xA;<pre><code>ng new electron-with-angular --defaults&#xA;</code></pre>&#xA;&#xA;<p>Install Electron:</p>&#xA;&#xA;<pre><code>npm install --save-dev electron&#xA;</code></pre>&#xA;&#xA;<p>Create a main.js file (in the project directory, not in the src directory).</p>&#xA;&#xA;<p>Copy basic main.js from resource 1.</p>&#xA;&#xA;<p>In main.js - change the following line to:</p>&#xA;&#xA;<pre><code>  win.loadFile('dist/YOUR_PROJECT/index.html')&#xA;</code></pre>&#xA;&#xA;<p>In index.file - change the following line to:</p>&#xA;&#xA;<pre><code>  &lt;base href=""./""&gt;&#xA;</code></pre>&#xA;&#xA;<p>In package.json - change the following lines to (I add an image for clarification):</p>&#xA;&#xA;<pre><code>  ""main"": ""main.js"",&#xA;</code></pre>&#xA;&#xA;<p>In the scripts:</p>&#xA;&#xA;<pre><code>""electron"": ""ng build &amp;&amp; electron .""&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/ZGKxk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZGKxk.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>Run the following command in the terminal:</p>&#xA;&#xA;<pre><code>npm run electron&#xA;</code></pre>&#xA;",4907214,"",,"",,2019-12-15T20:16:55,"","",,0,,,
59365100,2,,59361409,2019-12-16T22:21:43,,1,,"<p>It definitely is possible to use WebViewer in an Electron app. I would recommend checking out the Electron set up guide and verify that you are set up properly. You can find the details as well as a sample here: <a href=""https://www.pdftron.com/documentation/web/get-started/electron/"" rel=""nofollow noreferrer"">https://www.pdftron.com/documentation/web/get-started/electron/</a>.</p>&#xA;&#xA;<p>Areas to take note of is the WebViewer <strong>lib</strong> folder under the <strong>public</strong> folder and <strong>App.js</strong> where WebViewer is initialized.</p>&#xA;&#xA;<p>Let me know if this helps!</p>&#xA;",12055332,"",,"",,2019-12-16T22:21:43,"","",,0,,,
59400984,2,,59385237,2019-12-18T22:42:50,,0,,"<p>Thank's to @pergy's comment pointing out that retina displays have a different pixel scale factor and that Electron uses that in its calculations, I managed to solve the problem by fetching this factor and using it for both deciding the dimensions of the window as well as the zoom factor of the web view.</p>&#xA;&#xA;<p>Here's my solution:</p>&#xA;&#xA;<pre><code>  let factor = screen.getPrimaryDisplay().scaleFactor;&#xA;&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({&#xA;    width: 1024 / factor,&#xA;    height: 768 / factor,&#xA;    webPreferences: {&#xA;      zoomFactor: 1.0 / factor&#xA;    }&#xA;  });&#xA;</code></pre>&#xA;",565487,"",,"",,2019-12-18T22:42:50,"","",,0,,,
59403176,2,,59403159,2019-12-19T04:07:54,,1,,"<p>You can use globalshortcut module to detect keyboard events even when the application does not have keyboard focus. This should be used afer the app fires <strong>'ready'</strong> event.</p>&#xA;&#xA;<pre><code>const { app, globalShortcut } = require('electron')&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  globalShortcut.register('CommandOrControl+X', () =&gt; {&#xA;    console.log('CommandOrControl+X is pressed')&#xA;  })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>As electron is used for cross platform so you have to use (CommandOrControl + key) not Command + key for mac or control + key for windows or linux.</p>&#xA;&#xA;<p>If you want to be a good software developer you'll come across situations when you've to read docs and solve a particular problems.&#xA;So at least give it a try <a href=""https://electronjs.org/docs/api/global-shortcut"" rel=""nofollow noreferrer"">docs</a></p>&#xA;",9153448,"",,"",,2019-12-19T04:07:54,"","",,0,,,
59425878,2,,59395449,2019-12-20T13:16:15,,1,,"<p>You can't minimize the external app, but you can bring the opened app to background by setting <code>activate</code> option to <code>false</code>.</p>&#xA;&#xA;<pre><code>shell.openExternal('pathOrUrl', {activate: false});&#xA;</code></pre>&#xA;&#xA;<p>The only problem is that it will only work on macOS.&#xA;On other operating systems, you can focus on your app's window after opening the external link, but it does not always work.</p>&#xA;&#xA;<pre><code>window.focus();&#xA;// or&#xA;window.webContents.focus();&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/shell#shellopenexternalurl-options"" rel=""nofollow noreferrer"">Electron Docs</a></p>&#xA;",12564210,"",,"",,2019-12-20T13:16:15,"","",,0,,,
59432749,2,,59432679,2019-12-21T00:54:57,,1,,"<p>The problem is not the <code>Warning</code>, which is just that, a warning, and normal in your current use case. The issue with the uploads is the incorrect usage of <code>PromisePool</code>.</p>&#xA;&#xA;<p>I'm assuming you're using <a href=""https://www.npmjs.com/package/es6-promise-pool"" rel=""nofollow noreferrer"">es6-promise-pool</a></p>&#xA;&#xA;<p>You should pass a promise producer function to the constructor, but instead you're calling the function and passing a promise, that's why only a single files gets uploaded.</p>&#xA;&#xA;<p>You should pass the producer without calling it, or make a producer that returns a function, or use a generator.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The PromisePool constructor takes a Promise-producing function as its&#xA;  first argument.</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>function *uploadFileProducer(conn, files) {&#xA;    for(const file of files)&#xA;        yield uploadFile(conn, file);&#xA;}&#xA;&#xA;</code></pre>&#xA;&#xA;<p>Now you can call: </p>&#xA;&#xA;<pre><code>let pool = new PromisePool(uploadFileProducer(conn, args[1]), 10)&#xA;</code></pre>&#xA;&#xA;<p>And the <code>PromisePool</code> will iterate correctly the iterator returned by the generator function, and handle the concurrency accordingly.</p>&#xA;&#xA;<p>You can also create a function that returns a <code>Promise</code> each call.</p>&#xA;&#xA;<pre><code>function uploadFileProducer(conn, files) {&#xA;  files = files.slice(); // don't want to mutate the original&#xA;  return () =&gt; uploadFile(conn, files.shift())&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Regarding the warning, it's normal if you're uploading multiple things concurrently, if that's the case you can increase the limit using:</p>&#xA;&#xA;<pre><code>emitter.setMaxListeners(n)&#xA;</code></pre>&#xA;",1119863,"",1119863,"",2019-12-21T01:07:33,2019-12-21T01:07:33,"","",,0,,,
59440885,2,,59440817,2019-12-22T00:41:55,,1,,"<p>Try this.</p>&#xA;&#xA;<pre><code>const querystring = require('querystring');&#xA;const params = {&#xA;    edd_action: 'check_license',&#xA;    item_id: 549,&#xA;    license: 'c0xxxxxx'&#xA;}&#xA;const path = '/edd-sl?' + querystring.stringify(params);&#xA;</code></pre>&#xA;",17447,"",,"",,2019-12-22T00:41:55,"","",,0,,,
59442389,2,,59392497,2019-12-22T07:26:39,,0,,"<p>I found an easy solution. Instead of listening from main process, we can listen to clipboard data changes from the renderer process directly using <strong>electron-clipboard-extended</strong> npm package.</p>&#xA;&#xA;<pre><code>const clipboard = require('electron-clipboard-extended');&#xA;clipboard.on('text-changed',() =&gt; {&#xA;&#xA;    var clipboardText = clipboard.readText();&#xA;    //we get the data in clipboardText but only when text changes&#xA;&#xA;}).startWatching();&#xA;</code></pre>&#xA;&#xA;<p>Documtentation for <a href=""https://www.npmjs.com/package/electron-clipboard-extended"" rel=""nofollow noreferrer"">electron-clipboard-extended</a></p>&#xA;",9153448,"",,"",,2019-12-22T07:26:39,"","",,0,,,
59450663,2,,59425025,2019-12-23T05:48:31,,1,,"<p>As you can see the error, </p>&#xA;&#xA;<blockquote>&#xA;  <p>Error: spawn C:\Program Files (x86)\Windows&#xA;  Kits\10\bin\x64\makepri.exe ENOENT</p>&#xA;</blockquote>&#xA;&#xA;<p>It suggests that file does not exist at a specific place). </p>&#xA;&#xA;<p>Make sure <code>C:\\Program Files (x86)\\Windows Kits\\10\</code> is present in your folder</p>&#xA;&#xA;<p>Also, check all the permissions associated to that folder.</p>&#xA;",5654404,"",,"",,2019-12-23T05:48:31,"","",,0,,,
59457563,2,,59453904,2019-12-23T15:15:53,,0,,"<p>You will need to polyfill the nodejs built-ins, as these do not exist in other environments such as electron.</p>&#xA;&#xA;<p>If you are using webpack for example, you can follow the directions here: <a href=""https://webpack.js.org/configuration/node"" rel=""nofollow noreferrer"">https://webpack.js.org/configuration/node</a></p>&#xA;",1445636,"",,"",,2019-12-23T15:15:53,"","",,0,,,
59465664,2,,54864175,2019-12-24T08:00:03,,1,,"<p>You can use the docx2pdf tool to convert a docx file to pdf retaining all formatting. It works on macOS and Windows and requires Microsoft Word to be installed.</p>&#xA;&#xA;<pre><code>pip install docx2pdf&#xA;docx2pdf input.docx output.pdf&#xA;docx2pdf --help&#xA;</code></pre>&#xA;&#xA;<p>If you don't want the python dependency, you can see the JXA (AppleScript for javascript) <a href=""https://github.com/AlJohri/docx2pdf/blob/master/docx2pdf/convert.jxa"" rel=""nofollow noreferrer"">code</a> that can be directly run on macOS with no dependencies. It also uses win32com on windows to directly talk to Microsoft Word.</p>&#xA;&#xA;<p>Disclaimer: I wrote the docx2pdf to pdf tool. <a href=""https://github.com/AlJohri/docx2pdf/"" rel=""nofollow noreferrer"">https://github.com/AlJohri/docx2pdf/</a></p>&#xA;",1667241,"",1667241,"",2020-02-12T17:04:56,2020-02-12T17:04:56,"","",,0,,,
59304874,2,,59304661,2019-12-12T12:43:09,,1,,"<p>First check if you actually installed the menubar repo.  </p>&#xA;&#xA;<p>Or just <code>npm i -S menubar</code></p>&#xA;&#xA;<p>Then try: </p>&#xA;&#xA;<pre><code>const { menubar } = require('menubar');&#xA;</code></pre>&#xA;&#xA;<p>It seems that it is not a default export.  </p>&#xA;&#xA;<p>I just assume that they refer to the npm module: <a href=""https://github.com/maxogden/menubar"" rel=""nofollow noreferrer"">https://github.com/maxogden/menubar</a></p>&#xA;",917467,"",,"",,2019-12-12T12:43:09,"","",,1,,,
59349451,2,,59349045,2019-12-16T01:05:05,,2,,"<p>Please refer to the most recent API doc about <a href=""https://electronjs.org/docs/api/dialog#dialogshowmessageboxbrowserwindow-options"" rel=""nofollow noreferrer"">dialog.showMessageBox</a>: this method returns a Promise object and doesn't make use of a callback function any more, like it used to until Electron v5.x.x.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Returns <code>Promise&lt;Object&gt;</code> - resolves with a promise containing the&#xA;  following properties:</p>&#xA;  &#xA;  <ul>&#xA;  <li><code>response</code> Number - The index of the clicked button.</li>&#xA;  <li><code>checkboxChecked</code> Boolean - The checked state of the checkbox if <code>checkboxLabel</code> was set. Otherwise <code>false</code>.</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>This should work then (untested in your context though):</p>&#xA;&#xA;<pre><code>dashboardWindow.on(""close"", (event) =&gt; {&#xA;    event.preventDefault();&#xA;    console.log(""before message box"");&#xA;    dialog.showMessageBox(&#xA;      dashboardWindows,&#xA;      {&#xA;        message: ""Test"",&#xA;        buttons: [""Default Button"", ""Cancel Button""],&#xA;        defaultId: 0, // bound to buttons array&#xA;        cancelId: 1 // bound to buttons array&#xA;      })&#xA;      .then(result =&gt; {&#xA;        if (result.response === 0) {&#xA;          // bound to buttons array&#xA;          console.log(""Default button clicked."");&#xA;        } else if (result.response === 1) {&#xA;          // bound to buttons array&#xA;          console.log(""Cancel button clicked."");&#xA;        }&#xA;      }&#xA;    );&#xA;    console.log(""after message box"");&#xA;  });&#xA;</code></pre>&#xA;",12542690,"",12542690,"",2019-12-16T12:47:08,2019-12-16T12:47:08,"","",,1,,,
59373306,2,,57890871,2019-12-17T11:28:09,,1,,"<p>For me it works in this way </p>&#xA;&#xA;<p><strong>Server side</strong></p>&#xA;&#xA;<p><em>app.js</em></p>&#xA;&#xA;<pre><code>const = express();&#xA;const server = http.createServer(app);&#xA;// initWebSocketServer is a promise in websockets.js&#xA;// that is resolve when you create the library and save it where you want, &#xA;const wsInitPromise = initWebSocketServer(server);&#xA;// Start server&#xA;function startServer() {&#xA;  app.angularFullstack = server.listen(config.port, config.ip, function() {&#xA;    console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));&#xA;  });&#xA;}&#xA;// Start the server when Primus has been resolved&#xA;wsInitPromise.then(setImmediate(startServer)).catch(err =&gt; {&#xA;    console.log('Server failed to start due to error: %s', err);&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p><em>websockets.js</em></p>&#xA;&#xA;<pre><code>// primus-emit module adds client-&gt;server and server-&gt;client event emitting &#xA;// to Primus&#xA;import primusEmit from 'primus-emit';&#xA;&#xA;const registerFunctions = [&#xA;  // Any controller you add you should create a socket file where&#xA;  //  you register (spark, primus) in order to use it in each of &#xA;  // your controller&#xA;  require('../api/discountRequest/discountRequest.socket').register,&#xA;  require('../api/discount/discount.socket').register,&#xA;  require('../api/paymentMethod/paymentMethod.socket').register,&#xA;  require('../api/invoice/invoice.socket').register,&#xA;];&#xA;function onDisconnect(spark) {}&#xA;function onConnect(spark) {&#xA;  spark.on('info', data =&gt; {&#xA;    spark.log(JSON.stringify(data, null, 2));&#xA;  });&#xA;&#xA;  for(let register of registerFunctions) {&#xA;    // here you register all your paths to socket's file&#xA;    register(spark, primus);&#xA;  }&#xA;}&#xA;let primus;&#xA;&#xA;export function broadcast(message) {&#xA;  primus.forEach(spark =&gt; {&#xA;    spark.emit('broadcast', message);&#xA;  });&#xA;}&#xA;&#xA;export default function initWebSocketServer(server) {&#xA;  // primus needs to be ""attached"" to a HTTP compatible server (http and https), &#xA;  //there is multiple transformer you can choose, from me I use websocket&#xA;  primus = new Primus(server, {&#xA;    transformer: 'websockets',&#xA;  });&#xA;  // add the primus-emit plugin&#xA;  primus.plugin('emit', primusEmit);&#xA;  // make some event on starting&#xA;  primus.on('connection', onConnect);&#xA;  primus.on('disconnection', onDisconnect);&#xA;&#xA;  return new Promise((resolve, reject) =&gt; {&#xA;    // Save the primus client library configured for our server settings&#xA;    // create the library &#xA;    primus.library();&#xA;    // store it somewhere in your server&#xA;    primus.save(path.join(__dirname, 'client/components/socket/primus.js'), err =&gt; {&#xA;      if(err) return reject(err);&#xA;       resolve();&#xA;    });&#xA;  }).catch(e =&gt; console.error(`.catch(${e})`));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Client side</strong></p>&#xA;&#xA;<p><em>index.html</em></p>&#xA;&#xA;<pre><code>// primus/primus.js is the default path to primus script &#xA;&lt;script defer src=""https://your-server-url.com/primus/primus.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p><em>your script</em></p>&#xA;&#xA;<pre><code>checkConnection() {&#xA;  // if Primus library is not yet created so wait for it &#xA;  if (typeof(Primus) !== ""undefined"") {&#xA;    this.primus = new Primus(/*server url with */, {});&#xA;    some default primus event&#xA;    this.primus.on('open', () =&gt; {&#xA;      console.log('Connection is alive and kicking');&#xA;    });&#xA;    this.primus.on('error', (err) =&gt; {&#xA;      console.error('Something horrible has happened', err.stack);&#xA;    });&#xA;    this.primus.on('reconnect', (opts) =&gt; {&#xA;      console.log('Reconnection attempt started');&#xA;      this.branchinfo();&#xA;    });&#xA;    this.primus.on('reconnect timeout', (err, opts) =&gt; {&#xA;      console.log('Timeout expired: %s', err.message);&#xA;    });&#xA;    this.primus.on('reconnect failed', (err, opts) =&gt; {&#xA;      console.log('The reconnection failed: %s', err.message);&#xA;    });&#xA;    this.primus.on('end', () =&gt; {&#xA;      console.log('Connection closed');&#xA;    });&#xA;  } else {&#xA;    setTimeout(() =&gt; {&#xA;      this.checkConnection();&#xA;    },1000);&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",9840385,"",9840385,"",2019-12-22T06:41:08,2019-12-22T06:41:08,"","",,1,,,
59385763,2,,59385434,2019-12-18T05:01:23,,1,,"<p>For the render process you can start here.&#xA;<a href=""https://electronjs.org/docs/tutorial/application-debugging"" rel=""nofollow noreferrer"">https://electronjs.org/docs/tutorial/application-debugging</a></p>&#xA;&#xA;<p>for the main process you can see here.&#xA;<a href=""https://electronjs.org/docs/tutorial/debugging-main-process"" rel=""nofollow noreferrer"">https://electronjs.org/docs/tutorial/debugging-main-process</a></p>&#xA;&#xA;<p>if you are using vscode you can use this handy guide.&#xA;<a href=""https://electronjs.org/docs/tutorial/debugging-main-process-vscode"" rel=""nofollow noreferrer"">https://electronjs.org/docs/tutorial/debugging-main-process-vscode</a></p>&#xA;",2052859,"",,"",,2019-12-18T05:01:23,"","",,1,,,
59416674,2,,58771614,2019-12-19T20:44:05,,1,,"<p>A month late reply but I also encountered a similar issue.&#xA;You can use <em>productName</em> key for it.</p>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>{&#xA;  ""name"": ""calculator"",&#xA;  ""productName"": ""Calculator with Spaces"",&#xA;  ""build"": {&#xA;    ""appId"": ""calculator.id"",&#xA;    ""mac"": {&#xA;      ""icon"": ""img/calculator_icon.png"",&#xA;      ""target"": []&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here is the reference:&#xA;<a href=""https://electronjs.org/docs/api/app#appgetname"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/app#appgetname</a></p>&#xA;",6518359,"",,"",,2019-12-19T20:44:05,"","",,1,,,
59488471,2,,59476320,2019-12-26T12:25:03,,1,,"<p>What's the Electron version you're trying to build for? Ancient V8 versions didn't have the two-argument version of <code>Utf8Value</code>, but ever since the 6.2 branch (summer 2017) it has existed. So if your Electron-based app is very old, then that would explain it and updating it should fix it.</p>&#xA;",6036428,"",,"",,2019-12-26T12:25:03,"","",,1,,,
59342114,2,,59337700,2019-12-15T07:53:43,,1,,"<p>If your project is client-side html only, then it is ready to go: just use one of the minimal Electron examples, and set your index.html as the start page.</p>&#xA;&#xA;<p>If it is connecting to a back-end server (e.g. to access a database), it can still do that, but it means the application won't be able to run offline.</p>&#xA;&#xA;<p>It is worth considering why you want an Electron app, instead of just having a web app. E.g. Are you hitting any security restrictions or other limitations of a web app, that a desktop app does not have? If not, packaging as an Electron app might just be effort spent on something that no-one wants or needs.</p>&#xA;&#xA;<p>As you've built with vue-cli, it might be worth looking at <a href=""https://quasar.dev/"" rel=""nofollow noreferrer"">Quasar Framework</a> which is a wrapper for Vue that comes with Electron and Mobile targets ready to go. You don't actually have to use any of their UI components to get this.</p>&#xA;",841830,"",,"",,2019-12-15T07:53:43,"","",,2,,,
59373793,2,,59373170,2019-12-17T11:57:13,,1,,"<p>With electron you have to pay attention in which context your JS files run:</p>&#xA;&#xA;<ul>&#xA;<li>process / nodejs context<br>&#xA;Typically <code>main.js</code> runs here, it does all the bootstrapping of the electron environment and browser / electron windows. At some point you will tell a window to load some HTML file - which enters the second context.</li>&#xA;<li>electron window / browser context<br>&#xA;Anything that got loaded into a window, runs ""remotely"". To get JS files extecuted in the browser context, you pretty much do the same as with any other web application (use <code>&lt;script&gt;</code> tags etc).</li>&#xA;</ul>&#xA;&#xA;<p>Up to that point an electron app is not different to any other web application - the process/nodejs part acts as a server component, while the window context is the webpage/client context. Note that those contexts are only loosely coupled, you need IPC mechanisms to exchange data between them.</p>&#xA;&#xA;<p>Still electron goes abit further - it allows to directly embed nodejs modules into a window context. This is possible due to some extensions made by the electron team to the underlying chrome libraries. Use that with caution as it might introduce security issues (there is even a security setting for this).</p>&#xA;&#xA;<p>To get what you want:</p>&#xA;&#xA;<ul>&#xA;<li>create a window in <code>main.js</code></li>&#xA;<li>load some HTML document into that window</li>&#xA;<li>refer to some other JS file in that HTML document, which now gets loaded along with the HTML document (thats the ominous <code>render.js</code> in your reference)</li>&#xA;<li>put some logic in that other JS file --> gets executed within the window context</li>&#xA;</ul>&#xA;&#xA;<p>There is a nice walkthrough to get a basic example up and running in the electron docs (<a href=""https://electronjs.org/docs/tutorial/first-app"" rel=""nofollow noreferrer"">https://electronjs.org/docs/tutorial/first-app</a>).</p>&#xA;",12548337,"",,"",,2019-12-17T11:57:13,"","",,2,,,
59404470,2,,59402467,2019-12-19T06:43:44,,0,,"<p>There can be multiple reasons for this exception. One of the most common one is the incompatibility of ChromeDriver version and the electron version with which the electron app you are trying to automate is distributed/packed.</p>&#xA;&#xA;<p>For e.g. If Electron version of my app is v7.1.2 then the ChromeDriver version to be used should be 78.0.3904.113.</p>&#xA;&#xA;<p>More info about this compatibility can be found here - &#xA;<a href=""https://electronjs.org/releases/stable"" rel=""nofollow noreferrer"">Electron and Chromium version</a></p>&#xA;&#xA;<p>An example that I tried using Java v1.8, Electron v7.1.6 (Default electron.exe that gets created in node_module/.../dist folder) and ChromeDriver v78.0.3904.105</p>&#xA;&#xA;<pre><code>ChromeOptions options = new ChromeOptions();&#xA;options.setBinary(""./electron-quick-start/node_modules/electron/dist/electron.exe"");&#xA;ChromeDriverService chromeservices = new ChromeDriverService.Builder().build();&#xA;WebDriver driver = new ChromeDriver(chromeservices, options);&#xA;String chromeVersion = driver.findElement(By.cssSelector(""ul &gt; li.chrome-version"")).getText();&#xA;String electronVersion = driver.findElement(By.cssSelector(""ul &gt; li.electron-version"")).getText();&#xA;System.out.println(""Chromium version : "" + chromeVersion);&#xA;System.out.println(""Electron version : "" + electronVersion);&#xA;driver.quit();&#xA;</code></pre>&#xA;",4407555,"",4407555,"",2019-12-19T07:10:44,2019-12-19T07:10:44,"","",,2,,,
59445567,2,,57274201,2019-12-22T15:29:14,,0,,"<p>I believe I found my answer here : <a href=""https://stackoverflow.com/questions/50683026/input-addeventlistener-on-change-not-firing"">Input addEventListener on change not firing</a>.&#xA;the problem is that I am passing the <code>addEventListener</code> function the result of the <code>setProgress()</code> function.</p>&#xA;&#xA;<p>As said in the link, I'll try <code>.bind</code> or a function statement/arrow function when I'll have time.</p>&#xA;",10074924,"",10074924,"",2019-12-27T16:59:18,2019-12-27T16:59:18,"","",,2,,,
59291799,2,,59291498,2019-12-11T18:15:52,,2,,"<p>The <code>Maximum call stack size exceeded</code> is usually due to infinite recursion, and that certainly seems to be the case here. In <code>router.beforeEach</code> you're calling <code>next</code> to go to the <code>/register</code> route, which goes back into this method, which calls <code>next</code>, and so on. I see you have a <code>requiresUser</code> in your <code>meta</code>, so you need to check that in <code>beforeEach</code>, like this:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>router.beforeEach((to, from, next) =&gt; {&#xA;  // If the route's meta.requiresUser is true, make sure we have a user, otherwise redirect to /register&#xA;  if (to.matched.some(route =&gt; route.meta.requiresUser === true)) {&#xA;    if (typeof user == ""undefined"") {&#xA;      next({ path: '/register' })&#xA;    } else {&#xA;      next()&#xA;    }&#xA;  }&#xA;  // Route doesn't require a user, so go ahead&#xA;  next()&#xA;}&#xA;</code></pre>&#xA;",12431728,"",,"",,2019-12-11T18:15:52,"","",,3,,,
59296717,2,,59296674,2019-12-12T02:08:42,,1,,"<p>Mocha and Chai is <code>devDependency</code>. It is not run on electron. When you bundle libraries for Electron. Only dependencies bundles up and run into electron, not the <code>devDependencies</code>. So while running mocha, chai test you need babel to support es6 syntax. </p>&#xA;",1594359,"",,"",,2019-12-12T02:08:42,"","",,6,,,
59461200,2,,59460015,2019-12-23T20:54:59,,2,,"<p>To determine if accessibility access is enabled, you can use <code>AXIsProcessTrusted</code> and it's counterpart, <code>AXIsProcessTrustedWithOptions</code>. Both are part of <code>ApplicationServices</code>. From the <a href=""https://developer.apple.com/documentation/applicationservices/1460720-axisprocesstrusted?language=objc"" rel=""nofollow noreferrer"">documentation</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Returns TRUE if the current process is a trusted accessibility client, FALSE if it is not.</p>&#xA;</blockquote>&#xA;&#xA;<p>It doesn't seem possible to detect if FDA is enabled or not; there is no API for that. Some developers try to test access by attempting to read a known protected file and seeing if that works or not; but this approach is fragile and Apple does recommend against it. More discussion <a href=""https://forums.developer.apple.com/thread/114452"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;",233944,"",,"",,2019-12-23T20:54:59,"","",,6,,,
22713919,2,,22511256,2014-03-28T13:14:17,,0,,"<p>I am not sure how this fixed the issue but doing the following did the trick. I added the following files to my root directory where <strong>libEGL.dll, libGLESv2.dll</strong> are present ; </p>&#xA;&#xA;<ul>&#xA;<li>avcodec-54.dll</li>&#xA;<li>avformat-54.dll</li>&#xA;<li>avutil-51.dll</li>&#xA;<li>d3dcompiler_43.dll</li>&#xA;<li>d3dx9_43.dll</li>&#xA;</ul>&#xA;&#xA;<p>Now my fonts display nicely ! </p>&#xA;",3003977,"",,"",,2014-03-28T13:14:17,"","",,0,,,
22512548,2,,22512267,2014-03-19T16:41:24,,1,,"<p>You can use z-index to position the button on top of the toolbar.</p>&#xA;&#xA;<pre><code>.toolbar {&#xA;    z-index:1;&#xA;}&#xA;&#xA;button {&#xA;    z-index:2;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong><a href=""http://jsfiddle.net/FLwT2/1/"" rel=""nofollow"">DEMO</a></strong></p>&#xA;&#xA;<p>Depending on whether or not you have other elements in the parent element, you may need to play with the z-index values to get them to show up how you want.  Just make sure that the button's z-index is larger than the toolbar's.</p>&#xA;",2942163,"",,"",,2014-03-19T16:41:24,"","",,4,,,
27753098,2,,27730284,2015-01-03T08:36:00,,0,,"<p>If you set <code>""frame"": false</code> inside your window object (in your <code>package.json</code> file), it will make your main window frameless. From there you just need to create a pause, before spawning a new window with your main app loaded in it.</p>&#xA;",418710,"",,"",,2015-01-03T08:36:00,"","",,0,,,
27777592,2,,26509122,2015-01-05T10:28:31,,0,,<p>I found the needed files in an early version of chrome (version 18.XXX to be more specific).</p>&#xA;&#xA;<p>You should download the version for each platform you need and get the plugins from the installed version folder.</p>&#xA;,2139929,"",,"",,2015-01-05T10:28:31,"","",,3,,,
27592980,2,,27539277,2014-12-21T19:33:50,,1,,"<p>By way of a partial answer to my own question</p>&#xA;&#xA;<p><a href=""https://github.com/ctalkington/node-archiver"" rel=""nofollow"">node-archiver</a> seems a reliable tool to zip files - I've not seen any corruption issues, it supports streams/pipes and offers zip and gz compression</p>&#xA;&#xA;<p>Example: I can open a tar.gz, pipe it into zlib's gunzip and pipe that straight into archiver - which is great</p>&#xA;&#xA;<pre><code>request(""http://pathtomytar.gz"").pipe(zlib.createGunzip()).pipe(tar.Parse()).on(""entry"",function(e) {&#xA;var b = new Buffer(e[""_header""].size)&#xA;var boff = 0&#xA;e.on(""data"", function (d) {&#xA;  d.copy(b,boff)&#xA;  boff += d.length&#xA;).on(""end"",function() {&#xA;  archive.append(b, { name: e.path})&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>})</p>&#xA;&#xA;<p>If there's a library/module which opens zips and pipes them as above - it would complete the set but I've yet to find a reliable one - more news if I do</p>&#xA;",,user834595,,"",,2014-12-21T19:33:50,"","",,0,,,
27667140,2,,27662263,2014-12-27T12:16:04,,1,,"<p>You should use <code>nwdirectory</code> attribute instead of <code>webkitdirectory</code>. As the <a href=""https://github.com/rogerwang/node-webkit/wiki/File-dialogs#select-directory-node-webkit"" rel=""nofollow"">wiki page</a> describes:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>nwdirectory</strong> is a bit similar to <strong>webkitdirectory</strong> because it let user&#xA;  select a directory too, but it will not enumerate all files under the&#xA;  directory but directly returns the path of directory, developers may&#xA;  want to use <code>nwdirectory</code> to get the path of a directory.</p>&#xA;</blockquote>&#xA;&#xA;<p>So the following change fixed my problem:</p>&#xA;&#xA;<pre><code>&lt;input id=""fileInput"" class=""upload-list"" type=""file"" nwdirectory directory /&gt;&#xA;</code></pre>&#xA;",2004976,"",960757,"",2014-12-27T12:46:23,2014-12-27T12:46:23,"","",,0,,,
27679381,2,,27679287,2014-12-28T18:33:39,,1,,"<p>The code in  your question simply will not cause the error you've described (see below), so you need to look elsewhere. Note that if <code>filename</code> <strong>doesn't</strong> have at least one <code>"" - ""</code> in it (it does in your question, but presumably you're actually getting that name from somewhere rather than using a literal string), you'll get back an array with only one entry from <code>split</code>, and so you really do need to have a guard on your <code>filenameparts[1]</code> line, e.g.:</p>&#xA;&#xA;<pre><code>if (filenameparts.length &gt; 1) {&#xA;    console.log(filenameparts[1].replace(""-"",""/"")); &#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Proof that your code in the question works:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var filename = ""first part - 5-10 - third part.txt""&#xD;&#xA;var filenameparts = filename.split("" - "");&#xD;&#xA;snippet.log(filenameparts);&#xD;&#xA;snippet.log(filenameparts[0].substring(filenameparts[0].indexOf(' '))); //this prints fine&#xD;&#xA;snippet.log(filenameparts[1].replace(""-"",""/"")); </code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!-- Script provides the `snippet` object, see http://meta.stackexchange.com/a/242144/134069 --&gt;&#xD;&#xA;&lt;script src=""http://tjcrowder.github.io/simple-snippets-console/snippet.js""&gt;&lt;/script&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><em>This is a Community Wiki because it's really a comment with a Stack Snippet in it.</em></p>&#xA;",157247,"",,"",,2014-12-28T18:33:39,"","",,1,,,2014-12-28T18:33:39
27732709,2,,27710861,2015-01-01T16:53:12,,1,,"<p>When you pass <code>db.insert</code> that way, you lose its evaluation context (""this"" is no longer the database). Try using the other form of <code>fromNodeCallback</code>:</p>&#xA;&#xA;<pre><code>insert = Bacon.fromNodeCallback(db, 'insert', {a: 'Hi!'})&#xA;</code></pre>&#xA;",994643,"",,"",,2015-01-01T16:53:12,"","",,0,,,
27764200,2,,27763911,2015-01-04T09:35:29,,1,,"<p>You need to set it the below way:   </p>&#xA;&#xA;<pre><code>var appNum = 0;&#xA;var updateCon = {$set:{}};&#xA;updateCon.$set[""applicationsInfo.""+appNum+"".consumerKey""] = 1;&#xA;</code></pre>&#xA;&#xA;<p>Setting an expression (<code>""applicationsInfo.""+appNum+"".consumerKey""</code>) as key of an object during initialization is not allowed in java script.</p>&#xA;",1617024,"",,"",,2015-01-04T09:35:29,"","",,2,,,
27776746,2,,27776227,2015-01-05T09:38:04,,1,,"<p>You can use <a href=""https://github.com/cefsharp/CefSharp"" rel=""nofollow""><strong>CefSharp</strong></a> </p>&#xA;&#xA;<p><a href=""https://github.com/cefsharp/CefSharp"" rel=""nofollow"">CefSharp - Embedded Chromium for .NET</a></p>&#xA;&#xA;<p>this might help you.</p>&#xA;&#xA;<p><strong>Examples</strong></p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/cefsharp/CefSharp/tree/master/CefSharp.WinForms.Example"" rel=""nofollow"">WinForm</a> </li>&#xA;<li><a href=""https://github.com/cefsharp/CefSharp/tree/master/CefSharp.Wpf.Example"" rel=""nofollow"">WPF</a></li>&#xA;</ul>&#xA;",1922352,"",1922352,"",2015-01-05T10:25:04,2015-01-05T10:25:04,"","",,1,,,
27574883,2,,27574575,2014-12-19T22:39:09,,2,,"<p>Just as an expansion to the comments, you have too many non angular asynchronous activities going on there and also you are invoking the callback with the array reference (at that point will be empty) with no items in the array yet. That is why you don't see the data immediately. Also avoid taking a callback in angular services, instead use angular <a href=""https://docs.angularjs.org/api/ng/service/$q"" rel=""nofollow""><code>$q</code></a> and return a promise. In case of non angular activity you could generally return a custom promise using deferred object (<code>$q.defer</code>). Creating a $q promise and chaining it though will make sure digest cycle will automatically be invoked after the promise chain callbacks are executed. This avoids the need to do a <code>scope.$apply</code>. In your case no digest cycle happens after the update so even though your model gets updated corresponding DOM binding(in the view) does not update(Which happens as a part of the digest cycle). When you click on some other control which probably may have its own <code>ng-click</code> or something digest cycle happens and you suddenly see the data.</p>&#xA;&#xA;<p>In your service inject <code>$q</code> and do something like this (Yup a lot of re-factoring needs to be done, this is an untested quick and dirty code):</p>&#xA;&#xA;<pre><code>methods.getFileList = function () {&#xA;&#xA;    var defer = $q.defer(); //Create a deferred object&#xA;&#xA;    var allFiles = [];&#xA;&#xA;    fs.readdir(directory, readFile);&#xA;&#xA;    // @todo: this is ugly as hell. Refactor later.&#xA;    function readFile(err, files) {&#xA;        if (err) throw err;&#xA;&#xA;        var cnt = 0; //Set up a counter&#xA;&#xA;       //Resolve/reject promise here too if there is no file list&#xA;&#xA;        files.forEach(function (filename) {&#xA;            if (!isSupportedFileFormat(filename)) { &#xA;&#xA;               //Resolve promise here too after the check&#xA;                return ++cnt;&#xA;            }&#xA;&#xA;            fs.open(directory + filename, 'r', function (err, fileDescriptor) {&#xA;                var buffer = new Buffer(85);&#xA;&#xA;                fs.read(fileDescriptor, buffer, 0, buffer.length, null, function (err, bytesRead, buffer) {&#xA;                    allFiles.push({&#xA;                        name: filename,&#xA;                        contents: buffer.toString('utf8', 0, bytesRead)&#xA;                    });&#xA;                    fs.close(fileDescriptor);&#xA;&#xA;                    //Check for the counter (Reverify this logic)&#xA;                    if(++cntr === files.length){&#xA;                       defer.resolve(allFiles);&#xA;                    }&#xA;&#xA;                });&#xA;            });&#xA;        });&#xA;&#xA;    }&#xA;&#xA;  //Return a promise&#xA;  return defer.promise;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>And in your controller chain through the promise returned by the service method:-</p>&#xA;&#xA;<pre><code>FileService.getFileList().then(function (list) {&#xA;    $scope.listOfFiles = list;&#xA;    console.log($scope.listOfFiles);&#xA;});&#xA;</code></pre>&#xA;",1009603,"",1009603,"",2014-12-19T22:50:35,2014-12-19T22:50:35,"","",,5,,,
27575439,2,,27574596,2014-12-19T23:40:44,,2,,"<p>The simple solution in my mind would be to not have the elements in the DOM until they are loaded. The user won't be able to scroll because there won't be content to scroll to. Then, it's just a matter of preserving the viewport when the elements are added.</p>&#xA;&#xA;<p>Take the initial position of your scroll container and the height of the overflow container:</p>&#xA;&#xA;<pre><code>var scrollTop = $scroll.scrollTop(),&#xA;    height    = $container.height();&#xA;</code></pre>&#xA;&#xA;<p>and use them to preserve the viewport when you <code>prepend</code> new elements. You don't have to do anything when you're doing the <code>append</code> operation.</p>&#xA;&#xA;<pre><code>var newHeight    = $container.height(),&#xA;    newScrollTop = scrollTop + newHeight - height;&#xA;$scroll.scrollTop(newScrollTop);&#xA;</code></pre>&#xA;&#xA;<p>Here's a quick example: <a href=""http://jsfiddle.net/Wexcode/tfszaocz/"" rel=""nofollow"">http://jsfiddle.net/Wexcode/tfszaocz/</a></p>&#xA;",522877,"",,"",,2014-12-19T23:40:44,"","",,0,,,
27695696,2,,27693898,2014-12-29T20:41:43,,2,,"<p>If you use the same JSZip instance to load each and every file, you will keep everything in memory : the <code>load</code> method doesn't replace the existing content.</p>&#xA;&#xA;<p>Try using a new JSZip instance each time :</p>&#xA;&#xA;<pre><code>var zipObj = new JSZip();&#xA;zipObj.load(data);&#xA;// or var zipObj = new JSZip(data);&#xA;</code></pre>&#xA;",1992669,"",,"",,2014-12-29T20:41:43,"","",,2,,,
27561600,2,,27040746,2014-12-19T07:36:09,,3,,"<p>So there's 2 parts to this question:</p>&#xA;&#xA;<p>1) Speed comparison of Javascript executing under V8 (node-webkit), vs C++ compiled into native code</p>&#xA;&#xA;<p>On most computationally-intensive tasks, you'd expect a 3x to 10x slowdown in execution (depending on the benchmark). An example can be found at <a href=""http://benchmarksgame.alioth.debian.org/u64/benchmark.php?test=all&amp;lang=v8&amp;lang2=gpp"" rel=""nofollow"">http://benchmarksgame.alioth.debian.org/u64/benchmark.php?test=all&amp;lang=v8&amp;lang2=gpp</a> ; if you want more examples search for other v8 benchmarks.</p>&#xA;&#xA;<p>2) Speed comparison of browser-based UI toolkits (based on the DOM and CSS, and perhaps WebGL) as rendered with Chrome's engine, vs whatever desktop UI toolkit (for example, Qt, WxWidgets, etc) and/or 3D-rendering API (DirectX, OpenGL, or various different wrappers around them) that you'd be using with C++.</p>&#xA;&#xA;<p>This unfortunately is rather difficult to benchmark, as there are tons of different UI toolkits out there, each with differing performance characteristics for each type of animation / widget that you might use (depending on how they were implemented). If you're 3D rendering and want to compare Javascript+WebGL on Chrome to C++ with DirectX, see <a href=""https://www.scirra.com/blog/58/html5-2d-gaming-performance-analysis"" rel=""nofollow"">https://www.scirra.com/blog/58/html5-2d-gaming-performance-analysis</a> for an example benchmark (their figures indicate a ~5x slowdown); if you want more examples search for performance benchmarks comparing WebGL to OpenGL and DirectX.</p>&#xA;&#xA;<p>Generally speaking, well-implemented C++ should execute faster than Javascript running under node-webkit, simply because there's fewer layers of abstraction away from the hardware. That said, unless you're building an exceptionally computationally intensive application, the difference will likely not be visible on a modern desktop, and you should be focusing more on ease-of-development rather than performance.</p>&#xA;&#xA;<p>Using node-webkit also gives you advantage of the countless UI libraries built for browsers, which will likely accelerate your development time, especially if you already have experience in frontend web app development. There are also advantages in terms of portability - unless you use a cross-platform UI tookit like Qt with C++, you will need platform-specific UI code, whereas with node-webkit you get cross-platform portability for free.</p>&#xA;",3897872,"",,"",,2014-12-19T07:36:09,"","",,0,,,
27650869,2,,27609887,2014-12-25T21:31:12,,3,,"<p>Did you install a custom menu (i.e. overriding the default Atom Shell menu?) Once you do this, you'll actually have to explicitly implement the Devtools shortcut to get it to work. </p>&#xA;",5728,"",,"",,2014-12-25T21:31:12,"","",,0,,,
27673021,2,,27672901,2014-12-28T01:34:03,,3,,"<p>What you're running into is one of the many gotchas of asynchronous programming in javascript.</p>&#xA;&#xA;<p>The meaning of the follow code is nuanced:</p>&#xA;&#xA;<pre><code>librodb.find({_id: docs[i].libro}, function (err, bookdoc) {&#xA;    window.titulo = bookdoc[0].titulo;&#xA;    window.ISBN = bookdoc[0].ISBN;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The <code>librodb.find</code> method is asynchronous, meaning it has background work it needs to do (maybe it needs to wait on disk access, or network traffic). Rather than halt all other code from running it starts doing things in the background and once that's finished it will call your code with the results.</p>&#xA;&#xA;<p>So, what you are seeing is that when your code trying to use titulo and ISBN runs the callback has not yet been called, that is your code setting <code>window.titulo</code> and <code>window.ISBN</code> hasn't yet run!</p>&#xA;&#xA;<p>Instead you need to delay running your code until the results of find come back. To do this move it inside the callback function. Of course this means the a simple for loop won't do what you want. Instead you can either write your own asynchronous loop using callbacks, or use a library such as <a href=""https://github.com/caolan/async"" rel=""nofollow"">async.js</a>.</p>&#xA;&#xA;<p>If you write it yourself it might look something like the following:</p>&#xA;&#xA;<pre><code>var i = 0;&#xA;&#xA;function processNext() {&#xA;  librodb.find({_id: docs[i].libro}, function (err, bookdoc) {&#xA;    window.titulo = bookdoc[0].titulo;&#xA;    window.ISBN = bookdoc[0].ISBN;&#xA;&#xA;    switch(docs[i].razon){&#xA;      case 1:&#xA;        $("".listed"").append('&lt;li&gt;&lt;i class=""fa fa-institution""&gt;&lt;/i&gt;&lt;i class=""fa fa-sign-in""&gt;&lt;/i&gt;El '+docs[i].fecha+' '+docs[i].cantidad+' Libros (""'+window.titulo+'"", ISBN: '+window.ISBN+') producidos.&lt;/li&gt;');&#xA;        next();&#xA;      break;&#xA;      case 2:&#xA;        libreriadb.find({_id: docs[i].libreria}, function (err, librarydoc) {&#xA;          window.nombre = librarydoc[0].nombre;&#xA;&#xA;          $("".listed"").append('&lt;li&gt;&lt;i class=""fa fa-institution""&gt;&lt;/i&gt;&lt;i class=""fa fa-sign-in""&gt;&lt;/i&gt;El '+docs[i].fecha+' '+docs[i].cantidad+' Libros (""'+window.titulo+'"", ISBN: '+window.ISBN+') devueltos por Libreria (""'+window.nombre+'""), recibo '+docs[i].documento+'.&lt;/li&gt;');&#xA;          next();&#xA;        });&#xA;      break;&#xA;      case 3:&#xA;        $("".listed"").append('&lt;li&gt;&lt;i class=""fa fa-question""&gt;&lt;/i&gt;&lt;i class=""fa fa-sign-in""&gt;&lt;/i&gt;El '+docs[i].fecha+' '+docs[i].cantidad+' Libros (""'+window.titulo+'"", ISBN: '+window.ISBN+') en stock ingresaron por ""'+docs[i].descripcion+'"".&lt;/li&gt;');&#xA;        next();&#xA;      break;&#xA;    }&#xA;  });&#xA;&#xA;  function next() {&#xA;    i++;&#xA;    if(i &lt; docs.length) {&#xA;      processNext();&#xA;    }&#xA;    else {&#xA;      // DONE&#xA;    }&#xA;}&#xA;processNext(); // Start the loop&#xA;</code></pre>&#xA;&#xA;<p>Callbacks and asynchronous javascript definitely take some getting used to.</p>&#xA;&#xA;<p>p.s. You really really shouldn't be putting the values on window. I haven't fixed that in your sample code, but now that it is inside the same function you should be able to get rid of the globals and simply make them normal variables.</p>&#xA;",4313043,"",,"",,2014-12-28T01:34:03,"","",,5,,,
27738916,2,,27738823,2015-01-02T07:31:46,,3,,"<p>In case of a mac:</p>&#xA;&#xA;<pre><code>/usr/bin/open -a ""/Applications/Google Chrome.app"" --args 'data:text/html,&lt;html&gt;&lt;body&gt;&lt;h1&gt;title&lt;/h1&gt;&lt;p&gt;text&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'&#xA;</code></pre>&#xA;&#xA;<p>Details about URI</p>&#xA;&#xA;<p><a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs"" rel=""nofollow"">https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs</a></p>&#xA;",1543083,"",1543083,"",2015-01-02T08:11:53,2015-01-02T08:11:53,"","",,1,,,
27642445,2,,27640982,2014-12-24T21:48:17,,4,,"<p>Finally i can solve my problem and save canvas in different image format to disk with <a href=""https://github.com/eligrey/FileSaver.js"" rel=""nofollow"">FileSaver</a></p>&#xA;&#xA;<pre><code>  canvas.toBlob(function(blob) {&#xA;            saveAs(blob, ""image.jpg"");&#xA;        });&#xA;</code></pre>&#xA;",1262045,"",,"",,2014-12-24T21:48:17,"","",,0,,,
27714963,2,,27703918,2014-12-31T01:20:31,,4,,"<p>Yes, do this instead:</p>&#xA;&#xA;<pre><code>var webView = document.getElementById('webview tag id');&#xA;webView.executeJavaScript(""document.querySelector('body:first-child').scrollTop=100"");&#xA;</code></pre>&#xA;",5728,"",,"",,2014-12-31T01:20:31,"","",,1,,,
27772245,2,,26924209,2015-01-05T01:19:36,,4,,"<p>I am assuming your code in question is executed via the node-main entry point of node-webkit: <a href=""https://github.com/rogerwang/node-webkit/wiki/Node-main"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/Node-main</a></p>&#xA;&#xA;<p>If <strong>any</strong> <strong>exception</strong> happens (there) which is <strong>not catched</strong> in your application <strong>will crash</strong>. </p>&#xA;&#xA;<p>Sadly at the moment the breakpad feature for getting crashdumps is not working on OSX: <a href=""https://github.com/rogerwang/node-webkit/issues/2518"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/issues/2518</a></p>&#xA;&#xA;<h2>How to prevent Node-Webkit from crashing immediately</h2>&#xA;&#xA;<p>Wrap the code in try/catches to prevent the crash and get information why the crash occurs.</p>&#xA;&#xA;<pre><code>try {&#xA;&#xA;    the_child_process = child_process.spawn(pathToBin, args);&#xA;&#xA;} catch (err) {&#xA;&#xA;    global.console.log( ""Error while trying to start child process: "" + JSON.stringify(err) );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is a general advice for a situation like you are experiencing to track down the real cause for the issue.</p>&#xA;&#xA;<h2>How to include a binary with your node-webkit app</h2>&#xA;&#xA;<p>There are a few things involved.</p>&#xA;&#xA;<ol>&#xA;<li>Including the binaries inside your app.nw&#xA;&#xA;&#xA;<blockquote>&#xA;  <p>This should be self explanatory - but there is one caveat which caused me some trouble:&#xA;  <strong>Make sure the binary is marked as executable</strong> via <code>chmod 755</code>. If you are using grunt you might like grunt-chmod.&#xA;  Now your binaries are part of your app's package and you can execute them by knowing the <em>absolute</em> path.</li>&#xA;  <li><p>Resolve the path to the binary at runtime even when packaged. The following piece of code is my solution for selecting the right binary for the current platform assuming your tool is multi platform. Also it assumes your binaries are ordered in a certain folder structure. Alternatively select the right binary in your build process and use always the same path.</p></p>&#xA;</blockquote>&#xA;&#xA;<pre><code>var arch = process.arch;&#xA;var platform = process.platform;&#xA;// this will return the root path of your app-package at runtime&#xA;var rootDir = process.cwd(); &#xA;var isWin = false;&#xA;&#xA;var execPath = rootDir;&#xA;&#xA;// some base path is appended&#xA;execPath = path.join(execPath, 'path', 'to', 'bin');&#xA;&#xA;// select folder for current platform&#xA;switch (platform) {&#xA;    case 'darwin':&#xA;        execPath = path.join(execPath, 'mac');&#xA;        break;&#xA;    case 'linux':&#xA;        execPath = path.join(execPath, 'lin');&#xA;        break;&#xA;    case 'win32':&#xA;        execPath = path.join(execPath, 'win');&#xA;        isWin = true;&#xA;        break;&#xA;    default:&#xA;        global.console.log(""unsupported platform: "" + platform);&#xA;        return null;&#xA;}&#xA;&#xA;// select folder for current processor architecture&#xA;switch (arch) {&#xA;    case 'ia32':&#xA;        execPath = path.join(execPath, 'x86');&#xA;        break;&#xA;    case 'x64':&#xA;        execPath = path.join(execPath, 'x64');&#xA;        break;&#xA;    default:&#xA;        global.console.log(""unsupported architecture: "" + arch);&#xA;        return null;&#xA;}&#xA;&#xA;// add executable filename&#xA;execPath = path.join(execPath, 'node');&#xA;&#xA;if (isWin) {&#xA;    execPath = execPath + "".exe"";&#xA;}&#xA;&#xA;global.console.log(""Path to your binary: "" + execPath);&#xA;&#xA;return execPath;&#xA;</code></pre></li>&#xA;<li><p>Resolve the paths which are fed to your binary as arguments eventually. This was also a bit confusing because all paths were treated as relative to the app's package root path. My node-main file resides in a folder in my app package so I thought I should reference files relative from there, but this was not the case.</p>&#xA;&#xA;<pre><code>app package root&#xA;|--- package.json     &lt;- node-webkit package.json&#xA;|&#xA;|--- client           &lt;- here my sources for the frontend reside&#xA;|&#xA;|--- server           &#xA;|----|--- node_modules  &lt;- server runtime dependencies&#xA;|----|--- src           &lt;- server source code&#xA;|----|----|--- server.js  &lt;- this is my node server file to execute via node&#xA;|&#xA;|--- node-webkit      &lt;- node webkit code and dependencies&#xA;|----|--- bin           &lt;- a directory with my deployed binaries&#xA;|----|--- node-main.js  &lt;- this is my node main file&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<p>To invoke a node binary with my server file the following line led to success:</p>&#xA;&#xA;<pre><code>    child_process.spawn(absPathToNodeBin, ""server/src/server.js"");&#xA;</code></pre>&#xA;",3370601,"",3370601,"",2015-01-05T01:24:46,2015-01-05T01:24:46,"","",,3,,,
27792062,2,,27790158,2015-01-06T04:24:49,,15,,<p><code>browser-window</code> only works in the Browser process (i.e. the one your app starts in). Try this:</p>&#xA;&#xA;<pre><code>var remote = require('remote');&#xA;remote.getCurrentWindow().reload();&#xA;</code></pre>&#xA;,5728,"",,"",,2015-01-06T04:24:49,"","",,3,,,
33871497,2,,33505485,2015-11-23T12:49:12,,0,,"<p>The issue is related to the OSX bug, Chrome already dropped the support for the Mac OSX 10.8 version so the bug won't be fixed. Solution is to use v0.34.0 of Electron or update the OS.</p>&#xA;&#xA;<p>More info can be found in the <a href=""https://github.com/atom/electron/issues/3329"" rel=""nofollow"">Issue #3329</a></p>&#xA;",3699690,"",,"",,2015-11-23T12:49:12,"","",,0,,,
33863461,2,,33863353,2015-11-23T03:47:33,,1,,"<p>Yes, this functionality is built in node.js.</p>&#xA;&#xA;<p>Here's how it's done in one of the nw.js sample apps, mp3 encoder (which obviously need different binaries on different OS to work): <a href=""https://github.com/zcbenz/nw-sample-apps/blob/master/mp3-encoder/lib/main.js#L29"" rel=""nofollow"">https://github.com/zcbenz/nw-sample-apps/blob/master/mp3-encoder/lib/main.js#L29</a></p>&#xA;&#xA;<p>In short: </p>&#xA;&#xA;<pre><code> var platform = require(""os"").platform;&#xA; var pathToBin;&#xA;&#xA; switch (platform()) {&#xA;    case ""darwin"":&#xA;      pathToBin = ""vendor/bin/osx/phantomjs"";&#xA;      break;&#xA;    case ""win32"":&#xA;      pathToBin = ""vendor/bin/win32/phantomjs.exe"";&#xA;  }&#xA;</code></pre>&#xA;",2715393,"",,"",,2015-11-23T03:47:33,"","",,0,,,
33896945,2,,33854783,2015-11-24T14:59:53,,1,,"<p>I have actually done exactly this, and it worked very well. The trick was to write some Node Webkit code that will ""detect"" that it's running as a desktop application, instead of a web app, and thus integrate with desktop notifications etc.</p>&#xA;&#xA;<p>Yes, it was more work than just writing a web app, but it was also less work (and maintenance) than developing separate applications. You get to use a lot of common code, because of the fact that you are running in a browser already, that I feel the project saved a lot of time.</p>&#xA;&#xA;<p>In fact, I am currently working on another application that requires some desktop features (file access, notifications) but the same functionality as the web application, and I'm proposing that the development happens in Node Webkit.</p>&#xA;&#xA;<p>The important criteria here for me is that both applications are 90% the same, the desktop just adds things you don't normally have on the web. So the core of the application is exactly the same AngularJS application, with some JavaScript injected by the Node Webkit startup page to add the required desktop behaviour.</p>&#xA;",991479,"",,"",,2015-11-24T14:59:53,"","",,4,,,
33901885,2,,33901830,2015-11-24T19:10:27,,1,,<p>One possible solution for this is to combine both of your JS files into a single file using a tool like browserify.</p>&#xA;,5601055,"",,"",,2015-11-24T19:10:27,"","",,1,,,
33915673,2,,31468395,2015-11-25T11:44:28,,1,,"<p>The output you're showing looks to be the raw PNG data (the PNG signature is <code>0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A</code>).</p>&#xA;&#xA;<p>You can parse the different chunks in the data and look for the <a href=""http://www.w3.org/TR/PNG/#11pHYs"" rel=""nofollow""><code>pHYs</code></a> chunk, which is (I think) the chunk you need to extract resolution information from for Mac OS X-generated PNG's.</p>&#xA;&#xA;<p>A simple parser which processes all PNG chunks:</p>&#xA;&#xA;<pre><code>var image = nativeImage.toPng(); // or the result of fs.readFile*()&#xA;&#xA;function* parseChunks(data) {&#xA;  var offset = 8; // skip PNG header&#xA;&#xA;  while (offset &lt; data.length) {&#xA;    var dataLength  = data.readUInt32BE(offset);&#xA;    var chunkLength = dataLength + 12;&#xA;    var typeStart   = offset + 4;&#xA;    var dataStart   = offset + 8;&#xA;    var dataEnd     = offset + 8 + dataLength;&#xA;    var crcEnd      = dataEnd + 4;&#xA;&#xA;    yield {&#xA;      type : data.toString('ascii', typeStart, dataStart),&#xA;      data : data.slice(dataStart, dataEnd),&#xA;      crc  : data.slice(dataEnd, crcEnd),&#xA;    };&#xA;&#xA;    offset = crcEnd;&#xA;  }&#xA;}&#xA;&#xA;for (let chunk of parseChunks(image)) {&#xA;  // Extract pixel information&#xA;  if (chunk.type === 'pHYs') {&#xA;    var ppuX = chunk.data.readUInt32BE(0);&#xA;    var ppuY = chunk.data.readUInt32BE(4);&#xA;    var unit = chunk.data.readUInt8(8); // should always be `1`&#xA;    console.log('PPI', Math.round(ppuX * 0.0254));&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This outputs <code>PPI 144</code> on my Mac, as expected.</p>&#xA;",893780,"",,"",,2015-11-25T11:44:28,"","",,8,,,
33928330,2,,33880506,2015-11-25T23:40:35,,1,,"<p>Today was released the alpha 6 version of NWJS at Google groups, you can check it <a href=""https://groups.google.com/forum/#!topic/nwjs-general/l-vc2U9mSsA"" rel=""nofollow"">here</a>. This bug was actually solved with this update:</p>&#xA;&#xA;<blockquote>&#xA;  <h1>Changes (features ported from nw12)</h1>&#xA;  &#xA;  <ul>&#xA;  <li>nwjc: compile JS to machine code for source code protection </li>&#xA;  <li>nw.Tray fix </li>&#xA;  <li>'single-instance' support ('true' only) </li>&#xA;  <li>'user-agent' in manifest </li>&#xA;  <li>'dom_storage_quota' and 'additional_trust_anchors' in manifest </li>&#xA;  <li>Fix 'child_process.fork' </li>&#xA;  <li>Fix: unable to launch in some Linux distributions </li>&#xA;  <li>nw.App methods: argv, clearCache, setProxyConfig,  addOriginAccessWhitelistEntry, removeOriginAccessWhitelistEntry, part &#xA;  of 'open' event </li>&#xA;  <li><strong>support migrating localstorage data file on app start</strong></li>&#xA;  <li>nw-gyp updated to 0.13.0: Fix native module build support</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>So, it was a bug of the alpha version I was using and was solved today.</p>&#xA;",2180785,"",,"",,2015-11-25T23:40:35,"","",,0,,,
33849332,2,,33847697,2015-11-21T22:27:13,,2,,"<p>I would give <a href=""https://github.com/octalmage/robotjs"" rel=""nofollow"">RobotJS</a> a try. It appears to do what you need.</p>&#xA;",84178,"",,"",,2015-11-21T22:27:13,"","",,0,,,
33851073,2,,33851032,2015-11-22T02:45:13,,2,,"<p>One item is 38px so you can set a <code>max-height</code> to the <code>.sublinks</code> div to the amount of divs you want to be shown so if you want two make it 76px or you want 3 make it 114px so on so on. Also i added <code>overflow: overlay;</code> so you won't see the items outside the accordion bit it still adds a scrollbar.</p>&#xA;&#xA;<p><a href=""http://jsfiddle.net/bjpLL5xn/1/"" rel=""nofollow"">Jsfiddle</a></p>&#xA;",3515065,"",,"",,2015-11-22T02:45:13,"","",,0,,,
33896715,2,,33812559,2015-11-24T14:50:21,,2,,"<p>You can use the ""emit"" function to pass data to a new window. All you then need to do is to intercept this event and you can extract your parameters from the object you've passed in.  </p>&#xA;&#xA;<p>For example, in your index.html:</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA; &lt;head&gt;&#xA;  &lt;script type=""text/javascript""&gt;&#xA;  window.gui = require('nw.gui');&#xA;  var win = gui.Window.open ('print.html', {&#xA;  position: 'center',&#xA;  width: 901,&#xA;  height: 127&#xA;  });&#xA;&#xA;  win.on ('loaded', function(){&#xA;    var parameters = {greeting: ""Hello World""}&#xA;    win.emit(""data"", parameters);&#xA;  });&#xA;   &lt;/script&gt;&#xA; &lt;/head&gt;&#xA; &lt;body&gt;&#xA; &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>And then in your print.html:</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA; &lt;head&gt;&#xA;  &lt;script type=""text/javascript""&gt;&#xA;    var gui = require('nw.gui');&#xA;    var win = gui.Window.get();&#xA;    win.on(""data"", function(data) {&#xA;        document.write(data.greeting);&#xA;    });  &#xA;  &lt;/script&gt;&#xA; &lt;/head&gt;&#xA; &lt;body&gt;&#xA; &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",991479,"",,"",,2015-11-24T14:50:21,"","",,2,,,
33807042,2,,33796916,2015-11-19T14:46:22,,3,,"<pre><code>export npm_config_disturl=https://atom.io/download/atom-shell&#xA;export npm_config_target=0.34.3&#xA;export npm_config_arch=x64&#xA;export npm_config_runtime=electron&#xA;HOME=~/.electron-gyp npm install serialport&#xA;</code></pre>&#xA;&#xA;<p>After this, go to <code>/Users/ylh/0/electron/electron-quick-start-master/node_modules/serialport/build/Release/</code></p>&#xA;&#xA;<p>And rename <code>electron-0.34-darwin-x64</code> to <code>node-v46-darwin-x64</code></p>&#xA;",5554485,"",,"",,2015-11-19T14:46:22,"","",,5,,,
33899449,2,,33899375,2015-11-24T16:54:33,,3,,"<p><strong>Custom HTML Attributes</strong> from <a href=""https://facebook.github.io/react/docs/jsx-gotchas.html#custom-html-attributes"" rel=""nofollow"">JSX Gotchas</a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>If you pass properties to native HTML elements that do not exist in the HTML specification, React will not render them. If you want to use a custom attribute, you should prefix it with data-.</p>&#xA;</blockquote>&#xA;&#xA;<p>If it's essential that you use an attribute that isn't prefixed with <code>data-</code>, you'll have to add it yourself using the DOM API inside your component.</p>&#xA;&#xA;<pre><code>giveCustomAttributes: function(input) {&#xA;  input.setAttribute('webkit-directory', '');&#xA;  input.setAttribute('moz-directory', '');&#xA;},&#xA;render: function() {&#xA;  return (&#xA;    &lt;input type='file' ref={giveCustomAttributes} /&gt;&#xA;  );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you want a more declarative approach you could move this behaviour into a mixin, in order to share it between components.</p>&#xA;&#xA;<pre><code>function CustomAttrsMixin(refName, attrs) {&#xA;  return {&#xA;    componentDidMount: function() {&#xA;      var attrNames = Object.keys(attrs),&#xA;          element = this.refs[refName];&#xA;&#xA;      attrNames.forEach(function(attrName) {&#xA;        element.setAttribute(attrName, attrs[attrName]);&#xA;      });&#xA;    }&#xA;  };&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then call the function with the appropriate values to create the mixin itself.</p>&#xA;&#xA;<pre><code>mixins: [CustomAttrsMixin('input', {&#xA;  'webkit-directory': '',&#xA;  'moz-directory': ''&#xA;})],&#xA;render: function() {&#xA;  return (&#xA;    &lt;input type='file' ref='input' /&gt;&#xA;  );&#xA;}&#xA;</code></pre>&#xA;",1088797,"",1088797,"",2015-11-24T17:43:30,2015-11-24T17:43:30,"","",,2,,,
33939449,2,,33935760,2015-11-26T13:03:22,,5,,"<p>Figured it out after reading <a href=""http://electron.atom.io/docs/v0.35.0/tutorial/using-native-node-modules/"" rel=""noreferrer"">Using Native Node Modules</a>. Basically, after each <code>npm install</code> of a native package, it needs to be rebuilt with Electron headers by issuing <code>.\node_modules\.bin\electron-rebuild.cmd</code>.</p>&#xA;",3074456,"",,"",,2015-11-26T13:03:22,"","",,1,,,
33885138,2,,33866053,2015-11-24T03:52:02,,9,,"<p><a href=""http://electron.atom.io/docs/v0.35.0/api/web-contents/#webcontents-executejavascript-code-usergesture"" rel=""noreferrer"">webContents.executeJavaScript</a> is the method:</p>&#xA;&#xA;<pre><code>myCoolWindow.webContents.executeJavaScript('window.close()');&#xA;</code></pre>&#xA;",5728,"",5728,"",2015-11-27T05:29:15,2015-11-27T05:29:15,"","",,0,,,
24690785,2,,24253357,2014-07-11T05:44:40,,1,,"<p>I had a similar issue with trying to connect to a ClojureScript REPL from non-HTTP contexts, so I wrote a simple REPL server and client that communicates over WebSockets rather than HTTP/iframe messages.</p>&#xA;&#xA;<p><a href=""https://github.com/tomjakubowski/weasel"" rel=""nofollow"">https://github.com/tomjakubowski/weasel</a></p>&#xA;&#xA;<p>I'm not familiar with Node WebKit, but presumably you can connect a REPL from your page this way.</p>&#xA;",692055,"",692055,"",2014-07-11T05:57:27,2014-07-11T05:57:27,"","",,0,,,
24701850,2,,22930115,2014-07-11T15:57:11,,1,,"<p>This seems to be dependant upon the dll/so being a 32 bit version.  I am guessing that is why copying the file from Chrome doesn't work correctly for most people ( my 3 year old phone is the only 32-bit device I have left ).</p>&#xA;&#xA;<p>I keep seeing this link -- &#xA;<a href=""https://github.com/rogerwang/node-webkit/wiki/Support-mp3-and-h264-in-video-and-audio-tag"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/Support-mp3-and-h264-in-video-and-audio-tag</a>&#xA;.. but it is a blank page.  I am guessing it was deleted since the info was likely not current or correct.</p>&#xA;&#xA;<p>This issue thread has links to some rebuilt ffmpegsumo libraries for both Mac and Windows --&#xA;<a href=""https://github.com/rogerwang/node-webkit/issues/1423"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/issues/1423</a></p>&#xA;&#xA;<p>The alternative appears to be rebuilding ffmpegsumo, this thread has some config for doing that -- <a href=""https://github.com/rogerwang/node-webkit/issues/1208"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/issues/1208</a></p>&#xA;&#xA;<p>I am still confused about the licensing on it after you build the library, so that is probably worth some research.  Everything about mpeg4-part10 is copyrighted and heavily patent encumbered.  I think we all need to get smart enough to stop using mp4/h.264.  Before I got this working correctly on node-webkit, it was easier to use ffmpeg to transcode the video to an ogv container using Theora and Vorbis codecs.  At this point it seems like iOS is keeping h.264 alive, when it should probably die the horrible death it has earned.</p>&#xA;",3565153,"",3565153,"",2016-05-06T15:29:34,2016-05-06T15:29:34,"","",,0,,,
24788737,2,,24785913,2014-07-16T19:07:56,,2,,"<blockquote>&#xA;  <p>Func3 require Func2 response and apart of it Func1 (so Func1 is required twice)</p>&#xA;</blockquote>&#xA;&#xA;<p>As it turns out, Node's module loading system does <em>not</em> require Func1 twice in this situation. The process will <a href=""http://nodejs.org/docs/latest/api/modules.html#modules_caching"" rel=""nofollow"">cache</a> Func1's exports and when required a second time, simply returns the original instantce of Func1.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Do I have to redeclare all the variables that every function (independent modules) needs?</p>&#xA;</blockquote>&#xA;&#xA;<p>You don't have to, but it's generally a good idea. This is, by no means, a bad thing, since each module, in fact, <em>should</em> be independent of one another like this; if each module does something different, then it wouldn't make sense to have every function in every module in your project anyway.</p>&#xA;&#xA;<p>Universal loading is technically possible, however. One possible configuration would be to load each module into the global namespace(<code>process</code>), but in the words of <a href=""http://www.yuiblog.com/blog/2006/06/01/global-domination/"" rel=""nofollow"">Douglas Crockford</a>, ""Globals are evil."" The module will be available anywhere in the Node process, even in modules that have nothing to do with yours. In essence, the require pattern that you see everywhere is, in fact, the best way to load dependencies in node.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Ok, modules self-contained wins, but what about this? (i do not even know if this works). [...]</p>&#xA;</blockquote>&#xA;&#xA;<p>I think you mean this?</p>&#xA;&#xA;<pre><code>module.exports = {&#xA;    func1: require(""./functions/func1""),&#xA;    func2: require(""./functions/func2""),&#xA;    func3: require(""./functions/func3""),&#xA;    func4: require(""./functions/func4""),&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is generally a good pattern if you have a module that has a lot of independent submodules to expose to whatever required it; however, it would not be possible to use such a pattern to allow a project-level namespace because Func1 would require mainfunction.js would require Func1, and so on forever. (This is known as a circular dependency.)</p>&#xA;&#xA;<p>In short, don't worry about being repetitive in requiring modules. In the end, the standard pattern is not repetitive, because each module <em>will</em> have different requirements and dependencies, nor will it let a module run more than once, as explained above.</p>&#xA;&#xA;<p>Good luck in your Node.js endeavors!</p>&#xA;",237904,"",,"",,2014-07-16T19:07:56,"","",,1,,,
24586825,2,,24492100,2014-07-05T13:17:56,,3,,"<p>I followed the instructions and couldn't get it to work either. I used TiddlyWiki 5.0.13-beta, Windows 64 bit, node-webkit 0.9.2. It throws an exception that it can't find sjcl.js. sjcl.js is packaged into TiddlyWiki.</p>&#xA;&#xA;<p>I suggest to use TiddlyDesktop instead. It's node-webkit ready-made for TiddlyWiki. It works like a charm for me under Windows. You can get it here:&#xA;<a href=""https://github.com/Jermolene/TiddlyDesktop/releases"" rel=""nofollow"">https://github.com/Jermolene/TiddlyDesktop/releases</a></p>&#xA;&#xA;<p>I suspect the plain node-webkit solution has lost attention, now that there is TiddlyDesktop.</p>&#xA;",2298578,"",2298578,"",2014-07-08T19:16:36,2014-07-08T19:16:36,"","",,2,,,
24782965,2,,24782130,2014-07-16T14:07:35,,6,,"<p>Use the <em>Shell</em> component as follows:</p>&#xA;&#xA;<pre><code>// Load native UI library.&#xA;var gui = require('nw.gui');&#xA;&#xA;// Open URL with default browser.&#xA;gui.Shell.openExternal('https://github.com/rogerwang/node-webkit');&#xA;&#xA;// Open a text file with default viewer.&#xA;gui.Shell.openItem('quote.pdf');&#xA;&#xA;// Open a file in file explorer.&#xA;gui.Shell.showItemInFolder('quote.pdf');&#xA;</code></pre>&#xA;&#xA;<p>Check the corresponding <a href=""https://github.com/rogerwang/node-webkit/wiki/Shell"" rel=""noreferrer"">Node-Webkit reference</a> for more information.</p>&#xA;",3239937,"",,"",,2014-07-16T14:07:35,"","",,0,,,
24671115,2,,24670995,2014-07-10T07:50:01,,7,,"<p>No; only Linux, Mac OS X and Windows are supported by node-webkit.</p>&#xA;",2304242,"",,"",,2014-07-10T07:50:01,"","",,2,,,
24618996,2,,24583204,2014-07-07T20:12:41,,68,,"<p>Electron doesn't seem to use Node.js as a web server but merely as an environment to run background JavaScript code, this code can use node modules to access the system. At the same time Chromium provides a user interface for the app, it displays regular web pages that run usual sandboxed JavaScript. Both are being embedded by the Electron executable, the former directly (Node.js can be built as a static library), the latter via <a href=""https://github.com/brightray/libchromiumcontent"">libchromiumcontent</a>. In a way, Node.js is the controller part of the application whereas Chromium is the view.</p>&#xA;&#xA;<p>Typically, the concept used for web pages here is that of <a href=""http://en.wikipedia.org/wiki/Single-page_application"">single-page applications</a>: a web page represents one application window and as such it stays around as long as this window is visible (often for the entire lifetime of the application). Whenever it needs to display something different it requests data from the background code running in Node.js, just like AJAX applications request data from the server. The page itself is not reloaded, usually JavaScript templating will be used to update contents.</p>&#xA;&#xA;<p>There isn't really a server/client relationship here however, the communication can actually go both ways. Both sides can use the <code>ipc</code> module to send messages to each other (<a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-main.md"">main process</a>, <a href=""https://github.com/atom/electron/blob/master/docs/api/ipc-renderer.md"">renderer</a>). These messages can have any arguments attached to them, these don't need to be encoded explicitly (typically this is implemented by using JSON internally to encode parameters, I didn't verify whether that's the case with Electron). Internally, that message passing is implemented via platform-specific <a href=""http://en.wikipedia.org/wiki/Inter-process_communication"">IPC</a> mechanisms, using <a href=""https://github.com/joyent/libuv"">libuv</a> to be exact.</p>&#xA;",785541,"",785541,"",2016-07-01T12:46:42,2016-07-01T12:46:42,"","",,1,,,
58888521,2,,58877932,2019-11-16T07:25:58,,4,,"<p>To solve this I created a "".npmrc"" file in the project root directory and added: </p>&#xA;&#xA;<pre><code>arch=armv7l&#xA;</code></pre>&#xA;&#xA;<p>You can get arch from: </p>&#xA;&#xA;<pre><code>uname -m&#xA;</code></pre>&#xA;",8229894,"",,"",,2019-11-16T07:25:58,"","",,0,,,
58927874,2,,58794301,2019-11-19T06:27:23,,0,,"<p>Chromium seems to have updated its code for macOS 10.15.&#xA;You can find the updated code here.&#xA;<a href=""https://github.com/chromium/chromium/commit/961e7821b9356445f48e5ce2c077c40c2c6b2309"" rel=""nofollow noreferrer"">https://github.com/chromium/chromium/commit/961e7821b9356445f48e5ce2c077c40c2c6b2309</a></p>&#xA;",11421256,"",,"",,2019-11-19T06:27:23,"","",,0,,,
58935441,2,,58918027,2019-11-19T13:41:26,,0,,"<p>The was with Squirrel.</p>&#xA;&#xA;<p>My agent is running with NT AUTHORITY\System user which does not have permission to create the SquirrelTemp folder in %appdata%. When it try to create de folder in current folder it throws the error because it does not find the SquirrelTemp folder.</p>&#xA;&#xA;<p>The solution I have found was to set a environment variable SQUIRREL_TEMP in the build pipeline with the value to %currentfolder%\SquirrelTemp and it works.</p>&#xA;&#xA;<p>Thanks to <a href=""https://github.com/Squirrel/Squirrel.Windows/issues/1081#issuecomment-340958128"" rel=""nofollow noreferrer"">https://github.com/Squirrel/Squirrel.Windows/issues/1081#issuecomment-340958128</a></p>&#xA;",6178647,"",,"",,2019-11-19T13:41:26,"","",,0,,,
58986728,2,,58975598,2019-11-22T02:45:33,,2,,"<p>The problem is this code:</p>&#xA;&#xA;<pre><code>ipcMain.on('JSON_PAGE:Ready', function(event, arg) {&#xA;      jsonWin.webContents.send('JSON:Display', item);&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Every time you create a new window, you are having <code>ipcMain</code> subscribe to the same message. This means that when <code>ipcMain</code> gets the <code>'JSON_PAGE:Ready'</code> message, it calls every single callback it has registered and sends a message to every single window.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>The simplest solution in this case is to use the event that's passed to the <code>ipcMain</code> handler to send the message to the renderer that sent it to main. Second, subscribe a single time outside of <code>createJSONWindow</code>:</p>&#xA;&#xA;<pre><code>ipcMain.on('JSON_PAGE:Ready', function(event, arg) {&#xA;      e.sender.send('JSON:Display', item);&#xA;});&#xA;function createJSONWindow() { ... }&#xA;</code></pre>&#xA;&#xA;<p>However, is <code>'JSON:Display'</code> simply sent when the page has loaded? If so, you can subscribe the window's webContents to the <a href=""https://electronjs.org/docs/api/web-contents#event-did-finish-load"" rel=""nofollow noreferrer""><code>did-finish-load</code></a> event which fires when the page has loaded.</p>&#xA;&#xA;<pre><code>jsonWin.webContents.on(""did-finish-load"", () =&gt; {&#xA;    jsonWin.webContents.send(...);&#xA;});&#xA;</code></pre>&#xA;",3479456,"",,"",,2019-11-22T02:45:33,"","",,0,,,
59021292,2,,59021193,2019-11-24T19:00:39,,2,,"<p>Although <code>.On(...)</code> takes an <code>Action&lt;object&gt;</code>, when there are multiple arguments you can cast the <code>object</code> to <code>List&lt;object&gt;</code>, that would fix your syntax issue:</p>&#xA;&#xA;<pre><code>Electron.IpcMain.On(""btn-submit"", async (args) =&gt;&#xA;                {&#xA;                    var listArgs = (List&lt;object&gt;)args;&#xA;                    MessageBoxOptions options = new MessageBoxOptions(String.Format(""UID: {0} PW:{1}"",listArgs[0],listArgs[1]))&#xA;                    {&#xA;                        Type = MessageBoxType.info,&#xA;                        Title = ""Information"",&#xA;                        Buttons = new string[] { ""Yes"", ""No"" }&#xA;                    };&#xA;&#xA;                    var result = await Electron.Dialog.ShowMessageBoxAsync(options);&#xA;                });&#xA;</code></pre>&#xA;",2225808,"",,"",,2019-11-24T19:00:39,"","",,0,,,
59043833,2,,58926344,2019-11-26T04:38:26,,0,,"<p>I came up with an answer. Instead of trying to intercept the click, I added an env var in the main app such that when set, the click will put an entry into the log instead of actually opening the external link in a browser. Then I use the API in <code>spectron</code> to slurp up the render process logs: <a href=""https://github.com/electron-userland/spectron#clientgetrenderprocesslogs"" rel=""nofollow noreferrer"">https://github.com/electron-userland/spectron#clientgetrenderprocesslogs</a>&#xA;Then I can just look for a custom string in the logs and I can judge the proper text is present.</p>&#xA;",2933397,"",,"",,2019-11-26T04:38:26,"","",,0,,,
59072339,2,,59072194,2019-11-27T14:26:00,,1,,"<p>Your <code>main.js</code> is executed line-by-line, so if you look at it, you have <code>const test = require('./windows/tests');</code> appearing <em>before</em> the <code>sharedThing</code> global is set. This means all of the code in <code>windows/tests/index.js</code> is executed at that point, before <code>global.sharedThing</code> has been assigned a value, so when you try to access it it's still undefined.</p>&#xA;&#xA;<p>To fix it, simply move your <code>global.sharedThing = ...</code> declaration before require statements for files that depend on it. Alternatively, move the code using <code>global.sharedThing</code> into the create function where you know it'll be valid.</p>&#xA;",12270289,"",,"",,2019-11-27T14:26:00,"","",,0,,,
59075665,2,,59074781,2019-11-27T17:36:56,,0,,"<p>The problem was that my Mac was connected to both WiFi and ethernet at the same time (<code>en0</code>, <code>en8</code>, and <code>en9</code> were all in use). <code>RCTBundleURLProvider</code> was taking the <code>en0</code> as default one and it was causing some weird redirections.</p>&#xA;&#xA;<p>I guess React Native does not support multiple network interfaces yet, so I ended up modifying <code>AppDelegate.m</code> with the correct IP. The problem with this approach is that the IP changes:</p>&#xA;&#xA;<pre><code>#ifdef DEBUG&#xA;jsCodeLocation = [NSURL URLWithString:@""http://&lt;en8-IP-address&gt;:8081/index.bundle?platform=ios""];&#xA;#else&#xA;jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@""index.ios"" fallbackResource:nil];&#xA;#endif&#xA;</code></pre>&#xA;&#xA;<p>A better alternative would be to fix it in the packager itself inside <code>react-native-xcode.sh</code>:</p>&#xA;&#xA;<pre><code># Enables iOS devices to get the IP address of the machine running Metro Bundler&#xA;if [[ ""$CONFIGURATION"" = *Debug* &amp;&amp; ! ""$PLATFORM_NAME"" == *simulator ]]; then&#xA;  IP=$(ifconfig | grep 'inet ' | grep -v ' 127.' | cut -d\   -f2  | grep '169.254.')&#xA;&#xA;  echo ""$IP"" &gt; ""$DEST/ip.txt""&#xA;fi&#xA;</code></pre>&#xA;",5185570,"",5185570,"",2019-11-28T13:12:17,2019-11-28T13:12:17,"","",,0,,,
58921747,2,,58789535,2019-11-18T19:38:11,,1,,"<p><strong>Have you tried sending key-codes themselves using the key-down and key-up events?</strong></p>&#xA;&#xA;<p>To do this using node-key-sender it looks like you can use the <strong><em>batchTypeKey</em></strong> methods (there might be other methods that take the event type too, I'm not sure)</p>&#xA;&#xA;<p>Sending text using node-key-sender will send key-codes that are dependent on the caller's keyboard layout configuration, which can be set manually in node-key-sender.</p>&#xA;&#xA;<p>The interpretation of keyboard events can vary depending on the keyboard, its driver, and the OS, so you need to know what exactly your application expects.</p>&#xA;&#xA;<p>Take a look at this <a href=""https://www.w3.org/2002/09/tests/keys.html"" rel=""nofollow noreferrer"">w3 key press tool</a> and play around with it yourself and see if your sending the correct key-event/key-code combinations.</p>&#xA;&#xA;<p>On my Mac, using the above tool, the left command key is shown as generating a key-down event with key-code 91 and metadata set to true followed by a key-up event with key-code 91. In contrast, the opening bracket key is shown as generating a key-down, followed by a key-press, followed by a key-up using key-code 91 for the key press event and key-code 219 for the key down/up events. (Note: My guess is that only the key down/up events are coming from the keyboard and that Safari itself is generating the key-press event in-between the key-down and key-up events, but I'm not 100% on that)</p>&#xA;&#xA;<p>In reply to my comment, you can test to see if travis-ci is affected by this mapping change, if so switching the control/command key on Macs is common enough that I would suspect there is a travis-ci setting to indicate this switch. If it works, the change would eliminate the need for system dependent code when sending the control key in your tests.</p>&#xA;&#xA;<p>Personally I'd rather abstract sending a control-key and make it context and system aware than re-map the command key in my Mac OS, reason being if you have other applications that interact with the Mac OS (travis-ci for example) then you don't have to worry about the mapping change affecting them.</p>&#xA;&#xA;<p><a href=""https://unixpapa.com/js/key.html"" rel=""nofollow noreferrer"">More reading on javascript key events</a></p>&#xA;",2252950,"",,"",,2019-11-18T19:38:11,"","",,1,,,
58933539,2,,58894709,2019-11-19T11:54:49,,3,,"<p>TestCafe will show a list of URLs opened during the app initialization time if it fails to find the main window URL. You can specify an empty string as a value of <code>mainWindowUrl</code>, wait until TestCafe shows an error and use links from the displayed list.  </p>&#xA;",5114901,"",,"",,2019-11-19T11:54:49,"","",,1,,,
58943066,2,,58858533,2019-11-19T21:27:02,,1,,"<p>Here is an example:</p>&#xA;&#xA;<p><a href=""https://medium.com/@shivekkhurana/persist-data-in-electron-apps-using-nedb-5fa35500149a"" rel=""nofollow noreferrer"">https://medium.com/@shivekkhurana/persist-data-in-electron-apps-using-nedb-5fa35500149a</a></p>&#xA;&#xA;<p>Here is a code sample:</p>&#xA;&#xA;<pre><code>// create a file named main/src/db.js&#xA;const {app} = require('electron');&#xA;const Datastore = require('nedb-promises');&#xA;const dbFactory = (fileName) =&gt; Datastore.create({&#xA; filename: `${process.env.NODE_ENV === 'dev' ? '.' : &#xA; app.getAppPath('userData')}/data/${fileName}`, &#xA; timestampData: true,&#xA; autoload: true&#xA;});&#xA;</code></pre>&#xA;",11242070,"",,"",,2019-11-19T21:27:02,"","",,1,,,
59018042,2,,59016328,2019-11-24T13:17:12,,24,,"<p>npm has a <code>ignore-scripts</code> configuration key. It's expected value is a Boolean and it's set to <code>false</code> by default.</p>&#xA;&#xA;<p>Perhaps it has inadvertently been set to <code>true</code>. </p>&#xA;&#xA;<p>To <code>get</code>/<code>set</code> the <code>ignore-scripts</code> configuration you can utilize the <a href=""https://docs.npmjs.com/cli/config"" rel=""noreferrer"">npm-config</a> command:</p>&#xA;&#xA;<ol>&#xA;<li><p>Check its current setting by running:</p>&#xA;&#xA;<pre class=""lang-none prettyprint-override""><code>npm config get ignore-scripts&#xA;</code></pre></li>&#xA;<li><p>If the aforementioned command returns <code>true</code> then reset it to <code>false</code> by running:</p>&#xA;&#xA;<pre class=""lang-none prettyprint-override""><code>npm config set ignore-scripts false&#xA;</code></pre></li>&#xA;</ol>&#xA;",1611459,"",,"",,2019-11-24T13:17:12,"","",,1,,,
59073499,2,,59052019,2019-11-27T15:26:40,,1,,"<p>Never did build Electron app before so it took me some time to dig deep enough but I think I got it! :)</p>&#xA;&#xA;<p>Every electron app have at least 2 process - main (responsible for opening browser window) and renderer (where your Vue app runs). If you use <code>console.log</code> in your code, where the output shows <a href=""https://stackoverflow.com/questions/31759367/using-console-log-in-electron-app"">depends on which process called it</a> - <code>console.log</code> called from main process shows up <strong>only</strong> in the terminal window (used to start the app in dev mode), <code>console.log</code> called from renderer process shows up <strong>only</strong> in Dev Tools.</p>&#xA;&#xA;<p>But logs from your mutations appear in both! Which means the code must be running in both processes, right ? But how?</p>&#xA;&#xA;<p>Well it seems, <a href=""https://github.com/SimulatedGREG/electron-vue"" rel=""nofollow noreferrer"">electron-vue</a> template has an option (you had to switch on when setting up the project) to use <a href=""https://github.com/vue-electron/vuex-electron"" rel=""nofollow noreferrer"">vuex-electron</a>, particularly it's <code>createSharedMutations</code> plugin. It can be used to share same Vuex store between main process and all renderer processes (technically each process have its own store but state is synced). It works something like this:</p>&#xA;&#xA;<ol>&#xA;<li>You fire your action (in renderer process)</li>&#xA;<li>Action is canceled in renderer process (that's why you'll not see any logs from actions in Dev Tools) and notifies the main process to execute the action instead. </li>&#xA;<li>Now if that action (running in main) commits a mutation, mutation code is executed in the main process (the 1st screenshot with logs from Terminal - id is empty) and then payload (now with newly generated <code>id</code> A) is serialized into JSON (<a href=""https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendchannel-args"" rel=""nofollow noreferrer"">see ipc-renderer</a>) and passed to each renderer processes to execute same mutation (hence keeping all stores in sync). Here your mutation is executed 2nd time (2nd screenshot with logs from DevTools) - <code>item</code> has <code>id</code> already assigned (A) but it's not in the list of items so your code assigns new <code>id</code> (B) and push it into collection.</li>&#xA;<li><code>id</code> B is rendered on screen</li>&#xA;<li>Now if you start editing and call action to save, everything described in point 3. will happen again but now mutation executing in main process sees item with <code>id</code> B which is not in its collection of items. So it assigns new <code>id</code> (C overwriting B) so mutation executing in renderer process again sees item with <code>id</code> C which is not in collection....and so on</li>&#xA;</ol>&#xA;&#xA;<p>Solution is obviously to disable <code>createSharedMutations</code> plugin in your store config (should be in <code>/renderer/store/index.js</code>). If you really need store synchronised across main process/renderer processes, you need to rewrite your mutations...</p>&#xA;",381282,"",,"",,2019-11-27T15:26:40,"","",,1,,,
58940946,2,,58940843,2019-11-19T18:48:52,,1,,"<p>It's my solution for your problem. I hope it will help you :) &#xA;<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const container = document.querySelector(""#container"");&#xD;&#xA;newDiv = document.createElement(""div"");&#xD;&#xA;newDiv.textContent = ""Hello"";&#xD;&#xA;newDiv.setAttribute(""id"", ""red"");&#xD;&#xA;container.appendChild(newDiv);</code></pre>&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>#red{&#xD;&#xA;  background:red;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""container""&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",12225354,"",8334663,"",2019-11-19T19:56:56,2019-11-19T19:56:56,"","",,2,,,
58960820,2,,58957967,2019-11-20T18:09:05,,0,,<pre><code>mainWindow.loadURL('file://' + __dirname + '/dist/index.html#/update');&#xA;</code></pre>&#xA;&#xA;<p>this way I managed to solve the problem</p>&#xA;,12063296,"",,"",,2019-11-20T18:09:05,"","",,2,,,
59015921,2,,58980943,2019-11-24T08:31:36,,0,,"<p>@snwflk found the answer in the comments. It's because the hevc codec is not supported in Chrome: <a href=""https://caniuse.com/#feat=hevc"" rel=""nofollow noreferrer"">https://caniuse.com/#feat=hevc</a></p>&#xA;&#xA;<p>Edge apparently supports it by offloading the video decoding to the hardware: <a href=""https://stackoverflow.com/questions/36382568/h-265-hevc-web-browser-support"">H.265/HEVC web browser support</a></p>&#xA;&#xA;<p>Maybe Electron can be compiled in a way that Chromium supports it? <a href=""https://stackoverflow.com/a/39319614/3362074"">https://stackoverflow.com/a/39319614/3362074</a></p>&#xA;",3362074,"",,"",,2019-11-24T08:31:36,"","",,2,,,
59020084,2,,59019091,2019-11-24T16:51:13,,0,,"<p>I don't use that npm package but I'll share what I do – (no idea if it is right or wrong but it works. I use it to run <code>electron-reload</code> during development).</p>&#xA;&#xA;<p><em>package.json</em> – set an env var in my 'start' script</p>&#xA;&#xA;<pre><code>  ""scripts"": {&#xA;    ""start"": ""APP_DEV=true electron .""&#xA;   }&#xA;</code></pre>&#xA;&#xA;<p><em>main.js</em> - check for the env var in ""main.js""</p>&#xA;&#xA;<pre><code>var isDev = process.env.APP_DEV ? (process.env.APP_DEV.trim() == ""true"") : false;&#xA;</code></pre>&#xA;&#xA;<p>use it</p>&#xA;&#xA;<pre><code>if (isDev) {&#xA;    require('electron-reload')(__dirname, {&#xA;        electron: upath.toUnix(upath.join(__dirname, 'node_modules', '.bin', 'electron'))&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",840992,"",,"",,2019-11-24T16:51:13,"","",,3,,,
59057979,2,,59057187,2019-11-26T19:17:12,,2,,"<p>Presuming you are using the <a href=""https://github.com/electron/electron-packager"" rel=""nofollow noreferrer"">Electron Packager</a> command line tool to package your application, please refer to its <a href=""https://github.com/electron/electron-packager/blob/master/docs/api.md"" rel=""nofollow noreferrer"">API Documentation</a> page to learn about all the available options:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>buildVersion</strong></p>&#xA;  &#xA;  <p>String</p>&#xA;  &#xA;  <p>The build version of the application. Defaults to the value of&#xA;  appVersion. Maps to the <code>FileVersion</code> metadata property on Windows, and&#xA;  <code>CFBundleVersion</code> on macOS.</p>&#xA;  &#xA;  <p><strong>appVersion</strong></p>&#xA;  &#xA;  <p>String</p>&#xA;  &#xA;  <p>The release version of the application. By default the <code>version</code>&#xA;  property in the <code>package.json</code> is used but it can be overridden with&#xA;  this argument. If neither are provided, the version of Electron will&#xA;  be used. Maps to the <code>ProductVersion</code> metadata property on Windows, and&#xA;  <code>CFBundleShortVersionString</code> on macOS.</p>&#xA;  &#xA;  <p><strong>appCopyright</strong></p>&#xA;  &#xA;  <p>String</p>&#xA;  &#xA;  <p>The human-readable copyright line for the app. Maps to the&#xA;  <code>LegalCopyright</code> metadata property on Windows, and&#xA;  <code>NSHumanReadableCopyright</code> on macOS.</p>&#xA;</blockquote>&#xA;&#xA;<p>To achieve what you're asking for, you can for instance add the following options to the relevant <code>electron-packager</code> command in your <code>package.json</code> file:</p>&#xA;&#xA;<ul>&#xA;<li><code>--buildVersion='Build 42'</code></li>&#xA;<li><code>--appVersion='Version 3.14'</code></li>&#xA;<li><code>--appCopyright='My Own Private Copyright'</code></li>&#xA;</ul>&#xA;",12440454,"",,"",,2019-11-26T19:17:12,"","",,3,,,
59003346,2,,58999698,2019-11-23T00:07:19,,0,,"<p>I don't think you can programitically start an application on bootup in Linux </p>&#xA;&#xA;<p>Alternate way would be to </p>&#xA;&#xA;<ol>&#xA;<li><p>To add a start-up script which would start the app when you login </p></li>&#xA;<li><p>Create a systemd service file which would start the application during bootup </p></li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://www.tecmint.com/auto-execute-linux-scripts-during-reboot-or-startup/amp/"" rel=""nofollow noreferrer"">https://www.tecmint.com/auto-execute-linux-scripts-during-reboot-or-startup/amp/</a></p>&#xA;&#xA;<p>this site provides example to creating a script (<a href=""https://developer.toradex.com/knowledge-base/how-to-autorun-application-at-the-start-up-in-linux#LXSession_Autostart_File"" rel=""nofollow noreferrer"">https://developer.toradex.com/knowledge-base/how-to-autorun-application-at-the-start-up-in-linux#LXSession_Autostart_File</a>&#xA;)</p>&#xA;&#xA;<p>this site provides example to creating a file in electron (<a href=""https://ourcodeworld.com/articles/read/106/how-to-choose-read-save-delete-or-create-a-file-with-electron-framework"" rel=""nofollow noreferrer"">https://ourcodeworld.com/articles/read/106/how-to-choose-read-save-delete-or-create-a-file-with-electron-framework</a>)</p>&#xA;&#xA;<p>You could manually create a file through your electron app for the first time installation and then write the script contents to the file </p>&#xA;&#xA;<p>like </p>&#xA;&#xA;<p>file.create( /etc/xdg/autostart/.desktop)</p>&#xA;&#xA;<p>file.write(""[Desktop Entry]</p>&#xA;&#xA;<p>Name=LXTerminal</p>&#xA;&#xA;<p>Type=Application</p>&#xA;&#xA;<p>Exec=lxterminal</p>&#xA;&#xA;<p>Terminal=false&#xA;"")</p>&#xA;&#xA;<p>or you could just use the <a href=""https://www.npmjs.com/package/auto-launch"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/auto-launch</a> </p>&#xA;&#xA;<p>if your still having problems then you could go through the auto-launch module and implement the auto start part in your code</p>&#xA;",8627962,"",8627962,"",2019-11-23T08:18:58,2019-11-23T08:18:58,"","",,14,,,
59900043,2,,59862879,2020-01-24T16:08:12,,0,,<p>Managed to do it using request and tough-cookie-filestore to persist data</p>&#xA;&#xA;<pre><code>var request = require('request')&#xA;const FileCookieStore = require('tough-cookie-filestore');&#xA;// NOTE - currently the 'cookies.json' file must already exist!&#xA;const j = request.jar(new FileCookieStore('./cookie.json'));&#xA;request = request.defaults({ jar : j })&#xA;</code></pre>&#xA;,2435421,"",,"",,2020-01-24T16:08:12,"","",,0,,,
59912116,2,,59898513,2020-01-25T18:15:47,,0,,"<p>From my comment, the answer ended up being to use <code>window.require</code> to prevent it getting confused between Electoron's require and Browserify's require.</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/7300"" rel=""nofollow noreferrer"">Source</a></p>&#xA;",6134518,"",,"",,2020-01-25T18:15:47,"","",,0,,,
59923055,2,,59916457,2020-01-26T21:49:04,,2,,"<p>You should checkout  <a href=""https://www.npmjs.com/package/node-downloader-helper"" rel=""nofollow noreferrer"">Node Download Helper</a> </p>&#xA;&#xA;<p>It's a node library that has an easy API for pausing and resuming downloads, rather than building your own from scratch.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/HPGat.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HPGat.png"" alt=""Here are some of its methods""></a></p>&#xA;",6012145,"",,"",,2020-01-26T21:49:04,"","",,0,,,
59926517,2,,59757851,2020-01-27T07:12:08,,0,,"<p>Ok. I found out. If anyone stumbles into the same Problem: It needs to be opened with <code>-W</code>Parameter. So</p>&#xA;&#xA;<pre><code>cp.exec('open -a Keynote \""'+pathToFile+'\""' +' -W')&#xA;</code></pre>&#xA;&#xA;<p>does the trick.</p>&#xA;",7356942,"",,"",,2020-01-27T07:12:08,"","",,0,,,
59948211,2,,59732072,2020-01-28T11:54:05,,0,,"<p>For those who could have the same issue as me, I fixed it. In fact it had nothing to do with the code, just the company antivirus which was putting my app in quarantine everytime I was starting it. Whitelisted it,n and everything worked for copy and paste. Just sad I didn't figured it out earlier </p>&#xA;",12710206,"",,"",,2020-01-28T11:54:05,"","",,0,,,
59948910,2,,59923067,2020-01-28T12:34:49,,1,,"<p>You can have very simple modules that simply export one menu template object each:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// menuTemplates/menu1.js&#xA;&#xA;module.exports = {&#xA;    label: ""Menu"",&#xA;    submenu: [&#xA;        // menu template ..&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And then you can build the menu as you know it:</p>&#xA;&#xA;<pre><code>const menu1_template = require(""menuTemplates/menu1.js"");&#xA;const menu1 = Menu.buildFromTemplate(menu1_template);&#xA;</code></pre>&#xA;",1335237,"",,"",,2020-01-28T12:34:49,"","",,0,,,
59956833,2,,59889375,2020-01-28T20:50:50,,0,,<p><strong>vue.config.js</strong> requires the use of module.exports</p>&#xA;&#xA;<pre><code>module.exports = {&#xA;  chainWebpack: config =&gt; {&#xA;    config.module&#xA;      .rule('node')&#xA;      .test(/\.node$/)&#xA;      .use('node-loader')&#xA;      .loader('node-loader')&#xA;      .end();&#xA;  }&#xA;}&#xA;</code></pre>&#xA;,4422596,"",,"",,2020-01-28T20:50:50,"","",,0,,,
59963026,2,,59957736,2020-01-29T08:22:41,,1,,"<blockquote>&#xA;  <p>How can I get the apt-get commands to run inside the Azure Pipelines?</p>&#xA;</blockquote>&#xA;&#xA;<p>It seems this is related to the docker images. As we know, Docker images typically do not have <code>sudo</code>, we are always runs as <code>root</code> by default.  In this case, we could use the command <code>apt-get</code> directly.</p>&#xA;&#xA;<p>But this image seems runs as non-root, so for root-access things you have to switch into root. In a <code>Dockerfile</code>, you can simply switch user identities with a USER directive; this generally defaults to running as root:</p>&#xA;&#xA;<pre><code>USER root&#xA;</code></pre>&#xA;&#xA;<p>To resolve this issue, you may need to custom your docker image based on the <code>image: electronuserland/builder:wine-03.18</code>.</p>&#xA;&#xA;<p>You could try to check <a href=""https://github.com/WASdev/ci.docker/issues/194"" rel=""nofollow noreferrer"">this thread</a> for some more details.</p>&#xA;&#xA;<p>Hope this helps.</p>&#xA;",7460777,"",,"",,2020-01-29T08:22:41,"","",,0,,,
59976760,2,,59976706,2020-01-29T22:51:00,,2,,"<p>The problem is most likely a simple typo:</p>&#xA;&#xA;<pre><code>MainWindow = new BrowserWindow({&#xA;    webPreferences: {&#xA;        nodeIntegration: true, // Note spelling!&#xA;        preload: path.join(app.getAppPath(), 'preload.js')&#xA;    }&#xA;});&#xA;</code></pre>&#xA;",1284760,"",,"",,2020-01-29T22:51:00,"","",,0,,,
59997127,2,,55349578,2020-01-31T02:26:38,,0,,"<p>The solution I came up with is by using an environmental variable. First have the variable set as <code>localhost:3000</code> or whatever your server's local address is. I would use <code>electron-store</code> to keep a <code>config.json</code> file of all my settings including the server IP. Before my server starts up, I read the config file and change the server address set previously. Then I use it as follows:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import Vue from 'vue'&#xA;import io from 'socket.io-client'&#xA;import VueSocketIO from 'vue-socket.io-extended'&#xA;&#xA;export default ({ app, store }) =&gt; {&#xA;  Vue.use(VueSocketIO, io(app.$env.WS_URL), { store })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>NOTE</strong>: <code>WS_URL</code> is the environmental variable name.</p>&#xA;",2895672,"",,"",,2020-01-31T02:26:38,"","",,0,,,
60055165,2,,60053956,2020-02-04T10:16:26,,2,,"<p>The issue is that you're trying to mix the ES5 <code>require</code> statement with the ES6 syntax for <code>export</code>. The two are incompatible. You either have to use one or the other.</p>&#xA;&#xA;<p>Assuming your ES6 implementation with <code>babel</code> works fine, you should use the <code>import</code> statement like this:</p>&#xA;&#xA;<pre><code>// exporting like you are at the moment (called a named export):&#xA;export const executeCommandWithOutput = (command) =&gt;{&#xA;    ...&#xA;}&#xA;&#xA;// importing like so:&#xA;import { executeCommandWithOutput } from './renderer/command-executor';&#xA;</code></pre>&#xA;&#xA;<p>But if you're using <code>require</code> in <code>public/main.js</code>, your <code>export</code> statement should look something like this:</p>&#xA;&#xA;<pre><code>exports.executeCommandWithOutput = executeCommandWithOutput&#xA;</code></pre>&#xA;&#xA;<p>and your <code>require</code> will remain the same.</p>&#xA;&#xA;<p>Here's an article to help you get a better understanding of what's happening, how the <code>export</code> functionality works in ES5 and what you can achieve with it: <br/><a href=""https://www.sitepoint.com/understanding-module-exports-exports-node-js/"" rel=""nofollow noreferrer"">https://www.sitepoint.com/understanding-module-exports-exports-node-js/</a></p>&#xA;&#xA;<p>Likewise with the ES6 syntax: <br/>&#xA;<a href=""https://alligator.io/js/modules-es6/"" rel=""nofollow noreferrer"">https://alligator.io/js/modules-es6/</a></p>&#xA;",8422218,"",,"",,2020-02-04T10:16:26,"","",,0,,,
60081039,2,,60080376,2020-02-05T17:23:15,,0,,"<p>So setting the property does not work but using the older method <code>setAutoHideMenuBar</code> does – though the <a href=""https://www.electronjs.org/docs/api/browser-window#winsetautohidemenubarhide"" rel=""nofollow noreferrer"">docs</a> state that that is <a href=""https://www.electronjs.org/docs/api/modernization/property-updates#converted-properties"" rel=""nofollow noreferrer"">deprecated</a>. Seems like a bug.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The Electron team is currently undergoing an initiative to convert&#xA;  separate getter and setter functions in Electron to bespoke properties&#xA;  with get and set functionality. During this transition period, both&#xA;  the new properties and old getters and setters of these functions will&#xA;  work correctly and be documented.</p>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>win.setAutoHideMenuBar(hide)</p>&#xA;&#xA;<pre><code>hide Boolean&#xA;</code></pre>&#xA;  &#xA;  <p>Sets whether the window menu bar should hide itself automatically.&#xA;  Once set the menu bar will only show when users press the single Alt&#xA;  key.</p>&#xA;  &#xA;  <p>If the menu bar is already visible, calling setAutoHideMenuBar(true)&#xA;  won't hide it immediately.</p>&#xA;  &#xA;  <p>Deprecated</p>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code>if (mainWindow.isFullScreen()) {&#xA;    // coming out of FS&#xA;    // mainWindow.autohideMenuBar = false&#xA;    mainWindow.setAutoHideMenuBar(false);&#xA;    mainWindow.setMenuBarVisibility(true);&#xA;    mainWindow.setFullScreen(false);&#xA;} else {&#xA;    // mainWindow.autohideMenuBar = true&#xA;    mainWindow.setAutoHideMenuBar(true);&#xA;    mainWindow.setMenuBarVisibility(false);&#xA;    mainWindow.setFullScreen(true);&#xA;}&#xA;</code></pre>&#xA;",840992,"",840992,"",2020-02-08T20:48:01,2020-02-08T20:48:01,"","",,0,,,
59905017,2,,59904754,2020-01-24T23:40:09,,1,,"<p>Based on documentation, you can open links on OS default browser with code below</p>&#xA;&#xA;<pre><code>const { shell } = require('electron')&#xA;shell.openExternal('https://github.com')&#xA;</code></pre>&#xA;&#xA;<p>Read for further information:</p>&#xA;&#xA;<blockquote>&#xA;  <p><a href=""https://www.electronjs.org/docs/api/shell#shellopenexternalurl-options"" rel=""nofollow noreferrer"">https://www.electronjs.org/docs/api/shell#shellopenexternalurl-options</a></p>&#xA;</blockquote>&#xA;",5061290,"",,"",,2020-01-24T23:40:09,"","",,1,,,
59912176,2,,59911352,2020-01-25T18:21:55,,2,,"<p>Consider utilizing <a href=""https://www.npmjs.com/package/concurrently"" rel=""nofollow noreferrer"">concurrently</a>.</p>&#xA;&#xA;<ol>&#xA;<li><p><code>cd</code> to your project directory and run the following command to install it:</p>&#xA;&#xA;<pre class=""lang-none prettyprint-override""><code>npm i -D concurrently&#xA;</code></pre></li>&#xA;<li><p>Then redefine the <code>both</code> script in the <code>scripts</code> section of your <em>package.json</em> as follows:</p>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>""both"": ""concurrently \""npm start\"" \""npm run electron\""""&#xA;</code></pre>&#xA;&#xA;<p>or the slightly shortened equivalent:</p>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>""both"": ""concurrently \""npm:start\"" \""npm:electron\""""&#xA;</code></pre></li>&#xA;</ol>&#xA;",1611459,"",1611459,"",2020-01-25T18:30:14,2020-01-25T18:30:14,"","",,1,,,
59934817,2,,59934084,2020-01-27T16:07:43,,1,,"<p>Here is the unit test solution:</p>&#xA;&#xA;<p><code>index.jsx</code>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import React, { Component } from 'react';&#xA;const { ipcRenderer } = require('electron');&#xA;&#xA;class SomeComponent extends Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = { data: '', status: false };&#xA;  }&#xA;  handleFormSubmit = () =&gt; {&#xA;    const ethData = this.state.data;&#xA;    const value = 'value';&#xA;    ipcRenderer.on('asynchronous-reply', (event, arg) =&gt; {&#xA;      if (arg === 'success') {&#xA;        this.setState({ status: true });&#xA;      }&#xA;    });&#xA;    ipcRenderer.send('update', value);&#xA;  };&#xA;  render() {&#xA;    return &lt;form onSubmit={this.handleFormSubmit}&gt;&lt;/form&gt;;&#xA;  }&#xA;}&#xA;&#xA;export default SomeComponent;&#xA;</code></pre>&#xA;&#xA;<p><code>index.test.jsx</code>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import { shallow } from 'enzyme';&#xA;import React from 'react';&#xA;import SomeComponent from '.';&#xA;const { ipcRenderer } = require('electron');&#xA;&#xA;jest.mock(&#xA;  'electron',&#xA;  () =&gt; {&#xA;    const mElectron = { ipcRenderer: { on: jest.fn(), send: jest.fn() } };&#xA;    return mElectron;&#xA;  },&#xA;  { virtual: true },&#xA;);&#xA;&#xA;describe('59934084', () =&gt; {&#xA;  let wrapper;&#xA;  beforeEach(() =&gt; {&#xA;    wrapper = shallow(&lt;SomeComponent&gt;&lt;/SomeComponent&gt;);&#xA;  });&#xA;  it('should render', () =&gt; {&#xA;    expect(wrapper.exists).toBeTruthy();&#xA;  });&#xA;&#xA;  it('should handle submit, set status to true', () =&gt; {&#xA;    ipcRenderer.on.mockImplementationOnce((event, callback) =&gt; {&#xA;      callback(event, 'success');&#xA;    });&#xA;    wrapper.find('form').simulate('submit');&#xA;    expect(wrapper.state('status')).toBeTruthy();&#xA;    expect(ipcRenderer.on).toBeCalledWith('asynchronous-reply', expect.any(Function));&#xA;    expect(ipcRenderer.send).toBeCalledWith('update', 'value');&#xA;  });&#xA;  it('should handle submit without setting status to true', () =&gt; {&#xA;    ipcRenderer.on.mockImplementationOnce((event, callback) =&gt; {&#xA;      callback(event, 'failure');&#xA;    });&#xA;    wrapper.find('form').simulate('submit');&#xA;    expect(wrapper.state('status')).toBeFalsy();&#xA;    expect(ipcRenderer.on).toBeCalledWith('asynchronous-reply', expect.any(Function));&#xA;    expect(ipcRenderer.send).toBeCalledWith('update', 'value');&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Unit test results with 100% coverage:</p>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code> PASS  src/stackoverflow/59934084/index.test.jsx (14.089s)&#xA;  59934084&#xA;    ✓ should render (22ms)&#xA;    ✓ should handle submit, set status to true (14ms)&#xA;    ✓ should handle submit without setting status to true (4ms)&#xA;&#xA;-----------|----------|----------|----------|----------|-------------------|&#xA;File       |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |&#xA;-----------|----------|----------|----------|----------|-------------------|&#xA;All files  |      100 |      100 |      100 |      100 |                   |&#xA; index.jsx |      100 |      100 |      100 |      100 |                   |&#xA;-----------|----------|----------|----------|----------|-------------------|&#xA;Test Suites: 1 passed, 1 total&#xA;Tests:       3 passed, 3 total&#xA;Snapshots:   0 total&#xA;Time:        16.114s, estimated 19s&#xA;</code></pre>&#xA;&#xA;<p>You don't need to pass <code>{ virtual: true }</code> options to <code>jest.mock()</code> method if you installed the <code>electron</code> node module. Just remove it. The reason I use this option is I don't install the <code>electron</code> node module and make an example for you.</p>&#xA;&#xA;<p>Source code: <a href=""https://github.com/mrdulin/jest-codelab/tree/master/src/stackoverflow/59934084"" rel=""nofollow noreferrer"">https://github.com/mrdulin/jest-codelab/tree/master/src/stackoverflow/59934084</a></p>&#xA;",6463558,"",,"",,2020-01-27T16:07:43,"","",,1,,,
59946023,2,,59942069,2020-01-28T09:49:31,,2,,"<p>Update: <a href=""https://www.electronjs.org/docs/api/app#apprequestsingleinstancelock"" rel=""nofollow noreferrer"">the example in the docs</a> looks like the best pattern to follow! I.e. call <code>app.quit()</code> when <code>app.requestSingleInstanceLock()</code> returns false</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>From <a href=""https://www.electronjs.org/docs/api/app#event-second-instance"" rel=""nofollow noreferrer"">the docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>This event will be emitted inside the <strong>primary</strong> instance of your application when a second instance has been executed and calls app.requestSingleInstanceLock().</p>&#xA;</blockquote>&#xA;&#xA;<p>I.e. this is why <code>app.quit()</code> shuts the first window.</p>&#xA;&#xA;<blockquote>&#xA;  <p>... Usually applications respond to this by making their primary window focused and non-minimized.</p>&#xA;</blockquote>&#xA;&#xA;<p>So if <code>win</code> is the instance of <code>BrowserWindow</code> that your main process opened, you could do:</p>&#xA;&#xA;<pre><code>win.show()&#xA;win.focus()&#xA;</code></pre>&#xA;&#xA;<p>I believe you could also do nothing in the 'second-instance' handler: the event is just for information, telling you that the user has tried to open your app a second time.</p>&#xA;",841830,"",841830,"",2020-01-29T07:26:51,2020-01-29T07:26:51,"","",,1,,,
59984672,2,,59984512,2020-01-30T11:11:11,,1,,"<p>You should try like this way</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;            ""postinstall"": ""install-app-deps""&#xA;    }&#xA;</code></pre>&#xA;",5060008,"",,"",,2020-01-30T11:11:11,"","",,1,,,
59986171,2,,59981188,2020-01-30T12:34:59,,1,,"<p>Electron is not supposed to execute TypeScript code directly so you have to convert it to Javascript before to be able to use it in electron. By the way here a useful link to refer: <a href=""https://www.electronjs.org/blog/typescript"" rel=""nofollow noreferrer"">https://www.electronjs.org/blog/typescript</a></p>&#xA;&#xA;<p>Please refer also to this question: <a href=""https://stackoverflow.com/questions/56498489/how-to-add-my-own-typescript-classes-in-electron-project"">How to add my own typescript classes in Electron project</a></p>&#xA;",8534482,"",,"",,2020-01-30T12:34:59,"","",,1,,,
60027383,2,,60027131,2020-02-02T15:02:49,,1,,"<p>To hide the menu on a specific window, you will have to call <code>.setMenu(null)</code> on it.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>function openAboutWindow()&#xA;{&#xA;    if (about) {&#xA;        about.focus();&#xA;        return&#xA;    }&#xA;&#xA;    about = new BrowserWindow({&#xA;        height: 185,&#xA;        resizable: false,&#xA;        width: 270&#xA;    });&#xA;&#xA;    about.setMenu(null); // here!&#xA;    about.loadURL('file://' + __dirname + '/about.html').then(r =&gt; r);&#xA;    about.on('closed', () =&gt; about = null);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(There are <a href=""https://github.com/electron/electron/issues/16521"" rel=""nofollow noreferrer"">some issues</a> with this function on some versions of Electron, I can confirm it works well on 7.1.11.)</p>&#xA;",12749378,"",,"",,2020-02-02T15:02:49,"","",,1,,,
60032295,2,,60031543,2020-02-03T01:57:52,,0,,"<h2>TL;DR</h2>&#xA;&#xA;<p>Your issue has nothing to do with Electron and more with what exactly you pass to <code>setInterval</code>. You're not passing the function <code>updateTable</code>, but the result of the function call <code>updateTable()</code>. Remove the parentheses after the function name.</p>&#xA;&#xA;<h2>Analysis</h2>&#xA;&#xA;<p>Both functions <code>setInterval</code> and <code>setTimeout</code> expect a <em>function</em> as their first parameter, which they will call at a specific time or regularly. What you pass to <code>setInterval</code> is, however, not a function. You write:</p>&#xA;&#xA;<pre><code>setInterval(updateTable(), 10000)&#xA;</code></pre>&#xA;&#xA;<p>When this line is executed, <code>updateTable</code> is called and its <em>return value</em> is passed to <code>setInterval</code>. (If the function doesn't explicitly return anything, it returns <code>undefined</code>.) That's why your function is just called a single time (when setting up the timer).</p>&#xA;&#xA;<p>If you write</p>&#xA;&#xA;<pre><code>setInterval(updateTable, 10000) // no parentheses&#xA;</code></pre>&#xA;&#xA;<p>you're actually passing the function to <code>setInterval</code>, which will then run it repeatedly.</p>&#xA;&#xA;<p>You may wonder why your workaround using <code>setTimeout</code> works. This is because you actually pass a function to it. You're specifying the function inline, but don't call it at that time. It does not matter that <em>inside</em> that function, you make the call to <code>updateTable</code>. What matters is what you pass to the timer functions.</p>&#xA;",1335237,"",,"",,2020-02-03T01:57:52,"","",,2,,,
60033043,2,,59921598,2020-02-03T04:19:36,,0,,"<p>From how I understand your question, you want to move the template code out of your main process script, but keep the functions in there.</p>&#xA;&#xA;<p>This can be achieved by moving the menu structure object into a separate module. The module exports a function that takes an object with references to the functions you want to call in the menu.</p>&#xA;&#xA;<p>I believe this does not add significant complexity and ""externalizes"" just the menu template code.</p>&#xA;&#xA;<p><strong>menu1.js:</strong></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>module.exports = function(actions) {&#xA;    return [&#xA;        {&#xA;            label: ""Foo"",&#xA;            submenu: [&#xA;                { label: ""Bar"", click: actions.bar },&#xA;                { label: ""About"", click: actions.about }&#xA;            ]&#xA;        }&#xA;    ];&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>main.js:</strong></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const {app,BrowserWindow,Menu} = require(""electron"");&#xA;&#xA;const actions = {&#xA;    bar: function () {&#xA;        console.log(""bar"");&#xA;    },&#xA;    about: function () {&#xA;        console.log(""about"");&#xA;    }&#xA;};&#xA;&#xA;const menu1_template = require(""./menu1.js"")(actions);&#xA;const menu1 = Menu.buildFromTemplate(menu1_template);&#xA;Menu.setApplicationMenu(menu1);&#xA;&#xA;let mainWindow;&#xA;&#xA;app.on(""ready"", function() {&#xA;    mainWindow = new BrowserWindow();&#xA;});&#xA;</code></pre>&#xA;",1335237,"",1335237,"",2020-02-03T04:41:28,2020-02-03T04:41:28,"","",,3,,,
60056374,2,,59992773,2020-02-04T11:26:20,,1,,"<p>By looking into documentation it seems the answer is in <a href=""https://webpack.js.org/api/module-methods/"" rel=""nofollow noreferrer"">Module Methods</a> section:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Dynamic expressions in import()</strong></p>&#xA;  &#xA;  <p>It is not possible to use a fully dynamic import statement, such as <code>import(foo)</code>. Because <code>foo</code> could potentially be any path to any file in your system or project.</p>&#xA;  &#xA;  <p>The <code>import()</code> must contain at least some information about where the module is located. [...]</p>&#xA;</blockquote>&#xA;&#xA;<p>It is not clear if you need to read it at build time or at runtime, if its the former then make sure to copy the file to working directory (so that file is bundled in the build), if its the latter then you could use <code>fs</code> module to get the file at runtime.</p>&#xA;",906265,"",,"",,2020-02-04T11:26:20,"","",,4,,,
28573307,2,,28570622,2015-02-17T23:36:31,,0,,"<p>There is a node module :  avprober&#xA;which is a wrapper around the command line tool avprobe which comes bundled with install of <a href=""https://libav.org"" rel=""nofollow"">avconv</a>   </p>&#xA;&#xA;<p>It reveals details of given media file like Duration</p>&#xA;&#xA;<p>... alternatively, here is some python which uses <a href=""https://bitbucket.org/haypo/hachoir"" rel=""nofollow"">hachoir</a>&#xA;to parse media header info ... and it does handle video files (AVI,mp4, etc) to reveal Duration </p>&#xA;&#xA;<pre><code>import sys&#xA;&#xA;from hachoir_core.cmd_line import unicodeFilename&#xA;from hachoir_core.i18n import getTerminalCharset&#xA;from hachoir_metadata import extractMetadata&#xA;from hachoir_parser import createParser&#xA;&#xA;&#xA;filename = sys.argv[1]&#xA;charset = getTerminalCharset()&#xA;filename, real_filename = unicodeFilename(filename, charset), filename&#xA;parser = createParser(filename, real_filename=real_filename)&#xA;metadata = extractMetadata(parser)&#xA;print(""Duration (hh:mm:ss.f): %s"" % metadata.get('duration'))&#xA;</code></pre>&#xA;",147175,"",147175,"",2015-02-20T18:46:25,2015-02-20T18:46:25,"","",,6,,,
28544376,2,,28542125,2015-02-16T15:07:18,,1,,"<p>I was playing around a bit and found out that the async one works and the sync one doesnt - here the async one:</p>&#xA;&#xA;<pre><code>        fs.lstat(rootElement.path + seperator + file, function(err, stats) {&#xA;            if (err) {throw err;}&#xA;&#xA;            if (stats.isDirectory()) {&#xA;                createFolderView(rootElement, file);&#xA;            } else {&#xA;                createFileView(rootElement, file);&#xA;            }&#xA;        });&#xA;</code></pre>&#xA;&#xA;<p>and here the sync one:</p>&#xA;&#xA;<pre><code>if (fs.lstatSync(rootElement.path + seperator + file).isDirectory()) {&#xA;   createFolderView(rootElement, file);&#xA;} else {&#xA;   createFileView(rootElement, file);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>but shouldnt work both the same way - or am i missing something?</p>&#xA;",3919831,"",,"",,2015-02-16T15:07:18,"","",,0,,,
28584733,2,,28583620,2015-02-18T13:25:19,,1,,"<p>You need to use <a href=""http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options"" rel=""nofollow"">spawn</a> instead of <code>exec</code>.</p>&#xA;&#xA;<p>Spawn sends the data back as a stream, so you can tap into it with <code>stdout.on(fn)</code>.</p>&#xA;&#xA;<pre><code>var spawn = require('child_process').spawn;&#xA;&#xA;var proc = spawn(executableFile);&#xA;&#xA;proc.stderr.on('data', function(stderr) {&#xA;    console.log('exec error: ' + stderr); &#xA;});&#xA;&#xA;proc.stdout.on('data', function(stdout) {&#xA;    $('#console-output').append('stdout: ' + stdout.toString() + '&lt;br/&gt;');&#xA;});&#xA;</code></pre>&#xA;",2615209,"",2615209,"",2015-02-18T14:00:24,2015-02-18T14:00:24,"","",,2,,,
28744551,2,,28743686,2015-02-26T14:07:01,,1,,"<p>It looks like <code>window</code> isn't being defined properly with the way angular is required.</p>&#xA;&#xA;<p>You can wrap your code inside an anonymous function and inject <code>window</code> into it.</p>&#xA;&#xA;<pre><code>(function() {&#xA;    var angular = require('angular');&#xA;    var hecktelionApp = angular.module('hecktelionApp', []);&#xA;}).bind(window);&#xA;</code></pre>&#xA;",2615209,"",,"",,2015-02-26T14:07:01,"","",,1,,,
28608612,2,,28605852,2015-02-19T14:14:49,,2,,"<p>Node-webkit provides app protocol. which according to <a href=""https://github.com/nwjs/nw.js/wiki/App-protocol"" rel=""nofollow"">documentation</a> is treated as local file protocol.&#xA;So you have to whitelist your app protocol.</p>&#xA;&#xA;<p><code>var myModule = angular.module('myApp', [...], function($compileProvider) {&#xA;    $compileProvider.imgSrcSanitizationWhitelist('app://');&#xA;   });</code></p>&#xA;",2420102,"",2420102,"",2015-02-19T14:21:24,2015-02-19T14:21:24,"","",,0,,,
28684548,2,,28655593,2015-02-23T22:15:44,,2,,"<p>Check out <a href=""https://github.com/jaeh/node-webkit-express"" rel=""nofollow"">node-webkit-express</a> for a working example.</p>&#xA;&#xA;<p>I can't explain why, but launching express via ""node-main"" is what causes the issue. Perhaps it's a multi-process problem or something... but you can do it.</p>&#xA;",551436,"",,"",,2015-02-23T22:15:44,"","",,0,,,
28675953,2,,28675738,2015-02-23T14:24:24,,3,,"<p>Many development models with web technologies exist, but they have different purposes and it all depends on what you want to do.</p>&#xA;&#xA;<p>You seem to be mixing 3 models</p>&#xA;&#xA;<p><strong>Classic websites</strong></p>&#xA;&#xA;<p>A server (with PHP, Java or whatever) generates HTML.</p>&#xA;&#xA;<p>A user uses a browser to access it.</p>&#xA;&#xA;<p>When the user clicks somewhere, the server is called again and generates another HTML file.</p>&#xA;&#xA;<p><strong>Single Page Applications</strong></p>&#xA;&#xA;<p>This model is often used when writing websites that need a lot of interactivity. For example Gmail, or Google docs are SPAs (more or less).</p>&#xA;&#xA;<p>SPAs are websites (you can access them at an URL) where all templating is done client side, and the webserver only exposes a HTTP API.</p>&#xA;&#xA;<p>Most of the times, people use frameworks to make those like:</p>&#xA;&#xA;<ul>&#xA;<li>AngularJS</li>&#xA;<li>React</li>&#xA;<li>Backbone</li>&#xA;</ul>&#xA;&#xA;<p><strong>Desktop apps with web technologies</strong></p>&#xA;&#xA;<p>That's just coding an application that you can install on a computer or phone with web technologies (javascript, css, html).</p>&#xA;&#xA;<p>There is no server.</p>&#xA;&#xA;<p>Tools that enable programmers to do this are</p>&#xA;&#xA;<ul>&#xA;<li>Node webkit (for desktops)</li>&#xA;<li>Cordova (for phones)</li>&#xA;<li>Many others</li>&#xA;</ul>&#xA;&#xA;<p>Most of the time, programmers also use SPA tools in conjonction with those to help them during development</p>&#xA;",1897495,"",1897495,"",2015-02-23T14:30:31,2015-02-23T14:30:31,"","",,3,,,
28749496,2,,28746785,2015-02-26T17:57:54,,3,,"<p>At the time you add the menu to the current window (nw.Window.get().menu = windowMenu;)  ...   the menu is empty (blank).  Move this line below the code which adds a menuitem -- for example, place this line at the point where your current code has the ""alert"" -- and the menu will be non-empty (and visible).</p>&#xA;",4286031,"",,"",,2015-02-26T17:57:54,"","",,3,,,
28761666,2,,28761447,2015-02-27T09:33:29,,6,,"<p>To know the version of node-webkit in app so you can determine whether certain APIs are available, to get it you can use:</p>&#xA;&#xA;<pre><code>process.versions['node-webkit']&#xA;</code></pre>&#xA;&#xA;<p>And to quickly know the node-webkit's version you are using now, you can type <code>nw:version</code> in the toolbar, then node-webkit would print the versions like:</p>&#xA;&#xA;<pre><code>node-webkit v0.3.5&#xA;&#xA;node.js v0.8.14&#xA;</code></pre>&#xA;&#xA;<p>If you are using Node Webkit Builder then use <code>nwbuild -v</code> or <code>nwbuild --version</code></p>&#xA;",4340692,"",4340692,"",2015-02-27T10:18:12,2015-02-27T10:18:12,"","",,1,,,
28779045,2,,28771245,2015-02-28T06:52:49,,6,,"<p>The error is thrown from <a href=""https://github.com/joyent/node/blob/v0.12.0/src/node.cc#L2028-L2036"">Node.js internals</a>. You are mixing binary modules built for different versions of io.js or Node.js. The module version refers to the C++ <code>NODE_MODULE_VERSION</code> macro, which is accessible in JavaScript as <code>process.versions.modules</code>.</p>&#xA;&#xA;<p>14 seems to be the version number for Node.js since Node.js v0.11.11.</p>&#xA;&#xA;<p><strike>I can't find any information on 41</strike>, although it is clear that 42 is the version number used by <a href=""https://github.com/iojs/io.js/commit/42ebdcbff1b0846c8e2d291ee320c5e0fcfcb09e"">io.js v1.0.0</a>.</p>&#xA;&#xA;<p><strong>UPDATE</strong>: 41 is the version of io.js bundled in <a href=""https://github.com/atom/node/commit/70498428ced2b8ae4ce020051f06d104b5c6c4de"">atom-shell</a> internally, which is cut from io.js <code>v1.0.0-pre</code>.</p>&#xA;&#xA;<p>nw.js/atom-shell is using its own copy of Node.js to execute the engine. In a terminal, try doing a clean installation and execution without going to atom-shell.</p>&#xA;&#xA;<p>Also note that this problem should not be exclusive to Phantom.js or Zombie.js, but to all modules using C++ code.</p>&#xA;&#xA;<p>To solve this problem, use one of the following instructions:</p>&#xA;&#xA;<ul>&#xA;<li>atom-shell offers a <a href=""https://github.com/atom/atom-shell/blob/master/docs/tutorial/using-native-node-modules.md"">tutorial</a> for using native modules.</li>&#xA;<li>nw.js also has a <a href=""https://github.com/nwjs/nw.js/wiki/Build-native-modules-with-nw-gyp"">tutorial</a></li>&#xA;</ul>&#xA;",1937836,"",1937836,"",2015-02-28T18:46:22,2015-02-28T18:46:22,"","",,4,,,
28656242,2,,28648292,2015-02-22T09:12:48,,39,,"<p>UPDATE:</p>&#xA;&#xA;<p>Figured it out - here is what you can do</p>&#xA;&#xA;<pre><code>var addMenu;&#xA;&#xA;componentWillMount: function() {&#xA;    addMenu = new nw.Menu();&#xA;    addMenu.append(new nw.MenuItem({&#xA;        label: 'doSomething',&#xA;        click: function() {&#xA;            // doSomething&#xA;        }&#xA;    }));&#xA;},&#xA;&#xA;contextMenu: function(e) {&#xA;    e.preventDefault();&#xA;    addMenu.popup(e.clientX, e.clientY);&#xA;},&#xA;&#xA;render: function(){&#xA;    return &lt;button onClick={this.handleClick} onContextMenu={this.contextMenu}&gt;SomethingUseful&lt;/button&gt;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In render you can pass a function to onContextMenu for when a right click occurs for this react component.</p>&#xA;",1947066,"",,"",,2015-02-22T09:12:48,"","",,5,,,
24375169,2,,24333782,2014-06-23T21:51:24,,0,,<p>The problem was that I was trying to load an HTTPS site within an HTTP window.</p>&#xA;,2638689,"",,"",,2014-06-23T21:51:24,"","",,0,,,
24328756,2,,24283078,2014-06-20T13:44:49,,1,,"<p>Intel XDK (which uses node-webkit) provides them inside the ""About"" window (in the section ""Attribution Notice"").</p>&#xA;&#xA;<p><img src=""https://i.stack.imgur.com/12Kxb.png"" alt=""enter image description here""></p>&#xA;",98346,"",,"",,2014-06-20T13:44:49,"","",,2,,,
24486699,2,,24486599,2014-06-30T09:17:09,,1,,"<p>All you got to do is listen for the events and call <code>$scope.$apply</code> to refresh the view by scope.</p>&#xA;&#xA;<pre><code>.controller('HomeCtrl', function($scope, Files) {&#xA;   $scope.files = Files.getFiles();&#xA;   Files.on(""created"", function(){&#xA;      $scope.files = Files.getFiles();&#xA;      $scope.$apply();&#xA;   });&#xA;})&#xA;</code></pre>&#xA;",1167113,"",,"",,2014-06-30T09:17:09,"","",,3,,,
24328661,2,,24328117,2014-06-20T13:39:54,,2,,"<p>You can proceed like that:</p>&#xA;&#xA;<pre><code>gui.Shell.openExternal(""http://website.com"")&#xA;</code></pre>&#xA;&#xA;<p>See the documentation here: <a href=""https://github.com/rogerwang/node-webkit/wiki/Shell"" rel=""nofollow noreferrer"">https://github.com/rogerwang/node-webkit/wiki/Shell</a></p>&#xA;&#xA;<p>See also <a href=""https://stackoverflow.com/questions/19157659/how-to-open-a-browser-window-from-a-node-webkit-app"">How to open a browser window from a node-webkit app?</a> for more informations.</p>&#xA;",3747743,"",-1,"",2017-05-23T11:57:35,2014-06-20T13:39:54,"","",,0,,,
24531407,2,,24314431,2014-07-02T12:43:49,,5,,"<p>With the help of an other question (<a href=""https://stackoverflow.com/questions/15419985/node-webkit-facebook-integration"">here</a>) I found a solution to my problem.</p>&#xA;&#xA;<p>I post the code that I use now and I Hope it will help someone else:</p>&#xA;&#xA;<pre><code>var url = ""https://www.facebook.com/dialog/oauth?&amp;client_id=myBigClientID&amp;redirect_uri=https://www.facebook.com/connect/login_success.html&amp;response_type=token&amp;scope=publish_actions"";&#xA;&#xA;function Response() {&#xA;  this.access_token = null; &#xA;  this.expires_in  = null;&#xA;};&#xA;&#xA;var response = new Response();&#xA;&#xA;//function called every 500ms to check if token is in url&#xA;window.hashUpdate = function() {&#xA;  if(window.loginWindow.closed){&#xA;    window.clearInterval(intervalId);&#xA;    start(); //just a callback that I'm using to start another part of my application (after I caught the token)&#xA;  }&#xA;  else {&#xA;    var url = window.loginWindow.document.URL;&#xA;    var tabUrl = url.split(""#""); //first split to separate the domain part and the parameter part&#xA;    var paramString = tabUrl[1]; //I concerned only by the second part after the '#'&#xA;    if(paramString != undefined){&#xA;      var allParam = paramString.split(""&amp;"");&#xA;      for (var i = 0; i &lt; allParam.length; i++) {&#xA;        var oneParamKeyValue = allParam[i].split(""="");&#xA;        response[oneParamKeyValue[0]] = oneParamKeyValue[1]; //store my token in form of key =&gt; value&#xA;      };&#xA;&#xA;      //close the window after 1500ms&#xA;      setTimeout(function(){&#xA;        window.loginWindow.close();&#xA;      }, 1500);&#xA;    }&#xA;&#xA;  }&#xA;}&#xA;&#xA;//open the url and start the watching process&#xA;window.loginWindow = window.open(this.url, 'Login facebook', false);&#xA;this.intervalId = window.setInterval(""window.hashUpdate()"", 500);    &#xA;</code></pre>&#xA;",2260297,"",-1,"",2017-05-23T10:32:49,2014-07-02T12:43:49,"","",,7,,,
40836643,2,,40814065,2016-11-28T03:11:54,,0,,"<p>Can you confirm the same behavior when not using browserify-fs? Just use plain old <code>fs</code>. (Note you can do this straight from the Chrome dev tools console). </p>&#xA;&#xA;<p>Looking at browserify-fs's page, it looks like it implements a kind of virtual file system using a dependency called <a href=""https://github.com/mafintosh/level-filesystem"" rel=""nofollow noreferrer"">level-filesystem</a> (which uses level db). So the files you're expecting to get created aren't. They're being created within a level db database. You could probably find a level db file somewhere that has the information you're trying to write directly to the file system in it. </p>&#xA;&#xA;<p>For simple writing/reading of a JSON file, I'd recommend <a href=""https://github.com/sindresorhus/electron-config"" rel=""nofollow noreferrer"">https://github.com/sindresorhus/electron-config</a>. </p>&#xA;",1397311,"",,"",,2016-11-28T03:11:54,"","",,2,,,
40838923,2,,40838601,2016-11-28T07:14:09,,0,,"<p>There's no need to define another function inside the class WebWindow, nor do you need to redeclare <em>this</em> inside of arrow functions.</p>&#xA;&#xA;<pre><code>//index.js (renderer process)&#xA;const {ipcRenderer} = require('electron')&#xA;&#xA;class WebWindow {&#xA;  constructor() {&#xA;&#xA;    setInterval(() =&gt; {&#xA;      ipcRenderer.send('async-cookies', data)&#xA;    }, 2000)&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",1792564,"",,"",,2016-11-28T07:14:09,"","",,0,,,
40843631,2,,40843589,2016-11-28T11:51:38,,0,,"<p>i guess you should try and add it as an dependent object rather than rendering it as html.</p>&#xA;&#xA;<p>e.g:</p>&#xA;&#xA;<p>document.getElementById(""content"").appendChild(calendarObject)</p>&#xA;&#xA;<p>You loose the event binding because you are rendering an html and not ""live"" object</p>&#xA;",2398748,"",,"",,2016-11-28T11:51:38,"","",,0,,,
40867797,2,,40864674,2016-11-29T14:01:43,,0,,"<p>You can wrap your entire load function into returning an Observable:</p>&#xA;&#xA;<pre><code>exports.load = function(parameters){&#xA;  return Observable.create(observer =&gt; {&#xA;    var l = parseInt(parameters.l);&#xA;    var t = parseInt(parameters.t);&#xA;    var r = parseInt(parameters.r);&#xA;    var b = parseInt(parameters.b);&#xA;    return cmelement.find({&#xA;            $or: [&#xA;                {$and: [{x0: { $gt: l, $lt: r }}, {y0: { $gt: t, $lt: b }}]},&#xA;                {$and: [{x1: { $gt: l, $lt: r }}, {y1: { $gt: t, $lt: b }}]}&#xA;            ]&#xA;        }).filter(function(x){ return x !== undefined })&#xA;        .exec(function (err, doc) {&#xA;            console.log(doc); // outputs the correct data&#xA;            observer.next(doc);&#xA;            observer.complete();&#xA;        });&#xA;  });&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Then in your getElements function:</p>&#xA;&#xA;<pre><code>getElements(parameters) {&#xA;    elementController.load(parameters)&#xA;      .subscribe((x) =&gt; console.log(x));&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Hope this works for you!</p>&#xA;",4159868,"",,"",,2016-11-29T14:01:43,"","",,2,,,
40876607,2,,40876430,2016-11-29T22:03:24,,0,,"<p>You have to set up the root in your Electron app, the app.js code needs to change. </p>&#xA;&#xA;<p>In the callback function within </p>&#xA;&#xA;<pre><code>app.on('ready', function(){&#xA;    mainWindow = new BrowserWindow({&#xA;        height: 600,&#xA;        width: 800&#xA;    });&#xA;&#xA;    mainWindow.loadUrl('file://' + __dirname + '/app/index.html');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You need to set up the mainWindow's path, which has to be the remote path to your PHP code. </p>&#xA;&#xA;<p>So if you have www.example.com as your web app you want to use within your Electron app, you need to specify that url in the mainwindow. It basically functions as a wrapped browser then. </p>&#xA;&#xA;<p>Basically, Electron is only a browser, it does not magically render PHP pages for you, you still need a server to render them for you. So you cannot load in .php files locally, unless you have a server running locally. Still, if you do, you still need a valid URL to enter there along the lines of: </p>&#xA;&#xA;<pre><code>http://localhost:9000 &#xA;</code></pre>&#xA;&#xA;<p>or something similiar.</p>&#xA;",5257880,"",,"",,2016-11-29T22:03:24,"","",,0,,,
40994325,2,,40965492,2016-12-06T11:31:15,,0,,"<p>i found an answer for my question by a help from 'marcbachmann'</p>&#xA;&#xA;<p>here is my code :</p>&#xA;&#xA;<pre><code>dialog.showSaveDialog({&#xA;      filters: [{ name: 'PDFs', extensions: ['pdf']}],&#xA;                    title: 'Save the Report as PDF',&#xA;                    defaultPath: path.join(app.getPath('desktop'), 'title1'+'.pdf')}&#xA;       , function(filename) {&#xA;&#xA;       pdf.create(docx).toFile(filename,function(err, res){&#xA;              console.log(res.filename);&#xA;       });&#xA;&#xA;   });&#xA;</code></pre>&#xA;",7222515,"",,"",,2016-12-06T11:31:15,"","",,0,,,
40775849,2,,40646403,2016-11-23T23:31:39,,1,,<p>I have solved this issue. The problem seems to be the developer tools open in the application. That is causing the issue where I am unable to fetch the controls. Once the developers repackage the application with developer tools option closed then the above code works fine.</p>&#xA;,5076449,"",5764553,"",2019-06-19T16:56:55,2019-06-19T16:56:55,"","",,0,,,
40791277,2,,40790466,2016-11-24T16:38:35,,1,,"<p>If you can use <code>fs.readFile</code> and <code>jQuery</code> in the same context then you can read the file and parse it with jQuery with something like this:</p>&#xA;&#xA;<pre><code>fs.readFile('/path/to/file', function (err, html) {&#xA;  if (err) {&#xA;    // handle error&#xA;  } else {&#xA;    var $html = $(html.toString());&#xA;    // now $html is a jQuery object&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>It's pretty much the same as if you do <code>$('&lt;p&gt;abc&lt;/p&gt;')</code> with jQuery. You can pass an HTML string to the jQuery function and it returns a jQuery objects. Here the only difference is that the string came from the file.</p>&#xA;&#xA;<p>What you get from <code>readFile</code> by default is not a String but a <a href=""https://nodejs.org/api/buffer.html#buffer_buffer"" rel=""nofollow noreferrer"">Buffer</a>. It was added before there was TypedArray in ES6 to be able to process files and streams of binary data with good performance. </p>&#xA;&#xA;<p>To convert the Buffer to String you can use the <a href=""https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end"" rel=""nofollow noreferrer""><code>toString</code></a> method that optionally takes the encoding (UTF-8 by default), start and end of the buffer to convert (the entire buffer by default).</p>&#xA;&#xA;<p>For more info  see:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://nodejs.org/api/fs.html"" rel=""nofollow noreferrer"">https://nodejs.org/api/fs.html</a></li>&#xA;<li><a href=""https://nodejs.org/api/buffer.html"" rel=""nofollow noreferrer"">https://nodejs.org/api/buffer.html</a></li>&#xA;</ul>&#xA;",613198,"",613198,"",2016-11-29T09:26:04,2016-11-29T09:26:04,"","",,2,,,
40853034,2,,40582057,2016-11-28T20:38:57,,1,,<p>The problem was that I was using mocha (which came as part of the Electron-React boilerplate). Installing electron-mocha and changing the <code>test</code> script in the package.json resolved this problem immediately.</p>&#xA;,2444128,"",,"",,2016-11-28T20:38:57,"","",,1,,,
40878713,2,,40878622,2016-11-30T01:24:31,,1,,"<p>Module dependencies are specified by name, so in <code>Train.js</code></p>&#xA;&#xA;<pre><code>angular.module('mod2', ['mod1'])&#xA;</code></pre>&#xA;&#xA;<p>You just need to include the file that defines <code>mod1</code>, ie the file that has</p>&#xA;&#xA;<pre><code>angular.module('mod1', ['maybe', 'some', 'deps', 'here'])&#xA;</code></pre>&#xA;&#xA;<p>You include that file  in <code>html2.html</code> as well as any other files with providers (like <code>Data.js</code>) and everything in that module will be available.</p>&#xA;&#xA;<p>Presumably you already defined the module <code>mod1</code> in <code>Data.js</code> or another file. Defining it again as you were in <code>Train.js</code> overrides the registered name with a new, empty one.</p>&#xA;",283366,"",,"",,2016-11-30T01:24:31,"","",,0,,,
40938584,2,,40894784,2016-12-02T18:15:29,,1,,"<p>I've found the issue.</p>&#xA;&#xA;<p>There is literally nothing code-related: my code is correct.</p>&#xA;&#xA;<p>The issue is that <code>{{progress}}</code> is updated too quickly, so the view doesn't have enough time to process the data and update it.</p>&#xA;&#xA;<p>Similarly, another bug might be encountered if you complete a progressbar and, after a short amount of time, you set back its progress to 0: you will see the bar going backwards (from 100 to 0), and will eventually go ahead again when the <code>{{progress}}</code> meets the current bar status.</p>&#xA;&#xA;<p>The solution, in a nutshell, was drastically changing the data collection ratio: instead of increasing the progress value frequently, I've set my main thread to send only collections of 100 data packs, so that the progress increase was slower and, therefore, that the view would've had enough time to update.</p>&#xA;",2275797,"",,"",,2016-12-02T18:15:29,"","",,0,,,
40964060,2,,40963716,2016-12-04T21:46:18,,1,,"<p>It appears Settings.courseList is never assigned a value in Settings.js</p>&#xA;&#xA;<p>You could try adding</p>&#xA;&#xA;<pre><code>Settings.courseList = allCourses;&#xA;</code></pre>&#xA;&#xA;<p>on the line before</p>&#xA;&#xA;<pre><code>courseListJSON = JSON.stringify(allCourses);&#xA;</code></pre>&#xA;&#xA;<p>Or better yet you could do it the promise way and resolve the promise with allCourses.</p>&#xA;&#xA;<p>To make the promise from Settings.LoadCourseList(standardOSPathUserData); return allCourse, change</p>&#xA;&#xA;<pre><code>return connection.Login().then(function(){&#xA;    return connection.GetCourseList().then(function(result){&#xA;        var allCourses = [];&#xA;        for(var p=0; p&lt;=result.length-1;p++){&#xA;          allCourses.push({courseID: result[p].courseID, courseName: result[p].courseName, selected: true});&#xA;        }&#xA;        courseListJSON = JSON.stringify(allCourses);&#xA;        return courseListJSON;&#xA;    }).then(function(courseListJSON){&#xA;        fs.appendFileSync(pathToCourseListSettings,courseListJSON,encoding='utf8');&#xA;        console.log(""New Course settings file created and filled: "" + pathToCourseListSettings);&#xA;        return resolve();&#xA;    });&#xA;}).then(function(){&#xA;    return resolve();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>return connection.Login().then(function(){&#xA;    return connection.GetCourseList().then(function(result){&#xA;        var allCourses = [];&#xA;        for(var p=0; p&lt;=result.length-1;p++){&#xA;          allCourses.push({courseID: result[p].courseID, courseName: result[p].courseName, selected: true});&#xA;        }&#xA;        var courseListJSON = JSON.stringify(allCourses);&#xA;        fs.appendFileSync(pathToCourseListSettings,courseListJSON,encoding='utf8');&#xA;        console.log(""New Course settings file created and filled: "" + pathToCourseListSettings);&#xA;        return allCourses;&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>and to receive that promise result change</p>&#xA;&#xA;<pre><code>var b = a.then(function(){&#xA;    console.log(""b is running"");&#xA;    var selectedCourses = Settings.courseList;&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>var b = a.then(function(allCourses){&#xA;    console.log(""b is running"");&#xA;    var selectedCourses = allCourses;&#xA;</code></pre>&#xA;",4123400,"",,"",,2016-12-04T21:46:18,"","",,1,,,
40966713,2,,40879574,2016-12-05T03:37:00,,1,,"<p>You can use Node's child process API to spawn external processes from your Electron app, but it may be a better idea to use <code>libgit2</code> instead via the <a href=""https://github.com/nodegit/nodegit"" rel=""nofollow noreferrer""><code>nodegit</code> module</a>.</p>&#xA;",1259938,"",,"",,2016-12-05T03:37:00,"","",,1,,,
40970448,2,,40970237,2016-12-05T08:58:27,,1,,"<p>I think it is about the ""default"". i have problem like this. Can you check this code;&#xA;<a href=""https://github.com/robeio/robe-react-admin/blob/master/src/app/HasAuthorization.jsx#L10"" rel=""nofollow noreferrer"">https://github.com/robeio/robe-react-admin/blob/master/src/app/HasAuthorization.jsx#L10</a></p>&#xA;&#xA;<p>Also you can check the example usage;&#xA;<a href=""https://github.com/robeio/robe-react-admin/blob/master/src/app/HasAuthorization.jsx#L26"" rel=""nofollow noreferrer"">https://github.com/robeio/robe-react-admin/blob/master/src/app/HasAuthorization.jsx#L26</a></p>&#xA;",,user3973591,,"",,2016-12-05T08:58:27,"","",,7,,,
40987432,2,,40987229,2016-12-06T03:39:57,,1,,"<p>I figured this out and feel like a complete idiot:&#xA;In main.js</p>&#xA;&#xA;<pre><code>mainWindow.webContents.on('found-in-page', (event, result) =&gt; {&#xA;if (result.finalUpdate) {&#xA;  mainWindow.webContents.stopFindInPage('keepSelection');&#xA;}&#xA;});&#xA;ipcMain.on('search-text', (event, arg) =&gt; {&#xA;  mainWindow.webContents.findInPage(arg);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>In the page:</p>&#xA;&#xA;<pre><code>static searchPage(event) {&#xA;if (event.target.value.lenght &gt; 0) {&#xA;    ipcRenderer.send('search-text', event.target.value);&#xA; }&#xA;}&#xA;</code></pre>&#xA;",1177244,"",,"",,2016-12-06T03:39:57,"","",,1,,,
40855777,2,,40855743,2016-11-29T00:17:46,,2,,"<p>I think you accidentally declared a variable with global scope when you probably want local.</p>&#xA;&#xA;<p>Change this:</p>&#xA;&#xA;<pre><code>currentfile = files[file].path&#xA;</code></pre>&#xA;&#xA;<p>to this:</p>&#xA;&#xA;<pre><code>var currentfile = files[file].path&#xA;</code></pre>&#xA;&#xA;<p>This will form a <a href=""http://www.w3schools.com/js/js_function_closures.asp"" rel=""nofollow noreferrer"">closure</a> where the anonymous function that handles the error will be able to access the <code>currentfile</code> variable in the anonymous function that handles the jquery <code>each</code>.</p>&#xA;",2791540,"",,"",,2016-11-29T00:17:46,"","",,3,,,
40945194,2,,40945083,2016-12-03T07:04:35,,2,,"<p>When implementing a RESTful service for an app, you would essentially place your <code>MongoDB</code> and your server-side script, the one that handles the REST calls, on an accessible server, if you have it running, the server in your case is probably your machine. </p>&#xA;&#xA;<p>You would then use HTTP GET, POST, PUT, DELETE and whatever functionality you built into your service via a client, in your case an Electron app.</p>&#xA;&#xA;<p>To explain a bit better, your API lives in one place and you access/manipulate that data via HTTP calls, in layman's using a url, from anywhere with access to that domain, such as internet connected mobiles and computers or other websites. </p>&#xA;&#xA;<p>Whatever language you develop the client in, look into the native or third party HTTP libraries to access and grab that data.</p>&#xA;&#xA;<p>Simple JS Client Call Example:</p>&#xA;&#xA;<pre><code>function httpGet(theUrl) {&#xA;    var xmlHttp = new XMLHttpRequest();&#xA;    xmlHttp.open( ""GET"", theUrl, false ); // false for synchronous request&#xA;    xmlHttp.send( null );&#xA;    return xmlHttp.responseText;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You would then handle the data with the proper parser, I'm assuming you are targeting JSON. From there you can assign and use that data.</p>&#xA;&#xA;<p>If you are doing it locally first, for your url use the <code>localhost</code> and the port MongoDB is listening on.</p>&#xA;&#xA;<p>If you want to deploy and test live, I recommend Amazon Web Services Elastic Beanstalk or EC2. AWS is free for a year and also has a great free tier perfect for prototyping and home projects. I am utilizing one for a rest service now!</p>&#xA;",5791656,"",5791656,"",2016-12-03T07:10:14,2016-12-03T07:10:14,"","",,1,,,
40972729,2,,40963750,2016-12-05T11:01:48,,3,,"<p>Welcome to stackoverflow!</p>&#xA;&#xA;<p>The package you installed is a demo package that is meant to demonstrate the different features Electron offers to developers. It is not suitable for your needs right now.</p>&#xA;&#xA;<p>What you need instead is, as devilfart and Vadim pointed out, a global installation of the Electron runtime. This can be achieved by starting a command line with administrative rights and entering the following command:</p>&#xA;&#xA;<p><code>npm install -g electron</code></p>&#xA;&#xA;<p>This will install the Electron runtime as a global package inside your base node_modules directory and enable the use of the <code>electron</code> command.</p>&#xA;",1792564,"",3907492,"",2018-07-30T17:10:23,2018-07-30T17:10:23,"","",,0,,,
40802667,2,,37943764,2016-11-25T10:23:26,,5,,"<p>The first step is adding Foundation to your project:</p>&#xA;&#xA;<pre><code>npm install foundation-sites --save&#xA;</code></pre>&#xA;&#xA;<p>This gives you the Foundation Sass (SCSS) files in <code>node_modules/foundation-sites/scss/</code>.</p>&#xA;&#xA;<p>Let's say you have project specific SCSS in <code>scss/app.scss</code>, you'd then need to import Foundation SCSS, something like:</p>&#xA;&#xA;<pre><code>@import 'node_modules/foundation-sites/scss/foundation.scss';&#xA;&#xA;@include foundation-everything&#xA;</code></pre>&#xA;&#xA;<p>Your build process will need to generate CSS from these Sass files - this could be done with various tools such as Gulp, Webpack, Grunt, or simple npm scripts. Then just include the CSS in the HTML files.</p>&#xA;&#xA;<p>The Foundation documentation does cover this using a Grunt example, under <a href=""http://foundation.zurb.com/sites/docs/sass.html"" rel=""noreferrer"">Sass</a>, but it took me a while to find it, since it is not linked to from the installation instructions.</p>&#xA;&#xA;<p>If you prefer to use Foundation for Apps these instructions could easily be adapted for the <code>foundation-apps</code> package.</p>&#xA;",174979,"",,"",,2016-11-25T10:23:26,"","",,1,,,
40949051,2,,40948879,2016-12-03T14:53:29,,6,,"<p>Actually, <code>fs.createWriteStream</code> function decides how to open <code>'out.csv'</code></p>&#xA;&#xA;<p>In your case, you can open this file for adding by using <code>a</code> flag:</p>&#xA;&#xA;<pre><code>writer.pipe(fs.createWriteStream('out.csv', {flags: 'a'}))&#xA;</code></pre>&#xA;&#xA;<p>Here are the docs for this <a href=""https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options"" rel=""noreferrer"">function</a> and <a href=""https://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback"" rel=""noreferrer"">flags</a>.</p>&#xA;",833955,"",,"",,2016-12-03T14:53:29,"","",,0,,,
40848937,2,,40848491,2016-11-28T16:18:48,,8,,"<p>I prefer the native http and https packages. You can directly do a request in a render process. The following is a sample post request with error handling. Maybe there is a better solution out there - this is only my handling.</p>&#xA;&#xA;<pre><code>// You Key - Value Pairs&#xA;var postData = querystring.stringify({&#xA;&#xA;    key: ""value""&#xA;&#xA;});&#xA;&#xA;&#xA;// Your Request Options&#xA;var options = {&#xA;&#xA;    host: ""example.com"",&#xA;    port: 443,&#xA;    path: ""/path/to/api/endpoint"",&#xA;    method: 'POST',&#xA;    headers: {&#xA;&#xA;        'Content-Type': 'application/x-www-form-urlencoded',&#xA;        'Content-Length': Buffer.byteLength(postData)&#xA;&#xA;    }&#xA;&#xA;};&#xA;&#xA;&#xA;// The Request&#xA;var request = https.request(options, function(response) {&#xA;&#xA;    response.on('data', function(chunk) {&#xA;&#xA;        if (chunk) {&#xA;&#xA;            var data = chunk.toString('utf8');&#xA;            // holds your data&#xA;&#xA;        }&#xA;&#xA;&#xA;    });&#xA;&#xA;}).on(""error"", function(e) {&#xA;&#xA;    // Some error handling&#xA;&#xA;});&#xA;&#xA;&#xA;//optionally Timeout Handling&#xA;request.on('socket', function(socket) {&#xA;&#xA;    socket.setTimeout(5000);&#xA;&#xA;    socket.on('timeout', function() {&#xA;&#xA;        request.abort();&#xA;&#xA;    });&#xA;&#xA;});&#xA;&#xA;request.write(postData);&#xA;request.end();&#xA;</code></pre>&#xA;",7221045,"",,"",,2016-11-28T16:18:48,"","",,0,,,
55233384,2,,55233018,2019-03-19T03:52:15,,0,,"<p>I'm not sure what exactly you are trying to accomplish here, but I think this may be of some help.&#xA;the following code sample that I am showing you will grab the attribute of checked based on className which I think is what you are ultimately asking for...</p>&#xA;&#xA;<p><a href=""https://jsbin.com/kahona/edit?html,output"" rel=""nofollow noreferrer"">ClickToSeeJsBin</a></p>&#xA;&#xA;<p><a href=""https://jsbin.com/kahona/edit?html,output"" rel=""nofollow noreferrer"">https://jsbin.com/kahona/edit?html,output</a></p>&#xA;&#xA;<pre><code>    function validate() {&#xA;    var CurrentSelected = [];&#xA;    //Doing the same thing for checkBox selection&#xA;    var GetAllCheckBoxNodes = document.getElementsByClassName(""someCheckBox"");&#xA;    var InputNodesSize = GetAllCheckBoxNodes.length;&#xA;    for (var i = 0; i &lt; InputNodesSize; i++) {&#xA;        var CurrentCheckBox = GetAllCheckBoxNodes[i];&#xA;        if (CurrentCheckBox.checked) {&#xA;            CurrentSelected.push(CurrentCheckBox.value);&#xA;        }&#xA;    }&#xA;    //Doing the same thing for radio selection&#xA;    var GetAllRadioNodes = document.getElementsByClassName(""someRadio"");&#xA;    var GetAllRadioNodesLength = GetAllRadioNodes.length;&#xA;    for (var i = 0; i &lt; GetAllRadioNodesLength; i++) {&#xA;        var CurrentRadioNode = GetAllRadioNodes[i];&#xA;        if (CurrentRadioNode.checked) {&#xA;            CurrentSelected.push(CurrentRadioNode.value);&#xA;        }&#xA;    }&#xA;    //Displaying what is Selected...&#xA;    CurrentSelected.forEach(item =&gt; { console.log(item); });&#xA;}&#xA;</code></pre>&#xA;",9955226,"",,"",,2019-03-19T03:52:15,"","",,0,,,
55233843,2,,55216699,2019-03-19T04:49:53,,0,,"<p>I have found the solution myself: If you reference the html in webview's <code>src</code> attribute with <code>file://...</code> protocol, the webview will be able to access all the local files.</p>&#xA;&#xA;<p>So the solution is instead of pointing directly to the html with <code>file://...</code> protocol, you should run a local web server that serves only the static files that you want the webview to have access to. When the webview's <code>src</code> is loaded using <code>http(s)://...</code>, Electron will automatically treat it like a normal web page, blocking access to all local files. Problem solved.</p>&#xA;",662807,"",,"",,2019-03-19T04:49:53,"","",,0,,,
55235168,2,,55216908,2019-03-19T06:53:15,,1,,"<p>Got to work with following steps,</p>&#xA;&#xA;<p>1.package the Electron app using command </p>&#xA;&#xA;<blockquote>&#xA;  <p>electron-packager .</p>&#xA;</blockquote>&#xA;&#xA;<p>2.Path to exe</p>&#xA;&#xA;<blockquote>&#xA;  <p>path.join(__dirname, ""DemoExe"", ""Sample.exe"")</p>&#xA;</blockquote>&#xA;",8112590,"",8112590,"",2019-03-20T07:22:14,2019-03-20T07:22:14,"","",,0,,,
55235876,2,,55235813,2019-03-19T07:50:42,,1,,"<p>You can use <a href=""https://electronjs.org/docs/api/browser-view"" rel=""nofollow noreferrer"">BrowserView</a> inside a BrowserWindow where you put your custom title bar.</p>&#xA;&#xA;<p>You can image BrowserView like an iframe.</p>&#xA;",5423742,"",,"",,2019-03-19T07:50:42,"","",,0,,,
55245064,2,,55242600,2019-03-19T15:51:47,,2,,"<p>I figured out that one way to debug the production app is run the .exe from a terminal with the argument <code>--remote-debugging-port=8315</code>. This will allow debugging by going to <a href=""http://localhost:8315"" rel=""nofollow noreferrer"">http://localhost:8315/</a> in chrome. </p>&#xA;",5898413,"",,"",,2019-03-19T15:51:47,"","",,0,,,
55265311,2,,55264943,2019-03-20T16:07:09,,1,,"<p>The WebView's getZoomLevel takes a callback instead of returning a value.</p>&#xA;&#xA;<blockquote>&#xA;  <p>.getZoomLevel(callback)&#xA;  callback Function</p>&#xA;  &#xA;  <p>zoomLevel Number&#xA;  Sends a request to get current zoom level, the callback will be called with callback(zoomLevel).</p>&#xA;</blockquote>&#xA;",10747134,"",,"",,2019-03-20T16:07:09,"","",,0,,,
55269433,2,,55254850,2019-03-20T20:12:32,,1,,"<p>Assuming that your index.html page is just the main page of your renderer process and isn't an external page that you're hosting in a <code>&lt;webview&gt;</code>, you can just send the value to the renderer and have it change whatever it needs to change in your index.html:</p>&#xA;&#xA;<p>index.html:</p>&#xA;&#xA;<pre><code>&lt;p id=""myParagraph""&gt;&lt;/p&gt;&#xA;&lt;script&gt; require(""./renderer.js""); &lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>main.js:</p>&#xA;&#xA;<pre><code>const mainWindow = new BrowserWindow({...});&#xA;mainWindow.loadFile(""./index.html"");&#xA;// ... later we get the `accessToken`&#xA;mainWindow.webContents.send(""got-access-token"", accessToken);&#xA;</code></pre>&#xA;&#xA;<p>renderer.js:</p>&#xA;&#xA;<pre><code>ipcRenderer.on(""got-access-token"", (event, accessToken) =&gt; {&#xA;    document.getElementById(""myParagraph"").innerText = accessToken;&#xA;});&#xA;</code></pre>&#xA;",3479456,"",,"",,2019-03-20T20:12:32,"","",,0,,,
55312883,2,,55294919,2019-03-23T10:44:28,,0,,"<p>First of all, you're not obliged to document everything in UML diagrams at all.  Because working software is more important than comprehensive documentation.  However, UML can be extremely useful to highlight some less trivial aspects of your software that can not be easily found in the code.  And lmy advice would be to focus on these aspects.   </p>&#xA;&#xA;<p>Now what you should do in UML all depends on what you intend to represent in your model, and how you're using js. </p>&#xA;&#xA;<p>UML distinguishes <a href=""https://www.uml-diagrams.org/uml-25-diagrams.html#structure-diagram"" rel=""nofollow noreferrer"">structure diagrams</a> to show the static view on your software and <a href=""https://www.uml-diagrams.org/uml-25-diagrams.html#behavior-diagram"" rel=""nofollow noreferrer"">behavioural diagrams</a> to show its dynamics.  </p>&#xA;&#xA;<h3>Structural diagrams</h3>&#xA;&#xA;<p>This could be less attractive to you, since JS is <a href=""https://en.wikipedia.org/wiki/Prototype-based_programming"" rel=""nofollow noreferrer"">prototype-based</a> and offers a great flexibility regarding the typing logic in contrary to the rather static class based view of UML. </p>&#xA;&#xA;<p>Nevertheless, you could still benefit from the concept of classes and use <a href=""https://www.uml-diagrams.org/class.html"" rel=""nofollow noreferrer"">class diagrams</a> in order to show either your design intent (i.e. your mental view on the object categorisation) or the prototype used to instantiate objects (especially &#xA;if you design some objects to act essentially as prototype, making them de facto as representatives for classes).  Of course, if your JS design is not at all object oriented, it would make no sense to map your program to OO concepts (see <a href=""https://softwareengineering.stackexchange.com/a/164960/209774"">here</a>).     </p>&#xA;&#xA;<p>Note that the legacy <a href=""https://www.uml-diagrams.org/class-diagrams-overview.html#object-diagram"" rel=""nofollow noreferrer"">object diagram</a> could make more sense for you, since it allows to explain the relations between objects rather than classes (see also <a href=""https://stackoverflow.com/a/9461713/3723423"">here</a>) </p>&#xA;&#xA;<p>In both cases, you may be especially interest in <a href=""https://www.uml-diagrams.org/dependency.html?context=class-diagrams"" rel=""nofollow noreferrer"">usage dependencies</a>  that help to link the static elements (i.e. objects or classes) to the behavioural intent.   </p>&#xA;&#xA;<p>Finally <a href=""https://www.uml-diagrams.org/package-diagrams-overview.html"" rel=""nofollow noreferrer"">package diagrams</a> could be used for example to show the big picture of your <code>.js</code> files and their dependencies.  It's not in the sense of the traditional java packages, but could also be useful.  </p>&#xA;&#xA;<h3>Behavioural diagrams</h3>&#xA;&#xA;<p>Here, I would pretend that all these diagrams could make sense for you.  </p>&#xA;&#xA;<p>The very first that comes to my mind is the <a href=""https://www.uml-diagrams.org/sequence-diagrams.html"" rel=""nofollow noreferrer"">sequence diagram</a>. Because it helps to visualise expected interactions between several <strong><em>objects</em></strong>, and these are difficult to find out just by browsing through the code.  </p>&#xA;&#xA;<p>In some cases, the <a href=""https://www.uml-diagrams.org/state-machine-diagrams.html"" rel=""nofollow noreferrer"">state machine diagram</a> could help as well.  This makes particular sense if the behaviour depends on some state variable, or if you want to show the full lifecycle of an object.   </p>&#xA;&#xA;<p>Finally, you can consider the <a href=""https://www.uml-diagrams.org/activity-diagrams.html"" rel=""nofollow noreferrer"">activity diagram</a>.  These are especially useful if you want to show the flow of control or of objects across your system.  If you're not familiar with them, and to simplify to the extreme,  it's a kind of super-flowchart, but where the arrows not jus represent ""next operation"" but could also represent objects that are passed between  operations.   </p>&#xA;",3723423,"",,"",,2019-03-23T10:44:28,"","",,0,,,
55313565,2,,55220637,2019-03-23T12:07:15,,0,,<p>I solved my problem. &#xA;I used <code>height: 1px;</code> for parent. And <code>height: 100%;</code> working well for child now.&#xA;I think in my case <code>flex-grow: 1;</code> have same behavior as <code>min-height: 100%;</code> that is why <code>height: 1px;</code> helped me fix my problem.</p>&#xA;&#xA;<pre><code>:host {&#xA;  flex-grow: 1;&#xA;  height: 1px; /* Required to make the child 100% of the flex-grow: 1 */&#xA;}&#xA;.jobs-table {&#xA;  height: 100%;&#xA;}&#xA;</code></pre>&#xA;,7551481,"",,"",,2019-03-23T12:07:15,"","",,0,,,
55322514,2,,55268562,2019-03-24T09:49:56,,0,,"<p>Ultimately, the most elegant solution to my particular problem was to add a http api endpoint for the Electron app using <a href=""https://koajs.com"" rel=""nofollow noreferrer"">koa</a>.</p>&#xA;&#xA;<pre><code>const Koa = require(""koa"");&#xA;const koa = new Koa();&#xA;&#xA;let mainWindow;&#xA;&#xA;function createWindow() {&#xA;  let startServer = function() {&#xA;    koa.use(async ctx =&gt; {&#xA;        mainWindow.show();&#xA;        console.log(""text received"", ctx.request.query.text);&#xA;        ctx.body = ctx.request.query.text;&#xA;    });&#xA;&#xA;    koa.listen(3456);&#xA;  };&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now I can easily send texts to Electron from outside the app using the following url:</p>&#xA;&#xA;<pre><code>localhost:3456?text=myText&#xA;</code></pre>&#xA;",1281694,"",,"",,2019-03-24T09:49:56,"","",,0,,,
55384491,2,,54898651,2019-03-27T18:47:22,,0,,"<p>I wasn't able to find if there's a way to test Karma with Electron using ndb, but what I did find is that making a custom launcher that extends karma-electron's launcher allows us to pass the <code>--show</code> option, as shown in this karma-electron issue on GitHub: <a href=""https://github.com/twolfson/karma-electron/issues/18"" rel=""nofollow noreferrer"">https://github.com/twolfson/karma-electron/issues/18</a>, which then allows us to hit the ""Debug"" button in the window that opens, then we can open the devtools inside of the Electron window to debug tests. After the devtools are open, we need to refresh the page to force tests to run again (that way it will stop on break points or debugger lines).</p>&#xA;",454780,"",,"",,2019-03-27T18:47:22,"","",,0,,,
55404318,2,,54628889,2019-03-28T18:13:45,,0,,"<p>Support for Electron v2+ is here now (try iohook version 0.4+). We are currently working on the Win32/64 support for electron 4. All other platforms are fine. You can follow the debug here : <a href=""https://github.com/wilix-team/iohook/pull/157"" rel=""nofollow noreferrer"">https://github.com/wilix-team/iohook/pull/157</a></p>&#xA;",1891989,"",,"",,2019-03-28T18:13:45,"","",,0,,,
55415628,2,,55408514,2019-03-29T10:41:33,,0,,"<p>Since <code>event.sender</code> its type <code>WebContents</code> you can't compare it with a <code>BrowserWindow</code>, only if you compare the <code>event.sender</code> with <code>BrowserWindow.webContents</code> property, but I guess that wouldn't provide an unique identification. A workaround to that would be comparing <code>event.sender.id</code> with <code>window.id</code></p>&#xA;&#xA;<pre><code>window.on ('close', (event) =&gt; {&#xA;    // Use event.sender to get the instance of the window that called this event&#xA;    console.log (event.sender.id === window.id); // -&gt; true&#xA;});&#xA;</code></pre>&#xA;",11267225,"",,"",,2019-03-29T10:41:33,"","",,0,,,
55424480,2,,55408190,2019-03-29T19:38:47,,0,,"<p>Found an way on <a href=""https://stackoverflow.com/a/44709146/9124836"">this answer</a></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>window.addEventListener('unload', event =&gt; {&#xA;    fs.writeFile('test.txt', 'Something');&#xA;});&#xA;</code></pre>&#xA;",9124836,"",,"",,2019-03-29T19:38:47,"","",,0,,,
55427231,2,,55427004,2019-03-30T01:10:14,,1,,"<p>You can achieve this by using ipc.</p>&#xA;&#xA;<p><strong>Original window render JS</strong></p>&#xA;&#xA;<pre><code>    import { ipcRenderer } from ""electron"";&#xA;&#xA;    let personName = 'Leandro'&#xA;    let personAge = -1&#xA;&#xA;    ipcRenderer.send(""send-data"", {name:personName, age:personAge})&#xA;</code></pre>&#xA;&#xA;<p><strong>Main/index.js</strong></p>&#xA;&#xA;<pre><code>    // When receives data from ipcRenderer/Original renderer &#xA;    // emits that data to channel ""here is your data""&#xA;    ipcMain.on(""send-data"", function(event, args){&#xA;        ipcMain.emit(""here-isyour-data"", data) &#xA;    })&#xA;</code></pre>&#xA;&#xA;<p><strong>Receiver renderer</strong></p>&#xA;&#xA;<pre><code>    let personName = null&#xA;    let personAge = null&#xA;    ipcRenderer.on(""here-isyour-data"",function(event, args) {&#xA;       personName = args.personName&#xA;       personAge = args.personAge&#xA;    })&#xA;</code></pre>&#xA;&#xA;<p>Its better to make the main index.js the controller, but if you want you can make the renderer process comunicate with each other using <code>ipcRenderer.sendTo()</code>.</p>&#xA;&#xA;<p><strong>To solve your problem you could do this</strong></p>&#xA;&#xA;<pre><code>// On creation/indexjs&#xA;let newWindow = new BrowserWindow()&#xA; newWindow.emit('hey, im created')&#xA;&#xA; // On render.js&#xA; let personName = null&#xA; let personAge = null&#xA; newWindow.once('oke, here is your data', function(event, args){&#xA;       personName = args.personName&#xA;       personAge = args.personAge&#xA;})&#xA;&#xA;// On original render.js&#xA;&#xA;    let personName = 'Leandro'&#xA;    let personAge = -1&#xA;    ipcRenderer.once(""hey, im created"", function(){&#xA;       ipcRenderer.send(""oke, here is your data"", {name:personName, age:personAge})&#xA;    })&#xA;</code></pre>&#xA;&#xA;<p><strong>OR</strong></p>&#xA;&#xA;<p>Have mainRenderer as middle man on ""// On creation/indexjs"".</p>&#xA;&#xA;<p>I hope that I've helped, I never used angular, but I think you're able to achieve this using electron.</p>&#xA;&#xA;<p>For more information visit electron: <a href=""https://electronjs.org/docs/api/ipc-renderer"" rel=""nofollow noreferrer"">ipc Docs</a></p>&#xA;&#xA;<p>If you want a cool and improving window handler go here: <a href=""https://github.com/leandrojesus-programmer/electron-window-handler"" rel=""nofollow noreferrer"">GitHub</a></p>&#xA;",11267225,"",11267225,"",2019-03-30T01:36:10,2019-03-30T01:36:10,"","",,0,,,
55268899,2,,55266463,2019-03-20T19:35:56,,2,,"<p>After several searches and attempts I think I've finally figured out how to send my application version from <em>package.json</em> to main then to the renderer. My issue was in my <code>app.on</code> I was missing <code>dom-ready</code> which helped after reading <a href=""https://stackoverflow.com/questions/48384476/ipc-communication-not-working-between-electron-and-window"">IPC Communication not working between Electron and window</a>:</p>&#xA;&#xA;<p><em>main.js</em>:</p>&#xA;&#xA;<pre><code>const appVersion = process.env.npm_package_version&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  mainWindow.createWindow()&#xA;  Menu.setApplicationMenu(mainMenu)&#xA;&#xA;  // Send version to renderer&#xA;  mainWindow.win.webContents.on('dom-ready', () =&gt; {&#xA;    console.log(`Trying to send app version to renderer: ${appVersion}`)&#xA;    mainWindow.win.webContents.send('app-version', appVersion)&#xA;  })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>renderer.js</em>:</p>&#xA;&#xA;<pre><code>ipcRenderer.on('app-version', (event, args) =&gt; {&#xA;    const appVersion = document.getElementById('app_version')&#xA;    console.log(`Node version is ${args}`)&#xA;    appVersion.innerHTML += args&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>index.html</em>:</p>&#xA;&#xA;<pre><code>&lt;div id=""app_version""&gt;&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>There might be a better way to do this but after further research I read:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://stackoverflow.com/questions/42284627/electron-how-to-know-when-renderer-window-is-ready"">Electron - How to know when renderer window is ready</a></li>&#xA;<li><a href=""https://electronjs.org/docs/api/web-contents#event-dom-ready"" rel=""nofollow noreferrer""><code>dom-ready</code></a> from <a href=""https://electronjs.org/docs/api/web-contents#instance-events"" rel=""nofollow noreferrer""><code>instance-events</code></a></li>&#xA;</ul>&#xA;&#xA;<p>and this works but next steps are to see if pulling the <code>process.env</code> is a good security practice. I do hope to see some other answers on a possible better approach if it exists.</p>&#xA;",1952287,"",,"",,2019-03-20T19:35:56,"","",,1,,,
55318391,2,,55318369,2019-03-23T21:06:59,,3,,<p>You're exporting an object containing both <code>SimpleLogger</code> and <code>DEFAULT_LEVEL</code> therefore to use it in main.js you need to reference it properly like so</p>&#xA;&#xA;<pre><code>const SimpleLogger = require('./simplelogger.js').SimpleLogger;&#xA;let log = new SimpleLogger('info');&#xA;</code></pre>&#xA;&#xA;<p>If you only want to export <code>SimpleLogger</code> you can change your export like so</p>&#xA;&#xA;<pre><code>module.exports = SimpleLogger&#xA;</code></pre>&#xA;&#xA;<p>Then you can require <code>SimpleLogger</code> as you do in your code.</p>&#xA;,2115971,"",,"",,2019-03-23T21:06:59,"","",,1,,,
55329821,2,,55327390,2019-03-25T00:13:53,,2,,"<p>I'm a little confused by what you're trying to do, but it sounds like you can just load the URL when the <code>close</code> event is triggered, cancel the event to prevent <code>closed</code> from firing, and then when the page has loaded, you could close again, but this time for real.</p>&#xA;&#xA;<pre><code>mainWindow.on('close', (e) =&gt; {&#xA;    mainWindow.webContents.on('did-finish-load', logOutPageLoaded);        &#xA;    mainWindow.loadURL('https://www.url.com/logout.php?logout=true');       &#xA;    e.preventDefault();&#xA;});&#xA;&#xA;function logOutPageLoaded() {&#xA;    mainWindow.destroy();&#xA;}&#xA;&#xA;mainWindow.on('closed', () =&gt; {              &#xA;    mainWindow = null;&#xA;    app.quit();&#xA;});&#xA;</code></pre>&#xA;",3479456,"",,"",,2019-03-25T00:13:53,"","",,1,,,
55353590,2,,55344701,2019-03-26T09:22:53,,1,,"<p>You can define a <code>session</code> (or <code>partition</code>) for <a href=""https://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer""><code>BrowserWindow</code></a> instances</p>&#xA;&#xA;<p>Browser windows in different sessions don't share cookies, so you just have to define different session for each of your windows. Like&#xA;</p>&#xA;&#xA;<pre><code>let counter = 0&#xA;&#xA;function createWindow() {&#xA;  let mainWindow = new BrowserWindow({&#xA;    webPreferences: {&#xA;      session: session.fromPartition(`${counter++}`)&#xA;    }&#xA;  })&#xA;  return mainWindow;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>or any more sophisticated way.</p>&#xA;",2550156,"",,"",,2019-03-26T09:22:53,"","",,1,,,
55385472,2,,51328586,2019-03-27T19:55:38,,4,,"<p>I used the <a href=""https://medium.com/@hql287/persisting-windows-state-in-electron-using-javascript-closure-17fc0821d37"" rel=""nofollow noreferrer"">solution here</a> which involves persisting your windows size and position in <code>electron-settings</code> and it works perfectly.</p>&#xA;&#xA;<p>Include the <code>windowStateKeeper</code> function in your code and then adapt your <code>createMainWindow</code> function as follows:</p>&#xA;&#xA;<pre><code>function createMainWindow() {&#xA;    const mainWindowStateKeeper = windowStateKeeper('main');&#xA;    const win = new electron.BrowserWindow({&#xA;        title: 'main',&#xA;        x: mainWindowStateKeeper.x,&#xA;        y: mainWindowStateKeeper.y,&#xA;        width: mainWindowStateKeeper.width,&#xA;        height: mainWindowStateKeeper.height&#xA;    });&#xA;    mainWindowStateKeeper.track(win);&#xA;&#xA;    win.loadURL(`file://${__dirname}/index.html`);&#xA;    win.on('closed', onClosed);&#xA;&#xA;    return win;&#xA;}&#xA;</code></pre>&#xA;",279255,"",,"",,2019-03-27T19:55:38,"","",,1,,,
55418408,2,,55418221,2019-03-29T13:23:14,,0,,"<p><code>forEach</code> is inherited from array and will iterate all elements of the tuple. Its callback parameter must then be a union of all possible elements in the array. </p>&#xA;&#xA;<p>From my reading of the code, you don't really want a tuple, you probably want an array of tuples of type <code>[string, BrowserWindow]</code></p>&#xA;&#xA;<pre><code>class BrowserWindow{}&#xA;let windows: [string, BrowserWindow][] = []&#xA;windows.push(['home', new BrowserWindow()])&#xA;/// use an arrow function with array parameter destructuring &#xA;windows.forEach(([valueString, valueWindow], index, array) =&gt; {&#xA;&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Or if you really want just a single tuple and you want to access the constituents of the tuple, you can use array destructuring:</p>&#xA;&#xA;<pre><code>let windows: [string, BrowserWindow] = ['home', new BrowserWindow()];&#xA;&#xA;let [valueString, valueWindow] = windows&#xA;</code></pre>&#xA;",125734,"",,"",,2019-03-29T13:23:14,"","",,1,,,
55266950,2,,55252943,2019-03-20T17:33:30,,1,,"<p>You can just pass in a value into <code>send</code> to make the distinction:</p>&#xA;&#xA;<pre><code>ipcRenderer.send(""eventName"", myArg, true);&#xA;ipcRenderer.sendSync(""eventName"", myArg, false);&#xA;</code></pre>&#xA;&#xA;<p>And then in your main code:</p>&#xA;&#xA;<pre><code>ipcMain.on('eventName', (event, arg, isAsync) =&gt; {&#xA;    if (isAsync) {&#xA;        event.sender.send('AsyncEventName', arg)&#xA;    } else {&#xA;        event.returnValue = arg&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>The other option is to use two different channels:</p>&#xA;&#xA;<pre><code>ipcRenderer.send(""eventName"", myArg);&#xA;ipcRenderer.sendSync(""eventNameSync"", myArg);&#xA;</code></pre>&#xA;&#xA;<p>And then in your main code:</p>&#xA;&#xA;<pre><code>ipcMain.on('eventName', (event, arg) =&gt; {&#xA;    event.sender.send('AsyncEventName', arg)&#xA;});&#xA;ipcMain.on('eventNameSync', (event, arg) =&gt; {&#xA;    event.returnValue = arg&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Personally, I prefer the second one.</p>&#xA;",3479456,"",,"",,2019-03-20T17:33:30,"","",,2,,,
55272776,2,,55272570,2019-03-21T02:06:11,,0,,"<p>If you mean can you set a webpage up so when its shrinks the content shrinks inside, You can try to use percentages when declaring the width and height of objects in your CSS</p>&#xA;&#xA;<p>If you mean can you set up a webpage so it loads the exact same on mac as it does on windows yes you can I would highly recommend making sure all your code is correct then using a validator to make sure your website will run on all Operating systems</p>&#xA;&#xA;<p>I recommend this website: <a href=""https://validator.w3.org/"" rel=""nofollow noreferrer"">W3 Validator</a></p>&#xA;",11234915,"",,"",,2019-03-21T02:06:11,"","",,2,,,
55326551,2,,55326416,2019-03-24T17:32:32,,2,,"<p>The first line of <code>scanFile</code> reads: </p>&#xA;&#xA;<p><code>if(!filepath || filepath[0] == 'undefined') return;</code></p>&#xA;&#xA;<p>This indicates to me that <code>filepath</code> is an array, not a string (or Buffer or URL). Check the output of the <code>console.log</code> statement to see if this is the case. Since the <code>if</code> statement is checking for <code>filepath[0]</code>, I'd start there and update the code to read <code>fs.readFile(filepath[0],""utf8"", (err,data) =&gt; {</code>, since the <code>if</code> statement implies that <code>filepath[0</code>] is the value you should be using</p>&#xA;",1121827,"",,"",,2019-03-24T17:32:32,"","",,2,,,
55340025,2,,55325232,2019-03-25T14:24:26,,1,,"<p>I'm not a security expert, but in my view, you don't get much benefit from turning on context isolation if you're never loading external content.</p>&#xA;&#xA;<p>The whole point of that flag is to run your preload script in an isolated JavaScript environment, so it's not affected by any changes, malicious or otherwise, that a page can make to JavaScript globals or object prototypes.</p>&#xA;&#xA;<p>For example, if my external page overwrites <code>Date.now</code>:</p>&#xA;&#xA;<pre><code>Date.now = () =&gt; return 1;&#xA;</code></pre>&#xA;&#xA;<p>And your preload script, or an Electron API that you're calling is calling <code>Date.now()</code>, then it will use the overwritten version instead of the original function.</p>&#xA;&#xA;<p>The <code>contextIsolation</code> flag mitigates against this type of attack.</p>&#xA;&#xA;<p>Electron <a href=""https://electronjs.org/docs/tutorial/security#3-enable-context-isolation-for-remote-content"" rel=""nofollow noreferrer"">says</a> themselves (emphasis added):</p>&#xA;&#xA;<blockquote>&#xA;  <p>Enable Context Isolation for <strong>Remote Content</strong></p>&#xA;</blockquote>&#xA;&#xA;<p>So no, you don't need it for local content.</p>&#xA;",3479456,"",,"",,2019-03-25T14:24:26,"","",,2,,,
55364932,2,,55364483,2019-03-26T19:30:16,,1,,"<p>Before get this error, I didn't read the complete error message the first time <code>node-gyp</code> failed, so I just ran <code>sudo ...</code> to see if it was magically solved, but got this EACCESS error after that.</p>&#xA;&#xA;<p>Later I realized that my <code>sudo</code> attempt screwed the permissions of my <code>node_modules</code>, removed it all with <code>-Rf</code> and reinstalled. The original <code>node-gyp</code> issue seems related to a current issue with the package for me.</p>&#xA;",885259,"",,"",,2019-03-26T19:30:16,"","",,2,,,
55373196,2,,55365388,2019-03-27T08:57:43,,0,,"<p>This article covers the 3 most common ways to store user data: <a href=""https://medium.com/cameron-nokes/how-to-store-user-data-in-electron-3ba6bf66bc1e"" rel=""nofollow noreferrer"">How to store user data in Electron</a></p>&#xA;&#xA;<p>The <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md"" rel=""nofollow noreferrer"">Electron API</a> for <code>appData</code>does what you want. It is very easy to use.</p>&#xA;&#xA;<p><em>From the above article:</em></p>&#xA;&#xA;<pre><code>const userDataPath = (electron.app || electron.remote.app).getPath('userData');&#xA;this.path = path.join(userDataPath, opts.configName + '.json')&#xA;this.data = parseDataFile(this.path, opts.defaults);   &#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code>function parseDataFile(filePath, defaults) {&#xA;&#xA;  try {&#xA;    return JSON.parse(fs.readFileSync(filePath));&#xA;  } catch(error) {&#xA;    // if there was some kind of error, return the passed in defaults instead.&#xA;    return defaults;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><em>Docs</em></p>&#xA;&#xA;<blockquote>&#xA;  <p>app.getPath(name)</p>&#xA;&#xA;<pre><code>name String&#xA;</code></pre>&#xA;  &#xA;  <p>Returns String - A path to a special directory or file associated with&#xA;  name. On failure, an Error is thrown.</p>&#xA;  &#xA;  <p>You can request the following paths by the name:</p>&#xA;&#xA;<pre><code>appData - Per-user application data directory, which by default points to:&#xA;    %APPDATA% on Windows&#xA;    $XDG_CONFIG_HOME or ~/.config on Linux&#xA;    ~/Library/Application Support on macOS&#xA;&#xA;userData - The directory for storing your app's configuration files,&#xA;which by default it is the appData directory appended with your app's&#xA;name.&#xA;</code></pre>&#xA;</blockquote>&#xA;",840992,"",,"",,2019-03-27T08:57:43,"","",,2,,,
55373440,2,,55353868,2019-03-27T09:12:41,,2,,"<p>Yes, you can use <code>npm</code>. The yargs issue is explained <a href=""https://github.com/electron-userland/electron-builder/issues/3751"" rel=""nofollow noreferrer"">here</a>. </p>&#xA;&#xA;<p>Your error messages tell you . . . what the errors are.</p>&#xA;&#xA;<blockquote>&#xA;  <p>error output:[ERROR] Unknown input file format:&#xA;  /home/MYUSERNAME/Documents/APP_DIRECTORY/dist/.icon-set/icon_ICN#.jp2&#xA;          Known file formats are *.j2k, *.jp2, *.jpc or *.jpt</p>&#xA;</blockquote>&#xA;&#xA;<p>I don't use or work on Linux so I don't know for sure if this is the case, but you are specifying a <code>.icns</code> file format for your icon. That is an <a href=""https://en.wikipedia.org/wiki/Apple_Icon_Image_format"" rel=""nofollow noreferrer"">OSX icon file format</a>. Your error message says that Electron Builder doesn't know what to do with that (on Linux).</p>&#xA;&#xA;<pre><code>""linux"": {&#xA;      ""target"": ""deb"",&#xA;      ""icon"": ""build/icon.icns"",&#xA;      ""category"": ""Office""&#xA;    }&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>The rest of the scary error text likely just cascades from that.</p>&#xA;",840992,"",840992,"",2019-03-27T09:18:33,2019-03-27T09:18:33,"","",,2,,,
55314936,2,,55314748,2019-03-23T14:47:16,,2,,"<p>A problem with directly connecting to the database is you have to embed the database credentials in the electron app which makes them available to anyone who wants to snoop through the code.  In addition, once the credentials are exposed, you lose control over what anyone can do to your database.</p>&#xA;&#xA;<p>This is why you would usually give the user their own credentials, have the user authenticate to a web server and then have the web server be the only one who can directly talk to the remote database.  You can then completely control what happens to the database since your web server is the intermediary and the only one that actually talks to the database.</p>&#xA;&#xA;<p>This doesn't mean that there aren't some circumstances where you might want the client to talk directly to the database as it really depends upon what you're doing, what the data is and what the risk exposure is for allowing untrusted code to directly manipulate the data in the database.  </p>&#xA;&#xA;<p>Remember, you cannot protect credentials embedded in a client.  They can be discovered by the client and used for other things.</p>&#xA;",816620,"",,"",,2019-03-23T14:47:16,"","",,3,,,
55320907,2,,55320825,2019-03-24T05:06:54,,2,,"<h1>You need to transpile lit-html before you can <code>require</code> it</h1>&#xA;&#xA;<p>I tested <code>require('lit-html')</code> and I was greeted with this error:</p>&#xA;&#xA;<pre><code>/home/chbphone55/Workspace/test/node_modules/lit-html/lit-html.js:31&#xA;import { defaultTemplateProcessor } from './lib/default-template-processor.js';&#xA;</code></pre>&#xA;&#xA;<p>It clearly states that the error is coming from <code>lit-html/lit-html.js:31</code> where the line uses ES Module <code>import</code> syntax.</p>&#xA;&#xA;<p>You can transpile it using tools like Babel or similar ones. However, you may want to try using ES Module syntax so you can import lit-html without transpiling it.</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;!-- HTML File --&gt;&#xA;&lt;script type=""module"" src=""index.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// index.js&#xA;import { html } from 'lit-html';&#xA;</code></pre>&#xA;&#xA;<h1>What if you can't use <code>type=""module""</code></h1>&#xA;&#xA;<p>If you are unable to use the <code>type=""module""</code> method above, you can also use <a href=""https://npm.im/esm"" rel=""nofollow noreferrer"">the ESM package</a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>ESM is a brilliantly simple, babel-less, bundle-less ECMAScript module loader.</p>&#xA;</blockquote>&#xA;&#xA;<p>Here are a few examples of how to use it:</p>&#xA;&#xA;<ol>&#xA;<li>Using the node require flag (<code>-r</code>) to load <code>esm</code> before everything else</li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code>node -r esm index.js&#xA;</code></pre>&#xA;&#xA;<ol start=""2"">&#xA;<li>Loading <code>esm</code> in your main file then loading the rest of your code.</li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// Set options as a parameter, environment variable, or rc file.&#xA;require = require('esm')(module/*, options*/)&#xA;module.exports = require('./main.js')&#xA;</code></pre>&#xA;",4709300,"",4709300,"",2019-06-17T23:28:27,2019-06-17T23:28:27,"","",,4,,,
55329058,2,,55328916,2019-03-24T22:07:36,,6,,"<p><code>shell.openItem</code> isn't designed for that. <br>&#xA;Use the <code>spawn</code> function of NodeJS from the <code>child_process</code> core module. </p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>let spawn = require(""child_process"").spawn;&#xA;&#xA;let bat = spawn(""cmd.exe"", [&#xA;    ""/c"",          // Argument for cmd.exe to carry out the specified script&#xA;    ""D:\test.bat"", // Path to your file&#xA;    ""argument1"",   // First argument&#xA;    ""argumentN""    // n-th argument&#xA;]);&#xA;&#xA;bat.stdout.on(""data"", (data) =&gt; {&#xA;    // Handle data...&#xA;});&#xA;&#xA;bat.stderr.on(""data"", (err) =&gt; {&#xA;    // Handle error...&#xA;});&#xA;&#xA;bat.on(""exit"", (code) =&gt; {&#xA;    // Handle exit&#xA;});&#xA;</code></pre>&#xA;",7575111,"",7575111,"",2019-10-17T13:28:50,2019-10-17T13:28:50,"","",,4,,,
55418894,2,,55418649,2019-03-29T13:49:19,,1,,"<p>I'd suggest trying to hook your server start off the <code>ready-to-show</code> event.</p>&#xA;&#xA;<pre><code>mainWindow.on('ready-to-show', () =&gt; {&#xA;   server.run();&#xA;   mainWindow.show()&#xA;})&#xA;</code></pre>&#xA;",840992,"",,"",,2019-03-29T13:49:19,"","",,4,,,
30776305,2,,30754948,2015-06-11T09:06:46,,0,,"<p>I finally found a way to do it:</p>&#xA;&#xA;<p>My flashforge is running sailfish 7.7 which doesn't recognize gcode commands. instead it requires a x3g file which is then written to the serialport.</p>&#xA;&#xA;<p>I found a way of using GPX: &#xA;<a href=""https://github.com/whpthomas/GPX"" rel=""nofollow"">https://github.com/whpthomas/GPX</a> </p>&#xA;&#xA;<p>which allows to me to input a gcode file and automaticly write it to the serial port.</p>&#xA;&#xA;<p>I hope this helps someone else.</p>&#xA;",1235370,"",,"",,2015-06-11T09:06:46,"","",,0,,,
30869819,2,,30869339,2015-06-16T13:58:55,,0,,<p>Try </p>&#xA;&#xA;<pre><code>$scope.revenueSQL = $scope.$eval(String(revSQL));&#xA;</code></pre>&#xA;&#xA;<p>to execute the expression on the current scope and returns the result.</p>&#xA;,1269578,"",,"",,2015-06-16T13:58:55,"","",,2,,,
30872812,2,,30870091,2015-06-16T16:08:38,,1,,"<p>There is no such API to drop all object stores, either you have iterate through all object store (which I think you don't want to do) or you can delete the database itself, as shown using below code:</p>&#xA;&#xA;<pre><code>            var dbDeleteRequest = window.indexedDB.deleteDatabase(DB_NAME);&#xA;            dbDeleteRequest.onerror = function(event) {&#xA;                //Code&#xA;            };&#xA;            dbDeleteRequest.onsuccess = function(event) {&#xA;                //Code&#xA;            };&#xA;</code></pre>&#xA;",4691279,"",,"",,2015-06-16T16:08:38,"","",,0,,,
30886687,2,,30886548,2015-06-17T08:51:06,,1,,"<p>You're logging the data but you're not passing anything to the completion callback (see below for some more explanation):</p>&#xA;&#xA;<pre><code>S3Store.prototype.readFileFromS3 = function(filename, callback) {&#xA;  var readConfig = {&#xA;      'Bucket': 'shubham-test',&#xA;      'Key': filename&#xA;  };&#xA;  var readStream = this.s3.getObject(readConfig).createReadStream();&#xA;  var allData = [];&#xA;&#xA;  // Keep collecting data.&#xA;  readStream.on('data', function(data) {&#xA;    allData.push(data);&#xA;  });&#xA;&#xA;  // Done reading, concatenate and pass to completion callback.&#xA;  readStream.on('end', function() {&#xA;    callback(null, Buffer.concat(allData));&#xA;  });&#xA;&#xA;  // Handle any stream errors.&#xA;  readStream.on('error', function(err) {&#xA;    callback(err, null);&#xA;  });&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>I took the liberty to rewrite the data collection to use Buffer's instead of strings, but this obviously isn't a requirement.</p>&#xA;&#xA;<p>The <code>callback</code> argument is a completion function, meant to be called when either reading the S3 stream is done, or when it has thrown an error. The error handling was already in place, but not the part where you would call back when all the data from the stream was read, which is why I added the <code>end</code> handler.</p>&#xA;&#xA;<p>At that point, the <code>readStream</code> is exhausted (everything from it has been read into <code>allData</code>), and you call the completion callback when the collected data <em>as second argument</em>.</p>&#xA;&#xA;<p>The common idiom throughout Node is that completion callbacks take (at least) two arguments: the first is either an error, or <code>null</code> when there aren't errors, and the second is the data you want to pass back to the caller (in your case, the anonymous function in your route handler that calls <code>res.send()</code>).</p>&#xA;",893780,"",893780,"",2015-06-17T09:03:55,2015-06-17T09:03:55,"","",,2,,,
30819355,2,,30784512,2015-06-13T13:43:35,,4,,"<p>It took me awhile to understand how to do this myself. The Squirrel.Windows Update.exe has the ability to create shortcuts to your app for you. I wrote a blog post called <a href=""http://www.mylifeforthecode.com/creating-a-windows-distribution-of-an-electron-app-using-squirrel/"" rel=""nofollow"">Creating a Windows Distribution of an Electron App using Squirrel</a> and in it I have Squirrel create the shortcuts for me. If you want to go this route, this is simplified version of how to have Squirrel create the shortcuts for you:</p>&#xA;&#xA;<pre><code>var cp = require('child_process');    &#xA;var updateDotExe = path.resolve(path.dirname(process.execPath), '..', 'update.exe');&#xA;var target = path.basename(process.execPath);&#xA;var child = cp.spawn(updateDotExe, [""--createShortcut"", target], { detached: true });&#xA;child.on('close', function(code) {&#xA;    app.quit();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You need to hack the electron executable using Resource Hacker, rcedit, or another application to change the ProductName and Icon resources. You'll want to call the above code on both the install and updated Squirrel events. </p>&#xA;",3399439,"",,"",,2015-06-13T13:43:35,"","",,4,,,
30712292,2,,30711563,2015-06-08T14:46:13,,5,,"<p>Check if <em>package.json</em> file exists in your <em>www</em> directory and has main js set inside.</p>&#xA;&#xA;<p>It should be something like:</p>&#xA;&#xA;<pre><code>{&#xA;  ""name""    : ""your-app"",&#xA;  ""version"" : ""0.1.0"",&#xA;  ""main""    : ""main.js""&#xA;}&#xA;</code></pre>&#xA;",1755718,"",1755718,"",2016-05-03T09:59:40,2016-05-03T09:59:40,"","",,0,,,
30763648,2,,30706707,2015-06-10T17:45:02,,5,,"<p>Your application should be ready before you register your shortcuts.&#xA;Here is an example:</p>&#xA;&#xA;<pre><code>var app = require('app');  &#xA;var globalShortcut = require('global-shortcut');&#xA;&#xA;// Your app must be ready before the registration&#xA;app.on('ready', function() {&#xA;    console.log('Your app is ready!');&#xA;&#xA;    // You can now register your shortcuts&#xA;    globalShortcut.register('ctrl+alt+j', function() {&#xA;        console.log('You fired ctrl+alt+j !!!');&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",4146020,"",,"",,2015-06-10T17:45:02,"","",,0,,,
30810320,2,,30809808,2015-06-12T18:56:10,,5,,"<p>The target .exe had ""Run this program as an administrator"" ticked. In order for node-webkit to execute it, my node app also has to be run as an administrator too.</p>&#xA;",241465,"",,"",,2015-06-12T18:56:10,"","",,0,,,
30824951,2,,30765923,2015-06-14T00:40:39,,8,,"<p>I discovered the issue and added an example to the <a href=""https://github.com/electron/electron/blob/master/docs/api/webview-tag.md#methods"" rel=""nofollow noreferrer"">Electron Documentation</a></p>&#xA;&#xA;<p>The bottom line is that you need to add a listener to the webview that listens for when the webview element is ready:</p>&#xA;&#xA;<pre><code>webview.addEventListener(""dom-ready"", function(){&#xA;  webview.openDevTools();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>According to @Shwany, the webview's methods will be available when the <code>did-start-loading</code> event is fired, however it may be better practice to wait until the webview element is completely ready using <code>dom-ready</code></p>&#xA;&#xA;<hr>&#xA;&#xA;<p>For a more detailed explanation:  </p>&#xA;&#xA;<p>When the window is initially rendering the DOM, the webview methods are not available. Initially, the prototype for the <code>&lt;webview&gt;</code> element is still the generic <code>HTMLElement</code>.  </p>&#xA;&#xA;<p>It as after the page renders that the <code>&lt;webview&gt;</code> element begins loading and then its prototype is changed to the webview prototype (same name as the element). And when it gains access to the webview prototype, it gains access to all of the webview prototype methods.</p>&#xA;",4152310,"",4152310,"",2017-03-30T00:33:14,2017-03-30T00:33:14,"","",,1,,,
30819052,2,,30814336,2015-06-13T13:11:47,,12,,"<p>On your BrowserWindow call the function <code>openDevTools()</code> this will open the same dev tools you find in Chrome. I wrote about this on my blog at <a href=""http://www.mylifeforthecode.com/debugging-renderer-process-in-electron/"">http://www.mylifeforthecode.com/debugging-renderer-process-in-electron/</a>.</p>&#xA;&#xA;<p>Here is a simple main.js file that includes openDevTools:</p>&#xA;&#xA;<pre><code>var app = require('app');&#xA;var BrowserWindow = require('browser-window');&#xA;&#xA;var mainWindow = null;&#xA;&#xA;app.on('window-all-closed', function() {&#xA;  if (process.platform != 'darwin')  &#xA;    app.quit();&#xA;});&#xA;&#xA;app.on('ready', function() {    &#xA;  mainWindow = new BrowserWindow({width: 800, height: 600});  &#xA;  mainWindow.loadUrl('file://' + __dirname + '/index.html');&#xA;  mainWindow.openDevTools();&#xA;  mainWindow.on('closed', function() {&#xA;    mainWindow = null;&#xA;  });  &#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You can also access this via a renderer process using the remote module. For the apps I have been tinkering with I bind the function <code>toggleDevTools</code> to F12. Something like this: </p>&#xA;&#xA;<pre><code>  var remote = require('remote');           &#xA;  document.addEventListener(""keydown"", function (e) {  &#xA;    if (e.keyCode === 123) { // F12&#xA;      var window = remote.getCurrentWindow();&#xA;      window.toggleDevTools();         &#xA;    }&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>Note that I have only tested the above with Electron in Windows. I am assuming the Linux and Mac versions work the same. If you are running Mac or Linux please let me know if they do not.</p>&#xA;",3399439,"",,"",,2015-06-13T13:11:47,"","",,3,,,
30747290,2,,30681639,2015-06-10T04:46:15,,37,,"<p><a href=""https://github.com/atom/electron/blob/72ebb2c9fe676ada1356dc673f315584d8834f32/docs/api/remote.md#remote"">Here</a> is a reference to your comment about the webContents process in the api, in the ""Note:"" under remotes. </p>&#xA;&#xA;<p>However, if you just want to trigger a function, you could also use the <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#webcontentssendchannel-arg1-arg2-"">webContents.send()</a> and <a href=""https://github.com/atom/electron/blob/30d815e28f0bf0215da9e5a0e85de280a86b5cc9/docs/api/ipc-main-process.md#ipc-main-process"">ipc(main process)</a> processes to trigger the appropriate code to run. Something like this...</p>&#xA;&#xA;<pre><code>// JS inside main process&#xA;const window = require('electron').BrowserWindow;&#xA;&#xA;ipc.on('menuItem-selected', function(){&#xA;    let focusedWindow    = window.getFocusedWindow();&#xA;    focusedWindow.webContents.send('file-save');&#xA;});&#xA;&#xA;// Inside the menu callback&#xA;require('ipc').on('file-save', function() {&#xA;  // File save function call here&#xA;});&#xA;</code></pre>&#xA;&#xA;<h2>Update:</h2>&#xA;&#xA;<p>For Electron version 0.35.0 and above, the ipc api changed to the following:</p>&#xA;&#xA;<pre><code>// In main process.&#xA;const ipcMain = require('electron').ipcMain;&#xA;&#xA;// In renderer process (web page).&#xA;const ipcRenderer = require('electron').ipcRenderer;&#xA;</code></pre>&#xA;",1846224,"",3960969,"",2016-04-08T10:41:45,2016-04-08T10:41:45,"","",,1,,,
57871808,2,,57867302,2019-09-10T13:24:41,,0,,"<p>I just read this on the docs </p>&#xA;&#xA;<p>""Note: On Windows and Linux an open dialog can not be both a file selector and a directory selector, so if you set properties to ['openFile', 'openDirectory'] on these platforms, a directory selector will be shown."" </p>&#xA;&#xA;<p>I'm going to leave it up in case someone could use this info</p>&#xA;",11740032,"",,"",,2019-09-10T13:24:41,"","",,0,,,
57944326,2,,57933635,2019-09-15T12:57:50,,0,,"<p>I prefered to use <code>webview</code> and i set <code>preload</code> tag on the webview based on the link below and every thing works as expected.<br>&#xA;<a href=""https://github.com/electron/electron/issues/2048"" rel=""nofollow noreferrer"">Github issues page</a></p>&#xA;",5160077,"",,"",,2019-09-15T12:57:50,"","",,0,,,
57978210,2,,57911651,2019-09-17T16:12:55,,0,,"<p>I fix it! The problem is the order that components be declareded. </p>&#xA;&#xA;<pre><code>new Vue({ &#xA;components: { App }, &#xA;i18n, &#xA;router, &#xA;store, &#xA;template: ""&lt;App/&gt;"" &#xA;}).$mount(""#app""); &#xA;</code></pre>&#xA;&#xA;<p>i18n must be before router!</p>&#xA;",6145723,"",,"",,2019-09-17T16:12:55,"","",,0,,,
58005142,2,,57821060,2019-09-19T06:43:49,,0,,"<p>So, <a href=""https://stackoverflow.com/questions/58000056/javascript-how-to-stringify-a-class-after-calling-new""><code>executeJavaScript</code></a> as suggested by Zapparatus ended up being part of the solution.</p>&#xA;&#xA;<p>This is what's going on in <code>renderer.js</code>.</p>&#xA;&#xA;<pre><code>view.webContents.executeJavaScript(`&#xA;  window.communicator = {&#xA;    request: function(data) {&#xA;      const url = 'prefix://?data=' + encodeURIComponent(JSON.stringify(data))&#xA;      const req = new XMLHttpRequest()&#xA;      req.open('GET', url)&#xA;      req.send();&#xA;    },&#xA;    receive: function(data) {&#xA;      alert('got: ' + JSON.stringify(data))&#xA;    }&#xA;  };&#xA;`)&#xA;const setContent = data =&gt; view.webContents.executeJavaScript(&#xA;  `window.communicator.receive(${JSON.stringify(data)})`&#xA;)&#xA;ipcRenderer.on('communicator', (event, message) =&gt; {&#xA;  setContent(`Hello, ${message}!`)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>We ended up setting up a custom protocol, similar to how its been done <a href=""https://www.npmjs.com/package/electron-safe-ipc"" rel=""nofollow noreferrer"">here</a>. In your <code>main.js</code> file set up the following:</p>&#xA;&#xA;<pre><code>const { app, session, protocol } = require('electron')&#xA;const { appWindows } = require('./main/app-run')&#xA;const { URL } = require('url')&#xA;&#xA;protocol.registerSchemesAsPrivileged([&#xA;  {&#xA;    scheme: 'prefix',&#xA;    privileges: {&#xA;      bypassCSP: true, // ignore CSP, we won't need to patch CSP&#xA;      secure: true // allow requests from https context&#xA;    }&#xA;  }&#xA;])&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  const sess = session.fromPartition('my-view-partition')&#xA;&#xA;  // https://electronjs.org/docs/tutorial/security#4-handle-session-permission-requests-from-remote-content&#xA;  sess.setPermissionRequestHandler((webContents, permission, callback) =&gt; {&#xA;    // Denies the permissions request&#xA;    const decision = false&#xA;    return callback(decision)&#xA;  })&#xA;&#xA;  sess.protocol.registerStringProtocol('prefix', (req, callback) =&gt; {&#xA;    const url = new URL(req.url)&#xA;    try {&#xA;      const data = JSON.parse(url.searchParams.get('data'))&#xA;      appWindows.main.webContents.send('prefix', data)&#xA;    } catch (e) {&#xA;      console.error('Could not parse prefix request!')&#xA;    }&#xA;    const response = {&#xA;      mimeType: 'text/plain',&#xA;      data: 'ok'&#xA;    }&#xA;    callback(response)&#xA;  })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>No <code>preload.js</code> or <code>postMessage</code> needed.</p>&#xA;",8331756,"",8331756,"",2019-09-19T06:48:56,2019-09-19T06:48:56,"","",,0,,,
58025575,2,,58025365,2019-09-20T09:28:03,,0,,"<p>Import <code>NgZone</code> in class where you subscribe to events and use method <code>run</code>. I didn't use IPC, but for push events from backend it worked</p>&#xA;&#xA;<pre><code>this.els.ipcRenderer.on('new-file', (event, file) =&gt; {&#xA;  console.log(file);&#xA;  this.ngZone.run(() =&gt; this.fileService.setFile(file));&#xA;});&#xA;</code></pre>&#xA;",9177552,"",,"",,2019-09-20T09:28:03,"","",,0,,,
58034145,2,,58033644,2019-09-20T19:25:41,,2,,"<p>This library should have all the functionality you need.</p>&#xA;&#xA;<pre><code>openAboutWindow({&#xA;  icon_path: 'path/to/icon.png'&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/rhysd/electron-about-window"" rel=""nofollow noreferrer"">https://github.com/rhysd/electron-about-window</a></p>&#xA;&#xA;<p>If you need more freedom, there is the ability to inject your own custom html as well using <code>use_inner_html</code>.</p>&#xA;",1128441,"",,"",,2019-09-20T19:25:41,"","",,0,,,
58054040,2,,57947536,2019-09-22T23:13:21,,1,,<p>There is a call to <code>.returning(...)</code> in somewhere in your app. Since you are using sqlite3 dialect that call is just ignored and will not have any effect on returned data.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>await knex('table1').insert({ foo: 'bar' }).returning('*');&#xA;</code></pre>&#xA;&#xA;<p>and </p>&#xA;&#xA;<pre><code>await knex('table1').insert({ foo: 'bar' });&#xA;</code></pre>&#xA;&#xA;<p>will return exactly same thing on sqlite dialect.</p>&#xA;,360060,"",,"",,2019-09-22T23:13:21,"","",,0,,,
58059349,2,,57959307,2019-09-23T09:23:43,,1,,"<p>So I figured it out. What I did was calling Python script from NodeJS with python-shell NPM package, and communicate between Python and NodeJS via stdin. Python script generates an image after doing some processing with OpenCV, encodes it as png, converts it to bytes, encode it as base64 and finally decodes it as ascii to be read on Node part.</p>&#xA;&#xA;<p>Python part is like this:</p>&#xA;&#xA;<pre><code>import cv2 as cv2&#xA;import base64&#xA;&#xA;source = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)&#xA;success, encoded_image = cv2.imencode('.png', source)&#xA;content = encoded_image.tobytes()&#xA;print(base64.b64encode(content).decode('ascii'))&#xA;</code></pre>&#xA;&#xA;<p>NodeJS part:</p>&#xA;&#xA;<pre><code>pyshell.on(""message"", function(message) {&#xA;  console.log(message)&#xA;});&#xA;&#xA;setInterval(() =&gt; {&#xA;  pyshell.send(data);&#xA;}, 300);&#xA;</code></pre>&#xA;&#xA;<p>More info here:&#xA;<a href=""https://stackoverflow.com/questions/57980693/cant-read-base64-encoded-image-in-node-js-which-is-sent-from-python"">Can&#39;t read Base64 encoded image in Node.js which is sent from Python</a></p>&#xA;",7951826,"",,"",,2019-09-23T09:23:43,"","",,0,,,
58059573,2,,57947550,2019-09-23T09:37:07,,0,,"<p>Updating nodeJS to latest build and running <a href=""https://electronjs.org/docs/tutorial/using-native-node-modules"" rel=""nofollow noreferrer"">electron-rebuild</a> solved my problem. Thank you Dave Newton for your help. Seems like there was an issue with epoll compilation which is used by <a href=""https://www.npmjs.com/package/onoff"" rel=""nofollow noreferrer"">onoff</a> package.</p>&#xA;",7413911,"",,"",,2019-09-23T09:37:07,"","",,0,,,
57879300,2,,57879152,2019-09-10T23:25:37,,0,,"<p>You are missing the fact that the callback to <code>.findOne()</code> is <strong><em>asynchronous</em></strong> and <strong><em>non-blocking</em></strong>.  That means that your request handler returns first and THEN, sometime later (after the <code>res.redirect()</code> has already been sent), the callback gets called.  So, the callback is too late for the redirect.  Instead, you need to do the <code>res.redirect()</code> inside the callback:</p>&#xA;&#xA;<pre><code>// POST services&#xA;app.post('/login', (req, res) =&gt; {&#xA;    const loginData = req.body;&#xA;    db.users.findOne({ username: loginData.uname }, function (err, doc) {&#xA;        if (err) {&#xA;            console.log(err);&#xA;            res.sendStatus(500);&#xA;            return;&#xA;        }&#xA;        req.session.userId = doc.id;&#xA;        if(doc.id === 1) console.log(""True""); // &lt; Output: True&#xA;        console.log(req.session.userId); // &lt; Output: 1&#xA;        res.redirect('/plan');&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Depending upon what session store you're using, you may also have to save any changes to your session before you redirect.</p>&#xA;",816620,"",,"",,2019-09-10T23:25:37,"","",,1,,,
57924338,2,,57924218,2019-09-13T13:15:18,,3,,"<p>You can bundle everthing using. <a href=""http://www.jrsoftware.org/isinfo.php"" rel=""nofollow noreferrer"">Innosetup</a>.</p>&#xA;&#xA;<p>You can use <a href=""https://winpython.github.io/"" rel=""nofollow noreferrer"">Standalone - Portable Winpython</a>.</p>&#xA;",4229717,"",,"",,2019-09-13T13:15:18,"","",,1,,,
58057507,2,,58050584,2019-09-23T07:25:30,,0,,"<p>Your error:</p>&#xA;&#xA;<pre><code>ReferenceError: path is not defined&#xA;</code></pre>&#xA;&#xA;<p>you use <code>path</code> &#xA;so try </p>&#xA;&#xA;<pre><code>//preload js&#xA;// added path&#xA;const path = require(""path"");&#xA;&#xA;var knex = require(""knex"")({&#xA;    client: ""sqlite3"",&#xA;    connection: {&#xA;        filename: path.join(__dirname, './database.sqlite')&#xA;    },&#xA;     useNullAsDefault: true&#xA;});  &#xA;</code></pre>&#xA;",3204473,"",,"",,2019-09-23T07:25:30,"","",,1,,,
57928001,2,,57923528,2019-09-13T17:28:42,,0,,"<p>Your question is rather vague for this site. If you want Vue.js to be the main framework for your electron app, <a href=""https://github.com/SimulatedGREG/electron-vue"" rel=""nofollow noreferrer"">this package</a> is a good option. It is really well done, and very well documented <a href=""https://simulatedgreg.gitbooks.io/electron-vue/content/en/"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;&#xA;<p>If, however, you just want to use Vue for a small part of your app, you can simply import it via npm (<code>npm install vue -s</code>) and use it where needed.</p>&#xA;&#xA;<pre><code>import Vue from 'vue'&#xA;&#xA;let app = new Vue({&#xA;  el: '#element',&#xA;  data() {&#xA;    return {}&#xA;  },&#xA;  ...&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>In this case, you'll find the <a href=""https://vuejs.org/v2/guide/#Getting-Started"" rel=""nofollow noreferrer"">Getting Started</a> section of the vue docs helpful. Good Luck!</p>&#xA;",3109473,"",,"",,2019-09-13T17:28:42,"","",,2,,,
57961875,2,,56787790,2019-09-16T17:39:36,,3,,"<p>I faced the same issue recently and after some research discovered this error is caused by Angular 8 not adding MIME types to Typescript files converted to js. If you <code>ng serve</code> and inspect the page, you'll notice the js scripts have a type of <code>""module""</code>, this confuses Electron. There are several workarounds, as discussed in this <a href=""https://github.com/angular/angular/issues/30835"" rel=""nofollow noreferrer"">GitHub issue</a>.</p>&#xA;&#xA;<p>What worked for me was simply changing the <code>""target""</code> property in the <code>""compilerOptions""</code> of <code>tsconfig.json</code> to <code>""es5""</code>.</p>&#xA;&#xA;<p>I hope someone finds this useful.</p>&#xA;",10198402,"",10198402,"",2019-09-16T17:44:49,2019-09-16T17:44:49,"","",,2,,,
58034341,2,,58033736,2019-09-20T19:42:43,,0,,"<p>Some of your options are about controlling a browser (#1, #2) while others are about embedding a browser (#3, #4). These are two different use cases and what you need depends on what your goal is.</p>&#xA;&#xA;<h3>Controlling a browser</h3>&#xA;&#xA;<p>If you want to control a browser to execute tasks, maybe even in the background without the end user noticing, you should go for option 1 (puppeteer) or 2 (chrome-remote-interface).</p>&#xA;&#xA;<p>I recommend to use <strong>puppeteer</strong> as this is the library developed by the Google Chrome developers and it comes with many functions for your use case (opening browser windows, navigating, setting cookies).</p>&#xA;&#xA;<p>I do not see any reason to worry about the <strong>Chrome DevTools Protocol</strong> being abandoned anytime soon. The Chrome DevTools fully rely on this protocol. In addition, Firefox (Mozilla bug tracker: <a href=""https://bugzilla.mozilla.org/show_bug.cgi?id=1316741"" rel=""nofollow noreferrer"">#1316741</a>,<a href=""https://bugzilla.mozilla.org/show_bug.cgi?id=1523097"" rel=""nofollow noreferrer"">#1523097</a>) and <a href=""https://docs.microsoft.com/en-us/microsoft-edge/devtools-protocol/"" rel=""nofollow noreferrer"">Edge</a> are already partly supporting the protocol making it even more unlikely to be abandoned in the future. (<a href=""https://github.com/WICG/devtools-protocol/"" rel=""nofollow noreferrer"">more information</a>)</p>&#xA;&#xA;<h3>Embedding a browser</h3>&#xA;&#xA;<p>If you need to embed a browser, meaning you are trying to show a browser inside your application, you should focus on the options 3 (Chrome Embedded Framework) or 4 (Electron).</p>&#xA;&#xA;<p>The <strong>Chrome Embedded Framework</strong> is a more low-level approach putting a separate browser into your application. But I cannot go into detail here, as I have never used this one myself.</p>&#xA;&#xA;<p><strong>Electron</strong> on the other hand <em>is</em> a browser, meaning the whole application is developed as web application. You can embed another browser window (<a href=""https://electronjs.org/docs/api/webview-tag"" rel=""nofollow noreferrer"">webview</a>) into your browser, which you can essentially control (similar to what puppeteer can do).</p>&#xA;&#xA;<h3>Directly using the Chromium code (option 5)</h3>&#xA;&#xA;<p>Although the Chromium project is split into multiple components, it sounds like you need a full browser. I once compiled the Chromium source code myself and it takes literally hours. Keep in mind, that he code consists of roughly 35 million lines of code (<a href=""https://www.openhub.net/p/chrome/analyses/latest/languages_summary"" rel=""nofollow noreferrer"">source</a>). Even if you figure out what parts of the code to use, it is more realistic that some low-level parts of the code change and break your implementation than the DevTools Protocol being abandoned. So, I definitely recommend to not follow this idea.</p>&#xA;&#xA;<h3>Alternatives</h3>&#xA;&#xA;<p>Depending on your use case, you could also take a look at DOM simulation libraries like <a href=""https://github.com/jsdom/jsdom"" rel=""nofollow noreferrer"">jsdom</a> or <a href=""https://github.com/cheeriojs/cheerio"" rel=""nofollow noreferrer"">cheerio</a>. These libraries are very limited in terms of their functionality and you might have to implement parts of the browser yourself, e.g. downloading the document, reading and setting headers to deal with cookies, etc.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>All in all, I recommend to go for puppeteer if you want to control a browser to execute tasks primarily in the background. If you need a browser window as part of your application go for Electron.</p>&#xA;",5627599,"",,"",,2019-09-20T19:42:43,"","",,2,,,
58000230,2,,58000056,2019-09-18T20:21:15,,1,,"<p>You had the solution in your question.&#xA;The same approach that works for functions works for classes too.</p>&#xA;&#xA;<pre><code>class Person {&#xA;  constructor({ name }) {&#xA;    this.getName = () =&gt; name;&#xA;  }&#xA;}&#xA;const str = '' + Person;&#xA;console.log(str);&#xA;</code></pre>&#xA;&#xA;<p><strong>Updated in response to additional data in question.</strong>&#xA;You can't serialize an object and make it cross execution boundaries because it is no longer data at that point, but instead is running in memory.</p>&#xA;&#xA;<p>One approach you could take is invoke all of the code inside the call to <code>executeJavaScript</code></p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>view.webContents.executeJavaScript(`&#xA;class Person {&#xA;  constructor({ name }) {&#xA;    this.getName = () =&gt; name;&#xA;  }&#xA;}&#xA;&#xA;window.person = new Person({name: 'John'});&#xA;`);&#xA;</code></pre>&#xA;&#xA;<p>Or alternatively</p>&#xA;&#xA;<pre><code>view.webContents.executeJavaScript(`&#xA;(function() {&#xA;    class Person {&#xA;      constructor({ name }) {&#xA;        this.getName = () =&gt; name;&#xA;      }&#xA;    }&#xA;&#xA;    window.person = new Person({name: 'John'});&#xA;})();&#xA;`);&#xA;</code></pre>&#xA;",15526,"",15526,"",2019-09-18T20:37:43,2019-09-18T20:37:43,"","",,3,,,
58034096,2,,58034041,2019-09-20T19:21:05,,1,,"<p>After creating your <code>BrowserWindow</code> you should call <code>maximize()</code></p>&#xA;&#xA;<pre><code>mainWindow1 = new BrowserWindow();&#xA;mainWindow1.loadFile(htmlPath);&#xA;mainWindow1.maximize();&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/browser-window#winmaximize"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/browser-window#winmaximize</a></p>&#xA;",1128441,"",,"",,2019-09-20T19:21:05,"","",,3,,,
58055786,2,,58055227,2019-09-23T04:46:25,,2,,"<p>Using 'createPersistedState' option of 'vuex-electon' saves in json format in 'AppData' path.</p>&#xA;&#xA;<pre><code>uerName/AppData/Roaming/Electron/vuex.json&#xA;</code></pre>&#xA;&#xA;<p>Remove 'createPersistedState' to disable saving.</p>&#xA;&#xA;<pre><code>import { createSharedMutations } from 'vuex-electron'&#xA;&#xA;export default new Vuex.Store({&#xA;  modules,&#xA;  plugins: [&#xA;    createSharedMutations()&#xA;  ],&#xA;  strict: process.env.NODE_ENV !== 'production'&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>see a <a href=""https://github.com/vue-electron/vuex-electron"" rel=""nofollow noreferrer"">https://github.com/vue-electron/vuex-electron</a></p>&#xA;",7566799,"",7566799,"",2019-09-23T07:01:30,2019-09-23T07:01:30,"","",,3,,,
58058858,2,,58045513,2019-09-23T08:54:25,,1,,"<p>If you set tasks like this:</p>&#xA;&#xA;<pre><code>app.setUserTasks([&#xA;    {&#xA;        program: process.execPath,&#xA;        arguments: '--force-quit',&#xA;        iconPath: process.execPath,&#xA;        iconIndex: 0,&#xA;        title: 'Force Quit App',&#xA;        description: 'This will close the app instead of minimizing it.'&#xA;    }&#xA;])&#xA;</code></pre>&#xA;&#xA;<p>When clicked, this will launch a new instance of your application with the command line argument <code>--force-quit</code>. You should handle that argument.</p>&#xA;&#xA;<p>Your use case makes sense only if you allow a <a href=""https://electronjs.org/docs/api/app#apprequestsingleinstancelock"" rel=""nofollow noreferrer"">single instance</a> of your application to be running. You need to get <a href=""https://nodejs.org/docs/latest/api/process.html#process_process_argv"" rel=""nofollow noreferrer""><code>argv</code></a> from the <a href=""https://electronjs.org/docs/api/app#event-second-instance"" rel=""nofollow noreferrer""><code>second-instance</code></a> event.</p>&#xA;&#xA;<pre><code>const { app } = require('electron')&#xA;let myWindow = null&#xA;&#xA;const gotTheLock = app.requestSingleInstanceLock()&#xA;&#xA;if (!gotTheLock) {&#xA;  app.quit()&#xA;} else {&#xA;  app.on('second-instance', (event, argv, workingDirectory) =&gt; {&#xA;    // Someone tried to run a second instance&#xA;    const forceQuit = argv.indexOf(""--force-quit"") &gt; -1;&#xA;    if (forceQuit) app.quit()&#xA;  })&#xA;&#xA;  // Create myWindow, load the rest of the app, etc...&#xA;  app.on('ready', () =&gt; {&#xA;  })&#xA;}&#xA;</code></pre>&#xA;",9698583,"",,"",,2019-09-23T08:54:25,"","",,3,,,
57877882,2,,57877633,2019-09-10T20:33:34,,1,,"<p><code>capturePage()</code> either returns a promise or receives a callback, so you have to wait for it to resolve (<code>await</code> or <code>then()</code>):</p>&#xA;&#xA;<pre><code>var ph = await wv.capturePage();&#xA;var pr = ph.toDataURL();&#xA;</code></pre>&#xA;&#xA;<p>or get your data url in the callback:</p>&#xA;&#xA;<pre><code>var ph = wv.capturePage(function (ph) {&#xA;  var pr = ph.toDataURL();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>Edit:</strong></p>&#xA;&#xA;<p>As issued in <a href=""https://github.com/electron/electron/issues/16241"" rel=""nofollow noreferrer"">here</a> it seems to be a known problem where function <code>&lt;webview&gt;.capturePage()</code> returns an empty object for electron 4.0. Workaround is:</p>&#xA;&#xA;<pre><code>&lt;webview&gt;.getWebContents().capturePage()&#xA;</code></pre>&#xA;",4893100,"",4893100,"",2019-09-10T21:37:48,2019-09-10T21:37:48,"","",,4,,,
57884739,2,,57884530,2019-09-11T08:06:10,,1,,"<p>You can do it with PowerShell:</p>&#xA;&#xA;<pre><code>steps:&#xA;- powershell: |&#xA;   $CI_BUILD_TAG = git describe --tags&#xA;   Write-Host ""##vso[task.setvariable variable=CI_BUILD_TAG]$CI_BUILD_TAG""&#xA;  displayName: 'Set the tag name as an environment variable'&#xA;</code></pre>&#xA;",7409220,"",,"",,2019-09-11T08:06:10,"","",,4,,,
58009219,2,,58008137,2019-09-19T10:41:45,,1,,"<p><code>autoUpdater.checkForUpdates()</code> is an asynchronous function that returns a promise. You can't catch these errors using a <code>try catch</code>.</p>&#xA;&#xA;<p>This is how you catch errors:</p>&#xA;&#xA;<pre><code>autoUpdater.checkForUpdates().catch(err =&gt; {&#xA;    console.error(`Something went wrong`, err);&#xA;});&#xA;</code></pre>&#xA;",9698583,"",,"",,2019-09-19T10:41:45,"","",,4,,,
57924384,2,,57921006,2019-09-13T13:17:48,,1,,"<p>You can change the route main to mainPage. Try below code</p>&#xA;&#xA;<pre><code>@app.route(""/mainPage"")&#xA;def index():&#xA;    return render_template('gui2.html')&#xA;&#xA;</code></pre>&#xA;",6310661,"",,"",,2019-09-13T13:17:48,"","",,5,,,
57979303,2,,57978713,2019-09-17T17:29:26,,1,,"<p>I have had success using <a href=""https://nodejs.org/api/globals.html#globals_dirname"" rel=""nofollow noreferrer"">__dirname</a> along with <a href=""https://www.npmjs.com/package/upath"" rel=""nofollow noreferrer"">upath</a> to build paths to assets. </p>&#xA;&#xA;<p>I like <code>upath</code> rather than <code>path</code> because it has a <code>toUnix</code> method which ""replaces the windows \ with the unix / in all string params &amp; results.""</p>&#xA;&#xA;<pre><code>var imgPath = upath.toUnix(upath.join(__dirname, ""assets"",""welcome.png"")); &#xA;</code></pre>&#xA;",840992,"",,"",,2019-09-17T17:29:26,"","",,5,,,
58030907,2,,57614066,2019-09-20T15:02:32,,12,,"<p>Alright, so I eventually did find a solution to this. This error was caused by attempting to install extra devtools using <a href=""https://github.com/MarshallOfSound/electron-devtools-installer"" rel=""noreferrer"">electron-devtools-installer</a>. I found that the error was caused by data being left over in the %AppData%/electron directory, and the %AppData%/[projectname] directory. Deleting these two directories solves this issue.</p>&#xA;",4047624,"",,"",,2019-09-20T15:02:32,"","",,7,,,
51408877,2,,51384444,2018-07-18T18:37:06,,0,,"<p>Your thinking about the problem wrong here, instead of adding the components via a string into the dom you'll need to start using <code>v-for</code> and components. For instance if we create the following component:</p>&#xA;&#xA;<pre><code>&lt;div&gt;&#xA;    {{emojiText}}&#xA;&lt;/div&gt;&#xA;&#xA;&lt;script&gt;&#xA;    export default {&#xA;       props: ['id', 'set', 'size', 'tooltip'],&#xA;        name: 'InnerEmojiHolder',&#xA;        data() {&#xA;            return {&#xA;                emojiText: '',&#xA;            };&#xA;        },&#xA;        methods: {&#xA;&#xA;        },&#xA;        ready(){&#xA;         // put logic to build emoji here using props&#xA;        }&#xA;    }; &#xA;&lt;script&gt;&#xA;</code></pre>&#xA;&#xA;<p>This can then be used inside of your existing component like so:</p>&#xA;&#xA;<pre><code>&lt;picker set=""emojione"" @select=""addEmoji"" /&gt;&#xA;&lt;div&gt;&#xA;  &lt;template :for=""emoji, index in currentInput""&gt;&#xA;    &lt;innerEmojiHolder :id=""index"" :set=""emoji.set"" :tooltip=""emoji.tooltip"" :size=""emoji.size"" : &gt;&lt;/innerEmojiHolder&gt;&#xA;  &lt;/template&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;script&gt;&#xA;    export default {&#xA;        name: 'Some',&#xA;        components: {&#xA;            picker: Picker,&#xA;            emoji: Emoji,&#xA;            innerEmojiHolder: innerEmojiHolder,&#xA;        },&#xA;        data() {&#xA;            return {&#xA;                currentInput: []&#xA;            };&#xA;        },&#xA;        methods: {&#xA;            addEmoji() {&#xA;             // Push our emoji variables into currentInput&#xA;            }&#xA;        }&#xA;    }; &#xA;</code></pre>&#xA;&#xA;<p></p>&#xA;&#xA;<p>This allows us to print out all of the emoji's using a for and will use the data from the parent inside of the child.</p>&#xA;",3342835,"",,"",,2018-07-18T18:37:06,"","",,0,,,
51412792,2,,51412687,2018-07-19T00:45:45,,1,,"<p>There is 1 npm package ""systeminformation"" which provides these details :&#xA;Below is the reference : <a href=""https://www.npmjs.com/package/systeminformation"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/systeminformation</a></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const si = require('systeminformation');&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;setInterval(function() {&#xD;&#xA;    si.mem(function(data) {&#xD;&#xA;        console.log('Memory-Information:');&#xD;&#xA;        console.log(data);&#xD;&#xA;    });&#xD;&#xA;}, 1000)</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4918404,"",,"",,2018-07-19T00:45:45,"","",,0,,,
51426726,2,,51181380,2018-07-19T15:35:35,,0,,<p>This is electron issue. There is a bug opened for this and it will be fixed in one of the future releases.</p>&#xA;,909603,"",,"",,2018-07-19T15:35:35,"","",,0,,,
51434812,2,,51390134,2018-07-20T03:51:52,,2,,"<p>The reason this is happening is because of this line:&#xA;<code>suggestions.couldBe.innerHTML+=""&lt;br&gt;"";</code></p>&#xA;&#xA;<p>What is happening is your Browser element is generating all new fresh HTML each loop because of the <code>+=</code> on the <code>innerHTML</code>.  </p>&#xA;&#xA;<p>Basically in pseudo code:</p>&#xA;&#xA;<pre><code>var temp = suggestions.couldBe.innerHTML + ""&lt;br&gt;;&#xA;suggestions.couldBe.innerHTML = temp;&#xA;</code></pre>&#xA;&#xA;<p>This causes your element that was added via the <code>suggestions.couldBe.appendChild(button);</code>  to be converted to html, then re-parsed and all new elements created from HTML each iteration of the loop.  Because your Button event handler was created in JS; it is lost when it recreated the button from the HTML version.</p>&#xA;&#xA;<p>You want to do this either all via JS; not mixing it.   So my suggestion would be to change this line:&#xA;<code>suggestions.couldBe.innerHTML+=""&lt;br&gt;"";</code></p>&#xA;&#xA;<p>to </p>&#xA;&#xA;<p><code>suggestions.couldBe.appendChild(document.createElement('br'));</code></p>&#xA;",4643009,"",,"",,2018-07-20T03:51:52,"","",,0,,,
51457864,2,,51454335,2018-07-21T16:07:01,,0,,"<p>Well it seems the folder was packaged after all in the asar file.  However you need to access the assets relatively from the apps environment variables.  I managed to get it working with this.</p>&#xA;&#xA;<pre><code>import React, { Component } from 'react';&#xA;import logo from './logo.svg';&#xA;import './App.css';&#xA;&#xA;const electron = window.require('electron');&#xA;const fs = electron.remote.require('fs');&#xA;const app = electron.remote.app;&#xA;&#xA;class App extends Component {&#xA;&#xA;    constructor(props) {&#xA;        super(props);&#xA;        this.state = {files: []}&#xA;    }&#xA;&#xA;    componentDidMount() {&#xA;        debugger;&#xA;        const appPath = app.getAppPath();&#xA;        console.log(appPath);&#xA;        const path = app.getPath('userData');&#xA;        console.log(path);&#xA;        fs.readdir(appPath + '/data', (err, files) =&gt; {&#xA;            debugger;&#xA;            this.setState({files: files});&#xA;        });&#xA;    }&#xA;&#xA;    renderFiles = () =&gt; {&#xA;        return this.state.files.map((file, index) =&gt; {&#xA;            return (&lt;p key={index}&gt;{file}&lt;/p&gt;);&#xA;        })&#xA;    }&#xA;&#xA;    render() {&#xA;        return (&#xA;          &lt;div className=""App""&gt;&#xA;            &lt;header className=""App-header""&gt;&#xA;              &lt;img src={logo} className=""App-logo"" alt=""logo"" /&gt;&#xA;              &lt;h1 className=""App-title""&gt;Welcome to React&lt;/h1&gt;&#xA;            &lt;/header&gt;&#xA;            &lt;p className=""App-intro""&gt;&#xA;              To get started, edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.&#xA;            &lt;/p&gt;&#xA;            {this.renderFiles()}&#xA;          &lt;/div&gt;&#xA;        );&#xA;    }&#xA;}&#xA;&#xA;export default App;&#xA;</code></pre>&#xA;&#xA;<p>Notice the <em>app.getAppPath();</em> it works but I'm getting more and more convinced I rather work with an established technology as C# or Java then keep on trying to learn react or any other web technology.  If you have to spend 80% of your dev time on trying to configure your application then developing meaningful software ... it's just not worth it !</p>&#xA;",1565758,"",,"",,2018-07-21T16:07:01,"","",,0,,,
51463927,2,,46788589,2018-07-22T09:54:08,,0,,"<p>The solution was to issue a self-signed certificate for a domain, which was added to the hosts file of all affected clients. The certificate authority was manually declared as trusted in all client machines.</p>&#xA;&#xA;<p>For a more general solution, one could use a any DNS resolution option so long as it is consistent across for all clients, and any signed certificate, while a self-signed-signature would require a manual addition of the CA file to all the clients.</p>&#xA;",5660689,"",,"",,2018-07-22T09:54:08,"","",,0,,,
51502873,2,,51333734,2018-07-24T15:49:19,,0,,<p>After having a hard time hitting my head on the table I discovered that the problem was caused by a typo in a configuration file.</p>&#xA;,4176250,"",,"",,2018-07-24T15:49:19,"","",,0,,,
51553203,2,,51539198,2018-07-27T07:45:42,,0,,"<p>Passing the following user options seems to do the trick:</p>&#xA;&#xA;<pre><code>{&#xA;  ...&#xA;  parts: {&#xA;    electronApp: {&#xA;      'stage-packages': ['libsecret-1-0'],&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",3187478,"",,"",,2018-07-27T07:45:42,"","",,0,,,
51556034,2,,51492003,2018-07-27T10:27:21,,15,,"<p>Finally struggling a lot and breaking head found a solution. First thing Electron-builder is not building files in the required location there are open bug issues in the GitHub.&#xA;You can refer these links for more&#xA;<a href=""https://github.com/electron-userland/electron-builder/issues/2021"" rel=""noreferrer"">1.Build Process Ignores <code>app/dist/</code> folder?</a></p>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-builder/issues/1929"" rel=""noreferrer"">2.Not all files in /app are packaged.</a> </p>&#xA;&#xA;<p>Usually in ReactJs and all they are using two package.json files to avoid confusion, and they are writing a lot webpack code. </p>&#xA;&#xA;<p>There is a work around which I found. &#xA;What exactly happening here is that angular-cli is outputting build files in the dist folder. Electron builder is also outputting its files in the dist folder.</p>&#xA;&#xA;<p>First thing I want clarify here is that If you run <strong>npm run dist</strong> electron builder is not going to build files for us.</p>&#xA;&#xA;<p>So first you need to build files running <strong>ng build</strong>.</p>&#xA;&#xA;<p>second you need to make changes in the package.json specifying build resources to make use of build files and you need to change electron-builder's output directory.</p>&#xA;&#xA;<p>Modified package.json looks something like this.</p>&#xA;&#xA;<pre><code>""main"": ""electron-main.js"",&#xA;&#xA;  ""build"": {&#xA;    ""appId"": ""com.example.companyDashboard"",&#xA;    ""productName"": ""Farmhub Companies Dashboard"",&#xA;    ""files"": [""**/*"", ""dist/**/*""],&#xA;&#xA;  ""directories"": {&#xA;      ""output"": ""release"",&#xA;      ""buildResources"": ""dist""&#xA;    },&#xA;    ""asar"":false,&#xA;    ""win"": {&#xA;&#xA;      ""target"": [&#xA;        ""nsis""&#xA;      ]&#xA;    },&#xA;    ""nsis"": {&#xA;      ""runAfterFinish"": true,&#xA;      ""license"":""LICENSE""&#xA;    }&#xA;  },&#xA;&#xA;  ""scripts"": {&#xA;    ""ng"": ""ng"",&#xA;    ""start"": ""ng serve"",&#xA;    ""pack"": ""build --dir"",&#xA;    ""dist"": ""build"",&#xA;    ""postinstall"": ""install-app-deps"",&#xA;    ""build"": ""ng build --prod"",&#xA;    ""test"": ""ng test"",&#xA;    ""lint"": ""ng lint"",&#xA;    ""e2e"": ""ng e2e"",&#xA;    ""electron"": ""electron ."",&#xA;    ""electron-build"": ""ng build --prod &amp;&amp; electron ."",&#xA;    ""electron-package"": ""electron-packager . FarmhubCompanyDashboard --platform=win32 --arch=x64""&#xA;  },&#xA;</code></pre>&#xA;&#xA;<p>If you run electron builder running command <strong>npm run dist</strong> It works like a breeze.</p>&#xA;",9059790,"",9059790,"",2018-07-27T10:34:08,2018-07-27T10:34:08,"","",,0,,,
51558839,2,,51551169,2018-07-27T13:19:11,,1,,"<p>All you need to do is pre-check the checkbox of every section you want to pre-collapse. Using your example, all you need to add is a <code>checked</code> attribute on the checkbox input in your <code>*ngFor</code> loop:</p>&#xA;&#xA;<pre><code>&lt;input id=""{{data.label}}"" type=""checkbox"" checked&gt;&#xA;</code></pre>&#xA;&#xA;<p>Here is a running example showing one section that starts collapsed, and one that starts expanded: <a href=""https://stackblitz.com/edit/clarity-sidenav-pre-collapsed?file=src/app/app.component.html"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/clarity-sidenav-pre-collapsed?file=src/app/app.component.html</a>&#xA;The only difference between the two is the <code>checked</code> attribute.</p>&#xA;",4847197,"",,"",,2018-07-27T13:19:11,"","",,0,,,
51576538,2,,51573300,2018-07-29T01:35:12,,0,,"<p>After much more googling I found <a href=""https://github.com/cloudinary/cloudinary_npm/issues/84"" rel=""nofollow noreferrer"">information on github</a> from cloudinary collaborator that progress isn't available for server-side uploading.</p>&#xA;",8425145,"",,"",,2018-07-29T01:35:12,"","",,0,,,
51578830,2,,51576213,2018-07-29T09:08:37,,1,,"<p>The URI needs to include the actual file contents and not just the path. For example, using formdata- </p>&#xA;&#xA;<pre><code>(function() {&#xA;    var f = document.getElementById('f');&#xA;&#xA;    if (f.files.length)&#xA;        processFile();&#xA;&#xA;    f.addEventListener('change', processFile, false);&#xA;&#xA;    function processFile(e) {&#xA;&#xA;        var f = document.getElementById('f');&#xA;        var file = f.files[0];&#xA;&#xA;        console.log(file);&#xA;        var formdata = new FormData();&#xA;&#xA;        formdata.append('file', file);&#xA;        //formdata.append('cloud_name', '&lt;cloud_name&gt;');&#xA;        formdata.append('upload_preset', '&lt;upload_preset&gt;');&#xA;&#xA;        var xhr = new XMLHttpRequest();&#xA;        xhr.open('POST', ""https://api.cloudinary.com/v1_1/&lt;cloud_name&gt;/upload"",true);&#xA;&#xA;        xhr.onload = function () {&#xA;            // do something to response&#xA;            console.log(this.responseText);&#xA;        };&#xA;&#xA;        xhr.send(formdata);&#xA;    }&#xA;})();&#xA;</code></pre>&#xA;",8051923,"",8425145,"",2018-07-29T20:03:00,2018-07-29T20:03:00,"","",,0,,,
51596135,2,,51595904,2018-07-30T14:21:09,,3,,"<p>Well, if you use Cordova you should place your build files in the dist folder, as you are used to. Then I do the following:</p>&#xA;&#xA;<p>After Installing Cordova initialize in your project</p>&#xA;&#xA;<pre><code>cordova create mobile com.f1lt3r.""${PWD##*/}""&#xA;cd mobile&#xA;</code></pre>&#xA;&#xA;<p>Lets add the Android platform</p>&#xA;&#xA;<pre><code>cordova platform add android&#xA;</code></pre>&#xA;&#xA;<p>This creates a mobile folder with the Cordova project in it. Next, create a symbolic link from your project build files to the Cordova web root.</p>&#xA;&#xA;<pre><code>cd ..&#xA;rm -rf mobile/www/*&#xA;ln -s $(pwd)/dist/* $(pwd)/mobile/www&#xA;</code></pre>&#xA;&#xA;<p>Now, for Electron you could take a look at the config files of SimulatedGREG/electron-vue, I am not too familiar with this, but I think it would be possible to do something similar as with Cordova. </p>&#xA;",5562492,"",,"",,2018-07-30T14:21:09,"","",,0,,,
51398061,2,,51397019,2018-07-18T09:13:34,,-1,,"<p>You should look into how exactly your solutions are built, instead of focusing on the technology itself. If your team builds your backend with this in mind, you can create APIs that your clients(React Web App, Electron Desktop App) can connect to.</p>&#xA;&#xA;<p>To answer the question: No, it is not a good choice to <em>begin development</em> of your web app project without considering future implications of your design. Focus your time on how your backend talks to your front end.</p>&#xA;&#xA;<p>Moreover, ReactJS is only a front end library, you can use it with Electron, Check out some GitHub Hug Repos like: <a href=""https://github.com/harshattray/Re-Electron"" rel=""nofollow noreferrer"">Re-Electron</a>  , <a href=""https://github.com/alanbsmith/react-electron-starter"" rel=""nofollow noreferrer"">React-Electron-Starter</a>, <a href=""https://github.com/tahnik/electron-react"" rel=""nofollow noreferrer"">Electron-React</a></p>&#xA;",5890776,"",,"",,2018-07-18T09:13:34,"","",,1,,,
51404249,2,,51372010,2018-07-18T14:11:34,,4,,"<pre><code>app.commandLine.appendSwitch('js-flags', '--expose_gc --max-old-space-size=128')&#xA;</code></pre>&#xA;&#xA;<p>The first argument of appendSwitch does not use the <code>--</code> prefix, just drop that. The seconds argument is parsed as is, thats why it keeps the prefix.</p>&#xA;&#xA;<p>Also be aware it only exposes gc for the renderer if you use apppendSwitch, if you want to use it there you will need to add the CLI argument.</p>&#xA;",5115009,"",,"",,2018-07-18T14:11:34,"","",,1,,,
51521488,2,,51406443,2018-07-25T14:30:58,,0,,"<p>You should call this when DOM is ready (that is <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-dom-ready"" rel=""nofollow noreferrer""><code>'dom-ready'</code></a>)</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const {app, BrowserWindow} = require('electron')&#xA;const path = require('path')&#xA;&#xA;let mainWindow = null&#xA;app.once('ready', () =&gt; {&#xA;  mainWindow = new BrowserWindow({})&#xA;  const executeOnHTML = () =&gt; {&#xA;    mainWindow.webContents.executeJavaScript(`&#xA;      document.getElementById('minimize-button').addEventListener('click', function (e) {&#xA;        const { remote } = require('electron')&#xA;        var window = remote.BrowserWindow.getFocusedWindow()&#xA;        window.minimize()&#xA;      })&#xA;    `)&#xA;  }&#xA;  mainWindow.webContents.once('dom-ready', executeOnHTML)&#xA;  mainWindow.loadURL(path.join(__dirname, 'index.html'))&#xA;})&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Also, there are a lot of different ways to do the same instead of putting everything in one file.</p>&#xA;&#xA;<ul>&#xA;<li>You can define HTML behavior in a js referred from HTML (<code>&lt;script src=...&gt;</code>)</li>&#xA;<li>You can use IPC to communicate between Main and Renderer process</li>&#xA;</ul>&#xA;&#xA;<p><em>I also suggest you to read about <a href=""https://electronjs.org/docs/tutorial/application-architecture"" rel=""nofollow noreferrer"">electron's Processes</a></em></p>&#xA;",2550156,"",,"",,2018-07-25T14:30:58,"","",,1,,,
51539070,2,,51493236,2018-07-26T12:39:54,,1,,"<p>I am using <a href=""https://www.npmjs.com/package/universal-analytics#setting-persistent-parameters"" rel=""nofollow noreferrer"">universal-analytics</a> and in the server, I set my tracking Id and set <code>global.param = ua</code>. Now in renderer I used this param to access all features.</p>&#xA;",6940664,"",,"",,2018-07-26T12:39:54,"","",,1,,,
51392485,2,,51392093,2018-07-18T01:57:46,,1,,<p>You need to install Electron globally like so</p>&#xA;&#xA;<p><code>npm install -g electron</code></p>&#xA;&#xA;<p>Do you get the same error message if you install and run right after each other in the same terminal?</p>&#xA;&#xA;<pre><code>npm install -g electron&#xA;electron .&#xA;</code></pre>&#xA;,835611,"",,"",,2018-07-18T01:57:46,"","",,2,,,
51429281,2,,51369979,2018-07-19T18:07:38,,16,,"<h3>I found a way to solve the problem.</h3>&#xA;&#xA;<p>I added a script in the index.html:</p>&#xA;&#xA;<pre><code>&lt;script src=""scripts/script.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>and this is the content of script.js:</p>&#xA;&#xA;<pre><code>window.$ = window.jQuery = require('jquery'); // not sure if you need this at all&#xA;window.Bootstrap = require('bootstrap');&#xA;</code></pre>&#xA;&#xA;<p>and we can remove these lines from index.html to avoid double import:</p>&#xA;&#xA;<pre><code>&lt;script src=""node_modules/jquery/dist/jquery.min.js""&gt;&lt;/script&gt;&#xA;&lt;script src=""node_modules/popper.js/dist/umd/popper.min.js""&gt;&lt;/script&gt;&#xA;&lt;script src=""node_modules/bootstrap/dist/js/bootstrap.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>I found this solution at: <a href=""https://github.com/understrap/understrap/issues/449"" rel=""noreferrer"">https://github.com/understrap/understrap/issues/449</a>,&#xA;under the comment from karo1915.</p>&#xA;",9004692,"",,"",,2018-07-19T18:07:38,"","",,2,,,
51517518,2,,51428982,2018-07-25T11:14:20,,5,,"<p>I meet the same problem.I search the solution for a long time,finally I find <a href=""https://github.com/Microsoft/vscode/issues/3011"" rel=""nofollow noreferrer"">this page</a>,it shows that it's the problem of vscode process's environment.so you should create new process by this mode:</p>&#xA;&#xA;<pre><code>var spawn_env = JSON.parse(JSON.stringify(process.env));&#xA;console.log(process.env);&#xA;delete spawn_env.ATOM_SHELL_INTERNAL_RUN_AS_NODE;&#xA;delete spawn_env.ELECTRON_RUN_AS_NODE;&#xA;var spawn = require('child_process').spawn;&#xA;spawn(cmd,[],{env:spawn_env,detached:true});&#xA;</code></pre>&#xA;&#xA;<p>If not work,please modify your <code>.vscode/tasks.json</code> in your extension project:</p>&#xA;&#xA;<pre><code>""version"":""your version""&#xA;""options"": {&#xA;    ""env"":{//add this element&#xA;    }&#xA;},&#xA;...&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>Hope it can work!</p>&#xA;",7275118,"",7275118,"",2018-08-03T01:45:04,2018-08-03T01:45:04,"","",,2,,,
51520904,2,,51446359,2018-07-25T14:03:00,,3,,"<p>There's a <code>BrowserWindow</code> API for this: </p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#wingetnativewindowhandle"" rel=""nofollow noreferrer""><code>win.getNativeWindowHandle()</code></a></p>&#xA;&#xA;<p>which return the HWND you can use in any native windows code</p>&#xA;&#xA;<p>In your case I guess you can use it like this:&#xA;</p>&#xA;&#xA;<pre><code>byte[] bytes = new byte[8];&#xA;for (int i = 0; i &lt; data.Length; i++) {&#xA;  object item = data[i];&#xA;  bytes[i] = (byte)(int)item;&#xA;}&#xA;return BitConverter.ToUInt64(bytes, 0);&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2018-07-27T06:25:06,2018-07-27T06:25:06,"","",,2,,,
51550631,2,,51502270,2018-07-27T04:06:43,,2,,"<p>Unfortunately that is the drawback of electron windows architecture: each window is like a separate Chrome browser, with its own process. Therefore it has to reload all its HTML, JS and CSS, without being able to re-use (memory-wise) whatever was in another window.</p>&#xA;&#xA;<p>In the case of an SPA (Single Page Application), yeah that definitely means reloading your whole SPA in the new window, even if you had all the code to render your new window content in your previous window.</p>&#xA;&#xA;<p>It is a very similar case as trying to open a view of your SPA in a popup browser window. See <a href=""https://stackoverflow.com/questions/39900361/how-can-i-render-an-angular-directive-in-a-popup-window-allow-it-to-communicate"">How can I render an Angular directive in a popup window, allow it to communicate with the main window?</a></p>&#xA;&#xA;<p>Electron child windows will not be of any help either. The concept of ""child"" window is only to make sure the user cannot display the ""parent"" window in front of the ""child"" before the latter is closed. But the child window still has to load its own assets.</p>&#xA;&#xA;<p>Of course you could simply resort to avoid using new windows, and use some modals or traditional routing within your main window (very much like a normal browser web app).</p>&#xA;&#xA;<p>But if you really want to benefit from electron and the desktop app experience by opening new windows, then there is usually not such a hard time reloading your entire SPA in the latters. On the contrary of a web app, all your assets are locally available and they load quickly (unless you do have a MB size app…)</p>&#xA;&#xA;<p>Now as to how to open the new window to a specific URL / route, simply configure your router to use a hash scheme, so that you can write your URL to open your common <code>index.html</code> file but with a route passed as the hash part, e.g.:</p>&#xA;&#xA;<pre><code>newWindow.loadURL(`file://${__dirname}/index.html#!/question`);&#xA;</code></pre>&#xA;&#xA;<p>Then your router will automatically catch it when the SPA loads in the new window, and display the corresponding view.</p>&#xA;&#xA;<p>See for example:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://stackoverflow.com/questions/38962182/blank-screen-when-navigating-angular-routes-within-electron-app"">Blank screen when navigating Angular routes within Electron app</a></li>&#xA;<li><a href=""https://discuss.atom.io/t/angular-ngroute-not-working/32605"" rel=""nofollow noreferrer"">https://discuss.atom.io/t/angular-ngroute-not-working/32605</a></li>&#xA;</ul>&#xA;",5108796,"",,"",,2018-07-27T04:06:43,"","",,2,,,
51586349,2,,51586069,2018-07-30T02:42:35,,1,,"<p>OK, shame on me, I should have just read the documentation more thoroughly. I had to post a question here (after half a day of research) to find the right answer! But it might help others as I stumbled on the same kind of problem on a lot of different forum.</p>&#xA;&#xA;<p>So if you check the README file of the datatables.net package, you've got the answer:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;  var $ = require( 'jquery' );&#xA;  require( 'datatables.net' )( window, $ );&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Is the way of making the plug-in works without any more errors or lines to call them as I have see on some answers. It's loading jQuery and the Datatables script. It's working like a charm now!</p>&#xA;&#xA;<p>I reckon that page can be useful too: <a href=""https://datatables.net/download/npm"" rel=""nofollow noreferrer"">https://datatables.net/download/npm</a></p>&#xA;",6927394,"",,"",,2018-07-30T02:42:35,"","",,2,,,
51512866,2,,51499900,2018-07-25T07:11:15,,0,,"<p>You could write a little script, say in your <code>tools</code> directory of the project and use <a href=""https://www.npmjs.com/package/virtualbox"" rel=""nofollow noreferrer"">virtualbox</a> package.</p>&#xA;&#xA;<p>Something like this:</p>&#xA;&#xA;<pre><code>const virtualbox = require('virtualbox');&#xA;virtualbox.start(process.env.VBOX_MACHINE_NAME, (err) =&gt; {&#xA;  if (err) {&#xA;    console.log('Error starting machine', err);&#xA;    process.exit(1);&#xA;  }&#xA;  process.exit();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then add it to your scripts:</p>&#xA;&#xA;<pre><code>""startBackend"": ""node tools/start-vm.js"",&#xA;""start"": ""npm run startBackend &amp;&amp; ng build""&#xA;</code></pre>&#xA;&#xA;<p>Notice the <code>process.exit()</code> and <code>process.exit(1)</code> - with the first, you exit cleanly and your ng build will run. With the second (give it a positive integer argument), you signal an error with the VM startup process so you don't run ng build.</p>&#xA;",162070,"",,"",,2018-07-25T07:11:15,"","",,5,,,
51401257,2,,51399187,2018-07-18T11:48:02,,4,,"<p><strong>Edit:</strong> <strong>Verifying that a request came from your desktop application and not a clone of it to your server is not really possible</strong> unless you control the locations where it is installed, but for a user program you don't. You can place some meagre barriers, but you can't provide any guarantees. It looks like iOS/Android are moving on this front, I imagine the only viable implementation would be for the OS to send a verified credential on your behalf, that is OS level support, not application level support.</p>&#xA;&#xA;<p>As for general OAuth 2.0 authentication methods...</p>&#xA;&#xA;<p>If we go through the motions here, we can analyse each method of authorisation and take a look at the risk of this. <a href=""https://developers.google.com/identity/protocols/OAuth2"" rel=""nofollow noreferrer"">https://developers.google.com/identity/protocols/OAuth2</a></p>&#xA;&#xA;<ol>&#xA;<li><a href=""https://developers.google.com/identity/protocols/OAuth2WebServer"" rel=""nofollow noreferrer"">https://developers.google.com/identity/protocols/OAuth2WebServer</a> (I think you're in this camp, but there's no <code>client_secret</code> here)&#xA;&#xA;<ul>&#xA;<li><strong>Only risk of DOS against your client credentials.</strong> The responses are only ever acknowledged and forwarded to the specified redirect Uri, so requests can be made on your behalf for tokens, but only your server will ever receive the tokens (assuming the user agent is decent), you should deal with the case where you receive unknown token responses.</li>&#xA;</ul></li>&#xA;<li><p><a href=""https://developers.google.com/identity/protocols/OAuth2InstalledApp"" rel=""nofollow noreferrer"">https://developers.google.com/identity/protocols/OAuth2InstalledApp</a></p>&#xA;&#xA;<ul>&#xA;<li><p><strong>Risk of User installing a malicious app.</strong> When you lose the <code>client_id</code>, <code>client_secret</code> and the <code>redirectUri</code> (you have no way to keep these private against debugging of the device), then anybody will be able to make apps on your behalf. This is an unfortunate problem for mobile apps. The only defence is the User consent screen for now, that is, hopefully the User notices by looking at the consent screen that they have been duped into installing a malicious app from the store instead of your legitimate app.</p>&#xA;&#xA;<p>I'd love to see some more work on this front, perhaps the App Stores could hold some credentials on your behalf and then confirm that it is your app requesting, I imagine that would involve some hash checking etc.</p>&#xA;&#xA;<p><em>I'd be even happier to be corrected on this one, but I see nothing preventing the above problem :P</em></p></li>&#xA;</ul></li>&#xA;<li><a href=""https://developers.google.com/identity/protocols/OAuth2UserAgent"" rel=""nofollow noreferrer"">https://developers.google.com/identity/protocols/OAuth2UserAgent</a> &#xA;&#xA;<ul>&#xA;<li><strong>Same as 1.</strong></li>&#xA;</ul></li>&#xA;<li><a href=""https://developers.google.com/identity/protocols/OAuth2ForDevices"" rel=""nofollow noreferrer"">https://developers.google.com/identity/protocols/OAuth2ForDevices</a>&#xA;&#xA;<ul>&#xA;<li><strong>Same as 2.</strong></li>&#xA;</ul></li>&#xA;</ol>&#xA;",4214709,"",4214709,"",2018-07-18T12:01:32,2018-07-18T12:01:32,"","",,6,,,
51405607,2,,51404718,2018-07-18T15:17:26,,2,,"<p>The correct type for a ViewChild is ElementRef (unless it is a more-specific Angular component, but that doesn't appear to be the case here).</p>&#xA;&#xA;<pre><code>@ViewChild('webview') webview: ElementRef;&#xA;</code></pre>&#xA;&#xA;<p>According to the Electron documentation, you need to wait for the dom-ready event before accessing the API:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Note: The webview element must be loaded before using the methods.</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>const webview = document.querySelector('webview')&#xA;webview.addEventListener('dom-ready', () =&gt; {&#xA;    webview.openDevTools()&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>... which, therefore, translated into angular-speak in your ngAfterViewInit would be:</p>&#xA;&#xA;<pre><code>let webviewNative: WebviewTag = this.webview.nativeElement;&#xA;webviewNative.addEventListener('dom-ready', () =&gt; {&#xA;    webviewNative.openDevTools();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I don't think you should leave the <code>@ViewChild</code> as ""any"" type and overwrite it like you are, that's asking for trouble because you're losing all the typescript typings by doing that. </p>&#xA;&#xA;<p>If you want to have a class-level reference to the native WebViewTag, declare an additional class variable <code>webviewNative: WebViewTag = null;</code> and populate it in ngAfterViewInit with <code>this.webviewNative = this.webview.nativeElement;</code>.</p>&#xA;",789529,"",789529,"",2018-07-23T08:45:51,2018-07-23T08:45:51,"","",,6,,,
58703067,2,,58702553,2019-11-05T01:03:53,,0,,"<p>I've figured it out after a lot of testing with the path, it seems like linux doesn't like it if the folder doesn't exist yet. So either create the folder first or don't specify a path for the database</p>&#xA;&#xA;<pre><code>var productsDB = new PouchDB(""products"");&#xA;</code></pre>&#xA;",5797253,"",,"",,2019-11-05T01:03:53,"","",,0,,,
58711156,2,,58660828,2019-11-05T12:14:55,,3,,"<p>There is issue like in electron, When we run app in development mode it will log firebase event easily because the app is run on localhost:3000 so a event will work.</p>&#xA;&#xA;<p>But when we create a build for mac/windows it will not log the event because <a href=""https://www.npmjs.com/package/firebase"" rel=""nofollow noreferrer"">firebase</a> package work when a build run on <strong>http</strong> protocol and our electron app production build run a <strong>file://</strong> protocol.</p>&#xA;&#xA;<p>So here we have to use Measurement Protocol, In that we need to create a separate property in firebase app.</p>&#xA;&#xA;<p>Steps for creating a property:</p>&#xA;&#xA;<ol>&#xA;<li>Go to analytics.google.com then create a firebase app.</li>&#xA;<li>click on Create property and choose website option.</li>&#xA;<li>The provide  a website URl and name of property name.</li>&#xA;</ol>&#xA;&#xA;<p>After the you will get a tracking info.In that a tracking code will be available.</p>&#xA;&#xA;<p>Then use <a href=""https://www.npmjs.com/package/universal-analytics"" rel=""nofollow noreferrer"">universal-analytics</a> in main Processes.</p>&#xA;&#xA;<p>Here is the complete implementation.&#xA;<a href=""https://kilianvalkhof.com/2018/apps/using-google-analytics-to-gather-usage-statistics-in-electron/"" rel=""nofollow noreferrer"">https://kilianvalkhof.com/2018/apps/using-google-analytics-to-gather-usage-statistics-in-electron/</a> </p>&#xA;",5997390,"",,"",,2019-11-05T12:14:55,"","",,0,,,
58716922,2,,58716394,2019-11-05T17:54:16,,2,,"<p>getAllCategories returns a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" rel=""nofollow noreferrer"">promise</a>, which is what you are seeing when you call the function. The easiest thing to do would be to wrap whatever code calls getAllCategories in an async function, then await the value of getAllCategories. I assume that you want getAllCategories to return the categories, so it might look something like this: </p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>async function wrapper() { &#xD;&#xA;  async function getAllCategories() {&#xD;&#xA;    return database.from(""categories"").select(""category"")&#xD;&#xA;  };&#xD;&#xA;  const categories = await getAllCategories() &#xD;&#xA;  // do whatever you want to do with categories&#xD;&#xA; }</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>You can read about async/await syntax <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"" rel=""nofollow noreferrer"">here</a></p>&#xA;",8833196,"",,"",,2019-11-05T17:54:16,"","",,0,,,
58727438,2,,58727034,2019-11-06T09:58:01,,1,,"<p>It turns out there's no way to set this manually during development (at least I didn't find one, but I'm open to suggestions and further answers). However, once the app is built, the correct information will be taken from the binary and/or the <code>package.json</code>.</p>&#xA;",995800,"",,"",,2019-11-06T09:58:01,"","",,0,,,
58750655,2,,58740144,2019-11-07T14:16:30,,0,,"<p>I faced the same problem using expressjs and it's basically the same, here's the code I've used to deal wit CORS</p>&#xA;&#xA;<pre><code>const express = require('express')&#xA;&#xA;const app = express()&#xA;&#xA;// Defining CORS&#xA;app.use(function(req, res, next) {&#xA;    res.setHeader(&#xA;      ""Access-Control-Allow-Headers"",&#xA;      ""X-Requested-With,content-type""&#xA;    );&#xA;    res.setHeader(""Access-Control-Allow-Origin"", ""*"");&#xA;    res.setHeader(&#xA;      ""Access-Control-Allow-Methods"",&#xA;      ""GET, POST, OPTIONS, PUT, PATCH, DELETE""&#xA;    );&#xA;    res.setHeader(""Access-Control-Allow-Credentials"", true);&#xA;    next();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>hope this helps</p>&#xA;",5616238,"",,"",,2019-11-07T14:16:30,"","",,0,,,
58767743,2,,58755814,2019-11-08T13:43:29,,0,,<p>The issue come from electron builder and my configuration probably.&#xA;I switch to <strong>forge electron</strong> and it work without change nothing . :D</p>&#xA;,11561373,"",,"",,2019-11-08T13:43:29,"","",,0,,,
58780201,2,,58760613,2019-11-09T14:25:41,,0,,"<p>Read the docs on the electron. Also, learn about ""event emitters and listeners"" in Node. </p>&#xA;&#xA;<p>In electron, you have only ONE main process(like a server) and multiple renderer processes (like tabs in the browser). </p>&#xA;&#xA;<p>IPC stands for inter-process communication. But there isn't any need for IPC in the main process. You can use regular function calls for example.</p>&#xA;&#xA;<p>But if you need to ""talk"" to renderer processes from the main process or vice versa or between renderer processes then use ipcMain() and ipcRender() respectively.</p>&#xA;",7219961,"",,"",,2019-11-09T14:25:41,"","",,0,,,
58791424,2,,58481485,2019-11-10T17:55:32,,0,,"<p>Solution: In Electron, whatever is set in the Info.plist for the main process, is not equivalently applied to Electron Helper processes since they have their own Info.plist.</p>&#xA;&#xA;<p>We patched this via:</p>&#xA;&#xA;<pre><code>cd dist/mac/Your.app/Contents/Frameworks/Your\ Helper.app/Contents&#xA;/usr/libexec/PlistBuddy -c ""add NSHighResolutionCapable bool true"" Info.plist&#xA;</code></pre>&#xA;&#xA;<p>It is not supported correctly in Electron 7.1 or below</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/20656"" rel=""nofollow noreferrer"">Github issue</a></p>&#xA;",10615993,"",,"",,2019-11-10T17:55:32,"","",,0,,,
58797076,2,,58481610,2019-11-11T07:22:08,,0,,"<p>thanks @mahal tertin for pointing to the right direction with security scoped bookmarks.</p>&#xA;&#xA;<p>since electron 6.0.0 the <code>dialog.showOpenDialog()</code> method returns a promise that resolves to the filePaths and security scoped bookmarks.</p>&#xA;&#xA;<p>with the <code>app.startAccessingSecurityScopedResource(bookmark)</code> you can now use that bookmark to access the previous resource.</p>&#xA;&#xA;<p>I wrote a detailed blog post with code examples for more information: <a href=""https://developapa.com/security-scoped-bookmark/"" rel=""nofollow noreferrer"">https://developapa.com/security-scoped-bookmark/</a></p>&#xA;",4243635,"",,"",,2019-11-11T07:22:08,"","",,0,,,
58818036,2,,58757228,2019-11-12T11:45:24,,0,,"<p>I ended up using webpack to pack all the electron into one file and now it works. Even inside subdirectory.</p>&#xA;&#xA;<p>Main file for package.json:</p>&#xA;&#xA;<p><code>""main"": ""./dist-electron/main.js"",</code></p>&#xA;&#xA;<p>This is my <code>electron.webpack.js</code>:</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');&#xA;const nodeExternals = require('webpack-node-externals');&#xA;const UglifyJsPlugin = require('uglifyjs-webpack-plugin');&#xA;const JavaScriptObfuscator = require('webpack-obfuscator');&#xA;&#xA;module.exports = {&#xA;    target: 'electron-main',&#xA;    mode: 'development', // production&#xA;    entry: {&#xA;        renderer: 'electron-app/main.ts',&#xA;    },&#xA;    output: {&#xA;        filename: 'main.js',&#xA;        path: path.resolve(__dirname, 'dist-electron')&#xA;    },&#xA;    node: {&#xA;        __dirname: true&#xA;    },&#xA;    optimization: {&#xA;        minimizer: [new UglifyJsPlugin({&#xA;            parallel: true,&#xA;            uglifyOptions: {&#xA;                mangle: {&#xA;                    toplevel: true,&#xA;                },&#xA;                toplevel: true,&#xA;                ie8: false,&#xA;            },&#xA;        })],&#xA;    },&#xA;    module: {&#xA;        rules: [&#xA;            {&#xA;                test: /\.tsx?$/,&#xA;                use: [&#xA;                    {&#xA;                        loader: 'ts-loader',&#xA;                        options: {&#xA;                            configFile: ""tsconfig-serve.json""&#xA;                        }&#xA;                    }&#xA;                ],&#xA;                exclude: [&#xA;                    /node_modules/,&#xA;                ],&#xA;&#xA;            }&#xA;        ]&#xA;    },&#xA;    plugins: [&#xA;        // new JavaScriptObfuscator ({&#xA;        //  rotateUnicodeArray: true&#xA;        // }, [])&#xA;    ],&#xA;    resolve: {&#xA;        modules: [&#xA;            ""node_modules"",&#xA;            path.resolve(__dirname, ""node_modules"")&#xA;        ],&#xA;        plugins: [new TsconfigPathsPlugin({ configFile: ""tsconfig-serve.json"" })],&#xA;        extensions: ['.tsx', '.ts', '.js'],&#xA;    },&#xA;    externals: [nodeExternals()]&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>and <code>tsconfig-serve.json</code>:</p>&#xA;&#xA;<pre><code>{&#xA;    ""compilerOptions"": {&#xA;        ""sourceMap"": true,&#xA;        ""outDir"": ""./dist-electron"",&#xA;        ""moduleResolution"": ""node"",&#xA;        ""emitDecoratorMetadata"": true,&#xA;        ""experimentalDecorators"": true,&#xA;        ""target"": ""es2015"",&#xA;        ""pretty"": true,&#xA;        ""skipLibCheck"": true,&#xA;        ""allowSyntheticDefaultImports"": true,&#xA;        ""allowJs"": true,&#xA;        ""types"": [&#xA;            ""node""&#xA;        ],&#xA;        ""baseUrl"": ""./"",&#xA;        ""paths"": {&#xA;            --SNIP--&#xA;        },&#xA;        ""lib"": [&#xA;            ""es2017"",&#xA;            ""es2016"",&#xA;            ""es2015"",&#xA;            ""dom""&#xA;        ]&#xA;    },&#xA;    ""files"": [&#xA;        ""electron-app/main.ts""&#xA;    ],&#xA;    ""exclude"": [&#xA;        ""node_modules"",&#xA;        ""**/*.spec.ts""&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;",325606,"",,"",,2019-11-12T11:45:24,"","",,0,,,
58823019,2,,58822323,2019-11-12T16:39:28,,0,,"<p>The Electron docs are pretty good: <a href=""https://electronjs.org/docs/api/app#event-window-all-closed"" rel=""nofollow noreferrer"">Event: 'window-all-closed'</a></p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Event: 'window-all-closed'</strong></p>&#xA;  &#xA;  <p><em>Emitted when all windows have been closed.</em></p>&#xA;  &#xA;  <p>If you do not subscribe to this event and all windows are closed, the&#xA;  default behavior is to quit the app; however, if you subscribe, you&#xA;  control whether the app quits or not. If the user pressed Cmd + Q, or&#xA;  the developer called app.quit(), Electron will first try to close all&#xA;  the windows and then emit the will-quit event, and in this case the&#xA;  window-all-closed event would not be emitted.</p>&#xA;</blockquote>&#xA;&#xA;<p>As for the default OSX behavior</p>&#xA;&#xA;<blockquote>&#xA;  <p>On Windows systems, a window generally equals an application. This&#xA;  means that when you close a window, you close the application as well&#xA;  (as long as it’s the last window of that application that’s open). On&#xA;  a Mac, a window is treated more like a document than the app itself.&#xA;  When you close a window, you close the specific document you were&#xA;  looking at, but the application itself keeps running.&#xA;  – <a href=""https://www.howtogeek.com/279086/why-do-mac-apps-stay-open-when-i-hit-the-red-x-button/"" rel=""nofollow noreferrer"">https://www.howtogeek.com/279086/why-do-mac-apps-stay-open-when-i-hit-the-red-x-button/</a></p>&#xA;</blockquote>&#xA;",840992,"",,"",,2019-11-12T16:39:28,"","",,0,,,
58825752,2,,58413806,2019-11-12T19:52:35,,0,,"<p>finally I could make <code>window.loadUrl</code> working for the production version as follows:</p>&#xA;&#xA;<pre><code>createProtocol('app');&#xA;window.loadURL(formatUrl({&#xA;   pathname: path.join(__dirname, 'index.html'),&#xA;   protocol: 'file',&#xA;   slashes: true&#xA;}));&#xA;</code></pre>&#xA;&#xA;<p>The above code is working but it only opens the login window which has the path '/' in the vue-router routes list.</p>&#xA;&#xA;<p>To open a window for another route like '/main' I tried to append a hash and the route to the pathname like this:</p>&#xA;&#xA;<pre><code>window.loadURL(formatUrl({&#xA;  pathname: path.join(__dirname, 'index.html#', slug),&#xA;  protocol: 'file',&#xA;  slashes: true&#xA;}));&#xA;</code></pre>&#xA;&#xA;<p>but it did not work and on dev tools network tab I see this error:</p>&#xA;&#xA;<p>Name: index.html%23/ Status: (blocked:other)</p>&#xA;&#xA;<p>please advice</p>&#xA;&#xA;<p>EDIT: all worked after adding the <code>hash</code> property to the options object passed to <code>formatUrl</code> instead of appending to the <code>pathname</code> manually:</p>&#xA;&#xA;<pre><code>window.loadURL(formatUrl({&#xA;   pathname: path.join(__dirname, 'index.html'),&#xA;   protocol: 'file',&#xA;   slashes: true,&#xA;   hash: slug&#xA;}));&#xA;</code></pre>&#xA;",4620731,"",4620731,"",2019-11-13T11:31:53,2019-11-13T11:31:53,"","",,0,,,
58847949,2,,58847873,2019-11-14T01:09:12,,3,,"<p>I feel like an idiot. Upon opening the developer tools in my Electron app, I see the console prints </p>&#xA;&#xA;<blockquote>&#xA;  <p>""Uncaught ReferenceError: require is not defined&#xA;      at renderer.js:8""</p>&#xA;</blockquote>&#xA;&#xA;<p>So obviously, node.js is not integrated into renderer.js by default. A simple google search lands me on this page: <a href=""https://github.com/electron/electron/issues/17241"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/17241</a></p>&#xA;&#xA;<p>It seems that updating</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>function createWindow () {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    webPreferences: {&#xA;      preload: path.join(__dirname, 'preload.js')&#xA;    }&#xA;  })&#xA;&#xA;  // and load the index.html of the app.&#xA;  mainWindow.loadFile('index.html')&#xA;&#xA;  // Open the DevTools.&#xA;  // mainWindow.webContents.openDevTools()&#xA;&#xA;  // Emitted when the window is closed.&#xA;  mainWindow.on('closed', function () {&#xA;    // Dereference the window object, usually you would store windows&#xA;    // in an array if your app supports multi windows, this is the time&#xA;    // when you should delete the corresponding element.&#xA;    mainWindow = null&#xA;  })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>to:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>function createWindow () {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    webPreferences: {&#xA;      preload: path.join(__dirname, 'preload.js'),&#xA;      nodeIntegration: true&#xA;    }&#xA;  })&#xA;&#xA;  // and load the index.html of the app.&#xA;  mainWindow.loadFile('index.html')&#xA;&#xA;  // Open the DevTools.&#xA;  // mainWindow.webContents.openDevTools()&#xA;&#xA;  // Emitted when the window is closed.&#xA;  mainWindow.on('closed', function () {&#xA;    // Dereference the window object, usually you would store windows&#xA;    // in an array if your app supports multi windows, this is the time&#xA;    // when you should delete the corresponding element.&#xA;    mainWindow = null&#xA;  })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>fixes the issue.</p>&#xA;&#xA;<p><strong>Moral of the story:</strong> the terminal won't tell you everything when working with Electron. Especially when writing code to a renderer, you should be checking the console in the app's developer tools as well!</p>&#xA;",8023531,"",,"",,2019-11-14T01:09:12,"","",,0,,,
58848493,2,,58717065,2019-11-14T02:26:01,,2,,"<p>We got around this by simply stripping Electron from the user agent. In your case it'd probably be something like this.</p>&#xA;&#xA;<pre><code>authWindow.loadURL(authUrl, {&#xA;  userAgent: navigator.userAgent.replace(/ Electron\/\S+ /g, ' ');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Doesn't explain why Google is doing this, but gets around it in the meantime.</p>&#xA;",7023004,"",,"",,2019-11-14T02:26:01,"","",,0,,,
58850712,2,,58787468,2019-11-14T06:33:07,,1,,"<p>Create a  transparent window with put a fullscreenable = false like this</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>const mainWindow = new BrowserWindow({&#xD;&#xA;      width: customWidth,&#xD;&#xA;      height: CustomHeight,&#xD;&#xA;      x: positionMarginX,&#xD;&#xA;      y: positionMarginY,&#xD;&#xA;      skipTaskbar: process.platform !== 'darwin',&#xD;&#xA;      fullscreenable: false,&#xD;&#xA;      frame: false,&#xD;&#xA;      resizable: false,&#xD;&#xA;      hasShadow: false,&#xD;&#xA;      transparent: true,&#xD;&#xA;      minimizable: false,&#xD;&#xA;      maximizable: false,&#xD;&#xA;      darkTheme: true,&#xD;&#xA;      closable: false,&#xD;&#xA;      titleBarStyle: 'customButtonsOnHover',&#xD;&#xA;      webPreferences: {&#xD;&#xA;        webSecurity: false,&#xD;&#xA;        nodeIntegration: true,&#xD;&#xA;      },&#xD;&#xA;    })</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>And use IPC render in react side like this</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code> ipcRenderer.send(&#xD;&#xA;          'window-resize',&#xD;&#xA;          300, // height&#xD;&#xA;          300  // width&#xD;&#xA;        )</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Then use IPC main to handle that event like this</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>ipcMain.on('window-resize', (e,height, width) =&gt; {&#xD;&#xA;windowSize = {&#xD;&#xA;        width: width,&#xD;&#xA;        height: height,&#xD;&#xA;        x: customX,&#xD;&#xA;        y: customY,&#xD;&#xA;      }&#xD;&#xA;      mainWindow.setBounds(windowSize)&#xD;&#xA;})</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>and if you work on custom control then follow this URL&#xA;<a href=""https://stackoverflow.com/questions/35876939/frameless-window-with-controls-in-electron-windows"">Frameless window with controls in electron (Windows)</a></p>&#xA;",5997390,"",,"",,2019-11-14T06:33:07,"","",,0,,,
58855068,2,,58768026,2019-11-14T10:52:28,,0,,"<p>So to fix my issue I went back to the <a href=""https://medium.com/@PhilippKief/angular-desktop-apps-a9ce9e3574e8"" rel=""nofollow noreferrer"">tutorial</a> I followed and checked the package.json that was used there and slowly added and updated everything I had into that package.json.&#xA;When it was still working I ported it to my own package.json and with that it worked.</p>&#xA;",10314043,"",,"",,2019-11-14T10:52:28,"","",,0,,,
58877147,2,,48068192,2019-11-15T12:30:53,,1,,"<p>So the solution was so simple, I used the <a href=""http://docs.nwjs.io/en/latest/For%20Users/Advanced/Protect%20JavaScript%20Source%20Code/"" rel=""nofollow noreferrer""><strong>nw-js code protection feature</strong></a> to protected the script in which I decrypt the assets (images in my case) (this script contains the key of decryption), so you could implement the encryption/decryption with any method you want and protect the decryption script which is going to be shipped with you product (in my case the <strong>desktop app</strong>).</p>&#xA;",7533716,"",,"",,2019-11-15T12:30:53,"","",,0,,,
58880857,2,,58880784,2019-11-15T16:12:46,,0,,<p>Okay so turns out I'm just being stupid I asked a friend and its <code>console.log(arg.username)</code> so yeah XD</p>&#xA;,7052236,"",,"",,2019-11-15T16:12:46,"","",,0,,,
58738493,2,,58731276,2019-11-06T21:07:49,,0,,"<p>I have no way of testing it, but in the most recent <code>Electron 7.1.0</code>, <a href=""https://electronjs.org/docs/api/native-theme#nativethemethemesource"" rel=""nofollow noreferrer"">nativeTheme.themeSource</a> may be what you're looking for:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A String property that can be <strong>system</strong>, <strong>light</strong> or <strong>dark</strong>. It is used to&#xA;  override and supercede the value that Chromium has chosen to use&#xA;  internally.</p>&#xA;  &#xA;  <p>Setting this property to <strong>system</strong> will remove the override and&#xA;  everything will be reset to the OS default. By default themeSource is&#xA;  <strong>system</strong>.</p>&#xA;  &#xA;  <p>[...]</p>&#xA;  &#xA;  <p>Settings this property to <strong>light</strong> will have the following effects:</p>&#xA;  &#xA;  <ul>&#xA;  <li>nativeTheme.shouldUseDarkColors will be false when accessed</li>&#xA;  <li>Any UI Electron renders on Linux and Windows including <strong>context menus</strong>, devtools, etc. will use the light UI.</li>&#xA;  <li>Any UI the OS renders on macOS including menus, window frames, etc. will use the light UI.</li>&#xA;  <li>The prefers-color-scheme CSS query will match light mode.</li>&#xA;  <li>The updated event will be emitted</li>&#xA;  </ul>&#xA;</blockquote>&#xA;",12334436,"",,"",,2019-11-06T21:07:49,"","",,1,,,
58787964,2,,58786304,2019-11-10T10:58:37,,1,,"<p>The ""Electron Quick Start"" sample code uses ECMAScript 6 <strong>object destructuring</strong> syntax (for the sake of brevity and convenience).</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron')&#xA;</code></pre>&#xA;&#xA;<p>is equivalent to:</p>&#xA;&#xA;<pre><code>const app = require('electron').app;&#xA;const BrowserWindow = require('electron').BrowserWindow;&#xA;</code></pre>&#xA;&#xA;<p>So, in the constructor of the class <code>WindowManager</code>, the line:</p>&#xA;&#xA;<pre><code>this.BrowserWindow = require('electron');&#xA;</code></pre>&#xA;&#xA;<p>should be instead:</p>&#xA;&#xA;<pre><code>this.BrowserWindow = require('electron').BrowserWindow;&#xA;</code></pre>&#xA;",12350653,"",12350653,"",2019-11-10T11:23:24,2019-11-10T11:23:24,"","",,1,,,
58819480,2,,58795005,2019-11-12T13:10:14,,1,,"<p>In electron applications, communications between Main and Renderer processes is performed via ipc. Electron has <a href=""https://electronjs.org/docs/api/ipc-main"" rel=""nofollow noreferrer"">ipcMain</a> and <a href=""https://electronjs.org/docs/api/ipc-renderer"" rel=""nofollow noreferrer"">ipcRenderer</a> modules used in Main and Renderer processes respectively.</p>&#xA;&#xA;<p>For the task you have, you can send a message to the renderer process whenever the user clicked on File > Save, which will trigger saving the textarea to a file. One implementation might be like this:</p>&#xA;&#xA;<pre><code>// main process&#xA;const { app } = require('electron')&#xA;&#xA;// reference to the browser window&#xA;let mainWindow&#xA;app.on('ready', () =&gt; {&#xA;  // here create your browser window and assign it to mainWindow&#xA;  mainWindow = createMainWindow()&#xA;})&#xA;&#xA;// clicking File &gt; Save menu triggers following function&#xA;const saveClicked = () =&gt; {&#xA;  // Check mainWindow exists&#xA;  if (mainWindow != null) {&#xA;    mainWindow.webContents.send('clicked::file:save')&#xA;  }&#xA;}&#xA;&#xA;&#xA;// renderer process (preload.js)&#xA;const { ipcRenderer } = require('electron')&#xA;&#xA;// Now you need to listen for the event you send from the main process&#xA;ipcRenderer.on('clicked::file:save', () =&gt; {&#xA;  // IMPLEMENT YOUR LOGIC HERE&#xA;})&#xA;</code></pre>&#xA;",11203240,"",,"",,2019-11-12T13:10:14,"","",,1,,,
58740745,2,,58723285,2019-11-07T01:34:20,,2,,"<blockquote>&#xA;  <p>1) Is there any way i can have a button or custom navbar on top of loaded webpage in my window? Currently I've made another child window with height and width same as that of button and placed it on top but it doesn't look/sound good.</p>&#xA;</blockquote>&#xA;&#xA;<p>Yes, this is definitely possible. The two ways that I can think of to do this include using the <code>preload</code> preference (see <a href=""https://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer"">webPreferences</a>) to preload some JavaScript before loading the actual page and through the <a href=""https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture"" rel=""nofollow noreferrer""><code>webContents.executeJavaScript()</code></a> function.</p>&#xA;&#xA;<p>The latter method would look something like this:</p>&#xA;&#xA;<pre><code>win.webContents.executeJavaScript(`&#xA;document.body.insertAdjacentHTML('beforeend', '&lt;p&gt;Add your &lt;span&gt;sticky&lt;/span&gt; button code here&lt;/p&gt;');&#xA;`);&#xA;</code></pre>&#xA;&#xA;<p>This method essentially injects HTML by using the <a href=""https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture"" rel=""nofollow noreferrer""><code>webContents.executeJavaScript()</code></a> function where <code>win</code> is your <code>BrowserWindow</code>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>2) Is there any way to load a file of mine (say xyz.html) and then just have a section where that URL is loaded, since websites don't allow their webpages to be loaded in iframe any more.</p>&#xA;</blockquote>&#xA;&#xA;<p>I bet there's some workaround to directly inject HTML but the methods I mentioned above (preloading or using <code>executeJavaScript</code>) would be much easier to accomplish this same task.</p>&#xA;&#xA;<p>Hopefully, my answer could be of help.</p>&#xA;&#xA;<p>Good luck!</p>&#xA;",10939275,"",,"",,2019-11-07T01:34:20,"","",,2,,,
58793335,2,,58792463,2019-11-10T22:02:06,,1,,"<p>There are probably more than a few ways to handle this. Personally I would handle it in the <code>main</code> context so that the user preference can be saved and restored on subsequent launches.</p>&#xA;&#xA;<p>So the schema would be something like this:</p>&#xA;&#xA;<ul>&#xA;<li>the <code>main</code> content knows what the current ""theme"" is (because default&#xA;or stored user preference) </li>&#xA;<li>user clicks the ""theme"" button in any of the windows and the window sends a message to <code>main</code> using <a href=""https://www.brainbell.com/javascript/ipc-communication.html"" rel=""nofollow noreferrer"">IPC communication</a> </li>&#xA;<li>the <code>main</code> context receives the message and based on the current theme, sends a message to all open windows using <a href=""https://electronjs.org/docs/api/browser-window#browserwindowgetallwindows"" rel=""nofollow noreferrer"">BrowserWindow.getAllWindows()</a> and <a href=""https://electronjs.org/docs/api/web-contents#contentssendchannel-args"" rel=""nofollow noreferrer"">contents.send(channel,...args)</a>, passes the ""theme"" to switch to as an argument. </li>&#xA;<li>each window receives the message (with argument) and handles changing the ""theme"" using one of the methods described here: <a href=""https://stackoverflow.com/questions/19844545/replacing-css-file-on-the-fly-and-apply-the-new-style-to-the-page"">Replacing css file on the fly (and apply the new style to the page)</a></li>&#xA;</ul>&#xA;&#xA;<p>While it is possible for windows to communicate with each other directly, this schema will give you more flexibility if you decide to add more windows or other ""themes"" in the future. It's a little more work but lets the windows be ""dumb"" with control residing in <code>main</code>.</p>&#xA;&#xA;<p>. . . but I could also be doing it wrong. ;-)</p>&#xA;",840992,"",,"",,2019-11-10T22:02:06,"","",,2,,,
58827851,2,,58827395,2019-11-12T22:49:18,,0,,"<p>This appears to be a Electron custom page implemented in <a href=""https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/templates/nsis/multiUserUi.nsh"" rel=""nofollow noreferrer"">multiUserUi.nsh</a> and the text is defined in <a href=""https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/templates/nsis/assistedMessages.yml"" rel=""nofollow noreferrer"">assistedMessages.yml</a>. It looks like <a href=""https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/src/targets/nsis/nsisLang.ts"" rel=""nofollow noreferrer"">nsisLang.ts</a> is used to convert the .yml file to a temporary .nsh include file.</p>&#xA;&#xA;<p>It might be possible to use the <a href=""https://www.electron.build/configuration/nsis#custom-nsis-script"" rel=""nofollow noreferrer"">Electron NSIS include feature</a> to include your own custom file. Depending on when it is included it might be possible to override the string:</p>&#xA;&#xA;<pre><code>; NSIS include file:&#xA;!pragma warning push&#xA;!pragma warning disable 6030 ; Disable multiple use warning&#xA;LangString onlyForMe 1033 ""Just me and only me"" ; 1033 is English&#xA;!pragma warning pop&#xA;</code></pre>&#xA;&#xA;<p>If that does not work then you must manually edit assistedMessages.yml instead.</p>&#xA;",3501,"",,"",,2019-11-12T22:49:18,"","",,2,,,
58861380,2,,58861039,2019-11-14T16:22:34,,0,,"<p>I suspect you're not setting the cwd param of the ShortcutDetails passed to writeShortuctLink. If the working directory isn't set on a shortcut, the default is c:\windows\system32</p>&#xA;",645,"",,"",,2019-11-14T16:22:34,"","",,2,,,
58781603,2,,58781460,2019-11-09T17:07:18,,2,,<p>Update you css with below code.</p>&#xA;&#xA;<pre><code>#title-bar {&#xA;    width: 100%;&#xA;    height: 30px;&#xA;    -webkit-app-region: drag;&#xA;    background-color: #21252b;&#xA;    display: flex;            /* Add this */   &#xA;    align-items: center;      /* Add this */&#xA;}&#xA;&#xA;#title-bar &gt; #title {&#xA;    display: inline-block;&#xA;    color: #f8f4f4;&#xA;    margin: 0 auto;           /* Add this */&#xA;}&#xA;</code></pre>&#xA;,5079499,"",5079499,"",2019-11-09T17:13:05,2019-11-09T17:13:05,"","",,3,,,
58820956,2,,58786171,2019-11-12T14:43:25,,2,,"<p>You may want to deal only with the <em>focused</em> BrowserWindow in <code>'closeWindow'</code> callback</p>&#xA;&#xA;<p>Use <a href=""https://electronjs.org/docs/api/browser-window#browserwindowgetfocusedwindow"" rel=""nofollow noreferrer""><code>BrowserWindow.getFocusedWindow</code></a> static method&#xA;</p>&#xA;&#xA;<pre><code>ipcMain.on('closeWindow', function(event) {&#xA;  const current = BrowserWindow.getFocusedWindow()&#xA;  if (current) current.close()&#xA;})&#xA;</code></pre>&#xA;",2550156,"",,"",,2019-11-12T14:43:25,"","",,3,,,
58880747,2,,58880139,2019-11-15T16:05:22,,4,,"<p>You have to set your execution policy to <strong>Unrestricted</strong> not <code>RemoteSigned</code>. According to <a href=""https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-6#parameters"" rel=""nofollow noreferrer"">Set-ExecutionPolicy</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>RemoteSigned</strong>. Requires that all scripts and configuration files downloaded from the Internet are signed by a trusted publisher. The&#xA;  default execution policy for Windows server computers.</p>&#xA;</blockquote>&#xA;&#xA;<p>Since 99% of all PowerShell scripts are unsigned, 99% of the time you will not be able to run them under this policy. </p>&#xA;&#xA;<ol>&#xA;<li>Open PowerShell as Adminstrator.</li>&#xA;<li>Run:</li>&#xA;</ol>&#xA;&#xA;<p>.</p>&#xA;&#xA;<pre><code>Set-ExecutionPolicy -ExecutionPolicy Unrestricted&#xA;</code></pre>&#xA;",2150063,"",,"",,2019-11-15T16:05:22,"","",,13,,,
19484512,2,,19247334,2013-10-21T00:26:28,,3,,"<p>These links might help you with your issue:</p>&#xA;&#xA;<p><a href=""http://requirejs.org/docs/node.html"" rel=""nofollow"">http://requirejs.org/docs/node.html</a></p>&#xA;&#xA;<p><a href=""http://durandaljs.com/documentation/Native-Apps-With-Node-Webkit.html"" rel=""nofollow"">http://durandaljs.com/documentation/Native-Apps-With-Node-Webkit.html</a></p>&#xA;&#xA;<p><a href=""https://github.com/caolan/jam"" rel=""nofollow"">https://github.com/caolan/jam</a></p>&#xA;",2869225,"",552792,"",2014-05-03T00:51:23,2014-05-03T00:51:23,"","",,8,,,
56671531,2,,56671396,2019-06-19T15:43:58,,0,,"<p>This is how browsers work. (And Electron's display is effectively a browser.) There's a single thread which is responsible for both updating the UI and running the client-side JavaScript code. (In Electron it's the ""rendering thread."") So while your JavaScript code is running, the UI won't update.</p>&#xA;&#xA;<p>There are two solutions:</p>&#xA;&#xA;<ol>&#xA;<li><p>Have another thread do the heavy lifting and post updates periodically to the main thread. In a browser you'd do that with a <a href=""http://www.w3.org/TR/workers/"" rel=""nofollow noreferrer"">web worker</a>. Apparently you can have web workers with Electron as well, see <a href=""https://github.com/trusktr/electron-web-worker-example"" rel=""nofollow noreferrer"">this example</a>. Or perhaps you could have the work done by your main process rather than your rendering process.</p></li>&#xA;<li><p>Break up the logic so that you yield back to the browser periodically so it has a chance to update its display.</p></li>&#xA;</ol>&#xA;&#xA;<p>#1 is probably your better bet for the kind of number crunching you're doing. Here's an example counting from 1 to 1,000,000,000 with updates every 10,000:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""false"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Get the contents of our worker script as a blob&#xD;&#xA;var workerScript = document.getElementById(""worker"").textContent;&#xD;&#xA;var blob = new Blob(&#xD;&#xA;    [workerScript],&#xD;&#xA;    {&#xD;&#xA;        type: ""text/javascript""&#xD;&#xA;    }&#xD;&#xA;);&#xD;&#xA;&#xD;&#xA;// Create an object URL for it&#xD;&#xA;var url = (window.webkitURL || window.URL).createObjectURL(blob);&#xD;&#xA;&#xD;&#xA;// Start the worker&#xD;&#xA;var worker = new Worker(url);&#xD;&#xA;worker.addEventListener(""message"", function(e) {&#xD;&#xA;    if (e &amp;&amp; e.data &amp;&amp; e.data.type === ""update"") {&#xD;&#xA;        display.textContent = ""Value: "" + e.data.value;&#xD;&#xA;    }&#xD;&#xA;});</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script id=""worker"" type=""javascript/worker""&gt;&#xD;&#xA;// The type on this script element means the browser&#xD;&#xA;// won't run it directly. It's here so we can turn it&#xD;&#xA;// into a blob to run the worker later.&#xD;&#xA;for (var n = 1; n &lt;= 1000000000; ++n) {&#xD;&#xA;    if (n % 10000 === 0) {&#xD;&#xA;      self.postMessage({type: ""update"", value: n});&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&lt;div id=""display""&gt;Waiting for worker to start...&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",157247,"",157247,"",2019-06-19T16:11:21,2019-06-19T16:11:21,"","",,0,,,
56703374,2,,56702372,2019-06-21T12:21:21,,0,,"<pre><code>const REACT_PERFORMANCE_DEVTOOLS = {&#xA;  id: ""fcombecpigkkfcbfaeikoeegkmkjfbfm"",&#xA;  electron: ""^4.0.5""&#xA;};&#xA;&#xA;const installExtensions = async () =&gt; {&#xA;  const installer = require(""electron-devtools-installer"");&#xA;  const forceDownload = !!process.env.UPGRADE_EXTENSIONS;&#xA;  const extensions = [&#xA;    ""REACT_DEVELOPER_TOOLS"",&#xA;    ""REDUX_DEVTOOLS"",&#xA;    ""REACT_PERF"",&#xA;    REACT_PERFORMANCE_DEVTOOLS&#xA;  ];&#xA;&#xA;  return Promise.all(&#xA;    extensions.map(name =&gt;&#xA;      installer.default(installer[name] || name, forceDownload)&#xA;    )&#xA;  ).catch(console.log);&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>REACT_PERFORMANCE_DEVTOOLS passing as name works for me.</p>&#xA;",11570872,"",,"",,2019-06-21T12:21:21,"","",,0,,,
56718232,2,,56672548,2019-06-22T18:50:43,,0,,<p>Well I did it using available IpcRenderer and IpcMain method provided by Electronserice</p>&#xA;,11365957,"",,"",,2019-06-22T18:50:43,"","",,0,,,
56720354,2,,56713994,2019-06-23T01:23:05,,1,,"<p>Found this in the electron docs.&#xA;<a href=""https://electronjs.org/docs/api/system-preferences#systempreferencesaskformediaaccessmediatype-macos"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/system-preferences#systempreferencesaskformediaaccessmediatype-macos</a></p>&#xA;&#xA;<p>If you're using macOS to run the app use that method to request permission. If not it doesn't look like the app requires permission to use the microphone or camera.</p>&#xA;",10453550,"",,"",,2019-06-23T01:23:05,"","",,0,,,
56736649,2,,56736277,2019-06-24T12:29:59,,4,,"<p>It seems, your code is missing the subscription:</p>&#xA;&#xA;<pre><code>dialogRef.afterClosed().subscribe(result =&gt; {&#xA;  console.log(`Dialog result: ${result}`);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Replace the <code>switchMap</code> by <code>subscribe</code></p>&#xA;&#xA;<p>See docs example here: <a href=""https://material.angular.io/components/dialog/overview#dialog-content"" rel=""nofollow noreferrer"">https://material.angular.io/components/dialog/overview#dialog-content</a></p>&#xA;&#xA;<hr>&#xA;&#xA;<p>By the way, you can use this alternative, without the <code>mat-dialog-close</code> directive:</p>&#xA;&#xA;<p>See <a href=""https://blog.angular-university.io/angular-material-dialog/"" rel=""nofollow noreferrer"">https://blog.angular-university.io/angular-material-dialog/</a> (Step 5)</p>&#xA;&#xA;<p>You can pass the modified form data back to AppComponent in the following way:</p>&#xA;&#xA;<pre><code>  &lt;div mat-dialog-actions&gt;&#xA;    &lt;button mat-button (click)=""close(false)""&gt;No&lt;/button&gt;&#xA;    &lt;button mat-button (click)=""close(true)""&gt;Yes&lt;/button&gt;&#xA;  &lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>and </p>&#xA;&#xA;<pre><code>  close(clickResult: boolean): void {&#xA;    this.matDialogRef.close(clickResult);&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>You can now receive the dialog data in the following way:</p>&#xA;&#xA;<pre><code>dialogRef.afterClosed().subscribe(&#xA;    data =&gt; console.log(""Dialog output:"", data)&#xA;); &#xA;</code></pre>&#xA;",917492,"",917492,"",2019-06-24T12:49:27,2019-06-24T12:49:27,"","",,0,,,
56758149,2,,56756922,2019-06-25T16:10:21,,1,,"<p>I got it to work. I had to take the build portion out of my scripts object, and specify an icon path.</p>&#xA;&#xA;<pre><code>  ""scripts"": {&#xA;    ""start"": ""react-scripts start"",&#xA;    ""test"": ""react-scripts test"",&#xA;    ""eject"": ""react-scripts eject"",&#xA;    ""electron-start"": ""electron ."",&#xA;    ""pack"": ""build --dir"",&#xA;    ""dist"": ""build""&#xA;  },&#xA;  ""build"": {&#xA;    ""appId"": ""MyApp"",&#xA;    ""extends"": null,&#xA;    ""win"": {&#xA;      ""icon"": ""./img/icon.ico"",&#xA;      ""target"": ""msi""&#xA;    }&#xA;  },&#xA;</code></pre>&#xA;",7331107,"",,"",,2019-06-25T16:10:21,"","",,0,,,
56760260,2,,56198535,2019-06-25T18:43:08,,1,,"<p>You may want to try <code>asar: false</code>. Also you can add resources outside the asar file with the <code>extraResources</code> directive:</p>&#xA;&#xA;<pre><code>""extraResources"": [&#xA;    {&#xA;        ""from"": ""../media"",&#xA;        ""to"": ""media"",&#xA;        ""filter"": [&#xA;            ""**/*"",&#xA;            ""!*.mp3"",&#xA;        ]&#xA;    }&#xA;],&#xA;&#xA;""asar"": false,&#xA;</code></pre>&#xA;",4891717,"",,"",,2019-06-25T18:43:08,"","",,0,,,
56760945,2,,56758999,2019-06-25T19:38:28,,0,,"<p>Electron is not good for multipage apps, and displays a blank screen for around a quarter of a second when changing pages. Instead, you might want to create a file with all pages combined and switch between them with DOM methods</p>&#xA;&#xA;<p>For Example</p>&#xA;&#xA;<pre><code>var splash_screen = document.getElementById('splash-screen');&#xA;var second_screen = document.getElementById('second-screen');&#xA;var third_screen = document.getElementById('third-screen');&#xA;document.removeChild(second_screen)&#xA;document.removeChild(third_screen)&#xA;var splash_button_click = () =&gt; {&#xA;document.removeChild(splash_screen);&#xA;document.appendChild(second_screen);&#xA;}&#xA;</code></pre>&#xA;",11558411,"",11558411,"",2019-06-25T19:43:45,2019-06-25T19:43:45,"","",,0,,,
56782980,2,,56781240,2019-06-27T02:06:21,,1,,"<p>Vue, like all other Client SPA frameworks, is designed to build static assets that can run ""standalone"" in a browser. So it is straightforward bundling those assets in an electron app.</p>&#xA;&#xA;<p>MongoDB, like most Server databases, is totally the opposite: it is designed to be installed once, run as a service, and Clients (including your electron app) connect to it (usually through a network). So it is very difficult bundling it in a standalone installer, not even talking about a portable app. The repo linked by Andrei Gheorghiu is an example of such architecture: it does not bundle the Mongo service, but connects to it.</p>&#xA;&#xA;<p>If you look for ""electron database"" keywords, you will find plenty resources about this subject. The key is to look for self-contained / embedded databases, like SQLite. There are also some NoSQL alternatives, e.g. NeDB.</p>&#xA;",5108796,"",,"",,2019-06-27T02:06:21,"","",,0,,,
56786803,2,,56786663,2019-06-27T08:17:48,,1,,"<p>No, you can not, FetchAPI is HTTP client and you need server to receive your HTTP request you sent with Fetch and save data from that request to file. It can be HTTP server written in any language: php, node, c#, etc.</p>&#xA;&#xA;<p>You can, however, prompt user to download text file you generated via JS in browser. If it is what you need, you'll need to refer to FileReader API and/or change your question</p>&#xA;",5877826,"",,"",,2019-06-27T08:17:48,"","",,0,,,
56792573,2,,56754475,2019-06-27T13:52:30,,1,,<p>My solution is now this:</p>&#xA;&#xA;<pre><code>FROM node:10&#xA;&#xA;RUN dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine wine32 -y&#xA;&#xA;RUN npm install electron-packager -g&#xA;&#xA;VOLUME /electron&#xA;WORKDIR /electron&#xA;&#xA;</code></pre>&#xA;,9535703,"",9535703,"",2019-07-06T19:34:51,2019-07-06T19:34:51,"","",,0,,,
56811022,2,,56803529,2019-06-28T17:26:37,,1,,"<p>This is a bug in Electron Download Manager, documented in an <a href=""https://github.com/danielnieto/electron-download-manager/issues/24"" rel=""nofollow noreferrer"">GitHub Issue</a> like @JeffRSon stated. A <a href=""https://github.com/danielnieto/electron-download-manager/pull/38"" rel=""nofollow noreferrer"">pull request</a> is ready for a merge but not merged yet (posted 06.06.2019).</p>&#xA;&#xA;<p>I hope this helps you. I will update this question if it get's merged and works.</p>&#xA;",11643722,"",,"",,2019-06-28T17:26:37,"","",,0,,,
56830554,2,,56829392,2019-07-01T05:49:40,,0,,"<p>After some research, the way this is done with <a href=""https://en.wikipedia.org/wiki/Extended_file_attributes"" rel=""nofollow noreferrer"">extended attributes</a>, specifically the <code>com.apple.progress.fractionCompleted</code> one. <code>com.apple.progress.fractionCompleted</code> value can range from <code>0.01</code> (1%) to <code>1</code> (100%). </p>&#xA;&#xA;<p>The Node module <a href=""https://github.com/LinusU/fs-xattr"" rel=""nofollow noreferrer"">fs-xattr</a> seems to allow you to manage extended file attributes with ease.  </p>&#xA;&#xA;<pre><code>const xattr = require('fs-xattr')&#xA;&#xA;await xattr.set('fileDownload.mp4', 'com.apple.progress.fractionCompleted', '0.25')&#xA;</code></pre>&#xA;",7886229,"",,"",,2019-07-01T05:49:40,"","",,0,,,
56682818,2,,56682267,2019-06-20T09:20:16,,3,,<p>I installed electron js with command <code>sudo npm install -g electron@latest --unsafe-perm=true</code> on Mac. I can run the <code>electron</code> command.</p>&#xA;,2404236,"",,"",,2019-06-20T09:20:16,"","",,1,,,
56761663,2,,56760330,2019-06-25T20:35:38,,1,,"<p>NSIS uses <code>$OutDir</code> (usually the same as <code>$InstDir</code>) as the start-in directory when it creates shortcuts. Not sure if you can change this variable before the shortcuts are created in electron-builder but it should not be your first priority to change it. </p>&#xA;&#xA;<p>Applications should <strong>not</strong> depend on the working directory when they are started, required resources should be loaded relative to the .exe and/or relative to special folders (%appdata% and %localappdata% etc.). When users manually create shortcuts or starts your application from the command-line/open with/drag&amp;drop/whatever the working directory can be any directory and you should accept this and fix the application instead of relying on a fragile shortcut property.</p>&#xA;",3501,"",,"",,2019-06-25T20:35:38,"","",,1,,,
56805185,2,,56805135,2019-06-28T10:22:51,,5,,"<p>You are using destructuring: </p>&#xA;&#xA;<pre><code>await axios({&#xA;    downloadUrl,&#xA;    responseType: ""stream""&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>This means, You are using <code>downloadUrl</code> as key, instead of <code>url</code>:</p>&#xA;&#xA;<pre><code>await axios({&#xA;    downloadUrl: downloadUrl,&#xA;    responseType: ""stream""&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>You need to change it to <code>url</code>:</p>&#xA;&#xA;<pre><code>await axios({&#xA;    url: downloadUrl,&#xA;    responseType: ""stream""&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>A proper example of <code>axios</code> from the <a href=""https://github.com/axios/axios#axios-api"" rel=""nofollow noreferrer"">doc</a>:</p>&#xA;&#xA;<pre><code>axios({&#xA;  method: 'post',&#xA;  url: '/user/12345',&#xA;  data: {&#xA;    firstName: 'Fred',&#xA;    lastName: 'Flintstone'&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",1203844,"",1203844,"",2019-06-28T10:31:18,2019-06-28T10:31:18,"","",,1,,,
56806101,2,,56805920,2019-06-28T11:27:27,,6,,"<p>According to <a href=""https://stackoverflow.com/a/38859135/8760665"">this post on StackOverflow</a> <code>alert</code> is not supported by electron due to it freezing up the threads when executing.  While you may be able to call it you may want to see about moving to electron's <code>dialog</code> or an in page modal (like a MaterialUI or Bootstrap modal) instead if possible.</p>&#xA;",8760665,"",,"",,2019-06-28T11:27:27,"","",,1,,,
56809916,2,,56645448,2019-06-28T15:56:01,,1,,"<p>It's in the right place <strong><em>package.json:window:icon</em></strong> </p>&#xA;&#xA;<p>The problem is the path where your icon.png is located. Change to something like <em>""build/icon.png""</em> where <em>build</em> is the folder of your build target.</p>&#xA;",680203,"",,"",,2019-06-28T15:56:01,"","",,1,,,
56813379,2,,47995007,2019-06-28T21:31:38,,0,,<p>The comment from @illiteratewriter did the trick:</p>&#xA;&#xA;<p>Remove electron and add it again using the following commands:</p>&#xA;&#xA;<pre><code>npm uninstall electron&#xA;npm install electron&#xA;</code></pre>&#xA;,8737282,"",11427375,"",2019-06-28T22:34:55,2019-06-28T22:34:55,"","",,1,,,
56815560,2,,56814848,2019-06-29T06:32:38,,4,,"<p>Add the <code>-Wait</code> parameter to you <code>Start-Process</code> call. From <a href=""https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/start-process?view=powershell-6"" rel=""nofollow noreferrer""><code>Start-Process</code></a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>-Wait</p>&#xA;  &#xA;  <p>Indicates that this cmdlet waits for the specified process and its descendants to complete before accepting more input. This parameter suppresses the command prompt or retains the window until the processes finish.</p>&#xA;</blockquote>&#xA;&#xA;<p>Otherwise, PowerShell fires up the process and moves on the script execution. That's the reason why you need a <code>Start-Sleep</code>. So, change your code to:</p>&#xA;&#xA;<pre><code>$path = ""C:\person.jpg"";&#xA;Start-Process -FilePath $path -Verb Print -Wait | Out-Null;&#xA;</code></pre>&#xA;&#xA;<p>if you are using PowerShell 5.x you can also try `Out-Printer´ see this <a href=""https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/out-printer?view=powershell-5.1"" rel=""nofollow noreferrer"">link</a> for additional docu.</p>&#xA;&#xA;<p>Hope that helps.</p>&#xA;",6270170,"",6270170,"",2019-06-29T06:38:15,2019-06-29T06:38:15,"","",,1,,,
56818774,2,,56732419,2019-06-29T15:34:30,,1,,"<p>As discussed in the chat, the error you are getting is usually caused by the fact that the executable you are trying to run is not available</p>&#xA;&#xA;<p>Now there are multiple reasons the executable may not be available</p>&#xA;&#xA;<ol>&#xA;<li>The executable is not there at all anywhere on the system</li>&#xA;<li>The executable is there but not in the folders defined by system's <code>PATH</code> variable</li>&#xA;<li>The executable is there in the current directory but the directory context in which the process is being run is different</li>&#xA;</ol>&#xA;&#xA;<p>To fix <code>#1</code> and <code>#2</code> you just install the executable globally in system PATH</p>&#xA;&#xA;<p>For fixing <code>#3</code> you can do two things. Add the path for the current directory (<code>{ cwd: __dirname}</code>) and also a relative path to executable</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const childProcess: ChildProcess__type = ChildProcess.spawn( &#xA;Path.resolve(__dirname, 'node_modules/.bin/electron'), &#xA;[ Path.resolve(__dirname, 'ProjectInitializer__ElectronMain.js') ], &#xA;{ cwd: __dirname} &#xA;); &#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const childProcess: ChildProcess__type = ChildProcess.spawn( &#xA;'./node_modules/.bin/electron'), &#xA;[ Path.resolve(__dirname, 'ProjectInitializer__ElectronMain.js') ], &#xA;{ cwd: __dirname} &#xA;); &#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const childProcess: ChildProcess__type = ChildProcess.spawn( &#xA;'node_modules/.bin/electron', &#xA;[ './ProjectInitializer__ElectronMain.js' ], &#xA;{ cwd: __dirname} &#xA;); &#xA;</code></pre>&#xA;&#xA;<p>In case you decide to override the <code>PATH</code> environment variable you can do it passing the <code>env</code> parameters with more values</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const childProcess: ChildProcess__type = ChildProcess.spawn( &#xA;'node_modules/.bin/electron', &#xA;[ './ProjectInitializer__ElectronMain.js' ], &#xA;{ cwd: __dirname, env: {....}} &#xA;); &#xA;</code></pre>&#xA;&#xA;<p>You can use the existing environment variables from <code>process.env</code> and then update the same, and pass it to <code>env</code> parameter</p>&#xA;",2830850,"",,"",,2019-06-29T15:34:30,"","",,1,,,
56826055,2,,56825770,2019-06-30T15:30:12,,1,,"<p>Given the general architecture of Express, this feels like an app configuration option that would be a natural for <code>app.get()</code> and <code>app.set()</code>.  </p>&#xA;&#xA;<p>Add <code>app.set()</code> to save this configuration on the app object:</p>&#xA;&#xA;<pre><code>exports.joe = (req, res) =&gt; {&#xA;  const {dialog} = require(""electron"");&#xA;  dialog.showOpenDialog(&#xA;    {&#xA;      filters: [&#xA;        {name: ""Anchor"", extensions: [""anchor""]},&#xA;        {name: ""All Files"", extensions: [""*""]},&#xA;      ],&#xA;      properties: [""openFile""],&#xA;    },&#xA;    (loc) =&gt; {&#xA;      fs.writeFile(locfile, loc, function(err) {&#xA;        if (err) {&#xA;          return console.log(err);&#xA;        }&#xA;&#xA;        // save this on the app object as a configuration&#xA;        req.app.set(""imageDir"", loc);&#xA;&#xA;        console.log(""The new root location saved: "" + loc);&#xA;      });&#xA;      res.redirect(""/pie"");&#xA;    },&#xA;  );&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Then, in your middleware, you can retrieve that at any time:</p>&#xA;&#xA;<pre><code>app.use(""/vids"", (req, res, next) =&gt; {&#xA;  return express.static(app.get(""imageDir""))(req, res, next);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This also assumes that <code>app.set(""imageDir"", ...)</code> is called at startup to set it to some functional value.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>There are numerous other ways to do this.</p>&#xA;&#xA;<ol>&#xA;<li>You could set or modify an environment variable in <code>process.env</code> and then retrieve it from there when needed.</li>&#xA;<li>You could save the directory as a module local and then export a function that would return the current value of that variable at any time.</li>&#xA;<li>You could make an early stage middleware that would set the directory as a custom property on the <code>req</code> object so all follow-on middleware could access it.  It sounds like this was perhaps your first thought at how to do it.  It's not my favorite because it's really just a configuration option so it seems more natural to handle it like other configuration options with <code>app.get()</code> or the above two options.</li>&#xA;<li>You could set a global property, <code>global.imageDir</code> that can be accessed from anywhere.</li>&#xA;</ol>&#xA;&#xA;<hr>&#xA;&#xA;<p>FYI, it looks like your <code>showOpenDialog()</code> code is missing a check for the dialog being cancelled.</p>&#xA;",816620,"",,"",,2019-06-30T15:30:12,"","",,1,,,
56694384,2,,56694091,2019-06-20T21:56:08,,0,,"<p>To my knowledge, there is (currently) no browser side security on a javascript/html level. The best thing a website can do on that level to protect a form from any injected javascript code, is to hide a key (maybe an anti-csrf key) and use it when submitting the form.</p>&#xA;&#xA;<p>On any other case (when there is no key or when you can access and read the key) you can just re-create the hole form and submit it, or even just fake the request to the server. Thus, there is no point in developing codes to protect forms, unless you want to hide the way you generate data that you will send to the server (but, I don't consider this a protection).</p>&#xA;&#xA;<p>In your case, it seems that the javascript code that handles the submission of the form unintentionally or intentionally blocks your attempts to submit the form. This may be due to a validation function that does not fire (most probably). For example, <code>onchange</code> event does not fire when you change the value of an input.</p>&#xA;&#xA;<p>You can see all the events on the form and its inputs from the developer tools of your browser and figure out how the webpage handles the form, but the easiest way to fool the webpage is to fake the hole request.</p>&#xA;",3709257,"",,"",,2019-06-20T21:56:08,"","",,2,,,
56705039,2,,56697133,2019-06-21T14:07:34,,2,,"<p>I've faced this issue as well and here's what I ended up doing...</p>&#xA;&#xA;<p>I've had to use this Electron <a href=""https://electronjs.org/docs/api/client-request#class-clientrequest"" rel=""nofollow noreferrer""><code>ClientRequest</code></a> api to be able to retry more times.</p>&#xA;&#xA;<p>Your ""login"" event handler will look something like this</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow, ipcMain, net } = require('electron');&#xA;&#xA;app.on(""login"", (event, webContents, request, authInfo, callback) =&gt; {&#xA;  event.preventDefault();&#xA;&#xA;  let username = """";&#xA;  let password = """";&#xA;&#xA;  const req = net.request({&#xA;    method: request.method,&#xA;    url: request.url&#xA;  });&#xA;&#xA;  req.on(""response"", response =&gt; {&#xA;    console.log(response);&#xA;    if (response.statusCode &gt; 400) {&#xA;      console.error(""something went wrong"");&#xA;      callback("""", """");&#xA;    } else {&#xA;      console.log(""we are good, request was successful""); // the request was authenticated correctly&#xA;      callback(username, password);&#xA;    }&#xA;    response.on(""error"", err =&gt; {&#xA;      console.error(""something went wrong, response error"", err);&#xA;      callback("""", """");&#xA;    });&#xA;  });&#xA;&#xA;  req.on(""login"", (loginAuthInfo, loginCallback) =&gt; {&#xA;    this.createAuthPrompt().then(credentials =&gt; {&#xA;      username = credentials.username;&#xA;      password = credentials.password;&#xA;      loginCallback(username, password);&#xA;    });&#xA;  });&#xA;&#xA;  req.end();&#xA;});&#xA;</code></pre>&#xA;",9698583,"",9698583,"",2019-06-23T06:17:59,2019-06-23T06:17:59,"","",,2,,,
56811330,2,,56811126,2019-06-28T17:54:47,,1,,"<p>Not quite what you asked but I took heed of the Electron team's <a href=""https://electronjs.org/docs/api/webview-tag#enableremotemodule"" rel=""nofollow noreferrer"">warning</a> and opted to use <code>iframes</code> rather than <code>webviews</code></p>&#xA;&#xA;<blockquote>&#xA;  <p>We currently recommend to not use the webview tag and to consider&#xA;  alternatives, like iframe, Electron's BrowserView, or an architecture&#xA;  that avoids embedded content altogether.</p>&#xA;</blockquote>&#xA;&#xA;<p>I've had success using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"" rel=""nofollow noreferrer"">Window.postMessage()</a> but I am far from an ""expert"" on any of this.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The window.postMessage() method safely enables cross-origin&#xA;  communication between Window objects; e.g., between a page and a&#xA;  pop-up that it spawned, or between a page and an iframe embedded&#xA;  within it.</p>&#xA;</blockquote>&#xA;",840992,"",,"",,2019-06-28T17:54:47,"","",,2,,,
56681282,2,,56680629,2019-06-20T07:42:15,,1,,"<p>Listen to this <a href=""https://electronjs.org/docs/api/app#event-login"" rel=""nofollow noreferrer"">""login"" event</a>.</p>&#xA;&#xA;<p>Create your own prompt. For example, create a browser window which loads an HTML form and when the user fills the username and password fields pass the credentials back via <a href=""https://electronjs.org/docs/api/ipc-main#sending-messages"" rel=""nofollow noreferrer"">ipc calls</a> to the callback.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>app.on(""login"", (event, webContents, request, authInfo, callback) =&gt; {&#xA;  event.preventDefault();&#xA;  createAuthPrompt().then(credentials =&gt; {&#xA;    callback(credentials.username, credentials.password);&#xA;  });&#xA;});&#xA;&#xA;function createAuthPrompt() {&#xA;  const authPromptWin = new BrowserWindow();&#xA;  authPromptWin.loadFile(""auth-form.html""); // load your html form&#xA;&#xA;  return new Promise((resolve, reject) =&gt; {&#xA;    ipcMain.once(""form-submission"", (event, username, password) =&gt; {&#xA;      authPromptWin.close();&#xA;      const credentials = {&#xA;        username,&#xA;        password&#xA;      };&#xA;      resolve(credentials);&#xA;    });&#xA;  });&#xA;}&#xA;</code></pre>&#xA;",9698583,"",9698583,"",2019-06-21T05:24:50,2019-06-21T05:24:50,"","",,3,,,
56771393,2,,56770589,2019-06-26T11:06:09,,0,,"<p>You can add a <code>copies</code> section to your binding.gyp file so that your dlls are copied to the "".node"" file location every build.</p>&#xA;&#xA;<pre><code>{ &#xA;  ""targets"": [&#xA;    {&#xA;      ""conditions"":[&#xA;        [""OS=='win'"", {&#xA;          ""copies"":&#xA;            [&#xA;              {&#xA;                'destination': '&lt;(module_root_dir)/build/Release',&#xA;                'files': [&#xA;                  '&lt;(module_root_dir)/yourdllfile1.dll',&#xA;                  '&lt;(module_root_dir)/yourdllfile2.dll',&#xA;                ]&#xA;              }&#xA;            ]&#xA;        }]&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;",9698583,"",,"",,2019-06-26T11:06:09,"","",,3,,,
56658199,2,,56655985,2019-06-18T23:16:36,,1,,"<p>Since it appears that <code>electron-dl</code> doesn't give clear error messages, you may want to check/create the directory beforehand as you initially did.</p>&#xA;&#xA;<p>The basic procedure could look like this:</p>&#xA;&#xA;<ul>&#xA;<li>Check if the target directory exists.&#xA;&#xA;<ul>&#xA;<li>If it exists, check if it is writable.&#xA;&#xA;<ul>&#xA;<li>If it is writable, proceed to downloading.</li>&#xA;<li>If it is not writable, print an informative error message and stop.</li>&#xA;</ul></li>&#xA;<li>If it doesn't exist, try to create it.&#xA;&#xA;<ul>&#xA;<li>If this works, proceed to downloading.</li>&#xA;<li>If this fails, print an informative error message and stop.</li>&#xA;</ul></li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p>The following code implements this idea (using the synchronous versions of the <code>fs</code> methods for simplicity). Be sure to use the asynchronous versions if required.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const electronDl = require('electron-dl')&#xA;const fs = require('fs')&#xA;&#xA;function ensureDirExistsAndWritable(dir) {&#xA;    if (fs.existsSync(dir)) {&#xA;        try {&#xA;            fs.accessSync(dir, fs.constants.W_OK)&#xA;        } catch (e) {&#xA;            console.error('Cannot access directory')&#xA;            return false&#xA;        }&#xA;    }&#xA;    else {&#xA;        try {&#xA;            fs.mkdirSync(dir)&#xA;        }&#xA;        catch (e) {&#xA;            if (e.code == 'EACCES') {&#xA;                console.log('Cannot create directory')&#xA;            }&#xA;            else {&#xA;                console.log(e.code)&#xA;            }&#xA;            return false&#xA;        }&#xA;    }&#xA;    return true&#xA;}&#xA;&#xA;&#xA;function downloadFile(url, target) {&#xA;    if (ensureDirExistsAndWritable(target) == false) {&#xA;        return&#xA;    }&#xA;&#xA;    electronDl.download(&#xA;        BrowserWindow.getFocusedWindow(),&#xA;        url,&#xA;        {&#xA;            directory: target,&#xA;        }&#xA;    )&#xA;    .then(&#xA;        dl =&gt; console.log('Successfully downloaded to ' + dl.getSavePath())&#xA;    )&#xA;    .catch(&#xA;        console.log('There was an error downloading the file')&#xA;    )&#xA;}&#xA;</code></pre>&#xA;",1335237,"",,"",,2019-06-18T23:16:36,"","",,4,,,
56753978,2,,56752998,2019-06-25T12:22:50,,3,,"<p>It makes no sense - Cassandra is the distributed system, and designed to run in clusters of several nodes. Besides this, it has relatively high requirements for memory, and CPU, so your users won't be happy if your app will require at least 2Gb of RAM and multicore CPU to run.</p>&#xA;&#xA;<p>You need to define what you kind of operations you want to perform, and then select database. If you need something like key-value store, you can use RocksDB, for example, etc.</p>&#xA;",18627,"",,"",,2019-06-25T12:22:50,"","",,4,,,
56827606,2,,56827471,2019-06-30T19:50:54,,1,,"<p><code>Server.close()</code> I think is what you're looking for. <br/>&#xA;<code>.listen()</code> returns an <code>http.Server</code> instance, which this method can be called on:</p>&#xA;&#xA;<pre><code>const http = require('http');&#xA;const server = http.createServer(function (req, res) {&#xA;    res.end(""Hello from server started by Electron app!"");&#xA;}).listen(9000);&#xA;&#xA;// To Close:&#xA;server.close();&#xA;</code></pre>&#xA;&#xA;<p>You can then call server.listen() again to reopen the connection.  Note that if the server is already open when you try to listen or not listening and you try to close it. <br/>&#xA;See the <a href=""https://nodejs.org/api/net.html#net_server_close_callback"" rel=""nofollow noreferrer"">Server.close() documentation</a> for more info!</p>&#xA;",4807853,"",,"",,2019-06-30T19:50:54,"","",,4,,,
56647424,2,,56643383,2019-06-18T10:49:05,,3,,"<p>Electron as of v5.0.0 is using Node.js v12.0.0. This native module (nfc-pcsc) is not building correctly for that version.</p>&#xA;&#xA;<p>Downgrade Electron to v4, rebuild via ""electron-rebuild"" and it should build properly.</p>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code>npm install --save-dev electron@4&#xA;</code></pre>&#xA;&#xA;<p>then</p>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code>electron-rebuild&#xA;</code></pre>&#xA;",9698583,"",9698583,"",2019-11-29T06:04:13,2019-11-29T06:04:13,"","",,5,,,
26613936,2,,26595707,2014-10-28T16:49:30,,0,,"<p>It was issue in <a href=""https://github.com/rogerwang/nw-gyp"" rel=""nofollow"">https://github.com/rogerwang/nw-gyp</a>. It is fixed now.&#xA;Check <a href=""https://github.com/rogerwang/nw-gyp/issues/45"" rel=""nofollow"">https://github.com/rogerwang/nw-gyp/issues/45</a>.</p>&#xA;",146492,"",146492,"",2014-10-29T12:23:10,2014-10-29T12:23:10,"","",,1,,,
26735776,2,,26715841,2014-11-04T13:00:05,,0,,"<p>You are using <code>fs.readdir</code> which is asynchronous. So your timer is not depending of your scanDirectory execution.</p>&#xA;&#xA;<p>In fact, it's just launching your function when you call <code>scanDirectory(path)</code> then directly after stop the timer.</p>&#xA;&#xA;<p>If you want you can use <code>fs.readdirSync</code> which will prevent to jump to the timer end as it's a synchronise function. The problems, is that will freeze your application (if your use it's directly like that) during this time and problably slow your execution.</p>&#xA;&#xA;<p>In order to get the time of execution of your asynchrone function you can use the profiler tool of Node-webkit. But you will need to filter and sum them manually...</p>&#xA;&#xA;<p>The other solution is to use <code>timely</code> (it's an npm package ) that can time synchronous or asynchronous functions.</p>&#xA;",2911775,"",,"",,2014-11-04T13:00:05,"","",,0,,,
26724205,2,,26404785,2014-11-03T22:11:14,,2,,"<p><strong>Update: 2015-02-09</strong></p>&#xA;&#xA;<p>Snoocore now accepts URLS's with embedded values and does not require placeholders if you do not wish to use them.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>I'm the creator of this API wrapper. I'll have to monitor StackOverflow a little bit more to catch these quicker. Feel free to open new issues on GitHub as well when you get stuck on something for a quicker response!</p>&#xA;&#xA;<p>It looks like you are trying to call this endpoint:</p>&#xA;&#xA;<p><a href=""https://www.reddit.com/dev/api#GET_comments_%7Barticle%7D"" rel=""nofollow"">GET /r/[subreddit]/comments/article</a></p>&#xA;&#xA;<p>Basically anything that is in brackets is optional in Snoocore, and anything in <em>italics</em> is an URL parameter that you will need to define placeholders for in the call (using $parameter). More information on this can be read in the <a href=""http://tsenior.com/snoocore/basicUsage.html"" rel=""nofollow"">documentation</a> (feel free to ask questions or improve upon the documentation if it isn't clear!)</p>&#xA;&#xA;<p>So in your case, you will want to do this:</p>&#xA;&#xA;&#xA;&#xA;<pre><code>reddit('/r/$subreddit/comments/$article').get({&#xA;  $subreddit: 'Denmark',&#xA;  $article: '2jc5yk',&#xA;  context: 1,&#xA;  limit: 10,&#xA;  sort: 'hot'&#xA;}).done(function(result) {&#xA;  console.log(result);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Note that instead of defining the url parameters in the call, the are now referenced by <code>$subreddit</code> and <code>$article</code> respectivly.</p>&#xA;&#xA;<p>Note that comments are <em>not</em> a listing, and therefore can't use the <a href=""http://tsenior.com/snoocore/listings.html"" rel=""nofollow"">listings interface</a> as you tried to do in your question.</p>&#xA;",586621,"",586621,"",2015-02-10T01:07:33,2015-02-10T01:07:33,"","",,0,,,
26734577,2,,26715227,2014-11-04T11:57:21,,5,,"<p>Here is the solution extracted from node-webkit wiki :</p>&#xA;&#xA;<pre><code>// Load native UI library.&#xA;var gui = require('nw.gui');&#xA;&#xA;var option = {&#xA;    key: ""Ctrl+Shift+A"",&#xA;    active: function() {&#xA;        console.log(""Global desktop keyboard shortcut: "" + this.key + "" active."");&#xA;    },&#xA;    failed: function(msg) {&#xA;        // :(, fail to register the |key| or couldn't parse the |key|.&#xA;        console.log(msg);&#xA;    }&#xA;};&#xA;&#xA;// Create a shortcut with |option|.&#xA;var shortcut = new gui.Shortcut(option);&#xA;&#xA;// Register global desktop shortcut, which can work without focus.&#xA;gui.App.registerGlobalHotKey(shortcut);&#xA;&#xA;// If register |shortcut| successfully and user struck ""Ctrl+Shift+A"", |shortcut|&#xA;// will get an ""active"" event.&#xA;&#xA;// You can also add listener to shortcut's active and failed event.&#xA;shortcut.on('active', function() {&#xA;    console.log(""Global desktop keyboard shortcut: "" + this.key + "" active."");&#xA;});&#xA;&#xA;shortcut.on('failed', function(msg) {&#xA;    console.log(msg);&#xA;});&#xA;&#xA;// Unregister the global desktop shortcut.&#xA;gui.App.unregisterGlobalHotKey(shortcut);&#xA;</code></pre>&#xA;&#xA;<p>This example show you how to create a global shortcut listener and the different way to listen the event. This also show you how to unregister the shortcut.</p>&#xA;",2911775,"",,"",,2014-11-04T11:57:21,"","",,0,,,
26743434,2,,26742714,2014-11-04T19:30:27,,7,,"&#xA;&#xA;<p><strong>[Update]</strong></p>&#xA;&#xA;<p>Now that the JSX transformer <a href=""http://facebook.github.io/react/blog/2015/06/12/deprecating-jstransform-and-react-tools.html"" rel=""nofollow"">is being deprecated in favor of Babel</a>, you can use Babel's <a href=""http://babeljs.io/docs/usage/require/"" rel=""nofollow"">require hook</a> to support JSX in CommonJS-like environments:</p>&#xA;&#xA;<blockquote>&#xA;  <h2>Usage</h2>&#xA;&#xA;<pre class=""lang-javascript prettyprint-override""><code>require(""babel/register"");&#xA;</code></pre>&#xA;  &#xA;  <p>All subsequent files required by node with the extensions <code>.es6</code>, <code>.es</code>, <code>.jsx</code> and <code>.js</code> will be transformed by Babel. The <a href=""http://babeljs.io/docs/usage/polyfill"" rel=""nofollow"">polyfill</a> is also automatically required.</p>&#xA;  &#xA;  <p><strong>NOTE:</strong> By default all requires to <code>node_modules</code> will be ignored. You can override this by passing an ignore regex via:</p>&#xA;&#xA;<pre class=""lang-javascript prettyprint-override""><code>require(""babel/register"")({&#xA;  // This will override `node_modules` ignoring - you can alternatively pass&#xA;  // an array of strings to be explicitly matched or a regex / glob&#xA;  ignore: false&#xA;});&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<p><strong>[Old Answer]</strong></p>&#xA;&#xA;<p>If it's a Node.js environment (like atom-shell is) you can use <a href=""https://www.npmjs.org/package/node-jsx"" rel=""nofollow"">node-jsx</a>:</p>&#xA;&#xA;<pre class=""lang-javascript prettyprint-override""><code>require('node-jsx').install()&#xA;require(""./myComponent.js"");&#xA;</code></pre>&#xA;&#xA;<p>You can also use the <code>.jsx</code> extension if you want:</p>&#xA;&#xA;<pre class=""lang-javascript prettyprint-override""><code>require('node-jsx').install({extension: '.jsx'})&#xA;require(""./myComponent.jsx"");&#xA;</code></pre>&#xA;",62082,"",62082,"",2015-07-24T00:04:35,2015-07-24T00:04:35,"","",,1,,,
39878823,2,,39690452,2016-10-05T16:02:27,,0,,"<p>The 64bit NW won't work on 32bit systems but the 32bit should work on all systems. To save yourself a lot of hassle just compile and stick with the 32bit.&#xA;64bit apps are always slower anyway because the memory addressing mode is double in size and every instruction (large or small) has to clear/set/read the wider registers regardless.</p>&#xA;&#xA;<p>Also, whenever your app runs the first time and then no longer runs, it's usually because it is still in memory and hasn't fully/properly exited. To check this do a CTRL+ALT+DEL and kill the processes if still there.</p>&#xA;&#xA;<p>Finally, your PACKAGE.JSON seems a little lacking so consider researching and adding some more parameters like...</p>&#xA;&#xA;<pre><code>     ""nodejs"": true,&#xA;</code></pre>&#xA;&#xA;<p>""single-instance"": true,&#xA;""page-cache"" : false</p>&#xA;&#xA;<p>...and so forth. Good luck.</p>&#xA;",6923196,"",,"",,2016-10-05T16:02:27,"","",,0,,,
39974028,2,,39919090,2016-10-11T09:17:31,,0,,"<p>OK, Im thinking the best way around this is to use Ajax to call a PHP function on the server to read the contents of the file.</p>&#xA;",1001034,"",,"",,2016-10-11T09:17:31,"","",,1,,,
39988876,2,,39969171,2016-10-12T00:47:09,,0,,<p>The issue was angular CLI uses commonJS and i was trying to use require which doesn't play nicely. To solve this I added the following to my index.html</p>&#xA;&#xA;<pre><code>  &lt;script&gt;&#xA;    const electron = require('electron');&#xA;  &lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>and then in my typings.d.ts I added <code>declare var electron: any;</code> so that it doesn't throw errors when I try to access electron throughout my app.</p>&#xA;,4920706,"",,"",,2016-10-12T00:47:09,"","",,0,,,
40045382,2,,40040603,2016-10-14T14:15:04,,0,,"<p>Finaly a find this solution, to reload chrome runtime. </p>&#xA;&#xA;<pre><code>var tray;&#xA;win.on('minimize', function () {&#xA;    tray = new gui.Tray({title: 'Ephemeride', icon: 'images/mini-icon.png'});&#xA;&#xA;    // Hide window&#xA;    win.hide();&#xA;    // Show window and remove tray when clicked&#xA;    tray.on('click', function () {&#xA;        win.show();&#xA;        tray.remove();&#xA;        chrome.runtime.reload();&#xA;    });&#xA;});&#xA;&#xA;win.on('restore', function () {&#xA;    win.resizeTo(900, 600);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Hope this will help. </p>&#xA;",1356026,"",,"",,2016-10-14T14:15:04,"","",,0,,,
40059353,2,,40052220,2016-10-15T13:04:19,,0,,"<p>I could solve the problem. As @zerkms mentioned is was using the <em>this</em> keyword false. I tried to bind <em>this</em> with the <code>.bind</code> keyword what does not work with anonymous functions.</p>&#xA;&#xA;<p>So I applied the the solution described here: <a href=""https://stackoverflow.com/questions/22814097/how-to-pass-context-to-foreach-anonymous-function"">How to pass context to forEach() anonymous function</a></p>&#xA;&#xA;<pre><code>list.forEach( (file) =&gt; {&#xA;            file = dir + '/' + file;&#xA;            let stat = fs.statSync(file);&#xA;            if (stat &amp;&amp; stat.isDirectory())&#xA;                result = result.concat(this.getFilesFromDirectoriesRecursively([file], fileExtension));&#xA;            else&#xA;            if (path.extname(file) === fileExtension)&#xA;                result.push(file);&#xA;        }, this);&#xA;</code></pre>&#xA;&#xA;<p>Now its passing the <em>this</em> to the closure on the forEach function call</p>&#xA;&#xA;<h1>Edit:</h1>&#xA;&#xA;<p>It's not necessary to pass this because the arrow function is doing this.</p>&#xA;&#xA;<pre><code>list.forEach( (file) =&gt; {&#xA;        file = dir + '/' + file;&#xA;        let stat = fs.statSync(file);&#xA;        if (stat &amp;&amp; stat.isDirectory())&#xA;            result = result.concat(this.getFilesFromDirectoriesRecursively([file], fileExtension));&#xA;        else&#xA;        if (path.extname(file) === fileExtension)&#xA;            result.push(file);&#xA;});&#xA;</code></pre>&#xA;",6676758,"",-1,"",2017-05-23T11:48:33,2016-10-19T09:35:09,"","",,1,,,
39861417,2,,39752269,2016-10-04T20:43:51,,1,,"<p>Everything created during the course of a NW program running is written to:</p>&#xA;&#xA;<blockquote>&#xA;  <p>C:\Users\YOUR-USER-NAME\AppData\Local\YOUR-APP-NAME\</p>&#xA;</blockquote>&#xA;&#xA;<p>And...</p>&#xA;&#xA;<blockquote>&#xA;  <p>C:\Users\YOUR-USER-NAME\AppData\Local\Temp\nw1740_11663\</p>&#xA;</blockquote>&#xA;&#xA;<p>NB: The ""nw1740_11663"" is a randomly generated number for each session and is only accessible while the app is running because the directory gets deleted upon program exit.</p>&#xA;",6923196,"",,"",,2016-10-04T20:43:51,"","",,1,,,
39872360,2,,39605143,2016-10-05T11:09:08,,1,,"<p>Most of the third party auth providers require cookies to work correctly.  For example, some auth providers like live.com generate initial cookies before the user gets to the login page.  These cookies are required when the login button is clicked. </p>&#xA;&#xA;<p>The question itself is mute at this point, but it's interesting why electron doesn't give the user the ability to disable/enable cookies thou since it's just a shell for chromium which has the feature.  Perhaps the use case isn't high.</p>&#xA;",391465,"",,"",,2016-10-05T11:09:08,"","",,0,,,
39900197,2,,38472204,2016-10-06T15:36:25,,1,,"<p>Something I've used is running the <code>Tabtip.exe</code> from the <code>BrowserWindow</code>. </p>&#xA;&#xA;<p>This should work in Windows 7 and Windows 10 (using the Touch Keyboard). Although I've noticed <code>Tabtip</code> doesn't work in Windows 10 when there's no touch screen.</p>&#xA;&#xA;<pre><code>const exec = require('child_process').exec;&#xA;&#xA;function showTouchKeyboard() {&#xA;    exec('start /d ""C:\\Program Files\\Common Files\\microsoft shared\\ink"" TabTip.exe', (error, stdout, stderr) =&gt; {&#xA;        if (error) {&#xA;            console.error(error);&#xA;            return;&#xA;        }&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",747369,"",,"",,2016-10-06T15:36:25,"","",,1,,,
39918430,2,,39751237,2016-10-07T13:27:29,,1,,"<p>Scenario sounds really complex but maybe you should check if this windows app can be integrated with Office <a href=""http://dev.office.com/docs/add-ins/overview/office-add-ins"" rel=""nofollow"">Add-Ins</a>.</p>&#xA;&#xA;<p>From their site:</p>&#xA;&#xA;<p>What can an Office Add-in do?&#xA;An Office Add-in can do almost anything a webpage can do inside the browser, such as the following:</p>&#xA;&#xA;<ul>&#xA;<li>Extend Office native UI by creating custom ribbon buttons and tabs.</li>&#xA;<li>Provide an interactive UI and custom logic through HTML and&#xA;JavaScript.</li>&#xA;<li>Use JavaScript frameworks such as jQuery, Angular, and&#xA;many others.</li>&#xA;<li>Connect to REST endpoints and web services via HTTP and&#xA;AJAX.</li>&#xA;<li>Run server-side code or logic, if the page is implemented using&#xA;a server-side scripting language such as ASP or PHP. </li>&#xA;</ul>&#xA;&#xA;<p>In addition,&#xA;   Office Add-ins can interact with the Office application and an add-in&#xA;   user's content through a JavaScript API that the Office Add-ins&#xA;   infrastructure provides.</p>&#xA;&#xA;<p>Web app</p>&#xA;&#xA;<p>The minimal version of a compliant web app is a static HTML webpage. The page can be hosted on any web server, or web hosting service, such as Microsoft Azure. You can host your web app on the service that you choose.</p>&#xA;&#xA;<p>The most basic Office Add-in consists of a static HTML page that is displayed inside an Office application, but doesn't interact with either the Office document or any other Internet resource. However, because it is a web application, you can use any technologies, both client and server side, that your hosting provider supports (such as ASP.net, PHP, or Node.js). To interact with Office clients and documents, you can use the office.js JavaScript API that we provide.</p>&#xA;",3365805,"",,"",,2016-10-07T13:27:29,"","",,0,,,
39930556,2,,39930279,2016-10-08T08:59:33,,1,,"<p>No, Electron doesn't provide an API to obtain information about other apps. You'll need to access the native platform APIs directly to obtain that information. For example <a href=""https://github.com/MayGo/tockler"" rel=""nofollow"">Tockler</a> seems to do so via shell scripts, though personally I prefer accessing native APIs directly via native Node addons/modules or <a href=""https://github.com/node-ffi/node-ffi"" rel=""nofollow"">node-ffi</a>.</p>&#xA;",1259938,"",,"",,2016-10-08T08:59:33,"","",,0,,,
39943279,2,,39942413,2016-10-09T11:52:32,,1,,"<p>I can only speak for Electron, but 115MB sounds about right for a minimal app, the Chromium content library which Electron is based on is an all or nothing sort of thing and takes up a large chunk of that space.</p>&#xA;",1259938,"",,"",,2016-10-09T11:52:32,"","",,1,,,
39979208,2,,39568745,2016-10-11T14:09:54,,1,,"<pre><code>var exec = require('child_process').execFile;&#xA;&#xA;exec('C:/asd/test.exe', function(err, data) {  &#xA;        console.log(err)&#xA;        console.log(data.toString());                       &#xA;});&#xA;</code></pre>&#xA;",5653484,"",,"",,2016-10-11T14:09:54,"","",,0,,,
40038533,2,,40006849,2016-10-14T08:30:26,,1,,"<p>You can build the absolute path by getting the path to the current application directory using app.getAppPath()</p>&#xA;&#xA;<p><a href=""http://electron.atom.io/docs/api/app/#appgetapppath"" rel=""nofollow"">http://electron.atom.io/docs/api/app/#appgetapppath</a></p>&#xA;&#xA;<p>Since app is a main process variable and you are wanting this in the renderer process, you will have to require it using remote. </p>&#xA;&#xA;<pre><code>var remote = require('remote')&#xA;var app = remote.require('app')&#xA;</code></pre>&#xA;",324143,"",,"",,2016-10-14T08:30:26,"","",,0,,,
40070066,2,,40069923,2016-10-16T12:06:53,,1,,"<p>Considering that you want to protect your JS source code - short answer is NOT all of the JavaScript File's source code will be safe.</p>&#xA;&#xA;<p>Tools Kit like <a href=""http://nwjs.io//"" rel=""nofollow"">NW.js</a> helps to protect JS file to some extent. Depends on how the JavaScript Files are used in your application.</p>&#xA;&#xA;<p>Read about packaging Application using NW.js here</p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://docs.nwjs.io/en/latest/For%20Users/Package%20and%20Distribute/#package-your-app"" rel=""nofollow"">http://docs.nwjs.io/en/latest/For%20Users/Package%20and%20Distribute/#package-your-app</a></li>&#xA;</ul>&#xA;&#xA;<p>And Protecting JS Files is documented in below link</p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://docs.nwjs.io/en/latest/For%20Users/Advanced/Protect%20JavaScript%20Source%20Code/"" rel=""nofollow"">http://docs.nwjs.io/en/latest/For%20Users/Advanced/Protect%20JavaScript%20Source%20Code/</a></li>&#xA;</ul>&#xA;&#xA;<p>Since you said you are in planning stage- you can also select Electron, which allows to create Application Package</p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://electron.atom.io/docs/tutorial/application-packaging/"" rel=""nofollow"">http://electron.atom.io/docs/tutorial/application-packaging/</a></li>&#xA;</ul>&#xA;",5878562,"",5878562,"",2016-10-16T12:24:15,2016-10-16T12:24:15,"","",,2,,,
39894753,2,,39894647,2016-10-06T11:26:42,,2,,"<p>It's not working because you're not exporting anything in your vue file.</p>&#xA;&#xA;<p>Try this in your TopMenu.vue file:</p>&#xA;&#xA;<pre><code>&lt;template&gt;&#xA;  &lt;p&gt;&#xA;    TOPMENU&#xA;  &lt;/p&gt;&#xA;&lt;/template&gt;&#xA;&#xA;&lt;script&gt;&#xA;    export default {&#xA;    }&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Also change the html <code>&lt;topmenu&gt;&lt;/topmenu&gt;</code> to <code>&lt;top-menu&gt;&lt;/top-menu&gt;</code></p>&#xA;&#xA;<p>For your second question, HTML is case insensitive so your title case components wouldn't match with html tags. So Vue translates your title case components to a 'dash-case'. &#xA;From the documentation itself there's the explanation why:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Note that Vue does not enforce the W3C rules for custom tag names (all-lowercase, must contain a hyphen) though following this convention is considered good practice.</p>&#xA;</blockquote>&#xA;&#xA;<p>You can read more from the the <a href=""https://vuejs.org/guide/components.html"" rel=""nofollow"">docs</a></p>&#xA;",4615460,"",182895,"",2016-10-06T11:52:44,2016-10-06T11:52:44,"","",,5,,,
39970300,2,,39836267,2016-10-11T03:58:35,,2,,"<p>There are several ways that you could approach solving this problem. The first is to query the platform about its capabilities. For example, Electron sets the variable:</p>&#xA;&#xA;<pre><code>process.versions.electron&#xA;</code></pre>&#xA;&#xA;<p>This won't be set if you're running in the browser, so you can check for its existence (and you'll know you're running in Electron). Here's the documentation: <a href=""http://electron.atom.io/docs/api/process/"" rel=""nofollow"" title=""Electron: Process"">Electron: Process</a>.</p>&#xA;&#xA;<p>Testing for a nested property can be a bit gross, so a slightly simpler way is to wrap your attempt to access the value in a try/catch:</p>&#xA;&#xA;<pre><code>try {&#xA;    process.versions.electron; &#xA;} catch (err) {&#xA;    console.log('Not electron', err);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You could even wrap it into a nice function:</p>&#xA;&#xA;<pre><code>function isPlatformElectron() {&#xA;    'use strict';&#xA;    try {&#xA;        process.versions.electron;&#xA;        return true;&#xA;    } catch (err) {&#xA;        return false;&#xA;    }&#xA;}&#xA;&#xA;if (isPlatformElectron()) {&#xA;    // Do Electron-specific stuff here&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You could alternatively do something like this with your original code (slightly modified):</p>&#xA;&#xA;<pre><code>let app, BrowserWindow;&#xA;try {&#xA;    ({app, BrowserWindow} = require('electron'));&#xA;} catch (err) {&#xA;    console.log('Not electron');&#xA;}&#xA;&#xA;if (app &amp;&amp; BrowserWindow) {&#xA;   console.log('is electron');&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I find this version harder to read and prefer the function approach I suggested above, but I thought it might be useful to show the example using destructuring like your original (although you can't use const in this case).</p>&#xA;",373216,"",,"",,2016-10-11T03:58:35,"","",,0,,,
40051184,2,,35026460,2016-10-14T20:04:56,,2,,"<p>Jakub Szwacz <a href=""https://github.com/szwacz/nw-flash-trust"" rel=""nofollow noreferrer"">explains it all in an understandable way, and also provides a solution</a>. I fixed an issue in a new Electron project today, and just now realized it’s the same as this one – I just didn’t understand what was wrong the way <a href=""https://stackoverflow.com/users/275375/funrob"">funrob</a> was trying to explain it.</p>&#xA;",1209356,"",-1,"",2017-05-23T12:06:56,2016-10-14T20:04:56,"","",,0,,,
39996487,2,,39973231,2016-10-12T10:36:55,,3,,"<p>I found <code>execPath</code> inside the <code>process</code> object&#xA;and now i can execute nodejs commands on a machine without nodejs installed globally. It's using the Electron's built-in version.</p>&#xA;&#xA;<pre><code>child_process.exec(process.execPath+' '+cliCmd+' --name ""App Name"" ""http://appname.tld"" --platform darwin --arch x64 --electron-version ""0.36.6""',&#xA;{&#xA;  env: {""ATOM_SHELL_INTERNAL_RUN_AS_NODE"":""1""},&#xA;  cwd: app.getAppPath()&#xA;},&#xA;function (error, stdout, stderr) {&#xA;  if (error) {&#xA;    console.error(`exec error: ${error}`);&#xA;    return;&#xA;  }&#xA;  console.log(`stdout: ${stdout}`);&#xA;  console.log(`stderr: ${stderr}`);&#xA;});&#xA;</code></pre>&#xA;",555760,"",,"",,2016-10-12T10:36:55,"","",,1,,,
39895768,2,,39835083,2016-10-06T12:17:23,,4,,"<p>I got it working with my own Google Speech API key.</p>&#xA;&#xA;<p>Please obtain as per the instruction given on <a href=""https://docs.smart-mirror.io/docs/howto/how_to_obtain_chromium_speech_keys.html"" rel=""noreferrer"">https://docs.smart-mirror.io/docs/howto/how_to_obtain_chromium_speech_keys.html</a></p>&#xA;&#xA;<p>Once you have API Key, ClientID and ClientSecret set them into your computer's environment variables with key GOOGLE_API_KEY, GOOGLE_DEFAULT_CLIENT_ID, GOOGLE_DEFAULT_CLIENT_SECRET  respectively. </p>&#xA;&#xA;<p>Make sure to restart your system after configuring the environment variables. Sometimes they don't get into affect immediately.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/3xMKF.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/3xMKF.png"" alt=""enter image description here""></a></p>&#xA;",1089622,"",,"",,2016-10-06T12:17:23,"","",,2,,,
39876727,2,,39419814,2016-10-05T14:28:46,,8,,"<p>in case it's not to late, you simply need to replace your ""node"" target with ""electron-renderer"" in your webpack.config.js</p>&#xA;",2182927,"",,"",,2016-10-05T14:28:46,"","",,1,,,
40046279,2,,39922582,2016-10-14T14:59:56,,8,,"<p>We ended up adding this feature directly in Electron. </p>&#xA;&#xA;<p>This will be released soon on the <code>BrowserWindow</code> api, with the following method signature:</p>&#xA;&#xA;<p><code>previewFile(path [,displayname])</code></p>&#xA;&#xA;<p>This way everyone gets to use it!</p>&#xA;",713881,"",,"",,2016-10-14T14:59:56,"","",,0,,,
39887130,2,,39880979,2016-10-06T03:39:44,,9,,"<p>If you want to load a new URL in an existing window you can do this in the renderer process:</p>&#xA;&#xA;<pre><code>const { remote } = require('electron')&#xA;remote.getCurrentWindow().loadURL('https://github.com')&#xA;</code></pre>&#xA;&#xA;<p>Note that Electron restarts the renderer process when a new URL is loaded, so you'll probably see a flash when that happens. This is why it's usually best to use a single page application (SPA) architecture when building Electron apps.</p>&#xA;",1259938,"",,"",,2016-10-06T03:39:44,"","",,2,,,
20427650,2,,20230014,2013-12-06T15:28:27,,0,,<p>Are you looking for that:</p>&#xA;&#xA;<pre><code>process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME']&#xA;</code></pre>&#xA;,3052444,"",,"",,2013-12-06T15:28:27,"","",,0,,,
20222400,2,,20179343,2013-11-26T16:19:38,,4,,"<p>I opted to bypass the API for oAuth and do it myself.</p>&#xA;&#xA;<p>The user has to copy an auth code and paste it into my app - not first choice, but they only have to do it once and it is preferable to the (lack of) alternative.</p>&#xA;&#xA;<p>Sharing the code for those interested:</p>&#xA;&#xA;<p>When the user choose Google drive:</p>&#xA;&#xA;<pre><code>            window.open('https://accounts.google.com/o/oauth2/auth?'&#xA;                    + 'client_id=&lt;some value&gt;'&#xA;                    + '&amp;scope=&lt;space delimited list of permissions&gt;'&#xA;                    + '&amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob'&#xA;                    + '&amp;response_type=code');&#xA;</code></pre>&#xA;&#xA;<p>This produces a popup that let's them Allow and presents them auth code.</p>&#xA;&#xA;<p>When auth code is pasted into my app, I save it to DB and proceed with getting an access code, which I then save to DB:</p>&#xA;&#xA;<pre><code>            $.ajax({&#xA;                url: ""https://accounts.google.com/o/oauth2/token"",&#xA;                type: 'post',&#xA;                data: {&#xA;                    code: &lt;authCode&gt;,&#xA;                    client_id: CLIENT_ID,&#xA;                    client_secret: CLIENT_SECRET,&#xA;                    redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',&#xA;                    grant_type: 'authorization_code'&#xA;                }&#xA;            }).error(function(data) {&#xA;                myObj.isAuth = false;&#xA;                if (cbFail) {&#xA;                    cbFail(data);&#xA;                }&#xA;            }).success(function(data) {&#xA;                myObj.isAuth = true;&#xA;                &lt;persist entire response&gt;&#xA;                if (cbSuccess) {&#xA;                    cbSuccess();&#xA;                }&#xA;            });&#xA;</code></pre>&#xA;",1085660,"",,"",,2013-11-26T16:19:38,"","",,0,,,
20423314,2,,20236012,2013-12-06T11:57:49,,5,,"<p>Simply use this package.json</p>&#xA;&#xA;<pre><code>{&#xA;  ""window"": {&#xA;    ""show"": false&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",3052444,"",,"",,2013-12-06T11:57:49,"","",,4,,,
20412772,2,,16723887,2013-12-05T23:13:43,,6,,"<p>I think <code>cwd</code> is getting 2 different meanings:</p>&#xA;&#xA;<ol>&#xA;<li>directory where the app lives</li>&#xA;<li>directory where the user launch the app from</li>&#xA;</ol>&#xA;&#xA;<p>In shell scripting <a href=""http://www.linfo.org/current_directory.html"">I can see the 2nd meaning applied</a>, but the node-webkit community &#xA;<a href=""https://github.com/rogerwang/node-webkit/issues/264"">seems to be using the 1st</a></p>&#xA;&#xA;<p>Correct me if I'm wrong, but I think you are looking for the 2nd: the path where the user was when calling to your app.</p>&#xA;&#xA;<p>After some tests I finally found a way that works for me:</p>&#xA;&#xA;<p><code>&#xA;process.env.PWD&#xA;</code></p>&#xA;",1815446,"",1815446,"",2013-12-05T23:18:49,2013-12-05T23:18:49,"","",,3,,,
25851192,2,,18987507,2014-09-15T15:08:18,,0,,"<p>The file-encryptor encrypts all the webm container, you should encrypt the video stream like the <a href=""http://wiki.webmproject.org/encryption/webm-encryption-rfc"" rel=""nofollow"">webM Encryption RFC</a>. You could use the webm_crypt tool from the repository <a href=""https://chromium.googlesource.com/webm/webm-tools/"" rel=""nofollow"">https://chromium.googlesource.com/webm/webm-tools/</a>.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>$ webm_crypt -i video.webm -o encrypted_video.webm&#xA;</code></pre>&#xA;&#xA;<p>This will generate a key file named vid_base_secret.key</p>&#xA;&#xA;<pre><code>$ webm_crypt -i video.webm -o encrypted_video.webm -video_options base_file=vid_base_secret.key&#xA;</code></pre>&#xA;&#xA;<p>In the wiki of WebM project You can find more information although it is something relatively new.</p>&#xA;",2993875,"",,"",,2014-09-15T15:08:18,"","",,1,,,
25988666,2,,25986653,2014-09-23T06:50:19,,0,,"<p>You should load the Sails-Page not your index.html.</p>&#xA;&#xA;<p>One thing you could do is (in your HTML)</p>&#xA;&#xA;<pre><code>window.location.href = ""http://localhost:1337/"";&#xA;</code></pre>&#xA;",3351722,"",,"",,2014-09-23T06:50:19,"","",,1,,,
25836420,2,,25836278,2014-09-14T18:10:20,,1,,"<p>The sed command that you've used searches the nw executable file (like an ordinary text file imagine) for any occurrence of the string <strong>udev.so.0</strong> and substitutes it with <strong>udev.so.1</strong>. The backslashes <strong>\.</strong> before the dots are just for escaping the <strong>.</strong> character, which is a special character for sed (it means any character - a wildcard like <strong><em>*</em></strong> is on windows systems). The <strong>g</strong> character at the end of your command denotes also to continue searching a specific line, even if a first occurrence has been already found. This way the whole file - nw here - is being searched and replaced.</p>&#xA;",2704021,"",,"",,2014-09-14T18:10:20,"","",,3,,,
26032265,2,,26004520,2014-09-25T06:45:12,,1,,"<p>Yes, that should work. You will likely also need <a href=""https://github.com/rogerwang/node-webkit/wiki/Build-native-modules-with-nw-gyp"" rel=""nofollow"">nw-gyp</a>.</p>&#xA;",874605,"",,"",,2014-09-25T06:45:12,"","",,0,,,
25834009,2,,25833825,2014-09-14T13:57:25,,2,,"<p>Awesome, this works, for anyone wondering:</p>&#xA;&#xA;<pre><code>// temp set environment variable for node-webkit&#xA;process.env.NODEWEBKIT_BIN = '/Applications/node-webkit.app/Contents/MacOS/node-webkit';&#xA;&#xA;module.exports = function(config){&#xA;config.set({&#xA;&#xA;basePath : './',&#xA;&#xA;files : [&#xA;  ...&#xA;  'App/scripts/tests/**/*.js'&#xA;  ...&#xA;],&#xA;&#xA;frameworks: ['jasmine'],&#xA;&#xA;browsers : ['NodeWebkit'],&#xA;&#xA;singleRun: true&#xA;&#xA;});&#xA;};&#xA;</code></pre>&#xA;",547856,"",,"",,2014-09-14T13:57:25,"","",,0,,,
25825762,2,,25416161,2014-09-13T17:28:31,,6,,"<p>The unwanted iPhone sound has been fixed/removed in a <a href=""https://github.com/rogerwang/node-webkit/pull/2289"">recent node-webkit pull request and is released.</a></p>&#xA;&#xA;<p>As for generating my own sounds, I use a wrapper around the raw notifications object so that whenever I call the notification show command I also play a sound, as appropriate.</p>&#xA;&#xA;<pre><code>/**&#xA; * Use composition to expand capabilities of Notifications feature.&#xA; */&#xA;function NotificationWrapper(appIcon, title, description, soundFile) {&#xA;&#xA;    /**&#xA;     * A path to a sound file, like /sounds/notification.wav&#xA;     */        &#xA;    function playSound(soundFile) {&#xA;        if(soundFile === undefined) return; &#xA;        var audio = document.createElement('audio');&#xA;        audio.src = soundFile;&#xA;        audio.play();&#xA;        audio = undefined;&#xA;    }&#xA;&#xA;    /**&#xA;     * Show the notification here.&#xA;     */&#xA;    var notification = new window.Notification(title, {&#xA;        body: description,&#xA;        icon: appIcon&#xA;    });&#xA;&#xA;    /**&#xA;     * Play the sound.&#xA;     */&#xA;    playSound(soundFile);&#xA;&#xA;    /**&#xA;     * Return notification object to controller so we can bind click events.&#xA;     */&#xA;    return notification;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>To use it, we simply invoke it using the new keyword:</p>&#xA;&#xA;<pre><code>var myNotification = new NotificationWrapper(&#xA;    '#',    // image icon path goes here&#xA;    'node-webkit is awesome',&#xA;    'Especially now that I can use my own sounds',&#xA;    '/sounds/notification.wav'&#xA;);&#xA;&#xA;myNotification.addEventListener('click', function() { &#xA;    console.log('You clicked the notification.');&#xA;});&#xA;</code></pre>&#xA;",552792,"",,"",,2014-09-13T17:28:31,"","",,0,,,
25966356,2,,25965870,2014-09-22T03:34:42,,12,,"<p>For development purposes, which it sounds like is what you're doing, you don't need to zip up the application bundle each time. This would be time consuming and wasteful, and if we as developers had to do that every time we made a change, many more of us would be foaming at the mouth crazy, not getting anything done, and despising our roles as programmers. :)</p>&#xA;&#xA;<p>Instead, you can run straight from the codebase by installing the <a href=""https://www.npmjs.org/package/nodewebkit"">nodewebkit module</a> globally:</p>&#xA;&#xA;<pre><code>$ sudo npm install -g nodewebkit&#xA;</code></pre>&#xA;&#xA;<p>Then assuming you are in the folder containing the package.json file, you can start the application via the following command:</p>&#xA;&#xA;<pre><code>$ nodewebkit .&#xA;</code></pre>&#xA;&#xA;<p>But this is just skimming the surface of all of the cool things you can do to keep yourself from going insane and donning that straight-jacket!  Several people in the node-webkit community have built some really awesome tools, in full Kathy Sierra style, that <a href=""https://www.youtube.com/watch?v=eSlRd6MnDv8"">create passionate developers who are awesome at their jobs</a>.</p>&#xA;&#xA;<p>First and foremost is <a href=""https://www.npmjs.org/package/gaze"">Gaze</a>. This is a livereload module that will actually reload the node-webkit app after every change you make.  That's a far cry from the zip, run, test, make changes, zip, run, test cycle that many of us have been prisoners to in the past. </p>&#xA;&#xA;<p>With that said, it sounds like you're just starting out with this platform. My suggestion is, whenever you find something you need to do, just google ""npm <em>+whatever it is you're trying to do</em>"" and there may very well be a module or some open source code to quickly help get you from point A to point B. Hope this helps!</p>&#xA;",552792,"",552792,"",2014-09-22T03:43:12,2014-09-22T03:43:12,"","",,1,,,
41238943,2,,41236914,2016-12-20T09:32:03,,0,,"<p>Is it a VB.Net program your pointing too? Change the <code>TopMost</code> property of that form to <code>True</code></p>&#xA;&#xA;<p><strong>Solution 1</strong></p>&#xA;&#xA;<p>Or in your form add this <code>Me.TopMost = True</code> in your <code>Form_LostFocus</code> here is the link I also answer it the same as I given to you, you have the same problem</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/41214450/keep-form-open-when-clicking-on-another-application/41214521#41214521"">Keep form open when clicking on another application</a></p>&#xA;&#xA;<p>Dont forget that the form you will put the code is the form that you will show in your program</p>&#xA;&#xA;<p>Update </p>&#xA;&#xA;<p>Try This.</p>&#xA;&#xA;<p><strong>Solution 2</strong></p>&#xA;&#xA;<pre><code>Dim form1 As Form = new Form&#xA;form.TopMost = True&#xA;form.Owner = Me&#xA;form.ShowDialog()&#xA;form.Dispose()&#xA;</code></pre>&#xA;&#xA;<p><strong>Solution 3</strong></p>&#xA;&#xA;<p><code>Dim frmMessage As New Form()&#xA;frmMessage.Owner = form1&#xA;frmMessage.Show()</code></p>&#xA;",4447282,"",-1,"",2017-05-23T11:46:09,2016-12-21T07:28:28,"","",,14,,,
41274048,2,,41273890,2016-12-22T00:25:08,,0,,<p>You'll want to add elements to an array and render the array of elements.&#xA;Here's some rough code that might help:</p>&#xA;&#xA;<pre><code>Component {&#xA;    constructor() {&#xA;        super(props)&#xA;        this.state = { elements: [] }&#xA;    }&#xA;    render() {&#xA;        return (&lt;div&gt;&#xA;            &lt;div onClick={()=&gt;this.add()}&gt;Add&lt;/div&gt;&#xA;            &lt;div&gt;{this.state.elements}&lt;/div&gt;&#xA;        &lt;/div&gt;)&#xA;    }&#xA;    add() {&#xA;        this.setState({&#xA;            elements: this.state.elements.push(&lt;div id={elements.length}&gt;Element&lt;/div&gt;)&#xA;        })&#xA;    }&#xA;}&#xA;</code></pre>&#xA;,947514,"",,"",,2016-12-22T00:25:08,"","",,1,,,
41292302,2,,40724702,2016-12-22T22:03:01,,0,,"<p>Actually I recently found out (I can't believe I missed it out in the first place but), with chrome file system you can get ""more readable"" path info for display purposes.</p>&#xA;&#xA;<p>Depending on what you are trying to do, you might not access the absolute location but at least you can see what it is...</p>&#xA;&#xA;<pre><code>fileSystem.getDirectory(path, {}, function(dir){&#xA;    if(dir) console.log('This should return full path: ', dir.getDisplayPath());&#xA;    var fullpath = dir.getDisplayPath();&#xA;&#xA;    //now with this, I can open any file I want via child process :)&#xA;&#xA;    var child = exec(getCommandLine() + ' ' + fullpath, function (error, stdout, stderr) &#xA;    //.......&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>More info <a href=""https://developer.chrome.com/apps/fileSystem#method-getDisplayPath"" rel=""nofollow noreferrer"">here</a> regarding chrome file system.</p>&#xA;",3397521,"",,"",,2016-12-22T22:03:01,"","",,0,,,
41292745,2,,41290883,2016-12-22T22:47:54,,0,,"<p>After poking around some more on my computer, I found that this style of pop up is a 'pop over' window, similarly used for the tray apps on Mac.</p>&#xA;&#xA;<p>I do not think this can be recreated natively in electron, HOWEVER, I have found that if you make a transparent frameless window (essentially invisible), you can markup some HTML with CSS in that window to give it the appearance similar to that of a popover.</p>&#xA;",6580083,"",,"",,2016-12-22T22:47:54,"","",,0,,,
41295239,2,,41274017,2016-12-23T04:36:01,,0,,"<p>That means the module <strong>wcjs-player</strong> is not installed. Run <code>npm install wcjs-player</code> in your console/terminal to install it, that must help and also, you might wanna take a look at <a href=""https://www.npmjs.com/package/wcjs-player"" rel=""nofollow noreferrer"">this</a></p>&#xA;",7333168,"",,"",,2016-12-23T04:36:01,"","",,0,,,
41354739,2,,41353314,2016-12-28T02:52:41,,0,,"<p>As per my understanding, <em>standard Output</em> is not going to work in this case because that will have its own formatted way to display. I have few conversion functions apart from the native powershell conversion. You should try them and then you should parse the output.</p>&#xA;&#xA;<p>Here you go:</p>&#xA;&#xA;<ul>&#xA;<li><strong>Convertto-JsonIfAblePSObject</strong></li>&#xA;</ul>&#xA;&#xA;<p>Usage has been mentioned in the comment sections for easy understanding.</p>&#xA;&#xA;<pre><code>&lt;#&#xA;.SYNOPSIS&#xA;    Creates a new PSObject where all properties of the original object that are not able to be&#xA;    properly serialized to JSON are converted to a value which can be properly converted to JSON.&#xA;&#xA;    This includes the following types:&#xA;    *   DateTime&#xA;&#xA;    This conducts a deep property search&#xA;.Example &#xA;    Convert an custom PSObject to have parsable dates in Json&#xA;&#xA;    $customObject = New-Object -TypeName PSobject -Property @{ Date = Get-Date; Number = 23; InnerDate = New-Object -TypeName PSObject -Property @{Date=Get-Date;} }&#xA;&#xA;    ## BAD Json&#xA;    PS C:\dev&gt; $customObject | ConvertTo-Json&#xA;    {&#xA;        ""Date"":  {&#xA;                     ""value"":  ""\/Date(1410372629047)\/"",&#xA;                     ""DisplayHint"":  2,&#xA;                     ""DateTime"":  ""Wednesday, September 10, 2014 2:10:29 PM""&#xA;                 },&#xA;        ""Number"":  23,&#xA;        ""InnerDate"":  {&#xA;                          ""Date"":  {&#xA;                                       ""value"":  ""\/Date(1410372629047)\/"",&#xA;                                       ""DisplayHint"":  2,&#xA;                                       ""DateTime"":  ""Wednesday, September 10, 2014 2:10:29 PM""&#xA;                                   }&#xA;                      }&#xA;    }&#xA;&#xA;    ## Good Json&#xA;    PS C:\dev&gt; $customObject | ConvertTo-JsonifiablePSObject | ConvertTo-Json&#xA;    {&#xA;        ""Date"":  ""2014-09-10T14:10:29.0477785-04:00"",&#xA;        ""Number"":  23,&#xA;        ""InnerDate"":  {&#xA;                          ""Date"":  ""2014-09-10T14:10:29.0477785-04:00""&#xA;                      }&#xA;    }&#xA;&#xA;#&gt;&#xA;function ConvertTo-JsonifiablePSObject&#xA;{&#xA;    param&#xA;    (&#xA;        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]&#xA;        [PSObject]$Object&#xA;    )&#xA;&#xA;    $newObjectProperties = @{}&#xA;&#xA;    foreach ($property in $Object.psobject.properties)&#xA;    {&#xA;        $value = $property.Value&#xA;&#xA;        if ($property.TypeNameOfValue -eq ""System.Management.Automation.PSCustomObject"")&#xA;        {&#xA;            $value = ConvertTo-JsonifiablePSObject -Object $property.Value&#xA;        }&#xA;        elseif ($property.TypeNameOfValue -eq ""System.DateTime"")&#xA;        {&#xA;            $value = $property.Value.ToString(""yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK"")&#xA;        }&#xA;&#xA;        $newObjectProperties[$property.Name] = $value&#xA;    }&#xA;&#xA;    return New-Object -TypeName PSObject -Property $newObjectProperties&#xA;}&#xA;&#xA;$json=$kbm | ConvertTo-Json&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li><p><strong>Convertto-PSON</strong></p>&#xA;&#xA;<pre><code>function ConvertTo-PSON&#xA;&#xA;{&#xA;&lt;#&#xA; .SYNOPSIS&#xA;   creates a powershell object-notation script that generates the same object data&#xA; .DESCRIPTION&#xA;   This produces 'PSON', the powerShell-equivalent of JSON from any object you pass to it. It isn't suitable for the huge objects produced by some of the cmdlets such as Get-Process, but fine for simple objects&#xA; .EXAMPLE&#xA;   $array=@()&#xA;   $array+=Get-Process wi* |  Select-Object Handles,NPM,PM,WS,VM,CPU,Id,ProcessName &#xA;   ConvertTo-PSON $array&#xA;&#xA; .PARAMETER Object &#xA;   the object that you want scripted out&#xA; .PARAMETER Depth&#xA;   The depth that you want your object scripted to&#xA; .PARAMETER Nesting Level&#xA;   internal use only. required for formatting&#xA;#&gt;&#xA;&#xA;[CmdletBinding()]&#xA;param (&#xA;    [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true)][AllowNull()] $inputObject,&#xA;    [parameter(Position = 1, Mandatory = $false, ValueFromPipeline = $false)] [int] $depth = 16,&#xA;    [parameter(Position = 2, Mandatory = $false, ValueFromPipeline = $false)] [int] $NestingLevel = 1,&#xA;    [parameter(Position = 3, Mandatory = $false, ValueFromPipeline = $false)] [int] $XMLAsInnerXML = 0&#xA;)&#xA;&#xA;BEGIN { }&#xA;PROCESS&#xA;{&#xA;    If ($inputObject -eq $Null) { $p += '$Null'; return $p } # if it is null return null&#xA;    $padding = [string]'  ' * $NestingLevel # lets just create our left-padding for the block&#xA;    $ArrayEnd=0; #until proven false&#xA;    try&#xA;    {&#xA;        $Type = $inputObject.GetType().Name # we start by getting the object's type&#xA;        if ($Type -ieq 'Object[]') { $Type = ""$($inputObject.GetType().BaseType.Name)"" } # see what it really is&#xA;        if ($depth -ilt $NestingLevel) { $Type = 'OutOfDepth' } #report the leaves in terms of object type&#xA;        elseif ($Type -ieq 'XmlDocument' -or $Type -ieq 'XmlElement')&#xA;        {&#xA;            if ($XMLAsInnerXML -ne 0) { $Type = 'InnerXML' }&#xA;            else&#xA;            { $Type = 'XML' }&#xA;        } # convert to PS Alias&#xA;            # prevent these values being identified as an object&#xA;        if (@('boolean', 'byte', 'char', 'datetime', 'decimal', 'double', 'float', 'single', 'guid', 'int', 'int32',&#xA;        'int16', 'long', 'int64', 'OutOfDepth', 'RuntimeType', 'PSNoteProperty', 'regex', 'sbyte', 'string',&#xA;        'timespan', 'uint16', 'uint32', 'uint64', 'uri', 'version', 'void', 'xml', 'datatable', 'List`1',&#xA;        'SqlDataReader', 'datarow', 'ScriptBlock', 'type') -notcontains $type)&#xA;        {&#xA;            if ($Type -ieq 'OrderedDictionary') { $Type = 'HashTable' }&#xA;            elseif ($Type -ieq 'PSCustomObject') { $Type = 'PSObject' } #&#xA;            elseif ($inputObject -is ""Array"") { $Type = 'Array' } # whatever it thinks it is called&#xA;            elseif ($inputObject -is ""HashTable"") { $Type = 'HashTable' } # for our purposes it is a hashtable&#xA;            elseif (($inputObject | gm -membertype Properties | Select name | Where name -like 'Keys') -ne $null) { $Type = 'generic' } #use dot notation&#xA;            elseif (($inputObject | gm -membertype Properties | Select name).count -gt 1) { $Type = 'Object' }&#xA;        }&#xA;        write-verbose ""$($padding)Type:='$Type', Object type:=$($inputObject.GetType().Name), BaseName:=$($inputObject.GetType().BaseType.Name) $NestingLevel ""&#xA;        switch ($Type)&#xA;        {&#xA;            'ScriptBlock'{ ""[$type] {$($inputObject.ToString())}"" }&#xA;            'InnerXML'        { ""[$type]@'`r`n"" + ($inputObject.OuterXMl) + ""`r`n'@`r`n"" } # just use a 'here' string&#xA;            'DateTime'   { ""[datetime]'$($inputObject.ToString('s'))'"" } # s=SortableDateTimePattern (based on ISO 8601) local time&#xA;            'Boolean'    {&#xA;                ""[bool] $(&amp;{&#xA;                    if ($inputObject -eq $true) { ""`$True"" }&#xA;                    Else { ""`$False"" }&#xA;                })""&#xA;            }&#xA;            'string'     {&#xA;                if ($inputObject -match '[\r\n]') { ""@'`r`n$inputObject`r`n'@"" }&#xA;                else { ""'$($inputObject -replace '''', '''''')'"" }&#xA;            }&#xA;            'Char'       { [int]$inputObject }&#xA;            { @('byte', 'decimal', 'double', 'float', 'single', 'int', 'int32', 'int16', 'long', 'int64', 'sbyte', 'uint16', 'uint32', 'uint64') -contains $_ }&#xA;            { ""$inputObject"" } # rendered as is without single quotes&#xA;            'PSNoteProperty' { ""$(ConvertTo-PSON -inputObject $inputObject.Value -depth $depth -NestingLevel ($NestingLevel))"" }&#xA;            'Array'      { ""`r`n$padding@("" + (""$($inputObject | ForEach {$ArrayEnd=1; "",$(ConvertTo-PSON -inputObject $_ -depth $depth -NestingLevel ($NestingLevel + 1))"" })"".Substring($ArrayEnd)) + ""`r`n$padding)"" }&#xA;            'HashTable'  { ""`r`n$padding@{"" + (""$($inputObject.GetEnumerator() | ForEach {$ArrayEnd=1; ""; '$($_.Name)' = "" + (ConvertTo-PSON -inputObject $_.Value -depth $depth -NestingLevel ($NestingLevel + 1)) })"".Substring($ArrayEnd) + ""`r`n$padding}"") }&#xA;            'PSObject'   { ""`r`n$padding[pscustomobject]@{"" + (""$($inputObject.PSObject.Properties | ForEach {$ArrayEnd=1; ""; '$($_.Name)' = "" + (ConvertTo-PSON -inputObject $_ -depth $depth -NestingLevel ($NestingLevel + 1)) })"".Substring($ArrayEnd) + ""`r`n$padding}"") }&#xA;            'Dictionary' { ""`r`n$padding@{"" + ($inputObject.item | ForEach {$ArrayEnd=1; '; ' + ""'$_'"" + "" = "" + (ConvertTo-PSON -inputObject $inputObject.Value[$_] -depth $depth -NestingLevel $NestingLevel+1) }) + '}' }&#xA;            'Generic'    { ""`r`n$padding@{"" + (""$($inputObject.Keys | ForEach {$ArrayEnd=1; "";  $_ =  $(ConvertTo-PSON -inputObject $inputObject.$_ -depth $depth -NestingLevel ($NestingLevel + 1))"" })"".Substring($ArrayEnd) + ""`r`n$padding}"") }&#xA;            'Object'     { ""`r`n$padding@{"" + (""$($inputObject | Get-Member -membertype properties | Select-Object name | ForEach {$ArrayEnd=1; "";  $($_.name) =  $(ConvertTo-PSON -inputObject $inputObject.$($_.name) -depth $NestingLevel -NestingLevel ($NestingLevel + 1))"" })"".Substring($ArrayEnd) + ""`r`n$padding}"") }&#xA;            'XML'        { ""`r`n$padding@{"" + (""$($inputObject | Get-Member -membertype properties | where name -ne 'schema' | Select-Object name | ForEach {$ArrayEnd=1; "";  $($_.name) =  $(ConvertTo-PSON -inputObject $inputObject.$($_.name) -depth $depth -NestingLevel ($NestingLevel + 1))"" })"".Substring($ArrayEnd) + ""`r`n$padding}"") }&#xA;            'Datatable'  { ""`r`n$padding@{"" + (""$($inputObject.TableName)=`r`n$padding @("" + ""$($inputObject | ForEach {$ArrayEnd=1; "",$(ConvertTo-PSON -inputObject $_ -depth $depth -NestingLevel ($NestingLevel + 1))"" })"".Substring($ArrayEnd) + ""`r`n$padding  )`r`n$padding}"") }&#xA;            'DataRow'    { ""`r`n$padding@{"" + (""$($inputObject | Get-Member -membertype properties | Select-Object name | ForEach {$ArrayEnd=1; ""; $($_.name)=  $(ConvertTo-PSON -inputObject $inputObject.$($_.name) -depth $depth -NestingLevel ($NestingLevel + 1))"" })"".Substring($ArrayEnd) + ""}"") }&#xA;            default { ""'$inputObject'"" }&#xA;        }&#xA;    }&#xA;    catch&#xA;    {&#xA;        write-error ""Error'$($_)' in script $($_.InvocationInfo.ScriptName) $($_.InvocationInfo.Line.Trim()) (line $($_.InvocationInfo.ScriptLineNumber)) char $($_.InvocationInfo.OffsetInLine) executing $($_.InvocationInfo.MyCommand) on $type object '$($inputObject.Name)' Class: $($inputObject.GetType().Name) BaseClass: $($inputObject.GetType().BaseType.Name) ""&#xA;    }&#xA;    finally { }&#xA;}&#xA;END { }&#xA;}&#xA;</code></pre></li>&#xA;<li><p><strong>Convertto-YAML</strong></p>&#xA;&#xA;<pre><code>function ConvertTo-YAML&#xA;    {&#xA;&lt;#&#xA; .SYNOPSIS&#xA; creates a YAML description of the data in the object&#xA; .DESCRIPTION&#xA; This produces YAML from any object you pass to it. It isn't suitable for the huge objects produced by some of the cmdlets such as Get-Process, but fine for simple objects&#xA; .EXAMPLE&#xA;   $array=@()&#xA; $array+=Get-Process wi* |  Select-Object Handles,NPM,PM,WS,VM,CPU,Id,ProcessName &#xA; ConvertTo-YAML $array&#xA;&#xA; .PARAMETER Object &#xA; the object that you want scripted out&#xA; .PARAMETER Depth&#xA; The depth that you want your object scripted to&#xA; .PARAMETER Nesting Level&#xA; internal use only. required for formatting&#xA;#&gt;&#xA;&#xA;   [CmdletBinding()]&#xA;   param (&#xA;        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true)][AllowNull()] $inputObject,&#xA;        [parameter(Position = 1, Mandatory = $false, ValueFromPipeline = $false)] [int] $depth = 16,&#xA;        [parameter(Position = 2, Mandatory = $false, ValueFromPipeline = $false)] [int] $NestingLevel = 0,&#xA;        [parameter(Position = 3, Mandatory = $false, ValueFromPipeline = $false)] [int] $XMLAsInnerXML = 0&#xA;   )&#xA;&#xA;   BEGIN { }&#xA;   PROCESS&#xA;   {&#xA;        If ($inputObject -eq $Null) { $p += 'null'; return $p } # if it is null return null&#xA;        if ($NestingLevel -eq 0) { '---' }&#xA;&#xA;        $padding = [string]'  ' * $NestingLevel # lets just create our left-padding for the block&#xA;        try&#xA;        {&#xA;          $Type = $inputObject.GetType().Name # we start by getting the object's type&#xA;          if ($Type -ieq 'Object[]') { $Type = ""$($inputObject.GetType().BaseType.Name)"" } #what it really is&#xA;          if ($depth -ilt $NestingLevel) { $Type = 'OutOfDepth' } #report the leaves in terms of object type&#xA;          elseif ($Type -ieq 'XmlDocument' -or $Type -ieq 'XmlElement')&#xA;          {&#xA;             if ($XMLAsInnerXML -ne 0) { $Type = 'InnerXML' }&#xA;             else&#xA;             { $Type = 'XML' }&#xA;          } # convert to PS Alias&#xA;          # prevent these values being identified as an object&#xA;          if (@('boolean', 'byte', 'char', 'datetime', 'decimal', 'double', 'float', 'single', 'guid', 'int', 'int32',&#xA;          'int16', 'long', 'int64', 'OutOfDepth', 'RuntimeType', 'PSNoteProperty', 'regex', 'sbyte', 'string',&#xA;          'timespan', 'uint16', 'uint32', 'uint64', 'uri', 'version', 'void', 'xml', 'datatable', 'List`1',&#xA;          'SqlDataReader', 'datarow', 'ScriptBlock', 'type') -notcontains $type)&#xA;          {&#xA;             if ($Type -ieq 'OrderedDictionary') { $Type = 'HashTable' }&#xA;             elseif ($Type -ieq 'PSCustomObject') { $Type = 'PSObject' } #&#xA;             elseif ($inputObject -is ""Array"") { $Type = 'Array' } # whatever it thinks it is called&#xA;             elseif ($inputObject -is ""HashTable"") { $Type = 'HashTable' } # for our purposes it is a hashtable&#xA;             elseif (($inputObject | gm -membertype Properties |&#xA;             Select name | Where name -like 'Keys') -ne $null) { $Type = 'generic' } #use dot notation&#xA;             elseif (($inputObject | gm -membertype Properties | Select name).count -gt 1) { $Type = 'Object' }&#xA;          }&#xA;          write-verbose ""$($padding)Type:='$Type', Object type:=$($inputObject.GetType().Name), BaseName:=$($inputObject.GetType().BaseType.Name) ""&#xA;&#xA;          switch ($Type)&#xA;          {&#xA;             'ScriptBlock'{ ""{$($inputObject.ToString())}"" }&#xA;             'InnerXML'     { ""|`r`n"" + ($inputObject.OuterXMl.Split(""`r`n"") | foreach{ ""$padding$_`r`n"" }) }&#xA;             'DateTime' { $inputObject.ToString('s') } # s=SortableDateTimePattern (based on ISO 8601) using local time&#xA;             'Boolean' {&#xA;                  ""$(&amp;{&#xA;                     if  ($inputObject -eq $true) { '`true' }&#xA;                     Else  { '`false' }&#xA;                   })""&#xA;             }&#xA;             'string' {&#xA;                  $String = ""$inputObject""&#xA;                  if ($string -match '[\r\n]' -or $string.Length -gt 80)&#xA;                  {&#xA;                    # right, we have to format it to YAML spec.&#xA;                    ""&gt;`r`n"" # signal that we are going to use the readable 'newlines-folded' format&#xA;                    $string.Split(""`n"") | foreach {&#xA;                         $bits = @(); $length = $_.Length; $IndexIntoString = 0; $wrap = 80&#xA;                         while ($length -gt $IndexIntoString + $Wrap)&#xA;                         {&#xA;                           $earliest = $_.Substring($IndexIntoString, $wrap).LastIndexOf(' ')&#xA;                           $latest = $_.Substring($IndexIntoString + $wrap).IndexOf(' ')&#xA;                           $BreakPoint = &amp;{&#xA;                                if ($earliest -gt ($wrap + $latest)) { $earliest }&#xA;                                else { $wrap + $latest }&#xA;                           }&#xA;                           if ($earliest -lt (($BreakPoint * 10)/100)) { $BreakPoint = $wrap } # in case it is a string without spaces&#xA;                           $padding + $_.Substring($IndexIntoString, $BreakPoint).Trim() + ""`r`n""&#xA;                           $IndexIntoString += $BreakPoint&#xA;                         }&#xA;                         if ($IndexIntoString -lt $length) { $padding + $_.Substring($IndexIntoString).Trim() + ""`r`n"" }&#xA;                         else { ""`r`n"" }&#xA;                    }&#xA;                  }&#xA;                  else { ""'$($string -replace '''', '''''')'"" }&#xA;             }&#xA;             'Char'  { ""([int]$inputObject)"" }&#xA;             {&#xA;                  @('byte', 'decimal', 'double', 'float', 'single', 'int', 'int32', 'int16', `&#xA;                  'long', 'int64', 'sbyte', 'uint16', 'uint32', 'uint64') -contains $_&#xA;             }&#xA;             { ""$inputObject"" } # rendered as is without single quotes&#xA;             'PSNoteProperty' { ""$(ConvertTo-YAML -inputObject $inputObject.Value -depth $depth -NestingLevel ($NestingLevel + 1))"" }&#xA;             'Array'   { ""$($inputObject | ForEach { ""`r`n$padding- $(ConvertTo-YAML -inputObject $_ -depth $depth -NestingLevel ($NestingLevel + 1))"" })"" }&#xA;             'HashTable'{&#xA;                  (""$($inputObject.GetEnumerator() | ForEach {&#xA;                    ""`r`n$padding  $($_.Name): "" +&#xA;                     (ConvertTo-YAML -inputObject $_.Value -depth $depth -NestingLevel ($NestingLevel + 1))&#xA;                   })"")&#xA;             }&#xA;             'PSObject' { (""$($inputObject.PSObject.Properties | ForEach { ""`r`n$padding $($_.Name): "" + (ConvertTo-YAML -inputObject $_ -depth $depth -NestingLevel ($NestingLevel + 1)) })"") }&#xA;             'generic'  { ""$($inputObject.Keys | ForEach { ""`r`n$padding  $($_):  $(ConvertTo-YAML -inputObject $inputObject.$_ -depth $depth -NestingLevel ($NestingLevel + 1))"" })"" }&#xA;             'Object' { (""$($inputObject | Get-Member -membertype properties | Select-Object name | ForEach { ""`r`n$padding $($_.name): $(ConvertTo-YAML -inputObject $inputObject.$($_.name) -depth $NestingLevel -NestingLevel ($NestingLevel + 1))"" })"") }&#xA;             'XML' { (""$($inputObject | Get-Member -membertype properties | where-object { @('xml', 'schema') -notcontains $_.name } | Select-Object name | ForEach { ""`r`n$padding $($_.name): $(ConvertTo-YAML -inputObject $inputObject.$($_.name) -depth $depth -NestingLevel ($NestingLevel + 1))"" })"") }&#xA;             'DataRow' { (""$($inputObject | Get-Member -membertype properties | Select-Object name | ForEach { ""`r`n$padding $($_.name):  $(ConvertTo-YAML -inputObject $inputObject.$($_.name) -depth $depth -NestingLevel ($NestingLevel + 1))"" })"") }&#xA;             #  'SqlDataReader'{$all = $inputObject.FieldCount; while ($inputObject.Read()) {for ($i = 0; $i -lt $all; $i++) {""`r`n$padding $($Reader.GetName($i)): $(ConvertTo-YAML -inputObject $($Reader.GetValue($i)) -depth $depth -NestingLevel ($NestingLevel+1))""}}&#xA;             default { ""'$inputObject'"" }&#xA;          }&#xA;        }&#xA;        catch&#xA;        {&#xA;          write-error ""Error'$($_)' in script $($_.InvocationInfo.ScriptName) $($_.InvocationInfo.Line.Trim()) (line $($_.InvocationInfo.ScriptLineNumber)) char $($_.InvocationInfo.OffsetInLine) executing $($_.InvocationInfo.MyCommand) on $type object '$($inputObject)' Class: $($inputObject.GetType().Name) BaseClass: $($inputObject.GetType().BaseType.Name) ""&#xA;        }&#xA;        finally { }&#xA;   }&#xA;&#xA;   END { }&#xA;}&#xA;</code></pre></li>&#xA;</ul>&#xA;&#xA;<p><strong>Note:</strong> Try Convertto-json also apart from all these.</p>&#xA;&#xA;<p>Hope it helps...</p>&#xA;",4831435,"",,"",,2016-12-28T02:52:41,"","",,4,,,
41370225,2,,41316390,2016-12-28T21:52:45,,0,,"<p>[timo] have answered my question with the gist from [dannvix]:</p>&#xA;&#xA;<p><a href=""https://gist.github.com/dannvix/dc0efdbb75bf79a79d1c#file-electron-main-js-L21-L27"" rel=""nofollow noreferrer"">https://gist.github.com/dannvix/dc0efdbb75bf79a79d1c#file-electron-main-js-L21-L27</a></p>&#xA;&#xA;<p>here is the code:</p>&#xA;&#xA;<pre><code>// main.js for Electron&#xA;var app = require(""app""),&#xA;    BrowserWindow = require(""browser-window"");&#xA;&#xA;app.on(""window-all-closed"", function() {&#xA;  app.quit();&#xA;})&#xA;&#xA;var mainWindow = null;&#xA;app.on(""ready"", function() {&#xA;  mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    center: true,&#xA;    resizable: true,&#xA;    frame: true,&#xA;    transparent: false,&#xA;  });&#xA;  mainWindow.setMenu(null);&#xA;&#xA;  // create BrowserWindow with dynamic HTML content&#xA;  var html = [&#xA;    ""&lt;body&gt;"",&#xA;      ""&lt;h1&gt;It works&lt;/h1&gt;"",&#xA;    ""&lt;/body&gt;"",&#xA;  ].join("""");&#xA;  mainWindow.loadUrl(""data:text/html;charset=utf-8,"" + encodeURI(html));&#xA;&#xA;  mainWindow.openDevTools();&#xA;  mainWindow.on(""closed"", function() {&#xA;    mainWindow = null;&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",7315901,"",,"",,2016-12-28T21:52:45,"","",,0,,,
41377411,2,,41343047,2016-12-29T10:06:57,,0,,"<p>After carefuly reading LowDB documentation I ended up making a few changes to the code.</p>&#xA;&#xA;<p>First of all I added <code>writeOnChange: false</code> option when requiring <code>lowdb</code>:</p>&#xA;&#xA;<pre><code>var lowdb = require('lowdb')('db.json', {&#xA;    writeOnChange: false&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then I used <code>cloneDeep()</code> method when querying. Note that <code>LowDB</code> is an angular service that returns <code>lowdb</code>:</p>&#xA;&#xA;<pre><code>vm.job = LowDB.get('jobs').find({id: $routeParams.id}).cloneDeep().value();&#xA;vm.clients = LowDB.get('clients').cloneDeep().value();&#xA;angular.forEach(vm.jobs, function (job) {&#xA;    angular.forEach(vm.clients, function (client) {&#xA;        if(client.id === job.client) {&#xA;            job.client = client;&#xA;        }&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This way, I achieved the query I wanted and data wasn't persisted to the database anymore. It will only persist after calling:</p>&#xA;&#xA;<pre><code>LowDB.write();&#xA;</code></pre>&#xA;",3632710,"",,"",,2016-12-29T10:06:57,"","",,0,,,
41392972,2,,41379540,2016-12-30T08:20:25,,0,,"<p>From the <a href=""https://github.com/electron-userland/electron-builder#quick-setup-guide"" rel=""nofollow noreferrer"">electron-builder quick-setup</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Create a directory build in the root of the project and save a&#xA;  background.png (macOS DMG background), icon.icns (macOS app icon) and&#xA;  icon.ico (Windows app icon) into it.</p>&#xA;  &#xA;  <p>The Linux icon set will be generated automatically based on the macOS&#xA;  icns file (or you can put them into the build/icons directory if you&#xA;  want to specify them yourself. The filename must contain the size&#xA;  (e.g. 32x32.png) of the icon).</p>&#xA;</blockquote>&#xA;&#xA;<p>You will have to specify your icon via the mac-options, even though it's not a build target in your case.</p>&#xA;",1792564,"",,"",,2016-12-30T08:20:25,"","",,0,,,
41414790,2,,41412941,2017-01-01T10:28:30,,0,,"<p>It is explained in the README that in the browser version, the database is persisted to the best available storage option in the browser, amongst indexedDB, localstorage etc. </p>&#xA;&#xA;<p>You cannot find this file on the hard drive, because browse era would not allow script to create files. </p>&#xA;",1339840,"",,"",,2017-01-01T10:28:30,"","",,0,,,
41416044,2,,41332009,2017-01-01T14:02:01,,0,,"<p>I figured out the issue. It didn't have to do with executable file permissions or asar packaging.</p>&#xA;&#xA;<p>To the best of my understanding, the problem was the way I was packaging a native module. The forked process is loading a native module. But while packaging I only chose to package the <code>build/</code> directory, to avoid distributing proprietory source code. This was causing the failure of the forked process. When I also started packaging the <code>package.json</code> file of the native module alongside the <code>build/</code> directory, the forked process ran correctly.</p>&#xA;",174527,"",,"",,2017-01-01T14:02:01,"","",,0,,,
41245698,2,,41241971,2016-12-20T15:21:29,,1,,"<p>After a couple of hours of documentation and, being honest, disappointment, I've found out that you <strong>can't</strong> directly include node modules with systems, because systemjs cannot interprete them directly.</p>&#xA;&#xA;<p>I had to change the whole library, and relied on this one:&#xA;<a href=""https://www.npmjs.com/package/jxon"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/jxon</a>&#xA;which says ""A complete, bidirectional, JXON (lossless JavaScript XML Object Notation) library. <strong>Packed as UMD.</strong>"". I've check what ""UMD"" means, which means ""Universal Module Definition"": <a href=""https://github.com/umdjs/umd"" rel=""nofollow noreferrer"">https://github.com/umdjs/umd</a></p>&#xA;&#xA;<p>So, you likely can use the UMD tools to wrap the modules in your application, else you can rely on existing ones available somewhere.</p>&#xA;&#xA;<p>In my case, using jxon, I had to change my code a bit:</p>&#xA;&#xA;<ol>&#xA;<li>First of all, in package.json I've removed xml-js and added jxon</li>&#xA;<li>In my systemjs.config.js file I've added the module in the map list (along with the other ones): <code>'jxon':'npm:jxon'</code></li>&#xA;<li>Still in the systemjs.config.js file, I had to tell in the ""packages"" section that the defaultextension was JS and that the main file was jxon.min.js: <code>packages: { jxon: { defaultExtension: 'js', main: 'jxon.min.js' } }</code></li>&#xA;<li>Last but not least, I could include it regularly in my typescript file with no errors, and could use the prototypes it offered to accomplish my goals (I've required it using ""require"", not ""import"", but it should work aswell with something like <code>import * as jxonparser from 'jxon'</code>, though I've used: <code>const jxon_parser = require('jxon');</code></li>&#xA;</ol>&#xA;&#xA;<p>So, in a very concise nutshell: <strong>you can't include node modules with systemjs unless they are either as UMD or that can be interpreted from systemjs</strong>. If you want to check the formats supported by systemjs, check this: <a href=""https://github.com/systemjs/systemjs/blob/master/docs/module-formats.md"" rel=""nofollow noreferrer"">https://github.com/systemjs/systemjs/blob/master/docs/module-formats.md</a></p>&#xA;",2275797,"",,"",,2016-12-20T15:21:29,"","",,0,,,
41248639,2,,41225572,2016-12-20T18:05:16,,1,,"<p>Ok I figured it out: Based on this <a href=""https://discuss.atom.io/t/how-i-get-the-data-sent-from-main-process-to-angularjs/19012/2"" rel=""nofollow noreferrer"">post</a> by <strong>jdfwarrior</strong> on atom.io we have to use a little Angular $timeout hack to make things work. After I changed the code snippet provided by PJDev to the following, it worked. It now logs the content of the message and also displays it in the view (cube.html).</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>angular.module('testApp', [])&#xD;&#xA;    .controller('appCtrl', ['$timeout', '$scope', function($timeout, $scope) {&#xD;&#xA;        $scope.model = {&#xD;&#xA;            data: null&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function attachCubeDataHandler() {&#xD;&#xA;            require('electron').ipcRenderer.on('cube-data', (event, message) =&gt; {&#xD;&#xA;                $timeout(function() {&#xD;&#xA;                    $scope.model.data = message;&#xD;&#xA;                    console.log(""in timeout: "" + message);&#xD;&#xA;                },0);&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function initialize() {&#xD;&#xA;            attachCubeDataHandler();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // Invoke initialization&#xD;&#xA;        initialize();&#xD;&#xA;    });</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4606040,"",,"",,2016-12-20T18:05:16,"","",,0,,,
41259132,2,,41249684,2016-12-21T09:22:31,,1,,<p>The command to make an exe file for mac:</p>&#xA;&#xA;<pre><code>electron-packager &lt;sourcedir&gt; &lt;appname&gt; --platform=darwin&#xA;</code></pre>&#xA;&#xA;<p>For windows :</p>&#xA;&#xA;<pre><code>  electron-packager &lt;sourcedir&gt; &lt;appname&gt; --platform=win32&#xA;</code></pre>&#xA;&#xA;<p>Just run this command on CMD outside your source directory.</p>&#xA;,2129173,"",2129173,"",2016-12-21T11:08:13,2016-12-21T11:08:13,"","",,8,,,
41326247,2,,41299788,2016-12-26T03:46:43,,1,,"<p>No, you can't share an object between the main process and the renderer process without serialization.</p>&#xA;",1259938,"",,"",,2016-12-26T03:46:43,"","",,1,,,
41373038,2,,41372999,2016-12-29T04:13:36,,1,,"<p>Apparently there is a setting that got switched somehow. If you are on mac and you you go to System Preferences > General > Show Scroll Bars, you can set it there. It was on show.</p>&#xA;",3479801,"",,"",,2016-12-29T04:13:36,"","",,0,,,
41240935,2,,41169968,2016-12-20T11:10:11,,2,,"<p>The solution is to compress a direct list of files contained in xlsx, for some reason if we try to compress the folder the file has corrupted.</p>&#xA;&#xA;<p>The code looks like this if you use JSZIP</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;var JSZip = require(""jszip"");&#xA;var zip = new JSZip();&#xA;var file = [];&#xA;file.push(""_rels/.rels"");&#xA;file.push(""docProps/core.xml"");&#xA;file.push(""docProps/app.xml"");&#xA;file.push(""docProps/custom.xml"");&#xA;file.push(""[Content_Types].xml"");&#xA;file.push(""xl/_rels/workbook.xml.rels"");&#xA;file.push(""xl/styles.xml"");&#xA;file.push(""xl/pivotTables/_rels/pivotTable3.xml.rels"");&#xA;file.push(""xl/pivotTables/_rels/pivotTable1.xml.rels"");&#xA;file.push(""xl/pivotTables/_rels/pivotTable2.xml.rels"");&#xA;file.push(""xl/pivotTables/pivotTable3.xml"");&#xA;file.push(""xl/pivotTables/pivotTable1.xml"");&#xA;file.push(""xl/pivotTables/pivotTable2.xml"");&#xA;file.push(""xl/workbook.xml"");&#xA;file.push(""xl/worksheets/_rels/sheet2.xml.rels"");&#xA;file.push(""xl/worksheets/_rels/sheet1.xml.rels"");&#xA;file.push(""xl/worksheets/_rels/sheet3.xml.rels"");&#xA;file.push(""xl/worksheets/sheet4.xml"");&#xA;file.push(""xl/worksheets/sheet1.xml"");&#xA;file.push(""xl/worksheets/sheet3.xml"");&#xA;file.push(""xl/worksheets/sheet2.xml"");&#xA;file.push(""xl/sharedStrings.xml"");&#xA;file.push(""xl/pivotCache/_rels/pivotCacheDefinition1.xml.rels"");&#xA;file.push(""xl/pivotCache/pivotCacheDefinition1.xml"");&#xA;file.push(""xl/pivotCache/pivotCacheRecords1.xml"");&#xA;&#xA;for (var i = 0; i &lt; file.length; i++) {&#xA;  zip.file(file[i], fs.readFileSync(""/home/user/xlsx_FILES/""+file[i]));&#xA;}&#xA;&#xA;zip.generateAsync({type:""blob""}).then(function(content) {&#xA;  // see FileSaver.js&#xA;  saveAs(content, ""yourfile.xlsx"");&#xA;});&#xA;</code></pre>&#xA;",5081559,"",,"",,2016-12-20T11:10:11,"","",,0,,,
41248064,2,,41236820,2016-12-20T17:28:53,,2,,"<p>So here we go, right before posting an issue in the Electron repository - it's the most stupid error I could imagine ever making in this situation. </p>&#xA;&#xA;<p>TL;DR:</p>&#xA;&#xA;<pre><code>&lt;meta charset=""utf-8""&gt;&#xA;</code></pre>&#xA;&#xA;<p>What I thought was that opening a second browser window for the backend and putting some JavaScript that runs in it would be enough. What I forgot was that it actually remains a browser window and therefore it needs just a little tiny bit of HTML to let it know that it serves UTF-8 content.</p>&#xA;&#xA;<p>Maybe it's not me, maybe I was right expecting Express to serve UTF-8 over HTTP but nope. Anyway, it all works now.</p>&#xA;",1384021,"",,"",,2016-12-20T17:28:53,"","",,0,,,
41251945,2,,39826575,2016-12-20T22:01:17,,2,,"<p>This has been driving me crazy.  Apparently Chromium ignores <code>autocomplete=""off""</code> now.</p>&#xA;&#xA;<p>The correct way to do this is to set <code>autocomplete=""new-password""</code> on the <code>password</code> input, as seen <a href=""https://stackoverflow.com/a/30976223/2534036"">here</a>.</p>&#xA;",2534036,"",-1,"",2017-05-23T12:10:11,2016-12-20T22:01:17,"","",,0,,,
41280929,2,,41230011,2016-12-22T10:26:29,,2,,"<p>I'm pretty new to Electron too, but as far as I gather from the docs &amp; tutorials, interactions with your database should be done in the main process. You should then use ipc or remote to do the communication between your renderer process and your main. That's how I have it set up anyway.</p>&#xA;&#xA;<p>I use ipc to send events with queries etc from my renderer to my main and then send the results back in the same way. That also allows you to listen for the same data change in multiple places in your app. (eg when i remove the 'favourite' status from a contact, that component gets updated but i can also listen for the update in my favourite list at the same time to reload that so it's up to date)</p>&#xA;",3637857,"",,"",,2016-12-22T10:26:29,"","",,2,,,
41345425,2,,41119447,2016-12-27T12:41:04,,2,,<p>Unfortunately i did n't get any Node JS code for this but i found a solution through following power shell script running as a child process with passing process id as a parameter.</p>&#xA;&#xA;<pre><code>$a=Get-WmiObject win32_process | where {$_.ParentProcessId -eq $processid } &#xA;</code></pre>&#xA;,6533351,"",,"",,2016-12-27T12:41:04,"","",,0,,,
41392429,2,,41388948,2016-12-30T07:31:25,,3,,"<p>I think the scenario is pretty odd: The combination of a desktop-UI with a server-framework seems to be somewhat counter-intuitive.</p>&#xA;&#xA;<p>What you see when file:// is referenced are (local) file system calls - these could well be calls to other protocols like http:// or ws:// instead, and do not require the Express framework to be present.</p>&#xA;&#xA;<p>Instead, Express enables your application to receive connections from the outside and act as a server. This could be a webserver serving static or dynamic content, a REST-API endpoint or some other kind of web service endpoint.</p>&#xA;&#xA;<p><a href=""https://github.com/frankhale/electron-with-express"" rel=""nofollow noreferrer"">There is indeed a project showing exactly this combination</a>: The Express server is responsible for serving content, Electron is used to wrap a logging-UI that displays whatever is currently happening.</p>&#xA;&#xA;<p>From an architecturial standpoint however, I would probably seperate each of these concerns into seperate standalone applications.</p>&#xA;",1792564,"",1792564,"",2018-11-27T20:30:16,2018-11-27T20:30:16,"","",,2,,,
41337350,2,,41337056,2016-12-26T23:44:33,,4,,"<p>Add the following to the JavaScript file that your rendered <code>html</code> file is sourcing in (see, <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md#differences-between-main-process-and-renderer-process"" rel=""nofollow noreferrer"">main process vs renderer process</a>).</p>&#xA;&#xA;<pre><code>var webFrame = require('electron').webFrame;&#xA;webFrame.setVisualZoomLevelLimits(1, 1);&#xA;webFrame.setLayoutZoomLevelLimits(0, 0);&#xA;</code></pre>&#xA;&#xA;<p>In your case, it's <code>renderer.js</code> for the electron-quick-start app.</p>&#xA;&#xA;<p>Documentation:&#xA;<a href=""https://github.com/electron/electron/blob/master/docs/api/web-frame.md#webframesetzoomlevellimitsminimumlevel-maximumlevel"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/web-frame.md#webframesetzoomlevellimitsminimumlevel-maximumlevel</a></p>&#xA;",3814251,"",3814251,"",2016-12-28T23:20:03,2016-12-28T23:20:03,"","",,3,,,
41420496,2,,41418168,2017-01-02T01:25:00,,5,,"<p>Always use <code>require</code> to load CommonJS modules, if you don't then Node won't be able to set up the module scope correctly and things will break in subtle ways. If you load <code>js.js</code> with <code>&lt;script&gt;require('./langs/js.js')&lt;/script&gt;</code> then <code>require('./test')</code> will work as you expect.</p>&#xA;",1259938,"",,"",,2017-01-02T01:25:00,"","",,0,,,
41447766,2,,36753288,2017-01-03T16:17:45,,8,,"<p>I answered my own question with the help of Demian's link to MediaRecorder as well as other related questions.</p>&#xA;&#xA;<p>Below is an excerpt from <a href=""https://github.com/styfle/magnemite/blob/master/src/renderer.ts"" rel=""noreferrer"">magnemite</a> with some minor simplifications and converted from TypeScript to JavaScript ES5 for better understanding to most readers.</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;var electron = require('electron');&#xA;&#xA;var SECRET_KEY = 'Magnemite';&#xA;&#xA;var recorder;&#xA;var blobs = [];&#xA;&#xA;function startRecording() {&#xA;    var title = document.title;&#xA;    document.title = SECRET_KEY;&#xA;&#xA;    electron.desktopCapturer.getSources({ types: ['window', 'screen'] }, function(error, sources) {&#xA;        if (error) throw error;&#xA;        for (let i = 0; i &lt; sources.length; i++) {&#xA;            let src = sources[i];&#xA;            if (src.name === SECRET_KEY) {&#xA;                document.title = title;&#xA;&#xA;                navigator.webkitGetUserMedia({&#xA;                    audio: false,&#xA;                    video: {&#xA;                        mandatory: {&#xA;                            chromeMediaSource: 'desktop',&#xA;                            chromeMediaSourceId: src.id,&#xA;                            minWidth: 800,&#xA;                            maxWidth: 1280,&#xA;                            minHeight: 600,&#xA;                            maxHeight: 720&#xA;                        }&#xA;                    }&#xA;                }, handleStream, handleUserMediaError);&#xA;                return;&#xA;            }&#xA;        }&#xA;    });&#xA;}&#xA;&#xA;function handleStream(stream) {&#xA;    recorder = new MediaRecorder(stream);&#xA;    blobs = [];&#xA;    recorder.ondataavailable = function(event) {&#xA;        blobs.push(event.data);&#xA;    };&#xA;    recorder.start();&#xA;}&#xA;&#xA;function stopRecording() {&#xA;    recorder.stop();&#xA;    toArrayBuffer(new Blob(blobs, {type: 'video/webm'}), function(ab) {&#xA;        var buffer = toBuffer(ab);&#xA;        var file = `./videos/example.webm`;&#xA;        fs.writeFile(file, buffer, function(err) {&#xA;            if (err) {&#xA;                console.error('Failed to save video ' + err);&#xA;            } else {&#xA;                console.log('Saved video: ' + file);&#xA;            }&#xA;        });&#xA;    });&#xA;}&#xA;&#xA;function handleUserMediaError(e) {&#xA;    console.error('handleUserMediaError', e);&#xA;}&#xA;&#xA;function toArrayBuffer(blob, cb) {&#xA;    let fileReader = new FileReader();&#xA;    fileReader.onload = function() {&#xA;        let arrayBuffer = this.result;&#xA;        cb(arrayBuffer);&#xA;    };&#xA;    fileReader.readAsArrayBuffer(blob);&#xA;}&#xA;&#xA;function toBuffer(ab) {&#xA;    let buffer = new Buffer(ab.byteLength);&#xA;    let arr = new Uint8Array(ab);&#xA;    for (let i = 0; i &lt; arr.byteLength; i++) {&#xA;        buffer[i] = arr[i];&#xA;    }&#xA;    return buffer;&#xA;}&#xA;&#xA;// Record for 7 seconds and save to disk&#xA;startRecording();&#xA;setTimeout(function() { stopRecording() }, 7000);&#xA;</code></pre>&#xA;&#xA;<p>This will record the current electron window for 7 seconds and save to disk.</p>&#xA;",266535,"",266535,"",2017-01-03T16:23:57,2017-01-03T16:23:57,"","",,2,,,
41326148,2,,41258906,2016-12-26T03:24:29,,11,,"<p>You don't need to package your app to change the application menu. Check that you're calling <code>Menu.setApplicationMenu()</code> after the <code>ready</code> event is emitted, e.g.</p>&#xA;&#xA;<pre><code>app.on('ready', () =&gt; {&#xA;  const menu = Menu.buildFromTemplate(template)&#xA;  Menu.setApplicationMenu(menu)&#xA;})&#xA;</code></pre>&#xA;",1259938,"",1259938,"",2017-01-05T10:05:03,2017-01-05T10:05:03,"","",,1,,,
41255540,2,,41254904,2016-12-21T05:12:07,,13,,"<p>I investigated your issue and determined that it happens because <code>readFile</code> handler is executed outside angular zone. So, it won't react on your click event because you left zone responsible for change detection.</p>&#xA;&#xA;<p>What's the easiest solution for that? </p>&#xA;&#xA;<p><strong>app.component.ts</strong></p>&#xA;&#xA;<pre><code>constructor(private zone: NgZone) {&#xA;...&#xA;this.zone.run(() =&gt; {&#xA;  data.values.forEach(( value ) =&gt; { this.service.addValue( value ); } );&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>and then you can get rid of <code>this.changeDetector.detectChanges();</code></p>&#xA;&#xA;<p>With <code>zone.run(...)</code> you explicitely make code execute inside Angulars zone and change detection is run afterwards.</p>&#xA;&#xA;<p><em>One more advice:</em></p>&#xA;&#xA;<p>I noticed reduntant code in your <code>app.component.ts</code> like:</p>&#xA;&#xA;<pre><code>private service: Service;&#xA;&#xA;constructor(service: Service ) {&#xA;    this.service = service;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can just rewrite it like:</p>&#xA;&#xA;<pre><code>constructor(private service: Service ) {}&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps you!</p>&#xA;",5485167,"",5485167,"",2016-12-22T05:06:46,2016-12-22T05:06:46,"","",,5,,,
21308068,2,,21254634,2014-01-23T12:23:42,,0,,"<p>If you want to use native widgets, you will need a bridge or several ones that match the platform/devices you want to target. IMO you'll lose the benefit of what node-webkit offers, which is having JS/nodeJS on the whole stack and HTML5 for a versatile UI.</p>&#xA;&#xA;<p>Many third-parties HTML5/JS/NodeJS fulfil almost all your needs. What are the particular widgets you are interested in? </p>&#xA;",313353,"",,"",,2014-01-23T12:23:42,"","",,3,,,
21347887,2,,21326709,2014-01-25T07:25:31,,0,,"<p>It turns out this is an actual problem with SVG's in browsers. The solution, as noted <a href=""https://stackoverflow.com/questions/2296097/making-an-svg-image-object-clickable-with-onclick-avoiding-absolute-positioning"">here</a>, is to have the <em>SVG</em> hold the mouse up/down/click events in a transparent (<code>fill-opacity=""0.0""</code>) rectangle spanning the whole image.</p>&#xA;&#xA;<p>In my case, the solution was:</p>&#xA;&#xA;<pre><code>var svg_click = svg.getElementsByClassName(name + ""-icon-click"")[0];&#xA;&#xA;svg_click.onmousedown = function() {&#xA;    styleIcon(svg, name, theme.click);&#xA;};&#xA;&#xA;// etc...&#xA;</code></pre>&#xA;&#xA;<p>I'm not terribly pleased with it, considering it should also work from the <code>&lt;object&gt;</code> tag, but hey...it's still a solution.</p>&#xA;",2749401,"",-1,"",2017-05-23T11:56:05,2014-01-26T07:34:58,"","",,0,,,
21350487,2,,21341856,2014-01-25T12:24:59,,1,,<p>I found it finally. It can be got from process.execPath.</p>&#xA;,886773,"",,"",,2014-01-25T12:24:59,"","",,0,,,
21446124,2,,21445824,2014-01-30T01:18:45,,1,,"<p>This could be because <code>readFile</code> is asynchronous. Try something like this:</p>&#xA;&#xA;<pre><code>.service('tagList', function($q) {&#xA;  var d = $q.defer();&#xA;  this.getTags = function() {&#xA;    fs.readFile('tags', 'utf8', function(err, data) {&#xA;      if (err) throw err;&#xA;      console.debug(data.split(','));&#xA;      d.resolve(data.split(','));&#xA;    });&#xA;    return d.promise();&#xA;  };    &#xA;})&#xA;</code></pre>&#xA;&#xA;<p>and then use it like this:</p>&#xA;&#xA;<pre><code>.controller('sidebarCtrl', function($scope, tagList) {&#xA;  tagList.getTags().then(function(tags){&#xA;    $scope.tags = tags;&#xA;  });&#xA;})&#xA;</code></pre>&#xA;",1316698,"",,"",,2014-01-30T01:18:45,"","",,1,,,
21331522,2,,21304845,2014-01-24T11:28:48,,4,,"<p>As always, I was not trying hard enough, the right command for ResHacker was :  </p>&#xA;&#xA;<p><code>ResHacker -addoverwrite ""App.exe"", ""AppTest.exe"", ""MyIcon.ico"", ICONGROUP, IDR_MAINFRAME, 1033</code></p>&#xA;&#xA;<p>Also if someone wants to dig mvanderw's solution you will need <a href=""http://anolis.codeplex.com/"" rel=""nofollow"">Resourcer</a> and then run the following command : </p>&#xA;&#xA;<p><code>Resourcer -op:upd -src:App.exe -type:14 -name:IDR_MAINFRAME -file:MyIncon.ico</code></p>&#xA;",1496149,"",,"",,2014-01-24T11:28:48,"","",,0,,,
30992208,2,,30991740,2015-06-23T00:57:19,,1,,"<p>I'm not familiarized with the applescript language, but is possible between languages that have an implemented library for <code>socket.io</code></p>&#xA;&#xA;<p>Using <code>socket.io</code> you can behave between applications, <code>socket.io</code> act like an node.js <code>EventEmitter</code> (or pubsub), clients can send events and suscribe to those events in real-time.</p>&#xA;&#xA;<p>For your case you can create a socket.io server with <code>node.js</code></p>&#xA;&#xA;<pre><code>var app = require('express')();&#xA;var http = require('http').Server(app);&#xA;var io = require('socket.io')(http);&#xA;&#xA;io.on('connection', function(socket){&#xA;&#xA;  // Listens the 'control-hide' event&#xA;  socket.on('control-hide', function () {&#xA;      // Emit for all connected sockets, the node-webkit app knows hot to handle it&#xA;      io.emit('hide');&#xA;  });&#xA;&#xA;  // Listens the 'control-show' event&#xA;  socket.on('control-show', function () {&#xA;      // Emit for all connected sockets, the node-webkit app knows hot to handle it&#xA;      io.emit('show');&#xA;  });&#xA;});&#xA;&#xA;http.listen(3000, function(){&#xA;  console.log('listening on *:3000');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And add a <a href=""https://github.com/automattic/socket.io-client"" rel=""nofollow"">socket.io client</a> to your node-webkit application</p>&#xA;&#xA;<pre><code>var socket = require('socket.io-client')('http://localhost:3000'); // I will assume that the server is in the same machine&#xA;&#xA;socket.on('connect', function(){&#xA;  console.log('connected');&#xA;});&#xA;&#xA;// Listens the 'hide' event&#xA;socket.on('hide', function(){&#xA;  // hide window&#xA;});&#xA;&#xA;// Listens the 'show' event&#xA;socket.on('show', function(){&#xA;  // show window&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And for this example I will assume that another javascript application will control the ""show"" and ""hide"" operations</p>&#xA;&#xA;<pre><code>var socket = require('socket.io-client')('http://localhost:3000'); // I will assume that the server is in the same machine&#xA;&#xA;socket.on('connect', function(){&#xA;  console.log('connected');&#xA;});&#xA;&#xA;// sends a 'control-show' event to the server&#xA;function show() {&#xA;  socket.emit('control-show');&#xA;}&#xA;&#xA;// sends a 'control-hide' event to the server&#xA;function hide() {&#xA;  socket.emit('control-hide');&#xA;}&#xA;</code></pre>&#xA;",4103910,"",,"",,2015-06-23T00:57:19,"","",,0,,,
31072923,2,,31055248,2015-06-26T12:13:43,,1,,"<p>The solution is to set the working node-webkit application page to have a utf-8 encoding. I have to add this to the page:</p>&#xA;&#xA;<pre><code>&lt;meta charset=""utf-8""&gt;&#xA;</code></pre>&#xA;&#xA;<p>It turns out to be something very simple yet I've missed.</p>&#xA;",1993909,"",,"",,2015-06-26T12:13:43,"","",,0,,,
31104921,2,,31104035,2015-06-28T21:26:03,,1,,"<p>According to the documentation, <code>fs.readFileSync()</code> returns a <code>String</code> if and only if the second parameter, <code>encoding</code>, is specified. Otherwise it returns a buffer.</p>&#xA;&#xA;<p>So <code>fs.readFileSync(""settings.json"", ""utf8"")</code> should do the trick.</p>&#xA;",1276306,"",,"",,2015-06-28T21:26:03,"","",,0,,,
31102611,2,,31061262,2015-06-28T17:24:18,,2,,"<p>This isn't possible, sorry! The code that allows single-process in Chromium is busted and bitrotted</p>&#xA;",5728,"",,"",,2015-06-28T17:24:18,"","",,0,,,
31064330,2,,30005432,2015-06-26T03:19:31,,3,,"<p>For all</p>&#xA;&#xA;<pre><code>window.addEventListener('keydown',function(e){&#xA;  e.preventDefault();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>or a specific key </p>&#xA;&#xA;<pre><code>window.addEventListener('keydown',function(e){&#xA;  if(e.keyCode === numKey || [...]){&#xA;     e.preventDefault();&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",4394520,"",4394520,"",2015-07-18T16:31:48,2015-07-18T16:31:48,"","",,0,,,
31149853,2,,31149104,2015-06-30T22:50:15,,3,,"<p>Unless you want to write some native C module, there is hacky way to get this done easily: using windows <code>wmic</code> command. This is the command to get version (found by googling):</p>&#xA;&#xA;<pre><code>wmic datafile where name='c:\\windows\\system32\\notepad.exe' get Version&#xA;</code></pre>&#xA;&#xA;<p>so you can just run this command in node to get the job done:</p>&#xA;&#xA;<pre><code>var exec = require('child_process').exec&#xA;&#xA;exec('wmic datafile where name=""c:\\\\windows\\\\system32\\\\notepad.exe"" get Version', function(err,stdout, stderr){&#xA; if(!err){&#xA;   console.log(stdout)// parse this string for version&#xA; }&#xA;});&#xA;</code></pre>&#xA;",1807881,"",,"",,2015-06-30T22:50:15,"","",,6,,,
31064856,2,,31060012,2015-06-26T04:20:54,,4,,"<p>While you can disable <code>node-integration</code> as Shwany said, I believe that will effectively render the <code>ipc</code> modules useless, which will probably pose undesirable limitations since you won't be able to communicate between the main and renderer processes.</p>&#xA;&#xA;<p>However, it is possible, with a bit of finagling, to get Dojo to play nice with Electron.  There are only a couple of things you need to do in your entry page.</p>&#xA;&#xA;<p>Firstly, force the <code>host-node</code> has feature to <code>false</code>.  This can be done by setting it in <code>dojoConfig.has</code>, e.g.:</p>&#xA;&#xA;<pre><code>var dojoConfig = {&#xA;    async: true,&#xA;    has: {&#xA;        'host-node': false&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Secondly, as Shwany pointed out, Dojo is going to see the already-existing <code>require</code>, so we need to move that out before loading Dojo:</p>&#xA;&#xA;<pre><code>// Move Electron's require out before loading Dojo&#xA;window.electronRequire = require;&#xA;delete window.require;&#xA;</code></pre>&#xA;&#xA;<p>After loading dojo.js, you can move Dojo's require elsewhere and move Electron's back, if you wish.  Whether you want to do this may depend on how you intend to code the client side of your application.  Ostensibly, Dojo's global <code>require</code> is never needed, since you can request a context-sensitive <code>require</code> in any defined module via the <code>'require'</code> module ID.</p>&#xA;&#xA;<p>If you want to see a scaffolded Electron application incorporating Dojo, I created a <a href=""https://github.com/kfranqueiro/electron-dojo-boilerplate"" rel=""nofollow"">boilerplate</a> a few weeks ago (though be advised it's currently relying on a fork of electron-packager).  If you want to see an example of a more full-blown Electron/Dojo application, I wrote a music player called <a href=""https://github.com/kfranqueiro/nukebox"" rel=""nofollow"">Nukebox</a> a couple of months ago which uses Dojo and dgrid (though its scaffolding is a bit different than the newer boilerplate).</p>&#xA;",237950,"",,"",,2015-06-26T04:20:54,"","",,3,,,
31061148,2,,30916282,2015-06-25T21:31:53,,7,,"<p>As @Oztaco stated, in the <a href=""http://electron.atom.io/docs/v0.28.0/tutorial/quick-start/"">QuickStart Guide</a> it has the following code sample:</p>&#xA;&#xA;<pre><code>// Keep a global reference of the window object, if you don't, the window will&#xA;// be closed automatically when the javascript object is GCed.&#xA;var mainWindow = null;&#xA;&#xA;// This method will be called when Electron has done everything&#xA;// initialization and ready for creating browser windows.&#xA;app.on('ready', function() {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({width: 800, height: 600});&#xA;&#xA;  // other code ommited&#xA;&#xA;  // Emitted when the window is closed.&#xA;  mainWindow.on('closed', function() {&#xA;    // Dereference the window object, usually you would store windows&#xA;    // in an array if your app supports multi windows, this is the time&#xA;    // when you should delete the corresponding element.&#xA;    mainWindow = null;&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",3683,"",,"",,2015-06-25T21:31:53,"","",,0,,,
31175073,2,,31130150,2015-07-02T03:22:15,,9,,"<p>I believe what you are looking for is in the <a href=""https://github.com/atom/electron/blob/master/docs/api/clipboard.md#clipboard"" rel=""noreferrer"">clipboard</a> API. </p>&#xA;&#xA;<p>There is also a <a href=""https://github.com/atom/electron/blob/master/docs/api/global-shortcut.md#global-shortcut"" rel=""noreferrer"">global shortcut API</a>. Check out this <a href=""https://stackoverflow.com/questions/27829839/disable-backspace-in-atom-shell/30831373#30831373"">SO answer</a> where I gave an example of how it works.</p>&#xA;&#xA;<p>@WhereDatApp.com's answer shows an example of some basic read/write operations using the <a href=""https://github.com/atom/electron/blob/master/docs/api/clipboard.md#clipboard"" rel=""noreferrer"">clipboard</a> API:</p>&#xA;&#xA;<p>How to write and read a string from the clipboard:</p>&#xA;&#xA;<pre><code>const {clipboard} = require('electron');&#xA;clipboard.writeText('Example String', 'selection');&#xA;let clipboardStr = clipboard.readText('selection');&#xA;</code></pre>&#xA;&#xA;<p>The 'Example String' is the text you would add to the clipboard, and 'selection' is the reference you would use to read that clipboard item. </p>&#xA;",1846224,"",1846224,"",2018-06-04T14:45:31,2018-06-04T14:45:31,"","",,0,,,
31174463,2,,31171597,2015-07-02T01:54:29,,129,,"<p>You must access the BrowserWindow object created by your main process and call the <code>minimize</code>, <code>maximize</code>, and <code>close</code> methods on that. You can access this using the <code>remote</code> module. Here is an example of binding all three buttons:</p>&#xA;&#xA;<pre><code>  const remote = require('electron').remote;&#xA;&#xA;  document.getElementById(""min-btn"").addEventListener(""click"", function (e) {&#xA;       var window = remote.getCurrentWindow();&#xA;       window.minimize(); &#xA;  });&#xA;&#xA;  document.getElementById(""max-btn"").addEventListener(""click"", function (e) {&#xA;       var window = remote.getCurrentWindow();&#xA;       if (!window.isMaximized()) {&#xA;           window.maximize();          &#xA;       } else {&#xA;           window.unmaximize();&#xA;       }&#xA;  });&#xA;&#xA;  document.getElementById(""close-btn"").addEventListener(""click"", function (e) {&#xA;       var window = remote.getCurrentWindow();&#xA;       window.close();&#xA;  }); &#xA;</code></pre>&#xA;&#xA;<p>assuming your min, max, close buttons have ids of <code>min-btn</code>, <code>max-btn</code>, and <code>close-btn</code>, respectively. </p>&#xA;&#xA;<p>You can view the full documentation for the BrowserWindow along with other functionality you might need here: <a href=""http://electron.atom.io/docs/v0.28.0/api/browser-window/"" rel=""noreferrer"">http://electron.atom.io/docs/v0.28.0/api/browser-window/</a>. </p>&#xA;&#xA;<p>It might also help you to take a look at a tutorial I wrote about building a chromeless window that looks like Visual Studio here: <a href=""http://www.mylifeforthecode.com/making-the-electron-shell-as-pretty-as-the-visual-studio-shell"" rel=""noreferrer"">http://www.mylifeforthecode.com/making-the-electron-shell-as-pretty-as-the-visual-studio-shell</a>. Your question is covered along with some css to properly position the buttons.</p>&#xA;",3399439,"",3995261,"",2018-01-14T22:19:49,2018-01-14T22:19:49,"","",,4,,,
14245212,2,,14146922,2013-01-09T19:46:12,,2,,"<p><code>window.close()</code> can only be called by the same page that opened the window in the first place (otherwise third-party web pages would be closing windows on us at will). Once you navigate away, you lose this connection and ability.</p>&#xA;",12579,"",,"",,2013-01-09T19:46:12,"","",,2,,,
14184603,2,,14181127,2013-01-06T17:13:15,,4,,"<p>Search for ""HTML5 Desktop"" and you will find all the platforms that allows you to build desktop apps using html5 in the first page like appjs, tidesk, pokki, node-webkit etc.</p>&#xA;",153015,"",,"",,2013-01-06T17:13:15,"","",,1,,,
40162992,2,,39901459,2016-10-20T19:31:43,,0,,"<p>There is a link to ""Binaries for other platforms"" in release notes.</p>&#xA;&#xA;<p>For example at page <a href=""http://nwjs.io/blog/v0.17.4/"" rel=""nofollow"">http://nwjs.io/blog/v0.17.4/</a> there is a link to <a href=""https://dl.nwjs.io/v0.17.4/"" rel=""nofollow"">https://dl.nwjs.io/v0.17.4/</a> which contains symbol files we are looking for. </p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/1eZOJ.jpg"" rel=""nofollow""><img src=""https://i.stack.imgur.com/1eZOJ.jpg"" alt=""enter image description here""></a></p>&#xA;",536349,"",,"",,2016-10-20T19:31:43,"","",,0,,,
40229907,2,,40229831,2016-10-25T01:16:31,,0,,"<p>Wrap a div around the select html tag and set the border color of that div.</p>&#xA;&#xA;<pre><code>&lt;div style=""border: 1px solid orange;""&gt;&#xA; &lt;select&gt;&#xA;  ....&#xA; &lt;/select&gt;&#xA;&lt;/div&gt;  &#xA;</code></pre>&#xA;&#xA;<p><a href=""https://jsfiddle.net/9r926pxs/1/"" rel=""nofollow"">https://jsfiddle.net/9r926pxs/1/</a></p>&#xA;",3825777,"",3825777,"",2016-10-25T01:23:12,2016-10-25T01:23:12,"","",,0,,,
40261253,2,,40210042,2016-10-26T11:35:17,,0,,"<p>Found the answer. &#xA;Basically, I just had to load a second time the url. </p>&#xA;&#xA;<pre><code>var Nightmare = require('nightmare');&#xA;var nightmare = Nightmare({&#xA;  typeInterval: 300,&#xA;  show: true&#xA;});&#xA;&#xA;nightmare&#xA;  .goto('https://pageThatRequireToLoginThenDiplayJsonAsText.com')&#xA;  .type('[name=email]', '')&#xA;  .wait(1000)&#xA;  .type('[name=email]', 'myemail')&#xA;  .wait(1000)&#xA;  .type('[name=password]', '')&#xA;  .wait(1000)&#xA;  .type('[name=password]', 'mypassword')&#xA;  .click('[type=submit]')&#xA;  .wait(25000)&#xA;  .goto('https://pageThatRequireToLoginThenDiplayJsonAsText.com')&#xA;  .wait(25000)&#xA;  .evaluate(function (page, done) {&#xA;&#xA;    document.documentElement&#xA;    done()&#xA;  })&#xA;  .end()&#xA;  .then(function (result) {&#xA;    // fs.writeFileSync('testOutput.json', JSON.stringify(result));&#xA;    console.log(JSON.stringify(result))&#xA;  })&#xA;  .catch(function (error) {&#xA;    console.error('failed:', error);&#xA;  });&#xA;</code></pre>&#xA;",3578105,"",,"",,2016-10-26T11:35:17,"","",,0,,,
40273370,2,,40271335,2016-10-26T22:50:34,,0,,"<p>After an investigation I found that I only need include the certificate into the package of my NW application with the option named ""additional_trust_anchors"", into that we can include an array of certificates.</p>&#xA;",6292474,"",,"",,2016-10-26T22:50:34,"","",,0,,,
40280962,2,,40276775,2016-10-27T09:29:08,,0,,"<p>It seems the steps involved is elaborated in the github page of nw.js but not on docs.</p>&#xA;&#xA;<p>Steps to get reference of form node and input node.</p>&#xA;&#xA;<pre><code>//Detect if button clicked is inside a form. &#xA;//In my case all attachments use same component. So I know the no. of levels to move up&#xA;if(activeElm.parentNode.parentNode.parentNode.tagName==""FORM""){&#xA;    //Navigate to input elm and save it as new activeElm. &#xA;    //Navigation will differ based on your page.&#xA;    activeElm = activeElm.parentNode.parentNode.parentNode.getElementsByTagName('input')[0];&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Steps to emulate file attachment.</p>&#xA;&#xA;<pre><code>var f = new File('/path/to/file', 'name');&#xA; var files = new FileList();&#xA; files.append(f);&#xA; elm.files = files;&#xA;</code></pre>&#xA;",1000666,"",1000666,"",2016-10-27T10:01:57,2016-10-27T10:01:57,"","",,0,,,
40302943,2,,40288178,2016-10-28T10:15:50,,0,,"<p>Found a solution for this issue. It seems that the problem was with my MacOS cache. MacOS have Icon Services Cache, so whenever you build something with one icon next time it won't change icon to new one because of cache. </p>&#xA;&#xA;<p>Solution: </p>&#xA;&#xA;<p>Use OnyX software for Mac to clean up Icon Services Cache. User > IconServices > Execute.</p>&#xA;",1399381,"",,"",,2016-10-28T10:15:50,"","",,0,,,
40104183,2,,40098440,2016-10-18T09:15:16,,1,,"<p>You need to define a <code>global</code> object on your <code>Main</code> process,</p>&#xA;&#xA;<pre><code>global.yourSharedObj = {some_prop: true};&#xA;</code></pre>&#xA;&#xA;<p>and with Electron's Remote API, you can access that object in <code>Renderer</code> with something like this:</p>&#xA;&#xA;<pre><code>var remote = require('electron').remote;     &#xA;console.log(remote.getGlobal('yourSharedObj').some_prop);&#xA;</code></pre>&#xA;&#xA;<p>Remote API Docs:<br>&#xA;<a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md"" rel=""nofollow"">https://github.com/electron/electron/blob/master/docs/api/remote.md</a></p>&#xA;",555760,"",,"",,2016-10-18T09:15:16,"","",,0,,,
40138331,2,,40012346,2016-10-19T17:50:32,,1,,"<blockquote>&#xA;  <p>Does anyone knows what that error means?</p>&#xA;</blockquote>&#xA;&#xA;<p>Those error codes come from Chromium, happening when there's an issue with the underlying navigation.  <code>-3</code> is the <a href=""https://cs.chromium.org/chromium/src/net/base/net_error_list.h?l=31-32"" rel=""nofollow"">navigation abort error code</a>, which <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-did-fail-load"" rel=""nofollow"">Electron (what Nightmare is based on) bubbles up</a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>My code has few nightmare instances nested each other so I can handle the asynchronous call one by one.</p>&#xA;</blockquote>&#xA;&#xA;<p>Asynchronous operations with Nightmare are kind of tricky.  This is getting somewhat offtopic, but can you provide a sample of your source?  I suspect you may have an issue with implementation.</p>&#xA;",1139700,"",,"",,2016-10-19T17:50:32,"","",,1,,,
40161303,2,,40153227,2016-10-20T17:54:27,,1,,"<p>You can handle the events in whichever controller(s) are used to modify your view. You just have to ensure that the controller handling the event shares $scope with the controller triggering the event.</p>&#xA;&#xA;<p>When you trigger an Angular event, you can either use $emit or $broadcast. Calling</p>&#xA;&#xA;<pre><code>$scope.$emit(name, args);&#xA;</code></pre>&#xA;&#xA;<p>will send the event upwards in the scope hierarchy, so if you have a parent controller, it will hear about the event. $broadcast sends the event downwards. However, if your controllers are all registered at the same hierarchical level, you have to use $rootScope.</p>&#xA;&#xA;<p>Whether you use $rootScope or $scope, make sure you inject it into the controller that is listening for the event as well as the controller triggering the event.</p>&#xA;",3715801,"",,"",,2016-10-20T17:54:27,"","",,0,,,
40183390,2,,40146701,2016-10-21T18:36:33,,1,,"<p>I am not using an npm package but my approach is similar to what you have mentioned. I have a config directory with different config files for different environments: dev, test, prod. Then in my package.json I have added environment specific build commands. e.g. For prod:</p>&#xA;&#xA;<pre><code>""build-prod-config"": ""config/buildProdConfig.sh"",&#xA;""build-renderer-prod"": ""webpack --config=webpack.config.renderer.prod.js"",&#xA;""build-main-prod"": ""webpack --config=webpack.config.main.prod.js"",&#xA;""build-prod"": ""npm run build-prod-config &amp;&amp; npm run build-main-prod &amp; npm run build-renderer-prod"",&#xA;&#xA;buildProdConfig.sh&#xA;#!/usr/bin/env bash&#xA;&#xA;cp config/app.config.prod.js config/app.config.js&#xA;echo ""Copied ProdConfig to Config""&#xA;&#xA;//This is what a config file looks like&#xA;const Config = {&#xA;  suppDataDirectoryPath: '/suppData/',&#xA;  builtFor: 'prod',&#xA;}&#xA;&#xA;module.exports = Config;&#xA;</code></pre>&#xA;&#xA;<p>I then require Config whereever I need in my application and use the values. This is a simple thing for now, and perhaps doesn't have the flexibility of the config package you linked to, but it works. </p>&#xA;&#xA;<p>Also, another important thing is that I am not packing my application into an ASAR archive, but I think my approach would still work because I am packing everything into a bundle using webpack. </p>&#xA;",324143,"",,"",,2016-10-21T18:36:33,"","",,4,,,
40183474,2,,40144253,2016-10-21T18:42:49,,1,,"<p>I have a config directory with different config files for different environments: dev, test, prod. Then in my package.json I have added environment specific build commands. e.g. For prod:</p>&#xA;&#xA;<pre><code>""build-prod-config"": ""config/buildProdConfig.sh"",&#xA;""build-renderer-prod"": ""webpack --config=webpack.config.renderer.prod.js"",&#xA;""build-main-prod"": ""webpack --config=webpack.config.main.prod.js"",&#xA;""build-prod"": ""npm run build-prod-config &amp;&amp; npm run build-main-prod &amp; npm run build-renderer-prod"",&#xA;&#xA;buildProdConfig.sh&#xA;#!/usr/bin/env bash&#xA;&#xA;cp config/app.config.prod.js config/app.config.js&#xA;echo ""Copied ProdConfig to Config""&#xA;&#xA;//This is what a config file looks like&#xA;const Config = {&#xA;  suppDataDirectoryPath: '/suppData/',&#xA;  builtFor: 'prod',&#xA;}&#xA;&#xA;module.exports = Config;&#xA;</code></pre>&#xA;&#xA;<p>I then require Config whereever I need in my application and use the values. This is a simple thing for now, but it works. </p>&#xA;",324143,"",,"",,2016-10-21T18:42:49,"","",,0,,,
40187813,2,,40175789,2016-10-22T02:42:49,,1,,"<p>Attempting to write a file within the application installation directory is a bad idea, often the user will not have the permission to do so. Instead you should write files to the location returned by <a href=""http://electron.atom.io/docs/api/app/#appgetpathname"" rel=""nofollow""><code>app.getPath('userData')</code></a>.</p>&#xA;",1259938,"",,"",,2016-10-22T02:42:49,"","",,0,,,
40188477,2,,40188413,2016-10-22T04:55:00,,1,,"<p>Turns out this is intended to be run with the 'electron' command, so since I did not install it globally (assuming I am in my project directory):</p>&#xA;&#xA;<pre><code>node_modules/.bin/electron ./src/goelectron.js&#xA;</code></pre>&#xA;&#xA;<p>otherwise if I had, it would be:</p>&#xA;&#xA;<pre><code>electron ./src/goelectron.js&#xA;</code></pre>&#xA;",859485,"",,"",,2016-10-22T04:55:00,"","",,2,,,
40251486,2,,40225193,2016-10-25T23:42:59,,1,,"<p>Well I've made a little research and figured out that the problem comes from the loader which you are using on the webpack's configuration. When using <code>webpack</code>, you don't have to use <code>moduleId</code> (it's required for <code>SystemJS</code> only), because webpack has it's own loader for angular2 templates which is <code>angular2-template-loader</code>. Also, there is the <code>raw-loader</code> for <code>html</code> and <code>css</code> files.</p>&#xA;&#xA;<p>So firstly, remove <code>moduleId</code> from the <code>component</code> declaration.</p>&#xA;&#xA;<pre><code>...&#xA;@Component({&#xA;  selector: 'ct-menu',&#xA;  templateUrl: 'menu.component.html'&#xA;})&#xA;&#xA;export class MenuComponent {&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>Secondly you have to install <code>angular2-template-loader</code> and <code>raw-loader</code>.</p>&#xA;&#xA;<pre><code>npm install --save-dev angular2-template-loader raw-loader&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Warning:</strong> make sure that all <code>angular2-template-loader</code> and <code>raw-loader</code> dependencies are satisfied properly, otherwise, it won't be able to be used by <code>webpack.config</code>.</p>&#xA;  &#xA;  <p><strong>Note 1</strong>: <code>angular2-template-loader</code> require <code>reflect-metadata@0.1.3</code> so you must change your <code>package.json</code> dependency and run <code>npm install</code> again.</p>&#xA;</blockquote>&#xA;&#xA;<p>Finally, change the <code>webpack.config</code> to use the proper loaders for both typescript and static files. So then, you'll be able to run <code>webpack</code> and then <code>npm start</code>.</p>&#xA;&#xA;<pre><code>module: {&#xA;    loaders: [&#xA;        {&#xA;            test: /\.ts$/,&#xA;            loaders: ['ts', 'angular2-template-loader'],&#xA;            exclude: [/\.(spec|e2e)\.ts$/]&#xA;        },&#xA;        {&#xA;            test: /\.(html|css)$/,&#xA;            loader: 'raw-loader'&#xA;        }&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;",4488121,"",4488121,"",2016-10-26T10:33:39,2016-10-26T10:33:39,"","",,6,,,
40275838,2,,40270599,2016-10-27T03:53:32,,1,,"<p>Calling <code>ipcMain</code> doesn't work because you're not on <code>main</code> (i.e., the electron side code, which is on electron <code>index.js</code> file), your are on <code>renderer</code> (web page). Therefore you must use <code>ipcRenderer</code> instead, which is already imported using es6 <code>import</code> syntax on top of your <code>app.ts</code> file. And if you want to make something using electron ipcMain, it have to be done from the electron code side.</p>&#xA;&#xA;<pre><code>import {remote, ipcRenderer} from 'electron';&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Electron ipc notes:</strong></p>&#xA;  &#xA;  <p><strong><a href=""http://electron.atom.io/docs/api/ipc-main/"" rel=""nofollow noreferrer""><code>ipcMain</code></a></strong> Communicate asynchronously from the main process to renderer processes.</p>&#xA;  &#xA;  <p><strong><a href=""http://electron.atom.io/docs/api/ipc-renderer/"" rel=""nofollow noreferrer""><code>ipcRenderer</code></a></strong> Communicate asynchronously from a renderer process to the main process.</p>&#xA;</blockquote>&#xA;",4488121,"",4875631,"",2017-05-07T21:19:10,2017-05-07T21:19:10,"","",,2,,,
40191452,2,,40166912,2016-10-22T11:12:43,,2,,"<p>The Chromium API Electron is built on is not exposed to native Node addons, so I don't think you'll be able to directly render to the canvas from a native Node addon. But Electron does support Chromium's Pepper plugins, which should be capable of rendering GPU accelerated content, so that's probably your best bet. Unfortunately I've never managed to find any documentation that outlines the full capabilities of Pepper plugins, but at least there are some <a href=""https://chromium.googlesource.com/chromium/src/+/master/ppapi/examples"" rel=""nofollow"">sample plugins</a> you can look at.</p>&#xA;",1259938,"",,"",,2016-10-22T11:12:43,"","",,1,,,
40293066,2,,40293044,2016-10-27T19:47:41,,2,,"<p>Use arrow function to retain context:</p>&#xA;&#xA;<pre><code>ipc.on('selected-directory', (event, path) =&gt; {&#xA;   this.selected_file = `You selected: ${path}`;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This way <code>this</code> will be referenced to your class</p>&#xA;&#xA;<p>See also more details here</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this"" rel=""nofollow"">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this</a></li>&#xA;</ul>&#xA;",5485167,"",5485167,"",2016-10-27T19:58:35,2016-10-27T19:58:35,"","",,1,,,
40297413,2,,40297026,2016-10-28T03:03:18,,2,,"<p>Define <code>api</code> using the <code>Input</code> decorator in your <code>ct-api-entry</code> component:</p>&#xA;&#xA;<pre><code>import { Component, Input } from '@angular/core';&#xA;&#xA;@Component({&#xA;  selector: 'ct-api-entry',&#xA;  templateUrl: 'api.entry.component.html',&#xA;  styleUrls: ['api.entry.component.css']&#xA;})&#xA;export class APIEntryComponent {&#xA;   @Input() api: any;   &#xA;   constructor() {}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And then you pass it in the template:</p>&#xA;&#xA;<pre><code>&lt;ct-api-entry *ngFor=""let api of apis"" [api]=""api""&gt;&lt;/ct-api-entry&gt;&#xA;</code></pre>&#xA;",6118299,"",,"",,2016-10-28T03:03:18,"","",,0,,,
40305101,2,,40304833,2016-10-28T12:27:09,,2,,"<p>I think you will be able to run without devtools open if you remove this line: <a href=""https://github.com/chentsulin/electron-react-boilerplate/blob/master/main.development.js#L56"" rel=""nofollow"">https://github.com/chentsulin/electron-react-boilerplate/blob/master/main.development.js#L56</a></p>&#xA;",1514875,"",,"",,2016-10-28T12:27:09,"","",,2,,,
40159332,2,,40145460,2016-10-20T16:04:02,,3,,"<pre><code>window.onload = function() {&#xA;&#xA;var script = document.createElement(""script"");&#xA;script.src = ""https://code.jquery.com/jquery-2.1.4.min.js"";&#xA;script.onload = script.onreadystatechange = function() {&#xA;  $(document).ready(function() {            &#xA;        var temp = $('&lt;div id=""google_translate_element""&gt;Translate&lt;/div&gt;&lt;script type=""text/javascript""&gt;function googleTranslateElementInit() {new google.translate.TranslateElement({pageLanguage: \'de\', includedLanguages: \'en\', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, \'google_translate_element\');}&lt;/script&gt;&lt;script type=""text/javascript"" src=""//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit""&gt;&lt;/script&gt;');         &#xA;        $( ""&lt;div id='translateCode'&gt;&lt;/div&gt;"" ).prependTo( 'body' );&#xA;        $(""#translateCode"").append(temp);&#xA;  });&#xA;};&#xA;document.body.appendChild(script);&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>It works. Tested.</p>&#xA;",6932190,"",6932190,"",2016-10-20T17:02:03,2016-10-20T17:02:03,"","",,0,,,
40102555,2,,40093295,2016-10-18T07:52:06,,5,,"<p>Solved, I moved the font-awesome.min.css in /css folder.</p>&#xA;",2969598,"",,"",,2016-10-18T07:52:06,"","",,0,,,
40174631,2,,39811705,2016-10-21T10:46:52,,7,,"<h3>Electron is still limited to web technologies...</h3>&#xA;&#xA;<p>This means even though you have access to the file system and whatnot through the node APIs, content rendering happens inside a <code>BrowserWindow</code> which has about the same support for video playback as webkit based browsers. &#xA;You can use HTML5 video or canvas for this purpose, and that's pretty much it natively. (Flash is theoretically also supported, but the amount of work required to get it running is not worth it in my opinion... also, it's <em>Flash</em>, so, no.)</p>&#xA;&#xA;<h3>... but that's not entirely true</h3>&#xA;&#xA;<p>Even though native support ends there, you have various paths you can take to work around these limitaions. I'll list a few of the most common ones:</p>&#xA;&#xA;<ul>&#xA;<li><strong>Convert your MKV/AVI video</strong> in the background to one of the supported formats. This has the drawback of needing the entire video file to be present on your filesystem (i.e doesn't work for streams).</li>&#xA;<li><strong>Transcode your MKV/AVI stream</strong> on the fly to a supported format. This is pretty flexible but has some serious requirements on your environment, like having ffmpeg (or something similar) installed locally. Good luck packaging that if you want to distribute your app.</li>&#xA;<li><strong>Embed a player capable of MKV/AVI playback.</strong> Most common example is VLC Player embedded through node bindings to <code>libvlc</code>. Check out the <code>wcjs-player</code> &amp; <code>wcjs-prebuilt</code> modules if you want to go this way, they are node wrappers for the webchimera.js video player, which uses VLC in the background. (<em>I'm not affiliated with them, just currently using the modules for something similar in one of my projects with success so far.</em>)</li>&#xA;</ul>&#xA;&#xA;<p>I'm sure there are other solutions to this, but these are the most logical ones I've found while researching on the subject. Hope this helps!</p>&#xA;",5120832,"",,"",,2016-10-21T10:46:52,"","",,2,,,
40210812,2,,40202110,2016-10-24T04:43:01,,8,,"<p>There are a few things in play here:</p>&#xA;&#xA;<ul>&#xA;<li>The <code>remote</code> module caches remote objects in the renderer process on first access.</li>&#xA;<li>Properties that are added to a remote object in the renderer process are not propagated back to the original object in the main process.</li>&#xA;<li>Navigation restarts the renderer process.</li>&#xA;</ul>&#xA;&#xA;<p>With that in mind here's what's probably going on in your code:</p>&#xA;&#xA;<ol>&#xA;<li><code>remote.getGlobal('storage')</code> creates a new remote object and caches it.</li>&#xA;<li><code>remote.getGlobal('storage').exmpl = value</code> adds a new <code>exmpl</code> property to the remote object in the cache but doesn't propagate it to the original object in the main process.</li>&#xA;<li><code>window.location.replace('./general.html')</code> restarts the renderer process which blows away the remote object cache.</li>&#xA;<li><code>console.log(remote.getGlobal('storage').exmpl)</code> creates a new remote object since the cache is empty, but since the original object in the main process doesn't have an <code>exmpl</code> property it's also <code>undefined</code> on the new remote object.</li>&#xA;</ol>&#xA;&#xA;<p>The <code>remote</code> module seems deceptively simple at first, but it has many quirks, most of which are undocumented and as such may change in the future. I would suggest limiting the use of the <code>remote</code> module in production code.</p>&#xA;",1259938,"",,"",,2016-10-24T04:43:01,"","",,4,,,
40278246,2,,40262110,2016-10-27T07:04:26,,8,,"<p>Yes, it should be possible to emulate that behavior:</p>&#xA;&#xA;<ul>&#xA;<li>Catch the CTRL + mousewheel element <a href=""https://stackoverflow.com/questions/7782040/override-browsers-ctrlwheelscroll-with-javascript"">as discussed in this question</a>.</li>&#xA;<li>Use the <a href=""https://github.com/electron/electron/blob/master/docs/api/web-frame.md"" rel=""noreferrer"">Electron web-frame API</a> to adapt the zoomFactor accordingly, use <code>webFrame.getZoomFactor()</code> to get the current zoom level and <code>webFrame.setZoomFactor(level)</code> to change it.</li>&#xA;</ul>&#xA;",1792564,"",-1,"",2017-05-23T12:24:42,2016-10-27T07:04:26,"","",,0,,,
40251412,2,,40251411,2016-10-25T23:34:45,,10,,"<p>The main thing to remember is that in Electron, interProcess communication is done by ipcMain (in the main process) and ipcRenderer(in all the created windows). Like below:&#xA;<a href=""https://i.stack.imgur.com/cUH8Z.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/cUH8Z.png"" alt=""enter image description here""></a>&#xA;From what i've seen in the GitHub comments - direct communication between the Renderer instances is not allowed. Everything must pass trough the mainProcess.</p>&#xA;&#xA;<p>the code:&#xA;<strong>mainProcess.js:</strong></p>&#xA;&#xA;<pre><code>function createWindow1 () {&#xA;  window1 = new BrowserWindow({width: 800,height: 600})&#xA;  window1.loadURL(`file://${__dirname}/window1.html`)&#xA;  window1.webContents.openDevTools()&#xA;  window1.on('closed', function () {&#xA;     window1 = null&#xA;  })&#xA;  return window1&#xA;}&#xA;function createWindow2 () {&#xA;  window2 = new BrowserWindow({width: 1000, height: 600})&#xA;  window2.loadURL(`file://${__dirname}/window2.html`)&#xA;  window2.webContents.openDevTools()&#xA;  window2.on('closed', function () {&#xA;    window2 = null&#xA;  })&#xA;  return window2&#xA;}&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  window1 = createWindow1();&#xA;  window2 = createWindow2();&#xA;&#xA;  ipcMain.on('nameMsg', (event, arg) =&gt; {&#xA;  console.log(""name inside main process is: "", arg); // this comes form within window 1 -&gt; and into the mainProcess&#xA;  event.sender.send('nameReply', { not_right: false }) // sends back/replies to window 1 - ""event"" is a reference to this chanel.&#xA;  window2.webContents.send( 'forWin2', arg ); // sends the stuff from Window1 to Window2.&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>window1.html:</strong></p>&#xA;&#xA;<pre><code>&lt;body&gt;&#xA;    &lt;input type=""text"" id=""name"" value="""" placeholder=""Enter your name""&gt;&#xA;    &lt;button type=""button"" id=""sendName"" &gt;Send the name! &lt;/button&gt;&#xA;&lt;/body&gt;&#xA;&lt;script&gt;&#xA;   // You can also require other files to run in this process&#xA;   require('./window1.js')&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>window1.js:</strong></p>&#xA;&#xA;<pre><code>const ipcRenderer = require('electron').ipcRenderer&#xA;&#xA;let name = document.getElementById('name');&#xA;&#xA;ButtonSendName = document.getElementById('sendName');&#xA;ButtonSendName.addEventListener('click', (event) =&gt; {&#xA;  ipcRenderer.send('nameMsg', name.value);&#xA;})&#xA;&#xA;ipcRenderer.on('nameReply', (event, arg) =&gt; {&#xA;  console.log(arg) // why/what is not right..&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>window2.html:</p>&#xA;&#xA;<pre><code>&lt;body&gt;&#xA;  &lt;p id = ""showName""&gt;&lt;/p&gt;&#xA;&lt;/body&gt;&#xA;&#xA;&lt;script&gt;&#xA;  require('./window2.js')&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>window2.js:</strong></p>&#xA;&#xA;<pre><code>const { ipcRenderer } = require('electron')&#xA;&#xA;showName = document.getElementById('showName')&#xA;ipcRenderer.on('forWin2', function (event, arg){&#xA;  console.log(arg);&#xA;  showName.innerHTML = arg;&#xA;});&#xA;console.log(""I'm Window2"");&#xA;</code></pre>&#xA;&#xA;<p>A demo would be better, but I don't know how to build an electron CodeBin app. This image gives you an idea:&#xA;<a href=""https://i.stack.imgur.com/nSK7o.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/nSK7o.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>Enjoy the power of Electron !</p>&#xA;",5904566,"",,"",,2016-10-25T23:34:45,"","",,0,,,
36811572,2,,36725228,2016-04-23T13:40:01,,0,,"<p>I have search for similar solution in these last days and haven't found a totally fine solution.  </p>&#xA;&#xA;<p>These below is the more interesting partials solutions I have found.  </p>&#xA;&#xA;<h1>Embed a browser (chromium) in java</h1>&#xA;&#xA;<p>I found two web site and is unclear what is the better solution:  </p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/wjywbs/javacef"" rel=""nofollow"">jcef on github.com</a><br>&#xA;<a href=""https://github.com/wjywbs/javacef/blob/wiki/CEF3Instructions.md"" rel=""nofollow"">build instructions</a></li>&#xA;<li><a href=""https://bitbucket.org/chromiumembedded/java-cef"" rel=""nofollow"">jcef on bitbucket.org</a><br>&#xA;<a href=""https://bitbucket.org/chromiumembedded/java-cef/wiki/BranchesAndBuilding"" rel=""nofollow"">build instructions</a>  </li>&#xA;</ul>&#xA;&#xA;<p>I am not sure if these embedding solution will work well.  </p>&#xA;&#xA;<p><em>Please let me known if someone have found a quicker solution to embed web browser.</em>  </p>&#xA;&#xA;<p>If you embed the browser into your code you have not trouble if the browser will update itself in the future and the user have your window container unless the standard browser window.  </p>&#xA;&#xA;<p>If you use an external browser you are sure on it well known behaviour but it can be change in the future and if this happens you have to update your application.  </p>&#xA;&#xA;<p>I choose to avoid embedded browser and reuse a standard external browser.  </p>&#xA;&#xA;<h1>Embed http server</h1>&#xA;&#xA;<p>I like two solution I have found.  All these solution can be use with minimal code change on your web application.  </p>&#xA;&#xA;<p>One thing is better you do is to make your web application a <a href=""https://maven.apache.org/"" rel=""nofollow"">Maven</a> application.  </p>&#xA;&#xA;<p>To do this in the past I have look at every library in web application class path and put in maven pom.xml dependency tree.  </p>&#xA;&#xA;<h3>Spring-boot framework</h3>&#xA;&#xA;<p>Spring-boot is part of <a href=""http://spring.io/"" rel=""nofollow"">Spring framework</a>.<br>&#xA;It is a <a href=""http://spring.io/projects"" rel=""nofollow"">Spring projects</a>: <a href=""http://projects.spring.io/spring-boot/"" rel=""nofollow"">Spring-boot</a>.<br>&#xA;This project help a lot to start your web application.<br>&#xA;Since you are developing a web application, you will add a spring-boot-&#xA;starter-web dependency in maven pom.xml<br>&#xA;It standard embed server web is <a href=""http://tomcat.apache.org/"" rel=""nofollow"">tomcat7/8</a>  but you can change to <a href=""http://www.eclipse.org/jetty/"" rel=""nofollow"">Jetty8/9</a> or <a href=""http://undertow.io/"" rel=""nofollow"">Undertow 1.1</a> </p>&#xA;&#xA;<h3>Spark framework</h3>&#xA;&#xA;<p>This <a href=""http://sparkjava.com/"" rel=""nofollow"">framework</a> is a good alternative to <a href=""http://projects.spring.io/spring-boot/"" rel=""nofollow"">Spring-boot</a>. It is more concise and use <a href=""http://www.eclipse.org/jetty/"" rel=""nofollow"">Jetty</a> as embedded web server.</p>&#xA;&#xA;<p>I like Spring-boot because I am use to Spring configuration and use a mix of xml/annotation configuration and I like spring <a href=""http://docs.spring.io/autorepo/docs/spring/3.2.x/spring-framework-reference/html/beans.html"" rel=""nofollow"">IoC</a>. Using Spring-boot it easy to add other Spring constellation capability.  </p>&#xA;&#xA;<p>I hope that this can help you.</p>&#xA;",2053904,"",,"",,2016-04-23T13:40:01,"","",,1,,,
36831088,2,,23615844,2016-04-25T02:17:14,,0,,"<p>This is in response to tinyproxy's script...</p>&#xA;&#xA;<p>The onload event is great for reporting an iframe's TITLE and URL as the user navigates but I wouldn't use it for clicks because every time the user navigates somewhere (using the left click) your script will be appending a new listener because the onload event will have triggered as the frame loads with new content!</p>&#xA;&#xA;<p>A more correct way to listen for a right-click is…</p>&#xA;&#xA;<pre><code>FrameID.addEventListener('contextmenu',function(){Whatever();});&#xA;</code></pre>&#xA;",6245342,"",,"",,2016-04-25T02:17:14,"","",,0,,,
36919857,2,,36905362,2016-04-28T16:00:17,,0,,"<p>so I found out how to do it</p>&#xA;&#xA;<p>in electron part I had to return a promise </p>&#xA;&#xA;<pre><code>var deferred = q.defer();&#xA;storage.get('local Storage', function (error, data) {&#xA;  if (error) {&#xA;    throw error;&#xA;    deferred.reject({'status': 500, 'result': {}, 'error': error});&#xA;  }&#xA;    deferred.resolve({'status': 200, 'result': data});&#xA;  });&#xA;return deferred.promise;&#xA;</code></pre>&#xA;&#xA;<p>in angular part </p>&#xA;&#xA;<pre><code>ls.get('local Storage').then(function (data) {&#xA;    console.log(data);&#xA;  }).catch(function (error) {&#xA;    console.error(error);&#xA;  });&#xA;</code></pre>&#xA;",4451812,"",,"",,2016-04-28T16:00:17,"","",,0,,,
36921817,2,,36916241,2016-04-28T17:39:14,,0,,"<p><strong>To answer your question:</strong> Yes, It takes longer to redraw as you increase the total canvas size. You are dramatically increasing the total canvas size by adding full sized canvases even if those canvases are scaled down to be ""slide size"". BTW, <code>.stroke</code> is not your problem -- it renders very quickly.</p>&#xA;&#xA;<p>Each of your slide canvases has the same resolution as your main canvas. The DOM must remember the original size so total canvas size increases dramatically with each new slide. </p>&#xA;&#xA;<p>A fix is to make the each slide canvases smaller (== the display size), rather than keeping the same resolution as the main canvas. If the user wants to redraw a slide then dynamically create a full-sized canvas from <code>points</code> for that slide. Less total canvas size == better performance.</p>&#xA;&#xA;<p>Canvas has a scaling command that lets you easily take your full-sized canvas content and scale it to smaller display size:</p>&#xA;&#xA;<pre><code>var c=document.createElement('canvas');&#xA;var cctx=c.getContext('2d');&#xA;c.width=smallSlideWidth;&#xA;c.height=smallSlideHeight;&#xA;var scale=Math.min((slideWidth/mainCanvasWidth),(slideHeight/mainCanvasHeight));&#xA;cctx.scale(scale,scale);&#xA;... now draw your slide using the same coordinates as your main canvas&#xA;</code></pre>&#xA;&#xA;<p>We don't have more of your code, but if you're redrawing every slide canvas all the time -- don't do that!</p>&#xA;",411591,"",411591,"",2016-04-28T19:04:48,2016-04-28T19:04:48,"","",,0,,,
36905452,2,,36890360,2016-04-28T04:46:27,,1,,"<p>Use the <code>path</code> module together with the <code>__dirname</code> built-in to construct file paths to assets relative to your source files, the relative paths won't change between development and packaged builds. For example, assuming the following directory structure:</p>&#xA;&#xA;<pre><code>src/&#xA;  app/&#xA;    browser/&#xA;      main.js&#xA;    data/&#xA;      items.yml&#xA;</code></pre>&#xA;&#xA;<p>You should reference <code>items.yml</code> in <code>main.js</code> like so:</p>&#xA;&#xA;<pre><code>path.join(__dirname, '..', 'data', 'items.yml')&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-04-28T04:46:27,"","",,6,,,
36909400,2,,36908921,2016-04-28T08:36:26,,1,,"<p>Use the <a href=""https://github.com/electron/electron/blob/v0.37.7/docs/api/app.md#appmakesingleinstancecallback"" rel=""nofollow""><code>app.makeSingleInstance()</code></a> function, there's an example in the docs.</p>&#xA;",1259938,"",,"",,2016-04-28T08:36:26,"","",,1,,,
36957548,2,,36945079,2016-04-30T16:45:42,,1,,<p>Try adding <code>.json</code> to the <code>extensions</code> in the <code>resolve</code> object in the config file. It may work. </p>&#xA;,5189158,"",,"",,2016-04-30T16:45:42,"","",,0,,,
36969168,2,,36866660,2016-05-01T16:44:12,,1,,"<p>Electron—just being a runtime, as opposed to a framework—does not have a lot of strong opinions on how you organize your code. I think it makes sense to have <code>./src</code> folder to store your code.</p>&#xA;&#xA;<p>As you mentioned, <code>main.ts</code> spawns a <code>BrowserWindow</code> instance, which loaded <code>index.html</code>. In theory, you <em>could</em> write all of your JavaScript inside some <code>&lt;script&gt;</code> tags in the HTML, but as you might imagine that's not really a long-term game plan.</p>&#xA;&#xA;<p>In Electron, however, you <em>can</em> use Node's <code>require</code>. This will allow you to do something like this in <code>index.html</code>:</p>&#xA;&#xA;<pre><code>&lt;script&gt;require('./renderer`)&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Inside <code>./renderer.js</code> (or <code>.ts</code> in your particular case), you can begin to to require your small modular files to build up your renderer code.</p>&#xA;",6278256,"",,"",,2016-05-01T16:44:12,"","",,0,,,
36987313,2,,36817006,2016-05-02T16:37:07,,1,,"<p>The solution I've initially come up looks like</p>&#xA;&#xA;<p><em>app-node.js</em></p>&#xA;&#xA;<pre><code>process.once('webkit', () =&gt; {&#xA;    console.log(nw);&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><em>app.html</em></p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;script&gt;&#xA;        global.process.emit('webkit');&#xA;    &lt;/script&gt;&#xA;    ...&#xA;</code></pre>&#xA;&#xA;<p>I would be glad to know that there is already an event to listen, so cross-platform client scripts could omit NW-related code.</p>&#xA;",3731501,"",3731501,"",2016-05-03T12:26:49,2016-05-03T12:26:49,"","",,0,,,
37004306,2,,37003383,2016-05-03T12:34:39,,3,,"<p>You could use something like <a href=""https://www.npmjs.com/package/nodobjc"" rel=""nofollow""><code>nodobjc</code></a>, which provides a bridge between Node and the Objective-C runtime (although you probably should already have some Objective-C/Cocoa experience if you want to use it extensively).</p>&#xA;&#xA;<p>Here's an example that prints out the list of contacts by first/last name:</p>&#xA;&#xA;<pre><code>var $ = require('nodobjc');&#xA;&#xA;// Load the AddressBook framework.&#xA;$.framework('AddressBook');&#xA;&#xA;// Get an instance of the address book for the current user.&#xA;var addressBook = $.ABAddressBook('addressBook');&#xA;&#xA;// Retrieve all contacts.&#xA;var people = addressBook('people');&#xA;&#xA;// Run through the list of contacts and print their first/last name.&#xA;var count = people('count');&#xA;for (var i = 0; i &lt; count; i++) {&#xA;  var person    = people('objectAtIndex', i);&#xA;  var firstName = person('valueForProperty', $.kABFirstNameProperty);&#xA;  var lastName  = person('valueForProperty', $.kABLastNameProperty);&#xA;  console.log(i, firstName, lastName);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I have no idea how much faster (or slower) this is compared to <code>osa-contacts</code>, or if it works like you want it. The <code>AddressBook</code> framework, which it uses, is documented <a href=""https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/AddressBook/AddressBook.html"" rel=""nofollow"">here</a>.</p>&#xA;",893780,"",,"",,2016-05-03T12:34:39,"","",,0,,,
36860660,2,,36859984,2016-04-26T09:23:17,,4,,"<p>You're loading it in a webview, which doesn't support <a href=""https://electronjs.org/docs/api/webview-tag#nodeintegration"" rel=""nofollow noreferrer"">nodeintegration</a> by default.</p>&#xA;&#xA;<p>Add the <code>nodeintegration</code> attribute to your webivew.</p>&#xA;&#xA;<pre><code>&lt;webview id=""settings"" src=""./settings.html"" nodeintegration&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;",2615209,"",2615209,"",2018-12-19T08:42:22,2018-12-19T08:42:22,"","",,0,,,
36887487,2,,36876276,2016-04-27T10:41:20,,4,,"<p>Specify any electron-packager option in the <a href=""https://github.com/electron-userland/electron-builder/wiki/Options#build"" rel=""nofollow"">build</a> field.</p>&#xA;",1910191,"",,"",,2016-04-27T10:41:20,"","",,1,,,
36961340,2,,36961252,2016-04-30T23:29:14,,12,,"<p>The interaction of an application written in electron with its backend is exactly like a Web browser, therefore you have the same options (Web Api, Web Sockets, Ajax, etc.)</p>&#xA;",1254991,"",,"",,2016-04-30T23:29:14,"","",,1,,,
36950216,2,,34670514,2016-04-30T03:01:58,,13,,"<p>I realize this is a late answer but you have some options: </p>&#xA;&#xA;<ul>&#xA;<li><p><a href=""https://nodejs.org/api/addons.html"" rel=""noreferrer"">native node modules</a> allow you to write in C++ and ObjectiveC (or Swift) and expose an API to node.js using v8. This gives you a lot of flexibility and power but requires the most time to develop. </p></li>&#xA;<li><p><a href=""https://github.com/TooTallNate/NodObjC"" rel=""noreferrer"">NodObjC</a> is a native node module that allows you to interact with the ObjC runtime. I've never used it but it seems like a solid project and would simplify whatever you're trying to do. Another option similar to this is <a href=""https://github.com/node-ffi/node-ffi"" rel=""noreferrer"">node-ffi</a>. The framework you referenced looks like an ObjC API though, so not sure if that'll work for your specific use case.</p></li>&#xA;<li><p>For simple stuff, you can use <a href=""https://github.com/TooTallNate/node-applescript"" rel=""noreferrer"">node-applescript</a>. I've only played with applescript a little bit but I was surprised at some of the things you can do with it. For example, you can use it to set your app to start on login (see <a href=""https://github.com/Teamwork/node-auto-launch"" rel=""noreferrer"">node-auto-launch</a>). While limited compared to the above, if it does what you want, it's simpler and requires no compiling, which is nice. Note that this is going to use <a href=""https://nodejs.org/api/child_process.html"" rel=""noreferrer"">child_process</a> under the hood to spawn a new process to run the applescript in. That may have some ramifications to consider for whatever you're trying to do.</p></li>&#xA;<li><p>You can also just use the node child_process module if the OSX API&#xA;you're trying to use has a good CLI. The upside here is simplicity, the downside is you may have to parse the strings it outputs into meaningful data structures, which can be moderately difficult in my experience. </p></li>&#xA;</ul>&#xA;",1397311,"",1397311,"",2016-05-25T17:43:09,2016-05-25T17:43:09,"","",,3,,,
36973252,2,,36893426,2016-05-01T23:44:12,,19,,"<p>Let's start with the simplest case and then build our solution to better handle some edge cases.</p>&#xA;&#xA;<p>The simplest possible case is to show a window that is already open whenever the global shortcut we registered is pressed.</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;const { app, BrowserWindow, globalShortcut } = require('electron');&#xA;&#xA;let mainWindow = null;&#xA;&#xA;app.on('ready', () =&gt; {&#xA;&#xA;  mainWindow = new BrowserWindow();&#xA;  mainWindow.loadURL(path.join(__dirname, 'index.html'));&#xA;&#xA;  const shortcut = globalShortcut.register('Control+Space', () =&gt; {&#xA;    mainWindow.show();&#xA;  });&#xA;&#xA;  if (!shortcut) { console.log('Registration failed.'); }&#xA;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This code has some problems though. The good news is that it still works if the window has been minimized. The bad news is that it will not work if the window has been closed. This is because closing the last window quits the application. Bummer. (Frankly, I was a little surprised by this—but that's what happens. So, let's go with it.)</p>&#xA;&#xA;<p>Let's stop that from happening.</p>&#xA;&#xA;<pre><code>app.on('window-all-closed', (event) =&gt; {&#xA;  event.preventDefault();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Okay, our app doesn't quit, it but it crashes.</p>&#xA;&#xA;<pre><code>Uncaught Exception:&#xA;Error: Object has been destroyed&#xA;</code></pre>&#xA;&#xA;<p>Alright, fine. This is because the window is destroyed when it's close. So, let's not close it. Let's hide it, shall we? Within <code>app.on('ready', () =&gt; {…})</code>, add the following:</p>&#xA;&#xA;<pre><code>mainWindow.on('close', (event) =&gt; {&#xA;  event.preventDefault();&#xA;  mainWindow.hide();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The end result looks like this:</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;const { app, BrowserWindow, globalShortcut } = require('electron');&#xA;&#xA;let mainWindow = null;&#xA;&#xA;app.on('ready', () =&gt; {&#xA;&#xA;  mainWindow = new BrowserWindow();&#xA;  mainWindow.loadURL(path.join(__dirname, 'index.html'));&#xA;&#xA;  const shortcut = globalShortcut.register('Control+Space', () =&gt; {&#xA;    mainWindow.show();&#xA;  });&#xA;&#xA;  if (!shortcut) { console.log('Registration failed.'); }&#xA;&#xA;  mainWindow.on('close', (event) =&gt; {&#xA;    event.preventDefault();&#xA;    mainWindow.hide();&#xA;  });&#xA;&#xA;});&#xA;&#xA;&#xA;app.on('window-all-closed', (event) =&gt; {&#xA;  event.preventDefault();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And with that you should have the basic functionality in place. You press your global shortcut and the window appears. Dismiss it and press the keys and watch it reappear.</p>&#xA;",6278256,"",,"",,2016-05-01T23:44:12,"","",,0,,,
36809014,2,,36773711,2016-04-23T09:31:14,,55,,"<p>To send events to particular window you can use <code>webContents.send(EVENT_NAME, ARGS)</code> (<a href=""https://electronjs.org/docs/api/web-contents#contentssendchannel-arg1-arg2-"" rel=""noreferrer"">see docs</a>). <code>webContents</code> is a property of a window instance:</p>&#xA;&#xA;<pre><code>// main process&#xA;storeWindow.webContents.send('store-data', store);&#xA;</code></pre>&#xA;&#xA;<p>To listen for this event being sent, you need a listener in a window process (renderer):</p>&#xA;&#xA;<pre><code>// renderer process&#xA;var ipcRenderer = require('electron').ipcRenderer;&#xA;ipcRenderer.on('store-data', function (event,store) {&#xA;    console.log(store);&#xA;});&#xA;</code></pre>&#xA;",1573638,"",9299889,"",2018-05-17T13:02:29,2018-05-17T13:02:29,"","",,5,,,
50934707,2,,50930111,2018-06-19T18:20:23,,0,,"<p>Turns out the issue was that I was packaging in 32-bit and using the 64-bit PepperFlash DLL, made the switch out and things started working.</p>&#xA;",1512742,"",,"",,2018-06-19T18:20:23,"","",,0,,,
50953550,2,,50951994,2018-06-20T17:04:45,,0,,"<p>There is a 'start' parameter: ""The index of the first result to return""</p>&#xA;&#xA;<p>See&#xA;<a href=""https://developers.google.com/custom-search/json-api/v1/reference/cse/list"" rel=""nofollow noreferrer"">https://developers.google.com/custom-search/json-api/v1/reference/cse/list</a></p>&#xA;",9806925,"",,"",,2018-06-20T17:04:45,"","",,0,,,
50959869,2,,50959474,2018-06-21T03:17:18,,5,,<p>You are importing remote via&#xA;<code>&#xA;var dialog = require('electron').remote&#xA;</code></p>&#xA;&#xA;<p>while <code>require('electron').remote</code> returns remote proxy to namespace of <code>electron</code>.&#xA;<code>require('electron').remote.dialog</code> is proxy to dialog module.</p>&#xA;,2742189,"",,"",,2018-06-21T03:17:18,"","",,0,,,
51014401,2,,51012977,2018-06-24T22:14:05,,1,,<p>You can use the Node's native <code>fs</code> module to save onto the client's computer as a stringified version.</p>&#xA;&#xA;<p>Another thing you could do is use something like <code>sqlite</code> to set up a local database on the user's computer if you plan on doing any querying of that JSON.</p>&#xA;,7873104,"",,"",,2018-06-24T22:14:05,"","",,0,,,
51028807,2,,51027384,2018-06-25T17:21:04,,1,,"<p>You can use <code>Promise.all</code> and <code>map</code> to loop over your server list and wait for all of the Promises to resolve. Here's a quick example using ping:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const sortBy = require('lodash.sortby');&#xD;&#xA;const ping = require('ping');&#xD;&#xA;&#xD;&#xA;const servers = ['google.com', 'facebook.com', 'amazon.com', 'apple.com'];&#xD;&#xA;&#xD;&#xA;Promise.all(servers.map(server =&gt; ping.promise.probe(server))).then(response =&gt; {&#xD;&#xA;  console.log(sortBy(response, 'time'))&#xD;&#xA;});</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Here's an React demo using Promise.all and rendering the results:</p>&#xA;&#xA;<p><a href=""https://server-ping-fuupenayzp.now.sh/"" rel=""nofollow noreferrer"">https://server-ping-fuupenayzp.now.sh/</a></p>&#xA;&#xA;<p>and the source</p>&#xA;&#xA;<p><a href=""https://zeit.co/rusty-dev/server-ping/fuupenayzp/source?f=src/App.js"" rel=""nofollow noreferrer"">https://zeit.co/rusty-dev/server-ping/fuupenayzp/source?f=src/App.js</a></p>&#xA;",323763,"",323763,"",2018-06-25T18:24:13,2018-06-25T18:24:13,"","",,0,,,
51062555,2,,51061143,2018-06-27T12:15:37,,1,,"<p>I guess, I have an answer.&#xA;It shouldn't be called in renderer process.&#xA;Instead we should use mainWindow in <strong>main process</strong> for such operation and 'close' lifecycle method, which will be called right before closing.</p>&#xA;&#xA;<pre><code>this.mainWindow.on('close', (e) =&gt; {&#xA;  const choice = this.dialog.showMessageBox(&#xA;    this.mainWindow,&#xA;    {&#xA;      type: 'question',&#xA;      buttons: ['Yes', 'No, hang on', 'third option'],&#xA;      title: 'Confirm your actions',&#xA;      message: 'Do you really want to close the application?'&#xA;    }&#xA;  );&#xA;  console.log('CHOICE: ', choice);&#xA;  if (choice &gt; 0) e.preventDefault();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>choice const will return an answer from buttons array, so 'Yes' will be as confirm and for other options we can prevent actions.</p>&#xA;&#xA;<p>NOTE: I've pasted with <code>this.</code> from my code, but, obviously <code>mainWindow</code> is your <code>BrowserWindow</code> instance and <code>this.dialog</code> is <code>electron.dialog</code> that imported from <code>import electron from 'electron';</code> </p>&#xA;",2756414,"",,"",,2018-06-27T12:15:37,"","",,0,,,
51064704,2,,46476474,2018-06-27T13:57:05,,2,,"<p>This question has been open for a sometime since I couldn't solve the issue with axios and had to use superagent for a while.</p>&#xA;&#xA;<p>However, now that it's <a href=""https://github.com/axios/axios/issues/2"" rel=""nofollow noreferrer"">solved</a> and can use axios just fine, this is how I did solved it on my project.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>//- Correctly placing a file_Url into FormData&#xD;&#xA;&#xD;&#xA;export function generateContract(url, {names, email}) {&#xD;&#xA;    const file = {&#xD;&#xA;        uri: url,&#xD;&#xA;        name: _.replace(url, /\.[doc,docx,odt,]+$/, ''),&#xD;&#xA;        type: 'docx'&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    const formData = new FormData()&#xD;&#xA;    formData.append('contract', file)&#xD;&#xA;    formData.append('names', names)&#xD;&#xA;    formData.append('email', email)&#xD;&#xA;&#xD;&#xA;    return formData&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//- 1. Calling generateContract method&#xD;&#xA;//- 2. Passing the formdata (from method 1) to sendEmail&#xD;&#xA;&#xD;&#xA;const contractData = generateContract(contractUrl, payload)&#xD;&#xA;const response = yield sendEmail(contractData)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;//- The sendEmail function that makes requests using axios&#xD;&#xA;&#xD;&#xA;export function sendEmail(contractData) {&#xD;&#xA;    return checkConnetion()&#xD;&#xA;        .then(() =&gt; {&#xD;&#xA;            return axios.post(emailUrl, contractData)&#xD;&#xA;        })&#xD;&#xA;        .catch(() =&gt; {&#xD;&#xA;            // return axios.post(emailUrlOffline, contractData)&#xD;&#xA;            userLog('Cannot connect to server, check your internet settings.', 'Connection Error', 'error')&#xD;&#xA;        })&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",2405689,"",,"",,2018-06-27T13:57:05,"","",,0,,,
51084093,2,,51077602,2018-06-28T13:24:18,,0,,<p>Your jquery library should be initialized like that for bootstrap to work :</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;  window.jQuery = require('jquery')&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;,8697449,"",,"",,2018-06-28T13:24:18,"","",,0,,,
51119689,2,,51119248,2018-07-01T01:12:44,,5,,"<p><a href=""https://www.npmjs.com/package/electron-sqlite3"" rel=""noreferrer"">SQLite</a> is a good option for a local database that you can ship with your application. It won't require the user to setup or install any extra dependencies. It's certainly not as full featured as a full on server, but it should be good enough for a local desktop app.</p>&#xA;",1142368,"",,"",,2018-07-01T01:12:44,"","",,0,,,
51124900,2,,51124850,2018-07-01T16:04:13,,2,,"<p>I realized the solution was just to use the more verbose constructor:</p>&#xA;&#xA;<pre><code>new Sequelize('', '', '', {&#xA;        dialect: 'sqlite',&#xA;        storage: myPath&#xA;      });&#xA;</code></pre>&#xA;",9967678,"",,"",,2018-07-01T16:04:13,"","",,0,,,
51126280,2,,51120219,2018-07-01T19:16:13,,1,,"<p>BrowserWindow has a 'blur' event which is triggered when the window looses focus, and the app has a 'browser-window-blur' event which is called when any of the created windows looses focus.</p>&#xA;&#xA;<pre><code>const {app} = require('electron')&#xA;&#xA;app.on('browser-window-blur', () =&gt; {&#xA;  // Your code&#xA;})&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <ul>&#xA;  <li><a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#event-browser-window-blur"" rel=""nofollow noreferrer"">Electron API Docs - App (event-browser-window-blur)</a></li>&#xA;  <li><a href=""https://electronjs.org/docs/api/browser-window#event-blur"" rel=""nofollow noreferrer"">Electron API Docs - BrowserWindow (event-blur)</a></li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>If you talk about external Windows you need to go via a native module to solve that, electron and nodejs have no build in function for that. Native modules are extensions to normal JavaScript and they are written in diffrent languages for example C/C++ and exported/compiled to be used with nodeJS.</p>&#xA;&#xA;<p>For talking to the Windows OS API you could use <code>node-winapi</code> if you want to do it yourself. Otherwise i would encourage you to use a library which does this already. Just be sure that it works with the nodeJS version that Electron uses currently nodeJS v8.9.3</p>&#xA;",5115009,"",5115009,"",2018-07-01T19:25:50,2018-07-01T19:25:50,"","",,0,,,
51145628,2,,51141037,2018-07-03T01:49:49,,1,,"<p>I was able to resolve this issue by configuring Xvfb to work with WebGL as follows:</p>&#xA;&#xA;<pre><code>Xvfb :99 -screen 0 1024x768x24 +extension GLX +render &gt; xvfblog.txt 2&gt;&amp;1 &amp;&#xA;</code></pre>&#xA;&#xA;<p>Where I added the <code>+extension GLX +render</code> flags.</p>&#xA;&#xA;<p>I also had to start electron with the <code>ignore-gpu-blacklist</code> flag. I found this article helpful with that: <a href=""https://medium.com/social-tables-tech/how-we-test-webgl-on-continuous-integration-37a1ead55fd7"" rel=""nofollow noreferrer"">https://medium.com/social-tables-tech/how-we-test-webgl-on-continuous-integration-37a1ead55fd7</a></p>&#xA;&#xA;<p>Also note that I am using the ""electron"" npm package, and I had to add the following flags to my <code>BrowserWindow</code> object:</p>&#xA;&#xA;<pre><code>const win = new BrowserWindow({&#xA;  show: false,&#xA;  webPreferences: {&#xA;    webgl: true,&#xA;    webSecurity: false,&#xA;    experimentalFeatures: true,&#xA;    experimentalCanvasFeatures: true,&#xA;    offscreen: true&#xA;  }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>I hope this helps someone.</p>&#xA;",1884158,"",,"",,2018-07-03T01:49:49,"","",,0,,,
51157293,2,,48245948,2018-07-03T14:39:08,,1,,"<p>Following piece of code actually handles the conversion between browser desktop capturer and nodejs for opencv and other libraries:</p>&#xA;&#xA;<pre><code>}).then((stream) =&gt; {&#xA;  const video = document.createElement('video');&#xA;  video.srcObject = stream;&#xA;  video.onloadedmetadata = () =&gt; {&#xA;  video.play();&#xA;  setInterval(() =&gt; {&#xA;    const canvas = document.createElement('canvas');&#xA;    canvas.getContext('2d').drawImage(video, 0, 0, 800, 800);&#xA;    canvas.toBlob(blob =&gt; {&#xA;      toBuffer(blob, function (err, buffer) {&#xA;        if (err) throw err;&#xA;        // do some magic with buffer&#xA;      });&#xA;    });&#xA;  }, 40);&#xA;}; &#xA;</code></pre>&#xA;",4766136,"",,"",,2018-07-03T14:39:08,"","",,0,,,
50943611,2,,50941932,2018-06-20T08:24:54,,1,,"<p>When creating a new <a href=""https://electronjs.org/docs/api/browser-window"" rel=""nofollow noreferrer"">BrowserWindow</a> with <a href=""https://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer"">options</a>, you can add a <code>webPreferences</code> property which is an object literal, containing properties named <code>minimumFontSize</code>, <code>defaultFontSize</code>, <code>defaultMonospaceFontSize</code>, etc. For instance:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow(&#xA;{&#xA;    width: 800,&#xA;    height: 600,&#xA;    webPreferences:&#xA;    {&#xA;        minimumFontSize: 18,&#xA;        defaultFontSize: 24,&#xA;        defaultMonospaceFontSize: 20&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Note that the actual default font sizes may be overridden by any CSS already defined though.</p>&#xA;",,user8022331,,user8022331,2018-06-20T15:22:49,2018-06-20T15:22:49,"","",,1,,,
51105932,2,,51105828,2018-06-29T16:24:11,,0,,"<p>You can use a bundling tool like <a href=""http://enclosejs.com/"" rel=""nofollow noreferrer"">EncloseJS</a> to wrap your Electron application. This would allow you to write a CLI interface. You would then need to move the code that does the actual work to a shared library that both Electron and your CLI can use. You could then introduce a <code>--headless</code> flag that would simply not start the Electron app, while omitting the flag would start the app as usual.</p>&#xA;",46914,"",,"",,2018-06-29T16:24:11,"","",,1,,,
51126255,2,,51125825,2018-07-01T19:13:09,,5,,"<p>I solved it! Found the answer <a href=""https://github.com/Microsoft/vscode-recipes/tree/master/Electron"" rel=""noreferrer"">from Microsoft</a>. Install <a href=""https://github.com/Microsoft/vscode-chrome-debug"" rel=""noreferrer"">Debugger for Chrome</a>; change tasks.json to the following, and start one project and then the other. <strong>It works with Typescript, Webpack, and React beautifully!</strong></p>&#xA;&#xA;<pre><code>{&#xA;// Use IntelliSense to learn about possible attributes.&#xA;// Hover to view descriptions of existing attributes.&#xA;// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387&#xA;""version"": ""0.2.0"",&#xA;""configurations"": [  &#xA;    {&#xA;        ""type"": ""node"",&#xA;        ""request"": ""launch"",&#xA;        ""name"": ""Electron: Main"",&#xA;        ""preLaunchTask"": ""webpack"",&#xA;        ""runtimeExecutable"": ""${workspaceFolder}/node_modules/.bin/electron"",&#xA;        ""program"": ""${workspaceFolder}/main.js"",&#xA;        ""runtimeArgs"": [&#xA;            ""."",&#xA;            ""--enable-logging"",&#xA;            ""--remote-debugging-port=9223"",&#xA;        ]&#xA;    },&#xA;      {&#xA;          ""name"": ""Electron: Renderer"",&#xA;          ""type"": ""chrome"",&#xA;          ""request"": ""attach"",&#xA;          ""port"": 9223,&#xA;          ""webRoot"": ""${workspaceFolder}"",&#xA;          ""timeout"": 30000&#xA;      }&#xA;],&#xA;""compounds"": [&#xA;      {&#xA;          ""name"": ""Electron: All"",&#xA;          ""configurations"": [&#xA;              ""Electron: Main"",&#xA;              ""Electron: Renderer""&#xA;          ]&#xA;      }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;",1226612,"",1226612,"",2018-07-02T20:35:10,2018-07-02T20:35:10,"","",,1,,,
51126482,2,,51113097,2018-07-01T19:43:13,,8,,"<p>This is a tricky question and i will refer to <a href=""https://github.com/electron/electron/issues/12011"" rel=""nofollow noreferrer"">Electron#12011</a> and this <a href=""https://gist.github.com/smotaal/f1e6dbb5c0420bfd585874bd29f11c43"" rel=""nofollow noreferrer"">GitHub Gist</a> for a deeper explaination but the core learning is that the corresponding <a href=""https://html.spec.whatwg.org/multipage/webappapis.html#fetch-a-single-module-script"" rel=""nofollow noreferrer"">HTML spec</a>, disallows import via <code>file://</code> (For XSS reasons) and a protocol must have the mime types defined. </p>&#xA;&#xA;<p>The file protocol you use <code>client://</code> has to set the correct mime-types when serving the files. Currently i would guess they are not set when you define the protocol via <code>protocol.registerBufferProtocol</code> thus you recive a <code>The server responded with a non-JavaScript MIME type of """"</code>, the gist above has a code sample on how to do it.</p>&#xA;&#xA;<p>Edit: I just want to emphasize the other answers here do only cover the absolute minimum basics implementation with no consideration of exceptions, security, or future changes. <strong>I highly recommend taking the time and read trough the gist I linked</strong>.</p>&#xA;",5115009,"",5115009,"",2019-07-29T13:58:36,2019-07-29T13:58:36,"","",,1,,,
51144988,2,,51144965,2018-07-02T23:52:21,,2,,"<p>It's not the <code>value</code> of the <code>event</code> that you want (events don't have a <code>value</code>). It's the <code>value</code> of the element <strong><em>that triggered the event</em></strong> that you want and that element can be referenced with <code>this</code> or <code>event.target</code>. </p>&#xA;&#xA;<p>Also, make sure that your JavaScript <code>projectNameControl</code> variable correctly references the <code>input</code>.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>let projectNameControl = document.getElementById(""outputProjectName"");&#xD;&#xA;projectNameControl.addEventListener(""input"", function (event) {&#xD;&#xA;    console.log(this.value, event.target.value);&#xD;&#xA;})</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""text"" class=""cloneProjectName"" id=""outputProjectName"" value="""" &gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",695364,"",695364,"",2018-07-03T12:53:38,2018-07-03T12:53:38,"","",,1,,,
51157879,2,,48936129,2018-07-03T15:10:54,,1,,"<p>This should help </p>&#xA;&#xA;<pre><code> this.app = new Application({&#xA;    path: './ac.exe',&#xA;    args: ['app'],&#xA;    webdriverOptions: ({deprecationWarnings : false})&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>pass the parameters that need to be changed during app launch</p>&#xA;&#xA;<p>and have your new application config in <strong>before hook</strong></p>&#xA;",8903949,"",,"",,2018-07-03T15:10:54,"","",,1,,,
51034211,2,,51028115,2018-06-26T02:49:50,,2,,"<p>You could define which file will be included by using <code>""files""</code> section in <code>package.json</code>:</p>&#xA;&#xA;<pre><code>{&#xA;    ""name"": ""MyApp"",&#xA;    ...&#xA;    ""build"": {&#xA;        ""files"": [&#xA;            ""node_modules"",&#xA;            ""!node_modules/module-x/*"" //prevent module x to be included&#xA;        ]&#xA;    }&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps</p>&#xA;",6522713,"",,"",,2018-06-26T02:49:50,"","",,2,,,
51052689,2,,51050437,2018-06-26T23:35:44,,0,,"<p>I had a look at your code &amp; to me, the issue seems to be <a href=""https://github.com/ohmtrivedi/electronProject/blob/master/main.js#L79"" rel=""nofollow noreferrer"">here</a>, where you're sending the <code>targetOS</code> channel through <code>mainWindow</code>'s <code>webContents</code>.</p>&#xA;&#xA;<p><code>mainWindow</code> is the <code>BrowserWindow</code> object for the file <code>src/index.html</code>; but you want to receive it on the <code>BrowserWindow</code> object for <code>src/cves.html</code>.</p>&#xA;&#xA;<p>One way to get to what you're trying to accomplish would be to update your code to create the <code>BrowserWindow</code> object (say, <code>cvesWindow</code>) for <code>src/cves.html</code> on <code>main.js</code> (when the <code>update-target-os</code> channel is received) instead of creating it in the <code>cell_cves.addEventListener</code> method in <code>index.js</code>.</p>&#xA;&#xA;<p>And in <code>main.js</code>, in your <code>update-target-os</code> section, set the value you've received to a <code>main.js</code> variable, say <code>osGuess</code>.</p>&#xA;&#xA;<p>Then, in your <code>cves.js</code> file, you could have something like:</p>&#xA;&#xA;<pre><code> ipcRenderer.send('cves-loaded', true);&#xA;</code></pre>&#xA;&#xA;<p>You could execute it once the DOM Content has been loaded. This will notify the main process that your CVES <code>BrowserWindow</code> has loaded. Then, <code>main.js</code> can then send the value on an event like:</p>&#xA;&#xA;<pre><code>ipcMain.on('cves-loaded', (event, arg) =&gt; {&#xA;  cvesWindow.webContents.send('targetOS', osGuess);&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Such that it's received by the cves <code>BrowserWindow</code>. </p>&#xA;&#xA;<p>I was able to get the value to display on the <code>osname</code> element on <code>cves.html</code> with the logic updates above.</p>&#xA;&#xA;<p>There are possibly more ways of accomplishing this, but I would recommend going with a <a href=""https://en.wikipedia.org/wiki/Single-page_application"" rel=""nofollow noreferrer"">Single Page Application</a> approach if all you're needing is to open a dialog that lists out additional information.</p>&#xA;",1392578,"",1392578,"",2018-06-26T23:59:40,2018-06-26T23:59:40,"","",,2,,,
50983847,2,,50983742,2018-06-22T08:31:55,,4,,"<p>Electron also packages node, which has access to the File System.</p>&#xA;",5108796,"",,"",,2018-06-22T08:31:55,"","",,3,,,
50935600,2,,50935292,2018-06-19T19:25:11,,2,,"<p>On macOS, you may have to listen to the <a href=""https://electronjs.org/docs/api/app"" rel=""nofollow noreferrer"">app</a> event <a href=""https://electronjs.org/docs/api/app#event-open-file-macos"" rel=""nofollow noreferrer"">open-file</a> from the main process:</p>&#xA;&#xA;<pre><code>app.on('open-file', (event, path) =&gt;&#xA;{&#xA;    event.preventDefault();&#xA;    console.log(path);&#xA;});&#xA;</code></pre>&#xA;",,user8022331,,"",,2018-06-19T19:25:11,"","",,5,,,
50982402,2,,50982319,2018-06-22T07:02:29,,4,,"<p>You should use <code>ipcMain</code> and <code>ipcRenderer</code> for that:</p>&#xA;&#xA;<p>In Angular:</p>&#xA;&#xA;<pre><code>ipcMain.send('foo', data);&#xA;</code></pre>&#xA;&#xA;<p>In electron: </p>&#xA;&#xA;<pre><code>ipcMain.on('foo', (event, data) =&gt; {&#xA;  // Do what you want with data.&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Or same using <code>ipcRenderer</code> to make electron => angular communication (<code>ipcMain</code> being to communicate from angular to electron).</p>&#xA;&#xA;<p>If you want to see a live example, check <a href=""https://github.com/Supamiu/ffxiv-teamcraft/blob/master/main.js"" rel=""nofollow noreferrer"">this main.js file</a> on github, and the service that communicates with it <a href=""https://github.com/Supamiu/ffxiv-teamcraft/blob/master/src/app/core/electron/ipc.service.ts"" rel=""nofollow noreferrer"">here</a> in angular.</p>&#xA;",4102561,"",,"",,2018-06-22T07:02:29,"","",,5,,,
51076916,2,,51076197,2018-06-28T07:19:49,,1,,"<p>I suppose you want to run the electron app and another executable at the same time, in that case you can use <a href=""https://www.npmjs.com/package/concurrently"" rel=""nofollow noreferrer"">concurrently</a>.&#xA;Suppose you can execute the executable directly from the commandline like <code>datajr</code> then you can modify your <code>package.json</code> by adding :</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1"",&#xA;    ""start"": ""concurrently \""datajr\"" \""electron main.js\"" "",&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Now <code>npm start</code> to start the electron app and the executable. In this way you can overcome the hustle of executing the file from within the <code>main.js</code>.</p>&#xA;",4884750,"",4884750,"",2018-06-28T10:03:27,2018-06-28T10:03:27,"","",,11,,,
33631607,2,,33542990,2015-11-10T13:53:28,,0,,"<p>You need to transfer jQuery object to the window context for epoch-charting module to ""work""</p>&#xA;&#xA;<pre><code>global.jQuery = require('jquery');&#xA;require('epoch-charting');&#xA;jQuery('#chart').epoch({type: 'time.line', data: data});&#xA;</code></pre>&#xA;",3027253,"",3027253,"",2015-11-10T14:03:31,2015-11-10T14:03:31,"","",,0,,,
33662259,2,,33662111,2015-11-12T00:13:04,,0,,"<p>You will need to set the desired configuration IN the processed source. There are many ways to accomplish this. Check out this blog post for some ideas <a href=""http://addyosmani.com/blog/environment-specific-builds-with-grunt-gulp-or-broccoli/"" rel=""nofollow"">http://addyosmani.com/blog/environment-specific-builds-with-grunt-gulp-or-broccoli/</a></p>&#xA;",577681,"",,"",,2015-11-12T00:13:04,"","",,1,,,
33667047,2,,33605953,2015-11-12T08:23:53,,0,,<p>How exactly you create kiosk mode? By replacing shell or/and use full screen application? If so - you need to use own internal keyboard. Windows keyboard available only if explorer running and no full screen application running.</p>&#xA;,2771556,"",,"",,2015-11-12T08:23:53,"","",,3,,,
33590238,2,,33590114,2015-11-08T02:56:36,,1,,"<p><code>update</code> wants four arguments</p>&#xA;&#xA;<pre><code>var Datastore = require('nedb');&#xA;var db = new Datastore();&#xA;&#xA;db.insert(&#xA;[&#xA;  {&#xA;    ""UserId"":""1446943507761"",&#xA;    ""UserName"":""xxx"",&#xA;    ""link"":""xxx.html"",&#xA;    ""taskDone"":""false"",&#xA;    ""id"":14,&#xA;    ""_id"":""fdaaTWSxloQZdYlT""&#xA;  },&#xA; {&#xA;    ""UserId"":""1446943507761"",&#xA;    ""UserName"":""xxx"",&#xA;    ""link"":""xxx.html"",&#xA;    ""taskDone"":""false"",&#xA;    ""id"":1,&#xA;    ""_id"":""fzh2cedAXxT76GwB""&#xA; },&#xA; {&#xA;    ""UserId"":""1446943507761"",&#xA;    ""UserName"":""xxx"",&#xA;    ""link"":""xxx.html"",&#xA;    ""taskDone"":""false"",&#xA;    ""id"":0,&#xA;    ""_id"":""k4loE7XR5gioQk54""&#xA;  }], &#xA;  function (err, newDocs) {&#xA;    // empty here&#xA;  }&#xA;  );&#xA;db.update(&#xA;           { _id: ""k4loE7XR5gioQk54"", UserName:""xxx"" }, &#xA;           { $set: { taskDone: ""true""} },&#xA;           {},// this argument was missing&#xA;           function (err, numReplaced) {&#xA;             console.log(""replaced----&gt;"" + numReplaced);&#xA;           }&#xA;           );&#xA;// should give the correct result now&#xA;db.find({}).exec(function (err, docs) {console.log(docs);});&#xA;</code></pre>&#xA;",4241278,"",4241278,"",2015-11-08T03:43:11,2015-11-08T03:43:11,"","",,4,,,
33647869,2,,33647079,2015-11-11T09:43:26,,1,,"<p>All your functions are asynchronous. It means, that you need to wait for finishing previous function before running next one</p>&#xA;&#xA;<p>So you code should be looking like this</p>&#xA;&#xA;<pre><code>child = exec('wget ' + url1 + ' -O update.json',&#xA;&#xA;    function(error, stdout, stderr) {&#xA;        // ...&#xA;        child = exec('wget ' + url2 + ' -O image.json',&#xA;&#xA;            function(error, stdout, stderr) {&#xA;                //...&#xA;&#xA;            }&#xA;        )&#xA;    }&#xA;)&#xA;</code></pre>&#xA;&#xA;<p>and so on. You need to download files before you can process them. <code>exec</code> fires callback when your <code>wget</code> process done</p>&#xA;&#xA;<p>For dealing with callback hell you can use <a href=""https://github.com/caolan/async"" rel=""nofollow"">https://github.com/caolan/async</a> package</p>&#xA;",2066271,"",2066271,"",2015-11-11T13:44:03,2015-11-11T13:44:03,"","",,0,,,
33673613,2,,33506946,2015-11-12T14:20:43,,1,,"<p>open <em>node_modules/serialport/binding.gyp</em>, you need make some changes...</p>&#xA;&#xA;<p><strong>before:</strong></p>&#xA;&#xA;<pre><code>  ""target_name"": ""action_after_build"",&#xA;  ""type"": ""none"",&#xA;  ""dependencies"": [ ""&lt;(module_name)"" ],&#xA;  ""copies"": [&#xA;    {&#xA;      ""files"": [ ""&lt;(PRODUCT_DIR)/&lt;(module_name).node"" ],&#xA;      ""destination"": ""&lt;(module_path)""&#xA;</code></pre>&#xA;&#xA;<p><strong>after:</strong></p>&#xA;&#xA;<pre><code>  ""target_name"": ""action_after_build"",&#xA;  ""type"": ""none"",&#xA;  ""dependencies"": [ ""serialport"" ],&#xA;  ""copies"": [&#xA;    {&#xA;      ""files"": [ ""&lt;(PRODUCT_DIR)/serialport.node"" ],&#xA;      ""destination"": "".""&#xA;</code></pre>&#xA;&#xA;<p>And change <em>module_path</em> in <em>node_modules/serialport/package.json</em> for:</p>&#xA;&#xA;<pre><code>""module_path"": ""./build/{configuration}/"",&#xA;</code></pre>&#xA;&#xA;<p>Finally, run <strong>nw-gyp rebuild --target=0.12.3</strong></p>&#xA;",5554485,"",,"",,2015-11-12T14:20:43,"","",,0,,,
33680673,2,,33658086,2015-11-12T20:26:33,,1,,"<p>Alright, after trying lots of things and reading tons of examples I found there were <a href=""http://www.w3schools.com/jsref/event_ctrlkey.asp"" rel=""nofollow""><code>ctrlKey</code></a> <a href=""http://www.w3schools.com/jsref/event_altkey.asp"" rel=""nofollow""><code>altKey</code></a> <a href=""http://www.w3schools.com/jsref/event_shiftkey.asp"" rel=""nofollow""><code>shiftKey</code></a> and <a href=""http://www.w3schools.com/jsref/event_metakey.asp"" rel=""nofollow""><code>metaKey</code></a> properties. </p>&#xA;&#xA;<p>After that, I came with this script which will prevent users from opening DevTools on NWJS 13 from shortcuts (i.e. <code>F12</code> on Windows and Linux and <code>⌘ ⌥ I</code> on Mac). And also disables right clic menu.</p>&#xA;&#xA;<pre><code>&lt;script language=""javascript""&gt;&#xA;    document.onmousedown=disableclick;&#xA;    document.onkeydown=disableconsole;&#xA;    function disableclick(event) {&#xA;        if(event.button==2) {&#xA;            return false;    &#xA;        }&#xA;    }&#xA;    function disableconsole(e) {&#xA;        evtobj = window.event? event : e;&#xA;        if (evtobj.keyCode==123 || //Linux &amp; Windows&#xA;                (evtobj.metaKey &amp;&amp; evtobj.altKey &amp;&amp; evtobj.keyCode==73)) { //Mac&#xA;            return false;&#xA;        }&#xA;    }&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<h2>Edit</h2>&#xA;&#xA;<p>Another way of solving this was using the NWJS alpha version 3 (without SDK), which was specified on the <a href=""https://groups.google.com/forum/#!topic/nwjs-general/l-vc2U9mSsA"" rel=""nofollow"">NWJS Google Group</a> but I read it after.</p>&#xA;",2180785,"",2180785,"",2015-11-25T23:47:11,2015-11-25T23:47:11,"","",,0,,,
33713521,2,,33711020,2015-11-14T21:22:28,,1,,<p>Your curl request is going to <code>https://www.google-analytics.com/collect</code> and your Node.js request is going to <code>https://www.google-analytics.com/debug/collect</code> (notice the <code>debug</code> in the URL).</p>&#xA;&#xA;<p>The debug endpoint is for debugging errors only. It does not send actual hits to Google Analytics. I suspect that's your problem.</p>&#xA;,478460,"",,"",,2015-11-14T21:22:28,"","",,1,,,
33758626,2,,30265797,2015-11-17T13:50:04,,1,,"<p>Global variables are a big no no when using ES6 modules.</p>&#xA;&#xA;<p>You could load your scripts after the app definition:</p>&#xA;&#xA;<pre><code>loadApp = System.import('./scripts/app_definition').then(function(m){&#xA;    window.App = m['App'];&#xA;&#xA;    var scriptEl = document.createElement('script');&#xA;    scriptEl.src = ""compiled/modules/video/video_app.js"";&#xA;    document.head.appendChild(scriptEl);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>But i'm not sure what's the use of having JSPM here in the first place. So the real solution would be to transform all your modules to ES6 import syntax and avoid global variables all together.</p>&#xA;",219652,"",50109,"",2016-01-02T21:03:51,2016-01-02T21:03:51,"","",,0,,,
33761806,2,,32575410,2015-11-17T16:14:36,,1,,<p>I ended up modifying the <code>enabled</code> value of the <code>MenuItem</code> itself: </p>&#xA;&#xA;<pre><code>myTrayMenu.items[atPosition].enabled = true;&#xA;</code></pre>&#xA;,1665,"",,"",,2015-11-17T16:14:36,"","",,0,,,
33576710,2,,33576380,2015-11-06T22:27:01,,2,,"<p>Maybe you <a href=""https://github.com/louischatriot/nedb#sorting-and-paginating"" rel=""nofollow"">sort</a> it with the id ascending and get the first with limit</p>&#xA;&#xA;<pre><code>db.find({}).sort({ id: 1 }).limit(1).exec(function (err, docs) {&#xA;});&#xA;</code></pre>&#xA;",1447675,"",,"",,2015-11-06T22:27:01,"","",,0,,,
33605472,2,,33602935,2015-11-09T08:55:19,,2,,"<p>Native modules (<a href=""https://www.npmjs.com/package/phantom"" rel=""nofollow"">phantom</a> is one of them, my experience was with <a href=""https://www.npmjs.com/package/lwip"" rel=""nofollow"">lwip</a>) must be rebuilt to work inside nw.js; the ones you install with npm are not compatible. It is also recommended to install node.js version matching that which is used by nw.js (i.e. io.js 1.2.0).</p>&#xA;&#xA;<p>The instruction on how to rebuild: <a href=""https://github.com/nwjs/nw.js/wiki/build-native-modules-with-nw-gyp"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/build-native-modules-with-nw-gyp</a></p>&#xA;&#xA;<p>Basically, you would</p>&#xA;&#xA;<pre><code>$ npm install -g nw-gyp&#xA;$ cd node_modules/phantom&#xA;$ nw-gyp configure --target=0.12.3&#xA;$ nw-gyp build&#xA;</code></pre>&#xA;&#xA;<p>Note ""0.12.3"" version in configure because that's what your nw:version shows.&#xA;Also, note different pre-requisites depending on which OS you use: <a href=""https://github.com/nwjs/nw-gyp"" rel=""nofollow"">https://github.com/nwjs/nw-gyp</a></p>&#xA;&#xA;<hr>&#xA;&#xA;<p>To do web-scarping in nw.js I successfully use the following stack (on Windows 7):</p>&#xA;&#xA;<ul>&#xA;<li>nw.js 0.12.3</li>&#xA;<li><a href=""https://www.npmjs.com/package/phantomjs"" rel=""nofollow"">phantomjs</a> module with phantomjs 1.9.8 or 2.0.1b</li>&#xA;<li><a href=""https://www.npmjs.com/package/node-phantom-simple"" rel=""nofollow"">node-phantom-simple</a> module</li>&#xA;</ul>&#xA;",2715393,"",,"",,2015-11-09T08:55:19,"","",,0,,,
33691160,2,,33688374,2015-11-13T10:57:06,,2,,"<p>If you want to load external sites which check if they are the main window, nw.js has an attribute you can place on an iframe to fool the content into thinking it is the top/main frame: <code>nwfaketop</code>. This removes access to <code>window.parent</code> and <code>window.top</code>.</p>&#xA;&#xA;<p>Also, if you are loading external content you may want to combine this with <code>nwdisable</code>, which disables Node within the iframe.</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;    &lt;head&gt;&#xA;        &lt;title&gt;iframe test&lt;/title&gt;&#xA;    &lt;/head&gt;&#xA;    &lt;body&gt;&#xA;        &lt;iframe width=""600"" height=""600"" src=""http://www.flipkart.com"" nwdisable nwfaketop&gt;&lt;/iframe&gt;&#xA;    &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>More information can be found in the nw.js documentation: <a href=""https://github.com/nwjs/nw.js/wiki/Mini-browser-in-iframe"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/Mini-browser-in-iframe</a></p>&#xA;",271879,"",,"",,2015-11-13T10:57:06,"","",,0,,,
33715759,2,,33711637,2015-11-15T02:31:31,,2,,"<p>1st The reason &#xA;      <code>// i have tried making it as global without var but did not work</code>&#xA;is not working because though you making the object global but every time you call get_my_links function, it will update the global object to empty array. </p>&#xA;&#xA;<p>For your use case, define href_link before defining get_my_links function. Like</p>&#xA;&#xA;<pre><code>var href_link =[];&#xA;function get_my_links() {&#xA;...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Defining href_link after function definition like -></p>&#xA;&#xA;<pre><code>function get_my_links() {&#xA;...&#xA;}&#xA;var href_link =[];&#xA;</code></pre>&#xA;&#xA;<p>will throw an error of undefined value of href_link inside get_my_links function due to hoisting which must be the case you have mentioned in above comment.</p>&#xA;",2708182,"",2708182,"",2015-11-15T07:53:00,2015-11-15T07:53:00,"","",,0,,,
33614293,2,,32612868,2015-11-09T17:02:58,,3,,"<p>I don't know if there is a better way, but at least for my works run the main process using xvfb-run command:</p>&#xA;&#xA;<pre><code>$ xvfb-run node --harmony simple-service.js&#xA;Worker 12153 is online&#xA;Worker 12155 is online&#xA;Worker 12154 is online&#xA;Worker 12156 is online&#xA;</code></pre>&#xA;",5543336,"",,"",,2015-11-09T17:02:58,"","",,1,,,
33650908,2,,33458437,2015-11-11T12:49:58,,4,,"<p>Use full path to test.sh:</p>&#xA;&#xA;<pre><code>var shell = require(""shelljs"");&#xA;var output = shell.exec(""bash /path/to/test.sh"",{silent:true,async:false}).output;&#xA;console.log(output);&#xA;</code></pre>&#xA;&#xA;<p>Looks like shelljs searching file in: /tmp/shelljs_b656f0ddaa7c3b096e97&#xA;Where you place test.sh? Near nwjs? How you run code? From devtools? From project? From packed project?</p>&#xA;&#xA;<p>Also, why you need shelljs? Nwjs already have internall API to work with shell:</p>&#xA;&#xA;<pre><code>var nwGui = require('nw.gui')&#xA;    , nwShell = nwGui.Shell&#xA;    , child_process = require('child_process')&#xA;    , exec = child_process.exec&#xA;    , execSync = child_process.execSync&#xA;    , execFile = child_process.execFile&#xA;    , execFileSync = child_process.execFileSync&#xA;;&#xA;&#xA;var output = execSync(""bash /path/to/test.sh"");&#xA;console.log(output);&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/nwjs/nw.js/wiki/shell"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/shell</a></p>&#xA;",2771556,"",,"",,2015-11-11T12:49:58,"","",,1,,,
33667474,2,,33599908,2015-11-12T08:49:49,,4,,"<p>When your first page is index.html you call that page, when you create your window.</p>&#xA;&#xA;<pre><code>const win = new BrowserWindow(options);&#xA;win.loadUrl(`file://${__dirname}/index.html`);&#xA;</code></pre>&#xA;&#xA;<p>If you want to load another page maybe </p>&#xA;&#xA;<pre><code>win.loadUrl(`file://${__dirname}/page.html`);&#xA;</code></pre>&#xA;&#xA;<p>could help you.</p>&#xA;&#xA;<p>If the page should be loaded after a user action (e.g. click on a link). You can add the link to your index.hmtl page. Electron works here exactly like a browser.</p>&#xA;&#xA;<pre><code>&lt;a href=""page.html""&gt;Go to page&lt;/a&gt;&#xA;</code></pre>&#xA;",5291427,"",,"",,2015-11-12T08:49:49,"","",,4,,,
33693917,2,,32986359,2015-11-13T13:33:00,,5,,"<p>This is outside of the realm of normal use-cases for an electron application. In order to do this you would need to develop a native module that calls into the corresponding native functions of the operating system.</p>&#xA;&#xA;<p>For example on windows:&#xA;<a href=""https://stackoverflow.com/questions/1437158/c-win32-keyboard-events"">C++ Win32 keyboard events</a></p>&#xA;&#xA;<p>Making native addons for node: <a href=""https://nodejs.org/api/addons.html"" rel=""nofollow noreferrer"">https://nodejs.org/api/addons.html</a></p>&#xA;&#xA;<p>FYI, Native addons are very hard.</p>&#xA;",12958,"",-1,"",2017-05-23T12:26:01,2015-11-13T13:33:00,"","",,0,,,
33571959,2,,33570989,2015-11-06T17:06:21,,7,,"<p><code>mkdirSync</code> will attempt to create myNewDirectory relative to the current working directory. Try setting the absolute path, perhaps using <code>__dirname</code>.</p>&#xA;",14870,"",,"",,2015-11-06T17:06:21,"","",,2,,,
28124996,2,,28108270,2015-01-24T11:27:23,,0,,"<p>The problem was at package.json. This is kind dumb, but I wrote index.htm instead of index.html. So if you are getting <code>Not allowed to load local resource:</code> error be sure to check your package.json for bad names.</p>&#xA;&#xA;<p>Regards</p>&#xA;",1734815,"",,"",,2015-01-24T11:27:23,"","",,0,,,
28259883,2,,28189882,2015-02-01T05:43:19,,0,,"<p>It's explained here <a href=""https://github.com/nwjs/nw.js/wiki/How-to-package-and-distribute-your-apps"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/How-to-package-and-distribute-your-apps</a></p>&#xA;&#xA;<p>There is special tool to make packages: <a href=""https://github.com/mllrsohn/node-webkit-builder"" rel=""nofollow"">https://github.com/mllrsohn/node-webkit-builder</a>&#xA;And here how I do in my project <a href=""https://github.com/Paxa/postbird/blob/master/Rakefile"" rel=""nofollow"">https://github.com/Paxa/postbird/blob/master/Rakefile</a></p>&#xA;",1083428,"",,"",,2015-02-01T05:43:19,"","",,0,,,
28291893,2,,28230229,2015-02-03T05:22:00,,0,,"<p>I found a solution.</p>&#xA;&#xA;<p>Just run the <code>script</code> </p>&#xA;&#xA;<pre><code>echo ""deb http://ftp.us.debian.org/debian testing main"" &gt;&gt; /etc/apt/sources.list&#xA;apt-get -y update&#xA;apt-get -t testing install libc6-dev&#xA;</code></pre>&#xA;&#xA;<p>followed by the script in <code>github</code> and then <code>node-webkit</code> works fine</p>&#xA;",1473071,"",,"",,2015-02-03T05:22:00,"","",,0,,,
28085177,2,,28077222,2015-01-22T09:28:26,,1,,"<p>I don't find any solution to change the user-agent in <code>Window.open</code>. </p>&#xA;&#xA;<p>But you can use <a href=""https://github.com/nwjs/nw.js/wiki/Changes-to-dom#nwUserAgent"" rel=""nofollow"">iframe#nwUserAgent</a> to change it . </p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<p><code>index.html</code></p>&#xA;&#xA;<pre><code>var new_win = gui.Window.open('iframe.html', {&#xA;    position: 'center',&#xA;    width: 300,&#xA;    height: 300 &#xA;    //,show: false &#xA;}); &#xA;</code></pre>&#xA;&#xA;<p><code>iframe.html</code></p>&#xA;&#xA;<pre><code>&lt;iframe src=""http://google.com"" nwUserAgent=""test"" style=""width:100%;height:100%""&gt;&lt;/iframe&gt;&#xA;</code></pre>&#xA;",809744,"",,"",,2015-01-22T09:28:26,"","",,2,,,
28196452,2,,28183507,2015-01-28T15:45:50,,1,,"<p>If you take a look at the <a href=""https://github.com/nwjs/nw.js/wiki/Devtools-jail-feature"" rel=""nofollow"">DevTools Jail Feature</a>, you will see a demo function using the <code>headless</code> option. The callback (which is the same for <code>Window.showDevTools()</code>) provides a URL. It may be possible to utilize that URL to get the content (via AJAX), but there might be a limitation in functionality or some other serious concerns. Consider that if you use the devTools in a non-<code>&lt;iframe&gt;</code>, the markup for the devtools would actually be a part of your document making your devtools considerably slower and potentially subject to serious error.</p>&#xA;&#xA;<p>Given that an <code>&lt;iframe&gt;</code> is customizable via HTML/CSS/ES(JS), and considering the above, I would carefully weigh the pros and potential cons before using anything other than an <code>&lt;iframe&gt;</code> or other <code>Window</code>.</p>&#xA;",501932,"",,"",,2015-01-28T15:45:50,"","",,0,,,
28157266,2,,28156897,2015-01-26T19:25:20,,7,,"<p>Give the <a href=""https://www.npmjs.com/package/auto-launch"">auto-launch</a> module a try, it should do what you want. To answer your questions:</p>&#xA;&#xA;<ul>&#xA;<li>No</li>&#xA;<li>No, but it'd be Classier™ if you asked first</li>&#xA;<li>See Above</li>&#xA;<li>No</li>&#xA;<li>See Above.</li>&#xA;</ul>&#xA;",5728,"",,"",,2015-01-26T19:25:20,"","",,0,,,
32158380,2,,31891614,2015-08-22T16:34:12,,0,,"<p>The only way I can think of is to use some sort of proxy for the DB requests. For  have a web server with public API serving the node-webkit clients. Use session and sign-in to make sure only allowed users consume this API, and make the web server make the request to the DB and returning the results. </p>&#xA;",1393862,"",,"",,2015-08-22T16:34:12,"","",,0,,,
32193159,2,,32192948,2015-08-24T23:13:27,,0,,"<p>That's not the way to read a file. This is how you do it:</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;fs.readFile(filename, { encoding : 'utf8' }, function(err, data){&#xA;    //data holds the contents of the file.&#xA;    req.send(data);&#xA;});&#xA;</code></pre>&#xA;",1549541,"",,"",,2015-08-24T23:13:27,"","",,8,,,
32232252,2,,32229683,2015-08-26T16:47:07,,0,,"<p>It might be difficult to meet all your requirements:</p>&#xA;&#xA;<ul>&#xA;<li>iOS renders with Apple's UIWebView, even for Chrome: <a href=""https://developer.chrome.com/multidevice/ios/overview"" rel=""nofollow"">https://developer.chrome.com/multidevice/ios/overview</a>. So you'll still need to refer to <a href=""http://caniuse.com/"" rel=""nofollow"">http://caniuse.com/</a> from time to time.</li>&#xA;<li>Access to the local device on a phone gets weird. Using an <code>&lt;input type=file&gt;</code> on an iOS device will bring up your photos, not a browser to look for files on the local device.</li>&#xA;</ul>&#xA;&#xA;<p>That said, I've had pretty good success with PhoneGap. It creates a W3C widget, and can be scaled to a web app if you follow some guidelines: <a href=""https://stackoverflow.com/questions/15080785/phonegap-code-as-a-web-app"">Phonegap code as a web app</a>.</p>&#xA;",346550,"",,"",,2015-08-26T16:47:07,"","",,0,,,
32138703,2,,32090408,2015-08-21T11:03:41,,1,,<p>Try to add min/max width &amp; min/max height. Or remove maximize button</p>&#xA;,1747411,"",,"",,2015-08-21T11:03:41,"","",,4,,,
32342777,2,,32333535,2015-09-02T00:13:19,,1,,"<p>In this case I would download the file and store it on disk, and once it is finished, require the file.</p>&#xA;&#xA;<pre><code>var http = require('http'),&#xA;    fs = require('fs');&#xA;&#xA;var file = fs.createWriteStream('./tmp/SomeViewModel.js');&#xA;http.get({&#xA;    // your options&#xA;}, function (res) {&#xA;    // set encoding, etc.&#xA;    res.pipe(file);&#xA;    file.on('finish', function() {&#xA;        file.close(function() {&#xA;            // do stuff&#xA;            // var SomeViewModel = require('./tmp/SomeViewModel.js');&#xA;        });&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",1222635,"",,"",,2015-09-02T00:13:19,"","",,3,,,
32147208,2,,31999988,2015-08-21T18:34:29,,2,,"<p>you need to use the <code>node-main</code> to do what you are trying to achieve. Your code probably crash due to exception. </p>&#xA;&#xA;<p>first, add the <code>node-main</code> to the config</p>&#xA;&#xA;<pre><code>""node-main"": ""index.js"",&#xA;</code></pre>&#xA;&#xA;<p>To debug the code, use attach uncaught exception handler:</p>&#xA;&#xA;<pre><code>var report_error = function(err){&#xA;    if (typeof console == 'object' &amp;&amp; typeof console.log == 'function') {&#xA;        console.log('Exception: ' + err.message, err.stack);&#xA;    } else {&#xA;        setTimeout(function(){report_error(err);},200);&#xA;    }&#xA;&#xA;};&#xA;process.on('uncaughtException', function (err) {&#xA;    report_error(err);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>note that I check if the console is accessible - when this script run console is not yet accessible:</p>&#xA;&#xA;<blockquote>&#xA;  <p>This symbol is not available at the time the script is loaded,&#xA;  because the script is executed before the DOM window load (<a href=""https://github.com/nwjs/nw.js/wiki/node-main"" rel=""nofollow"">source</a>).</p>&#xA;</blockquote>&#xA;&#xA;<p>I experienced similar issues because I used console.log in the index.js. after using the following function instead of console.log I got it to work:</p>&#xA;&#xA;<pre><code>var console_log = function(err){&#xA;    if (typeof console == 'object' &amp;&amp; typeof console.log == 'function') {&#xA;        console.log(err);&#xA;    } else {&#xA;        setTimeout(function(){console_log(err);},200);&#xA;    }&#xA;};&#xA;</code></pre>&#xA;",1393862,"",,"",,2015-08-21T18:34:29,"","",,0,,,
32295192,2,,32295104,2015-08-30T09:42:51,,2,,"<p>Make sure when bind an element's text content that there is nothing else inside that element. For example, in the following code sniped the <code>li</code> item contains the data-binding AND a <code>span</code>. </p>&#xA;&#xA;<pre><code>          &lt;li class=""mailbox""&gt;&#xA;            {{mailbox.name}}&#xA;            &lt;span class=""mailbox--badge""&gt;{{mailbox.box.messages.new}}&lt;/span&gt;&#xA;</code></pre>&#xA;&#xA;<p>You can fix this by wrapping your binding in another element (for example a <code>span</code>).</p>&#xA;&#xA;<pre><code>          &lt;li class=""mailbox""&gt;&#xA;            &lt;span&gt;{{mailbox.name}}&lt;/span&gt;&#xA;</code></pre>&#xA;&#xA;<p>Another thing that won't work is <code>&lt;img src$=""https:{{connected_account.gravatar}}""&gt;</code>. The binding must span the whole attribute. If you want to concatenate a string, you currently have to use <a href=""https://www.polymer-project.org/1.0/docs/devguide/data-binding.html#annotated-computed"" rel=""nofollow"">computed bindings</a>.</p>&#xA;",594056,"",594056,"",2015-09-04T12:13:32,2015-09-04T12:13:32,"","",,2,,,
32302856,2,,32298500,2015-08-31T01:31:04,,5,,"<p>There's a new concept called <em>style module</em> (actually a <code>dom-module</code> element behind the scene) introduced in Polymer 1.1 (read it <a href=""https://www.polymer-project.org/1.0/docs/devguide/styling.html#style-modules"" rel=""noreferrer"">here</a>) and the old way of including external stylesheets has been deprecated (read it <a href=""https://www.polymer-project.org/1.0/docs/devguide/styling.html#external-stylesheets"" rel=""noreferrer"">here</a>).</p>&#xA;&#xA;<p>Basically, you need to create an <em>html</em> file like how you normally create an element to store your styles. The <code>id</code> defines the name of this file that will be referenced later on.</p>&#xA;&#xA;<pre><code>&lt;!-- shared-styles.html --&gt;&#xA;&lt;dom-module id=""shared-styles""&gt;&#xA;  &lt;template&gt;&#xA;    &lt;style&gt;&#xA;      .red { color: red; }&#xA;    &lt;/style&gt; &#xA;  &lt;/template&gt;&#xA;&lt;/dom-module&gt;&#xA;</code></pre>&#xA;&#xA;<p>Then obviously you need to import this file in your page. </p>&#xA;&#xA;<pre><code>&lt;link rel=""import"" href=""shared-styles.html""&gt;&#xA;</code></pre>&#xA;&#xA;<p>Now, there are two scenarios. </p>&#xA;&#xA;<ol>&#xA;<li><p>If you are using <code>custom-style</code> at the document level, you need to&#xA;include the <em>style module</em> you previously defined like this -</p>&#xA;&#xA;<p><code>&lt;style is=""custom-style"" include=""shared-styles""&gt;&lt;/style&gt;</code></p></li>&#xA;<li><p>If you simply want to include the <em>style module</em> inside one of your &#xA;elements, do this -</p>&#xA;&#xA;<p><code>&lt;dom-module id=""my-element""&gt;&#xA;  &lt;style include=""shared-styles""&gt;&lt;/style&gt;</code></p></li>&#xA;</ol>&#xA;&#xA;<p>Have a look at this <a href=""http://plnkr.co/edit/fEv4PTjuKXLHvkZiH210?p=preview"" rel=""noreferrer"">plunker</a> that demonstrates both scenarios.</p>&#xA;&#xA;<p>Keep in mind that in your particular example, since you are using <code>:host</code>, I assume you will go with scenario 2. So this <a href=""http://plnkr.co/edit/bwg6PyMKFMK0eVLPzqdk?p=preview"" rel=""noreferrer"">plunker</a> should be a bit more clearer.</p>&#xA;",231837,"",231837,"",2015-08-31T01:42:48,2015-08-31T01:42:48,"","",,1,,,
32164371,2,,32096814,2015-08-23T07:46:36,,9,,"<p>It really depends on your exact requirements. The following is a list of everything that I came up with:</p>&#xA;&#xA;<ul>&#xA;<li>electron supports module system (i.e. <code>require</code>) both in main and renderer processes.</li>&#xA;<li>electron provides you access to OS APIs (e.g. <code>fs</code>). Without such many node modules will not work in the JS runtime of the browser (e.g. <a href=""https://www.npmjs.com/package/ip"" rel=""noreferrer""><code>ip</code></a>).</li>&#xA;<li>updating your app with electron is as easy as sending an <a href=""https://nodejs.org/api/http.html"" rel=""noreferrer"">http</a> request. (or even better as described <a href=""https://github.com/atom/electron/blob/master/docs/api/auto-updater.md"" rel=""noreferrer"">here</a>)</li>&#xA;<li>an HTML 5 offline app requires a browser and the user might just give it <a href=""http://dev.modern.ie/ie6countdown/"" rel=""noreferrer"">IE6</a>.</li>&#xA;<li>electron integrates with native desktop environment (see <a href=""https://github.com/atom/electron/blob/master/docs/api/dialog.md"" rel=""noreferrer"">dialog</a>, <a href=""https://github.com/atom/electron/blob/master/docs/api/power-save-blocker.md"" rel=""noreferrer"">power-save-blocker</a>, <a href=""https://github.com/atom/electron/blob/master/docs/api/shell.md"" rel=""noreferrer"">shell</a> or even <a href=""https://github.com/atom/electron/blob/master/docs/api/app.md"" rel=""noreferrer"">app</a> for some examples)</li>&#xA;<li>electron enhances some of HTML5 APIs such as <a href=""https://github.com/atom/electron/blob/master/docs/api/file-object.md"" rel=""noreferrer""><code>file</code> API</a></li>&#xA;<li>electron lets you modify the default behavior of underlying chromium. For example you could <a href=""https://github.com/atom/electron/blob/master/docs/api/protocol.md"" rel=""noreferrer"">intercept</a> all URLs with <code>file</code> scheme and modify them on the fly*.</li>&#xA;</ul>&#xA;&#xA;<p>In short if you want your app to have a good native integration and act deterministic (i.e. no browser quirks) I suggest choosing electron.</p>&#xA;&#xA;<p><hr />&#xA;*<a href=""https://www.npmjs.com/package/electron-jade"" rel=""noreferrer""><code>electron-jade</code></a> for example takes use of <code>protocol</code> API to compile all files ending with <code>.jade</code> on the fly without the need to prior compilation.</p>&#xA;&#xA;<p><strong>DISCLAIMER</strong>: I am the developer of <code>electron-jade</code>.</p>&#xA;",2295964,"",,"",,2015-08-23T07:46:36,"","",,0,,,
43087822,2,,38855268,2017-03-29T08:07:19,,0,,"<p>As explained in EDIT #2, the problem was that creating a promise in the main electron process made the promise non-zone-aware. Creating the promise from Angular solved it.  </p>&#xA;",190833,"",,"",,2017-03-29T08:07:19,"","",,0,,,
43094806,2,,43073820,2017-03-29T13:22:47,,5,,"<p>That error message only says, that 11 listeners to a ""socket"" (like the ones in UNIX) were created. Every listener creates a unique ID which is returned when creating the listener. Based on that, removing one particular listener could be done like this:</p>&#xA;&#xA;<pre><code>// Create a listener.&#xA;var myListener = function (event, args) {} &#xA;ipcRenderer.on(""channel"", myListener);&#xA;&#xA;// Delete only this one by its ID:&#xA;ipcRenderer.removeListener(""channel"", myListener);&#xA;</code></pre>&#xA;&#xA;<p>But you can also delete all of the listeners that were created for a socket, like this:</p>&#xA;&#xA;<pre><code>// Create a few listeners.&#xA;var myListener0 = function (event, args) {};&#xA;var myListener1 = function (event, args) {};&#xA;var myListener2 = function (event, args) {};&#xA;var myListener3 = function (event, args) {};&#xA;&#xA;//&#xA;ipcRenderer.on(""channel"", myListener0);&#xA;ipcRenderer.on(""channel"", myListener1);&#xA;ipcRenderer.on(""channel"", myListener2);&#xA;ipcRenderer.on(""channel"", myListener3);&#xA;&#xA;// Delete all listeners for socket ""channel"".&#xA;ipcRenderer.removeAllListeners(""channel"");&#xA;</code></pre>&#xA;&#xA;<p>This is also covered in the Electron documentation, particularly <a href=""https://electron.atom.io/docs/api/ipc-renderer/"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;",6786876,"",7537011,"",2019-07-02T21:41:23,2019-07-02T21:41:23,"","",,0,,,
43114686,2,,42439905,2017-03-30T10:07:26,,1,,"<p>If it's about creating a virtual table using fts3 or fts4 then you do not need to register the module with sqlite3 as  FTS3 and FTS4 are included with the SQLite core source code,but they are not enabled by default.&#xA;To enable them use the following two switches in the compiler command line :</p>&#xA;&#xA;<pre><code>-DSQLITE_ENABLE_FTS3&#xA;-DSQLITE_ENABLE_FTS3_PARENTHESIS&#xA;</code></pre>&#xA;&#xA;<p>Then you can use it as follows:</p>&#xA;&#xA;<pre><code>sqlite3 = ref.types.void; // we don't know what the layout of ""sqlite3"" looks like&#xA;sqlite3_stmt = ref.types.void;&#xA;sqlite3Ptr = ref.refType(sqlite3);&#xA;sqlite3PtrPtr = ref.refType(sqlite3Ptr);&#xA;stringPtr = ref.refType(ref.types.CString);&#xA;stmtPtr = ref.refType(sqlite3_stmt);&#xA;stmtPtrPtr = ref.refType(stmtPtr) ;&#xA;&#xA;// binding to a few ""libsqlite3"" functions...&#xA;libsqlite3 = ffi.Library('sqlite3', {&#xA;    'sqlite3_open': ['int', ['string', sqlite3PtrPtr]],&#xA;    'sqlite3_close': ['int', [sqlite3Ptr]],&#xA;    'sqlite3_exec': ['int', [sqlite3Ptr, 'string', 'pointer', 'pointer', stringPtr]],&#xA;    'sqlite3_changes': ['int', [sqlite3Ptr]],&#xA;    'sqlite3_user_add': ['int', [sqlite3Ptr, 'string', 'string', 'int', 'int']],&#xA;    'sqlite3_user_authenticate': ['int', [sqlite3Ptr, 'string', 'string', 'int']],&#xA;    'sqlite3_prepare_v2': ['int',[sqlite3Ptr, 'string', 'int', stmtPtrPtr, stringPtr]],&#xA;    'sqlite3_bind_blob': [ 'int', [stmtPtr, 'int', 'string' , 'int', 'pointer'] ],&#xA;    'sqlite3_step':[ 'int', [stringPtr] ],&#xA;    'sqlite3_finalize': ['int', [stringPtr]],&#xA;    'sqlite3_column_bytes': ['string',[stringPtr,'int']],&#xA;    'sqlite3_column_blob': ['string',[stringPtr,'int']]        &#xA;});&#xA; dbHandle = dbPtrPtr.deref(); &#xA; var queryvtab = ""CREATE VIRTUAL TABLE virtual_table_name USING fts3()"";&#xA; var commr = libsqlite3.sqlite3_exec(dbHandle, queryvtab, null, null, null);&#xA;</code></pre>&#xA;",2385297,"",,"",,2017-03-30T10:07:26,"","",,0,,,
43123968,2,,43123845,2017-03-30T16:53:54,,3,,"<blockquote>&#xA;  <p>the question is, can you make web server application with electron, with shipping encrypted server.js (express.js script) and the user that install my app to NOT REQUIRED TO install node.js?</p>&#xA;</blockquote>&#xA;&#xA;<p>You can embed a Node server inside of your Electron app just like you can use any Node code there, and the user will not need to install anything more than for using any other Electron app especially - it will be especially easy if you don't want to spawn external processes but just use a framework like Express in Electron like you can do any other Node module.</p>&#xA;&#xA;<p>But you will not be able to encrypt the <code>server.js</code> file in any way that wouldn't be very easy to decrypt by the user who wants to do it. This is not hard but fundamentally impossible, as the user will have to be able to encrypt it to run it so you need to give the user all of the information needed to decrypt it and there is no way around it.</p>&#xA;&#xA;<p>If you want to keep the server code secret then you need to host it on your own server. If you want to do that then see some of those answers:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://stackoverflow.com/questions/42905376/deploy-node-js-in-production/42906684#42906684"">Deploy node.js in production</a></li>&#xA;<li><a href=""https://stackoverflow.com/questions/43072453/simple-node-js-app-deployment-on-digitalocean-from-github/43072658#43072658"">Simple node.js app deployment on DigitalOcean from GitHub</a></li>&#xA;<li><a href=""https://stackoverflow.com/questions/43005225/how-to-host-website-in-nodejs-and-mongodb-and-what-will-be-the-cost/43005392#43005392"">How to host website in NodeJS and MongoDB? And what will be the cost?</a></li>&#xA;<li><a href=""https://stackoverflow.com/questions/39941955/how-to-host-node-js-server-and-postgresql-database-from-my-computer/39944271#39944271"">How to host Node.Js server and PostgreSQL database from my computer?</a></li>&#xA;</ul>&#xA;",613198,"",-1,"",2017-05-23T11:47:06,2017-03-30T16:53:54,"","",,0,,,
43173788,2,,43167763,2017-04-02T21:35:17,,4,,"<p>Heroku dynos have an <a href=""https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem"" rel=""nofollow noreferrer"">ephemeral file system</a>, so you shouldn't be trying to save your database there. From the documentation:</p>&#xA;&#xA;<blockquote>&#xA;  <p>During the dyno’s lifetime its running processes can use the&#xA;  filesystem as a temporary scratchpad, but no files that are written&#xA;  are visible to processes in any other dyno and any files written will&#xA;  be discarded the moment the dyno is stopped or restarted.</p>&#xA;</blockquote>&#xA;&#xA;<p>You'll have a better time adding a MongoDB addon and writing to that instead.</p>&#xA;",7671538,"",,"",,2017-04-02T21:35:17,"","",,0,,,
43175802,2,,43103587,2017-04-03T02:46:07,,1,,"<p>The conceptual solution for this problem:&#xA; in ""electron"",<br>&#xA;""{dialog}=require(electron)"" (e.g.,)&#xA;in tabs, will not work</p>&#xA;&#xA;<p>This is how they built electron.&#xA;probably to increase stability or just part of the issue that's based on chrome </p>&#xA;&#xA;<p>in the main process, we can require(electron), where in tabs, we are to require npm modules with browserify&#xA;*** check for example &#xA;<a href=""https://i.stack.imgur.com/6CNAi.png"" rel=""nofollow noreferrer"">what modules work where in electron</a></p>&#xA;",7788013,"",7788013,"",2017-04-03T02:54:37,2017-04-03T02:54:37,"","",,0,,,
43205473,2,,43201161,2017-04-04T11:07:00,,1,,<p>The <code>assets</code> folder sits on the same root level as the <code>build</code> folder. Therefore to access the assets ( which after the build will be from the <code>build/main.js</code> ) you need to go up a level.</p>&#xA;&#xA;<pre><code>page-dashboard .main-back{&#xA;   background-image: url('../assets/img/sheepsatmyvatn.jpg');&#xA;}&#xA;</code></pre>&#xA;,,user1752532,,"",,2017-04-04T11:07:00,"","",,0,,,
43207120,2,,40673002,2017-04-04T12:21:24,,0,,<p>I solved it by runing this :</p>&#xA;&#xA;<p><code>npm rebuild --runtime=electron --target=1.3.1 --disturl=atom.io/download/atom-shell --build-from-source</code>  </p>&#xA;&#xA;<p>Rebuilt it using a different target version and it worked!</p>&#xA;,6652565,"",,"",,2017-04-04T12:21:24,"","",,0,,,
43207725,2,,43203327,2017-04-04T12:49:11,,0,,"<p>I have created the cookies and get back from cookies</p>&#xA;&#xA;<pre><code>var session = require('electron').remote.session;&#xA;    var ses = session.fromPartition('persist:name');&#xA;    var expiration = new Date();&#xA;    var hour = expiration.getHours();&#xA;    hour = hour + 6;&#xA;    expiration.setHours(hour);&#xA;    var value = {&#xA;        name: ""testname""&#xA;    };&#xA;    ses.cookies.get(value, function(error, cookies) {&#xA;        console.log(cookies); // the value saved on the cookie&#xA;    });&#xA;    ses.cookies.set({&#xA;        url: ""http://localhost/"",&#xA;        name: ""testname"",&#xA;        value: ""data"",&#xA;        expirationDate: expiration.getTime()&#xA;    }, function(error) {&#xA;        console.log(error);&#xA;    });&#xA;</code></pre>&#xA;",5445420,"",,"",,2017-04-04T12:49:11,"","",,0,,,
43239325,2,,43210136,2017-04-05T18:49:58,,2,,"<p>to use File System in electron with Vue and WebPack, the file system instance has to be declared in the dist/index.html after execute the command ""npm run build""</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    var fs = require('fs');&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>and in the vue component, it 's used fs like if it would have been declared in the vue file.</p>&#xA;&#xA;<pre><code>...&#xA;export const writeToFile = ({commit}) =&gt; {&#xA;    fs.writeFileSync('/path/file.json', SON.stringify(someObjectHere))&#xA;};&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>while if not use it in electron or you write it in the index to dev, it throws an error.</p>&#xA;",7822059,"",,"",,2017-04-05T18:49:58,"","",,0,,,
43253530,2,,43202566,2017-04-06T11:14:00,,-1,,<p>I have been resolved the problem. The solution for me: create the print view component and just use window.print() to print the data.</p>&#xA;,5464179,"",,"",,2017-04-06T11:14:00,"","",,0,,,
43255352,2,,43202554,2017-04-06T12:32:42,,4,,"<p>So I had to basically rebuild the entire electron code. </p>&#xA;&#xA;<p>Get the libchromium source from <a href=""https://github.com/electron/libchromiumcontent"" rel=""nofollow noreferrer"">here</a></p>&#xA;&#xA;<p>To modify the code in content module of electron we have to write a patch in libchromium/patches. &#xA;And then build libchromiumcontent : </p>&#xA;&#xA;<pre><code>./scripts/bootstrap&#xA;./scripts/update&#xA;</code></pre>&#xA;&#xA;<p>Compile and package libchromiumcontent with the following commands:</p>&#xA;&#xA;<pre><code>./script/build&#xA;./script/create-dist&#xA;</code></pre>&#xA;&#xA;<p>After the build is done, take note of the hash from the libchromiumcontent commit that includes your patch and perform the following commands, replacing your operating system and architecture as appropriate:</p>&#xA;&#xA;<pre><code># Use either win|linux|osx to reference the platform&#xA;mkdir -p osx/x64/&lt;commit&gt;&#xA;mv libchromiumcontent* osx/x64/&lt;commit&gt;&#xA;</code></pre>&#xA;&#xA;<p>And then build Electron with our custom libchromiumcontent : </p>&#xA;&#xA;<p>Clone electron if you have not done already</p>&#xA;&#xA;<pre><code>git clone https://github.com/atom/electron &amp;&amp; cd electron&#xA;</code></pre>&#xA;&#xA;<p>Bootstrap Electron with our custom libchromiumcontent:</p>&#xA;&#xA;<pre><code>./script/bootstrap.py -v --url file:///path/to/libchromiumcontent&#xA;</code></pre>&#xA;&#xA;<p>And finally build Electron:</p>&#xA;&#xA;<pre><code>./script/build.py -c D &#xA;</code></pre>&#xA;",6652565,"",,"",,2017-04-06T12:32:42,"","",,0,,,
43302980,2,,43300824,2017-04-09T04:18:19,,2,,"<p>The <code>electron</code> typings in DefinitelyTyped is outdated.</p>&#xA;&#xA;<p>The <code>Electron</code> you refer to is the namespace created by the typings (type definition) to hold all types that described the types in <code>electron</code>.</p>&#xA;&#xA;<p>In the actual JavaScript, <code>electron</code> does not have a global variable <code>Electron</code> defined (anymore), thus the error you see.</p>&#xA;&#xA;<p>The import statement <code>import { BrowserWindow } from 'electron'</code> is the ES6 syntax to get the actual <code>BrowserWindow</code> class so you can use it.</p>&#xA;&#xA;<p>I agree that having the typings exposing the namespace <code>Electron</code> is confusing and should be removed.</p>&#xA;&#xA;<p><code>electron</code> is working on having its own typings.</p>&#xA;&#xA;<p>You can follow it here: <a href=""https://github.com/electron/electron/issues/4875"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/4875</a></p>&#xA;",3505900,"",,"",,2017-04-09T04:18:19,"","",,0,,,
43305254,2,,39900378,2017-04-09T09:42:16,,0,,"<p>Hello you need to put the methods in the same component that the template:</p>&#xA;&#xA;<pre><code>&lt;template&gt;&#xA;  &lt;div class=""example"" @click=""say""&gt;say method&lt;/div&gt;&#xA;&lt;/template&gt;&#xA;&#xA;&lt;script&gt;&#xA;  export default {&#xA;    methods: {&#xA;      say () {&#xA;        console.log('Hello world!')&#xA;      }&#xA;    }&#xA;  }&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Take a look in the vue documents: <a href=""https://vuejs.org/v2/guide/"" rel=""nofollow noreferrer"">https://vuejs.org/v2/guide/</a></p>&#xA;",,user2824729,,"",,2017-04-09T09:42:16,"","",,0,,,
43306875,2,,43306860,2017-04-09T12:51:35,,1,,"<p>The <code>{}</code> allow you to 'extract' the <code>app</code> property from the object you're requiring.</p>&#xA;&#xA;<p>It is a feature of ECMAScript 2015 (a.k.a. ES6 or ES2015) called <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"" rel=""nofollow noreferrer"">Destructuring assignment</a>. The following two lines are equivalent:</p>&#xA;&#xA;<pre><code>const {app} = require('electron');&#xA;const app = require('electron').app;&#xA;</code></pre>&#xA;",2317532,"",3001761,"",2017-04-09T12:54:43,2017-04-09T12:54:43,"","",,0,,,
43116942,2,,43115033,2017-03-30T11:43:24,,4,,"<p>I want to show my window on top when click event occurs, simply make it by mainwin.setalwaysOnTop(true); </p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>// in electron &#xD;&#xA;&#xD;&#xA;mainwindow.setalwaysontop(""true""); &#xD;&#xA;// once show then it leaves from top when click outside&#xD;&#xA;settimeout(funtion()&#xD;&#xA;{&#xD;&#xA;  mainwindow.setalwaysontop(""false"");&#xD;&#xA;},1000)</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",7664944,"",7664944,"",2017-04-10T14:14:25,2017-04-10T14:14:25,"","",,1,,,
43165588,2,,43102216,2017-04-02T07:09:33,,22,,"<p>To explain this for future users.  <code>&lt;script&gt;</code> tag's in an HTML document are executed in the global scope, this means that <code>this === window</code>, I.e. any function or variable declared in the script inherently becomes global.</p>&#xA;&#xA;<p>When you <code>require</code> a script it becomes isolated in it's own context (it is wrapped in another function so <code>this !== window</code>, I.e. any function or variable declared in the script is not available globally.</p>&#xA;&#xA;<p>The correct way to do this is to use <code>require('./renderer.js')</code> and to use this code</p>&#xA;&#xA;<pre><code>function getData() {&#xA;    ...&#xA;}&#xA;&#xA;document.querySelector('#btnEd').addEventListener('click', () =&gt; {&#xA;    getData()&#xA;})&#xA;</code></pre>&#xA;",2499250,"",6324171,"",2019-01-27T18:16:52,2019-01-27T18:16:52,"","",,1,,,
43239854,2,,43234059,2017-04-05T19:19:21,,3,,"<p>As it turns out, I was using keytar in the renderer process.  I moved keytar into the main process (which doesn't go through Webpack / Babel) and gets packed correctly by electron-builder.</p>&#xA;&#xA;<p>main.js</p>&#xA;&#xA;<pre><code>ipcMain.on('get-password', (event, user) =&gt; {&#xA;    event.returnValue = keytar.getPassword('ServiceName', user);&#xA;});&#xA;&#xA;ipcMain.on('set-password', (event, user, pass) =&gt; {&#xA;    event.returnValue = keytar.replacePassword('ServiceName', user, pass);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then from the renderer process I can call</p>&#xA;&#xA;<pre><code>const password = ipcRenderer.sendSync('get-password', user);&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>ipcRenderer.sendSync('set-password', user, pass);&#xA;</code></pre>&#xA;",7820796,"",7820796,"",2017-04-11T13:04:15,2017-04-11T13:04:15,"","",,1,,,
43303770,2,,43293921,2017-04-09T06:31:34,,6,,"<p>The correct way to handle this case is by listening to the <code>error</code> event:</p>&#xA;&#xA;<pre><code>const file = fs.createWriteStream('/path/to/existing/file', {flags: 'wx'});&#xA;file.on('error', function(err) {&#xA;    console.log(err);&#xA;    file.end();&#xA;});&#xA;</code></pre>&#xA;",289319,"",289319,"",2017-04-09T13:55:05,2017-04-09T13:55:05,"","",,1,,,
43116857,2,,43116793,2017-03-30T11:40:16,,1,,"<p>Yes it is possible, you have nodejs in electron so you can use mongoose:&#xA;<a href=""https://github.com/Automattic/mongoose"" rel=""nofollow noreferrer"">https://github.com/Automattic/mongoose</a></p>&#xA;&#xA;<p>But in this case every person who use your application have to install mongodb in his machine.</p>&#xA;",7729726,"",,"",,2017-03-30T11:40:16,"","",,2,,,
43184890,2,,43184603,2017-04-03T12:37:51,,8,,"<p>There is no React-specific solution for this. Just use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection"" rel=""nofollow noreferrer"">window.getSelection</a> API.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>To output highlighted text run <code>window.getSelection().toString()</code></p>&#xA;",2762747,"",2628378,"",2019-09-04T16:34:44,2019-09-04T16:34:44,"","",,2,,,
43195118,2,,43194280,2017-04-03T22:06:02,,1,,"<p>have you tried something like:</p>&#xA;&#xA;<pre><code>&lt;input type=""text"" onclick=""require('child_process').exec('matchbox-keyboard');"" /&gt;&#xA;</code></pre>&#xA;",8960344,"",,"",,2017-04-03T22:06:02,"","",,2,,,
43247861,2,,43237206,2017-04-06T06:56:22,,0,,"<p>First of all, every time you call that function you do <code>require('readline')</code> and <code>require('fs')</code> so I would move that up the script.</p>&#xA;&#xA;<p>I would suggest two approaches:</p>&#xA;&#xA;<p><strong>Pausing read</strong></p>&#xA;&#xA;<pre><code>var readline = require('readline');&#xA;var fs = require('fs');&#xA;&#xA;function clickTest(){&#xA;  var lineReader = readline.createInterface({&#xA;    input: fs.createReadStream(filePath)&#xA;  });&#xA;&#xA;  lineReader.on('line', function(line){&#xA;    // pause emitting of lines...&#xA;    lineReader.pause();&#xA;&#xA;    // write line to dom&#xA;    document.getElementById(""demo"").innerHTML += line;&#xA;&#xA;    // Resume after some time&#xA;    setTimeout(function(){&#xA;      lineReader.resume();&#xA;    }, 1000);&#xA;  });&#xA;&#xA;  lineReader.on('end', function(){&#xA;    lineReader.close();&#xA;  });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This approach should read one line, then pause and resume after some time you specify.</p>&#xA;&#xA;<p><strong>Buffering lines</strong></p>&#xA;&#xA;<pre><code>var readline = require('readline');&#xA;var fs = require('fs');&#xA;var lines = [];&#xA;&#xA;function clickTest(){&#xA;  var lineReader = readline.createInterface({&#xA;    input: fs.createReadStream(filePath)&#xA;  });&#xA;&#xA;  lineReader.on('line', function(line){&#xA;    lines.push(line)&#xA;  });&#xA;&#xA;  lineReader.on('end', function(){&#xA;    lineReader.close();&#xA;&#xA;    printLine(0);&#xA;  });&#xA;}&#xA;&#xA;function printLine(index){&#xA;  // write line to dom&#xA;  document.getElementById(""demo"").innerHTML += lines[index];&#xA;&#xA;  if (index &lt; lines.length - 1){&#xA;      setTimeout(function(){&#xA;        printLine(index + 1); &#xA;      }, 1000);&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This approach will save all the lines into an array and then slowly prints them out. </p>&#xA;&#xA;<p>Please note that I haven't got node-webkit to actually test it, so you might find a bug in the code, but it should give you general idea</p>&#xA;",820942,"",,"",,2017-04-06T06:56:22,"","",,2,,,
43148416,2,,43148345,2017-03-31T19:35:18,,2,,"<p>You are binding the blur event after the user clicks the color picker. You never unbind it so it would continue to fire every time the user leaves the colorSample element. You have a few options. </p>&#xA;&#xA;<p>The best, in my opinion, is to use <a href=""http://api.jquery.com/one/"" rel=""nofollow noreferrer"">.one</a> instead of blur so the event only fires once.</p>&#xA;&#xA;<p>For Example:</p>&#xA;&#xA;<pre><code>function getColorAtPointer(){&#xA;    $('input[name=""colorSample""]').focus();&#xA;&#xA;    $('input[name=""colorSample""]').one(""blur"", function(){&#xA;        var mouse = robot.getMousePos();&#xA;        $('input[name=""colorSample""]').val('#'+robot.getPixelColor(mouse.x, mouse.y));&#xA;        return;&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Alternatively you could namespace the blur event (e.g. <code>.on(""blur.color-picked"")</code> then inside of the blur event handler unbind the event (e.g. <code>.off(""blur.color-picked"")</code></p>&#xA;&#xA;<p>It is also worth noting that you do not have to use an anonymous function inside of click events, you can pass the function directly </p>&#xA;&#xA;<pre><code>$('.color_picker').click(getColorAtPointer);&#xA;</code></pre>&#xA;",2647442,"",,"",,2017-03-31T19:35:18,"","",,3,,,
33349675,2,,33307355,2015-10-26T15:34:44,,0,,"<p>By reading the manual for npmrc (<code>npm help npmrc</code>), I have discovered the the <code>.npmrc</code> file is not unique. By configuring the registry the way I did, I only changed the per-user <code>.npmrc</code>. But there also should be such a file in your project root directory! It is in this one that you should configure the registry you want to use. Adding this file in project root directory solved the problem I was facing.</p>&#xA;",5104052,"",,"",,2015-10-26T15:34:44,"","",,0,,,
33448800,2,,33387293,2015-10-31T06:35:05,,0,,"<p>Since now one answered i'll do this myself, i did something not very nice but it works for now .. i put some function to make sure the the url starts with http or https , but in this case the use have to remove the unnecessary parts of the url like the example above </p>&#xA;&#xA;<pre><code>chrome extension://oemmndcbldboiebfnladdacbdfmadadm/http://www.semantikon.com/StealThisBookbyAbbieHoffman.pdf &#xA;</code></pre>&#xA;",5478857,"",,"",,2015-10-31T06:35:05,"","",,0,,,
33479965,2,,33278241,2015-11-02T14:30:50,,0,,"<p>For some strange reason, it seems that when you add an icon (folder format) to the Content root, sign it, build a package and install it, the signature is removed. Not including the icon folder in the content root, solved my problem.</p>&#xA;",1134168,"",,"",,2015-11-02T14:30:50,"","",,0,,,
33337517,2,,33337057,2015-10-26T02:20:07,,1,,"<p><em>Finder aliases</em> on OS X are technologically distinct from <em>symlinks</em>.</p>&#xA;&#xA;<p>From the filesystem's perspective, they are regular files, and only Finder itself and the OS X-specific APIs know to handle them - Node.js has no built-in API for that.</p>&#xA;&#xA;<p>IF calling out to the <em>shell</em> - which will be slow - is an option, you can try the following:</p>&#xA;&#xA;<pre><code>function isFinderAlias(path) {&#xA;  var contentType = require('child_process')&#xA;        .execFileSync('mdls', &#xA;          [ '-raw', '-name', 'kMDItemContentType', path ], { encoding: 'utf8' })&#xA;  return contentType === 'com.apple.alias-file'&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>For a <code>swift</code>-based way to <em>resolve</em> a Finder alias to its <em>target path</em>, see <a href=""https://stackoverflow.com/a/33349364/45375"">this answer</a>.</p>&#xA;",45375,"",-1,"",2017-05-23T12:14:41,2015-10-26T21:55:59,"","",,3,,,
33381180,2,,33372982,2015-10-28T01:02:41,,1,,"<p>As it says in its <a href=""http://electron.atom.io/docs/v0.34.0/tutorial/quick-start/"" rel=""nofollow"">Quick Start guide</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Electron enables you to create desktop applications <strong>with pure JavaScript</strong> by providing a runtime with rich native (operating system) APIs. You could see it as a variant of the Node.js runtime that is focused on desktop applications instead of web servers.</p>&#xA;  &#xA;  <p>This doesn't mean Electron is a JavaScript binding to graphical user interface (GUI) libraries. <strong>Instead, Electron uses web pages as its GUI</strong>, so you could also see it as a minimal Chromium browser, controlled by JavaScript.</p>&#xA;</blockquote>&#xA;&#xA;<p>So, just use HTML, CSS and javascript! By instance you can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog"" rel=""nofollow"">dialog native element</a> or any other library like <a href=""http://getbootstrap.com/javascript/#modals"" rel=""nofollow"">Bootstrap</a>, <a href=""http://github.hubspot.com/vex/docs/welcome/"" rel=""nofollow"">Vex</a>, <a href=""http://bootboxjs.com/"" rel=""nofollow"">Bootbox.js</a>, etc.</p>&#xA;",3219121,"",3219121,"",2015-10-28T01:17:22,2015-10-28T01:17:22,"","",,0,,,
33467814,2,,33467423,2015-11-01T22:12:11,,1,,"<p>I made a small array with some common resolutions. The algorithm looks first for the lines and then for the dots.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var resolution = [&#xD;&#xA;        { name: '480p', dots: 852, lines: 480 },&#xD;&#xA;        { name: '576p', dots: 768, lines: 576 },&#xD;&#xA;        { name: '720p', dots: 1280, lines: 720 },&#xD;&#xA;        { name: '1080p', dots: 1920, lines: 1080 },&#xD;&#xA;        { name: '2160p', dots: 3840, lines: 2160 },&#xD;&#xA;        { name: '4320p', dots: 7680, lines: 4320 },&#xD;&#xA;    ];&#xD;&#xA;&#xD;&#xA;function findResolution(dots, lines) {&#xD;&#xA;    var i = 0;&#xD;&#xA;    while (lines &gt; resolution[i].lines) {&#xD;&#xA;        i++;&#xD;&#xA;    }&#xD;&#xA;    while (dots &gt; resolution[i].dots) {&#xD;&#xA;        i++;&#xD;&#xA;    }&#xD;&#xA;    return resolution[i].name;&#xD;&#xA;}&#xD;&#xA;document.write(findResolution(600, 600) + '&lt;br&gt;');&#xD;&#xA;document.write(findResolution(1920, 600) + '&lt;br&gt;');        &#xD;&#xA;document.write(findResolution(1270, 528) + '&lt;br&gt;');&#xD;&#xA;document.write(findResolution(960, 720) + '&lt;br&gt;');</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",1447675,"",,"",,2015-11-01T22:12:11,"","",,0,,,
33469363,2,,33458998,2015-11-02T01:30:24,,1,,<p>Set it to <code>null</code> and the dock badge goes away</p>&#xA;,5728,"",,"",,2015-11-02T01:30:24,"","",,2,,,
33382794,2,,33378351,2015-10-28T04:12:49,,2,,"<p>Debugging the browser process doesn't work at the moment in Electron, put all your interesting code in the renderer process so you can use Devtools</p>&#xA;",5728,"",,"",,2015-10-28T04:12:49,"","",,0,,,
33425392,2,,33422680,2015-10-29T22:00:47,,2,,<p>I think you should instead attempt to look at <code>process.versions.electron</code>. </p>&#xA;&#xA;<pre><code>if (process &amp;&amp; process.versions &amp;&amp; process.versions.electron) {&#xA;    document.body.classList.add('electronified');&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is assuming you're not running your app inside of a <code>&lt;webview&gt;</code> of course.</p>&#xA;,12958,"",,"",,2015-10-29T22:00:47,"","",,0,,,
33528359,2,,33440031,2015-11-04T17:33:14,,2,,"<p>Apparently, using the electron binary is not enough to actually launch your application. However, by <em>building</em> the binary for your application and linking it into your <strong>conf.js</strong> file works.<br>&#xA;I have been able to reduce my file to this:<br>&#xA;<strong>conf.js</strong>  </p>&#xA;&#xA;<pre><code>exports.config = {&#xA;    seleniumAddress: 'http://localhost:4444/wd/hub',&#xA;    specs: ['test-spec.js'],&#xA;    capabilities: {&#xA;        browserName: ""chrome"",&#xA;        chromeOptions: {&#xA;            binary: ""./dist/myAwesomeApp/myAwesomeAppBinary""&#xA;        }&#xA;    },&#xA;    onPrepare: function () {&#xA;        browser.resetUrl = ""file://"";&#xA;    }&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>By doing it this way, there is no need to describe a <code>baseUrl</code> or to use <code>browser.get()</code> nor <code>browser.driver.get()</code> to start the app in Electron.<br>&#xA;However, I would have preferred not to have to build the app binary, but I don't think it is possible for now.</p>&#xA;",5104052,"",,"",,2015-11-04T17:33:14,"","",,2,,,
33352083,2,,32870493,2015-10-26T17:36:55,,3,,"<p>It turns out I just didn't understand all of the different processes going on.  So with an application that is using a <strong>webview</strong> inside of a <strong>browser-window</strong>, there are actually three processes to be concerned about:</p>&#xA;&#xA;<ol>&#xA;<li>Main process - has access to node</li>&#xA;<li>Renderer process (browser window) - has access to node by default</li>&#xA;<li>Web view process - does <strong>not</strong> have access to node by default</li>&#xA;</ol>&#xA;&#xA;<p>I was seeing the node modules available to 2) and trying to use them in 3).  The webview has the 'nodeintegration' attribute that can be used to enable this:&#xA;<a href=""http://electron.atom.io/docs/v0.34.0/api/web-view-tag/#nodeintegration"" rel=""nofollow"">http://electron.atom.io/docs/v0.34.0/api/web-view-tag/#nodeintegration</a></p>&#xA;&#xA;<p>However, using a preload script allows for exposing only the necessary node functionality with using nodeintegration:&#xA;<a href=""http://electron.atom.io/docs/v0.34.0/api/web-view-tag/#preload"" rel=""nofollow"">http://electron.atom.io/docs/v0.34.0/api/web-view-tag/#preload</a></p>&#xA;&#xA;<p>I went with that solution, setting up communication between the renderer process and the webview process.</p>&#xA;",1146218,"",,"",,2015-10-26T17:36:55,"","",,0,,,
33402122,2,,33371700,2015-10-28T21:43:28,,3,,"<p>I think what you are looking for are <code>frameless-windows</code> in Electron. When you construct your BrowserWindow object pass <code>transparent: true</code> as an option.</p>&#xA;&#xA;<pre><code>var win = new BrowserWindow({ transparent: true});&#xA;</code></pre>&#xA;&#xA;<p>If you don't want a frame around your window you might want to pass <code>frame: false</code> as an option as well.</p>&#xA;&#xA;<pre><code>var win = new BrowserWindow({ transparent: true, frame: false});&#xA;</code></pre>&#xA;&#xA;<p>NOTE: Unfortunately, you can't click through the frame-window as of yet, as they are still working on it. Read more about that <a href=""https://github.com/atom/electron/issues/1335"" rel=""nofollow"">here</a>.</p>&#xA;",1207404,"",,"",,2015-10-28T21:43:28,"","",,0,,,
33332348,2,,33331603,2015-10-25T16:54:46,,4,,"<p>You can use streams in node.js to append one file onto another:</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;&#xA;// open destination file for appending&#xA;var w = fs.createWriteStream(""output.txt"", {flags: 'a'});&#xA;// open source file for reading&#xA;var r = fs.createReadStream(""input.txt"");&#xA;&#xA;w.on('close', function() {&#xA;    console.log(""done writing"");&#xA;});&#xA;&#xA;r.pipe(w);&#xA;</code></pre>&#xA;&#xA;<p>This will buffer the file, read it in chunks, write it in chunks, close both files, all done for you.</p>&#xA;&#xA;<p>And, it's all done with asynchronous file I/O so it will allow other node.js activities to interleave (e.g. won't block node.js).</p>&#xA;",816620,"",816620,"",2015-10-25T17:03:05,2015-10-25T17:03:05,"","",,1,,,
33369197,2,,33353838,2015-10-27T13:24:00,,4,,"<p>There's a nice example of <a href=""https://www.manos.im/blog/electron-oauth-with-github/"" rel=""nofollow noreferrer"">how to do oAuth authentication in an electron app using Github API</a>. Also if you search in github.com you will find a lot of projects using electron and implementing oauth like <a href=""https://github.com/manosim/gitify/blob/master/src/js/reducers/auth.js"" rel=""nofollow noreferrer"">Gitify does here</a>.</p>&#xA;",3219121,"",3219121,"",2019-10-02T11:55:48,2019-10-02T11:55:48,"","",,6,,,
33481956,2,,33474755,2015-11-02T16:09:54,,5,,"<p>There is no equivalent to CSS <code>no-repeat</code> for SVG patterns.  The only way to prevent the image pattern from repeating is to make the pattern tile (defined by <code>width</code>, <code>height</code>, <code>x</code> and <code>y</code> on the <code>&lt;pattern&gt;</code> element) larger than the shape that it fills.</p>&#xA;&#xA;<p>Since you're using <code>fill</code> (not <code>stroke</code>) and the default <code>objectBoundingBox</code> value for <code>patternUnits</code>, this would normally be assured with a width/height of 1 (must be set explicitly) and x/y of 0 (the default).  However, the transformations you're using would throw that off.</p>&#xA;&#xA;<p>Without knowing how or why you are calculating the transformations the way you are, I can't tell you the reverse calculations to use to create a large enough pattern tile.</p>&#xA;&#xA;<p>Instead, I would suggest that you leave the pattern transformation alone, and transform the <code>&lt;image&gt;</code> instead.  The pattern transform attribute is useful because it transforms the tiling pattern as well as the contents, but since you do not want any tiling to be visible it is an unnecessary complication in this case.</p>&#xA;",3128209,"",,"",,2015-11-02T16:09:54,"","",,2,,,
49108351,2,,40041412,2018-03-05T10:30:56,,2,,"<p>There are two ways to solve this problem.&#xA;Either you can use proxy.pac method or session/proxy rules to change the proxy</p>&#xA;&#xA;<p>persist session method :</p>&#xA;&#xA;<pre><code>var proxyIp ='12.12.133.12’&#xA;var port =‘8080’&#xA;&#xA;&lt;webview id=""wv1"" src=""https://github.com"" partition=""persist:webviewsession""&gt;&lt;/webview&gt;&#xA;&#xA;if(proxyIp.trim() =='noproxy'){&#xA;    var my_proxy = 'direct://';&#xA;    session.fromPartition('persist:webviewsession').setProxy({proxyRules:my_proxy}, function (){&#xA;        console.log('using the proxy  '  + proxyIp);&#xA;    });&#xA;&#xA;}else{&#xA;    var my_proxy = ""http://""+proxyIp+"":""+port;&#xA;    session.fromPartition('persist:webviewsession').setProxy({proxyRules:my_proxy}, function (){&#xA;        console.log('using the proxy  '  + proxyIp);&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>proxy.pac method</p>&#xA;&#xA;<p>proxy.js</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron');&#xA;const {session} = require('electron')&#xA;let mainWindow;&#xA;app.on('window-all-closed', function() {&#xA;  app.quit();&#xA;});&#xA;&#xA;  app.on('ready', function() {&#xA;  mainWindow = new BrowserWindow({width: 1024, height: 768 });&#xA;  session.defaultSession.allowNTLMCredentialsForDomains('*')//to access internal sites&#xA;&#xA;var myVar = setInterval(myTimer, 3000);&#xA;function myTimer() {&#xA;   mainWindow.webContents.session.setProxy({pacScript:'file://' + __dirname + '/proxy.pac'}, function () {return true;});&#xA;}&#xA;&#xA;mainWindow.webContents.session.setProxy({pacScript:'file://' + __dirname + '/proxy.pac'}, function () {mainWindow.loadURL('file://' + __dirname + '/browser.html');});&#xA;  mainWindow.openDevTools();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>proxy.pac</p>&#xA;&#xA;<pre><code>function FindProxyForURL(url, host) {&#xA;&#xA;   if (shExpMatch(url, ""*google*""))&#xA;         return ""PROXY 164.83.99.74:80"";&#xA;&#xA;   if (shExpMatch(url, ""*amazon*""))&#xA;         return ""PROXY 194.73.29.74:8080"";&#xA;&#xA;   return ""DIRECT"";&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Proxy.pac file can be in some S3 location or in some other remote server or local so even if you change remote proxy.pac file that will reflect in electron tool.Issue with proxy.pac method is when ever you are changing proxy IP in proxy.pac u need to reload proxy.pac file in electron that's why i am reloading every 3 sec in above code.</p>&#xA;&#xA;<p>Both will work fine and I tested both myself.&#xA;You can use any based on your usecase.</p>&#xA;&#xA;<p>Detailed discussion can be found here &#xA;<a href=""https://discuss.atom.io/t/how-to-set-proxy-for-each-webview-tag-in-electronjs/37307/2"" rel=""nofollow noreferrer"">https://discuss.atom.io/t/how-to-set-proxy-for-each-webview-tag-in-electronjs/37307/2</a> </p>&#xA;&#xA;<p>Electron Document : <a href=""https://github.com/electron/electron/issues/8247#issuecomment-268435712"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/session.md#sessetproxyconfig-callback</a></p>&#xA;&#xA;<p>Suggestion from electron maintainer : &#xA;<a href=""https://github.com/electron/electron/issues/8247#issuecomment-268435712"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/8247#issuecomment-268435712</a></p>&#xA;",3768218,"",3768218,"",2018-03-16T01:23:28,2018-03-16T01:23:28,"","",,0,,,
49112711,2,,49109048,2018-03-05T14:29:37,,2,,"<p>This <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">BrowserWindow</a> static method seems to be the most straightforward way:</p>&#xA;&#xA;<blockquote>&#xA;  <p><a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#browserwindowfromwebcontentswebcontents"" rel=""nofollow noreferrer"">BrowserWindow.fromWebContents(webContents)</a></p>&#xA;  &#xA;  <p>Returns BrowserWindow - The window that owns the given webContents.</p>&#xA;</blockquote>&#xA;",,user8022331,,user8022331,2018-03-05T14:35:18,2018-03-05T14:35:18,"","",,0,,,
49120105,2,,49104666,2018-03-05T21:53:03,,1,,"<p>Using <a href=""https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"" rel=""nofollow noreferrer""><code>exec</code></a> spawns a shell to launch the required command, either <code>process.env.ComSpec</code> or <code>cmd.exe</code> on Windows.  This adds an additional layer between <code>node</code> and the process being launched. Although that's not a complete answer as to why the process might remain running, using <code>exec</code> does provide more area for issues to occur.</p>&#xA;&#xA;<p>Using <a href=""https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options"" rel=""nofollow noreferrer""><code>spawn</code></a> allows the parent <code>node</code> process to directly control and pass signals to the child process.</p>&#xA;&#xA;<pre><code>const { spawn } = require('child_process')&#xA;const { CMD_BASE_PATH } = require('./globalconfig')&#xA;const find = spawn(`${CMD_BASE_PATH}taskkill.exe`, ['/im', 'finder.exe', '/F'])&#xA;&#xA;find.stdout.on('data', data =&gt; {&#xA;  console.log('stdout: %s', data)&#xA;})&#xA;&#xA;find.stderr.on('data', data =&gt; {&#xA;  console.log('stderr: %s', data)&#xA;})&#xA;&#xA;find.on('close', code =&gt; {&#xA;  if ( code !== 0 ) console.error(`Finder exited with error: ${code}`)&#xA;})&#xA;</code></pre>&#xA;",1318694,"",,"",,2018-03-05T21:53:03,"","",,0,,,
49143386,2,,49142668,2018-03-07T02:57:43,,6,,"<blockquote>&#xA;  <p>So how can I monkey patch this module method?</p>&#xA;</blockquote>&#xA;&#xA;<p>What you have would work fine ... but <em>only</em> if your code runs before it is used elsewhere. For reliable patching I recommend <a href=""https://github.com/ds300/patch-package"" rel=""noreferrer"">https://github.com/ds300/patch-package</a> which patches modules on install.</p>&#xA;",390330,"",,"",,2018-03-07T02:57:43,"","",,0,,,
49156427,2,,44164862,2018-03-07T16:07:44,,3,,"<p><code>""ELECTRON_RUN_AS_NODE=true ./node_modules/.bin/electron ./node_modules/.bin/jest</code> works fine</p>&#xA;",5513532,"",,"",,2018-03-07T16:07:44,"","",,0,,,
49175757,2,,49141686,2018-03-08T14:40:08,,4,,"<p>You can use <a href=""http://webdriver.io/api/utility/waitUntil.html#description"" rel=""nofollow noreferrer"">the custom 'waitUntil' command</a> to wait for just about anything. You'd need to figure out what you're waiting for, or how to tell that the component has been redrawn, but it should be possible.</p>&#xA;&#xA;<p>Is there a class name you can tag in to?</p>&#xA;&#xA;<p>Also, the 'waitFor' commands do take negation flags, allowing you to wait for an element to stop existing or stop having text. That might be useful.</p>&#xA;",150552,"",,"",,2018-03-08T14:40:08,"","",,0,,,
49178209,2,,49178090,2018-03-08T16:43:13,,0,,<p>You could use the <code>innerWidth</code> and <code>innerHeight</code> properties of <code>window</code>:</p>&#xA;&#xA;<pre><code>let width = window.innerWidth;&#xA;let height = window.innerHeight;&#xA;</code></pre>&#xA;,4547701,"",,"",,2018-03-08T16:43:13,"","",,0,,,
49185995,2,,49035176,2018-03-09T03:09:36,,1,,"<p>The key to fixing this was putting it in the right build. <a href=""https://github.com/karad/lein_template_descjop"" rel=""nofollow noreferrer"">Descjop</a> has 2 dev builds, one for the app itself (dev-main) and one for the window (dev-front). Dev-main can, and probably should, be left alone. The changes need to go in the dev-front build. </p>&#xA;&#xA;<h2>Step 1</h2>&#xA;&#xA;<p>Convert the dev-front build to :optimizations none. This is one of the requirements for re-frame-10x. To do this the following needs to be added to the cljsbuild section of profile.clj under the :dev-front :compiler section:</p>&#xA;&#xA;<pre><code>:main ""setup-front.init""&#xA;:asset-path ""js/out_front""&#xA;</code></pre>&#xA;&#xA;<p>The html file can then be simplified as ""setup-front.init"" will load the necessary stuff for you. Something like this:</p>&#xA;&#xA;<pre><code>&lt;body&gt;&#xA;&#xA;  &lt;div id=""app""&gt;&#xA;    &lt;p&gt;Minimum app does not work.&lt;/p&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;script type=""text/javascript"" src=""js/front.js"" charset=""utf-8""&gt;&lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;&#xA;<h2>Step 2</h2>&#xA;&#xA;<p>Upgrade! Descjop by default uses an older version of clojurescript that doesn't provide some of the functions re-frame-10x uses. org.clojure/clojurescript ""1.10.64"" works for me.</p>&#xA;&#xA;<p>After that the <a href=""https://github.com/Day8/re-frame-10x"" rel=""nofollow noreferrer"">re-frame-10x instructions</a> can be followed and it should just work. In short, add the following to the cljsbuild section right next to where you put the :main statement</p>&#xA;&#xA;<pre><code>:closure-defines      {""re_frame.trace.trace_enabled_QMARK_"" true}&#xA;:preloads             [day8.re-frame-10x.preload]&#xA;</code></pre>&#xA;&#xA;<p>and add this to the dependencies. Probably best to go in the :profiles :dev section. Check the instructions or clojars for the most up to date version though:</p>&#xA;&#xA;<pre><code>[day8.re-frame/re-frame-10x ""0.2.1-SNAPSHOT""]&#xA;</code></pre>&#xA;&#xA;<p>The source of a very basic hello-world using these changes is available on <a href=""https://github.com/soulflyer/electron-re-frame-example"" rel=""nofollow noreferrer"">github</a> </p>&#xA;&#xA;<p>Thanks to Mike Callahan for the gist of this solution.</p>&#xA;",1671119,"",1671119,"",2018-03-09T03:18:22,2018-03-09T03:18:22,"","",,0,,,
49210031,2,,49209991,2018-03-10T14:12:30,,2,,"<p>Because you are sharing the variable for both windows. After the second <code>createNewWindow('window2')</code> call your newWindow points to the second BrowserWindow. Try using different variables.</p>&#xA;&#xA;<pre><code>function createNewWindow(window) { &#xA;        const newWindow = new BrowserWindow({width: 600, height: 400});&#xA;        newWindow.loadURL(`file://${__dirname}/windows/${window}.html`)&#xA;        return newWindow;&#xA;    }&#xA;}&#xA;&#xA;let secondWindow = createNewWindow(""window2"");&#xA;</code></pre>&#xA;",2472608,"",,"",,2018-03-10T14:12:30,"","",,0,,,
49238444,2,,49164924,2018-03-12T15:05:20,,2,,"<p>The middle click does not create a new instance of your application, but rather a new instance of a <code>BrowserWindow</code>. You can disable middle-clicks on <code>a</code> (actually all) elements using the <a href=""https://developer.mozilla.org/en-US/docs/Web/Events/auxclick"" rel=""nofollow noreferrer""><code>auxclick</code></a> event.</p>&#xA;&#xA;<p>In your main window's HTML you could put the following JavaScript to disable middle-clicks on link elements if you do not want to redirect these events to your default browser:</p>&#xA;&#xA;<pre><code>// The following function will catch all non-left (middle and right) clicks&#xA;function handleNonLeftClick (e) {&#xA;    // e.button will be 1 for the middle mouse button.&#xA;    if (e.button === 1) {&#xA;        // Check if it is a link (a) element; if so, prevent the execution.&#xA;        if (e.target.tagName.toLowerCase() === ""a"") {&#xA;            e.preventDefault();&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;window.onload = () =&gt; {&#xA;    // Attach the listener to the whole document.&#xA;    document.addEventListener(""auxclick"", handleNonLeftClick);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>But you can also choose to redirect the middle-click events to your standard browser, namely via Electron's <a href=""https://electronjs.org/docs/api/shell"" rel=""nofollow noreferrer""><code>shell</code></a> module:</p>&#xA;&#xA;<pre><code>// Require Electron's ""shell"" module&#xA;const { shell } = require(""electron"");&#xA;&#xA;function handleNonLeftClick (e) {&#xA;    // e.button will be 1 for the middle mouse button.&#xA;    if (e.button === 1) {&#xA;        // Check if it is a link (a) element; if so, prevent the execution.&#xA;        if (e.target.tagName.toLowerCase() === ""a"") {&#xA;            // Prevent the default action to fire...&#xA;            e.preventDefault();&#xA;&#xA;            // ...and let the OS handle the URL.&#xA;            shell.openExternal(e.target.href);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// Also attach the listener this time:&#xA;window.onload = () =&gt; { document.addEventListener(""auxclick"", handleNonLeftClick); }&#xA;</code></pre>&#xA;&#xA;<p>You could remove the <code>if (e.button === 1)</code> if you also want to block right-clicks on <code>a</code> elements.</p>&#xA;",6786876,"",6786876,"",2018-03-29T08:05:18,2018-03-29T08:05:18,"","",,0,,,
49241826,2,,49240636,2018-03-12T18:08:46,,1,,"<p>I fixed the issue by replacing <code>app.post</code> with <code>app.get</code>, if anyone else is experiencing the same issue, here's what I did</p>&#xA;&#xA;<pre><code>  app.get('/playback/:key', (request, response, next) =&gt; {&#xA;    response.send(request.params.key + ' button pressed');&#xA;    // Do something&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>And then this on the client</p>&#xA;&#xA;<pre><code>  $('#previous').click(function () {&#xA;    $.get('/playback/prevsong')&#xA;  })&#xA;&#xA;  $('#playpause').click(function(){&#xA;    $.get('/playback/playpause')&#xA;  })&#xA;&#xA;  $('#next').click(function () {&#xA;    $.get('/playback/nextsong')&#xA;  })&#xA;</code></pre>&#xA;",7333168,"",7333168,"",2018-03-13T10:54:31,2018-03-13T10:54:31,"","",,0,,,
49248877,2,,48973064,2018-03-13T05:27:47,,2,,"<p>You can use node.js filesystem to write to the json file. check out the following code.</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;var $ = require('jquery');&#xA;&#xA;this.add_recent_file = function (object) {&#xA;    $.ajax({&#xA;        type: 'GET',&#xA;        url: './data/recent-files.json',&#xA;        dataType: 'json',&#xA;        success: function (files) {&#xA;            // append the entry to the array.&#xA;            files[files.length] = object;&#xA;&#xA;            // Get JSON string representation of the array.&#xA;            var str = JSON.stringify(files);&#xA;&#xA;            // Now write it to the json file.&#xA;            fs.writeFileSync(recent_file_url, str);&#xA;        },&#xA;        error: function () {&#xA;            alert('Error updating json file.');&#xA;        }&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",,user9483289,,"",,2018-03-13T05:27:47,"","",,0,,,
49255057,2,,49198482,2018-03-13T11:32:01,,3,,"<p>I looked through the sources of <code>electron-builder</code> and found that it simply runs <code>install</code> on the package. </p>&#xA;&#xA;<p>So having the following install hook is sufficient enough:</p>&#xA;&#xA;<pre><code>node-pre-gyp install --fallback-to-build&#xA;</code></pre>&#xA;&#xA;<p>I don't use <code>electron-rebuild</code> directly anymore since I produce the right binaries in the first place, but I run <code>electron-builder install-app-deps</code> which probably does similar.</p>&#xA;&#xA;<p>I don't see any reason to bother with <code>prebuild</code> and <code>prebuild-install</code> at this point. It's two more dependencies that shield what <code>node-pre-gyp</code> and <code>node-gyp</code> both already implement.</p>&#xA;&#xA;<p>I modified my script for travis to run builds for node and electron side by side:</p>&#xA;&#xA;<pre><code># build for nodejs&#xA;- npm install --build-from-source&#xA;&#xA;# build for electron&#xA;- npm install --build-from-source --runtime=electron --target=$ELECTRON_VERSION --dist-url=https://atom.io/download/atom-shell&#xA;</code></pre>&#xA;&#xA;<p>Packaging step has to run twice with the same flags, i.e:</p>&#xA;&#xA;<pre><code>- if [[ ""${TRAVIS_TAG}"" != """" ]]; then npm run package --verbose; fi&#xA;- if [[ ""${TRAVIS_TAG}"" != """" ]]; then npm run package --runtime=electron --target=$ELECTRON_VERSION --verbose; fi&#xA;</code></pre>&#xA;&#xA;<p>Both Travis and Appveyor support uploads to Github Releases or S3 so again no gain from using <code>prebuild</code> or <code>node-pre-gyp-github</code>, example for Travis:</p>&#xA;&#xA;<pre><code>deploy:&#xA;  provider: releases&#xA;  api_key:&#xA;    secure: ENCRYPTED_KEY&#xA;  file_glob: true&#xA;  file: build/stage/$PACKAGE_VERSION/*.tar.gz&#xA;  skip_cleanup: true&#xA;  on:&#xA;    tags: true&#xA;</code></pre>&#xA;",351305,"",,"",,2018-03-13T11:32:01,"","",,0,,,
49262905,2,,49240529,2018-03-13T18:01:48,,0,,"<p>You should end up developing these components:</p>&#xA;&#xA;<ul>&#xA;<li>Desktop UI (Electron)</li>&#xA;<li>Web UI (I would use an SPA but you could use .Net Core if you prefer)</li>&#xA;<li>Web API (.Net Core) - called by both UIs</li>&#xA;</ul>&#xA;&#xA;<p>Meanwhile you'll need to decide on a 3rd party Authorization Server component. You would not code this yourself:</p>&#xA;&#xA;<ul>&#xA;<li>Handles OAuth 2.0 and Open Id Connect messages</li>&#xA;<li>Provides a Login Page so that you don't need to write one</li>&#xA;</ul>&#xA;&#xA;<p><strong>BLOG + CODE SAMPLES</strong></p>&#xA;&#xA;<p>It is quite tricky to get the OAuth apps coded to a good level, but I have a visual blog and some code samples based on my company's implementation. </p>&#xA;&#xA;<p>I hope that readers can just browse it and look at screenshots to understand the main issues, and to save themselves some work.</p>&#xA;&#xA;<p><strong>BASIC INTERACTION</strong></p>&#xA;&#xA;<p>The below links show how the above components would work together:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://authguidance.com/2017/09/24/basicspa-overview/"" rel=""nofollow noreferrer"">SPA + API Writeup</a></li>&#xA;<li><a href=""https://github.com/garyarcher36/authguidance.websample1"" rel=""nofollow noreferrer"">SPA + API Code</a></li>&#xA;</ul>&#xA;&#xA;<p><strong>DESKTOP APPS</strong></p>&#xA;&#xA;<p>Desktop apps are tricky to undertand - the recommendation is to open the system browser. I have a couple of samples using Electron - maybe start here:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://authguidance.com/2018/01/11/desktop-apps-overview/"" rel=""nofollow noreferrer"">Desktop Apps Writeup</a></li>&#xA;<li><a href=""https://github.com/garyarcher36/authguidance.desktopsample1"" rel=""nofollow noreferrer"">Desktop Sample 1 - Loopback</a></li>&#xA;<li><a href=""https://github.com/garyarcher36/authguidance.desktopsample2"" rel=""nofollow noreferrer"">Desktop Sample 2 - Private URI Scheme</a></li>&#xA;</ul>&#xA;",9019885,"",,"",,2018-03-13T18:01:48,"","",,0,,,
49263962,2,,49241837,2018-03-13T19:00:38,,2,,"<p>Using <code>makeAsyncEpic(actions.openRepository, mainProcess.openDirectory);</code> you implicitly pass all of the arguments to the openDirectory function and <code>electron.remote</code> needs to pack/wrap every argument before it can be sent to the main processor.&#xA;In your case, the last argument is an <code>Observable</code> type and Electron can have problems with packing it.</p>&#xA;&#xA;<p>Using <code>makeAsyncEpic(actions.openRepository, () =&gt; mainProcess.openDirectory())</code> you don't pass any arguments to the <code>openDirectory</code> function so Electron doesn't have any problems. </p>&#xA;&#xA;<p>I'm guessing that the following syntax <code>(p, s, a) =&gt; mainProcess.openDirectory(p, s, a)</code> will cause the same problems as the first one.</p>&#xA;",1961030,"",,"",,2018-03-13T19:00:38,"","",,0,,,
49285533,2,,49282021,2018-03-14T18:45:08,,0,,"<p>So, it looks like the issue was that electron was trying to load a <code>.js.map</code> file from the wrong location. <code>electron-pug</code> was intercepting the url of the file and since it was not found it was throwing an error (not handling it very well it seems).</p>&#xA;&#xA;<p>My solution to fix this was to have inline sourcemaps instead of having a separate file.</p>&#xA;",1778465,"",,"",,2018-03-14T18:45:08,"","",,0,,,
49304128,2,,49278906,2018-03-15T16:03:25,,3,,"<p>As NG said, the issue was that I was trying to use electron-reload outside of a development environment. By simply removing the requirement of electron-reload, the program was able to successfully deploy and run as an application, without any of the three errors I shared in my question (Well, I still get a warning about asar not taking arguments, but the program gets successfully deployed this time). Big thanks to NG!</p>&#xA;",9491467,"",,"",,2018-03-15T16:03:25,"","",,0,,,
49304541,2,,49287697,2018-03-15T16:25:20,,5,,"<p>The <code>will-navigate</code> event is designed to catch/parse dropped files in electron. So it is not a vue.js specific issue.</p>&#xA;&#xA;<p>This snippet will prevent the render process from loading the image as content.</p>&#xA;&#xA;<pre><code>mainWindow.webContents.on('will-navigate', (event) =&gt; event.preventDefault());&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li>Reference: <a href=""https://github.com/electron/electron/issues/5919"" rel=""noreferrer"">https://github.com/electron/electron/issues/5919</a></li>&#xA;<li>API Docs: <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-will-navigate"" rel=""noreferrer"">https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-will-navigate</a></li>&#xA;</ul>&#xA;",5115009,"",,"",,2018-03-15T16:25:20,"","",,0,,,
49309948,2,,49309813,2018-03-15T22:01:02,,4,,<p>setFullYear() returns <em>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date</em>.</p>&#xA;&#xA;<p>For your code to work</p>&#xA;&#xA;<p>Replace this line</p>&#xA;&#xA;<pre><code>var years = new Date().setFullYear(new Date().getFullYear());&#xA;</code></pre>&#xA;&#xA;<p>with this</p>&#xA;&#xA;<pre><code>var years = new Date(new Date().setFullYear(new Date().getFullYear())).getFullYear(); //as you want year from here&#xA;</code></pre>&#xA;&#xA;<p>I don't know why you are doing this as <code>new Date(new Date().setFullYear(new Date().getFullYear())).getFullYear()</code> equals to <code>new Date().getFullYear()</code>. So you can also do this </p>&#xA;&#xA;<pre><code>  var years = new Date().getFullYear();&#xA;</code></pre>&#xA;,6355028,"",6355028,"",2018-03-15T22:02:45,2018-03-15T22:02:45,"","",,0,,,
49319423,2,,49316963,2018-03-16T11:14:17,,1,,"<p>I was able to get the reason for failure by running the executable from the command line. It was failing because of the below line </p>&#xA;&#xA;<pre><code>message: process.platform === 'win32' ? releaseNotes : releaseName,&#xA;</code></pre>&#xA;&#xA;<p>Because the variables were undefined. It was fixed by changing the call back function arguments to include <code>releaseName</code> and <code>releaseNotes</code> like so </p>&#xA;&#xA;<pre><code>autoUpdater.on(""update-available"", (event, releaseNotes, releaseName) =&gt; {&#xA;</code></pre>&#xA;&#xA;<p>As provided in the docs <a href=""https://electronjs.org/docs/tutorial/updates"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;",7283833,"",,"",,2018-03-16T11:14:17,"","",,0,,,
49185970,2,,49185969,2018-03-09T03:06:01,,4,,"<p>It turns out that I also needed to enable the SQL Server Browser windows service like so:</p>&#xA;&#xA;<ol>&#xA;<li>Navigate to ""Services""</li>&#xA;<li>Select ""Properties"" on ""SQL Server Browser""</li>&#xA;<li>Flip ""Start up type"" to ""Automatic""</li>&#xA;<li>Start the service</li>&#xA;</ol>&#xA;&#xA;<p>Success!</p>&#xA;",255858,"",,"",,2018-03-09T03:06:01,"","",,1,,,
49195459,2,,49142840,2018-03-09T14:01:25,,0,,"<p>It seems that this bug has been acknowledged and fixed in Electron 1.8.3:</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/11849"" rel=""nofollow noreferrer"">Windows: Unexpected titlebar for frameless and transparent windows · Issue #11849 · electron/electron · GitHub</a></p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/12033"" rel=""nofollow noreferrer"">Electron title on frameless with transparency · Issue #12033 · electron/electron · GitHub</a></p>&#xA;",,user8022331,,"",,2018-03-09T14:01:25,"","",,1,,,
49103037,2,,49059181,2018-03-05T03:20:51,,0,,"<p>async / await keyword are new syntax of JavaScript, and is not supported by Node versions older than version 7.6. Electron uses Node.js and Chrome therefore, you need to use a version of Electron that has node.js higher than 7.6.</p>&#xA;&#xA;<p>To check with Node.js version your Electron is using, run the following js code with electron.exe</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log(process.version)</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Check <a href=""https://github.com/electron/electron/releases"" rel=""nofollow noreferrer"">Electron releases</a> or <a href=""https://www.npmjs.com/package/electron"" rel=""nofollow noreferrer"">npm registry</a> on which newer version of Electron you can install.</p>&#xA;",3283113,"",,"",,2018-03-05T03:20:51,"","",,2,,,
49184852,2,,49184784,2018-03-09T00:38:34,,1,,"<p>Get rid of the if, instead put a try/catch around the <code>eval</code> like this:</p>&#xA;&#xA;<pre><code>    try {&#xA;      boxik.value = eval(boxik.value);&#xA;      $(""#vysledek"").css(""border-bottom"", ""2px solid #5faed0"");&#xA;    }&#xA;    catch (e) {&#xA;      $(""#vysledek"").css(""border-bottom"", ""2px solid #bd1515"");&#xA;    }&#xA;</code></pre>&#xA;",7361479,"",7361479,"",2018-03-09T00:55:06,2018-03-09T00:55:06,"","",,2,,,
49322431,2,,49321559,2018-03-16T13:54:54,,0,,"<p>Actually the proper quote regarding <code>failIfMajorPerformanceCaveat</code> is:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Context creation will fail if the implementation determines that the performance of the created WebGL context would be dramatically lower than that of a native application making equivalent OpenGL calls.</p>&#xA;</blockquote>&#xA;&#xA;<p>The paragraph right below the one you quoted states:</p>&#xA;&#xA;<blockquote>&#xA;  <p>To enforce this, IE has a block-list of drivers that are not safe for&#xA;  use with hardware acceleration. On these devices, WebGL will software&#xA;  rendering instead, resulting in a slower but safer experience.</p>&#xA;</blockquote>&#xA;&#xA;<p>Chromium(hence electron) has the same feature which can be disabled by setting the #ignore-gpu-blacklist flag: </p>&#xA;&#xA;<blockquote>&#xA;  <p>Overrides the built-in software rendering list and enables GPU-acceleration on unsupported system configurations.</p>&#xA;</blockquote>&#xA;&#xA;<p>Note though that these are blacklisted for <a href=""https://chromium.googlesource.com/chromium/src/gpu/+/master/config/software_rendering_list.json"" rel=""nofollow noreferrer"">reasons</a></p>&#xA;",978057,"",978057,"",2018-03-17T00:35:03,2018-03-17T00:35:03,"","",,2,,,
49157014,2,,47827835,2018-03-07T16:39:30,,3,,"<p>I can think of this two snippets, one using blob and one using the download element. external-library: <a href=""https://github.com/eligrey/FileSaver.js/"" rel=""nofollow noreferrer"">FileSave.js</a></p>&#xA;&#xA;<pre><code>// this one use FileSaver.js library&#xA;canvas.toBlob(function(blob) {&#xA;    saveAs(blob, ""pretty image.png"");&#xA;});&#xA;&#xA;// or this way using download element.&#xA;// here you can encode your image-data and then send it.&#xA;var download = document.getElementById('download');&#xA;download.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(imageData));&#xA;download.setAttribute('download', 'file.jpg');&#xA;</code></pre>&#xA;&#xA;<p>also I found this one just now, electron specific solution :&#xA;<a href=""https://stackoverflow.com/questions/38067298/saving-files-locally-with-electron?noredirect=1&amp;lq=1"">Saving files locally with electron</a></p>&#xA;",8039858,"",8039858,"",2018-03-09T19:08:40,2018-03-09T19:08:40,"","",,3,,,
49161002,2,,49072226,2018-03-07T20:53:43,,1,,"<p>From the <code>electron-packager</code> <a href=""https://github.com/electron-userland/electron-packager/blob/master/readme.md"" rel=""nofollow noreferrer"">readme.md</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Be careful not to include node_modules you don't want into your final&#xA;  app. If you put them in the devDependencies section of package.json,&#xA;  by default none of the modules related to those dependencies will be&#xA;  copied in the app bundles.</p>&#xA;</blockquote>&#xA;&#xA;<p>The angular CLI uses <code>webpack</code> internally to bundle your code. To reduce the electron package size, whatever is already bundled by webpack that's currently in your <code>dependencies</code> section of your <code>package.json</code> can go in the <code>devDependencies</code> section instead. That'll prevent <code>electron-packager</code> from bundling any <code>node_modules</code> code you aren't actually referencing due to webpack having already extracted it when bundling the output chunks in your <code>dist</code> folder.</p>&#xA;",871990,"",,"",,2018-03-07T20:53:43,"","",,3,,,
49198812,2,,49198196,2018-03-09T17:10:33,,1,,"<p>One strategy would be to keep all app specific configuration in one or more separate config files which your app loads on startup. </p>&#xA;&#xA;<p>I tend to keep such files under <code>APP_HOMEDIR/etc</code> (a nod to my Unix roots), named for each app environment you require.</p>&#xA;&#xA;<h2>Update</h2>&#xA;&#xA;<p>For Electron app development using <code>electron-builder</code>, a configuration key exists <code>extraMetadata</code> that allows you to inject values set in your <code>package.json</code> per build. </p>&#xA;&#xA;<p>See <a href=""https://www.electron.build/configuration/configuration"" rel=""nofollow noreferrer"">electron-builder configuration</a> for further info. </p>&#xA;&#xA;<p>(Thanks to the OP <a href=""https://stackoverflow.com/users/893039/harshveer-singh"">Harshveer Singh</a> for suggesting this update.)</p>&#xA;",747355,"",1416747,"",2018-04-02T01:25:58,2018-04-02T01:25:58,"","",,4,,,
58074636,2,,58073654,2019-09-24T06:55:21,,1,,"<p>Try this: <code>&lt;link rel=""stylesheet"" type=""text/css"" href=""styles.css""&gt;</code></p>&#xA;",11451522,"",,"",,2019-09-24T06:55:21,"","",,0,,,
58094602,2,,58092777,2019-09-25T08:48:52,,0,,"<p>Ok, I solved it by adding #/add at the end of the link, like this:</p>&#xA;&#xA;<pre><code>addWindow.loadURL(isDev ? &#xA;'http://localhost:3000/add' :&#xA;`file://${path.join(__dirname, '../build/index.html#/add')}`);&#xA;&#xA;</code></pre>&#xA;",11982398,"",,"",,2019-09-25T08:48:52,"","",,0,,,
58105810,2,,58103113,2019-09-25T20:01:42,,0,,"<p>Maybe someone needs that, I found the solution:</p>&#xA;&#xA;<p>You should set your additional folders/files to <code>package.json</code> as <code>extraResources</code> under the <code>build</code> object:</p>&#xA;&#xA;<pre><code>""extraResources"": [&#xA;      {&#xA;        ""from"": ""node_modules/regedit/vbs"",&#xA;        ""to"": ""regedit/vbs"",&#xA;        ""filter"": [&#xA;          ""**/*""&#xA;        ]&#xA;      },&#xA;      {&#xA;        ""from"": ""app/assets"",&#xA;        ""to"": ""../app/assets"",&#xA;        ""filter"": [&#xA;          ""**/*""&#xA;        ]&#xA;      },&#xA;      {&#xA;        ""from"": ""app/temps"",&#xA;        ""to"": ""../app/temps"",&#xA;        ""filter"": [&#xA;          ""**/*""&#xA;        ]&#xA;      }&#xA;    ]&#xA;</code></pre>&#xA;",284199,"",,"",,2019-09-25T20:01:42,"","",,0,,,
58125526,2,,58110378,2019-09-26T22:31:41,,2,,"<p>My solution to this was:</p>&#xA;&#xA;<ol>&#xA;<li>Get a refresh token via email/password (long-lived ~1 yr)</li>&#xA;<li>Get an id_token with the refresh token (short-lived)</li>&#xA;<li>Get a custom token with an id_token (short-lived: ~1 hour)</li>&#xA;<li>Sign in with custom token</li>&#xA;<li>Save refresh token locally - never share it</li>&#xA;</ol>&#xA;&#xA;<p>So, something like this:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>&#xA;import Store from 'electron-store';&#xA;import firebase from 'firebase';&#xA;import * as request from 'request-promise';&#xA;&#xA;const store = new Store({ name: 'config' });&#xA;&#xA;function logout() {&#xA;  const user = firebase.auth().currentUser;&#xA;  store.delete('refresh_token');&#xA;&#xA;  if (user) {&#xA;    return firebase.auth().signOut();&#xA;  }&#xA;}&#xA;&#xA;// https://firebase.google.com/docs/reference/rest/auth#section-create-email-password&#xA;function signup(email, password) {&#xA;  return request&#xA;    .post({&#xA;      headers: { 'content-type': 'application/x-www-form-urlencoded' },&#xA;      url: `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${firebase_config['apiKey']}`,&#xA;      body: `email=${email}&amp;password=${password}&amp;returnSecureToken=true`,&#xA;      json: true,&#xA;    })&#xA;    .then((res) =&gt; {&#xA;      store.set({ refresh_token: res.refreshToken });&#xA;      return login_with_id_token(res.idToken);&#xA;    });&#xA;}&#xA;&#xA;// Generates a refresh_token that we later use &amp; save&#xA;async function login_with_email(email: string, password: string) {&#xA;  const res = await request.post({&#xA;    headers: { 'content-type': 'application/x-www-form-urlencoded' },&#xA;    url: `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${firebase_config['apiKey']}`,&#xA;    body: `email=${email}&amp;password=${password}&amp;returnSecureToken=true`,&#xA;    json: true,&#xA;  });&#xA;&#xA;  const refresh_token = res.refreshToken;&#xA;  store.set({ refresh_token });&#xA;  console.log(store.path);&#xA;  return login_with_refresh_token(refresh_token);&#xA;}&#xA;&#xA;/**&#xA; * Needed to acquire a refresh_token&#xA; * @param refresh_token string&#xA; */&#xA;function get_id_token(refresh_token) {&#xA;  return request.post({&#xA;    headers: { 'content-type': 'application/x-www-form-urlencoded' },&#xA;    url: `https://securetoken.googleapis.com/v1/token?key=${firebase_config['apiKey']}`,&#xA;    body: `grant_type=refresh_token&amp;refresh_token=${refresh_token}`,&#xA;    json: true,&#xA;  });&#xA;}&#xA;&#xA;/**&#xA; * Generates a custom token we can use to sign in given an id_token&#xA; * @param id_token string&#xA; */&#xA;function get_custom_token(id_token) {&#xA;  return request.get({&#xA;    url: `https://us-central1-${firebase_config['projectId']}.cloudfunctions.net/create_custom_token?id_token=${id_token}`,&#xA;    json: true,&#xA;  });&#xA;}&#xA;&#xA;function login_with_id_token(id_token) {&#xA;  if (id_token) {&#xA;    return get_custom_token(id_token).then((token) =&gt; {&#xA;      // console.log(`Retrieved custom token: ${custom_token}`);&#xA;      return firebase.auth().signInWithCustomToken(token);&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;/**&#xA; * If token is null, it attempts to read it from disk otherwise&#xA; * it will use the one supplied to login&#xA; * @param token string || null&#xA; */&#xA;async function login_with_refresh_token(token = null) {&#xA;  let id_token = null;&#xA;  let refresh_token = token;&#xA;&#xA;  if (!refresh_token) {&#xA;    refresh_token = store.get('refresh_token');&#xA;    store.get('refresh_token', null);&#xA;    // console.log('Using a cached refresh token...');&#xA;  }&#xA;&#xA;  if (refresh_token) {&#xA;    const res = await get_id_token(refresh_token);&#xA;    if (res) {&#xA;      id_token = res['id_token'];&#xA;      return login_with_id_token(id_token);&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;// Purposely attempt to login without a refresh_token in case it's on disk&#xA;function attempt_login() {&#xA;  return login_with_refresh_token(null);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Firebase cloud function:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>exports.create_custom_token = functions.https.onRequest(async (req, res) =&gt; {&#xA;  const id_token = req.query.id_token;&#xA;  const user = await admin.auth().verifyIdToken(id_token);&#xA;  if (user) {&#xA;    const custom_token = await admin.auth().createCustomToken(user.uid);&#xA;    res.setHeader('Content-Type', 'application/json');&#xA;    res.status(200).send(custom_token);&#xA;  } else {&#xA;    res.sendStatus(500);&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",10615993,"",,"",,2019-09-26T22:31:41,"","",,0,,,
58140393,2,,58088166,2019-09-27T19:23:13,,0,,"<p>It appears I have been suffering from an unbelievable coincidence, but I have now resolved the issue.</p>&#xA;&#xA;<p>Prior to when I started having the problem, I had been trying bootstrap search bar styles.  The very last bootstrap style I tried was one which was EXACTLY the same as the material.css text input style, and I had even changed the bootstrap style all on my own to have exactly the same 'active' color as material.css uses by default.</p>&#xA;&#xA;<p>When I took away the bootstrap to try styling on my own, nothing happened... The input stayed exactly the same.  I assumed that this obviously meant that there was a cache somewhere.  However, it turned out that material.css just had <em>exactly</em> the same style I had created with bootstrap, and material.css doesn't require you to add any special class labels to elements before styling them so I never suspected.  Removing material.css immediately fixed the problem.</p>&#xA;&#xA;<p>Definitely the weirdest bug coincidence I have ever experienced by orders of magnitude.</p>&#xA;",6381316,"",,"",,2019-09-27T19:23:13,"","",,0,,,
58152869,2,,58043597,2019-09-29T06:32:35,,1,,"<p>Couldn't find a way to trigger custom scripts during install, so I ended up bundling the dependencies' executables as assets. When using Asar one must be careful to make sure that these dependencies are unpacked.</p>&#xA;&#xA;<p>To get the native dependencies in a portable format one can use The Unarchiver on MacOS to explore the contents of MSI and NSIS installers. 7-Zip 15.05 can also open these.</p>&#xA;",10952025,"",10952025,"",2019-09-29T18:48:53,2019-09-29T18:48:53,"","",,0,,,
58162756,2,,58156367,2019-09-30T06:48:21,,0,,"<p>I finally found a solution to this particular issue: <strong>Window.postMessage</strong>.  This is an HTML5 technology that allows for message passing between separate windows with cross-origins, <em>including iframes</em>.  Amazingly it works fine with the ""file"" protocol (ie. no webserver), so it works great for iframes in Electron.</p>&#xA;&#xA;<p>Here is a working example.  I have two files: parent.html and child.html.  The former has an iframe that contains the latter:</p>&#xA;&#xA;<p><strong>parent.html</strong></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;html&gt;&#xD;&#xA;	&lt;body&gt;&#xD;&#xA;		&lt;iframe id='f' src='child.html'&gt;&lt;/iframe&gt;&lt;br/&gt; &lt;!-- First of two differences --&gt;&#xD;&#xA;		&lt;button id='b'&gt;send&lt;/button&gt;&lt;br/&gt;&#xD;&#xA;		&lt;div id='o'&gt;&lt;/div&gt;&#xD;&#xA;	&lt;/body&gt;&#xD;&#xA;&lt;/html&gt;&#xD;&#xA;&lt;script&gt;&#xD;&#xA;	function receiveMessage(evt)&#xD;&#xA;	{&#xD;&#xA;		document.getElementById('o').innerHTML += evt.data + ""&lt;br/&gt;"";&#xD;&#xA;	}&#xD;&#xA;	window.addEventListener(""message"", receiveMessage, false);&#xD;&#xA;&#xD;&#xA;	document.getElementById('b').onclick = function()&#xD;&#xA;	{&#xD;&#xA;		// The second of two differences between parent and child is below&#xD;&#xA;		document.getElementById('f').contentWindow.postMessage(""parent to child"", ""*"");&#xD;&#xA;	}&#xD;&#xA;&lt;/script&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p><strong>child.html</strong></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;html&gt;&#xD;&#xA;	&lt;body&gt;&#xD;&#xA;		&lt;!-- The first of two differences between parent and child is here --&gt;&#xD;&#xA;		&lt;button id='b'&gt;send&lt;/button&gt;&lt;br/&gt;&#xD;&#xA;		&lt;div id='o'&gt;&lt;/div&gt;&#xD;&#xA;	&lt;/body&gt;&#xD;&#xA;&lt;/html&gt;&#xD;&#xA;&lt;script&gt;&#xD;&#xA;	function receiveMessage(evt)&#xD;&#xA;	{&#xD;&#xA;		document.getElementById('o').innerHTML += evt.data + ""&lt;br/&gt;"";&#xD;&#xA;	}&#xD;&#xA;	window.addEventListener(""message"", receiveMessage, false);&#xD;&#xA;&#xD;&#xA;	document.getElementById('b').onclick = function()&#xD;&#xA;	{&#xD;&#xA;		// The second of two differences between parent and child is below&#xD;&#xA;		window.parent.postMessage(""child to parent"", ""*"");&#xD;&#xA;	}&#xD;&#xA;&lt;/script&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4751469,"",4751469,"",2019-09-30T16:12:02,2019-09-30T16:12:02,"","",,0,,,
58165249,2,,57080935,2019-09-30T09:40:59,,0,,"<p>Solved the issues, the printer was actually to blame. Bought a new Bixolon SRP-150.&#xA;Word to the wise: pay attention this sentence from the docs ""When silent is set to true, Electron will pick the system's default printer if deviceName is empty and the default settings for printing.""</p>&#xA;&#xA;<p>Setting only contents.print({ silent: true }), will make your life a whole lot easier. Using default printer setting will ensure your webContents print properly no matter what printer is connected to the machine.</p>&#xA;",11732834,"",,"",,2019-09-30T09:40:59,"","",,0,,,
58203151,2,,58190832,2019-10-02T14:02:43,,1,,"<p>Because I had already been fixing numerous issues related to the Angular 2-version jump, I had overlooked a console error (""Cannot read property 'eventNames' of undefined"") which I at first thought was unrelated, but, duh, noticed zone.js in the stack.</p>&#xA;&#xA;<p>Did some more research and found that this was a known issue with zone.js version 0.9.1 and Electron (See <a href=""https://github.com/angular/angular/issues/31626"" rel=""nofollow noreferrer"">https://github.com/angular/angular/issues/31626</a>)</p>&#xA;&#xA;<p>I was only on that version because of a parallel project (non Electron) which was working fine and was on 0.9.1 so I felt like keeping them in sync for some reason, but after updating to 0.10.2 the <code>eventNames</code> error went away, and change detection works normally. It was all due to some stub function that returned <code>undefined</code> instead of the object with <code>eventNames</code>.</p>&#xA;&#xA;<p>Thanks for reading; updating to latest worked, and fortunately the issue was fixed just a couple weeks ago.</p>&#xA;",403959,"",,"",,2019-10-02T14:02:43,"","",,0,,,
58211368,2,,58210650,2019-10-03T01:55:39,,1,,"<pre><code> mainWindow = new BrowserWindow({&#xA;    width: 1280,&#xA;    height: 1080,&#xA;    webPreferences: {&#xA;      preload: path.join(__dirname, 'preload.js'),&#xA;      webviewTag: true&#xA;    },&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>You have to enable webviewTag inside webPreferences when making your browser window.</p>&#xA;",214124,"",,"",,2019-10-03T01:55:39,"","",,0,,,
58217962,2,,58213258,2019-10-03T11:12:49,,4,,"<p>You cannot use electron executable with Puppeteer directly without some workarounds and flag changes. They have tons of differences in the API. Specially electron doesn't have all of the <strong>chrome.*</strong> API which is needed for chromium browser to work properly, many flags still doesn't have proper replacements such as <a href=""https://github.com/electron/electron/issues/228"" rel=""nofollow noreferrer"">the headless flag</a>. </p>&#xA;&#xA;<p>Below you will see two ways to do it. However you need to make sure of two points,</p>&#xA;&#xA;<ul>&#xA;<li>Make sure the puppeteer is connected before the app is initiated.</li>&#xA;<li>Make sure you get the correct version puppeteer or puppeteer-core for the version of Chrome that is running in Electron!</li>&#xA;</ul>&#xA;&#xA;<h1>Use <code>puppeteer-in-electron</code></h1>&#xA;&#xA;<p>There are lots of workarounds, but most recently there is a <a href=""https://www.npmjs.com/package/puppeteer-in-electron"" rel=""nofollow noreferrer"">puppeteer-in-electron</a> package which allows you to run puppeteer within electron app using the electron.</p>&#xA;&#xA;<p>First, install the dependencies,</p>&#xA;&#xA;<pre><code>npm install puppeteer-in-electron puppeteer-core electron&#xA;</code></pre>&#xA;&#xA;<p>Then run it. </p>&#xA;&#xA;<pre><code>import {BrowserWindow, app} from ""electron"";&#xA;import pie from ""puppeteer-in-electron"";&#xA;import puppeteer from ""puppeteer-core"";&#xA;&#xA;const main = async () =&gt; {&#xA;  const browser = await pie.connect(app, puppeteer);&#xA;&#xA;  const window = new BrowserWindow();&#xA;  const url = ""https://example.com/"";&#xA;  await window.loadURL(url);&#xA;&#xA;  const page = await pie.getPage(browser, window);&#xA;  console.log(page.url());&#xA;  window.destroy();&#xA;};&#xA;&#xA;main();&#xA;</code></pre>&#xA;&#xA;<h1>Get the debugging port and connect to it</h1>&#xA;&#xA;<p>The another way is to get the remote-debugging-port of the electron app and connect to it. This solution is shared by <a href=""https://discuss.atom.io/t/solved-control-automate-an-electron-application-with-puppeteer/64126/8"" rel=""nofollow noreferrer"">trusktr on electron forum</a>.</p>&#xA;&#xA;<pre><code>import {app, BrowserWindow, ...} from ""electron""&#xA;import fetch from 'node-fetch'&#xA;&#xA;import * as puppeteer from 'puppeteer'&#xA;&#xA;app.commandLine.appendSwitch('remote-debugging-port', '8315')&#xA;&#xA;async function test() {&#xA;    const response = await fetch(`http://localhost:8315/json/versions/list?t=${Math.random()}`)&#xA;    const debugEndpoints = await response.json()&#xA;&#xA;    let webSocketDebuggerUrl = debugEndpoints['webSocketDebuggerUrl ']&#xA;&#xA;    const browser = await puppeteer.connect({&#xA;        browserWSEndpoint: webSocketDebuggerUrl&#xA;    })&#xA;&#xA;    // use puppeteer APIs now!&#xA;}&#xA;&#xA;// ... make your window, etc, the usual, and then: ...&#xA;&#xA;  // wait for the window to open/load, then connect Puppeteer to it:&#xA;  mainWindow.webContents.on(""did-finish-load"", () =&gt; { &#xA;    test()&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>Both solution above uses <strong>webSocketDebuggerUrl</strong> to resolve the issue. </p>&#xA;&#xA;<h2>Extra</h2>&#xA;&#xA;<p>Adding this note because most people uses electron to bundle the app.</p>&#xA;&#xA;<p>If you want to build the puppeteer-core and puppeteer-in-electron, you need to use <code>hazardous</code> and <code>electron-builder</code> to make sure <code>get-port-cli</code> works.</p>&#xA;&#xA;<p>Add hazardous on top of main.js</p>&#xA;&#xA;<pre><code>// main.js&#xA;require ('hazardous');&#xA;</code></pre>&#xA;&#xA;<p>Make sure the get-port-cli script is unpacked, add the following on package.json</p>&#xA;&#xA;<pre><code>""build"": {&#xA;  ""asarUnpack"": ""node_modules/get-port-cli""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Result after building:</p>&#xA;&#xA;<p><img src=""https://i.imgur.com/S10HmOt.png"" alt=""""></p>&#xA;",6161265,"",6161265,"",2019-10-03T22:35:49,2019-10-03T22:35:49,"","",,0,,,
58248251,2,,58246345,2019-10-05T12:25:05,,1,,"<p>There are many libraries.&#xA;Checkout&#xA;<a href=""https://github.com/jakubfiala/atrament.js"" rel=""nofollow noreferrer"">https://github.com/jakubfiala/atrament.js</a> (Tiny JS library for beautiful drawing and handwriting on the HTML Canvas).</p>&#xA;",12167785,"",,"",,2019-10-05T12:25:05,"","",,0,,,
58251493,2,,58248424,2019-10-05T19:09:30,,0,,"<p>Achieved the behavior I was looking for with the below</p>&#xA;&#xA;<pre><code>const webpackDevServer = require('webpack-dev-server')&#xA;&#xA;const webpack = require('webpack')&#xA;&#xA;const electroner = require('electroner')&#xA;&#xA;const path = require('path')&#xA;&#xA;const packageJson = require('./package')&#xA;&#xA;const config = require('./webpack.config')&#xA;&#xA;let window&#xA;&#xA;let server&#xA;&#xA;const options = {&#xA;  contentBase: './dist',&#xA;  hot: true,&#xA;  host: 'localhost',&#xA;  after: function (app, server) {&#xA;    window = electroner(path.resolve(__dirname, packageJson.main), {&#xA;      'enable-transparent-visuals': true,&#xA;      'disable-cpu': true&#xA;    })&#xA;&#xA;    window.on('close', () =&gt; {&#xA;      server.close()&#xA;    })&#xA;  },&#xA;  port: 3000,&#xA;  overlay: true,&#xA;  stats: 'errors-only',&#xA;  writeToDisk: true&#xA;}&#xA;&#xA;let done = false&#xA;&#xA;function initCompiler () {&#xA;  done = false&#xA;&#xA;  webpackDevServer.addDevServerEntrypoints(config, options)&#xA;&#xA;  const compiler = webpack(config, (error, stats) =&gt; {&#xA;    if (error) {&#xA;      console.error(error.stack || error)&#xA;      if (error.details) {&#xA;        console.error(error.details)&#xA;      }&#xA;      return&#xA;    }&#xA;&#xA;    const info = stats.toJson()&#xA;&#xA;    if (stats.hasErrors()) {&#xA;      console.error(info.errors)&#xA;    }&#xA;&#xA;    if (stats.hasWarnings()) {&#xA;      console.warn(info.warnings)&#xA;    }&#xA;&#xA;    done = true&#xA;  })&#xA;&#xA;  let check&#xA;&#xA;  let start = () =&gt; {&#xA;    if (!done) {&#xA;      check = setTimeout(start, 100)&#xA;      return&#xA;    }&#xA;&#xA;    server = new webpackDevServer(compiler, options)&#xA;&#xA;    server.listen(3000, 'localhost', () =&gt; {&#xA;      console.log('dev server listening on port 3000')&#xA;    })&#xA;  }&#xA;&#xA;  setTimeout(start, 100)&#xA;&#xA;  let files = []&#xA;&#xA;  compiler.hooks.watchRun.tap('MainProcess', compiler =&gt; {&#xA;    files = Object.keys(compiler.watchFileSystem.watcher.mtimes).map(file =&gt; {&#xA;      return path.parse(file).dir&#xA;    })&#xA;  })&#xA;&#xA;  compiler.hooks.done.tap('MainProcess', () =&gt; {&#xA;    const search = path.resolve(__dirname, 'src', 'main')&#xA;&#xA;    if (files.length &amp;&amp; files.filter(file =&gt; file.indexOf(search) &gt; -1).length) {&#xA;      files = []&#xA;&#xA;      window.kill()&#xA;&#xA;      server.close()&#xA;&#xA;      initCompiler()&#xA;    }&#xA;  })&#xA;}&#xA;&#xA;initCompiler()&#xA;&#xA;</code></pre>&#xA;&#xA;<h2>Edit</h2>&#xA;&#xA;<p>My previous answer had some issues. On compile, if the main.js file wasn't already present, it would error and stop the compilation and not start the app.</p>&#xA;&#xA;<p>The edit ensures that the compile is first completed before starting the server and then start the electron app.</p>&#xA;",2931914,"",2931914,"",2020-01-22T08:52:08,2020-01-22T08:52:08,"","",,0,,,
58264652,2,,54516256,2019-10-07T06:50:01,,0,,<p>Solved it by updating node-opcua to 2.1.9 and electron to 6.0.11</p>&#xA;,3194003,"",,"",,2019-10-07T06:50:01,"","",,0,,,
58273074,2,,47688943,2019-10-07T15:51:50,,1,,"<p>Finally found the solution. You can grant access for the app. Steps:</p>&#xA;&#xA;<ol>&#xA;<li>Open the <code>Keychain Access</code> app</li>&#xA;<li>Find the certification in the <code>System</code> keychain</li>&#xA;<li>Expand the cert and double click <code>private key</code></li>&#xA;<li>In the <code>Access Control</code> tab, check <code>Allow all applications to access this item</code>, or add the app to the list</li>&#xA;<li>Save Changes, Done!</li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/Z3ywx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Z3ywx.png"" alt=""enter image description here""></a></p>&#xA;",1289394,"",,"",,2019-10-07T15:51:50,"","",,0,,,
58081405,2,,58081062,2019-09-24T13:27:11,,0,,"<p>This is because the callback is non-blocking and asynchronous and gets called some indeterminate time in the future and does not execute sequentially from top to bottom. </p>&#xA;&#xA;<p>If you add extra logging, you can see what happens:</p>&#xA;&#xA;<pre><code>var libObj;&#xA;&#xA;console.log(""before"");&#xA;fs.readFile('library.json', 'utf8', function(err, data) {&#xA;    console.log(""callback called"");&#xA;    if (err){&#xA;        console.log(err);&#xA;    } else {&#xA;        libObj = JSON.parse(data);&#xA;        console.log(libObj);&#xA;    }&#xA;});&#xA;console.log(""after"");&#xA;</code></pre>&#xA;&#xA;<p>This will product this output:</p>&#xA;&#xA;<pre><code>before&#xA;after&#xA;callback called&#xA;your data here&#xA;</code></pre>&#xA;&#xA;<p>So, you can see the assignment works just fine, it just happens after you were trying to use the variable.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>The usual way you solve this is you use the result of the <code>fs.readFile()</code> inside the callback or you call some function from within that callback.</p>&#xA;&#xA;<pre><code>fs.readFile('library.json', 'utf8', function(err, data) {&#xA;    if (err){&#xA;        console.log(err);&#xA;    } else {&#xA;        console.log(data);&#xA;        // use data here&#xA;        // or call a function and pass it the data here&#xA;        someFunc(data);&#xA;    }&#xA;});&#xA;// don't try to use data here, it's not available yet&#xA;</code></pre>&#xA;",816620,"",816620,"",2019-09-24T13:33:25,2019-09-24T13:33:25,"","",,1,,,
58110070,2,,58103656,2019-09-26T05:24:59,,1,,"<p>tl;dr You can and it is not worth the effort. Just pack your source into a <code>asar</code> file, it keeps most people away from it.</p>&#xA;&#xA;<p>Long awnser:</p>&#xA;&#xA;<ul>&#xA;<li>Use the <code>asar</code> option when building your app.</li>&#xA;<li>Obfuscating the code with a uglyfier.</li>&#xA;<li>Use WASM</li>&#xA;<li>Language bindings to grab your data from a compiled format&#xA;&#xA;<ul>&#xA;<li>neonjs for Rust</li>&#xA;<li>edge-js for C#</li>&#xA;<li>N-API, NAN for C/C++</li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p>Otherwise your files are scripts, all these steps only slow down a attacker (Tactic of many defenses), but they will not prevent them from accessing them. The devTools are fairly easy to get opened and people will be able to read the code in some way, shape or form. And if someone gets your Obfuscated code it is simple to reconstruct what is happening (see here for reference: <a href=""https://www.youtube.com/watch?v=y6Uzinz3DRU"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=y6Uzinz3DRU</a>)</p>&#xA;&#xA;<p>If you want to protect yourself from code manipulation, there are better ways to do it. Like Hashing, Context Isolation etc. electron has a whole chapter on the matter.</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/tutorial/security.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/tutorial/security.md</a></p>&#xA;",11613455,"",,"",,2019-09-26T05:24:59,"","",,1,,,
58164407,2,,58164188,2019-09-30T08:48:45,,1,,"<p>To access <code>app</code> from the renderer process, you need to get it through <code>remote</code>.</p>&#xA;&#xA;<p>So instead of :</p>&#xA;&#xA;<pre><code>const {app} = required('electron');&#xA;</code></pre>&#xA;&#xA;<p>Use </p>&#xA;&#xA;<pre><code>const {remote} = required('electron');&#xA;const {app} = remote; // or `const app = remote.app`&#xA;</code></pre>&#xA;",3670132,"",,"",,2019-09-30T08:48:45,"","",,1,,,
58248764,2,,58161670,2019-10-05T13:28:20,,1,,"<p>You can make use of preload argument in webPreferences while creating the main BrowserWindow.&#xA;In the main.js,</p>&#xA;&#xA;<pre><code>  mainWindow = new BrowserWindow({&#xA;    webPreferences: {&#xA;      nodeIntegration: false,&#xA;      preload: path.join(__dirname, 'preload.js')&#xA;    }&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>In the preload.js</p>&#xA;&#xA;<pre><code>   window.notify= function notify(msg) {&#xA;   return require('node-notifier').notify(msg);&#xA;   };&#xA;</code></pre>&#xA;&#xA;<p>In this way, you can avoid ejecting the webpack &amp; access the electron/node function in your react project.</p>&#xA;",12167785,"",,"",,2019-10-05T13:28:20,"","",,1,,,
58248810,2,,58059092,2019-10-05T13:33:37,,1,,"<p>You can make use of preload argument in webPreferences while creating the main BrowserWindow.&#xA;In the main.js,</p>&#xA;&#xA;<pre><code>  mainWindow = new BrowserWindow({&#xA;    webPreferences: {&#xA;      nodeIntegration: false,&#xA;      preload: path.join(__dirname, 'preload.js')&#xA;    }&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>In the preload.js</p>&#xA;&#xA;<pre><code>    const remote = require(""electron"").remote;&#xA;    window.appQuit = function() {&#xA;      remote.app.exit(0);&#xA;    };&#xA;</code></pre>&#xA;",12167785,"",,"",,2019-10-05T13:33:37,"","",,1,,,
58268478,2,,58247238,2019-10-07T11:15:42,,0,,"<p>user <a href=""https://stackoverflow.com/users/840992/no-grabbing"">No Grabbing</a> pointed me precisely in the right direction! Thank you!</p>&#xA;&#xA;<p>I was looking with the wrong search parameters: ""Tray"" seems to be the term i was missing: </p>&#xA;&#xA;<p>Electron actually does already provide an API for that and after testing it i can say: it works out of the box: <a href=""https://electronjs.org/docs/api/tray"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/tray</a></p>&#xA;",2602592,"",,"",,2019-10-07T11:15:42,"","",,1,,,
58075032,2,,58068549,2019-09-24T07:20:29,,0,,"<p>I think rxdb will work for your approach.&#xA;You can store data locally and also replicate data from the server to the client.&#xA;If you want to do queries over the full data-set, you can replicate the local store and the server-store into a local in-memory collection from rxdb and run queries there.</p>&#xA;&#xA;<p>DISCLAIMER: I'm the author of rxdb</p>&#xA;",3443137,"",,"",,2019-09-24T07:20:29,"","",,2,,,
58158157,2,,58017490,2019-09-29T18:40:14,,1,,"<p><sub><em>Posted on behalf of OP</em></sub></p>&#xA;&#xA;<p>Use an older electron version (4.2.6). Newer electron versions (newer than 4.2.6) will not load flash content.</p>&#xA;&#xA;<p>Edit: In Linux, latest electron from 4.2.x series will work with flash player. In windows, latest version works normally</p>&#xA;",1839439,"",11286758,"",2020-01-27T14:32:52,2020-01-27T14:32:52,"","",,6,,,2019-09-29T18:40:14
47498677,2,,45828866,2017-11-26T16:57:00,,3,,"<p>When setting up the browser window in your main.js file, set the vibrancy  option to one of electrons options.</p>&#xA;&#xA;<p>A snippet from <code>electrons documents</code> below</p>&#xA;&#xA;<pre><code>""vibrancy String (optional) - Add a type of vibrancy effect to the window, only on macOS. &#xA;Can be appearance-based, light, dark, titlebar, selection, menu, popover, sidebar, medium-light or ultra-dark.""&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/arkenthera/electron-vibrancy/blob/master/README.md"" rel=""nofollow noreferrer"">https://github.com/arkenthera/electron-vibrancy/blob/master/README.md</a></p>&#xA;&#xA;<p>example js code if using the ultra-dark theme</p>&#xA;&#xA;<p>let mainWindow;</p>&#xA;&#xA;<pre><code>const createWindow = () =&gt; {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    vibrancy: 'ultra-dark',&#xA;  });&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>After setting up the main window's background with the vibrancy set then simply split the window up with a sidebar and the main content. Setting the background color of main to any color you wish leaving the sidebar still with its OSX style transparency </p>&#xA;&#xA;<p>I hope this helps</p>&#xA;",9010992,"",5838627,"",2017-11-26T18:35:27,2017-11-26T18:35:27,"","",,0,,,
47499222,2,,37913193,2017-11-26T17:54:20,,0,,<p>The problem is about the hardware acceleration on linux distributions. The solution to fix it:</p>&#xA;&#xA;<pre><code>if (process.platform === 'linux') {&#xA;    app.disableHardwareAcceleration();&#xA;}&#xA;</code></pre>&#xA;,3671417,"",,"",,2017-11-26T17:54:20,"","",,0,,,
47511045,2,,47499516,2017-11-27T12:29:17,,0,,<p>So I came up with the solution by myself. If in app/main.js I replace</p>&#xA;&#xA;<pre><code>components: { App }&#xA;</code></pre>&#xA;&#xA;<p>with</p>&#xA;&#xA;<pre><code>render: h =&gt; h(App)&#xA;</code></pre>&#xA;&#xA;<p>it works.</p>&#xA;&#xA;<p>If someone knows why please let me know.</p>&#xA;,9011358,"",,"",,2017-11-27T12:29:17,"","",,0,,,
47531631,2,,47407681,2017-11-28T12:27:46,,0,,"<p>I have created a div where I am showing and hiding a dive on setting image click. To call browserWindow instance in renderer side you can use remote to call the instance like:</p>&#xA;&#xA;<pre><code> remote.getCurrentWindow().setPosition(x, y);&#xA;</code></pre>&#xA;",6940664,"",,"",,2017-11-28T12:27:46,"","",,0,,,
47539719,2,,39230473,2017-11-28T19:45:41,,1,,"<p>There's nothing available out of the box with Electron but there is a Node package available here: <a href=""https://www.npmjs.com/package/electron-push-receiver"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/electron-push-receiver</a></p>&#xA;&#xA;<p>There's no boilerplate code available for using this package yet, but there is an open issue in the associated GitHub project requesting a working example: <a href=""https://github.com/MatthieuLemoine/electron-push-receiver/issues/8"" rel=""nofollow noreferrer"">https://github.com/MatthieuLemoine/electron-push-receiver/issues/8</a></p>&#xA;&#xA;<p>Also, you can use <a href=""https://pushy.me/docs/additional-platforms/electron"" rel=""nofollow noreferrer"">Pushy (paid product)</a> to send push notifications to your Electron app.</p>&#xA;",642187,"",1123355,"",2019-12-03T22:35:30,2019-12-03T22:35:30,"","",,0,,,
47557344,2,,47516875,2017-11-29T16:24:03,,0,,"<p>I have found the solution. Posting here for anybody's else need.</p>&#xA;&#xA;<p>It is just a matter to setup a global function in a preload script, so that the web application could access it. In the main electron script (main.js, or index.js):</p>&#xA;&#xA;<pre><code>function createWindow () {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({&#xA;    width: 800, &#xA;    height: 600,&#xA;    webPreferences: {&#xA;        nodeIntegration: false,&#xA;        preload: path.join(__dirname, 'preload.js')&#xA;    }&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>Create a preload.js script with this content:</p>&#xA;&#xA;<pre><code>const {shell} = require('electron')&#xA;var _process = process;&#xA;process.once('loaded', function() {&#xA;  global.goto_Link = function(linkurl){&#xA;        shell.openExternal(linkurl)&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>you can now call the global function:</p>&#xA;&#xA;<pre><code>//&#xA;goto_Link(""https://www.google.com"");&#xA;//&#xA;</code></pre>&#xA;",4454021,"",4454021,"",2017-11-30T18:06:55,2017-11-30T18:06:55,"","",,0,,,
47563522,2,,47240857,2017-11-29T23:23:49,,1,,"<p>I ended up using the <a href=""https://pubkey.github.io/rxdb/rx-database.html#adapter"" rel=""nofollow noreferrer"">websql adapter</a> which apparently stores information between application loads and dropped <a href=""https://www.npmjs.com/package/express-pouchdb"" rel=""nofollow noreferrer"">express-pouchdb</a>.</p>&#xA;",1994708,"",,"",,2017-11-29T23:23:49,"","",,0,,,
47614528,2,,47577612,2017-12-03T01:54:19,,3,,"<p>The culprit is using the <code>path.resolve</code>, you should use<code>path.join(__dirname, 'your/path/here')</code>, so it can access the asar file.</p>&#xA;",3387602,"",,"",,2017-12-03T01:54:19,"","",,0,,,
47616032,2,,47602675,2017-12-03T06:50:57,,1,,"<p>Try setting this configuration</p>&#xA;&#xA;<pre><code>play.filters.cors.serveForbiddenOrigins = true&#xA;</code></pre>&#xA;&#xA;<p>Actually, there are some issues with using Play with  Electron Apps, because when they request something the origin is set as ""file"" and by default Play don't allow this.</p>&#xA;&#xA;<p>See these links for reference.</p>&#xA;&#xA;<ol>&#xA;<li><a href=""https://github.com/Hub-of-all-Things/HAT2.0/pull/39"" rel=""nofollow noreferrer"">https://github.com/Hub-of-all-Things/HAT2.0/pull/39</a></li>&#xA;<li><a href=""https://github.com/playframework/playframework/issues/8037"" rel=""nofollow noreferrer"">https://github.com/playframework/playframework/issues/8037</a></li>&#xA;<li><a href=""https://github.com/playframework/playframework/pull/7341"" rel=""nofollow noreferrer"">https://github.com/playframework/playframework/pull/7341</a></li>&#xA;</ol>&#xA;&#xA;<p>Hope this helps!</p>&#xA;",3445194,"",,"",,2017-12-03T06:50:57,"","",,0,,,
47618872,2,,47486881,2017-12-03T13:30:06,,0,,"<p>The idea of installing node via deb dependency is not good due to postinstallation issues on windows - it is not so easy to write dependency to install on windows. Instead I downloaded node binaries and I packaged node binaries to asar package.&#xA;I used files option to package only binaries for platform building is running on:</p>&#xA;&#xA;<p>package.json:</p>&#xA;&#xA;<pre><code>""build"": {&#xA;    ""asarUnpack"": [&#xA;      ""**/*""&#xA;    ],&#xA;    ""files"": [&#xA;      ""!binaries"",&#xA;      ""binaries/${os}/${arch}/node"",&#xA;      ""src"",&#xA;      ""*.html"",&#xA;      ""*.js"",&#xA;      ""*.tpl"",&#xA;      ""*.sh"",&#xA;      ""*.json"",&#xA;      ""*.md"",&#xA;      ""*.lock""&#xA;    ],&#xA;</code></pre>&#xA;&#xA;<p>Thanks to asarUnpack option I unpack the asar package and I'm able to access node binary on filesystem. Then in main process index.js I'm constructing node path this way:</p>&#xA;&#xA;<pre><code>const nodePath = path.join(&#xA;    process.resourcesPath,&#xA;    ""app.asar.unpacked"",&#xA;    'binaries',&#xA;    platform == ""win32"" ? ""win"" : platform,&#xA;    arch,&#xA;    ""node""&#xA;)&#xA;&#xA;const productionWebpackServerStartPathArgs = [`${process.resourcesPath}/app.asar.unpacked/node_modules/webpack-dev-server/bin/webpack-dev-server.js`, '--config', `${process.resourcesPath}/app.asar.unpacked/webpack.config.js`];&#xA;let webpack_dev_server_cmd = crossSpawn(nodePath, productionWebpackServerStartPathArgs );&#xA;</code></pre>&#xA;",6700548,"",,"",,2017-12-03T13:30:06,"","",,0,,,
47622563,2,,47621090,2017-12-03T19:48:17,,0,,"<p>This error was caused by an update issue regarding the require syntax. The solution is the following:</p>&#xA;&#xA;<pre><code>// use these lines instead to set up dialog instead of the remote package.&#xA;    const remote = require('electron').remote;&#xA;    const dialog = remote.dialog;&#xA;</code></pre>&#xA;&#xA;<p>Fix courtesy of <a href=""https://github.com/m1ga/ti-create/issues/12#issuecomment-278318337"" rel=""nofollow noreferrer"">this Github comment</a></p>&#xA;",6095037,"",,"",,2017-12-03T19:48:17,"","",,0,,,
47630669,2,,47629987,2017-12-04T09:56:24,,1,,"<p>when we change anything out of angular, angular not take account of it. Try use ngZone (I don't know if work)</p>&#xA;&#xA;<pre><code>export class MyComponent {&#xA;    private show = false;&#xA;    constructor(private ngZone:NgZone) //&lt;--ID NgZone&#xA;    public showDiv() {&#xA;        exec(""wmic logicaldisk get caption"", function(error, stdout, stderr){&#xA;            console.log(stdout);&#xA;            this.ngZone.run(()=&gt;{&#xA;              this.show = !this.show;&#xA;             });&#xA;        }.bind(this));&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",8558186,"",,"",,2017-12-04T09:56:24,"","",,0,,,
47639661,2,,47624252,2017-12-04T18:26:41,,2,,"<p>Definition of <a href=""https://electronjs.org/docs/api/structures/rectangle"" rel=""nofollow noreferrer""><code>Rectangle</code></a> object (which is the first argument of <a href=""https://electronjs.org/docs/api/browser-window#winsetboundsbounds-animate"" rel=""nofollow noreferrer""><code>setBounds</code></a>) is more strict then you expected. Since its properties don't have default values you have to define all of them.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>remote.getCurrentWindow().setBounds({&#xA;    x: 1621,&#xA;    y: 611,&#xA;    width: 10,&#xA;    height: 1000&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Also, if you want to adjust only size you can use <a href=""https://electronjs.org/docs/api/browser-window#winsetsizewidth-height-animate"" rel=""nofollow noreferrer""><code>setSize</code></a> of BrowserWindow</p>&#xA;",2550156,"",,"",,2017-12-04T18:26:41,"","",,0,,,
47657360,2,,41965886,2017-12-05T15:37:16,,0,,"<p>My code signing environment variables were not getting properly set in my OS X build script, so code signing was not happening.  In order for OS X apps to update via Squirrel, both the new and the old versions MUST be signed.</p>&#xA;",15689,"",,"",,2017-12-05T15:37:16,"","",,0,,,
47668303,2,,47665476,2017-12-06T06:39:09,,1,,"<p>It's in ~/.config/app_name. See <a href=""http://docs.nwjs.io/en/latest/References/Command%20Line%20Options/#-user-data-dir"" rel=""nofollow noreferrer"">http://docs.nwjs.io/en/latest/References/Command%20Line%20Options/#-user-data-dir</a></p>&#xA;",180197,"",,"",,2017-12-06T06:39:09,"","",,0,,,
47678269,2,,47629110,2017-12-06T15:47:34,,0,,"<p>So I finally was able to compile my static ffmpeg executable.</p>&#xA;&#xA;<p>I've found my solution thanks to <a href=""https://video.stackexchange.com/a/14722/20822"">this answer</a>.</p>&#xA;&#xA;<p>Apparently, OSX has dynamic libraries located in <code>/usr/local/bin</code> which take precedence over everything else. So even if you try to compile your ffmpeg to be static, it won't work with these libraries on the way.</p>&#xA;&#xA;<p>Once I've removed all those <code>/usr/local/bin/*.dylib</code> my build became fully static and worked perfectly in the sandbox.</p>&#xA;",488325,"",,"",,2017-12-06T15:47:34,"","",,0,,,
47683322,2,,47499804,2017-12-06T20:56:21,,0,,<p>As the  website is alerting when the user want to quit the page after modifying some data. The website is using <code>onbeforeunload</code> attibute of the document.body.&#xA;So I'm writing a piece of code using <code>MutationObserver</code> to listen in the injected code of the webview at this attibute and reset it myself plus using the Electron <code>Confirm</code> located in <code>override.js</code> to warn the use. Not finish yet because of others problems but it is the way...</p>&#xA;,487313,"",,"",,2017-12-06T20:56:21,"","",,0,,,
47708228,2,,47546289,2017-12-08T05:24:39,,0,,"<p>In my case, I updated @Turf module for latest version, then electron-packager worked well.&#xA;I don't know why, but it looks not the issue of electron-packager...</p>&#xA;",2328877,"",,"",,2017-12-08T05:24:39,"","",,0,,,
47496098,2,,47496028,2017-11-26T12:19:19,,1,,"<p>It might be unnecessary if you target desktop, but you should include it I believe. It won't hurt to include it since the purpose of Electron is to make your app work on every device.</p>&#xA;",134824,"",,"",,2017-11-26T12:19:19,"","",,1,,,
47507112,2,,47507010,2017-11-27T09:02:09,,2,,"<p>you dont need the getSetting action creator.</p>&#xA;&#xA;<p>in your component did mount access the settings like this.</p>&#xA;&#xA;<pre><code>componentDidMount() {&#xA;    console.log(""settings in camera test start"");&#xA;     const { settings} = this.props;&#xA;    console.log(settings);&#xA;    console.log(""settings in camera test end"");&#xA;    ipcRenderer.send('stepWindow:create', { });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>assuming your object is called settings. normally the object is given the name you are exporting in the reducer. so if you are not able to see an object called settings in props, you need to give your reducer function a name</p>&#xA;&#xA;<pre><code>export default function settings (state = {},action) {&#xA;let newState;&#xA;&#xA;switch (action.type){&#xA;    case GET_SETTINGS:&#xA;        console.log(""reducer GET_SETTINGS"");&#xA;&#xA;        console.log(state);&#xA;        return state;&#xA;    case SET_SETTINGS:&#xA;        newState = { ...state, [""settings""]: action.payload };&#xA;        console.log(""Start newstate"");&#xA;        console.log(newState);&#xA;        console.log(""End newstate"");&#xA;        return newState;&#xA;&#xA;    default:&#xA;        return state&#xA;}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>EDIT: its mapStateToProps which gives the object name is props.</p>&#xA;",1322204,"",1322204,"",2017-12-05T11:07:07,2017-12-05T11:07:07,"","",,1,,,
47616231,2,,47561225,2017-12-03T07:26:22,,0,,"<p>I assume module you are try to load contains native module. Native module requires version matching between node.js process to compiled binaries, meaning if node.js version does not match between your node installation to Electron, module won't be able to loaded. You could match those specific version between, or use <a href=""https://github.com/electron/electron-rebuild"" rel=""nofollow noreferrer"">https://github.com/electron/electron-rebuild</a> to generate correct binaries.</p>&#xA;",2742189,"",,"",,2017-12-03T07:26:22,"","",,1,,,
47629803,2,,47621899,2017-12-04T09:07:37,,3,,"<p>I think that you are trying to consume the readable stream twice. Once in the <code>on('data',</code> handler and once in <code>readStream.pipe(writeStream);</code>. The <code>on('data',</code> will consume the readable stream before you can pipe it to the write stream.</p>&#xA;&#xA;<p>You could try replacing the line:</p>&#xA;&#xA;<pre><code>readStream.pipe(writeStream);&#xA;</code></pre>&#xA;&#xA;<p>with </p>&#xA;&#xA;<pre><code>readStream.on('data', (buffer) =&gt; {&#xA;     bytesCopied+= buffer.length&#xA;&#xA;     const response = new FileCopyResponseModel();&#xA;     response.is_error = false;&#xA;     response.is_done = false;&#xA;     response.size = fileSize;&#xA;     response.size_copied = bytesCopied;&#xA;     copyResponse.next(response);&#xA;     // new bit&#xA;     writeStream.write(buffer);&#xA; });&#xA;</code></pre>&#xA;&#xA;<p>and removing the <code>on('data,</code> from handler from above.</p>&#xA;&#xA;<p>You can also end the writeStream when the read stream ends.</p>&#xA;&#xA;<pre><code>readStream.on('end', function() {&#xA;    console.log('end');&#xA;    writeStream.end();&#xA;});&#xA;</code></pre>&#xA;",8919110,"",8919110,"",2017-12-04T10:20:06,2017-12-04T10:20:06,"","",,1,,,
47703558,2,,40301673,2017-12-07T20:50:48,,1,,"<p><strong>electron-winstaller</strong> uses squirrel to generate the setup files. According to their <a href=""https://github.com/Squirrel/Squirrel.Windows/blob/master/docs/using/install-process.md#install-location"" rel=""nofollow noreferrer"">documentation</a>, the install path is ""effectively immutable"" and hard set to <strong>\%LocalAppData%\AppName</strong> :</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Install Location</strong></p>&#xA;  &#xA;  <p>The Setup.exe, and later the UpdateManager in MyApp must have the&#xA;  ability to write files to and execute files from the application&#xA;  install location. To ensure permission for all types of users, the&#xA;  user's application data directory is selected as the install location&#xA;  (i.e., %LocalAppData%\MyApp).</p>&#xA;  &#xA;  <p>The installation root really only needs to consist of two types of&#xA;  folders:</p>&#xA;  &#xA;  <p>Packages - folder used to download and assemble the update package&#xA;  files. App Folders - the ""installed"" application files for a given&#xA;  version of MyApp. \%LocalAppData%\MyApp    \packages&#xA;        MyApp-1.0.0.nupkg&#xA;        MyApp-1.0.1-delta.nupkg&#xA;        MyApp-1.0.1.nupkg       \app-1.0.0&#xA;        MyApp.exe    \app-1.0.1&#xA;        MyApp.exe The packages directory is <strong><em>effectively immutable</em></strong>, it simply consists of the packages we've downloaded. Using the user's&#xA;  local application data directory means that we the needed write-access&#xA;  to the install directory on a per-user basis.</p>&#xA;  &#xA;  <p>Tip: See Machine-wide Installs for more information on ensuring your&#xA;  application pushed to all users in an enterprise environment.</p>&#xA;</blockquote>&#xA;&#xA;<p>The method for installing machine wide is to use the MSI which only triggers installation on the next user login:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Machine-wide Installs</strong></p>&#xA;  &#xA;  <p>Squirrel's Releasify command generates an MSI file suitable for&#xA;  installation via Group Policy. This MSI isn't a general-purpose&#xA;  installer, this means that once you run the MSI, users from now on&#xA;  will get the app installed, on next Login.</p>&#xA;  &#xA;  <p>So, most normal users should continue to run the Setup.exe's generated&#xA;  by Releasify, but if you want to have an IT Admin Friendly version,&#xA;  you can hand off the MSI</p>&#xA;  &#xA;  <p>Most users of Squirrel won't have to do anything new to enable this&#xA;  behavior, though certain NuGet package IDs / names might cause&#xA;  problems with MSI.</p>&#xA;</blockquote>&#xA;",84178,"",,"",,2017-12-07T20:50:48,"","",,1,,,
47558510,2,,47557586,2017-11-29T17:34:10,,5,,"<blockquote>&#xA;  <p>How am I supposed to use this with my server?</p>&#xA;</blockquote>&#xA;&#xA;<p>You need to think about separating the application as a stand-alone desktop app (that acts as a client-side application) vs the server for your API and backend logic which are hosted by a cloud provider.</p>&#xA;&#xA;<p>By doing this, you can focus on the separation of concerns for the desktop (electron) application as well as ensuring servers (such as API, authentication, and other backend logic) are well optimised and serving as multiple workers of themselves.</p>&#xA;&#xA;<blockquote>&#xA;  <p>If I were to move my code to my Electron app, would it cause security issues?</p>&#xA;</blockquote>&#xA;&#xA;<p>There are some security concerns with an Electron application development if you do not regularly update your Node version (such as memory buffer overflow attacks).  </p>&#xA;&#xA;<p>Another issue to consider is how the Electron community serves and resolves issues of permissions for the client-side app and the regular file permissions which are granted when the user installs your app.   </p>&#xA;&#xA;<p>As a developer, the onus is on you to ensure third-party libraries are not damaging the user's computer. (imagine installing a library dependency whose purpose is to maliciously delete the entire file system).</p>&#xA;&#xA;<blockquote>&#xA;  <p>I built a simple NodeJS application that uses Passport and a few other modules to create a login/registration system</p>&#xA;</blockquote>&#xA;&#xA;<p>For authentication, you can serve responses from your API based on the client-side requests/Posts that you provide to the authentication service. You don't necessarily have to provide/install the authentication server into your Electron app, as this can be somewhat troublesome for the user to update, as well as it exposes your authentication service for others to reverse-engineer/crack.</p>&#xA;",2312051,"",,"",,2017-11-29T17:34:10,"","",,2,,,
47640031,2,,47639798,2017-12-04T18:52:15,,3,,"<p>In short, you can't.</p>&#xA;&#xA;<p>You can't force an async request to be synchronous.</p>&#xA;&#xA;<p>You have a couple different syntactical approaches (<code>Promises</code>, <code>async/await</code>, events via Node.js <code>http</code>, callbacks, etc), but it's all going to boil down to being async in some way.</p>&#xA;&#xA;<p>The <code>async/await</code> pattern will <em>look</em> the most synchronous, but it will still be async.</p>&#xA;&#xA;<p>The package you're using specifically uses the callback pattern, so you'll need to adjust your other code to be async. You can mix and match these approaches. </p>&#xA;&#xA;<p>My personal preference is to wrap non-Promise patterns into a Promise pattern, then use <code>async/await</code> syntax throughout. Again, this look synchronous, but keep in mind it isn't and deal with it accordingly.</p>&#xA;&#xA;<p>You can wrap callback syntax as a Promise like this:</p>&#xA;&#xA;<pre><code>const urlExistsPromise = url =&gt; new Promise((resolve, reject) =&gt; &#xA;    urlExists(url, (err, exists) =&gt; err ? reject(err) : resolve(exists));&#xA;</code></pre>&#xA;&#xA;<p>And you can use it like this:</p>&#xA;&#xA;<pre><code>urlExistsPromise(url).then(exists =&gt; console.log(exists));&#xA;</code></pre>&#xA;&#xA;<p>or as <code>await</code> (inside a function labeled <code>async</code>):</p>&#xA;&#xA;<pre><code>const exists = await urlExistsPromise(url);&#xA;</code></pre>&#xA;",1261825,"",3931192,"",2017-12-04T20:03:50,2017-12-04T20:03:50,"","",,2,,,
47676535,2,,47675912,2017-12-06T14:22:12,,0,,"<p>Use the <code>ready-to-show</code> event description from from the <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">docs</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>While loading the page, the ready-to-show event will be emitted when the renderer process has rendered the page for the first time if the window has not been shown yet. Showing the window after this event will have no visual flash</p>&#xA;</blockquote>&#xA;&#xA;<p>Simple example</p>&#xA;&#xA;<pre><code>const {BrowserWindow} = require('electron')&#xA;let win = new BrowserWindow({show: false})&#xA;win.once('ready-to-show', () =&gt; {&#xA;  win.show()&#xA;})&#xA;</code></pre>&#xA;",4104766,"",,"",,2017-12-06T14:22:12,"","",,2,,,
47682256,2,,47682122,2017-12-06T19:42:02,,1,,"<p>Try running (no https):</p>&#xA;&#xA;<pre><code>npm config set registry http://registry.npmjs.org/&#xA;</code></pre>&#xA;&#xA;<p>It seems that it worked for <a href=""https://github.com/npm/npm/issues/11028"" rel=""nofollow noreferrer"">these guys</a></p>&#xA;",3499331,"",,"",,2017-12-06T19:42:02,"","",,2,,,
47616177,2,,47601890,2017-12-03T07:16:58,,2,,"<p>You may not use webpack for project created via <code>electron-forge</code>. It is not impossible thing, but you'll need various custom configuration to make it work.</p>&#xA;&#xA;<p><code>electron-forge</code> is constructed based on <code>electron-compile</code>, which registers on-the-fly transpilation hook in electron process. When you build package via electron forge's preset build script it'll generate correct dependency set along with your module dependency. <code>electron-compile</code> is one, it is mandatory required dependency but your webpack config breaks those.</p>&#xA;&#xA;<p>TL:DR;</p>&#xA;&#xA;<ol>&#xA;<li><code>electron-forge</code> has own flows</li>&#xA;<li>run webpack then pkg via <code>forge</code> can break thing.</li>&#xA;</ol>&#xA;&#xA;<p>I'd recommend take one way only (between webpack vs. forge), customization to mix it would not be trivial for first time setup.</p>&#xA;",2742189,"",,"",,2017-12-03T07:16:58,"","",,3,,,
47531513,2,,47531237,2017-11-28T12:21:18,,1,,"<p>I think you should define a custom menu entry and handle it yourself.</p>&#xA;&#xA;<p>I don't think you can register a listener and handle it there since there is no event in the <a href=""https://electronjs.org/docs/api/web-contents"" rel=""nofollow noreferrer""><code>webContents</code></a> documentation.</p>&#xA;&#xA;<p>The menu item would be something like this:</p>&#xA;&#xA;<pre><code>{&#xA;    label:       'Undo',&#xA;    accelerator: 'CmdOrCtrl+Z',&#xA;    click:       function (menuItem, focusedWin) {&#xA;        // Undo.&#xA;        focusedWin.webContents.undo();&#xA;&#xA;        // Run some custom code.&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",6577664,"",,"",,2017-11-28T12:21:18,"","",,4,,,
47579789,2,,47579454,2017-11-30T17:58:02,,3,,"<p>There are a couple of options. You can initialize your BrowserWindow <strong>without</strong> devtools:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;  width: 800,&#xA;  height: 600,&#xA;  webPreferences: {&#xA;    devTools: false&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Or you can catch the opened <strong>event</strong> on the webContents and close it:</p>&#xA;&#xA;<pre><code>mainWindow.webContents.on(""devtools-opened"", () =&gt; {&#xA;   mainWindow.webContents.closeDevTools();&#xA;});&#xA;</code></pre>&#xA;",84178,"",84178,"",2017-11-30T18:00:56,2017-11-30T18:00:56,"","",,6,,,
47656587,2,,47610727,2017-12-05T14:57:35,,6,,"<p>If all you need is a login and your server already manages the database I would keep this logic on the server. This is also something the answer to your previous question states.</p>&#xA;&#xA;<ul>&#xA;<li>Your client sends a POST request containing the username, password over HTTPS (SSL encryption), this can happen in the renderer process.</li>&#xA;<li>Your Server checks if the password and user are valid.</li>&#xA;<li>Server returns your client if the authentification was valid, via token.&#xA;&#xA;<ul>&#xA;<li>Either the main process (Electron-NodeJs) persists the token (File)</li>&#xA;<li>Or the Render process (Electron-Chromium) persists the token (Web Storage)</li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p>This is the most simple example which is neglecting advanced security concerns, if you want to make it more secure you definitely should look for general advise about web security like crypto-pbkdf2 and how to handle the tokens. But this is not electron specific.</p>&#xA;",5115009,"",,"",,2017-12-05T14:57:35,"","",,7,,,
44232321,2,,44212373,2017-05-28T21:47:39,,0,,"<p>I have found a solution to this problem. I am not certain why it makes a difference but I changed two things in 'otherModule'.&#xA;1. I changes the function from 'const' to 'let'&#xA;2. I changed the order of the parameters, removing the space after the comma&#xA;The new function header looks like:</p>&#xA;&#xA;<pre><code>let someFunc = function(otherVar,contents) {...}&#xA;</code></pre>&#xA;&#xA;<p>I also updated the call to match the new order ( given):</p>&#xA;&#xA;<pre><code>finalContents = otherModule.someFunc(otherVar,contents);&#xA;</code></pre>&#xA;&#xA;<p>I hope this helps someone in the future!</p>&#xA;",8033264,"",,"",,2017-05-28T21:47:39,"","",,0,,,
44245323,2,,44243225,2017-05-29T14:51:10,,0,,"<p>I found the answer. It was because one of the imports was called from an iframe, so I had to do the following changes (in foobar.js) to make it work:</p>&#xA;&#xA;<pre><code>export function doFoo() {&#xA;    if (typeof foo != 'undefined') {&#xA;        foo();&#xA;    } else {&#xA;        parent.foo(); // called from an iframe.&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",3351083,"",,"",,2017-05-29T14:51:10,"","",,0,,,
44259504,2,,44040576,2017-05-30T10:17:57,,0,,<p>I used ansi-to-html API to convert the colored text .&#xA;It works perfectly now.</p>&#xA;&#xA;<p>Node js file:</p>&#xA;&#xA;<p><code>var Convert = require('ansi-to-html');&#xA;var convert = new Convert();&#xA;Converted_data = convert.toHtml(data); //data is the string with colored text</code></p>&#xA;,7682427,"",,"",,2017-05-30T10:17:57,"","",,0,,,
44262898,2,,40576236,2017-05-30T12:55:34,,1,,"<p>You can use <code>win.setAlwaysOnTop(!win.isAlwaysOnTop())</code></p>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/browser-window/#winsetalwaysontopflag-level-relativelevel"" rel=""nofollow noreferrer"">Ref.</a></p>&#xA;",6577664,"",,"",,2017-05-30T12:55:34,"","",,0,,,
44263263,2,,44258831,2017-05-30T13:11:55,,14,,"<p>Use the <a href=""https://electronjs.org/docs/api/browser-window#event-close"" rel=""nofollow noreferrer""><code>close</code></a> event instead of the <a href=""https://electronjs.org/docs/api/browser-window#event-closed"" rel=""nofollow noreferrer""><code>closed</code></a> event.</p>&#xA;&#xA;<p>When the <a href=""https://electronjs.org/docs/api/browser-window#event-closed"" rel=""nofollow noreferrer""><code>closed</code></a> event is fired the window is already closed, but when the <a href=""https://electronjs.org/docs/api/browser-window#event-close"" rel=""nofollow noreferrer""><code>close</code></a> event is fired the window is still open and you can prevent it from closing by using <code>event.preventDefault();</code>.</p>&#xA;",6577664,"",6577664,"",2019-09-16T06:20:33,2019-09-16T06:20:33,"","",,0,,,
44275734,2,,44269631,2017-05-31T04:35:32,,1,,"<p>Probably because there is no one. You are install electron to your node modules, you are referring to that in <code>modules: [path.resolve(__dirname, 'node_modules')]</code>.</p>&#xA;&#xA;<p>Simply change your start command to: </p>&#xA;&#xA;<pre><code>""main"": ""dist/main.js"",&#xA;  ""scripts"": {&#xA;    ""start"": ""electron .""&#xA;  },&#xA;</code></pre>&#xA;",5715298,"",,"",,2017-05-31T04:35:32,"","",,0,,,
44279325,2,,44271304,2017-05-31T08:18:05,,7,,"<p>First of all, if you app slow to start you can create custom loading-animation template with node which you will serve until your server will be ready, in this case you BrowserWindow flag show should be setup to false, you will ""show"" your window with window.show() on your custom ""server_ready"" event. Overall logic of your app should fit in: 1) You start electron app and on load serve browser window with loading... animation, then you spawn child process in which your django app will run, here you have the ""bridge"" between your electron-node events and python logic, this done as follows:</p>&#xA;&#xA;<pre><code>let django=child_process.spawn('python', [__dirname+'/django_folder/start_server.py']); &#xA;</code></pre>&#xA;&#xA;<p>Now variable django is your handler for communication with you django app.&#xA;You can communicate as follows:</p>&#xA;&#xA;<pre><code>            let result_name = '';&#xA;&#xA;            django.stdout.on(  &#xA;                'data',&#xA;                (data:Buffer) =&gt; {  &#xA;                    result_name+=data.toString('utf8'); &#xA;                }&#xA;            );       &#xA;&#xA;            django.stdout.on(&#xA;                'end', &#xA;                (reasone) =&gt; { &#xA;                   resolve(result); &#xA;                }   &#xA;            );   &#xA;&#xA;            django.stderr.on( //error in python will be directed here&#xA;                'data',   &#xA;                (buf : Buffer) =&gt; {&#xA;                   reject(buf.toString('utf8'));&#xA;                } &#xA;            );  &#xA;&#xA;django.stdin.write(JSON.stringify('notify your django app what you need from it'));&#xA;</code></pre>&#xA;&#xA;<p>In python:</p>&#xA;&#xA;<pre><code>args=sys.stdin.readlines()[0] #your message in json from electron&#xA;args=json.loads(args)['data'] &#xA;print result #send data back to electron&#xA;</code></pre>&#xA;&#xA;<p>If your app is not very complex you probably can run in on localhost,&#xA;so then your python process will notify you through event that it is ready you can reload BrowserWindow with localhost url and start to coordinate interaction communicating with child process.</p>&#xA;",5715298,"",,"",,2017-05-31T08:18:05,"","",,0,,,
44307685,2,,44254519,2017-06-01T12:34:26,,1,,"<p>Create a  child application with following c# code ,and run that child process from nwjs application</p>&#xA;&#xA;<p>SetWindowPos can make windows AlwaysOnTop. Most likely it can give the opposite result. Try something along these lines:</p>&#xA;&#xA;<pre><code>[DllImport(""user32.dll"")]&#xA;static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X,&#xA;   int Y, int cx, int cy, uint uFlags);&#xA;&#xA;&#xA; public const uint SWP_NOSIZE          = 0x0001;&#xA; public const uint SWP_NOMOVE          = 0x0002;&#xA; public const uint SWP_NOACTIVATE      = 0x0010;&#xA; public const int HWND_BOTTOM = 1;&#xA;&#xA;&#xA;SetWindowPos(hWnd, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE | SWP_NOACTIVATE);&#xA;</code></pre>&#xA;",6533351,"",,"",,2017-06-01T12:34:26,"","",,0,,,
44334560,2,,44284861,2017-06-02T17:38:02,,0,,"<p>I figured it out... documenting for archive/google purposes.</p>&#xA;&#xA;<p>What I did. I added some flags to enable remote debugging:</p>&#xA;&#xA;<pre><code>app.commandLine.appendSwitch('remote-debugging-port', '8315')&#xA;app.commandLine.appendSwitch('host-rules', 'MAP * 127.0.0.1')&#xA;</code></pre>&#xA;&#xA;<p>As you can probably guess, I copied that from somewhere without thinking. Those host rules (really obvious, when you think about it) map every hostname to 127.0.0.1. </p>&#xA;",6464204,"",,"",,2017-06-02T17:38:02,"","",,0,,,
44339258,2,,44218543,2017-06-03T00:58:53,,0,,"<p>You'll need to encode special characters in order for them to appear correctly.</p>&#xA;&#xA;<p>The following should work for you:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>var menu = new nw.Menu();&#xA;menu.append(new nw.MenuItem({ label: ""Spalte einf\u00FCgen"" }));&#xA;</code></pre>&#xA;&#xA;<p>You can use the table at <a href=""https://unicode-table.com/en/"" rel=""nofollow noreferrer"">https://unicode-table.com/en/</a> for others, it will just be <code>\u{Unicode Number}</code></p>&#xA;",4245026,"",,"",,2017-06-03T00:58:53,"","",,0,,,
44342006,2,,44217204,2017-06-03T08:33:45,,1,,"<p>I found better way, i use grunt and with <a href=""https://github.com/gruntjs/grunt-contrib-uglify"" rel=""nofollow noreferrer"">uglify</a> tool compile all my project to one file, then with nwjc protect this file and include it to html. Works nice and i guess even faster because on 0.22 was fixed performance issue</p>&#xA;",1786016,"",,"",,2017-06-03T08:33:45,"","",,0,,,
44345381,2,,44231962,2017-06-03T15:11:13,,1,,<p>It turned out to be that my computer needed windows updates. After I got the updates the problem vanished. Most probably the updates were wannacry updates.</p>&#xA;&#xA;<p>If you encounter a problem such like this try to make your updates</p>&#xA;,4602190,"",,"",,2017-06-03T15:11:13,"","",,0,,,
44347044,2,,44047960,2017-06-03T18:03:15,,1,,"<p>Finally I have changed the file extension and added a new MIME-TYPE to the system. In this way Nautilus (Ubuntu) and the Windows explorer recognise the file with the new type.</p>&#xA;&#xA;<p>When I use the command <code>file --mime-type</code> I still detect the zip mime-type. But that's not bad because I can use this detection to avoid errors in my app.</p>&#xA;&#xA;<h3>Create your own MIME-TYPE for Nautilus</h3>&#xA;&#xA;<ol>&#xA;<li><p>Create a new XML in <code>/usr/share/mime/packages/</code> with this content:</p>&#xA;&#xA;<pre><code>&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&#xA;&lt;mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'&gt;&#xA;  &lt;mime-type type=""application/todo""&gt;&#xA;    &lt;comment&gt;Todos Text file&lt;/comment&gt;&#xA;    &lt;glob pattern=""*.TODO""/&gt;&#xA;    &lt;glob pattern=""*.todo""/&gt;&#xA;  &lt;/mime-type&gt;&#xA;&lt;/mime-info&gt;&#xA;</code></pre></li>&#xA;<li><p>Execute the following command to update mime database</p>&#xA;&#xA;<pre><code>sudo update-mime-database /usr/share/mime&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<h3>Assign an icon to the new extension</h3>&#xA;&#xA;<p>First step is renaming the icon to application-todo and it must be in svg extension.</p>&#xA;&#xA;<p>If you're using gnome you have move the icon to <code>/usr/share/icons/gnome/scalable</code> then update the cache with</p>&#xA;&#xA;<pre><code>$ sudo gtk-update-icon-cache /usr/share/icons/gnome -f&#xA;</code></pre>&#xA;&#xA;<p>If you're using unity move it to <code>/usr/share/icons/Humanity/mimes/</code> then update the cache</p>&#xA;&#xA;<pre><code>$ sudo gtk-update-icon-cache /usr/share/icons/Humanity -f&#xA;</code></pre>&#xA;&#xA;<p>Give your nautilus a refresh and you'll have a new mime-type with icon</p>&#xA;",4891717,"",,"",,2017-06-03T18:03:15,"","",,0,,,
44347796,2,,44347747,2017-06-03T19:28:32,,2,,"<p>as robertklep suggested, i removed response.end(). Then it's working</p>&#xA;",873018,"",,"",,2017-06-03T19:28:32,"","",,0,,,
44348502,2,,44338348,2017-06-03T20:58:18,,0,,<p>This should do the trick</p>&#xA;&#xA;<pre><code>document.getElementById('myemail').value = &lt;%- JSON.stringify(garage[0].email) %&gt;;&#xA;</code></pre>&#xA;,6352490,"",,"",,2017-06-03T20:58:18,"","",,0,,,
44349803,2,,44349775,2017-06-04T00:44:22,,0,,"<p>You should start with SVG if you're a beginner. Rendering will be easier and so will event management. Don't worry too much about performance, they'll both do the trick for you.</p>&#xA;",5666034,"",,"",,2017-06-04T00:44:22,"","",,0,,,
44350826,2,,44169016,2017-06-04T04:41:38,,1,,<p>Have you already run sqlite3 through electron-rebuild?</p>&#xA;&#xA;<pre><code>$ electron-rebuild -f -w sqlite3&#xA;</code></pre>&#xA;&#xA;<p>or </p>&#xA;&#xA;<pre><code>$ npm rebuild&#xA;</code></pre>&#xA;,7687024,"",,"",,2017-06-04T04:41:38,"","",,0,,,
44368172,2,,43440931,2017-06-05T11:40:58,,1,,"<p>We ended up using <code>Proxy</code> to catch attribute assignment:</p>&#xA;&#xA;<pre><code>const shallow_observer = function (obj, fn) {&#xA;    return new Proxy(obj, {&#xA;        set(target, name, val) {&#xA;            target[name] = val;&#xA;            if (fn) fn(target, name, val);&#xA;            return true;&#xA;        }&#xA;    });&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>which allowed us to do:</p>&#xA;&#xA;<pre><code>data: { a:0, b:42 },&#xA;setupHandlers: function () {&#xA;    this.data = shallow_observer(this.data, (data, field, value) =&gt; this.draw());&#xA;},&#xA;draw: function () { .. }&#xA;</code></pre>&#xA;&#xA;<p>We have a <code>deep_observer</code> function too (which is much more complex), that detects changes in a nested data structure, but the <code>shallow_observer</code> was sufficient for all our use-cases.</p>&#xA;",75103,"",,"",,2017-06-05T11:40:58,"","",,0,,,
44379300,2,,44337944,2017-06-05T23:43:29,,16,,"<h2>The Webpack Misconception</h2>&#xA;&#xA;<p>One thing to understand upfront is that <code>webpack</code> does not bundle files required through <code>fs</code> or other modules that ask for a path to a file. These type of assets are commonly labeled as <strong>Static Assets</strong>, as they are not bundled in any way. <code>webpack</code> will only bundle files that are <code>require</code>d or <code>import</code>ed (ES6). Furthermore, depending on your <code>webpack</code> configuration, your project root may not always match what is output within your production builds.</p>&#xA;&#xA;<p>Based on the electron-vue documentation's <strong>Project Structure/File Tree</strong>, you will find that only <code>webpack</code> bundles and the <code>static/</code> directory are made available in production builds. electron-vue also has a handy <a href=""https://simulatedgreg.gitbooks.io/electron-vue/content/en/using-static-assets.html#use-case-within-js-with-fspath-and-static"" rel=""noreferrer""><code>__static</code></a> global variable that can provide a path to that <code>static/</code> folder within both development and production. You can use this variable similar to how one would with <code>__dirname</code> and <code>path.join</code> to access your JSON files, or really any files.</p>&#xA;&#xA;<h1>A Solution to Static Assets</h1>&#xA;&#xA;<p>It seems the current version of the <a href=""https://github.com/SimulatedGREG/electron-vue"" rel=""noreferrer"">electron-vue</a> boilerplate already has this solved for you, but I'm going to describe how this is setup with <code>webpack</code> as it can apply to not only JSON files and how it can also apply for any <code>webpack</code> + <code>electron</code> setup. The following solution assumes your <code>webpack</code> build outputs to a separate folder, which we'll use <code>dist/</code> in this case, assumes your <code>webpack</code> configuration is located in your project's root directory, and assumes <code>process.env.NODE_ENV</code> is set to <code>development</code> during development.</p>&#xA;&#xA;<h2>The <code>static/</code> directory</h2>&#xA;&#xA;<p>During development we need a place to store our static assets, so let's place them in a directory called <code>static/</code>. Here we can put files, such as JSONs, that we know we will need to read with <code>fs</code> or some other module that requires a full path to the file.</p>&#xA;&#xA;<p>Now we need to make that <code>static/</code> assets directory available in production builds.</p>&#xA;&#xA;<blockquote>&#xA;  <p>But <code>webpack</code> isn't handling this folder at all, what can we do?</p>&#xA;</blockquote>&#xA;&#xA;<p>Let's use the simple <code>copy-webpack-plugin</code>. Within our <code>webpack</code> configuration file we can add this plugin when building <strong>for production</strong> and configure it to copy the <code>static/</code> folder into our <code>dist/</code> folder.</p>&#xA;&#xA;<pre><code>new CopyWebpackPlugin([&#xA;    {&#xA;      from: path.join(__dirname, '/static'),&#xA;      to: path.join(__dirname, '/dist/static'),&#xA;      ignore: ['.*']&#xA;    }&#xA;])&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>Okay so the assets are in production, but how do I get a path to this folder in both development and production?</p>&#xA;</blockquote>&#xA;&#xA;<h2>Creating a global <code>__static</code> variable</h2>&#xA;&#xA;<blockquote>&#xA;  <p>What's the point of making this <code>__static</code> variable?</p>&#xA;</blockquote>&#xA;&#xA;<ol>&#xA;<li><p>Using <code>__dirname</code> is not reliable in <code>webpack</code> + <code>electron</code> setups. During development <code>__dirname</code> <em>could</em> be in reference to a directory that exists in your <code>src/</code> files. In production, since <code>webpack</code> bundles our <code>src/</code> files into one script, that path you formed to get to <code>static/</code> doesn't exist anymore. Furthermore, those files you put inside <code>src/</code> that were not <code>require</code>d or <code>import</code>ed never make it to your production build.</p></li>&#xA;<li><p>When handling the project structure differences from development and production, trying to get a path to <code>static/</code> will be highly annoying during development having to always check your <code>process.env.NODE_ENV</code>.</p></li>&#xA;</ol>&#xA;&#xA;<h3>So let's simplify this by creating one <em>source of truth</em>.</h3>&#xA;&#xA;<p>Using the <code>webpack.DefinePlugin</code> we can set our <code>__static</code> variable <strong>only in development</strong> to yield a path that points to <code>&lt;projectRoot&gt;/static/</code>. Depending if you have multiple <code>webpack</code> configurations, you can apply this for both a <code>main</code> and <code>renderer</code> process configuration.</p>&#xA;&#xA;<pre><code>new webpack.DefinePlugin({&#xA;    '__static': `""${path.join(__dirname, '/static').replace(/\\/g, '\\\\')}""`&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>In production, we need to set the <code>__static</code> variable manually in our code. Here's what we can do...</p>&#xA;&#xA;<p><strong>index.html</strong> (<code>renderer</code> process)</p>&#xA;&#xA;<pre><code>&lt;!-- Set `__static` path to static files in production --&gt;&#xA;&lt;script&gt;&#xA;    if (process.env.NODE_ENV !== 'development') window.__static = require('path').join(__dirname, '/static').replace(/\\/g, '\\\\')&#xA;&lt;/script&gt;&#xA;&lt;!-- import webpack bundle --&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>main.js</strong> (<code>main</code> process)</p>&#xA;&#xA;<pre><code>// Set `__static` path to static files in production&#xA;if (process.env.NODE_ENV !== 'development') {&#xA;    global.__static = require('path').join(__dirname, '/static').replace(/\\/g, '\\\\')&#xA;}&#xA;&#xA;// rest of application code below&#xA;</code></pre>&#xA;&#xA;<h3>Now start using your <code>__static</code> variable</h3>&#xA;&#xA;<p>Let's say we have a simple JSON file we need to read with <code>fs</code>, here's what we can accomplish now...</p>&#xA;&#xA;<p><strong><code>static/someFile.json</code></strong></p>&#xA;&#xA;<pre><code>{""foo"":""bar""}&#xA;</code></pre>&#xA;&#xA;<p><strong><code>someScript.js</code></strong> (<code>renderer</code> or <code>main</code> process)</p>&#xA;&#xA;<pre><code>import fs from 'fs'&#xA;import path from 'path'&#xA;&#xA;const someFile = fs.readFileSync(path.join(__static, '/someFile.json'), 'utf8')&#xA;&#xA;console.log(JSON.parse(someFile))&#xA;// =&gt; { foo: bar }&#xA;</code></pre>&#xA;&#xA;<h2>Conclusion</h2>&#xA;&#xA;<p><code>webpack</code> was made to bundle assets together that are <code>require</code>d or <code>import</code>ed into one nice bundle. Assets referenced with <code>fs</code> or other modules that need a file path are considered <strong>Static Assets</strong>, and <code>webpack</code> does not directly handle these. Using <code>copy-webpack-plugin</code> and <code>webpack.DefinePlugin</code> we can setup a reliable <code>__static</code> variable that yields a path to our <code>static/</code> assets directory in both development and production.</p>&#xA;&#xA;<p>To end, I personally haven't seen any other <code>webpack</code> + <code>electron</code> boilerplates handle this situation as it isn't a very common situation, but I think we can all agree that having one <em>source of truth</em> to a static assets directory is a wonderful approach to alleviate developer fatigue. </p>&#xA;",4568234,"",4568234,"",2017-06-11T14:57:22,2017-06-11T14:57:22,"","",,0,,,
44390462,2,,44375029,2017-06-06T12:48:41,,1,,"<p>If you want to have it not go back when you type backspace in a <code>&lt;textarea&gt;</code> or a <code>&lt;input&gt;</code>, than try this:</p>&#xA;&#xA;<pre><code>const webview = document.querySelector('webview')&#xA;webview.addEventListener('keydown', (e)=&gt;{&#xA;        if(e.keyCode === 8 &amp;&amp; e.target.nodeName.toLowerCase() !== 'textarea' &amp;&amp; e.target.nodeName.toLowerCase() !== 'input' &amp;&amp; e.target.contentEditable !== 'true') webview.goBack();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>(If this worked for you, remember you can mark it as accepted by clicking the green check mark.)</p>&#xA;",6560716,"",,"",,2017-06-06T12:48:41,"","",,0,,,
44392533,2,,44154985,2017-06-06T14:17:34,,2,,"<p>Native Gui API's refers to desktop API such as Menu and Tray</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/menu.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/menu.md</a>&#xA;<a href=""https://electron.atom.io/docs/api/tray/"" rel=""nofollow noreferrer"">https://electron.atom.io/docs/api/tray/</a></p>&#xA;&#xA;<p>i.e. API's which allow you to interact with the Desktop Environment. </p>&#xA;&#xA;<p>e.g You will not be able to create a Tray application using Web Pages</p>&#xA;",324143,"",,"",,2017-06-06T14:17:34,"","",,0,,,
44394588,2,,44393814,2017-06-06T15:50:20,,2,,"<p>The <code>verbosity</code> option for gulp-run could be what you are looking for. It defaults to <code>2</code>, which means that the output from electron just gets buffered and printed <strong>after</strong> you quit the app. Setting it to <code>3</code> should print your console.logs as soon as they come in.</p>&#xA;&#xA;<pre><code>gulp.task('serve', ['html', 'js', 'css'], function () {&#xA;    run('electron app/main.js', {verbosity: 3}).exec();&#xA;});&#xA;</code></pre>&#xA;",2016129,"",,"",,2017-06-06T15:50:20,"","",,0,,,
44400443,2,,44116726,2017-06-06T22:00:12,,4,,"<p>i had same problem, my solution was using this <code>npm rebuild zeromq --runtime=electron --target=1.6.2</code>(you're version) before run <code>npm start</code></p>&#xA;&#xA;<p>All info <a href=""https://www.npmjs.com/package/zeromq"" rel=""nofollow noreferrer"">here</a></p>&#xA;",2894832,"",,"",,2017-06-06T22:00:12,"","",,0,,,
44418228,2,,44167338,2017-06-07T16:30:51,,0,,"<p>Thank you @shashi, I found from on the webpack github site there were two things I was missing. One was the target, and the other was a resolve field (since I am using REACT in jsx files). See solution below:</p>&#xA;&#xA;<pre><code>const webpack = require('webpack')&#xA;const path = require('path')&#xA;&#xA;const config = {&#xA;    context: path.resolve(__dirname, '..', 'src'),&#xA;    entry: './dash/dash.js',&#xA;    target: ""electron-renderer"",&#xA;    output: {&#xA;        path: path.resolve(__dirname, '..', 'dist'),&#xA;        filename: 'bundle.js'&#xA;    },&#xA;    resolve: { extensions: ["".jsx"", "".js"", "".json""] },&#xA;    module: {&#xA;        rules: [{&#xA;            test: /\.(js|jsx)$/,&#xA;            exclude: /node_modules/,&#xA;            include: path.resolve(__dirname, '..', 'src'),&#xA;            use: [{&#xA;                loader: 'babel-loader',&#xA;                options: {&#xA;                    ""sourceMaps"": ""inline"",&#xA;                    ""presets"": [&#xA;                        ""react"",&#xA;                        [&#xA;                            ""env"",&#xA;                            {&#xA;                                ""targets"": {&#xA;                                    ""electron"": ""1.6.7""&#xA;                                },&#xA;                                ""debug"": true,&#xA;                                ""useBuiltIns"": true&#xA;                            }&#xA;                        ]&#xA;                    ],&#xA;                    ""plugins"": [&#xA;                        ""transform-object-rest-spread""&#xA;                    ]&#xA;                }&#xA;            }]&#xA;        }]&#xA;    }&#xA;}&#xA;&#xA;module.exports = config&#xA;</code></pre>&#xA;",959460,"",,"",,2017-06-07T16:30:51,"","",,0,,,
44422645,2,,44393564,2017-06-07T20:58:44,,0,,<p>Confirmed as a bug and resolved at source.</p>&#xA;,2142239,"",,"",,2017-06-07T20:58:44,"","",,0,,,
44444769,2,,44444614,2017-06-08T20:12:52,,0,,<p><strong>EDIT</strong>: This can only be done on the client side</p>&#xA;&#xA;<p>You can check if the <code>window.process</code> object exists.</p>&#xA;&#xA;<p><code>if (window.process &amp;&amp; window.process !== undefined) { &#xA;   // Likely electron &#xA;}</code></p>&#xA;,,user4406073,,"",,2017-06-08T20:12:52,"","",,0,,,
44248526,2,,44248199,2017-05-29T18:24:59,,1,,"<p>Found it.  As usual, an oversight on my end.</p>&#xA;&#xA;<pre><code>// in the angular service&#xA;this._electron.ipcRenderer.send('event-aka-channel-name1', args);&#xA;&#xA;// in the electron main.js&#xA;ipc.on('event-aka-channel-name1', (event, args) =&gt; { // doStuff });&#xA;</code></pre>&#xA;&#xA;<p>My issue was apparently a misspelling of an import which I caught via various logs.  Once that was fixed the rest works as intended (or at least enough for me to move forward)</p>&#xA;",4155665,"",,"",,2017-05-29T18:24:59,"","",,1,,,
44271101,2,,44259426,2017-05-30T20:13:19,,0,,"<p>Ok - it turned out that the problem is linked to the way how my django server is starting... It needs few seconds to get started, which is when Electron was trying to reach it with no success - hence the white screen. </p>&#xA;&#xA;<p>After the introduction of timeout timer, like this: </p>&#xA;&#xA;<pre><code>    setTimeout(function() {&#xA;                console.log('waiting ....');&#xA;                mainWindow.loadURL(mainAddr);&#xA;    },4000);&#xA;</code></pre>&#xA;&#xA;<p>the problem was 'gone' after waiting those 4 seconds ... </p>&#xA;",1544500,"",,"",,2017-05-30T20:13:19,"","",,1,,,
44366454,2,,44352399,2017-06-05T10:04:21,,0,,"<p>Don't know about 'other' hardware but ""<strong>most</strong>"" barcode readers need nothing but drivers on the OS, you will see they 'type' the code in your 'input' element :)</p>&#xA;",1901532,"",,"",,2017-06-05T10:04:21,"","",,1,,,
44403465,2,,44403139,2017-06-07T04:24:20,,2,,"<p>Add ""active"" class to the  tag and try    </p>&#xA;&#xA;<pre><code> &lt;div class=""input-field""&gt;&#xA;          &lt;input placeholder=""Placeholder"" id=""first_name"" type=""text"" class=""validate""&gt;&#xA;          &lt;label for=""first_name"" class=""active""&gt;First Name&lt;/label&gt;&#xA;        &lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>if you want only label animation, remove the placeholder for the <code>&lt;input&gt;</code> tag</p>&#xA;&#xA;<p>Hope it works..</p>&#xA;",4114390,"",,"",,2017-06-07T04:24:20,"","",,1,,,
44425187,2,,44425068,2017-06-08T01:20:13,,2,,"<p><a href=""https://webpack.js.org/guides/migrating/#module-loaders-is-now-module-rules"" rel=""nofollow noreferrer""><code>module.rules</code> replaces <code>module.loaders</code> in Webpack 2</a>, so it's possible that by providing both Webpack isn't using <code>module.loaders</code> (which is there for backwards-compatibility) at all - try moving the rules you currently have in <code>module.loaders</code> into <code>module.rules</code> instead.</p>&#xA;&#xA;<p>Edit: peeking inside the current version of Webpack's <code>NormalModuleFactory</code>, <a href=""https://github.com/webpack/webpack/blob/2e8b77ddcf66867b208dffce97fb94a87be48369/lib/NormalModuleFactory.js#L49"" rel=""nofollow noreferrer"">this is what it's doing</a>:</p>&#xA;&#xA;<pre><code>this.ruleSet = new RuleSet(options.rules || options.loaders);&#xA;</code></pre>&#xA;",6760,"",6760,"",2017-06-08T01:26:57,2017-06-08T01:26:57,"","",,1,,,
44445384,2,,44425495,2017-06-08T20:54:25,,1,,"<p>A friend and I looked up how Atom does it and arrived at this solution:</p>&#xA;&#xA;<pre><code>function getAppRoot() {&#xA;  if ( process.platform === 'win32' ) {&#xA;    return path.join( app.getAppPath(), '/../../../' );&#xA;  }  else {&#xA;    return path.join( app.getAppPath(), '/../../../../' );&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",57482,"",,"",,2017-06-08T20:54:25,"","",,1,,,
44458234,2,,44455356,2017-06-09T12:46:31,,4,,"<p>You can use <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentsexecutejavascriptcode-usergesture-callback"" rel=""nofollow noreferrer""><code>executeJavascript</code></a> method of your BrowserWindow's webContents to execute code directly in Renderer process.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow} = require('electron')&#xA;const path = require('path')&#xA;const fs = require('fs')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  var mainWindow = new BrowserWindow()&#xA;  mainWindow.loadURL(path.join(__dirname, 'index.html'))&#xA;&#xA;  fs.readFile(path.join(__dirname, 'test.json'), 'utf8', (err, data) =&gt; {&#xA;    if (err) {&#xA;      alert('Could not read file.\n\nDetails:\n' + err.message)&#xA;      return&#xA;    }&#xA;    let json = JSON.parse(data)&#xA;    for (let i in json) {&#xA;      mainWindow.webContents.executeJavaScript(`&#xA;        document.getElementById(""list"").innerHTML += '&lt;br&gt; ${i}: ${json[i]}'&#xA;      `)&#xA;      // can be replaced with&#xA;      // $('#list').append('&lt;br&gt; ${i}: ${json[i]}')&#xA;      // if html have jquery support&#xA;    }&#xA;  })&#xA;})&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>For using jquery in electron you should install <code>jquery</code> module and refer it in your HTML</p>&#xA;&#xA;<pre><code>&lt;script&gt;window.$ = window.jQuery = require('jquery');&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Instructions in detail can be found <a href=""http://ourcodeworld.com/articles/read/202/how-to-include-and-use-jquery-in-electron-framework"" rel=""nofollow noreferrer"">here</a></p>&#xA;",2550156,"",2550156,"",2017-06-09T13:13:18,2017-06-09T13:13:18,"","",,1,,,
44234707,2,,44234579,2017-05-29T04:41:30,,1,,"<p>You have to create <code>BrowserWindow</code> and call <code>loadURL</code> method</p>&#xA;&#xA;<pre><code>// In the main process.&#xA;const {BrowserWindow} = require('electron')&#xA;&#xA;// Or use `remote` from the renderer process.&#xA;// const {BrowserWindow} = require('electron').remote&#xA;&#xA;let win = new BrowserWindow({width: 800, height: 600})&#xA;win.on('closed', () =&gt; {&#xA;  win = null&#xA;})&#xA;&#xA;// Load a remote URL&#xA;win.loadURL('https://github.com')&#xA;&#xA;// Or load a local HTML file&#xA;win.loadURL(`file://${__dirname}/app/index.html`)&#xA;</code></pre>&#xA;&#xA;<p><strong>UPDATE</strong>&#xA;Please handle the click event on the main controller:</p>&#xA;&#xA;<pre><code>var remote = require('electron').remote;&#xA;$(document).on('click', '#btn', function() {&#xA;    // Hide current window&#xA;    var currWindow = remote.getCurrentWindow();&#xA;    currWindow.hide();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Handle main window hide event to make sure that main window is closed</p>&#xA;&#xA;<pre><code>win.on('hide', function(e) {&#xA;    showNewWindow();&#xA;});&#xA;&#xA;&#xA;var showNewWindow = function() {&#xA;    newWindow = new BrowserWindow(windowOption);&#xA;    newWindow .loadURL(`file://${__dirname}/app/new.html`)&#xA;}&#xA;</code></pre>&#xA;",3766872,"",3766872,"",2017-05-29T06:25:51,2017-05-29T06:25:51,"","",,2,,,
44258906,2,,44210032,2017-05-30T09:50:09,,3,,"<p>From the <a href=""https://support.apple.com/en-us/HT202491"" rel=""nofollow noreferrer"">article you linked about Gatekeeper</a>, if the app wasn't signed correctly, the warning would be different - ""[MyApp] is from an unidentified developer"" or ""[MyApp] is damaged and can't be opened"".</p>&#xA;&#xA;<p>So the fact that you're getting ""[MyApp] is an application downloaded from the Internet"" is normal, and shows your app is correctly signed.</p>&#xA;&#xA;<p>What you're seeing is the same warning the user will get downloading <em>any</em> application from the internet. For example, if you download Google Chrome, you will see the same message:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/RJ8Cp.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RJ8Cp.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>So your users should be used to seeing the message any time they download something outside of the Mac App Store.</p>&#xA;&#xA;<p>To remove the warning, they would need to disable Gatekeeper entirely on their systems. There are instructions for doing that in <a href=""http://www.idownloadblog.com/2017/04/20/fix-application-from-internet-gatekeeper/"" rel=""nofollow noreferrer"">this blog post</a>.</p>&#xA;",31280,"",,"",,2017-05-30T09:50:09,"","",,2,,,
44296309,2,,44295998,2017-05-31T23:43:17,,0,,"<p>Add <code>event</code> as a parameter to your <code>validateForm</code> function call:</p>&#xA;&#xA;<pre><code>&lt;form name=""login"" onSubmit=""return validateForm(event);"" action=""home.html"" method=""post""&gt;&#xA;</code></pre>&#xA;&#xA;<p>Then inside your <code>validateForm</code> function use <code>preventDefault()</code> on the incoming <code>event</code> parameter:</p>&#xA;&#xA;<pre><code>function validateForm(event) {&#xA;  event.preventDefault();&#xA;&#xA;  // other code here&#xA;&#xA;  return false;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Also <code>require</code> is not part of regular JavaScript, it is used in <a href=""https://nodejs.org/api/modules.html"" rel=""nofollow noreferrer"">NodeJS</a> to load modules.</p>&#xA;&#xA;<p>You will need to load your javascript files in your HTML:</p>&#xA;&#xA;<pre><code>&lt;script src=""../scripts/logindb""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;",2975240,"",,"",,2017-05-31T23:43:17,"","",,2,,,
44406778,2,,44370512,2017-06-07T07:57:27,,8,,<p>Delete the <code>node_modules</code> folder and then run <code>npm install</code>.</p>&#xA;,3781277,"",2263631,"",2019-04-06T11:32:29,2019-04-06T11:32:29,"","",,2,,,
44450356,2,,44448752,2017-06-09T06:03:24,,1,,"<p>Currently, there are no ready solutions. You can use <a href=""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules-redirectrule.html"" rel=""nofollow noreferrer"">Amazon S3 Routing Rules</a> to redirect <code>win/latest</code> to <code>win/foo_Setup_1.0.0.exe</code> (and you need to change this rule after each release).</p>&#xA;&#xA;<p>I suggest you to <a href=""https://github.com/electron-userland/electron-builder/issues/new"" rel=""nofollow noreferrer"">file issue</a> to electron-builder and someday it will be implemented for you. i.e. electron-builder will automatically create and maintain such rules for you.</p>&#xA;",1910191,"",,"",,2017-06-09T06:03:24,"","",,2,,,
44235255,2,,42236439,2017-05-29T05:38:16,,1,,<p>Change <code>-icon=assets/...</code> to <code>--icon=./assets/...</code></p>&#xA;&#xA;<p>The icon argument should have two hyphens at the start and the path should start with <code>./</code>.</p>&#xA;,6577664,"",,"",,2017-05-29T05:38:16,"","",,3,,,
44252412,2,,44251885,2017-05-30T02:12:04,,0,,"<p>Javascript:<br><br>&#xA;<code>function login(){&lt;br&gt;&#xA;     var id={""name"":""User Name"",&lt;br&gt;&#xA;         ""pw"":""User Password""};&lt;br&gt;&#xA;     var user_id=prompt(""User Name:"")&lt;br&gt;&#xA;     if (user_id!=null){&lt;br&gt;&#xA;        var user_pw=prompt(""Password:"");&lt;br&gt;&#xA;     }if (user_pw!=null){&lt;br&gt;&#xA;        if(user_id == id.name &amp;&amp; user_pw == id.pw){&lt;br&gt;&#xA;        window.open(""//""); // open html website or file&lt;br&gt;&#xA;     }else{&lt;br&gt;&#xA;        alert(""Error Password or Username!"")}}}</code><br>&#xA;<hr>&#xA;Call in Html:<br><br>&#xA;    <code>a href=""#' onclick=""login()""</code><br>&#xA;Good Luck with your project! =)<br>&#xA;Hope you find this helpful :)</p>&#xA;",7838317,"",,"",,2017-05-30T02:12:04,"","",,3,,,
44262219,2,,44261175,2017-05-30T12:24:59,,1,,"<p>You need to create function that assign some variable or just set you div value to text of selection and bind that function to each option onClick.</p>&#xA;&#xA;<pre><code>&lt;input type=""text"" class=""CAPTURE_TB"" placeholder=""ACCOUNT NUMBER"" id=""PP_BUDGET_CLIENT_TB_ACCOUNT_NUMBER""&gt;&#xA;    &lt;div id=""PP_BUDGET_CLIENT_TB_ACCOUNT_NUMBER_SEARCHDIV"" class=""CAPTURE_SEARCH"" style=""display:block;""&gt;&#xA;       &lt;a name=""test"" href=""#CHEESE"" &gt;CHEESE&lt;/a&gt;&#xA;       &lt;a name=""test"" href=""#MILK"" &gt;MILK&lt;/a&gt;&#xA;       &lt;a name=""test"" href=""#BREAD"" &gt;BREAD&lt;/a&gt;&#xA;    &lt;/div&gt;&#xA;&lt;script&gt;&#xA;   function Choose(){&#xA;      document.getElementById('PP_BUDGET_CLIENT_TB_ACCOUNT_NUMBER').value = this.text;&#xA;    }&#xA;    var elements = document.getElementsByName(""test"");&#xA;&#xA;    for (var i = 0; i &lt; elements.length; i++) &#xA;    {&#xA;       elements[i].addEventListener(""click"", Choose, false);&#xA;    }&#xA;    &lt;/script&gt;&#xA;</code></pre>&#xA;",3352734,"",3352734,"",2017-05-30T12:49:41,2017-05-30T12:49:41,"","",,3,,,
44336198,2,,44333164,2017-06-02T19:31:55,,11,,"<p>I have an electron application that uses Vue and a websocket for information and here is how I set mine up.</p>&#xA;&#xA;<p>I have a store defined that also actually creates and sets up the websocket.</p>&#xA;&#xA;<p><strong>Store.js</strong></p>&#xA;&#xA;<pre><code>const socket = require(""socket-library"") // Take your pick of socket libs&#xA;&#xA;const mySocket = new socket(...)&#xA;mySocket.on(""message"", message =&gt; store.handleMessage(message))&#xA;...other handlers...&#xA;&#xA;const store = {&#xA;    handleMessage(message){&#xA;        // do things with the message&#xA;    }&#xA;}&#xA;&#xA;export default store&#xA;</code></pre>&#xA;&#xA;<p><strong>Renderer.js</strong></p>&#xA;&#xA;<pre><code>import store from ""./store""&#xA;&#xA;new Vue({&#xA;    data:{&#xA;        store&#xA;    }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>This exposes my store at the root level of my Vue and allows me to pass data to components, or what have you. The store manages all the incoming information from the websocket.</p>&#xA;&#xA;<p>With you wanting to use Vuex, you could do essentially the same thing, where Vuex would be your store and when messages come in over the socket, you just pass them to Vuex.</p>&#xA;&#xA;<pre><code>mySocket.on(""message"", msg =&gt; vuexStore.dispatch(""onSocketMessage"", msg))&#xA;</code></pre>&#xA;&#xA;<p>and set up your Vue and components to work with Vuex as you typically would.</p>&#xA;",38065,"",38065,"",2017-06-02T19:37:11,2017-06-02T19:37:11,"","",,3,,,
44316555,2,,44316306,2017-06-01T20:28:11,,11,,"<p>You will want to learn how to read comments in code. Here's the full excerpt from the page you linked:</p>&#xA;&#xA;<pre><code>// Quit when all windows are closed.&#xA;app.on('window-all-closed', () =&gt; {&#xA;  // On macOS it is common for applications and their menu bar&#xA;  // to stay active until the user quits explicitly with Cmd + Q&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>The two lines above the if-statement correlate to the if-statement. This basically says that we are <strong>not</strong> quitting the app on macOS <em>because</em> this is a common functionality found in other apps.</p>&#xA;",,user820304,,"",,2017-06-01T20:28:11,"","",,4,,,
60293145,2,,60275500,2020-02-19T04:39:49,,0,,"<p>The Only Option for me to make it work is to upgrade MacOs(OSX EI Captain) to macOS Mojave( 10.14.6).</p>&#xA;&#xA;<p>Somewhere I read some packaging tools have issues with macOS catalina , So I did not opt for it for upgrade and considered Mojave.</p>&#xA;&#xA;<p>Note: The upgrade experience was not that smooth. &#xA;a) Upgrade Process itself took more than 8hrs and I had to leave the laptop for overnight after waiting for 3hrs. But luckily , when I checked in the morning , the laptop was booted up to login screen&#xA;b) When I tried to login, it stuck for hrs there, but I realised after googling it is a common issue and many people faced it. Then I had to follow safe mode booting clearing of NVM etc process . But finally it is thru&#xA;c) Finally  npm install of my app which was working before , broke and the solution was to do</p>&#xA;&#xA;<pre><code>xcode-select --install&#xA;</code></pre>&#xA;&#xA;<p>d) Subsequently the windows build was done without any issue and app is working fine now.</p>&#xA;&#xA;<p>So in short, unless you have at least one day to keep aside , do not attempt the OS upgrade.</p>&#xA;",9336761,"",,"",,2020-02-19T04:39:49,"","",,0,,,
60305453,2,,60304232,2020-02-19T16:54:40,,0,,<p>I could fix the issue After installing .NET 4.8 developer pack</p>&#xA;,9336761,"",,"",,2020-02-19T16:54:40,"","",,0,,,
60316866,2,,59908207,2020-02-20T09:39:06,,0,,"<p>It's because your <code>512x512</code> icon was scaled down to fit with windows desktop's icons's size. </p>&#xA;&#xA;<p>I would suggest you to create an ico file from your icon, this file contains following multiple sizes: <code>16, 24, 32, 48, 64, 128, 256</code>. </p>&#xA;&#xA;<p>After that, put your icon under <code>build</code> directory with name as <code>icon.ico</code></p>&#xA;",6522713,"",,"",,2020-02-20T09:39:06,"","",,0,,,
60322906,2,,60263365,2020-02-20T15:05:11,,0,,"<p>You can <code>import</code> Javascript files/vars/objects by using the <code>import</code> keyword in the component .vue file.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<p><strong>Settings.vue</strong></p>&#xA;&#xA;<pre><code>&lt;template&gt;&#xA; ...&#xA;&lt;/template&gt;&#xA;&#xA;&lt;script&gt;&#xA;import db from '../../database/connection'&#xA;&#xA;export default {&#xA;    name: 'Settings',&#xA;    methods: {&#xA;        async testDbConnection() {&#xA;            // Can access the db object from the import statement&#xA;            let result = await db.sequelize.query(...)&#xA;        },&#xA;&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",412237,"",,"",,2020-02-20T15:05:11,"","",,0,,,
60339676,2,,60333120,2020-02-21T13:31:23,,1,,"<p>You know, the electron app will be running at end user.&#xA;So you should create Socket server at somewhere sth like Cloud server and your electron app should contain one socket.io client instance.</p>&#xA;&#xA;<p>At Socket server</p>&#xA;&#xA;<pre><code>const app = require('express')();&#xA;&#xA;const server = require('http').createServer(app);&#xA;const io = require('socket.io')(server);&#xA;io.on('connection', () =&gt; { /* … */ });&#xA;server.listen(3000);&#xA;</code></pre>&#xA;&#xA;<p>And at frontend (your case Electron app side)</p>&#xA;&#xA;<pre><code>&lt;script src=""/socket.io/socket.io.js""&gt;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;  var socket = io('http://localhost');&#xA;  socket.on('connect', function(){});&#xA;  socket.on('event', function(data){});&#xA;  socket.on('disconnect', function(){});&#xA;&lt;/script&gt; &#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>// with ES6 import&#xA;import io from 'socket.io-client';&#xA;&#xA;const socket = io('http://localhost');&#xA;</code></pre>&#xA;&#xA;<p>So that users can communicate using this your Electron app.</p>&#xA;",10909844,"",,"",,2020-02-21T13:31:23,"","",,0,,,
60346837,2,,60346280,2020-02-21T22:07:29,,0,,"<p>The Tx and Rx baud rates has to be the same to properly decode the information, and the arduino IDE handles that for you in the first case, but you will need to handle it manually for the second case. In serial port communication, single bit is transferred at a time unlike in parallel ports where you will have all bits availed at the same time for reading. So, in serial ports, the rate at which the information is transmitted(Tx) should be the same as the rate at which the information is received(Rx), otherwise bits could be lost and you may get a wrong information. The arduino IDE handles most of these issues for you, if I'm not wrong the IDE allows you to change the baud rate, but the default is 9600. </p>&#xA;",5791997,"",,"",,2020-02-21T22:07:29,"","",,0,,,
60354086,2,,60350520,2020-02-22T16:11:57,,1,,"<p>You need to change or remove the default application menu which has this shortcut <code>Window -&gt; Close Ctrl+W</code> by default</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>Menu.setApplicationMenu(null) // remove default application menu&#xA;&#xA;// or&#xA;&#xA;browserWindow.setMenu(null) // just remove default menu of a specific window and not all windows&#xA;</code></pre>&#xA;&#xA;<p>This should do the trick</p>&#xA;&#xA;<p>Relevant docs:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://www.electronjs.org/docs/api/menu#menusetapplicationmenumenu"" rel=""nofollow noreferrer"">Menu.setApplicationMenu(menu)</a></li>&#xA;<li><a href=""https://www.electronjs.org/docs/api/browser-window#winsetmenumenu-linux-windows"" rel=""nofollow noreferrer"">win.setMenu(menu)</a></li>&#xA;</ul>&#xA;",9698583,"",,"",,2020-02-22T16:11:57,"","",,0,,,
60369437,2,,60350450,2020-02-24T04:10:16,,0,,"<p>I've finally found my problem after a lot of digging.</p>&#xA;&#xA;<p>To my understanding, with Electron, we need to <strong>include ALL scripts into the relevant processes</strong>, e.g., main or renderer, to be able to use the debug consoles. Otherwise, no feedback will be available except for the basic linter that VSCode comes with.</p>&#xA;&#xA;<p>After adding the offending scripts to my main HTML, so that it looks like:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>    &lt;script&gt;&#xA;        // You can also require other files to run in this process&#xA;        require('./renderer.js')&#xA;        require('./tab1.js')&#xA;    &lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>the debug console starts working on these additional scripts such as <code>tab1.js</code>.</p>&#xA;&#xA;<p>But does it mean that I'd have to include all scripts to these two processes only?</p>&#xA;",987846,"",,"",,2020-02-24T04:10:16,"","",,0,,,
60375112,2,,60350123,2020-02-24T11:35:27,,0,,"<p>It appears that the Group Name where shortcut is created depends on electron-packager supplied metadata company name value. An additional parameter to electron-packager fixed the issue:</p>&#xA;&#xA;<p><code>'--win32metadata.CompanyName=""My Company"" '</code></p>&#xA;",757808,"",,"",,2020-02-24T11:35:27,"","",,0,,,
60385712,2,,60332654,2020-02-25T00:00:37,,0,,"<p>This issue has now been resolved. &#xA;I started a new project, specified the version of electron-builder as 22.3.5, ran yarn build and then ran yarn electron-pack. Then I went to my .dist folder and installed the setup exe and then was able to open the .exe application file successfully.</p>&#xA;",7343985,"",,"",,2020-02-25T00:00:37,"","",,0,,,
60390296,2,,60371081,2020-02-25T08:25:23,,0,,"<p>Found a solution npm config (<a href=""https://www.npmjs.com/package/config"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/config</a>) not working (<a href=""https://github.com/lorenwest/node-config/issues/403"" rel=""nofollow noreferrer"">https://github.com/lorenwest/node-config/issues/403</a> )in electronjs. But after using this <a href=""https://github.com/dw1284/electron-node-config"" rel=""nofollow noreferrer"">https://github.com/dw1284/electron-node-config</a> it worked.</p>&#xA;",12870362,"",,"",,2020-02-25T08:25:23,"","",,0,,,
60404109,2,,55959436,2020-02-25T22:26:54,,0,,<p>The only required artifacts appear to be the installer executable and the <code>latest.yml</code> or equivalent.</p>&#xA;&#xA;<p>I'm unsure what the minimum required for differential downloads is. They definitely require the <code>.blockmap</code> file and may also require uploading the <code>win-unpacked</code> folder (on Windows) but I'm not entirely sure.</p>&#xA;,6025788,"",,"",,2020-02-25T22:26:54,"","",,0,,,
60408445,2,,60389646,2020-02-26T07:04:28,,0,,<p>You cannot call the notification in the index.js file as notifications will not be able to access the browser API there. It must be called in the renderer.js which will be able to access the browser APIs.</p>&#xA;,5225577,"",,"",,2020-02-26T07:04:28,"","",,0,,,
60408610,2,,60407623,2020-02-26T07:16:43,,3,,"<p>If you are following  <a href=""https://www.npmjs.com/package/electron-builder"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/electron-builder</a> to generate package the command  ""yarn dist"" will generate package in /dist folder, so it will be excluded from the created  packaged ( app.asar ). So please try to generate package somewhere else. </p>&#xA;&#xA;<p>you can refer <a href=""https://github.com/electron-userland/electron-builder/issues/1401"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-builder/issues/1401</a>&#xA;In this they have tried.</p>&#xA;&#xA;<pre><code>{&#xA;  ""build"": {&#xA;    ""directories"": {&#xA;      ""output"": ""custom-output""&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",4854309,"",,"",,2020-02-26T07:16:43,"","",,0,,,
60432146,2,,60409376,2020-02-27T11:22:31,,0,,<p>Found the solution. I was the firewall's issue. Temporarily disabled it to proceed with the installation.</p>&#xA;,6666396,"",,"",,2020-02-27T11:22:31,"","",,0,,,
60458649,2,,60458235,2020-02-28T20:13:16,,1,,"<p>It sounds like <code>createSignInWindow</code> and <code>closeSignInWindow</code> are being called from different processes. Being different processes, they each their own memory, and each would execute this file independently. So if you create the window in the main process, and close it from the window process, the window process will not think the variable exists.</p>&#xA;&#xA;<p>So it sounds like you need to use <a href=""https://www.electronjs.org/docs/api/ipc-renderer"" rel=""nofollow noreferrer""><code>ipcRenderer</code></a> to communicate from the render to the main process so that it can close the window for you.</p>&#xA;&#xA;<p>It'd be something like:</p>&#xA;&#xA;<pre><code>// renderer&#xA;const { ipcRenderer } = require('electron')&#xA;ipcRenderer.send('close-signin')&#xA;&#xA;// main&#xA;const { ipcMain } = require('electron')&#xA;ipcMain.on('close-signin', closeSignInWindow)&#xA;</code></pre>&#xA;",62076,"",,"",,2020-02-28T20:13:16,"","",,0,,,
60472291,2,,60472041,2020-03-01T05:30:27,,1,,"<p>Because you use <code>EventEmitter.once()</code> method. According to the <a href=""https://nodejs.org/api/events.html#events_emitter_once_eventname_listener"" rel=""nofollow noreferrer"">documentation</a> this method does the next:</p>&#xA;&#xA;<blockquote>&#xA;  <p><em>Adds a one-time listener function for the event named eventName. The</em>&#xA;  <em>next time eventName is triggered, <strong>this listener is removed</strong> and then</em>&#xA;  <em>invoked.</em></p>&#xA;</blockquote>&#xA;&#xA;<p>If you need your worker to process more than one event then use <code>EventEmitter.on()</code></p>&#xA;&#xA;<pre><code>const worker = new Worker('const { parentPort } = require(""worker_threads"");' +&#xA;   'parentPort.on(""message"",message =&gt; parentPort.postMessage({ pong: message }));',&#xA;   { eval: true });&#xA;</code></pre>&#xA;",4544823,"",,"",,2020-03-01T05:30:27,"","",,0,,,
60312083,2,,60310576,2020-02-20T02:30:36,,0,,"<pre><code>function appendItemToMenu(filename) {&#xA;  const newMenu = Menu.getApplicationMenu()&#xA;  curr_menu = newMenu.getMenuItemById('saved').submenu&#xA;  curr_menu.append(&#xA;    new MenuItem({&#xA;      label: path.basename(filename, '.html'),&#xA;      click() {&#xA;        console.log('Saved page opened')&#xA;        win.loadFile(savedFolder + path.basename(filename))&#xA;      }&#xA;    }))&#xA;  Menu.setApplicationMenu(newMenu)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Update the application menu after change. Any dynamic change or append Item not allowed.</p>&#xA;",10909844,"",,"",,2020-02-20T02:30:36,"","",,1,,,
60322185,2,,60315676,2020-02-20T14:26:45,,0,,"<p>You cannot send Function via IPC channel, becasue it cannot be serialized.</p>&#xA;&#xA;<p>From <a href=""https://www.electronjs.org/docs/api/web-contents#contentssendchannel-args"" rel=""nofollow noreferrer"">docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Send an asynchronous message to the renderer process via channel,&#xA;  along with arguments. Arguments will be serialized with the Structured&#xA;  Clone Algorithm, just like postMessage, so prototype chains will not&#xA;  be included. Sending Functions, Promises, Symbols, WeakMaps, or&#xA;  WeakSets will throw an exception.</p>&#xA;</blockquote>&#xA;",2550156,"",,"",,2020-02-20T14:26:45,"","",,1,,,
60328015,2,,60279099,2020-02-20T20:27:09,,2,,"<p>Few years ago I have tried making a prototype Electron app that communicates to bluetooth medical devices(glucometer, blood pressure monitor, weight scale, etc). I was surprised that my codebase in Ionic 1 for the mobile app works in Electron with just minimal adjustments. The app works and was tested on 32bit/64bit WinXP, Win7, Win8 and Win10, MacOSX Mavericks and Ubuntu Linux. It's just not good that they did not pursue that project. I was using the same ionic plugin for bluetooth low energy. </p>&#xA;&#xA;<p><a href=""https://github.com/randdusing/cordova-plugin-bluetoothle"" rel=""nofollow noreferrer"">https://github.com/randdusing/cordova-plugin-bluetoothle</a></p>&#xA;&#xA;<p>I did not find issues on the bluetooth control and operation. My main coding was more focused on Electron and nodejs stuffs.</p>&#xA;&#xA;<p>As for WEB API for Bluetooth, I also studied on that before but I never find a way to make it work.</p>&#xA;&#xA;<p>Since you mention that you have already developed an ionic app with BLE functionality. I was wondering if you have also tried the same code based to the  electron app and also use the same BLE plugin. I think that would work also.</p>&#xA;",2607552,"",2607552,"",2020-02-20T21:10:22,2020-02-20T21:10:22,"","",,1,,,
60352275,2,,60350622,2020-02-22T12:45:56,,1,,"<pre><code>mainWindow = new BrowserWindow({&#xA;    width: 600,&#xA;    height: 600,&#xA;    webPreferences: {&#xA;      contextIsolation: true&#xA;    }&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>Add this <code>contextIsolation:true</code> When you are creating new BrowserWindow</p>&#xA;",10909844,"",,"",,2020-02-22T12:45:56,"","",,1,,,
60391543,2,,60389186,2020-02-25T09:40:47,,0,,"<p>There is no need to take that path on a preload.</p>&#xA;&#xA;<p>Something like this should work instead:</p>&#xA;&#xA;<pre><code>const { ipcRenderer } = require('electron');&#xA;&#xA;document.addEventListener('DOMContentLoaded', (event) =&gt; {&#xA;   const settingsDiv = document.querySelector('&lt;?&gt;');  // replace &lt;?&gt; with your selector for that div element&#xA;   settingsDiv.addEventListener('click', () =&gt; { &#xA;         ipcRenderer.send('test', 'ayy'); &#xA;   });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(the preload runs first, then the page is rendered. So we have to wait until the DOM content is loaded and the div is available)</p>&#xA;",105224,"",105224,"",2020-02-25T10:19:20,2020-02-25T10:19:20,"","",,1,,,
60418661,2,,60415658,2020-02-26T16:44:00,,1,,"<p>According logs that provided by you, It says build script can't find Python. Electron uses node-gyp for build itself, that needs to install python and Visual Studio Build Tools.</p>&#xA;&#xA;<p>I recommend to you install <code>windows-build-tools</code> on <a href=""https://www.npmjs.com/package/windows-build-tools"" rel=""nofollow noreferrer"">npm</a>. It can installed by using command <code>npm install --global windows-build-tools</code>. </p>&#xA;",7080061,"",,"",,2020-02-26T16:44:00,"","",,1,,,
60358161,2,,60357641,2020-02-23T00:34:19,,0,,"<p>You don't say how you are managing the showing/hiding of the windows – so there are a few ways to do what you want. </p>&#xA;&#xA;<p>You could keep it within the <code>Main</code> context by subscribing to the <a href=""https://www.electronjs.org/docs/api/browser-window#event-show"" rel=""nofollow noreferrer"">show</a> event for the window you want to track and just directly increment the counter there. The <code>focus</code> even would work the same way, if you are not actually hiding the windows.</p>&#xA;&#xA;<pre><code>mainWindow.on('show', event =&gt; {&#xA;    global.sharedData.counter += 1;&#xA;    console.log('counter', global.sharedData.counter);&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>From the Render context</strong> – from the docs: <a href=""https://www.electronjs.org/docs/faq#how-to-share-data-between-web-pages"" rel=""nofollow noreferrer"">How to share data between web pages?</a></p>&#xA;&#xA;<p>You can't increment a global property directly from <code>remote</code> - this fails:    <code>remote.getGlobal(""counter"")+=1;</code></p>&#xA;&#xA;<p>but you can change the contents of an object:<br>&#xA;<code>remote.getGlobal(""sharedData"").counter += 1;</code></p>&#xA;&#xA;<p><strong>Main.js</strong></p>&#xA;&#xA;<pre><code>// initialize the container:&#xA;global.sharedData = {counter: 0};&#xA;&#xA;// not needed but just for sanity check&#xA;ipcMain.on('app-message', (event, arg) =&gt; {&#xA;    switch (arg.event) {&#xA;        case ""log counter"":&#xA;            console.log('counter', global.sharedData.counter);&#xA;&#xA;        break;&#xA;     }&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Renderer context</strong></p>&#xA;&#xA;<pre><code>  // wrapped in a button click function&#xA;  $(""#counter-btn"").on(""click"", function (e) {&#xA;&#xA;&#xA;    // *** this is the only line that matters ***   &#xA;    remote.getGlobal(""sharedData"").counter += 1;&#xA;&#xA;&#xA;    // sanity check&#xA;    let c = remote.getGlobal(""sharedData"").counter;&#xA;    console.log('counter', c);&#xA;&#xA;    // tell main to show the value&#xA;    ipcRenderer.send('app-message', { event: ""log counter"" });&#xA;  })&#xA;</code></pre>&#xA;",840992,"",840992,"",2020-02-23T00:39:50,2020-02-23T00:39:50,"","",,2,,,
60360471,2,,60357827,2020-02-23T08:36:24,,0,,"<p>The <code>webContents</code> way should solve your problem in an easy way. It's straightforward: you create and collect all data the window needs in advance, then you spawn the window with that.</p>&#xA;&#xA;<p>There a a few constraints with the <code>webContents</code> way, because the <code>webContents</code> object that you create on <code>main</code> is serialized and send to <code>render</code>- meaning, both processes have independent versions of the object:</p>&#xA;&#xA;<ol>&#xA;<li>Changes you apply to you object on the render process version of your data will not be reflected into main (and vice-versa)</li>&#xA;<li>You can't pass functions (like using that to call a function from main on the render process)</li>&#xA;</ol>&#xA;&#xA;<p>But with plain initialization data: it's easy and understandable.</p>&#xA;&#xA;<p>Edit:</p>&#xA;&#xA;<p>Sure, the send methods needs a channel name and an optional objekt, that is the data that you want to send. You can write a function like so:</p>&#xA;&#xA;<pre><code>sendPersonData(personData) =&gt; {&#xA;   webContents.send('person-data-updated', personData);&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>Or if you want a function that takes a callback for flexible sending:</p>&#xA;&#xA;<pre><code>updatePersonData(personData, senderCallback) =&gt; {&#xA;   updatedPersonData = functionToUpdatePersonData(personData);&#xA;   senderCallback(personData);&#xA;}&#xA;&#xA;// and use that like so:&#xA;updatePersonData({name: 'John Doe'}, sendPersonData);&#xA;</code></pre>&#xA;",105224,"",105224,"",2020-02-24T07:36:41,2020-02-24T07:36:41,"","",,3,,,
60350220,2,,60333505,2020-02-22T08:03:03,,0,,"<p>Programmatically, this can be easily implemented</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { nativeTheme } = require('electron')&#xA;&#xA;nativeTheme.on('updated', function theThemeHasChanged () {&#xA;  updateMyAppTheme(nativeTheme.shouldUseDarkColors)&#xA;})&#xA;&#xA;// set tray &amp; dock images here&#xA;function updateMyAppTheme(isDark) {&#xA;  tray.setImage(isDark? darkTrayImagePath : lightTrayImagePath)&#xA;  dock.setIcon(isDark? darkDockImagePath : lightDockImagePath)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Relevant docs:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://www.electronjs.org/docs/tutorial/mojave-dark-mode-guide"" rel=""nofollow noreferrer"">Supporting macOS Dark Mode</a></li>&#xA;<li><a href=""https://www.electronjs.org/docs/api/native-theme"" rel=""nofollow noreferrer"">nativeTheme</a></li>&#xA;<li><a href=""https://www.electronjs.org/docs/api/tray"" rel=""nofollow noreferrer"">Tray</a></li>&#xA;<li><a href=""https://www.electronjs.org/docs/api/dock"" rel=""nofollow noreferrer"">Dock</a></li>&#xA;</ul>&#xA;",9698583,"",,"",,2020-02-22T08:03:03,"","",,4,,,
60387221,2,,60386905,2020-02-25T03:46:48,,0,,"<p>In node.js, your database variable in main.js is ONLY available within the module scope of main.js where you imported it. If you want it available in webscraper.js, then you need to import it there too or pass it in as an argument. Every module must import the things it needs. This allows modules to explicitly name their dependencies, makes them easier to share or reuse and makes them easier to test. This practice encourage, ""good module design"". </p>&#xA;&#xA;<p>In your specific case, you may want/need to pass the <code>database</code> instance to your <code>scrape()</code> function so it can use the one you've already initialized. </p>&#xA;&#xA;<p>Here's one way to solve that issue (by passing the <code>database</code> instance to the <code>scrape()</code> function as an argument):</p>&#xA;&#xA;<pre><code>// main.js&#xA;var database = require('./src/database.js');&#xA;var webscraper = require('./src/webscraper.js');&#xA;&#xA;database.init().then(()=&gt; {&#xA;    webscraper.scrape(database);&#xA;});&#xA;&#xA;// webscraper.js&#xA;exports.scrape = function(database) {&#xA;    // Find where we left off&#xA;    database.connection.query('SELECT `last_searched` FROM `post_index` WHERE `id` = 0', function (err, results) {&#xA;        if (err) throw err;&#xA;        ...&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",816620,"",,"",,2020-02-25T03:46:48,"","",,5,,,
60319954,2,,60273475,2020-02-20T12:28:33,,6,,"<pre><code>""build"": {&#xA;        ""productName"": ""yourProductName"",&#xA;        ""appId"": ""org.yourProductName"",&#xA;        ""dmg"": {&#xA;            ""contents"": [&#xA;                {&#xA;                    ""x"": 130,&#xA;                    ""y"": 220&#xA;                },&#xA;                {&#xA;                    ""x"": 410,&#xA;                    ""y"": 220,&#xA;                    ""type"": ""link"",&#xA;                    ""path"": ""/Applications""&#xA;                }&#xA;            ]&#xA;        },&#xA;        ""win"": {&#xA;            ""target"": [&#xA;                ""nsis"",&#xA;                ""msi""&#xA;            ]&#xA;        },&#xA;        ""linux"": {&#xA;            ""target"": [&#xA;                ""deb"",&#xA;                ""rpm"",&#xA;                ""snap"",&#xA;                ""AppImage""&#xA;            ],&#xA;            ""category"": ""Development""&#xA;        },&#xA;        ""directories"": {&#xA;            ""buildResources"": ""resources"",&#xA;            ""output"": ""release""&#xA;        }&#xA;    },&#xA;</code></pre>&#xA;&#xA;<p>I attached example electron-builder configuration that I configured for my project before.&#xA;Please consider this part</p>&#xA;&#xA;<pre><code>""directories"": {&#xA;    ""buildResources"": ""resources"",&#xA;    ""output"": ""release""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><code>buildResources</code> should include the resource files like icons.&#xA;<code>output</code> is indicating where your app will be after build and it's optional for your issue.</p>&#xA;&#xA;<p>In my project I'm saving the icons to project root directory like this. I don't know where your icon files are so I attached project structure that is working with this build configuration.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/iVmKJ.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/iVmKJ.png"" alt=""enter image description here""></a></p>&#xA;",10909844,"",10909844,"",2020-02-22T04:28:10,2020-02-22T04:28:10,"","",,12,,,
19323934,2,,19323878,2013-10-11T17:26:51,,0,,"<p>Use the <code>error</code> event for requests, or check the status code of the response:</p>&#xA;&#xA;<pre><code>var https = require('https');&#xA;var req = https.get(options, function(res) {&#xA;  // use res.statusCode&#xA;  if (res.statusCode === 404) {&#xA;    // example for checking 404 errors&#xA;  }&#xA;});&#xA;&#xA;req.on('error', function(err) {&#xA;  // an error has occurred&#xA;});&#xA;</code></pre>&#xA;",1380918,"",,"",,2013-10-11T17:26:51,"","",,1,,,
19286559,2,,19286529,2013-10-10T03:27:03,,1,,"<p>Read the <code>content-length</code> header of the response and compare it to the amount of bytes that have already been downloaded.</p>&#xA;&#xA;<pre><code>var http = require('http');&#xA;var fs = require('fs');&#xA;&#xA;var file = fs.createWriteStream('dest');&#xA;var len = 0;&#xA;&#xA;http.get(url, function(res) {&#xA;  res.on('data', function(chunk) {&#xA;    file.write(chunk);&#xA;    len += chunk.length;&#xA;&#xA;    // percentage downloaded is as follows&#xA;    var percent = (len / res.headers['content-length']) * 100;&#xA;  });&#xA;  res.on('end', function() {&#xA;    file.close();&#xA;  });&#xA;  file.on('close', function() {&#xA;    // the file is done downloading&#xA;    exec('update_setup.exe');&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This code checks the length of the data received and adds it to <code>len</code>. Divide <code>len</code> by the file's total size and multiply by a hundred to get a percentage.</p>&#xA;",1380918,"",1380918,"",2013-10-10T04:15:12,2013-10-10T04:15:12,"","",,10,,,
19401072,2,,19400421,2013-10-16T10:30:00,,2,,"<p><code>Ember.Application</code> has a <a href=""http://emberjs.com/api/classes/Ember.Application.html#event_ready"" rel=""nofollow"">ready event</a>. That could match your needs.</p>&#xA;&#xA;<p>You can use it like this:</p>&#xA;&#xA;<pre><code>window.App = Ember.Application.create({&#xA;    ready: function () {&#xA;        alert('Application ready!');&#xA;    }&#xA;});&#xA;</code></pre>&#xA;",1345947,"",,"",,2013-10-16T10:30:00,"","",,2,,,
19282202,2,,19276699,2013-10-09T20:39:25,,3,,"<p>You can get the manifest as an object in nw, using <code>App</code>. Just extract the version there:</p>&#xA;&#xA;<pre><code>var gui = require('nw.gui');&#xA;var myAppVersion = gui.App.manifest.version;&#xA;</code></pre>&#xA;&#xA;<p>See also <a href=""https://github.com/rogerwang/node-webkit/wiki/App#manifest"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/App#manifest</a></p>&#xA;",279411,"",,"",,2013-10-09T20:39:25,"","",,0,,,
19285877,2,,19285669,2013-10-10T02:07:59,,4,,"<p>Just use the writable stream's <code>close</code> event and spawn a child process. The event will fire once the response has completed piping to the stream.</p>&#xA;&#xA;<pre><code>var https = require('https');&#xA;var fs = require('fs');&#xA;var exec = require('child_process').exec;&#xA;&#xA;var file = fs.createWriteStream('update_setup.exe');&#xA;var request = https.get(path, function(res) {&#xA;  res.pipe(file);&#xA;});&#xA;&#xA;file.on('close', function() {&#xA;  exec('update_setup.exe', function(err, stdout, stderr) {&#xA;    // output from starting&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",1380918,"",,"",,2013-10-10T02:07:59,"","",,5,,,
19313533,2,,19186452,2013-10-11T08:22:57,,5,,"<p>So I solved my problem using the workaround below.</p>&#xA;&#xA;<pre><code>Handle&lt;Object&gt; createBuffer(void *data, size_t size) {&#xA;    if (size == 0)&#xA;        throw ""Zero sized data"";&#xA;    Handle&lt;Value&gt; abv = Context::GetCurrent()-&gt;Global()-&gt;Get(String::NewSymbol(""ArrayBuffer""));&#xA;    Handle&lt;Value&gt; argv[] = { Integer::NewFromUnsigned(size) };&#xA;    Handle&lt;Object&gt; arrbuf = Handle&lt;Function&gt;::Cast(abv)-&gt;NewInstance(1, argv);&#xA;    void *buffer = arrbuf-&gt;GetPointerFromInternalField(0);&#xA;    memcpy(buffer, data, size);&#xA;&#xA;    Handle&lt;Value&gt; ui8av = Context::GetCurrent()-&gt;Global()-&gt;Get(String::NewSymbol(""Uint8Array""));&#xA;    argv[0] = arrbuf;&#xA;    Handle&lt;Object&gt; result = Handle&lt;Function&gt;::Cast(ui8av)-&gt;NewInstance(1, argv);&#xA;    return result;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Obviously in the v8 namespace.<br>&#xA;It seems that node, and in consequence node-webkit, re-implements the ArrayBuffer, TypedArray, Uint8Array and so on in node/src/v8_typed_array.cc. They are totally different from the ones in v8.h and they haven't an header file to include.<br>&#xA;Initially I had in my javascript code something like this:</p>&#xA;&#xA;<pre><code>var buffer = ... // call function that in the end call createBuffer&#xA;var data = new Uint8Array(buffer);&#xA;</code></pre>&#xA;&#xA;<p>and createBuffer was returning the arrbuf ArrayBuffer but I had problems doing that: data length was always 0. Instead, by creating the Uint8Array in c++ code the behavior is right, I don't know why.</p>&#xA;",1122966,"",,"",,2013-10-11T08:22:57,"","",,0,,,
19191102,2,,19157659,2013-10-04T21:28:56,,20,,"<p>To open a link in the user's default browser, you could use <code>gui.Shell.openExternal(""http://website.com"")</code>. Checkout the documentation for <a href=""https://github.com/rogerwang/node-webkit/wiki/Shell"">gui.Shell</a>.</p>&#xA;",568420,"",,"",,2013-10-04T21:28:56,"","",,3,,,
21747241,2,,21746570,2014-02-13T06:56:03,,1,,"<p>I suggest you to use the application data path.&#xA;See the documentation <a href=""https://github.com/rogerwang/node-webkit/wiki/App"" rel=""nofollow"">here</a></p>&#xA;&#xA;<p>An exemple</p>&#xA;&#xA;&#xA;&#xA;<pre><code>var gui = require('nw.gui');&#xA;var path = require('path');&#xA;var yaml = require('js-yaml');&#xA;var fs = require('fs');&#xA;&#xA;var confPath = path.join(gui.App.dataPath, 'conf', ""dev-conf.yml"");&#xA;try {&#xA;  conf = yaml.load(fs.readFileSync(confPath, 'utf-8'));&#xA;} catch (err) {&#xA;  throw new Error(""Cannot read or parse configuration file '""+confPath+""': ""+err);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It's a good pratice to separate code and configuration, and App.dataPath aims at the application specific folder in user's application data (different for each OS).</p>&#xA;&#xA;<p>I generally use an installer to copy my configuration file into it.</p>&#xA;&#xA;<p>Next tip: I prefer using YAML instead of JSON for my configuration or settings, because it allows you to insert comments inside the file.</p>&#xA;",1182976,"",,"",,2014-02-13T06:56:03,"","",,3,,,
21857897,2,,21817005,2014-02-18T15:16:36,,1,,"<p>After including jQuery and the following JavaScript, the problem can be solved.</p>&#xA;&#xA;<pre><code>    $(document).ready(function(){&#xA;        $(window).resize(function(){&#xA;            window.resizeTo(507,570);&#xA;            window.focus();&#xA;        });&#xA;    });&#xA;</code></pre>&#xA;",1564698,"",,"",,2014-02-18T15:16:36,"","",,0,,,
21965670,2,,20925821,2014-02-23T07:58:08,,2,,"<p>Taking from the answers at <a href=""https://groups.google.com/forum/#!topic/node-webkit/NxhJ4dO80Gc"" rel=""nofollow"">https://groups.google.com/forum/#!topic/node-webkit/NxhJ4dO80Gc</a> you can avoid showing the window on load by setting the <code>show</code> option in package.json</p>&#xA;&#xA;<pre><code>""window"": {&#xA;  ""show"" false&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And then once the application has loaded, you can use</p>&#xA;&#xA;<pre><code>var win = gui.Window.get();&#xA;win.show();&#xA;</code></pre>&#xA;&#xA;<p>to show the window. </p>&#xA;&#xA;<p>However, when combined with kiosk mode, then the behaviour of this isn't quite as nice as I would like, at least on a mac, as there are appearances of full-screen black or white before the window is shown.</p>&#xA;",1319998,"",,"",,2014-02-23T07:58:08,"","",,0,,,
21965786,2,,21114655,2014-02-23T08:11:51,,2,,"<p>Maybe what you are looking for is Pyjs, is not entirely build to do that, but that's the nearest thing to it I have found.</p>&#xA;",736246,"",,"",,2014-02-23T08:11:51,"","",,0,,,
21757087,2,,21754917,2014-02-13T14:32:17,,4,,"<p>As per the documentation in <a href=""https://github.com/rogerwang/node-webkit/wiki/Window#wiki-windowminimize"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/Window#wiki-windowminimize</a> call </p>&#xA;&#xA;<pre><code>win.minimize();&#xA;</code></pre>&#xA;&#xA;<p>instead</p>&#xA;",1529564,"",,"",,2014-02-13T14:32:17,"","",,2,,,
47962497,2,,47962061,2017-12-24T17:03:32,,0,,"<p>Seems it was an order of operations problem, the set command should be executed when the app has finished loading. For example:</p>&#xA;&#xA;<pre><code>win.webContents.on('did-finish-load', function() {&#xA;    win.setRepresentedFilename( filePath );&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The above should work. You'll have to handle it such that you have the url to pass. You can use ipcMain and such.</p>&#xA;",6095037,"",,"",,2017-12-24T17:03:32,"","",,0,,,
47964638,2,,47962590,2017-12-24T23:13:21,,0,,"<p>As @mschmidt pointed out, and confirmed elsewhere, the dock icon cannot be bounced when the app has focus.</p>&#xA;",6095037,"",,"",,2017-12-24T23:13:21,"","",,0,,,
47981908,2,,47979502,2017-12-26T17:39:29,,0,,"<p>If you want to spawn proces you node's <a href=""https://nodejs.org/api/process.html"" rel=""nofollow noreferrer"">process module</a>.</p>&#xA;&#xA;<p>And if you want to integrate terminal more deeply like in vs code you would have to redirect stdin, stdout and probably stderror.</p>&#xA;&#xA;<p>It's all described in node documentation.</p>&#xA;",5080787,"",,"",,2017-12-26T17:39:29,"","",,0,,,
48003336,2,,47864616,2017-12-28T07:23:15,,0,,<p>I workaround this by using the <code>--gen-all</code> flag when using <code>flatc</code> to compile the schema files for now.</p>&#xA;,1136027,"",,"",,2017-12-28T07:23:15,"","",,0,,,
48006896,2,,47060025,2017-12-28T11:43:56,,0,,<p>Ended up creating two database files with ~600 000 records in each. Search is done in both databases and results are merged. </p>&#xA;,2319724,"",,"",,2017-12-28T11:43:56,"","",,0,,,
48021295,2,,48019996,2017-12-29T10:41:16,,0,,"<p>Replace <code>pacVariable = new pacfile()</code> with</p>&#xA;&#xA;<pre><code>var FindProxyForURL = pac(fs.readFileSync('pacfile.pac'));&#xA;FindProxyForURL('https://domain.name.com/#/random/login').then((res) =&gt; {&#xA;  console.log(res);      &#xA;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>refer the <a href=""https://github.com/TooTallNate/node-pac-resolver"" rel=""nofollow noreferrer"">docs</a> for API</p>&#xA;&#xA;<p>FindProxyForURL is a promise, so you'll have to write the code that requires the response inside the <code>.then</code>.</p>&#xA;",5893921,"",,"",,2017-12-29T10:41:16,"","",,1,,,
48026902,2,,48026819,2017-12-29T18:34:07,,0,,"<p>Use <code>.append()</code> instead of <code>.html()</code> so you add items instead of overwriting it every time.</p>&#xA;&#xA;<p>From the JQuery docs:</p>&#xA;&#xA;<p><code>When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content.</code></p>&#xA;",3049127,"",,"",,2017-12-29T18:34:07,"","",,1,,,
48028798,2,,44078591,2017-12-29T21:47:08,,0,,<p>Updating VLC to 2.2.4 and upper resolved my problem.</p>&#xA;,774091,"",,"",,2017-12-29T21:47:08,"","",,0,,,
48031308,2,,48017984,2017-12-30T05:36:12,,0,,"<p>I got the solution. </p>&#xA;&#xA;<p>Need to add following array in <code>webpack.config.js</code>.</p>&#xA;&#xA;<pre><code> externals: [&#xA;(function () {&#xA;    var IGNORES = [""fs"",""child_process"",""electron"",""path"",""assert"",""cluster"",""crypto"",""dns"",""domain"",""events"",""http"",""https"",""net"",""os"",""process"",""punycode"",""querystring"",""readline"",""repl"",""stream"",""string_decoder"",""tls"",""tty"",""dgram"",""url"",""util"",""v8"",""vm"",""zlib""];&#xA;    return function (context, request, callback) {&#xA;        if (IGNORES.indexOf(request) &gt;= 0) {&#xA;            return callback(null, ""require('"" + request + ""')"");&#xA;        }&#xA;        return callback();&#xA;    };&#xA;})()&#xA;],&#xA;</code></pre>&#xA;&#xA;<p>This will tell ionic to ignore modules listed in array <code>IGNORES</code>.</p>&#xA;",7088848,"",7088848,"",2017-12-30T07:19:59,2017-12-30T07:19:59,"","",,1,,,
48049428,2,,47971578,2018-01-01T11:53:06,,0,,"<pre><code>const shell = nodeRequire('electron').shell&#xA;&#xA;$(document).on('click', 'a[href^=""http""][target=""_blank""]', function (event){&#xA;    event.preventDefault();&#xA;    shell.openExternal(this.href);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>is working as well, but only if I click on link by left button, but if I click by wheel, it do shit....</p>&#xA;&#xA;<p>so new queston: <strong>How can I open link in external browser if I click by wheel?</strong></p>&#xA;",,user8070076,,"",,2018-01-01T11:53:06,"","",,2,,,
48085506,2,,48085073,2018-01-03T21:39:16,,0,,"<p>You will likely need some backend service to handle the signalling component (how the two devices share SDP messages, candidates, or other data with each other). WebRTC doesn't specify any signalling, that's up to the implementer.</p>&#xA;&#xA;<p>Once the two devices have negotiated via SDP and shared the candidates, then they can connect directly to each other.</p>&#xA;",1135577,"",,"",,2018-01-03T21:39:16,"","",,0,,,
48093381,2,,47993447,2018-01-04T10:34:21,,0,,<p>TypeScript accepts a normal <code>require()</code> as well as the <code>import</code> syntax. For example:</p>&#xA;&#xA;<pre><code>const express = require('express');&#xA;// OR&#xA;import * as express from 'express';&#xA;</code></pre>&#xA;,2265722,"",,"",,2018-01-04T10:34:21,"","",,0,,,
48094706,2,,48085141,2018-01-04T11:53:36,,0,,"<p>To answer my own question.</p>&#xA;&#xA;<p>The event's referring to the web page in the BrowserWindow, not the webview within that. So the element doesn't exist in the scope I was looking in, and I needed to do something similar <em>within</em> the BrowserWindow.</p>&#xA;&#xA;<p><strong>Code:</strong></p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;&lt;head&gt;&#xA;  &lt;style type=""text/css""&gt;&#xA;    * { margin: 0; }&#xA;    #browserGoogle { height: 100%; }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;  &lt;webview id=""browserGoogle"" src=""https://google.com""&gt;&lt;/webview&gt;&#xA;  &lt;script&gt;&#xA;    const browserView = document.getElementById('browserGoogle')&#xA;    browserView.addEventListener('dom-ready', () =&gt; {&#xA;      const browser = browserView.getWebContents()&#xA;      browser.setDevToolsWebContents(devtoolsView.getWebContents())&#xA;      browser.webContents.executeJavaScript('var element=document.getElementsByClassName(""gsst_a"");void 0!==element&amp;&amp;null!=element?(console.log(""yep, element is found""),console.log(element),console.log(element[0]),a=setInterval(function(){document.getElementsByClassName(""gsst_a"")[0].click()},1e3)):console.log(""nope, element is not found"");', true);&#xA;    })&#xA;  &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",685288,"",,"",,2018-01-04T11:53:36,"","",,0,,,
48098740,2,,48093173,2018-01-04T15:44:23,,0,,"<p>If you've set resizable to false initially and then setResize(true), sure you can resize, then the docking feature in windows will be broken.&#xA;I've made an issue here to track the issue: <a href=""https://github.com/electron/electron/issues/11568"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/11568</a></p>&#xA;&#xA;<p>My solution is to allow the user to always resize in favor of breaking the docking functionality.</p>&#xA;&#xA;<p>Also the original question has been edited to have a reproducable issue.</p>&#xA;",4098348,"",,"",,2018-01-04T15:44:23,"","",,0,,,
48116209,2,,48097937,2018-01-05T15:06:29,,0,,"<p>I found that I can use ipcRenderer.emit in one class, and in another class I can hear the messages using ipcRenderer.on</p>&#xA;",2179289,"",,"",,2018-01-05T15:06:29,"","",,0,,,
47968244,2,,47957517,2017-12-25T11:37:01,,1,,<p>Setting the environment variable <code>ELECTRON_RUN_AS_NODE</code> will run Electron as node so I can just set that environment variable when spawning Electron</p>&#xA;,128511,"",128511,"",2017-12-25T11:48:42,2017-12-25T11:48:42,"","",,0,,,
48068910,2,,48067974,2018-01-02T22:52:02,,1,,"<p>no, it is not possible at the moment. Electron takes chromium's specific (libchromiumcontent) and integrates it with node.js, which chromium os does not support to execute natively.</p>&#xA;",2742189,"",,"",,2018-01-02T22:52:02,"","",,4,,,
48069619,2,,48068877,2018-01-03T00:21:21,,1,,"<p>electron's ipc between process does not allow non-serializable objects and only sends plain object over, so this is expected. You may send only plain object and reconstruct object on receiver process side to have full object you want.</p>&#xA;",2742189,"",,"",,2018-01-03T00:21:21,"","",,1,,,
48081263,2,,48080523,2018-01-03T16:24:10,,1,,"<p>You can do as Kirk Larkin says - use the Client Credentials flow.</p>&#xA;&#xA;<p>The following code is in .NET:</p>&#xA;&#xA;<pre><code> var client = new TokenClient(&#xA;            BaseAddress + ""/connect/token"",&#xA;            ""clientId"",&#xA;            ""clientSecret"");&#xA;&#xA;var result = client.RequestClientCredentialsAsync(scope: ""my.api"").Result;&#xA;&#xA;var accessToken = result.AccessToken;&#xA;</code></pre>&#xA;&#xA;<p>Where BaseAddress is your IDS address.</p>&#xA;&#xA;<p>Of course you will have to register your client in the IDS clients list with the appropriate flow (Client Credentials), and the scope is just optional, but I guess you will need one.</p>&#xA;&#xA;<p>Then accessing a protected API is fairly easy:</p>&#xA;&#xA;<pre><code>var client = new HttpClient();&#xA;client.SetBearerToken(accessToken);&#xA;var result = client.GetStringAsync(""https://protectedapiaddress"").Result;&#xA;</code></pre>&#xA;&#xA;<p><strong>EDIT</strong>: For JavaScript approach:</p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/simple-oauth2"" rel=""nofollow noreferrer"">This</a> and <a href=""https://www.npmjs.com/package/client-oauth2"" rel=""nofollow noreferrer"">this</a> look like a working solution, but I've tried neither of them</p>&#xA;",6462951,"",6462951,"",2018-01-03T20:28:07,2018-01-03T20:28:07,"","",,3,,,
48117553,2,,45679180,2018-01-05T16:27:13,,1,,"<p>Answering to myself: Using this options in <code>package-win</code> is wrong. As package-win executes the build task, then:</p>&#xA;&#xA;<pre><code>""build"": ""npm run build-main &amp;&amp; npm run build-renderer"",&#xA;...&#xA;""build-main"": ""cross-env NODE_ENV=production node --max_old_space_size=6144 --optimize_for_size --stack_size=6144 --trace-warnings -r babel-register ./node_modules/webpack/bin/webpack --config webpack.config.main.prod.js --progress --profile --colors"",&#xA;""build-renderer"": ""cross-env NODE_ENV=production node --max_old_space_size=6144 --optimize_for_size --stack_size=6144 --trace-warnings -r babel-register ./node_modules/webpack/bin/webpack --config webpack.config.renderer.prod.js --progress --profile --colors"",&#xA;</code></pre>&#xA;&#xA;<p>That way it works!</p>&#xA;",1303826,"",,"",,2018-01-05T16:27:13,"","",,0,,,
48146610,2,,47102692,2018-01-08T08:32:25,,2,,"<p>Enable the UTF-8 charset in your HTML. If you using the Electron, enable it in index.html file</p>&#xA;&#xA;<pre><code>&lt;meta charset=""utf-8""&gt;&#xA;</code></pre>&#xA;",1099939,"",,"",,2018-01-08T08:32:25,"","",,0,,,
47956454,2,,47955815,2017-12-23T22:16:03,,3,,"<p>You should configure correct google api key to request google related services in chromium. </p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/environment-variables.md#google_api_key"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/environment-variables.md#google_api_key</a></p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/9420"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/9420</a></p>&#xA;",2742189,"",,"",,2017-12-23T22:16:03,"","",,3,,,
47982102,2,,47981429,2017-12-26T18:02:43,,3,,"<p>To change if a window is resizable you have to call <a href=""https://electronjs.org/docs/api/browser-window#winsetresizableresizable"" rel=""nofollow noreferrer""><code>mainWindow.setResizable(false)</code></a> instead of <code>.resizable = false</code>.</p>&#xA;&#xA;<p>And it seems that you're setting resizable to false when it's already false, I think you want to set it to true to enable resizing.</p>&#xA;&#xA;<p>In summary you would end up with something like:</p>&#xA;&#xA;<pre><code>label: 'Screen',&#xA;submenu: [&#xA;  {&#xA;    label: 'Resizable Window',&#xA;    click () {&#xA;      mainWindow.setResizable(true);&#xA;    }&#xA;  },&#xA;],&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/browser-window#winsetresizableresizable"" rel=""nofollow noreferrer""><code>.setResizable</code></a> Docs.</p>&#xA;",6577664,"",6577664,"",2020-01-22T01:00:03,2020-01-22T01:00:03,"","",,3,,,
48004248,2,,46044042,2017-12-28T08:39:33,,3,,"<p>I was able to achieve that using <strong>ngx-childprocess</strong> </p>&#xA;&#xA;<p><strong>In 3 steps:</strong> </p>&#xA;&#xA;<ol>&#xA;<li><p>in your electron/angular app install <strong>ngx-childprocess</strong></p>&#xA;&#xA;<pre><code>yarn add ngx-childprocess&#xA;or&#xA;npm install ngx-childprocess --save&#xA;</code></pre></li>&#xA;<li><p>add <strong>gx-childprocess</strong> into <strong>app.module</strong></p>&#xA;&#xA;<pre><code>imports: [&#xA;    NgxChildProcessModulem&#xA;    ....&#xA;</code></pre></li>&#xA;<li><p>run the script (in this case I am running java jar)</p>&#xA;&#xA;<pre><code>import { ChildProcessService } from 'ngx-childprocess';&#xA;... &#xA;export class AppComponent {&#xA;&#xA;   constructor(private childProcessService: ChildProcessService) {&#xA;        console.log('isElectronApp ' + childProcessService.isElectronApp);&#xA;        let options: string[] = [];&#xA;        childProcessService.childProcess.exec('java -jar child-process-test-1.0.jar', &#xA;                                              options,&#xA;                                              (data) =&gt; {console.log(data);});&#xA;   }&#xA;}&#xA;</code></pre></li>&#xA;</ol>&#xA;",5215278,"",,"",,2017-12-28T08:39:33,"","",,1,,,
48027832,2,,48027689,2017-12-29T19:59:42,,3,,"<p>You'll want to set <code>nodeIntegration</code> to false in your <code>BrowserWindow</code> settings. That should resolve the issue. Have a look at <code>webPreferences</code> on this page: <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/browser-window.md</a></p>&#xA;",1367039,"",,"",,2017-12-29T19:59:42,"","",,0,,,
48029596,2,,48029552,2017-12-29T23:41:25,,3,,"<p>Looking at <a href=""https://github.com/electron-userland/electron-packager/blob/master/docs/api.md"" rel=""nofollow noreferrer""><code>electron-packager</code>'s docs</a>, there does not seem to be a way to preserve timestamps.</p>&#xA;&#xA;<p>As an alternative, you could check the hash of the file instead to determine if the file has been modified.</p>&#xA;",2544756,"",,"",,2017-12-29T23:41:25,"","",,0,,,
48050175,2,,48044239,2018-01-01T13:45:14,,3,,"<p>The reason it doesn't work in your renderer process is it's bundled via browserify, which aims to generate bundle for <code>browser</code>. Specific code you're failing rely on node.js side globals (process), so browserify cannot able to bundle it correctly. Moreover, sqlite3 module have native module inside which cannot be bundled. Other bundlers like webpack have way (<code>externals</code> option) to specify not to try bundle it, you may need to configure in similar way using browserify if it supports it. </p>&#xA;&#xA;<p>It also explains why example app works, it doesn't do any bundling for renderer process.</p>&#xA;",2742189,"",,"",,2018-01-01T13:45:14,"","",,2,,,
48053737,2,,48051567,2018-01-01T22:23:44,,3,,"<p>I fixed this by:</p>&#xA;&#xA;<p>Changing the pathname of the page to __dirname + ""build/index.html""</p>&#xA;&#xA;<p>and adding </p>&#xA;&#xA;<p>""files: [&#xA;""build"",&#xA;""*.js"",&#xA;""public""]</p>&#xA;&#xA;<p>to my package.json (It is not updated in the github repo if anybody needs it)</p>&#xA;",,user9161077,,"",,2018-01-01T22:23:44,"","",,0,,,
48083258,2,,48083143,2018-01-03T18:37:15,,3,,"<p>You shouldn't use arrow function. Please, do a test and check what is <code>this</code> in your code.</p>&#xA;&#xA;<p>Check this</p>&#xA;&#xA;<pre><code>computed: {&#xA;  value: function () {&#xA;    return Number(this.sw1) + Number(this.sw2)&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Vue binding application instance to this function under the hood. It isn't possible for arrow functions.</p>&#xA;",3936476,"",3936476,"",2018-01-03T18:46:44,2018-01-03T18:46:44,"","",,0,,,
48092991,2,,48092318,2018-01-04T10:11:30,,3,,"<p>Well, this is not an easy topic. Your solution could work: you Electron app ask your server for data and store data to it. Anyway the best solution depends from your application. </p>&#xA;&#xA;<p>The most important points that you have to ask yourself are:</p>&#xA;&#xA;<ul>&#xA;<li>How often do you need to reach your server ?</li>&#xA;<li>Your users could work without data from server ?</li>&#xA;<li>How long does it takes to read and store data on your server ? (it's different if you store some kb or many gb of data)</li>&#xA;<li>The data stored online must be shared with other users or every user has access to its own data ?</li>&#xA;</ul>&#xA;&#xA;<p>If all the information are stored in your server your startup have to wait for the request to complete but you can show a loader or something like this to mitigate the waiting.</p>&#xA;&#xA;<p>In my opinion you have many choices, from the simplest (and slowest) to the most complex (but that mitigate network lag):</p>&#xA;&#xA;<ol>&#xA;<li>Simple AJAX requests to your server: as you described you will do some HTTP requests to your server and read and write data to be displayed on your application. Your user will have to wait for the requests to complete. Show them some loading animations to mitigate the wait.</li>&#xA;<li>There are some solutions that save the data locally to your electron installation and then sync them online, Have a check to <a href=""https://github.com/pouchdb/pouchdb"" rel=""nofollow noreferrer"">PuchDB</a> for an example</li>&#xA;<li>Recently I'm looking at <a href=""http://graphql.org"" rel=""nofollow noreferrer"">GraphQL</a>. GraphQL is an API to query your data. It's not that easy but it has some interesting features, it has an <a href=""https://www.apollographql.com/docs/react/basics/caching.html"" rel=""nofollow noreferrer"">internal cache</a> and it's already studied for <a href=""https://www.apollographql.com/docs/react/features/optimistic-ui.html"" rel=""nofollow noreferrer"">optimistic update</a>.  You update your application immediately thinking that your POST will be fine and then if something goes wrong you update it accordingly.</li>&#xA;</ol>&#xA;&#xA;<p>I'd also like to suggest you to try some solutions as a service. You don't have a server already and you will have to open a new contract so why don't you check some dedicated service like <a href=""https://firebase.google.com/docs/database/"" rel=""nofollow noreferrer"">Firebase</a>? Google Firebase Realtime Database allows you to work in javascript (just one language involved in the project), sync your data online automatically and between devices without the need to write any webservice. I'have just played with it for some prototypes but it looks very interesting and it's cheap. It also has a free plan that it's enough for many users.</p>&#xA;&#xA;<p>Keep in mind that if your user has access only to their data the fastest and easies solution is to use a database inside your electron application. A sqlite database, an <a href=""https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"" rel=""nofollow noreferrer"">IndexDB</a> database or even serialize to JSON and then store everything in localstorage (if your data fits size limits). </p>&#xA;&#xA;<p>Hope this helps</p>&#xA;",87407,"",,"",,2018-01-04T10:11:30,"","",,2,,,
48005335,2,,48004206,2017-12-28T09:58:35,,4,,"<p>Electron is actually Chromium browser on the front end and nodejs on the backend. Building an electron app is technically building a webpage which ships its back end along with it.</p>&#xA;&#xA;<p>If you have a dynamic application that needs to rerender frequently, ReactJS’s virtual DOM will be super effective</p>&#xA;&#xA;<p>So, if you're used to 'throwing' react at any problem that has the term 'web application' in it, i would suggest you go with reactjs. </p>&#xA;",5893921,"",,"",,2017-12-28T09:58:35,"","",,1,,,
48072395,2,,48058838,2018-01-03T06:38:37,,6,,"<p>Chris gave an exact explanation. Just posting the code for the same</p>&#xA;&#xA;<pre><code>win = new BrowserWindow({&#xA;        width: 900,&#xA;        height: 680,&#xA;        webPreferences: {&#xA;            webSecurity: false&#xA;        }&#xA;});&#xA;//second alternative&#xA;app.commandLine.appendSwitch('ignore-certificate-errors');&#xA;</code></pre>&#xA;",7260635,"",,"",,2018-01-03T06:38:37,"","",,1,,,
48076258,2,,48075839,2018-01-03T11:14:54,,11,,"<p>You are requesting something and node is not able to find it. You can read this <a href=""https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8"" rel=""noreferrer"">dedicated article on requiring modules in node</a>, which explains it quite simply. Quoting:</p>&#xA;&#xA;<blockquote>&#xA;  <p>When we require a 'find-me' module, without specifying a path:</p>&#xA;  &#xA;  <p><code>require('find-me');</code></p>&#xA;  &#xA;  <p>Node will look for <code>find-me.js</code> in all the paths specified by&#xA;  <code>module.paths</code> — in order.</p>&#xA;&#xA;<pre><code>$ node&#xA;&gt; module.paths&#xA;[ '/Users/samer/learn-node/repl/node_modules',&#xA;  '/Users/samer/learn-node/node_modules',&#xA;  '/Users/samer/node_modules',&#xA;  '/Users/node_modules',&#xA;  '/node_modules',&#xA;  '/Users/samer/.node_modules',&#xA;  '/Users/samer/.node_libraries',&#xA;  '/usr/local/Cellar/node/7.7.1/lib/node' ]&#xA;</code></pre>&#xA;  &#xA;  <p>The paths list is basically a list of node_modules directories under&#xA;  every directory from the current directory to the root directory. It&#xA;  also includes a few legacy directories whose use is not recommended.</p>&#xA;  &#xA;  <p>If Node can’t find <code>find-me.js</code> in any of these paths, it will throw a&#xA;  “cannot find module error.”</p>&#xA;&#xA;<pre><code>~/learn-node $ node&#xA;&gt; require('find-me')&#xA;Error: Cannot find module 'find-me'&#xA;    at Function.Module._resolveFilename (module.js:470:15)&#xA;    at Function.Module._load (module.js:418:25)&#xA;    at Module.require (module.js:498:17)&#xA;    at require (internal/module.js:20:19)&#xA;    at repl:1:1&#xA;    at ContextifyScript.Script.runInThisContext (vm.js:23:33)&#xA;    at REPLServer.defaultEval (repl.js:336:29)&#xA;    at bound (domain.js:280:14)&#xA;    at REPLServer.runBound [as eval] (domain.js:293:12)&#xA;    at REPLServer.onLine (repl.js:533:10)&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<p>Make sure you have your module installed somewhere in what node knows as <code>module.paths</code>, or reference the file by providing absolute path.</p>&#xA;",3233388,"",3233388,"",2018-01-03T11:28:50,2018-01-03T11:28:50,"","",,3,,,
47962333,2,,47957479,2017-12-24T16:37:15,,23,,"<p>Figured it out thanks to <a href=""https://discuss.atom.io/t/app-getpath-userdata-seems-to-give-the-wrong-path/26006"" rel=""noreferrer"">this</a></p>&#xA;&#xA;<pre><code>const remote = require('electron').remote;&#xA;const app = remote.app;&#xA;console.log(app.getPath('userData'));&#xA;</code></pre>&#xA;",929321,"",,"",,2017-12-24T16:37:15,"","",,0,,,
55430002,2,,54128383,2019-03-30T09:29:24,,1,,"<p>The line <code>""!**/src""</code> in your exclude list is the culprit. </p>&#xA;&#xA;<ol>&#xA;<li>Many node modules will have <code>""src""</code> folders which have to be packaged/bundled along with your application source code. </li>&#xA;<li>If you observe <code>""debug""</code> module folder under <code>""node_modules""</code> it has a <code>""src""</code> folder which has been excluded by above rule.</li>&#xA;</ol>&#xA;&#xA;<hr>&#xA;&#xA;<p>Suggestion: If you have your apps source folder as <code>""src""</code>, rename it to something else like <code>""source""</code> (which is in your control), but ensure you don't exclude <code>""src""</code> folders of <code>node_modules</code> (renaming these is not in your control as it could break the module's integrity and they get overwritten on fresh <code>npm install</code> also)</p>&#xA;",11280967,"",2313887,"",2019-03-30T10:15:46,2019-03-30T10:15:46,"","",,0,,,
55431442,2,,55384590,2019-03-30T12:30:01,,0,,"<p>For anyone interested in support of PDF viewer in election version 3.1.7 use the mentioned plugin above. To use PDF navigation in URL, to navigate using file:pathofyour.pdf#page=pagenumber just uncomment the content in isPDF() function and replace it with resolve(true)</p>&#xA;&#xA;<p>Electron is a great way to develope cross platform applications but the api is not really mature and is alternated a way to often with every major release in my opinion</p>&#xA;",4779586,"",,"",,2019-03-30T12:30:01,"","",,0,,,
55477017,2,,55474279,2019-04-02T14:15:18,,2,,"<p>You can use the <a href=""https://electronjs.org/docs/api/browser-window#winisfocused"" rel=""nofollow noreferrer""><code>isFocused</code> method from <code>BrowserWindow</code></a>. To get your own BrowserWindow, you can do this :</p>&#xA;&#xA;<pre><code>remote.BrowserWindow.getAllWindows();&#xA;</code></pre>&#xA;&#xA;<p>This will return all your app's windows. So to get the first / primary window, you could deconstruct the array like this :</p>&#xA;&#xA;<pre><code>const [yourBrowserWindow] = remote.BrowserWindow.getAllWindows();&#xA;console.log(yourBrowserWindow.isFocused());&#xA;</code></pre>&#xA;",3670132,"",,"",,2019-04-02T14:15:18,"","",,0,,,
55520059,2,,55479392,2019-04-04T15:43:39,,0,,"<p>Turns out, I was just exporting incorrectly. <code>modules.export</code> was the point of failure as <code>modules</code> is undefined on the <code>renderer</code>.</p>&#xA;&#xA;<p>Instead, if I do the following to export individual functions:</p>&#xA;&#xA;<pre><code>// ./myJS/myOtherJS.js&#xA;export function rFunc() { ...}&#xA;</code></pre>&#xA;&#xA;<p>And then import into my <code>renderer.js</code> like:</p>&#xA;&#xA;<pre><code>import { rFunc } from './myJS/myOtherJS';&#xA;rFunc();&#xA;</code></pre>&#xA;&#xA;<p>Things work as I originally expected.</p>&#xA;&#xA;<p>This <a href=""https://developers.google.com/web/fundamentals/primers/modules"" rel=""nofollow noreferrer"">Google Developers Primer</a> on modules was useful in understanding the concepts.</p>&#xA;",1392578,"",,"",,2019-04-04T15:43:39,"","",,0,,,
55543015,2,,55343838,2019-04-05T20:36:52,,0,,"<p>So, I took an JQuery Ajax course and applied to my problem and it worked!!</p>&#xA;&#xA;<p>I used a $.get() function. Before calling it I toggle the visibility of my css loading animation and after $.get is done, I toggle again the visibility of my css loading animation.</p>&#xA;&#xA;<p>Here's the code</p>&#xA;&#xA;<pre><code>$('#submitBtn').click({dataArr, reportsType}, (e) =&gt; {&#xA;&#xA;    emptyBody()&#xA;&#xA;    // show gif&#xA;    $('.donutSpinner').toggle()&#xA;&#xA;    let activeFilters = createActiveFilters()&#xA;&#xA;    $.get(`../../assets/csv/${fileName}`, (rawCsv) =&gt; {&#xA;&#xA;        // I transfered the csv processing inside the get callback&#xA;        dataArr = processRawCsv(rawCsv)&#xA;&#xA;        let filteredReportsList = filterLines(activeFilters, dataArr)&#xA;&#xA;        showFilteredLines(filteredReportsList, reportsType)&#xA;        // -------------------------------------------------------&#xA;    })&#xA;    .fail(() =&gt; {&#xA;        console.log('falhou!')&#xA;    })&#xA;    .always(() =&gt; {&#xA;&#xA;        // hide gif&#xA;        $('.donutSpinner').toggle()&#xA;&#xA;        zebraRows()&#xA;    })&#xA;})&#xA;</code></pre>&#xA;",8122065,"",,"",,2019-04-05T20:36:52,"","",,0,,,
55543565,2,,55543512,2019-04-05T21:24:15,,2,,"<p>You can use the variable provided by NodeJS: <code>process.platform</code>. If it equals to <code>darwin</code> then Electron is running on Mac.</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre><code>if (process.platform == 'darwin') {&#xA;    // your Mac code&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Check <a href=""https://nodejs.org/api/process.html#process_process_platform"" rel=""nofollow noreferrer"">official documentation</a>.</p>&#xA;",2912912,"",2912912,"",2019-04-07T21:54:39,2019-04-07T21:54:39,"","",,0,,,
55551367,2,,55532923,2019-04-06T16:55:28,,1,,"<p>you can prevent it before close and hide window.</p>&#xA;&#xA;<pre><code>const {app} = require('electron');&#xA;const winConfig = {&#xA;        minWidth: 420,&#xA;        minHeight: 530,&#xA;        width: 400,&#xA;        height: 530&#xA;    }&#xA;app.on('ready', () =&gt; {&#xA;   win = new BrowserWindow(winConfig);&#xA;   win.on('close', function (event){&#xA;      event.preventDefault()&#xA;      win.hide()&#xA;      return false&#xA;   })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>with this code it prevent to close window and for quit app you can call <code>app.quit()</code>.&#xA;if you use this and send your app to background I recommend you to use tray module for restore and have access your app again.</p>&#xA;",8893132,"",,"",,2019-04-06T16:55:28,"","",,0,,,
55558340,2,,55554977,2019-04-07T11:10:38,,1,,"<pre><code>const matrix = document.querySelector('.matrix');&#xA;&#xA;katex.render(""\\begin{Bmatrix}\n\n   a &amp; b \\\\\n\n   c &amp; d\n\n\\end{Bmatrix}"", matrix, {&#xA;   throwOnError: false&#xA;});&#xA;</code></pre>&#xA;",11324337,"",,"",,2019-04-07T11:10:38,"","",,0,,,
55562608,2,,55389659,2019-04-07T19:03:36,,1,,"<p>As you stated in your question and per this <a href=""https://github.com/louischatriot/nedb/issues/531#issuecomment-337230091"" rel=""nofollow noreferrer"">Github issue</a> on the <code>nedb</code> package the root cause of your issue is that webpack's file resolution process reads the <code>package.browser</code> key in order to alias specific file paths to a different location when the <code>target</code> build is <code>browser</code> or some other value that will cause it to inspect the <code>package.browser</code> property.</p>&#xA;&#xA;<p><code>electron-vue</code> appears to <a href=""https://github.com/SimulatedGREG/electron-vue/blob/master/template/.electron-vue/webpack.renderer.config.js#L29-L31"" rel=""nofollow noreferrer"">sidestep the webpack bundling issue</a> by treating all NPM dependencies as <a href=""https://webpack.js.org/configuration/externals/"" rel=""nofollow noreferrer""><code>externals</code></a> so that they don't get pulled into the application bundle and instead are expected to be defined on <code>global</code> by some other means. You could similarly designate <code>nedb</code> as an external in your webpack config and pull the Node version into your application via script tag or defining a reference to it on <code>global</code> some other way.</p>&#xA;&#xA;<p>Another solution would be to create a webpack resolver plugin to override how the problematic requires for <code>""./lib/customUtils.js""</code> and <code>""./lib/storage.js""</code> get resolved, bypassing the resolution step that inspects package.browser for aliases for those file paths. </p>&#xA;&#xA;<p>See the webpack documentation for <a href=""https://webpack.js.org/configuration/resolve#resolveplugins"" rel=""nofollow noreferrer"">how to pass a custom resolver plugin</a> in your Webpack config. See the <code>wepback/enhanced-resolve</code> documentation for additional details on <a href=""https://github.com/webpack/enhanced-resolve#plugins"" rel=""nofollow noreferrer"">how plugins are defined</a> and how they work. </p>&#xA;&#xA;<p>Essentially, a plugin is an object with an <code>apply</code> method that takes a <code>resolver</code> instance and performs some step of the file resolution process. In the example below, we test to see whether the current file being resolved is in the <code>nedb</code> package and whether it's one of the two problematic browser aliases. If so, we exit the resolution process with the correct paths to the files. Otherwise we do nothing and defer to the normal resolution process.</p>&#xA;&#xA;<pre><code>// Prevents nedb from substituting browser storage when running from the&#xA;// Electron renderer thread.&#xA;const fixNedbForElectronRenderer = {&#xA;  apply(resolver) {&#xA;    resolver&#xA;      // Plug in after the description file (package.json) has been&#xA;      // identified for the import, which makes sure we're not getting&#xA;      // mixed up with a different package.&#xA;      .getHook(""beforeDescribed-relative"")&#xA;      .tapAsync(&#xA;        ""FixNedbForElectronRenderer"",&#xA;        (request, resolveContext, callback) =&gt; {&#xA;          // When a require/import matches the target files, we&#xA;          // short-circuit the Webpack resolution process by calling the&#xA;          // callback with the finalized request object -- meaning that&#xA;          // the `path` is pointing at the file that should be imported.&#xA;          const isNedbImport = request.descriptionFileData[""name""] === ""nedb""&#xA;&#xA;          if (isNedbImport &amp;&amp; /storage(\.js)?/.test(request.path)) {&#xA;            const newRequest = Object.assign({}, request, {&#xA;              path: resolver.join(&#xA;                request.descriptionFileRoot,&#xA;                ""lib/storage.js""&#xA;              )&#xA;            })&#xA;            callback(null, newRequest)&#xA;          } else if (&#xA;            isNedbImport &amp;&amp;&#xA;            /customUtils(\.js)?/.test(request.path)&#xA;          ) {&#xA;            const newRequest = Object.assign({}, request, {&#xA;              path: resolver.join(&#xA;                request.descriptionFileRoot,&#xA;                ""lib/customUtils.js""&#xA;              )&#xA;            })&#xA;            callback(null, newRequest)&#xA;          } else {&#xA;            // Calling `callback` with no parameters proceeds with the&#xA;            // normal resolution process.&#xA;            return callback()&#xA;          }&#xA;        }&#xA;      )&#xA;  }&#xA;}&#xA;&#xA;// Register the resolver plugin in the webpack config&#xA;const config = {&#xA;  resolve: {&#xA;    plugins: [fixNedbForElectronRenderer]&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",5069859,"",,"",,2019-04-07T19:03:36,"","",,0,,,
55576488,2,,55570793,2019-04-08T15:07:18,,0,,"<p>On your client-side Javascript, you could require <code>remote</code> to obtain the version of your application:</p>&#xA;&#xA;<pre><code>var appVersion = require(""electron"").remote.app.getVersion();&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>remote (<a href=""https://electronjs.org/docs/api/remote"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/remote</a>)</p>&#xA;  &#xA;  <blockquote>&#xA;    <p>Use main process modules from the renderer process.</p>&#xA;  </blockquote>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://github.com/1nv1n/review-dashboard/blob/master/src/js/renderer/infoModal.js#L30"" rel=""nofollow noreferrer"">Example</a> of how I'm using it to determine app version.</p>&#xA;",1392578,"",,"",,2019-04-08T15:07:18,"","",,0,,,
55597474,2,,55459902,2019-04-09T16:38:33,,0,,<p>The best possible fix i got is the build the system in windows and then deploy it for windows. You need to google at every step where it breaks and then fix it. There are many possibilities and hence i cannot describe it here.</p>&#xA;,9470457,"",,"",,2019-04-09T16:38:33,"","",,0,,,
55619058,2,,51972307,2019-04-10T18:23:54,,1,,<p>A combination of focus() with setAlwaysOnTop(true) helps. </p>&#xA;&#xA;<pre><code> chaiAsPromised.transferPromiseness = app.transferPromiseness;&#xA;    return app.start().then( async () =&gt; {&#xA;      await app.browserWindow.focus();&#xA;      await app.browserWindow.setAlwaysOnTop(true);&#xA;    });&#xA;  });&#xA;</code></pre>&#xA;,8903949,"",,"",,2019-04-10T18:23:54,"","",,0,,,
55622321,2,,55618945,2019-04-10T22:48:12,,1,,"<p>Use relative URL, like: <code>src=""js/app-my-hash.bundle.js""</code> or <code>src=""./js/app-my-hash.bundle.js""</code></p>&#xA;",303874,"",,"",,2019-04-10T22:48:12,"","",,0,,,
55628924,2,,55596537,2019-04-11T09:18:52,,1,,"<p>You have no access to <code>document</code> in the main process (where I suppose you have this code). You have to communicate between your processes by using IPC, code execution on HTML or even globals. (You can find lot of articles about it online)&#xA;See <a href=""https://electronjs.org/docs/tutorial/application-architecture"" rel=""nofollow noreferrer""><code>electron's architecture</code></a> for details.</p>&#xA;&#xA;<p>An example to deal with this scenario could be&#xA;</p>&#xA;&#xA;<p><em>main.js</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow, Menu, dialog } = require('electron')&#xA;const fs = require('fs')&#xA;const path = require('path')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  let win = new BrowserWindow()&#xA;  win.loadURL(path.join(__dirname, 'index.html'))&#xA;  win.setMenu(Menu.buildFromTemplate([&#xA;    {&#xA;      label: 'Open File',&#xA;      click (menuItem, browserWindow, event) {&#xA;        dialog.showOpenDialog({&#xA;          properties: ['openFile']&#xA;        }, (filePath) =&gt; {&#xA;          fs.readFile(filePath[0], (err, data) =&gt; {&#xA;            if (!err) {&#xA;              browserWindow.webContents.send('print-file', data.toString())&#xA;            }&#xA;        })&#xA;        })&#xA;      }&#xA;    }&#xA;  ]))&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>index.html</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>&lt;html&gt;&#xA;  &lt;body&gt;&#xA;    &lt;script&gt;&#xA;      const { ipcRenderer } = require('electron')&#xA;      ipcRenderer.on('print-file', (event, datastr) =&gt; {&#xA;        document.getElementsByTagName(""p"")[0].textContent = datastr&#xA;      })&#xA;    &lt;/script&gt;&#xA;    &lt;p&gt;&lt;/p&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",2550156,"",,"",,2019-04-11T09:18:52,"","",,0,,,
55430416,2,,55429954,2019-03-30T10:17:53,,0,,"<p>Your header.php file is a HTML document. Since you require it, it will be interpreted as PHP which causes the syntax error.</p>&#xA;&#xA;<p>Either create a valid PHP header file or print the contents from the header.php file. I would not recommend the later.</p>&#xA;&#xA;<p>A simple solution would be:</p>&#xA;&#xA;<ol>&#xA;<li>Rename your header.php to header.tpl (.tpl as in template)</li>&#xA;<li>Change you dashboard.php</li>&#xA;</ol>&#xA;&#xA;<pre><code>&lt;?php&#xA;print file_get_contents('header.tpl'); &#xA;?&gt;&#xA;...&#xA;</code></pre>&#xA;",5448475,"",5448475,"",2019-03-30T12:02:39,2019-03-30T12:02:39,"","",,1,,,
55433744,2,,55433442,2019-03-30T17:03:08,,0,,"<p>My guess is because of reactivity. As the documentation says:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Vue <strong>cannot</strong> detect the following changes to an array:  </p>&#xA;  &#xA;  <ul>&#xA;  <li>When you directly set an item with the index, e.g.<br>&#xA;  <code>vm.items[indexOfItem] = newValue</code> </li>&#xA;  </ul>&#xA;  &#xA;  <p><a href=""https://vuejs.org/v2/guide/list.html#Caveats"" rel=""nofollow noreferrer"">Source</a></p>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<p>To make your first example work, you can try the <code>splice</code> or <code>set</code> methods:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>for(i = 0; i &lt; this.playlistArray.length; i++) {&#xA;  if(this.playlist[i] == '') {&#xA;    this.playlistArray.splice(i, 1, pathArray[i + j])&#xA;    // or&#xA;    this.$set(this.playlistArray, i, pathArray[i + j])&#xA;    j++;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Note: you use this condition <code>if(this.playlist[i] == '')</code>. Where <code>playlist</code> property comes from ? Do you mean <code>playlistArray</code> instead ?</p>&#xA;",9541423,"",,"",,2019-03-30T17:03:08,"","",,1,,,
55435940,2,,54679249,2019-03-30T21:48:50,,6,,"<p>Ran into same thing trying to move from an older boiler plate to using Vue-CLI 3 just now.</p>&#xA;&#xA;<p>Run this from within the project directory and see if it works:<br>&#xA;<code>./node_modules/.bin/vue-cli-service electron:build --windows</code></p>&#xA;&#xA;<p>I got the <code>--windows</code> from the <code>ui.js</code> file in the <code>vue-cli-plugin-electron-builder</code> directory under <code>node_modules</code>. Other options are <code>--linux</code> and <code>--macos</code>. I'm surprised I don't see a <code>--all</code> flag or that all isn't the default. </p>&#xA;&#xA;<p>If you add <code>""build:win"": ""vue-cli-service electron:build --windows""</code> under <code>scripts</code> in your <code>package.json</code> then you can instead run <code>npm run build:win</code> from there on.</p>&#xA;",4224506,"",,"",,2019-03-30T21:48:50,"","",,1,,,
55463675,2,,55462919,2019-04-01T21:15:42,,1,,"<p>Given that you want to load a local HTML file into an existing HTML page, there are two options:</p>&#xA;&#xA;<h2>Option 1 - <code>fs</code> module</h2>&#xA;&#xA;<p>You say this is excessive, but I'd see it as the local counterpart to ""ajax"" requests.</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;body&gt;&#xA;    &lt;button id=""my-button""&gt;Click me&lt;/button&gt;&#xA;    &lt;div id=""my-div""&gt;First content&lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&lt;script type=""text/javascript""&gt;&#xA;    var fs = require('fs');&#xA;&#xA;    document.getElementById('my-button').addEventListener('click', function() {&#xA;        fs.readFile('external_content.html', function (err, data) {&#xA;            document.getElementById('my-div').innerHTML = data.toString()&#xA;        })&#xA;    })&#xA;&lt;/script&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<h2>Option 2 - <code>iframe</code></h2>&#xA;&#xA;<p>Another option would be to use an <code>iframe</code>, which allows to change part of the website without javascript.</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;body&gt;&#xA;    &lt;a href=""external_content.html"" target=""my-iframe""&gt;Click me&lt;/a&gt;&#xA;&#xA;    &lt;iframe name=""my-iframe"" src=""first_content.html""&gt;&lt;/iframe&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",1335237,"",,"",,2019-04-01T21:15:42,"","",,1,,,
55471301,2,,55470949,2019-04-02T09:28:51,,2,,"<p>If anybody is interested, the solution is actually very easy:</p>&#xA;&#xA;<p>All you need to do is to add a ""role"" to the menu item:</p>&#xA;&#xA;<pre><code> ctxMenu.append(new MenuItem({&#xA;    label:'Paste',&#xA;    role:'paste',&#xA;    click:()=&gt;{console.log('Paste clicked!')}&#xA;  }))&#xA;</code></pre>&#xA;&#xA;<p>That's it, works.</p>&#xA;",8340889,"",,"",,2019-04-02T09:28:51,"","",,1,,,
55503332,2,,55502020,2019-04-03T19:57:17,,3,,"<p>If you follow the HTML5 rules a <code>div</code> tag can not be self closed. Check more on <a href=""http://xahlee.info/js/html5_non-closing_tag.html"" rel=""nofollow noreferrer"">this site</a></p>&#xA;&#xA;<p>So modify your original code <code>line#6</code> to mentioned below.</p>&#xA;&#xA;<p><code>&lt;div id=""whiteSheet""&gt;&lt;/div&gt;</code></p>&#xA;",7292077,"",,"",,2019-04-03T19:57:17,"","",,1,,,
55612328,2,,55610757,2019-04-10T12:15:31,,4,,"<p>You can either dispatch the request from the renderer process and deal with the response in the callback that is executed after the data is received or make the request in the main process and then send a message to the renderer.</p>&#xA;&#xA;<h1>Option 1: Request and handling within renderer</h1>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;body&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;script type=""text/javascript""&gt;&#xA;&#xA;    const request = require('request')&#xA;&#xA;    let serverUrl = 'http://localhost:3000/api'&#xA;&#xA;    request.get({&#xA;        url: serverUrl + '/properties'&#xA;    }, handleResponse)&#xA;&#xA;    function handleResponse(error, response, body) {&#xA;        properties = JSON.parse(response.body)&#xA;        for (var i in properties) {&#xA;            document.write('&lt;p&gt;' + properties[i] + '&lt;/p&gt;')&#xA;        }&#xA;    }&#xA;&#xA;&lt;/script&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<h1>Option 2: Request in main, send response to renderer</h1>&#xA;&#xA;<p>Main:</p>&#xA;&#xA;<pre><code>const request = require('request')&#xA;let serverUrl = 'http://localhost:3000/api'&#xA;&#xA;request.get({&#xA;    url: serverUrl + '/properties'&#xA;}, handleResponse)&#xA;&#xA;function handleResponse(error, response, body) {&#xA;    properties = JSON.parse(response.body)&#xA;    mainWindow.webContents.send('my_message', properties)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Renderer:</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;body&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;script type=""text/javascript""&gt;&#xA;&#xA;    require('electron').ipcRenderer.on('my_message', function(e, message) {&#xA;        console.log(message)&#xA;        for (var i in message) {&#xA;            document.write('&lt;p&gt;' + message[i] + '&lt;/p&gt;');&#xA;        }&#xA;    });&#xA;&#xA;&lt;/script&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",1335237,"",,"",,2019-04-10T12:15:31,"","",,1,,,
55617471,2,,55617388,2019-04-10T16:39:07,,4,,"<blockquote>&#xA;  <p>I don't see the point of setting <code>newWindow</code> to <code>null</code> right before&#xA;  the function ends.</p>&#xA;</blockquote>&#xA;&#xA;<p>That code doesn't set <code>newWindow</code> to <code>null</code> <em>right before the function ends</em>. It sets it when the <code>window</code> gets closed <strong>(which will be sometime in the future)</strong> and therefore <code>newWindow</code> will persist in memory until that time. </p>&#xA;&#xA;<p>The <code>.on</code> callback uses the <code>newWindow</code> variable, which is declared in a higher scope, thereby setting up a <strong><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"" rel=""nofollow noreferrer"">closure</a></strong> around it. <strong>This means that <code>newWindow</code> will persist after the function that it is declared in (the arrow function assigned to <code>exports.createWindow</code>) ends.</strong></p>&#xA;&#xA;<p>To prevent the variable from persisting indefinitely, the assignment to <code>null</code> is there to ensure that the memory is released when the <code>window</code> that was using it is closed.</p>&#xA;",695364,"",695364,"",2019-04-10T16:42:47,2019-04-10T16:42:47,"","",,1,,,
55630490,2,,55544936,2019-04-11T10:38:22,,3,,"<p>As far as I see context isolation is designed to prevent the very case you described. So if you want to add data to <code>window</code> the best you can do is disable isolation.</p>&#xA;&#xA;<p>However, I looked up the <a href=""https://developer.chrome.com/extensions/content_scripts#host-page-communication"" rel=""nofollow noreferrer"">Content Scripts</a> docs referred in <a href=""https://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer"">BrowserWindow</a> docs at the <code>contextIsolation</code> definition and find a way to use <code>postMessage</code> to get the clipboard text.</p>&#xA;&#xA;<p>&#xA;<em>main.js</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow } = require('electron')&#xA;const path = require('path')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  let win = new BrowserWindow({&#xA;    webPreferences: {&#xA;      nodeIntegration: false,&#xA;      contextIsolation: true,&#xA;      preload: path.join(__dirname, 'preload.js')&#xA;    }&#xA;  })&#xA;  win.loadURL(path.join(__dirname, 'index.html'))&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>preload.js</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { clipboard } = require('electron')&#xA;&#xA;window.addEventListener(""message"", (event) =&gt; {&#xA;  if (event.source != window) return&#xA;  if (event.data.type &amp;&amp; (event.data.type == ""READCLIP_REQ"")) {&#xA;    window.postMessage({ type: ""READCLIP_ANS"", text: window.readClipboard() }, ""*"")&#xA;  }&#xA;}, false)&#xA;&#xA;window.readClipboard = function(){&#xA;  return clipboard.readText()&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><em>index.html</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>&lt;html&gt;&#xA;  &lt;body&gt;&#xA;    &lt;p&gt;&lt;/p&gt;&#xA;    &lt;p&gt;&lt;/p&gt;&#xA;    &lt;script&gt;&#xA;      // Try window.readClipboard directly (works with no isolation)&#xA;      document.getElementsByTagName(""p"")[0].innerText =&#xA;        window.readClipboard &amp;&amp; window.readClipboard()&#xA;      // Try the same with postMessage&#xA;      const readClipboardMessage = () =&gt; {&#xA;        window.postMessage({ type: ""READCLIP_REQ"" }, ""*"")&#xA;      }&#xA;      window.addEventListener(""message"", (event) =&gt; {&#xA;        if (event.source != window) return&#xA;        if (event.data.type &amp;&amp; (event.data.type == ""READCLIP_ANS"")) {&#xA;          document.getElementsByTagName(""p"")[1].innerText = event.data.text&#xA;        }&#xA;      }, false)&#xA;      readClipboardMessage()&#xA;    &lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",2550156,"",,"",,2019-04-11T10:38:22,"","",,1,,,
55601096,2,,55600896,2019-04-09T20:46:45,,1,,"<p>There are several problems with your current setup:</p>&#xA;&#xA;<ol>&#xA;<li>Try not to use event emitter for signaling events within an HTTP request, it wasn't made for this.</li>&#xA;<li>With HTTP requests, try not to use global variables for data received during the request, when two requests come in at the same time, they may get confused and get sent the wrong data.</li>&#xA;</ol>&#xA;&#xA;<pre><code>appi.listen(4000, () =&gt; {&#xA; console.log('server at port 4000');&#xA;});&#xA;&#xA;appi.get('/', (req,res)=&gt; {&#xA;  const { URL } = req.query;&#xA;  ytdl.getInfo(URL, (err,info) =&gt; {&#xA;    if(err) throw err;&#xA;    const songTitle = info.title;&#xA;    const sfn = filenamify(songTitle);&#xA;    let stream = ytdl(URL, {&#xA;      quality: 'highestaudio',&#xA;    });&#xA;    res.set('Content-Disposition', 'attachment; filename=' + sfn + '.mp3');&#xA;    res.set('Content-type', 'audio/mpeg');&#xA;    const proc = new ffmpeg({source: stream})&#xA;    proc.withAudioCodec('libmp3lame').toFormat('mp3').output(res).run();&#xA;  });&#xA;})&#xA;</code></pre>&#xA;",9274408,"",,"",,2019-04-09T20:46:45,"","",,2,,,
55505589,2,,55464204,2019-04-03T23:09:48,,2,,"<p>It worked for me using the following code:</p>&#xA;&#xA;<pre><code>const { app, globalShortcut } = require('electron')&#xA;const robot = require('robotjs')&#xA;&#xA;app.on('ready', () =&gt; {&#xA;    globalShortcut.register('Control+Shift+R', () =&gt; {&#xA;&#xA;        console.log('Control+Shift+R is pressed')&#xA;&#xA;        // simulate CTRL+V / CMD+V&#xA;        setTimeout(() =&gt; {&#xA;            robot.keyTap('v', process.platform==='darwin' ? 'command' : 'control')&#xA;        }, 150)&#xA;    })&#xA;})&#xA;&#xA;app.on('will-quit', () =&gt; {&#xA;    globalShortcut.unregisterAll()&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>The ""trick"" here is to <strong>delay the simulated key press by a certain interval</strong> in order to untangle the actual, physical key press and the simulated one. With shorter intervals, I often saw a ""v"" appear.</p>&#xA;&#xA;<p>You'll need to decide whether to go for a longer delay (less user friendly because of long ""wait"", but unlikely to mix up keys) or a shorter delay (prompt response, more likely to get wrong result due to key press mixup).</p>&#xA;&#xA;<p>If we're talking about highly repetitive work or big chunks of text, this will probably still be a timesaver.</p>&#xA;",1335237,"",1335237,"",2019-04-03T23:17:17,2019-04-03T23:17:17,"","",,3,,,
55520771,2,,55473659,2019-04-04T16:20:46,,3,,"<p>I don't think that <code>chromium</code> is a valid target per <a href=""https://github.com/browserslist/browserslist#browsers"" rel=""nofollow noreferrer"">browsers list</a> documentation. Try <code>""chrome"": ""73""</code> as a target. Note that the value for a given target should be a string type, not a number.</p>&#xA;&#xA;<p>If there is a plugin that you don't want to include then the <code>exclude</code> key should let you <a href=""https://babeljs.io/docs/en/babel-preset-env#exclude"" rel=""nofollow noreferrer"">blacklist a plugin</a> that would otherwise be used based on the target environments that you provided. <code>""exclude"": [""@babel/plugin-transform-regenerator""]</code>.</p>&#xA;&#xA;<p><strong>Question Asker's note</strong></p>&#xA;&#xA;<p>This solved my problem. I achieved the desired result with:</p>&#xA;&#xA;<pre><code>{&#xA;  ""presets"": [&#xA;    [&#xA;      ""next/babel"",&#xA;      {&#xA;        ""preset-env"": {&#xA;          ""targets"": {&#xA;            ""chrome"": ""73"",&#xA;            ""node"": ""11""&#xA;          }&#xA;        }&#xA;      }&#xA;    ]&#xA;  ]&#xA;}&#xA;&#xA;</code></pre>&#xA;",5069859,"",807674,"",2019-04-05T00:47:21,2019-04-05T00:47:21,"","",,3,,,
55538792,2,,55460379,2019-04-05T15:26:14,,2,,"<p>With the help of Stein Åsmul, this is my current solution:</p>&#xA;&#xA;<p>I took the current <a href=""https://github.com/electron-userland/electron-builder/blob/7f0ede7182ab6db8efb0cf4bf3cb183be712fb4e/packages/app-builder-lib/templates/msi/template.xml"" rel=""nofollow noreferrer"">WiX template of electron-builder</a> and added an option to write variables to an ini file. </p>&#xA;&#xA;<pre class=""lang-xml prettyprint-override""><code>&lt;Property Id=""MYSERVER"" Value=""notDefined""/&gt;&#xA;&lt;Property Id=""MYSECONDPROPERTY"" Value=""notDefined""/&gt;&#xA;...&#xA;&lt;Directory Id=""APPLICATIONFOLDER"" Name=""${installationDirectoryWixName}""&gt;&#xA;  &lt;Component Id=""AddLineTo_AppConfig.ini"" Guid=""{4171FB60-FDC5-46CF-A4D8-4AE9CADB4BE9}"" KeyPath=""yes"" Feature=""ProductFeature""&gt;&#xA;    &lt;IniFile Id=""AddLineTo_AppConfig.ini1"" Name=""AppConfig.ini"" Directory=""APPLICATIONFOLDER"" Section=""AppConfig"" Key=""Server"" Value=""&amp;quot;[MYSERVER]&amp;quot;"" Action=""addLine""/&gt;&#xA;    &lt;IniFile Id=""AddLineTo_AppConfig.ini2"" Name=""AppConfig.ini"" Directory=""APPLICATIONFOLDER"" Section=""AppConfig"" Key=""SecondProp"" Value=""&amp;quot;[MYSECONDPROPERTY]&amp;quot;"" Action=""addLine""/&gt;&#xA;  &lt;/Component&gt;&#xA;&lt;/Directory&gt;&#xA;</code></pre>&#xA;&#xA;<p>The complete template looks like this:</p>&#xA;&#xA;<pre class=""lang-xml prettyprint-override""><code>&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&#xA;&lt;Wix xmlns=""http://wixtoolset.org/schemas/v4/wxs""&gt;&#xA;  &lt;!-- extended Template from https://github.com/electron-userland/electron-builder/blob/7f0ede7182ab6db8efb0cf4bf3cb183be712fb4e/packages/app-builder-lib/templates/msi/template.xml --&gt;&#xA;  &lt;!-- https://blogs.msdn.microsoft.com/gremlininthemachine/2006/12/05/msi-wix-and-unicode/ --&gt;&#xA;  &lt;Product Id=""*"" Name=""${productName}"" UpgradeCode=""${upgradeCode}"" Version=""${version}"" Language=""1033"" Codepage=""65001"" Manufacturer=""${manufacturer}""&gt;&#xA;    &lt;Package Compressed=""yes"" InstallerVersion=""500""/&gt;&#xA;&#xA;    &lt;Condition Message=""Windows 7 and above is required""&gt;&lt;![CDATA[Installed OR VersionNT &gt;= 601]]&gt;&lt;/Condition&gt;&#xA;&#xA;    &lt;!--&#xA;    AllowSameVersionUpgrades:&#xA;      When set to no (the default), installing a product with the same version and upgrade code (but different product code) is allowed and treated by MSI as two products.&#xA;      When set to yes, WiX sets the msidbUpgradeAttributesVersionMaxInclusive attribute, which tells MSI to treat a product with the same version as a major upgrade.&#xA;&#xA;      So, AllowSameVersionUpgrades=""yes"" allows to build and test MSI with the same version, and previously installed app will be removed.&#xA;    --&gt;&#xA;    &lt;MajorUpgrade AllowSameVersionUpgrades=""yes"" DowngradeErrorMessage='A newer version of ""[ProductName]"" is already installed.'/&gt;&#xA;    &lt;MediaTemplate CompressionLevel=""${compressionLevel}"" EmbedCab=""yes""/&gt;&#xA;&#xA;    &lt;Property Id=""ApplicationFolderName"" Value=""${installationDirectoryWixName}""/&gt;&#xA;    &lt;Property Id=""WixAppFolder"" Value=""WixPerUserFolder""/&gt;&#xA;    &lt;Property Id=""MYSERVER"" Value=""notDefined""/&gt;&#xA;    &lt;Property Id=""MYSECONDPROPERTY"" Value=""notDefined""/&gt;&#xA;&#xA;    {{ if (iconPath) { }}&#xA;    &lt;Icon Id=""icon.ico"" SourceFile=""${iconPath}""/&gt;&#xA;    &lt;Property Id=""ARPPRODUCTICON"" Value=""icon.ico""/&gt;&#xA;    {{ } -}}&#xA;&#xA;    {{ if (isAssisted || isRunAfterFinish) { }}&#xA;    &lt;CustomAction Id=""runAfterFinish"" FileKey=""mainExecutable"" ExeCommand="""" Execute=""immediate"" Impersonate=""yes"" Return=""asyncNoWait""/&gt;&#xA;    {{ } -}}&#xA;&#xA;    &lt;Property Id=""ALLUSERS"" Secure=""yes"" Value=""2""/&gt;&#xA;    {{ if (isPerMachine) { }}&#xA;    &lt;Property Id=""MSIINSTALLPERUSER"" Secure=""yes""/&gt;&#xA;    {{ } else { }}&#xA;    &lt;Property Id=""MSIINSTALLPERUSER"" Secure=""yes"" Value=""1""/&gt;&#xA;    {{ } -}}&#xA;&#xA;    {{ if (isAssisted) { }}&#xA;    &lt;!-- Check ""Run after finish"" checkbox by default --&gt;&#xA;    &lt;Property Id=""WIXUI_EXITDIALOGOPTIONALCHECKBOX"" Value=""1""/&gt;&#xA;    &lt;Property Id=""WIXUI_EXITDIALOGOPTIONALCHECKBOXTEXT"" Value=""Run ${productName}""/&gt;&#xA;&#xA;    &lt;UIRef Id=""WixUI_Assisted""/&gt;&#xA;    {{ } else if (isRunAfterFinish) { }}&#xA;    &lt;!-- https://stackoverflow.com/questions/1871531/launch-after-install-with-no-ui --&gt;&#xA;    &lt;InstallExecuteSequence&gt;&#xA;      &lt;Custom Action=""runAfterFinish"" After=""InstallFinalize""/&gt;&#xA;    &lt;/InstallExecuteSequence&gt;&#xA;    {{ } -}}&#xA;&#xA;    &lt;Directory Id=""TARGETDIR"" Name=""SourceDir""&gt;&#xA;      &lt;Directory Id=""${programFilesId}""&gt;&#xA;        &lt;Directory Id=""APPLICATIONFOLDER"" Name=""${installationDirectoryWixName}""&gt;&#xA;          &lt;Component Id=""AddLineTo_AppConfig.ini"" Guid=""{4171FB60-FDC5-46CF-A4D8-4AE9CADB4BE9}"" KeyPath=""yes"" Feature=""ProductFeature""&gt;&#xA;            &lt;IniFile Id=""AddLineTo_AppConfig.ini1"" Name=""AppConfig.ini"" Directory=""APPLICATIONFOLDER"" Section=""AppConfig"" Key=""Server"" Value=""&amp;quot;[MYSERVER]&amp;quot;"" Action=""addLine""/&gt;&#xA;            &lt;IniFile Id=""AddLineTo_AppConfig.ini2"" Name=""AppConfig.ini"" Directory=""APPLICATIONFOLDER"" Section=""AppConfig"" Key=""SecondProp"" Value=""&amp;quot;[MYSECONDPROPERTY]&amp;quot;"" Action=""addLine""/&gt;&#xA;          &lt;/Component&gt;&#xA;        &lt;/Directory&gt;&#xA;      &lt;/Directory&gt;&#xA;&#xA;      &lt;!-- Desktop link --&gt;&#xA;      {{ if (isCreateDesktopShortcut) { }}&#xA;      &lt;Directory Id=""DesktopFolder"" Name=""Desktop""/&gt;&#xA;      {{ } -}}&#xA;&#xA;      &lt;!-- Start menu link --&gt;&#xA;      {{ if (isCreateStartMenuShortcut) { }}&#xA;      &lt;Directory Id=""ProgramMenuFolder""/&gt;&#xA;      {{ } }}&#xA;    &lt;/Directory&gt;&#xA;&#xA;    &lt;!-- Files --&gt;&#xA;    &lt;Feature Id=""ProductFeature"" Absent=""disallow""&gt;&#xA;      &lt;ComponentGroupRef Id=""ProductComponents""/&gt;&#xA;    &lt;/Feature&gt;&#xA;&#xA;    {{-dirs}}&#xA;&#xA;    &lt;ComponentGroup Id=""ProductComponents"" Directory=""APPLICATIONFOLDER""&gt;&#xA;      {{-files}}      &#xA;    &lt;/ComponentGroup&gt;&#xA;  &lt;/Product&gt;&#xA;&lt;/Wix&gt;&#xA;&#xA;</code></pre>&#xA;&#xA;<p>Using electron-builder@20.39.0, I create the MSI with</p>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code>set DEBUG=electron-builder:*&#xA;cp template.xml .\node_modules\app-builder-lib\templates\msi\template.xml&#xA;electron-builder&#xA;</code></pre>&#xA;&#xA;<p>And then install the MSI with</p>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code>MsiExec /i ""myapp.msi"" MYSERVER=myapp.example.com MYSECONDPROPERTY=helloworld /L*v Install.log&#xA;</code></pre>&#xA;&#xA;<p>After installation finished, I got the AppConfig.ini in my installdir (<code>%USERPROFILE%\AppData\Local\Programs\MyApp\AppConfig.ini</code>)</p>&#xA;&#xA;<pre><code>[AppConfig]&#xA;Server=""myapp.example.com""&#xA;SecondProp=""helloworld""&#xA;</code></pre>&#xA;",5099059,"",,"",,2019-04-05T15:26:14,"","",,3,,,
55582271,2,,55581936,2019-04-08T21:51:50,,2,,"<p>You can use the <a href=""https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#ignore"" rel=""nofollow noreferrer"">ignore</a> option of electron-packager to skip files matching a certain regular expression:</p>&#xA;&#xA;<pre><code>electron-packager . MyApp \&#xA;    --asar \&#xA;    --platform=darwin \&#xA;    --arch=x64 \&#xA;    --prune=true \&#xA;    --ignore='\.DS_Store'&#xA;</code></pre>&#xA;&#xA;<p>The backslashes at the end of each line allow to continue the command on the next line. You escape the newline, so make sure there are no characters (e.g. spaces) after the backslash.</p>&#xA;&#xA;<p>The backslash in the ignore parameter escapes the <code>.</code>, which otherwise matches any character. Once it's escaped, it matches only the character <code>.</code>.</p>&#xA;",1335237,"",,"",,2019-04-08T21:51:50,"","",,3,,,
55605151,2,,49345672,2019-04-10T05:16:55,,4,,"<p>Have you tried <a href=""https://github.com/conda/constructor"" rel=""nofollow noreferrer"">conda constructor</a>? </p>&#xA;&#xA;<ul>&#xA;<li>It creates a double click + follow steps installer, which installs python, conda and specified conda packages.  </li>&#xA;<li>Installing Jupyter this way also creates a start menu entry in windows to start the Jupyter server.</li>&#xA;<li>It also allows you to specify pre- and post-install batch scripts, that you can use for extra configuration.</li>&#xA;<li>It can create linux and osx installers as well.</li>&#xA;</ul>&#xA;&#xA;<p>For distribution and updates of apps (.ipynb files), I once used the startup scripts of the Jupyter server to check for newer versions in a github repo and pull the new versions of the files if there were any.</p>&#xA;&#xA;<p>Also, for a friendlier user experience inside Jupyter, check <a href=""https://github.com/oschuett/appmode"" rel=""nofollow noreferrer"">appmode</a>.</p>&#xA;",11338163,"",1019850,"",2019-04-10T05:37:11,2019-04-10T05:37:11,"","",,3,,,
55612399,2,,55612174,2019-04-10T12:19:08,,2,,"<p>The simplest way to wait for an action before a code is run is using promises or event listeners (or both). For example:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var resolves = [];&#xD;&#xA;&#xD;&#xA;document.querySelector(""#start"").addEventListener(""click"", doActions);&#xD;&#xA;document.querySelector(""#stop-wait"").addEventListener(""click"", function() {&#xD;&#xA;  resolves.forEach(function(resolve) {&#xD;&#xA;    resolve();&#xD;&#xA;  });&#xD;&#xA;  resolves = [];&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;function waitButtonClick() {&#xD;&#xA;  return new Promise(function(resolve) {&#xD;&#xA;    resolves.push(resolve);&#xD;&#xA;  });&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function doActions() {&#xD;&#xA;  console.log(""Step 1"");&#xD;&#xA;  waitButtonClick().then(function() {&#xD;&#xA;    console.log(""Step 2"");&#xD;&#xA;  });&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;button id=""start""&gt;Start Actions&lt;/button&gt;&#xD;&#xA;&lt;button id=""stop-wait""&gt;Stop waiting&lt;/button&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>The same can be accomplished using <code>await</code> and <code>async</code>:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var resolves = [];&#xD;&#xA;&#xD;&#xA;document.querySelector(""#start"").addEventListener(""click"", doActions);&#xD;&#xA;document.querySelector(""#stop-wait"").addEventListener(""click"", function() {&#xD;&#xA;  resolves.forEach(function(resolve) {&#xD;&#xA;    resolve();&#xD;&#xA;  });&#xD;&#xA;  resolves = [];&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;function waitButtonClick() {&#xD;&#xA;  return new Promise(function(resolve) {&#xD;&#xA;    resolves.push(resolve);&#xD;&#xA;  });&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;async function doActions() {&#xD;&#xA;  console.log(""Step 1"");&#xD;&#xA;  await waitButtonClick();&#xD;&#xA;  console.log(""Step 2"");&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;button id=""start""&gt;Start Actions&lt;/button&gt;&#xD;&#xA;&lt;button id=""stop-wait""&gt;Stop waiting&lt;/button&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" rel=""nofollow noreferrer""><code>Promise</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function#Browser_compatibility"" rel=""nofollow noreferrer""><code>async</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"" rel=""nofollow noreferrer""><code>await</code></a> are only implemented in modern browsers and node (which should suit your case, since you are using electron). If you also want to support IE you could create a custom <code>Promise</code> polyfill:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>if (typeof window[""Promise""] !== ""function"") {&#xD;&#xA;  window[""Promise""] = function(callBack) {&#xD;&#xA;    var catchList = [];&#xD;&#xA;    var thenList = [];&#xD;&#xA;    this.then = function(callBack) {&#xD;&#xA;      if (typeof callBack === ""function"") thenList.push(callBack);&#xD;&#xA;      return this;&#xD;&#xA;    };&#xD;&#xA;    this.catch = function(callBack) {&#xD;&#xA;      if (typeof callBack === ""function"") catchList.push(callBack);&#xD;&#xA;      return this;&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    function resolve(result) {&#xD;&#xA;      thenList.forEach(function(callBack) {&#xD;&#xA;        callBack(result);&#xD;&#xA;      });&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    function reject(error) {&#xD;&#xA;      catchList.forEach(function(callBack) {&#xD;&#xA;        callBack(error);&#xD;&#xA;      });&#xD;&#xA;    };&#xD;&#xA;    callBack(resolve, reject);&#xD;&#xA;  };&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",3133418,"",3133418,"",2019-04-10T12:38:56,2019-04-10T12:38:56,"","",,3,,,
55444463,2,,55443627,2019-03-31T19:11:24,,0,,"<p>You're adding a new event listener to the <code>close</code> event whenever you call <code>createwin</code>. Each of the event handlers is then run when the window is closed, resulting in the repeated <code>window has been hidden</code>.</p>&#xA;&#xA;<p>You only need to add the event handler once, when you create the new window:</p>&#xA;&#xA;<pre><code>function createwin(){&#xA;    if (windowshown == false) {&#xA;        mainWindow = new BrowserWindow({&#xA;            width: 1000,&#xA;            height: 800,&#xA;            webPreferences: {&#xA;                nodeIntegration: true&#xA;            }&#xA;        })&#xA;        console.log(""Window has been created"")&#xA;        windowshown = true;&#xA;        mainWindow.loadFile('configuration.html')&#xA;&#xA;        mainWindow.on('close', (event) =&gt; {&#xA;            event.preventDefault();&#xA;            console.log(""Window has been hidden"");&#xA;            mainWindow.hide();&#xA;        })&#xA;    }&#xA;    else {&#xA;        mainWindow.show();&#xA;        console.log(""Window has been shown"");&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",1335237,"",,"",,2019-03-31T19:11:24,"","",,5,,,
46440590,2,,45979518,2017-09-27T06:08:21,,0,,"<p>I recently implemented progress bar for my electron app.&#xA;Progress bar code taken from here : <a href=""https://scriptscodes.com/simeydotme/battle-net-style-progress-bar-IrGqz"" rel=""nofollow noreferrer"">https://scriptscodes.com/simeydotme/battle-net-style-progress-bar-IrGqz</a></p>&#xA;&#xA;<p>Please check if this can help you</p>&#xA;&#xA;<p>progressbar.css</p>&#xA;&#xA;<pre><code>.progress {&#xA;    font-size: 1.2em;&#xA;    height: 20px;&#xA;    margin-top: 146px;&#xA;    background: rgb(129, 171, 144);&#xA;    border-radius: 2px;&#xA;    border: 1px solid rgba(255, 255, 255, 0.2);&#xA;}&#xA;.progress--active .progress__bar {&#xA;    opacity: 1;&#xA;}&#xA;.progress__text {&#xA;    width: 20em;&#xA;    padding: 0 0.9em;&#xA;    position: absolute;&#xA;}&#xA;.progress__text em {&#xA;    font-style: normal;&#xA;}&#xA;.progress__bar {&#xA;    color: white;&#xA;    font-size: 12px;&#xA;    font-weight: normal;&#xA;    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.6);&#xA;    line-height: 19px;&#xA;    display: block;&#xA;    position: relative;&#xA;    top: -1px;&#xA;    left: -1px;&#xA;    width: 0%;&#xA;    height: 100%;&#xA;    opacity: 0;&#xA;    border: 1px solid;&#xA;    border-radius: 2px 0 0 2px;&#xA;    background-size: 100px 30px, 130px 30px, 130px 30px;&#xA;    background-position: -20% center, right center, left center;&#xA;    background-repeat: no-repeat, no-repeat, no-repeat;&#xA;    -webkit-transition: opacity 0.2s ease, width 0.8s ease-out, background-color 1s ease, border-color 0.3s ease, box-shadow 1s ease;&#xA;    transition: opacity 0.2s ease, width 0.8s ease-out, background-color 1s ease, border-color 0.3s ease, box-shadow 1s ease;&#xA;    -webkit-animation: pulse 2s ease-out infinite;&#xA;    animation: pulse 2s ease-out infinite;&#xA;    background-color: rgba(201, 4, 20, 0.95);&#xA;    background-image: -webkit-linear-gradient(left, rgba(226, 4, 22, 0) 10%, rgba(250, 6, 26, 0.8) 30%, #fb1f31 70%, rgba(250, 6, 26, 0.8) 80%, rgba(226, 4, 22, 0) 90%), -webkit-linear-gradient(left, rgba(251, 31, 49, 0) 0%, #fb1f31 100%), -webkit-linear-gradient(right, rgba(251, 31, 49, 0) 0%, #fb1f31 100%);&#xA;    background-image: linear-gradient(90deg, rgba(226, 4, 22, 0) 10%, rgba(250, 6, 26, 0.8) 30%, #fb1f31 70%, rgba(250, 6, 26, 0.8) 80%, rgba(226, 4, 22, 0) 90%), linear-gradient(to right, rgba(251, 31, 49, 0) 0%, #fb1f31 100%), linear-gradient(to left, rgba(251, 31, 49, 0) 0%, #fb1f31 100%);&#xA;    border-color: #fb3848;&#xA;    box-shadow: 0 0 0.6em #fa061a inset, 0 0 0.4em #e20416 inset, 0 0 0.5em rgba(201, 4, 20, 0.5), 0 0 0.1em rgba(254, 206, 210, 0.5);&#xA;}&#xA;.progress__bar--orange {&#xA;    background-color: rgba(201, 47, 0, 0.95);&#xA;    background-image: -webkit-linear-gradient(left, rgba(227, 53, 0, 0) 10%, rgba(252, 59, 0, 0.8) 30%, #ff4d17 70%, rgba(252, 59, 0, 0.8) 80%, rgba(227, 53, 0, 0) 90%), -webkit-linear-gradient(left, rgba(255, 77, 23, 0) 0%, #ff4d17 100%), -webkit-linear-gradient(right, rgba(255, 77, 23, 0) 0%, #ff4d17 100%);&#xA;    background-image: linear-gradient(90deg, rgba(227, 53, 0, 0) 10%, rgba(252, 59, 0, 0.8) 30%, #ff4d17 70%, rgba(252, 59, 0, 0.8) 80%, rgba(227, 53, 0, 0) 90%), linear-gradient(to right, rgba(255, 77, 23, 0) 0%, #ff4d17 100%), linear-gradient(to left, rgba(255, 77, 23, 0) 0%, #ff4d17 100%);&#xA;    border-color: #ff6030;&#xA;    box-shadow: 0 0 0.6em #fc3b00 inset, 0 0 0.4em #e33500 inset, 0 0 0.5em rgba(201, 47, 0, 0.5), 0 0 0.1em rgba(255, 214, 201, 0.5);&#xA;}&#xA;.progress__bar--yellow {&#xA;    background-color: rgba(232, 158, 0, 0.95);&#xA;    background-image: -webkit-linear-gradient(left, rgba(255, 174, 3, 0) 10%, rgba(255, 183, 28, 0.8) 30%, #ffbf36 70%, rgba(255, 183, 28, 0.8) 80%, rgba(255, 174, 3, 0) 90%), -webkit-linear-gradient(left, rgba(255, 191, 54, 0) 0%, #ffbf36 100%), -webkit-linear-gradient(right, rgba(255, 191, 54, 0) 0%, #ffbf36 100%);&#xA;    background-image: linear-gradient(90deg, rgba(255, 174, 3, 0) 10%, rgba(255, 183, 28, 0.8) 30%, #ffbf36 70%, rgba(255, 183, 28, 0.8) 80%, rgba(255, 174, 3, 0) 90%), linear-gradient(to right, rgba(255, 191, 54, 0) 0%, #ffbf36 100%), linear-gradient(to left, rgba(255, 191, 54, 0) 0%, #ffbf36 100%);&#xA;    border-color: #ffc74f;&#xA;    box-shadow: 0 0 0.6em #ffb71c inset, 0 0 0.4em #ffae03 inset, 0 0 0.5em rgba(232, 158, 0, 0.5), 0 0 0.1em rgba(255, 248, 232, 0.5);&#xA;}&#xA;.progress__bar--green {&#xA;    background-color: rgba(0, 178, 23, 0.95);&#xA;    background-image: -webkit-linear-gradient(left, rgba(0, 204, 26, 0) 10%, rgba(0, 229, 30, 0.8) 30%, #00ff21 70%, rgba(0, 229, 30, 0.8) 80%, rgba(0, 204, 26, 0) 90%), -webkit-linear-gradient(left, rgba(0, 255, 33, 0) 0%, #00ff21 100%), -webkit-linear-gradient(right, rgba(0, 255, 33, 0) 0%, #00ff21 100%);&#xA;    background-image: linear-gradient(90deg, rgba(0, 204, 26, 0) 10%, rgba(0, 229, 30, 0.8) 30%, #00ff21 70%, rgba(0, 229, 30, 0.8) 80%, rgba(0, 204, 26, 0) 90%), linear-gradient(to right, rgba(0, 255, 33, 0) 0%, #00ff21 100%), linear-gradient(to left, rgba(0, 255, 33, 0) 0%, #00ff21 100%);&#xA;    border-color: #19ff37;&#xA;    box-shadow: 0 0 0.6em #00e51e inset, 0 0 0.4em #00cc1a inset, 0 0 0.5em rgba(0, 178, 23, 0.5), 0 0 0.1em rgba(178, 255, 188, 0.5);&#xA;}&#xA;.progress__bar--blue {&#xA;    background-color: rgba(18, 135, 204, 0.95);&#xA;    background-image: -webkit-linear-gradient(left, rgba(20, 151, 227, 0) 10%, rgba(37, 162, 236, 0.8) 30%, #3dacee 70%, rgba(37, 162, 236, 0.8) 80%, rgba(20, 151, 227, 0) 90%), -webkit-linear-gradient(left, rgba(61, 172, 238, 0) 0%, #3dacee 100%), -webkit-linear-gradient(right, rgba(61, 172, 238, 0) 0%, #3dacee 100%);&#xA;    background-image: linear-gradient(90deg, rgba(20, 151, 227, 0) 10%, rgba(37, 162, 236, 0.8) 30%, #3dacee 70%, rgba(37, 162, 236, 0.8) 80%, rgba(20, 151, 227, 0) 90%), linear-gradient(to right, rgba(61, 172, 238, 0) 0%, #3dacee 100%), linear-gradient(to left, rgba(61, 172, 238, 0) 0%, #3dacee 100%);&#xA;    border-color: #54b6f0;&#xA;    box-shadow: 0 0 0.6em #25a2ec inset, 0 0 0.4em #1497e3 inset, 0 0 0.5em rgba(18, 135, 204, 0.5), 0 0 0.1em rgba(225, 242, 252, 0.5);&#xA;}&#xA;.progress__bar:before, .progress__bar:after {&#xA;    content: """";&#xA;    position: absolute;&#xA;    right: -1px;&#xA;    top: -10px;&#xA;    width: 1px;&#xA;    height: 40px;&#xA;}&#xA;.progress__bar:before {&#xA;    width: 7px;&#xA;    right: -4px;&#xA;    //background: -webkit-radial-gradient(center ellipse, rgba(255, 255, 255, 0.4) 0%, rgba(255, 255, 255, 0) 75%);&#xA;    background: radial-gradient(ellipse at center, rgba(255, 255, 255, 0.4) 0%, rgba(255, 255, 255, 0) 75%);&#xA;}&#xA;.progress__bar:after {&#xA;    background: -webkit-linear-gradient(top, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 25%, rgba(255, 255, 255, 0.3) 75%, rgba(255, 255, 255, 0) 100%);&#xA;    background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 25%, rgba(255, 255, 255, 0.3) 75%, rgba(255, 255, 255, 0) 100%);&#xA;}&#xA;.progress--complete .progress__bar {&#xA;    -webkit-animation: none;&#xA;    animation: none;&#xA;    border-radius: 2px;&#xA;}&#xA;.progress--complete .progress__bar:after, .progress--complete .progress__bar:before {&#xA;    opacity: 0;&#xA;}&#xA;&#xA;@-webkit-keyframes pulse {&#xA;    0% {&#xA;        background-position: -50% center, right center, left center;&#xA;    }&#xA;    100% {&#xA;        background-position: 150% center, right center, left center;&#xA;    }&#xA;}&#xA;&#xA;@keyframes pulse {&#xA;    0% {&#xA;        background-position: -50% center, right center, left center;&#xA;    }&#xA;    100% {&#xA;        background-position: 150% center, right center, left center;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Electron render process : downloader.js</p>&#xA;&#xA;<pre><code>const {session} = require('electron').remote;&#xA;&#xA;session.defaultSession.on('will-download', function(event, downloadItem, webContents){&#xA;&#xA;    ""use strict"";&#xA;    console.log(""dowloader is called with event ""+ event + "" webContents ""+ webContents);&#xA;&#xA;    if(downloadItem.getTotalBytes() === 0){&#xA;        swal({&#xA;            position: 'center',&#xA;            type: 'error',&#xA;            title: 'File is empty !!',&#xA;            showConfirmButton: true,&#xA;            timer: 3000&#xA;        });&#xA;    }&#xA;&#xA;    downloadItem.on('updated', function (event, state) {&#xA;&#xA;        console.log(""download item event triggred "" + event + state);&#xA;&#xA;        if (state === 'interrupted') {&#xA;            console.log('Download is interrupted but can be resumed');&#xA;        }else if (state === 'progressing') {&#xA;&#xA;            console.log(""download is processing"");&#xA;&#xA;            let jQueryprogress = jQuery("".progress"");&#xA;            let jQuerybar = jQuery("".progress__bar"");&#xA;            let jQuerytext = jQuery("".progress__text"");&#xA;            let percent = 0;&#xA;            let update;&#xA;            let resetColors;&#xA;            let speed = 200;&#xA;            let orange = 30;&#xA;            let yellow = 55;&#xA;            let green = 85;&#xA;            let timer;&#xA;&#xA;            resetColors = function() {&#xA;                jQuerybar&#xA;                    .removeClass(""progress__bar--green"")&#xA;                    .removeClass(""progress__bar--yellow"")&#xA;                    .removeClass(""progress__bar--orange"")&#xA;                    .removeClass(""progress__bar--blue"");&#xA;&#xA;                jQueryprogress&#xA;                    .removeClass(""progress--complete"");&#xA;&#xA;            };&#xA;&#xA;            update = function() {&#xA;                timer = setTimeout( function() {&#xA;                    console.log(""running"");&#xA;&#xA;                    try{&#xA;                        let percentage = downloadItem.getReceivedBytes()/downloadItem.getTotalBytes();&#xA;                        percent =  percentage * 100;&#xA;                        percent = parseFloat( percent.toFixed(2) );&#xA;                        update();&#xA;&#xA;                    }catch (error){&#xA;&#xA;                        clearTimeout(timer);&#xA;                        console.log(""Error while try to calculate received bytes inside downloader ""+ error);&#xA;                        percent = 100;&#xA;                        resetColors();&#xA;                        jQueryprogress.addClass(""progress--complete"");&#xA;                        jQuerybar.addClass(""progress__bar--blue"");&#xA;                        jQuerytext.find(""em"").text( ""Complete"" );&#xA;                        percent = 0;&#xA;&#xA;                    }&#xA;&#xA;                    jQuerytext.find(""em"").text( percent + ""%"" );&#xA;                    if( percent &gt;= green ) {&#xA;                        jQuerybar.addClass(""progress__bar--green"");&#xA;                    }&#xA;&#xA;                    else if( percent &gt;= yellow ) {&#xA;                        jQuerybar.addClass(""progress__bar--yellow"");&#xA;                    }&#xA;&#xA;                    else if( percent &gt;= orange ) {&#xA;                        jQuerybar.addClass(""progress__bar--orange"");&#xA;                    }&#xA;&#xA;                    speed = Math.floor( Math.random() * 100 );&#xA;&#xA;                    jQuerybar.css({ width: percent + ""%"" });&#xA;&#xA;                }, speed);&#xA;&#xA;            };&#xA;&#xA;            jQuery("".progress"").show();&#xA;            jQueryprogress.addClass(""progress--active"");&#xA;            update();&#xA;            resetColors();&#xA;        }&#xA;&#xA;    });&#xA;&#xA;&#xA;&#xA;    downloadItem.once('done', function(event, state) {&#xA;&#xA;        console.log(""Inside download done function ""+ event + state);&#xA;&#xA;        if (state === 'completed') {&#xA;            setTimeout(function(){&#xA;&#xA;                jQuery("".progress"").hide();&#xA;                swal({&#xA;                    position: 'center',&#xA;                    type: 'success',&#xA;                    title: 'File downloded successfully !',&#xA;                    showConfirmButton: true,&#xA;                    timer: 3000&#xA;                });&#xA;&#xA;            }, 50);&#xA;&#xA;        } else if (state === 'cancelled'||state === ""interrupted""){&#xA;&#xA;            jQuery("".progress"").hide();&#xA;            console.log(""downloas cancelled"");&#xA;&#xA;            swal({&#xA;                position: 'center',&#xA;                type: 'error',&#xA;                title: 'Download cancelled or interrupted !!',&#xA;                showConfirmButton: true,&#xA;                timer: 2000&#xA;            });&#xA;&#xA;&#xA;        } else {&#xA;            jQuery("".progress"").hide();&#xA;            swal({&#xA;                position: 'center',&#xA;                type: 'error',&#xA;                title: 'Download failed !!',&#xA;                showConfirmButton: true,&#xA;                timer: 2000&#xA;            });&#xA;&#xA;        }&#xA;    });&#xA;&#xA;&#xA;    session.defaultSession.clearStorageData([], function () {console.log(' cleared all storages after download ');});&#xA;    session.defaultSession.clearCache(function(){console.log('cleared all caches after download');});&#xA;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Html code :</p>&#xA;&#xA;<pre><code>    &lt;div class=""progress"" style=""display: none""&gt;&#xA;        &lt;b class=""progress__bar""&gt;&#xA;    &lt;span class=""progress__text""&gt;&#xA;      Progress: &lt;em&gt;0%&lt;/em&gt;&#xA;    &lt;/span&gt;&#xA;        &lt;/b&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;a href=""yoururl"" download  id=""downloadreport"" style=""display: none""&gt;Download Report&lt;/a&gt;&#xA;</code></pre>&#xA;",3768218,"",3768218,"",2018-02-22T09:43:53,2018-02-22T09:43:53,"","",,2,,,
46492293,2,,46431742,2017-09-29T15:33:47,,0,,"<p><strong>SOLVED</strong></p>&#xA;&#xA;<p>The issue seemed to be due to being branched off of <code>master</code> as opposed to <code>release</code>. I'd assume there are changes in <code>main</code> that aren't accounted for in the gulp task.</p>&#xA;&#xA;<p>For anyone confused by my post, the expected behavior for a successful build is for a folder named <code>VSCode-win32-x64</code> to be generated in the directory where your vscode clone is located.</p>&#xA;",8671100,"",,"",,2017-09-29T15:33:47,"","",,0,,,
46371437,2,,46370594,2017-09-22T18:51:36,,1,,"<p>Try thinking about it in terms of trust of neighbors.</p>&#xA;&#xA;<p>You have a key to your neighbor named Lenny who lives in the house to your left and another neighbor Rhonda who lives your right. You have known Rhonda for several years and she trusts you to keep a copy of her key incase she gets locked out or loses her key.</p>&#xA;&#xA;<p>Lenny is pretty new but you've had drinks with him once and he seems like a reasonable person. What you don't know is that Lenny moved here from a small town and he doesn't keep his doors locked.</p>&#xA;&#xA;<p>You are leaving for the weekend and ask Lenny to come over and give your cat Snuggles some milk. Lenny brings your key along to your house but he didn't know that Brad the Bad Guy who lives across the street was watching him and had seen you leave earlier.</p>&#xA;&#xA;<p>Now Lenny leaves for work and doesn't lock his house. Normally this isn't a problem because Lenny lives a pretty simple solitary life with few possessions but Brad knows he has your key. Brad steals your key, goes and steals your brand new TV, while in your house he finds Rhonda's key (which he also steals) and goes and steals her TV. He puts both keys back where he found them and returns home with two TVs. Now Lenny comes home and when he comes to water your plants he is dumfounded to find the TV gone and the house locked. He calls the police who immediately suspect Lenny because, well, he had the key.</p>&#xA;&#xA;<p>Don't be Lenny, lock your house (api keys) even if you're a good and trusting person. </p>&#xA;&#xA;<p>Edit: To the question of what could go wrong with an electron app. Imagine I lose my Twitter API keys. Now Brad goes and makes a knockoff app. It is very similar to mine and as described above his app is indistinguishable from mine from Twitter's perspective. Perhaps the API key has more than just post permissions, it has delete permissions too. Now Brads knockoff app gets to delete people's twitter accounts and post malware or other things. Brad is the one doing this but Twitter comes to me and accuses me of running a spam bot. They preventatively disable my API key and now all of my legit customers are super angry and question how secure other areas of my app are.  My reputation suffers and people say my app is ""infected"" because the tweets show up as posted by my app and not Brads app. If Twitter determines you can't keep your keys safe they may stop issuing you new keys.</p>&#xA;",1397590,"",1397590,"",2017-09-24T23:40:40,2017-09-24T23:40:40,"","",,4,,,
46462486,2,,46422401,2017-09-28T06:37:11,,1,,"<p>Squirrel does not support it on Windows. It always installs in %localappdata%.</p>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-builder/issues/605"" rel=""nofollow noreferrer"">See here</a> </p>&#xA;",8542377,"",,"",,2017-09-28T06:37:11,"","",,0,,,
46506788,2,,46482865,2017-09-30T20:30:53,,1,,"<p>There is a package that do exactly what you need</p>&#xA;&#xA;<p><a href=""https://github.com/jiahaog/nativefier"" rel=""nofollow noreferrer"">https://github.com/jiahaog/nativefier</a></p>&#xA;&#xA;<p>Just install with:</p>&#xA;&#xA;<p>npm install nativefier -g</p>&#xA;&#xA;<p>And after:</p>&#xA;&#xA;<p>nativefier ""<a href=""http://medium.com"" rel=""nofollow noreferrer"">http://medium.com</a>""</p>&#xA;",5423742,"",,"",,2017-09-30T20:30:53,"","",,7,,,
46537045,2,,45229218,2017-10-03T04:04:07,,1,,"<p>Problem is solved in later versions of npm, please consider upgrading to the latest v ( > <code>5.4.2</code>) instead of downgrading to <code>5.2</code>:</p>&#xA;&#xA;<pre><code>npm i -g npm&#xA;</code></pre>&#xA;",1607499,"",,"",,2017-10-03T04:04:07,"","",,0,,,
46416937,2,,40776653,2017-09-26T02:29:15,,2,,"<p>The <code>accelerator</code> String is no longer supported.  The documentation was updated in <a href=""https://github.com/electron/electron/pull/7750/commits/aeb774730b8df693a5d146897ab37a918bcf62c9"" rel=""nofollow noreferrer"">v1.4.5</a> to clarify how to define shortcuts using <code>globalShortcut</code>.</p>&#xA;&#xA;<blockquote>&#xA;  <p><a href=""https://electron.atom.io/docs/api/accelerator/"" rel=""nofollow noreferrer"">Accelerator Documentation</a>:  Shortcuts are registered with the globalShortcut module using the register method, i.e.</p>&#xA;&#xA;<pre><code>   const {app, globalShortcut} = require('electron')&#xA;&#xA;   app.on('ready', () =&gt; {&#xA;     // Register a 'CommandOrControl+Y' shortcut listener.&#xA;     globalShortcut.register('CommandOrControl+Y', () =&gt; {&#xA;       // Do stuff when Y and either Command/Control is pressed.&#xA;     })&#xA;   })&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<p><strong>So change your code to this</strong></p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;&#xA;const app = electron.app;&#xA;const BrowserWindow = electron.BrowserWindow;&#xA;const Menu = electron.Menu;&#xA;const globalShortcut = electron.globalShortcut;&#xA;&#xA;app.on('ready', _ =&gt; {&#xA;    new BrowserWindow();&#xA;&#xA;    // Declare shortcuts&#xA;    globalShortcut.register('Alt+W', () =&gt; app.quit());&#xA;&#xA;    const template = [&#xA;    {&#xA;        label: ""File"",&#xA;        submenu: [{&#xA;            label: 'About',&#xA;            click: _ =&gt; {&#xA;                console.log('clicked');&#xA;            }&#xA;        },&#xA;        {&#xA;            type: 'separator'&#xA;        },&#xA;        {&#xA;            label: 'Quit',&#xA;            click: _ =&gt; {&#xA;                app.quit();&#xA;            }&#xA;        }]&#xA;    }];&#xA;&#xA;    const menu = Menu.buildFromTemplate(template);&#xA;    Menu.setApplicationMenu(menu);&#xA;});&#xA;</code></pre>&#xA;",4451675,"",4451675,"",2020-01-27T22:53:46,2020-01-27T22:53:46,"","",,2,,,
46315473,2,,46310888,2017-09-20T07:12:05,,3,,"<p>That won't work. Visual Studio Code is a code editor, which supports extensions that can either add functionality to the IDE itself or provide HTML content to show in an own pane. This is not enough (and not made) for a full featured editor-in-editor scenario (interaction is limited).</p>&#xA;&#xA;<p><a href=""https://marketplace.visualstudio.com/items?itemName=mike-lischke.vscode-antlr4"" rel=""nofollow noreferrer"">I've built an extension</a> which has a graphical view of a graph (see the last image) using D3.js, with limited interaction capabilities (you can select/drag a node and pan/zoom with the mouse).</p>&#xA;&#xA;<p>Better is probably to go level down and start with Electron (on which vscode is based). This would allow you to write any desktop application that can be written in HTML/JS.</p>&#xA;",1137174,"",,"",,2017-09-20T07:12:05,"","",,2,,,
46356115,2,,46348557,2017-09-22T02:52:49,,3,,"<blockquote>&#xA;  <p>Please enter your publisher identity: - What can I specify here?</p>&#xA;</blockquote>&#xA;&#xA;<p>You need to enter a publisher name. For example: ""CN=developmentca""</p>&#xA;&#xA;<blockquote>&#xA;  <p>Please enter the location of your Windows Kit's bin folder: - what here to specify?</p>&#xA;</blockquote>&#xA;&#xA;<p>It's the Path of the Windows Kit bin folder. It dependents on where you install it. For example like this: ""C:\Program Files (x86)\Windows Kits\10\bin\x64""</p>&#xA;&#xA;<blockquote>&#xA;  <p>The first time you run this tool, it needs to know some settings. It will ask you only once and store your answers in your profile folder in a .electron-windows-store file. You can also provide these values as a parameter when running the CLI.</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>{&#xA;  ""publisher"": ""CN=developmentca"",&#xA;  ""windowsKit"": ""C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64"",&#xA;  ""devCert"": ""C:\\Tools\\DesktopConverter\\Certs\\devcert.pfx"",&#xA;  ""desktopConverter"": ""C:\\Tools\\DesktopConverter"",&#xA;  ""expandedBaseImage"": &#xA;  ""C:\\ProgramData\\Microsoft\\Windows\\Images\\BaseImage-14316\\""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Please read <a href=""https://github.com/felixrieseberg/electron-windows-store"" rel=""nofollow noreferrer"">Electron Apps in the Windows Store</a> on github for more details.</p>&#xA;",6782612,"",,"",,2017-09-22T02:52:49,"","",,4,,,
46365542,2,,46364167,2017-09-22T13:04:43,,3,,"<p>Mac OS X is application-oriented, whereas Windows is window-oriented...</p>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/app/#appdockhide-macos"" rel=""nofollow noreferrer""><code>app.dock.hide ()</code></a> Is indeed tagged as macOS only.</p>&#xA;&#xA;<p>In order to make the window not show in the taskbar, you can either call:</p>&#xA;&#xA;<pre><code>win.setSkipTaskbar (true);&#xA;</code></pre>&#xA;&#xA;<p>Or add <code>skipTaskbar</code> to the options passed to the new BrowserWindow:</p>&#xA;&#xA;<pre><code>{&#xA;    // ...&#xA;    skipTaskbar: true,&#xA;    // ...&#xA;}&#xA;</code></pre>&#xA;",,user8022331,6577664,"",2017-09-23T00:41:40,2017-09-23T00:41:40,"","",,0,,,
46474978,2,,45984273,2017-09-28T17:21:20,,3,,"<p>As an alternative to using the entire electron package stack for developing Windows MSI installation delivery, you might consider using the following mechanisms as another useful solution:</p>&#xA;&#xA;<ol>&#xA;<li><strong>webpack</strong> - to build your application client distributable </li>&#xA;<li><strong>electron-packager</strong> - to build your electron binaries (in this case&#xA;for Windows)</li>&#xA;<li><strong>WiX tool set</strong> - to build your Windows MSI installers.</li>&#xA;</ol>&#xA;&#xA;<p>Of course, you have to do steps 1 and 2 regardless of what kind of installer you choose to employ. I've found <code>webpack</code> to be the most stable, configurable and complete solution for packaging an angular web app (which is what I work on), and <code>electron-packager</code> is the one tool you can't get around using if you want to actually build platform specific binaries for your app.</p>&#xA;&#xA;<p>In our case, I use <code>gulp</code> scripts to wrap the <code>webpack</code> and <code>electron-packager</code> modules, which I call via their API's rather than their command line derivatives in order to maintain them in a consistent javascript context for ease maintenance and error handling in the build process (command line solutions are much more difficult to scope and re-purpose than packages, modules, files and functions in javascript, imo).</p>&#xA;&#xA;<p>This can be explained a bit easier by understanding what kind of project I am referring to. This is specifically if you are building an electron application that has a full project structure such as this:</p>&#xA;&#xA;<pre><code>C:.&#xA;+---assets/&#xA;+---ClientSide&#xA;¦   +---index.html&#xA;¦   +---app&#xA;¦   ¦   +---app.component.ts&#xA;¦   ¦   +---app.module.ts&#xA;¦   ¦   +---main.ts&#xA;¦   ¦   +---AppContent/&#xA;¦   ¦   +---help/&#xA;¦   ¦   +---modals/&#xA;¦   ¦   +---panels/&#xA;¦   ¦   +---shared/&#xA;¦   +---Styles&#xA;¦   ¦   +---dist/&#xA;¦   ¦   +---svgs/&#xA;¦   +---test&#xA;¦       +---AppContent/&#xA;¦       +---modals/&#xA;¦       +---panels/&#xA;¦       +---shared/&#xA;+---dist/&#xA;+---edist&#xA;|   \---Application-win32-ia32 [*location of binary source for the install]&#xA;+---ServerSide&#xA;¦   +---app.js&#xA;¦   +---server.js&#xA;¦   +---test/&#xA;+---Installer&#xA;    +---buildMSI.bat&#xA;    +---Application/&#xA;&#xA;gulpfile.js&#xA;karma.conf.js&#xA;main.js&#xA;package.json&#xA;README.md&#xA;webpack.config.js&#xA;</code></pre>&#xA;&#xA;<p>This kind of structure shows a project that has all the parts that you'd want in a real dev environment such as webpack, configuration, karma (client side testing), gulp for packaging operations (wraps operations for webpack, electron packager), windows batch file for running WiX commands, and more.</p>&#xA;&#xA;<p>The flow of such an approach would be (probably documented in your README.md) something like these steps for new users setting up and building your project:</p>&#xA;&#xA;<ol>&#xA;<li><code>git clone &lt;project/path&gt;</code> -- clone the repo to your local machine </li>&#xA;<li><code>npm install</code>  -- load/install the node_modules</li>&#xA;<li><code>gulp lint</code>  -- Validate code and produce CI results. (your choice of linters)</li>&#xA;<li><code>gulp test</code>  -- Run server side and client side unit tests, produce code coverage CI results for each</li>&#xA;<li><code>gulp build_web_client</code> -- Build the client side web project using <code>webpack</code> API calls. This should produce a directory called ""dist"" created under the project</li>&#xA;<li><code>gulp build_electron_app</code> -- Build the Electron executable using <code>electron-packager</code> API. This should produce a directory called ""edist"" created under the project.</li>&#xA;<li><code>cd Installer</code></li>&#xA;<li><code>buildMSI.bat</code> -- this Windows batch script should do the following steps:&#xA;&#xA;<ol>&#xA;<li>prepare the manifest file (resulting in a .wxs file) by harvesting the content listing of the /edist directory (seen in the directory tree structure above and created by step 6) by using Wix command <code>heat.exe</code></li>&#xA;<li>preprocess and compile the project into and object (.wixobj) using Wix command <code>candle.exe</code> </li>&#xA;<li>link the Wix project into its final installable file form using Wix command <code>Light.exe</code>, generating the install MSI files.</li>&#xA;</ol></li>&#xA;</ol>&#xA;&#xA;<p>This is just one suggestion. You can, of course, use other tools for each of the steps as you choose best. This is just one approach that I've found works well for development of electron applications for deployment to a Windows target. The nice thing about this is that with Electron, you could choose to build to many target OSes, using steps 1-6, and then have different deployment approach if you wanted to go to Windows or Mac, Linux for steps 7 and 8.</p>&#xA;&#xA;<p>Yes, it is true, you could use <code>electron-builder</code> (or <code>electron-forge</code> for those with simple needs) to package your app via Squirrel as a way to deploy to all OSes available to electron (which would mean replacing my steps 7 and 8 with those packaging alternatives). From my experience, and for our context, the Squirrel solution to Windows deployment seemed less desirable than using Wix for deployment.</p>&#xA;&#xA;<p>To your original question about configurability to your installation, the nice thing about using Wix is that you get with it the ability to completely customize your installation UI and experience (including target pathing).</p>&#xA;",3946706,"",,"",,2017-09-28T17:21:20,"","",,2,,,
46475021,2,,46474915,2017-09-28T17:23:53,,3,,"<p>It depends exactly how you are opening the file (what functions you're using). In general, many will resolve it to the current working directory if it doesn't appear to be an absolute path (start with <code>C:\</code> on Windows or <code>/</code> on Linux/Mac).</p>&#xA;&#xA;<p>The example path you gave is actually using <code>..</code> at the beginning, so it's going up one level. If you're folder structure is like this:</p>&#xA;&#xA;<ul>&#xA;<li>script.js</li>&#xA;<li>videos&#xA;&#xA;<ul>&#xA;<li>video.mp4</li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p>Then you want to use <code>./videos/video.mp4</code> (not the one <code>.</code>).</p>&#xA;&#xA;<p>You can also use <code>path.resolve('./videos/video.mp4')</code> to convert the relative path to an absolute path based on the current working directory.</p>&#xA;&#xA;<p>Do note, that the current working directory is the directory you <em>launch</em> it from, not where it lives. I.e., if you are in folder <code>C:\Programs</code> and type <code>node myProgram/script.js</code> the current working directory would be <code>C:\Programs</code>, not <code>C:\Programs\myProgram</code> (where your script is).</p>&#xA;&#xA;<p>In that case, I prefer to use <code>__dirname</code>, which always refers to the absolute file path of the file it's found in, combined with <code>path.join()</code> to create path to something in the same folder.</p>&#xA;&#xA;<p>For example: <code>path.join(__dirname, 'videos/video.mp4')</code> will always resolve to something like <code>C:\Programs\myProgram\videos\video.mp4</code> (assuming the script file is in <code>C:\Programs\myProgram</code>).</p>&#xA;&#xA;<p>That is probably the most reliable way. You can also <code>console.log()</code> the path to see example where it is trying to call, and adjust accordingly.</p>&#xA;",1261825,"",,"",,2017-09-28T17:23:53,"","",,0,,,
46527840,2,,46527792,2017-10-02T14:43:32,,3,,"<p>You can't import directive in angular module only <code>@NgModule</code></p>&#xA;&#xA;<p>So it should be:</p>&#xA;&#xA;<pre><code>import { MdStepperModule } from '@angular/material'&#xA;&#xA;@NgModule({&#xA;  imports: [&#xA;    ...&#xA;    MdStepperModule &#xA;  ]&#xA;  ...&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><strong><a href=""https://plnkr.co/edit/WQNfKQADJRaHHpQvJVdw?p=preview"" rel=""nofollow noreferrer"">Plunker Example</a></strong></p>&#xA;",5485167,"",,"",,2017-10-02T14:43:32,"","",,2,,,
46531240,2,,46526734,2017-10-02T18:10:49,,3,,"<p>The zoom factor information for each browser window is memorized in a JSON file named <code>Preferences</code> located in the user data directory accessible through <code>app.getPath ('userData');</code></p>&#xA;&#xA;<p>If the zoom factor is different from its default value <code>1.0</code>, it will be listed at the end of the JSON file (after the DevTools settings), associated with the window's URL. You may find the whole relevant syntax quite odd though...</p>&#xA;",,user8022331,,"",,2017-10-02T18:10:49,"","",,1,,,
46318558,2,,46316281,2017-09-20T09:41:38,,4,,"<p>Out of the box, the username is available through:</p>&#xA;&#xA;<pre><code>const os = require ('os');&#xA;const username = os.userInfo ().username;&#xA;</code></pre>&#xA;&#xA;<p>Also (at least on Mac OS X and Linux) it can be obtained through the LOGNAME or USER environment variables:</p>&#xA;&#xA;<pre><code>username = process.env[""LOGNAME""];&#xA;// or&#xA;username = process.env[""USER""];&#xA;</code></pre>&#xA;",,user8022331,,user8022331,2017-09-20T13:08:02,2017-09-20T13:08:02,"","",,1,,,
46429063,2,,46428720,2017-09-26T14:23:03,,4,,"<p>Since docker is not meant to be a UI for users (though it <code>can</code> be); images for Windows 7, 8, 10, et al are not available. However, <a href=""https://hub.docker.com/r/microsoft/windowsservercore/"" rel=""nofollow noreferrer"">Windows Server Core</a> IS available via the <a href=""https://hub.docker.com"" rel=""nofollow noreferrer"">Docker Hub</a>.</p>&#xA;&#xA;<p>If you simply need a x86 Win environment to build the application that should do the trick. If you need a full GUI, go <a href=""https://www.virtualbox.org/wiki/Downloads"" rel=""nofollow noreferrer"">Virtual Box</a> or other virtualization tech. Docker containers are meant for single process isolation, ever see windows run only 1 process?</p>&#xA;&#xA;<p>Hope this helps!</p>&#xA;&#xA;<p>Update: It IS possible to run GUI applications via Docker; at least on a Linux host. <a href=""http://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/"" rel=""nofollow noreferrer"">http://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/</a></p>&#xA;&#xA;<p>Update2: It is now possible to run Windows applications (CLI or GUI) via Docker: <a href=""https://blog.sixeyed.com/how-to-dockerize-windows-applications/"" rel=""nofollow noreferrer"">here</a> and <a href=""https://forums.docker.com/t/how-to-containerize-windows-desktop-applications-with-gui-using-docker/50543"" rel=""nofollow noreferrer"">here</a> has information regarding the process.</p>&#xA;",1572657,"",1572657,"",2019-04-15T14:40:41,2019-04-15T14:40:41,"","",,2,,,
46432639,2,,46432492,2017-09-26T17:35:11,,4,,"<p>Indeed the problem is a simple JavaScript thing. Use <code>=</code> to set the property value instead of a <code>:</code></p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var obj = {&#xD;&#xA;  prop1: null,&#xD;&#xA;  prop2: {&#xD;&#xA;    prop: 'Hi'&#xD;&#xA;  }&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;//this works to set the values&#xD;&#xA;obj.prop1 = 'dog';&#xD;&#xA;obj.prop2.prop = 'cat';&#xD;&#xA;&#xD;&#xA;//this doesnt work - uncomment the lines below will cause the same error you're getting&#xD;&#xA;//obj.prop1: 'dog';&#xD;&#xA;//obj.prop2.prop: 'cat';&#xD;&#xA;&#xD;&#xA;console.log(obj);</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",1771994,"",,"",,2017-09-26T17:35:11,"","",,1,,,
46351524,2,,46327538,2017-09-21T19:10:40,,6,,"<p>So for anybody that comes to the question. I figured it out.&#xA;I used the <code>remote</code> api function <code>getCurrentWindow()</code> that returns a <code>BrowserWindow</code> instance from the main thread. You can use this to then put it in the first argument when initializing the dialog box. As so</p>&#xA;&#xA;<pre><code>import electron, { remote } from 'electron';&#xA;&#xA;const { dialog } = electron.remote;&#xA;&#xA;const win = remote.getCurrentWindow();&#xA;&#xA;// function for saving a gantt project projects are serialized into a JSON file&#xA;// the JSON is then stringified for human readiblity then thru the dialog api is saved to&#xA;// users computer&#xA;const saveGantt = () =&gt; {&#xA;  let content = gantt.serialize();&#xA;  content = JSON.stringify(content, null, '\t');&#xA;  dialog.showSaveDialog(&#xA;    win,      // added the browserwindow instance here as the first argument&#xA;    {&#xA;      defaultPath: `C:\\Users\\${process.env.USERNAME}\\Documents\\`,&#xA;      filters: [&#xA;        {&#xA;          name: 'json',&#xA;          extensions: ['json'],&#xA;        },&#xA;      ],&#xA;    },&#xA;    (filename) =&gt; {&#xA;      if (filename === undefined) {&#xA;        return;&#xA;      }&#xA;      fs.writeFile(filename, content, (err) =&gt; {&#xA;        if (err) {&#xA;          dialog.showErrorBox(&#xA;            win,&#xA;            'Save Failed',&#xA;            `An error occured saving the file ${err.message}`,&#xA;          );&#xA;          return;&#xA;        }&#xA;        dialog.showMessageBox(&#xA;          win,&#xA;          {&#xA;            type: 'none',&#xA;            title: 'Ganttron',&#xA;            message: 'The chart was successfully saved',&#xA;            buttons: ['OK'],&#xA;          },&#xA;        );&#xA;      });&#xA;    },&#xA;  );&#xA;};&#xA;&#xA;// function that loads a gantt project uses the dialog api to open a JSON file from&#xA;// the users computer then it is parsed to return a JSON object that is then parsed by&#xA;// the gantt api&#xA;const loadGantt = () =&gt; {&#xA;  dialog.showMessageBox(&#xA;    win,         // added the browserwindow instance here as the first argument&#xA;    {&#xA;      type: 'info',&#xA;      title: 'Ganttron',&#xA;      message: 'This will clear the gantt chart and load new data',&#xA;      buttons: ['Cancel', 'OK'],&#xA;    },&#xA;    (response) =&gt; {&#xA;      if (response === 1) {&#xA;        gantt.clearAll();&#xA;        dialog.showOpenDialog(&#xA;          win,&#xA;          {&#xA;            defaultPath: `C:\\Users\\${process.env.USERNAME}\\Documents`,&#xA;            filters: [&#xA;              {&#xA;                name: 'json',&#xA;                extensions: ['json'],&#xA;              },&#xA;            ],&#xA;          },&#xA;          (fileName) =&gt; {&#xA;            if (fileName === undefined) {&#xA;              return;&#xA;            }&#xA;            fs.readFile(fileName[0], 'utf-8', (err, data) =&gt; {&#xA;              quickSaveFileName = fileName[0].toString();&#xA;              if (err) {&#xA;                dialog.showErrorBox(&#xA;                  win,&#xA;                  'Load Failed',&#xA;                  `Cannot read file ${err.message}`,&#xA;                );&#xA;              }&#xA;              const loadedData = JSON.parse(data);&#xA;              gantt.parse(loadedData);&#xA;            });&#xA;          },&#xA;        );&#xA;      }&#xA;    },&#xA;  );&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>It will prevent interaction with the current window until the dialog box is closed.</p>&#xA;",4104766,"",4104766,"",2019-10-02T15:38:28,2019-10-02T15:38:28,"","",,3,,,
46466437,2,,45811603,2017-09-28T10:06:01,,20,,"<p>For me was enough to set the type of template const to <code>Electron.MenuItemConstructorOptions[]</code>. </p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>const template: Electron.MenuItemConstructorOptions[] = [{&#xA;        label: 'Edit',&#xA;        submenu: [&#xA;            { role: 'undo' },&#xA;            { role: 'redo' },&#xA;            { type: 'separator' },&#xA;            { role: 'cut' },&#xA;            { role: 'copy' },&#xA;            { role: 'paste' },&#xA;            { role: 'pasteandmatchstyle' },&#xA;            { role: 'delete' },&#xA;            { role: 'selectall' }&#xA;        ]&#xA;    },&#xA;    {&#xA;        label: 'View',&#xA;        submenu: [&#xA;            { role: 'reload' },&#xA;            { role: 'forcereload' },&#xA;            { role: 'toggledevtools' },&#xA;            { type: 'separator' },&#xA;            { role: 'resetzoom' },&#xA;            { role: 'zoomin' },&#xA;            { role: 'zoomout' },&#xA;            { type: 'separator' },&#xA;            { role: 'togglefullscreen' }&#xA;        ]&#xA;    },&#xA;    { role: 'window', submenu: [{ role: 'minimize' }, { role: 'close' }] },&#xA;    {&#xA;        role: 'help',&#xA;        submenu: [{&#xA;            label: 'Learn More',&#xA;            click() {&#xA;                require('electron').shell.openExternal('https://electron.atom.io');&#xA;            }&#xA;        }]&#xA;    }&#xA;];&#xA;</code></pre>&#xA;",491245,"",,"",,2017-09-28T10:06:01,"","",,0,,,
48682217,2,,48667561,2018-02-08T09:43:14,,0,,"<p>Found a way, which is to terminate the <code>batch</code> job by hitting <kbd>CTRL + C</kbd>, which asks <code>Terminate batch job (Y/N)?</code> where choosing <code>Y</code> <strong>terminates</strong> and makes the command prompt writable.</p>&#xA;&#xA;<p>I was searching for methods to terminate without confirmation and <a href=""https://superuser.com/questions/35698/how-to-supress-terminate-batch-job-y-n-confirmation"">learnt</a> it cannot be terminated without confirmation.</p>&#xA;",2856839,"",2856839,"",2018-02-08T09:55:15,2018-02-08T09:55:15,"","",,0,,,
48684141,2,,48668767,2018-02-08T11:12:49,,2,,"<p>Most sites these days block other people from iframing them. As you can see with this error, the site only allows iframes coming from the same domain. As an alternative you can use Electron's webview tag which starts the website on a separate thread, sandboxed in its own BrowserWindow. <a href=""https://electronjs.org/docs/api/webview-tag"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/webview-tag</a></p>&#xA;",6502807,"",,"",,2018-02-08T11:12:49,"","",,0,,,
48696708,2,,48694866,2018-02-08T23:55:21,,1,,"<p>You should use the Electron <a href=""https://electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options-callback"" rel=""nofollow noreferrer""><code>showOpenDialog</code></a> method on the <code>dialog</code> API.</p>&#xA;&#xA;<pre><code>const { dialog } = require('electron')&#xA;const pathArray = dialog.showOpenDialog({properties: ['openDirectory']}))&#xA;</code></pre>&#xA;&#xA;<p>This can be called from the renderer process using <code>remote</code></p>&#xA;&#xA;<pre><code>const { remote } = require('electron')&#xA;const pathArray = remote.dialog.showOpenDialog({properties: ['openDirectory']}))&#xA;</code></pre>&#xA;",106623,"",,"",,2018-02-08T23:55:21,"","",,0,,,
48713877,2,,48668623,2018-02-09T20:49:16,,2,,"<p>Ok what I ended up doing to make it work is build my angular project and in the dist folder where it outputs, create the main.js and run electron from there.</p>&#xA;",6903889,"",,"",,2018-02-09T20:49:16,"","",,0,,,
48747745,2,,48745025,2018-02-12T13:33:24,,1,,"<blockquote>&#xA;  <p>Now i can't find any specific information how exactly it is possible to do with Electron.</p>&#xA;</blockquote>&#xA;&#xA;<p>That's because you don't <strong>need</strong> an Electron-specific solution. Electron helps you build desktop applications using Node.js by providing abstractions on top of all sorts of APIs like Chromium for the rendering and execution of HTML, CSS, and JavaScript or system-specific APIs (for <a href=""https://electronjs.org/docs/tutorial/notifications"" rel=""nofollow noreferrer"">displaying notifications</a>, <a href=""https://electronjs.org/docs/api/dialog"" rel=""nofollow noreferrer"">showing dialogs</a>, etc.).</p>&#xA;&#xA;<p>Electron, for the most part, does not force you to use its APIs and you're free to use any of Node.js's core APIs and other packages from npm. That means if you don't find an Electron-specific way to solve a certain problem, just search for a way to solve the problem using Node.js and it will most likely work.</p>&#xA;&#xA;<p>The real question, therefore, is: <strong>Is there even any reason to use Electron in this case?</strong></p>&#xA;&#xA;<blockquote>&#xA;  <p>The main feature is to monitor user's process list in Windows. For example, if app finds example.exe it will make api request on my server.</p>&#xA;</blockquote>&#xA;&#xA;<p>For this feature alone you don't need Electron. You don't need a graphical user interface.</p>&#xA;&#xA;<p>But when it comes to displaying the processes (on the computer your application is running on) – maybe in a <em>Task Manager</em>-like GUI – Electron would be a good fit because it allows you to create windows. ""Pure"" Node.js application, on the other hand, run only inside the terminal which is sometimes enough.</p>&#xA;",6662225,"",,"",,2018-02-12T13:33:24,"","",,0,,,
48755874,2,,48087022,2018-02-12T21:35:18,,1,,"<p>I stumbled in the same trouble, but with the ""dialog"" APIs. I noticed this happens not only with Electron APIs, but also with Node.js APIs; in general calling a route function inside a callback raise the issue.</p>&#xA;&#xA;<p>I noticed also that if inside the callback some data of the Angular component are changed, the interface is not updated; I had to make an explicit call to the change detector: <code>this.changeDetector.detectChanges();</code><br>&#xA;I remember similar problems in AngularJS, when the <code>apply()</code> function has to be called if some work was done ""outside"" the Angular boundaries; maybe the issues are related.</p>&#xA;&#xA;<p>In my case I was able to circumnvent the problem by switching to the ""syncronous"" version of <code>Electron.remote.dialog</code>, instead of:</p>&#xA;&#xA;<pre><code>this.electronService.remote.dialog.showOpenDialog({title:'Output Folder',  &#xA;properties: [""openDirectory""] },  (folders) =&gt; {&#xA;     this.projectService.theProject.targetFolder = folders[0];&#xA;     this.changeDetector.detectChanges();&#xA;     this.router.navigateByUrl('/open');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I tried this:</p>&#xA;&#xA;<pre><code>  var folders = this.electronService.remote.dialog.showOpenDialog({title:'Output Folder', &#xA;         properties: [""openDirectory""] });&#xA;  if (folders) {&#xA;    this.projectService.theProject.targetFolder = folders[0];&#xA;    this.router.navigateByUrl('/open');&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Not only it works in my case (Windows 8 /10), but I can also get rid of the change detector update.</p>&#xA;&#xA;<p>Hope this helps.</p>&#xA;&#xA;<p>PS: I used <a href=""https://thorsten-hans.com/integrating-angular-and-electron-using-ngx-electron-9c36affca25e"" rel=""nofollow noreferrer"">ngx-electron</a> to wrap the Electron APIs</p>&#xA;",5253647,"",,"",,2018-02-12T21:35:18,"","",,0,,,
48759837,2,,48758375,2018-02-13T05:10:03,,1,,"<p>I fixed the npmjs.com/package/youtube-dl issue by download the latest youtube-dl exe from <a href=""https://youtube-dl.org/downloads/latest/youtube-dl.exe"" rel=""nofollow noreferrer"">https://youtube-dl.org/downloads/latest/youtube-dl.exe</a>, then putting it in node_modules\youtube-dl\bin</p>&#xA;",391918,"",391918,"",2018-02-14T05:36:44,2018-02-14T05:36:44,"","",,0,,,
48767826,2,,48747773,2018-02-13T13:21:59,,1,,"<p>Thanks to Zxifer's answer I stumbled across the <a href=""https://github.com/chunyenHuang/hummusRecipe"" rel=""nofollow noreferrer"">HummusRecipe</a> library which provides an high-level API to the <a href=""https://github.com/galkahana/HummusJS"" rel=""nofollow noreferrer"">HummusJS</a> project. The overlay method is what I was looking for.</p>&#xA;&#xA;<p>I ended up with this code:</p>&#xA;&#xA;<pre><code>// Maximum plottable height (915 mm) - Conversion to point&#xA;const maxPageHeight = (915 / 0.3528);&#xA;&#xA;// Read files and determine width/length of plot&#xA;const fileOne = new HummusRecipe('lp.pdf', 'output1.pdf');&#xA;const fileTwo = new HummusRecipe('ls.pdf', 'output2.pdf');&#xA;let width = Math.max(fileOne.pageInfo(1).width, fileTwo.pageInfo(1).width) + 30;&#xA;&#xA;// Create new pdf file&#xA;const pdfDoc = new HummusRecipe('new', 'output.pdf', {&#xA;    version: 1.6,&#xA;    author: 'IBB Wörn Ingenieure GmbH',&#xA;    title: 'Print PDF',&#xA;    subject: 'Imposition of various PDF files for optimized printing.'&#xA;});&#xA;&#xA;// Get height of first pdf to generate offsett&#xA;let heightOne = fileOne.pageInfo(1).height;&#xA;// Overlay PDFs to new pdf with offset and ~ 5mm margin&#xA;pdfDoc&#xA;    .createPage(width, maxPageHeight)&#xA;    .overlay('lp.pdf', 15, 15)&#xA;    .overlay('ls.pdf', 15, heightOne + 15)&#xA;    .endPage()&#xA;    .endPDF();&#xA;</code></pre>&#xA;",1130036,"",1130036,"",2018-02-15T06:54:08,2018-02-15T06:54:08,"","",,0,,,
48772811,2,,48763886,2018-02-13T17:55:38,,0,,"<p>Alright, made it working by editing the  tag with the code requiere jQuery.<br/>&#xA;Before Electron's base script tag, I added a tag  with my jQuery. It seems that it wasn't loaded</p>&#xA;",9343182,"",,"",,2018-02-13T17:55:38,"","",,0,,,
48774517,2,,48715555,2018-02-13T19:48:38,,0,,"<p>I realised/remembered that Electron has an initialisation phase which gets signaled via the <code>app.ready()</code> handler, so only uncaught exceptions raised <em>after</em> this completes successfully will pause execution in my main process code.</p>&#xA;&#xA;<p>For now, I've modified <code>Module._load</code> in <code>electron/dist/resources/default_app.asar/main.js</code> to run outside of the try/catch block during <code>--inspect</code> so I can keep my ES module loading synchronous.</p>&#xA;",2509364,"",,"",,2018-02-13T19:48:38,"","",,0,,,
48785074,2,,48740306,2018-02-14T10:37:51,,4,,"<p>this worked for me .Although the size of the icon has to be small to be shown</p>&#xA;&#xA;<pre><code>const { Tray, nativeImage } = require('electron');&#xA;&#xA;const iconPath = path.join(__dirname, 'build/icon-st.png');&#xA;mainWindow.tray = new Tray(nativeImage.createFromPath(iconPath));&#xA;</code></pre>&#xA;",7260635,"",,"",,2018-02-14T10:37:51,"","",,0,,,
48786766,2,,48783195,2018-02-14T12:01:35,,0,,"<pre><code>require('child_process').spawn('control', ['timedate.cpl'])&#xA;</code></pre>&#xA;",2626313,"",,"",,2018-02-14T12:01:35,"","",,0,,,
48787226,2,,48777466,2018-02-14T12:27:21,,0,,"<p>The <a href=""https://electronjs.org/docs/api/dialog#dialogshowmessageboxbrowserwindow-options-callback"" rel=""nofollow noreferrer""><code>showMessgeBox</code> docs</a> explain this:</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>defaultId</code> Integer (optional) - Index of the button in the buttons array which will be selected by default when the message box opens.</p>&#xA;</blockquote>&#xA;",106623,"",,"",,2018-02-14T12:27:21,"","",,0,,,
48795361,2,,48574242,2018-02-14T20:06:45,,0,,<p>You need a License: directive in the spec file.</p>&#xA;,4042139,"",,"",,2018-02-14T20:06:45,"","",,0,,,
48800996,2,,48787683,2018-02-15T06:17:03,,1,,<p>I got solution. I didn't include </p>&#xA;&#xA;<pre><code>const users = require('./routes/users'); &#xA;</code></pre>&#xA;&#xA;<p>in app.js</p>&#xA;&#xA;<p>and res.send('Authenticate'); in users.js is not required for instance.</p>&#xA;,7795969,"",,"",,2018-02-15T06:17:03,"","",,0,,,
48839523,2,,48728958,2018-02-17T08:45:11,,0,,<p>Upgrading Electron from v1.7.11 to v1.8.2 solved the issue for me. I could reproduce on multiple computers (Windows/Mac OS X).</p>&#xA;,1227185,"",,"",,2018-02-17T08:45:11,"","",,0,,,
48859520,2,,48858316,2018-02-19T04:25:27,,3,,"<p>you have to understand how callbacks work in node.js, callbacks are executed asynchronously, before <code>app.onready</code> fires, <code>mainWindow</code> is still undefined hence the declaration of <code>let mainWindow</code> assigns <code>undefined</code> to <code>mainWindow</code>, take <code>mainWindow.on(""closed"", ....)</code> into the <code>app.on(""ready"")</code> event handler. Do this</p>&#xA;&#xA;<pre><code>const electron = require('electron')&#xA;const app = electron.app&#xA;const BrowserWindow = electron.BrowserWindow&#xA;&#xA;let mainWindow&#xA;&#xA;app.on('ready', _ =&gt; {&#xA;  mainWindow = new BrowserWindow({&#xA;      height: 400,&#xA;      width: 400&#xA;  })&#xA;  mainWindow.on('closed', _ =&gt; {&#xA;    console.log('closed')&#xA;    mainWindow = null&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",5402401,"",,"",,2018-02-19T04:25:27,"","",,0,,,
48692452,2,,48668750,2018-02-08T18:30:25,,2,,"<p>It appears that you are simply misplacing where you are creating the nightmare instances. Cannot help much without some more code snippet and information.</p>&#xA;&#xA;<h1>Way 1</h1>&#xA;&#xA;<p>Create nightmare instance every time and close them after you are done with your task. It will require some time to boot up the instance, but it will also lessen the memory load. Not to mention you can have multiple nightmare instances for different users.</p>&#xA;&#xA;<h1>Way 2</h1>&#xA;&#xA;<p>Don't end and re-use same nightmare instance. Have multiple nightmare instances and queue the call for screenshot. The websites will load fast and it won't take time to boot up an instance, but you will have longer wait time for longer queue.</p>&#xA;",6161265,"",,"",,2018-02-08T18:30:25,"","",,1,,,
48791158,2,,48790230,2018-02-14T15:50:20,,1,,"<p>The problem probably is, that electron does not trust your certificates. Have a look here: <a href=""https://stackoverflow.com/a/38989441/5133130"">https://stackoverflow.com/a/38989441/5133130</a></p>&#xA;",5133130,"",,"",,2018-02-14T15:50:20,"","",,1,,,
48835523,2,,48835310,2018-02-16T22:05:55,,0,,"<p>Ok, your problem is your function is out of the global scope. You can: A.) Create a global function or B.) Remove the unnecessary function and do something such as this: </p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const mainMenu = Menu.buildFromTemplate(mainMenuTemplate);&#xD;&#xA;  Menu.setApplicationMenu(mainMenu);&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;const mainMenuTemplate = [&#xD;&#xA;  {&#xD;&#xA;    label: 'File',&#xD;&#xA;    submenu:  [&#xD;&#xA;      {&#xD;&#xA;        label: 'Administrator Panel',&#xD;&#xA;        click() {&#xD;&#xA;            addWindow = new BrowserWindow({&#xD;&#xA;                width: 200,&#xD;&#xA;                height: 200,&#xD;&#xA;                title: 'Administrator Panel'&#xD;&#xA;              });&#xD;&#xA;              addWindow.loadURL(url.format({&#xD;&#xA;                pathname: path.join(__dirname, ""addWindow.html""),&#xD;&#xA;                protocol: 'file:',&#xD;&#xA;                slashes: true&#xD;&#xA;              }));&#xD;&#xA;        }&#xD;&#xA;      },&#xD;&#xA;      {&#xD;&#xA;        label: 'Exit',&#xD;&#xA;        accelerator: process.platform == 'darwin' ? 'Command + Q' : 'Ctrl + Q',&#xD;&#xA;        click() {&#xD;&#xA;          app.quit();&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    ]&#xD;&#xA;  }&#xD;&#xA;];</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>I simply removed the function and put its code inside of the <code>click</code> handler.</p>&#xA;&#xA;<p>If you are determined to use the function, read up on global variables here: <a href=""https://electronjs.org/docs/api/remote"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/remote</a> </p>&#xA;",4033014,"",,"",,2018-02-16T22:05:55,"","",,1,,,
48841025,2,,48840970,2018-02-17T11:59:14,,8,,"<p>you are executing the <code>createWindow</code> function , you have to pass it as a reference not calling the function</p>&#xA;&#xA;<pre><code>app.on(""ready"", ..... )&#xA;</code></pre>&#xA;&#xA;<p>do this</p>&#xA;&#xA;<pre><code>app.on(""ready"", createWindow);&#xA;</code></pre>&#xA;",5402401,"",,"",,2018-02-17T11:59:14,"","",,1,,,
48689060,2,,48685507,2018-02-08T15:27:44,,4,,"<p>you need to implement your own desktop picker dialog in electron. See <a href=""https://github.com/electron/electron/issues/4432"" rel=""nofollow noreferrer"">here</a></p>&#xA;",4352772,"",,"",,2018-02-08T15:27:44,"","",,2,,,
48751798,2,,48639021,2018-02-12T17:05:54,,0,,"<p>If you're using Electron I'd recommend using the correct OAuth flow for a desktop app, according to the <a href=""https://auth0.com/docs/api-auth/which-oauth-flow-to-use"" rel=""nofollow noreferrer"">Auth0 web site</a>, which is <strong>'Authorization Code (PKCE)'</strong>.</p>&#xA;&#xA;<p>Your Angular OIDC library is for Single Page Applications, which use a different solution called <strong>'Implicit Flow'</strong>.</p>&#xA;&#xA;<p>The technique for Desktop Apps is to trigger a login on the System Browser, but it is tricky and more work than you'd probably like.</p>&#xA;&#xA;<p>There is an <a href=""https://github.com/googlesamples/appauth-js-electron-sample"" rel=""nofollow noreferrer"">Electron AppAuth Sample</a> that does desktop logins:</p>&#xA;&#xA;<ul>&#xA;<li>During user logins, there is a switch to the System Browser</li>&#xA;<li>After login completes the desktop app is notified</li>&#xA;<li>The notification is via either <strong>Loopback Interface</strong> or <strong>Private URI Scheme</strong></li>&#xA;</ul>&#xA;&#xA;<p>I've been writing a very detailed blog on OAuth technologies that you may want to browse: it includes some notes on <a href=""http://authguidance.com/2018/01/11/desktop-apps-overview/"" rel=""nofollow noreferrer"">Desktop Logins</a>.</p>&#xA;",9019885,"",,"",,2018-02-12T17:05:54,"","",,2,,,
48788049,2,,48777336,2018-02-14T13:09:04,,4,,"<p>Electron will not load <code>file://</code> urls while it is running a page from a non-file URL (<a href=""http://localhost:9080"" rel=""nofollow noreferrer"">http://localhost:9080</a> in your case).</p>&#xA;&#xA;<p>This means you only need to disable <code>webSecurity</code> when you're in development mode and running from the Webpack development server. </p>&#xA;&#xA;<p>In production you can leave <code>webSecurity</code> enabled as you're loading from a file: <code>file://${__dirname}/index.html</code></p>&#xA;",106623,"",,"",,2018-02-14T13:09:04,"","",,3,,,
48659777,2,,48659211,2018-02-07T09:08:55,,2,,"<p>I think you can try:</p>&#xA;&#xA;<pre><code>var webviewlo = document.createElement(""webview"");&#xA;webviewlo.innerHTML  = ""...your html string...""&#xA;</code></pre>&#xA;&#xA;<p>You can also try using:</p>&#xA;&#xA;<pre><code>webviewlo.setAttribute(""allowpopups"","""");&#xA;</code></pre>&#xA;",6081475,"",6081475,"",2018-02-07T11:14:10,2018-02-07T11:14:10,"","",,4,,,
48681044,2,,48680928,2018-02-08T08:39:52,,1,,"<p>Take a look at this: <a href=""https://electronjs.org/docs/api/frameless-window#create-a-frameless-window"" rel=""nofollow noreferrer"">Electron Frameless Window</a></p>&#xA;&#xA;<p>You can use it to ""hide/disable"" the window controls. You can also set the option ""alwaysOnTop"" in your browser window object so the application always stays on top of other applications. Search for the option on this page<a href=""https://electronjs.org/docs/api/browser-window"" rel=""nofollow noreferrer""> Electron API Browser Window</a></p>&#xA;",7546330,"",,"",,2018-02-08T08:39:52,"","",,4,,,
48819518,2,,48819313,2018-02-16T03:06:58,,3,,"<p>While it is technically possible to make Node.js your backend for an Electron app, it would be a heavy handed solution and is not recommended.</p>&#xA;&#xA;<p>Instead of post/get requests, instances of Electron's EventEmitter class are typically used for communicating between the front and backend. Use the <code>ipcMain</code> module on the backend, and <code>ipcRenderer</code> on your frontend to exchange any sort of data. In fact, messages can be sent either synchronously or asynchronously. </p>&#xA;&#xA;<p>For example, from Electron's <a href=""https://electronjs.org/docs/api/ipc-main"" rel=""nofollow noreferrer"">documentation</a>:</p>&#xA;&#xA;<pre><code>// In main process.&#xA;const {ipcMain} = require('electron')&#xA;ipcMain.on('asynchronous-message', (event, arg) =&gt; {&#xA;  console.log(arg)  // prints ""ping""&#xA;  event.sender.send('asynchronous-reply', 'pong')&#xA;})&#xA;&#xA;ipcMain.on('synchronous-message', (event, arg) =&gt; {&#xA;  console.log(arg)  // prints ""ping""&#xA;  event.returnValue = 'pong'&#xA;})&#xA;&#xA;// In renderer process (web page).&#xA;const {ipcRenderer} = require('electron')&#xA;console.log(ipcRenderer.sendSync('synchronous-message', 'ping')) // prints ""pong""&#xA;&#xA;ipcRenderer.on('asynchronous-reply', (event, arg) =&gt; {&#xA;  console.log(arg) // prints ""pong""&#xA;})&#xA;ipcRenderer.send('asynchronous-message', 'ping')&#xA;</code></pre>&#xA;",8360221,"",,"",,2018-02-16T03:06:58,"","",,4,,,
21568804,2,,21545673,2014-02-05T04:44:13,,1,,"<p>Note: it's been a few versions since I've last used node-webkit, but I think the below is still accurate. I tend to abbreviate node-webkit to nw, if that's okay. :)</p>&#xA;&#xA;<blockquote>&#xA;  <p>I know window.fs and fs should both resolve, but in node-webkit, they aren't.</p>&#xA;</blockquote>&#xA;&#xA;<p>In nw, <code>global</code> is the global object, while each nw window has it's own <code>window</code> object (unless you fork nw). This may be a lil bit confusing, since using the nw devtools to create a global will actually create a property on <code>window</code> as expected, so it's not unreasonable to assume you can create globals the same way as in a browser. However, that's really just a side-effect of the devtools running in nw's window context.</p>&#xA;&#xA;<p>However, code running in nw's module context does not even have access to <code>window</code> but can, of course, access <code>global</code> normally.</p>&#xA;&#xA;<p>This is documented <a href=""https://github.com/rogerwang/node-webkit/wiki/Differences-of-JavaScript-contexts"" rel=""nofollow"">here</a>. The first three paragraphs specifically deal with your issue. In short, you'll want to be sure which context your code is running in.</p>&#xA;&#xA;<p>Node's globals meanwhile have a (brief) description <a href=""http://nodejs.org/api/globals.html"" rel=""nofollow"">here</a>.</p>&#xA;",279411,"",,"",,2014-02-05T04:44:13,"","",,0,,,
21506761,2,,21080582,2014-02-02T03:43:07,,2,,<p>I ended up writing a system specific application to do this that send the reply back over a local socket connection and using node's ability to exec processes and detect the OS to determine which version to launch. I think the comment to this being very system specific is the issue here.</p>&#xA;&#xA;<p>Hopefully either node or the node-webkit folks through Chromium's ability to this will include it in node-webkit. Hope this helps someone in the future and thanks to everyone who tried to help!</p>&#xA;,2565096,"",,"",,2014-02-02T03:43:07,"","",,0,,,
21654631,2,,21056653,2014-02-09T02:51:26,,2,,"<p>In short, you can work this around by creating a batch program and let it strip the file name down to the path name part, to be fed to <code>nw.exe</code>, as it requires.</p>&#xA;&#xA;<p>Unfortunately, as you said, we don't have full control over the way the main file of the project is passed to the browser, hence some further actions (in addition to the creation of the batch file) are needed.</p>&#xA;&#xA;<p>This is how I got it working after a bit of struggle:</p>&#xA;&#xA;<ul>&#xA;<li>added <code>nw.exe</code> to the system <code>%PATH%</code> variable (optional, just for ease of access)</li>&#xA;<li><p>created <code>nw.bat</code> in the same folder as <code>nw.exe</code>, and filled it with this content:</p>&#xA;&#xA;<pre><code>@echo %1&#xA;start nw.exe %~d1%~p1&#xA;</code></pre></li>&#xA;</ul>&#xA;&#xA;<p>The first line of this batch file is just to inspect the actual parameter that is getting passed to the batch file.</p>&#xA;&#xA;<p>The second line uses <code>start</code> to invoke <code>nw.exe</code> without having to wait for its return (you may need to specify the full path to <code>nw.exe</code>, if you didn't add it to the system <code>%PATH%</code> variable).</p>&#xA;&#xA;<p>The second line also passes to <code>nw.exe</code> the drive part of the parameter (extracted from <code>%1</code> by <code>%~d1</code>) concatenating it to the path of the parameter (extracted from <code>%1</code> by <code>%~p1</code>).</p>&#xA;&#xA;<p>For instance, my last run from within NetBeans gave this output:</p>&#xA;&#xA;<pre><code>D:\node\test\index.html&#xA;D:\node\test&gt;start nw.exe D:\node\test\&#xA;</code></pre>&#xA;&#xA;<p>Then I needed something to tie the NetBeans run button to an arbitrary executable, and luckily I found a perfect fit.</p>&#xA;&#xA;<p>So here is how I went on:</p>&#xA;&#xA;<ul>&#xA;<li>installed the <strong>Node.js Projects</strong> plugin from <a href=""http://timboudreau.com/modules"" rel=""nofollow"">Timboudreau Update Center</a></li>&#xA;<li>went to <code>Options &gt; Miscellaneous &gt; Node.js</code> and set the <code>Node.js Binary</code> field to point to my <code>nw.bat</code> file</li>&#xA;</ul>&#xA;&#xA;<p>In my project, I've also taken care to put <code>package.json</code> in the same folder of <code>index.html</code> (being that that's the main file of my package, and that's what will be fed to the batch file).</p>&#xA;&#xA;<p>Now pressing F6 on my NetBeans installation happily runs my node-webkit project without any further ado :-)</p>&#xA;",3288642,"",3288642,"",2014-02-09T03:03:46,2014-02-09T03:03:46,"","",,0,,,
21495611,2,,21483022,2014-02-01T07:56:26,,3,,"<p>I have solved the problem by adding this to the package.json:</p>&#xA;&#xA;<pre><code>""chromium-args"": ""--disable-web-security"",&#xA;</code></pre>&#xA;&#xA;<p>Try it!</p>&#xA;",2591498,"",,"",,2014-02-01T07:56:26,"","",,2,,,
21731592,2,,21674388,2014-02-12T15:04:43,,3,,"<p>You should wrap your call in a ""on"" event on the window.</p>&#xA;&#xA;<pre><code>safeExit = false;&#xA;win.on('close', function () {&#xA;    // show warning if you want&#xA;    this.close(safeExit);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Warning - the above code will go into an infinite loop, you can simply open the console and set safeExit to true to exit the program.  I hope this helps!</p>&#xA;",991479,"",991479,"",2014-02-12T15:11:00,2014-02-12T15:11:00,"","",,2,,,
56243958,2,,45237103,2019-05-21T17:55:48,,1,,<p>I solved this problem by installing the array <code>unique</code> and it started working:</p>&#xA;&#xA;<pre><code>npm install --save array-unique&#xA;</code></pre>&#xA;,11230166,"",10607772,"",2019-05-21T18:11:04,2019-05-21T18:11:04,"","",,0,,,
56249696,2,,56243085,2019-05-22T05:13:07,,0,,"<p>Place the nodeIntegration inside webPreferences attribute</p>&#xA;&#xA;<pre><code>{ width: 1280,&#xA; height: 720,&#xA; webPreferences : { nodeIntegration: true }, &#xA; resizable: false,&#xA; maximizable: false&#xA; }&#xA;</code></pre>&#xA;",3502805,"",,"",,2019-05-22T05:13:07,"","",,0,,,
56253675,2,,56253088,2019-05-22T09:33:43,,0,,"<p>You have to turn off nodeIntegration  using nodeIntegration :false when using third party web urls in your window. Else Your computer will be at risk.</p>&#xA;&#xA;<pre><code>  mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    webPreferences: {&#xA;        nodeIntegration: false&#xA;    }&#xA;  })&#xA;  mainWindow.loadURL('https://www.facebook.com/');&#xA;</code></pre>&#xA;",3502805,"",,"",,2019-05-22T09:33:43,"","",,0,,,
56267396,2,,56263092,2019-05-23T02:41:30,,1,,"<p><strong>Got it!!!</strong></p>&#xA;&#xA;<p>When creating BrowserWindow in <strong>main.js</strong> set nodeIntegration true</p>&#xA;&#xA;<pre><code>win = new BrowserWindow({&#xA;show: false,&#xA;webPreferences: {&#xA;    nodeIntegration: true&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This allows angularjs to use require(), so in <strong>app.controller.js</strong> i just did</p>&#xA;&#xA;<pre><code>const { ipcRenderer } = require('electron')&#xA;  // In renderer process (web page).&#xA;  console.log(ipcRenderer.sendSync('synchronous-message', 'ping')) // prints ""pong""&#xA;&#xA;  ipcRenderer.on('asynchronous-reply', (event, arg) =&gt; {&#xA;    console.log(arg) // prints ""pong""&#xA;  })&#xA;  ipcRenderer.send('asynchronous-message', 'ping')&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>As result it prints in console: &#xA;pong&#xA;pong</p>&#xA;",11540997,"",,"",,2019-05-23T02:41:30,"","",,0,,,
56267851,2,,56265958,2019-05-23T03:52:06,,5,,"<p>It looks like adding the preference: </p>&#xA;&#xA;<pre><code>var mainWindow = new electron.BrowserWindow({&#xA;  ...&#xA;  webPreferences: {&#xA;    nodeIntegration: true,&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>is needed to enable <code>require</code> in the renderer process.</p>&#xA;",586181,"",,"",,2019-05-23T03:52:06,"","",,0,,,
56286425,2,,56285661,2019-05-24T05:38:07,,1,,<p>Windows does not provide permission to write to <code>Program Files</code> directory unless you have administrator privileges. Either you have to force user to run you program as administrator or write logs to a folder like <code>C:\Users\&lt;username&gt;\AppData\Local\&lt;yourappname&gt;</code> as most applications does</p>&#xA;,7532540,"",,"",,2019-05-24T05:38:07,"","",,0,,,
56288911,2,,56285332,2019-05-24T08:44:06,,1,,"<p>Sure you can you have access to the complete NodeJS builtin API.</p>&#xA;&#xA;<p>For example if you want to execute a simple <code>ls -lh /usr</code> command, you can do:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { spawn } = require('child_process');&#xA;const ls = spawn('ls', ['-lh', '/usr']);&#xA;&#xA;ls.stdout.on('data', data =&gt; console.log(`stdout: ${data}`));&#xA;&#xA;ls.stderr.on('data', data =&gt; console.log(`stderr: ${data}`));&#xA;&#xA;ls.on('close', code =&gt; console.log(`child process exited with code ${code}`));&#xA;</code></pre>&#xA;",1907797,"",,"",,2019-05-24T08:44:06,"","",,0,,,
56296153,2,,56294148,2019-05-24T16:07:45,,1,,"<p>You can the get the current webcontent id from the main process by accessing the sender object in the events object which is the first argument.</p>&#xA;&#xA;<pre><code>   console.log(event.sender.webContents.id);&#xA;</code></pre>&#xA;&#xA;<p>you can also pass the id of the window that the eent is coming from via the renderer process.</p>&#xA;&#xA;<pre><code>  // in the renderer process do this&#xA;  electron.ipcRenderer.send(""new-message"", { &#xA;      winId: electron.remote.getCurrentWebContents().id , &#xA;      message: ""Hi""&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>when the main process receives this event, you just have to access the <code>winId</code> property in the message object</p>&#xA;",5402401,"",,"",,2019-05-24T16:07:45,"","",,0,,,
56315013,2,,56314746,2019-05-26T15:45:06,,2,,"<p><code>.node</code> files are compiled <a href=""https://nodejs.org/api/addons.html"" rel=""nofollow noreferrer"">C++ addons</a>, not archive files. You can't extract them (though you might be able to <em>decompile</em> them).</p>&#xA;",893780,"",,"",,2019-05-26T15:45:06,"","",,0,,,
56322235,2,,52522354,2019-05-27T08:21:44,,0,,"<p>To quote <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#Using_window.postMessage_in_extensions"" rel=""nofollow noreferrer"">MDN web docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Lastly, posting a message to a page at a file: URL currently requires that the targetOrigin argument be ""*"". file:// cannot be used as a security restriction; this restriction may be modified in the future.</p>&#xA;</blockquote>&#xA;&#xA;<p>So in <code>preload.js</code> you would have to resort to something like</p>&#xA;&#xA;<pre><code>window.addEventListener(""DOMContentLoaded"", () =&gt; {&#xA;  window.postMessage({ type: ""fooType"", text: ""barMsg"" }, ""*"")&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>In the receiving renderer (webpage), you could restrict message processing e.g. like this:</p>&#xA;&#xA;<pre><code>window.addEventListener(&#xA;  ""message"",&#xA;  event =&gt; {&#xA;    if (event.origin === ""file://"" &amp;&amp; event.source === window) {&#xA;      console.log(event.data)&#xA;    }&#xA;  },&#xA;  false&#xA;)&#xA;</code></pre>&#xA;&#xA;<p>Tested with electron <code>5.0.1</code> and following <code>webPreferences</code> for <code>BrowserWindow</code>:</p>&#xA;&#xA;<pre><code>{&#xA;  nodeIntegration: false,&#xA;  contextIsolation: true,&#xA;  enableRemoteModule: false,&#xA;  preload: path.join(__dirname, ""preload.js"")&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>A bit late here on the train, but may it still help you or other googlers.</p>&#xA;&#xA;<p>Cheers, ford</p>&#xA;",5669456,"",,"",,2019-05-27T08:21:44,"","",,0,,,
56331554,2,,56331201,2019-05-27T19:31:24,,1,,"<p>If you are letting the form submit itself with the inputs from your function, then the problem is that you have not set a name attribute for those inputs. Just give them a name.</p>&#xA;&#xA;<p>Unnamed inputs do not get processed see this answer for further details <a href=""https://stackoverflow.com/a/12543907/6127393"">https://stackoverflow.com/a/12543907/6127393</a></p>&#xA;",6127393,"",,"",,2019-05-27T19:31:24,"","",,0,,,
56339309,2,,56337940,2019-05-28T09:42:46,,0,,"<p>As suggested by @lawrence Cherone in the comments, I've followed this: <a href=""https://electronjs.org/docs/api/app#appgetpathname"" rel=""nofollow noreferrer"">electronjs.org/docs/api/app#appgetpathname</a></p>&#xA;&#xA;<p>And the solution I've got is below,</p>&#xA;&#xA;<pre><code>var desktopPath = (electron.app || electron.remote.app).getPath('desktop');&#xA;&#xA;var dir = desktopPath + '/test-new-folder';&#xA;&#xA;if (!fs.existsSync(dir)) {&#xA;   fs.mkdirSync(dir, '0777', true);&#xA;}&#xA;</code></pre>&#xA;",6024756,"",6024756,"",2019-05-29T01:16:23,2019-05-29T01:16:23,"","",,0,,,
56340188,2,,56335745,2019-05-28T10:29:06,,1,,<p>So basically the <code>Worker Thread API</code> just shipped with node versions above <code>v10</code>. The version you're using ( electron 2.x ) ships with node v8.x which doesn't have the feature shipped.</p>&#xA;,9255238,"",,"",,2019-05-28T10:29:06,"","",,0,,,
56343762,2,,56338939,2019-05-28T13:50:56,,3,,"<p>I understand why this happens now: Any elements with <code>-webkit-app-region: drag</code> do not receive mouse events. Thanks <a href=""https://stackoverflow.com/users/9758017/41-72-6c"">41 72 6c</a>!</p>&#xA;",9110517,"",9110517,"",2019-12-06T17:49:05,2019-12-06T17:49:05,"","",,0,,,
56356925,2,,55858451,2019-05-29T09:08:48,,3,,"<p>There is a recent Electron bug report with this same issue: <a href=""https://github.com/electron/electron/issues/17972"" rel=""nofollow noreferrer"">#17972</a>.</p>&#xA;&#xA;<p>Downgrading to Electron 4.x is one possible solution.</p>&#xA;&#xA;<p>Another workaround is mentioned, which enables ""user namespace sandboxing"" instead of the ""SUID sandbox"":</p>&#xA;&#xA;<pre><code>sudo sysctl kernel.unprivileged_userns_clone=1&#xA;</code></pre>&#xA;&#xA;<p>Supposedly this option is enabled on Ubuntu by default, but not on Arch Linux, and apparently also not on your Debian system. To make the change permanent, you can create <code>/etc/sysctl.d/electron.conf</code> with the following content:</p>&#xA;&#xA;<pre><code>kernel.unprivileged_userns_clone = 1&#xA;</code></pre>&#xA;",14637,"",,"",,2019-05-29T09:08:48,"","",,0,,,
56370553,2,,51023802,2019-05-30T01:32:23,,1,,"<p>The reason why it is not working is because you are trying to run NW.js compiled for x86 (and x64) platforms but Raspberry Pi uses ARM architecture.</p>&#xA;&#xA;<p>You can find a NW.js binary that will work in all Raspberry Pi versions out of the box here: <a href=""https://github.com/jalbam/nwjs_rpi"" rel=""nofollow noreferrer"">https://github.com/jalbam/nwjs_rpi</a></p>&#xA;",2265979,"",,"",,2019-05-30T01:32:23,"","",,0,,,
56371870,2,,56364780,2019-05-30T04:58:01,,2,,<p>You have to put icon argument like this </p>&#xA;&#xA;<pre><code>--icon=./my_logo.ico&#xA;</code></pre>&#xA;&#xA;<p>Also make sure the logo is in the current directory where you execute npm run build</p>&#xA;,3502805,"",,"",,2019-05-30T04:58:01,"","",,0,,,
56373871,2,,56291531,2019-05-30T07:44:31,,0,,"<p>So, the best solution I found was using an external package. First I did publishing it to npm and now I'm using <code>yarn workspaces</code> and simply requiring my package inside <code>preload.js</code> </p>&#xA;&#xA;<p><code>const = { MyClass } = require('my-workspace-package')</code></p>&#xA;&#xA;<p>and then I can use it freely inside the file (and also inject it into my <code>window</code> object for instance)</p>&#xA;",4897880,"",,"",,2019-05-30T07:44:31,"","",,0,,,
56377362,2,,56357669,2019-05-30T11:24:13,,0,,"<p>When you login on the portal ,when using an org id something@yourcompany-name.com , it will work, but when use a live id something@gmail.com, we need to pass TenantId.</p>&#xA;&#xA;<p>Primary purpose is to make the login experience simple for the user. Hence we start with minimal required parameters. For interactiveLogin(), I thought it was zero. But that is incorrect. TenantId or domain must be provided when using liveID.</p>&#xA;",3192678,"",,"",,2019-05-30T11:24:13,"","",,0,,,
56409559,2,,56409523,2019-06-01T18:53:52,,0,,"<p>You can use the <code>beforeCreate</code> hook on the <code>Vue</code>component in order to hydrate the <code>data</code> property:</p>&#xA;&#xA;<pre><code>export default {&#xA;  data: function() {&#xA;    return {&#xA;      files: []&#xA;    };&#xA;  },&#xA;  beforeCreate() {&#xA;    ipcRenderer.on(""channel1"", (e, files) =&gt; {&#xA;      this.files = files&#xA;    });&#xA;  },&#xA;  methods: {&#xA;    clicked: function() {&#xA;      ipcRenderer.send(""channel1"", ""open dialog to getFiles from user"");&#xA;    }&#xA;  }&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Note that, of course, you cannot interact directly with the files array until you know it's been hydrated, so a computed getter here may be of some use to you, or just use <code>files.length</code>.</p>&#xA;",1206267,"",,"",,2019-06-01T18:53:52,"","",,0,,,
56242769,2,,56242705,2019-05-21T16:35:02,,1,,"<p>You should take a look at what the docs say about making it work with Electron:</p>&#xA;&#xA;<blockquote>&#xA;  <h3>How do you make this work with electron?</h3>&#xA;  &#xA;  <p>Electron is notoriously brittle and buggy, and is not officially supported by this package. Although PhotoStructure uses this package within electron, there's a nontrivial amount of auxiliary support code specific to that project to make it work smoothly.</p>&#xA;  &#xA;  <p>If you're still anxious to try, here are some things to keep in mind:</p>&#xA;  &#xA;  <ol>&#xA;  <li><p>Note that this package will spawn exiftool external processes, which means the exiftool-vendored.pl and exiftool-vendored.exe packages should be included in your asarUnpack. SmartUnpack might work, but if it doesn't use a pattern like <code>node_modules/{exiftool-vendored.*}/**/*</code>.</p></li>&#xA;  <li><p>If you're requiring exiftool-vendored from within a webview, you're gonna have a bad time. Many things won't work due to a lack of node compatibility within electron.</p></li>&#xA;  <li><p><code>__dirname</code> at runtime from within an asar package after webpacking will be invalid, so don't rely on that.</p></li>&#xA;  </ol>&#xA;  &#xA;  <p>— <a href=""https://github.com/photostructure/exiftool-vendored.js/wiki/FAQ#how-do-you-make-this-work-with-electron"" rel=""nofollow noreferrer"">https://github.com/photostructure/exiftool-vendored.js/wiki/FAQ#how-do-you-make-this-work-with-electron</a></p>&#xA;</blockquote>&#xA;",4569506,"",,"",,2019-05-21T16:35:02,"","",,1,,,
56250356,2,,56245089,2019-05-22T06:12:38,,1,,"<p>Use Electron's native dialog box to choose the directory</p>&#xA;&#xA;<pre><code>      let { dialog } = require('electron').remote;&#xA;&#xA;      function chooseFolder() {&#xA;&#xA;        dir = dialog.showOpenDialog({&#xA;          properties: ['openDirectory']&#xA;        }, function(res){&#xA;&#xA;          document.getElementsByClassName('input')[0].value = res[0];&#xA;&#xA;        });&#xA;&#xA;      }&#xA;</code></pre>&#xA;",3502805,"",,"",,2019-05-22T06:12:38,"","",,1,,,
56274685,2,,56274559,2019-05-23T11:54:48,,1,,"<p>You can dynamically create a canvas element using Javascript like</p>&#xA;&#xA;<pre><code>var canvas=document.createElement(""canvas"");&#xA;</code></pre>&#xA;&#xA;<p>get it's context</p>&#xA;&#xA;<pre><code>var context = canvas.getContext('2d');&#xA;</code></pre>&#xA;&#xA;<p>and ultimately <strong>don't</strong> append it to the DOM by omitting</p>&#xA;&#xA;<pre><code>document.body.appendChild(canvas);&#xA;</code></pre>&#xA;&#xA;<p>Even though you're still able to do all drawing operations e.g. <strong>drawImage()</strong></p>&#xA;",6504633,"",,"",,2019-05-23T11:54:48,"","",,1,,,
56376579,2,,56370578,2019-05-30T10:37:14,,0,,"<p>There seems to be an issue with permissions on your machine (<code>/usr/lib</code> directory requires root access). What I suggest you to try is to change the default directory where <code>NPM</code> is installing packages globally. Then you can try to run the installation without root access.</p>&#xA;&#xA;<p>Try this:</p>&#xA;&#xA;<ol>&#xA;<li><p>On the command line, in your home directory, create a directory for global installations:</p>&#xA;&#xA;<p><code>mkdir ~/.npm-global</code></p></li>&#xA;<li><p>Configure npm to use the new directory path:</p>&#xA;&#xA;<p><code>npm config set prefix '~/.npm-global'</code></p></li>&#xA;<li><p>In your preferred text editor, open or create a ~/.profile file and add this line:</p>&#xA;&#xA;<p><code>export PATH=~/.npm-global/bin:$PATH</code></p></li>&#xA;<li><p>On the command line, update your system variables:</p>&#xA;&#xA;<p><code>source ~/.profile</code></p></li>&#xA;<li><p>To test your new configuration, install a package globally without using sudo:</p>&#xA;&#xA;<p><code>npm install -g electron</code></p></li>&#xA;</ol>&#xA;&#xA;<p>Courtesy:&#xA;<a href=""https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally"" rel=""nofollow noreferrer"">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</a></p>&#xA;",5265621,"",,"",,2019-05-30T10:37:14,"","",,1,,,
56385105,2,,56382018,2019-05-30T20:21:04,,3,,"<p>In the <code>electron-builder.json</code> under the <code>build</code> section add</p>&#xA;&#xA;<pre><code>""asarUnpack"": [&#xA;      ... your files or folders&#xA;    ]&#xA;</code></pre>&#xA;&#xA;<p>Doc: <a href=""https://www.electron.build/configuration/configuration#configuration-asarUnpack"" rel=""nofollow noreferrer"">https://www.electron.build/configuration/configuration#configuration-asarUnpack</a></p>&#xA;&#xA;<p>After that, your file/folder will be inside the <code>resources\asarUnpack</code> folder.</p>&#xA;",5423742,"",5423742,"",2019-05-30T20:29:53,2019-05-30T20:29:53,"","",,1,,,
56404445,2,,56404306,2019-06-01T06:39:15,,3,,"<p>This can be happen for some reason your cache gets corrupted with some conflicting versions of different dependencies but in your case, you have already run <code>npm cache clean</code> and reinstalled all the node modules. </p>&#xA;&#xA;<p>Please check folder paths that you have given to the <code>package.json</code>. This might fix your problem.</p>&#xA;",3590237,"",,"",,2019-06-01T06:39:15,"","",,1,,,
56432880,2,,56427752,2019-06-03T18:41:34,,0,,"<p>I don't understand how this relates to any ZIP file at all. <code>electron-packager</code> creates a directory structure with an executable, folders, etc., but no ZIP file.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Electron-packager creates a directory <code>{out}/{appname}-win32-x64</code> where <code>{out}</code> and <code>{appname}</code> are the given command line parameters.</p>&#xA;&#xA;<p>Since you want this output directory to have a different name, you could simply rename it after it's created.</p>&#xA;&#xA;<p><strong>Linux/Mac:</strong></p>&#xA;&#xA;<pre><code>""build"": ""electron-packager ... &amp;&amp;    mv   win64/my-app-win32-x64  win64/my-app""&#xA;</code></pre>&#xA;&#xA;<p><strong>Windows:</strong></p>&#xA;&#xA;<pre><code>""build"": ""electron-packager ... &amp;&amp;    ren  win64\my-app-win32-x64  win64\my-app""&#xA;</code></pre>&#xA;&#xA;<p>The <code>&amp;&amp;</code> runs the second command only if the first one completes successfully (non-zero exit code).</p>&#xA;",1335237,"",,"",,2019-06-03T18:41:34,"","",,1,,,
56305387,2,,56305335,2019-05-25T13:43:51,,1,,"<p>Tha happens because the order of your operation matters. As it is right now, you're clearing that little 50 pixel square <strong>before</strong> you're overwriting it with new imageData.&#xA;Try this:</p>&#xA;&#xA;<pre><code>function crop(leftedge, topedge, wd, ht) {&#xA;  const imageData = context.getImageData(leftedge, topedge, wd, ht);&#xA;  const canvas1 = document.createElement(""canvas"");&#xA;  const ctx1 = canvas1.getContext('2d');&#xA;  canvas1.width = wd, canvas1.height = ht;&#xA;&#xA;  ctx1.putImageData(imageData, 0, 0);&#xA;  ctx1.clearRect(0, 0, 50, 50);&#xA;&#xA;  return canvas1;&#xA;}&#xA;</code></pre>&#xA;",6504633,"",,"",,2019-05-25T13:43:51,"","",,2,,,
56381268,2,,56381118,2019-05-30T15:32:47,,1,,"<p>As mentioned in my comment your code is async and your read() method is not returning anything. You should have something close to this:</p>&#xA;&#xA;<pre><code>export default class ReadFile extends Component&lt;Props&gt; {&#xA;  props: Props;&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = {};&#xA;  }&#xA;  componentDidMount() {&#xA;    read((result) =&gt; {&#xA;      this.setState({&#xA;        result,&#xA;      });&#xA;    });&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &lt;div className={styles.container} data-tid=""container""&gt;&#xA;        &lt;p&gt;Read from File&lt;/p&gt;&#xA;        {this.state.result}&#xA;      &lt;/div&gt;&#xA;    );&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And for read() this:</p>&#xA;&#xA;<pre><code>export function read(callback) {&#xA;  let values = [];&#xA;&#xA;  fs.readFile(&#xA;    path.resolve(__dirname, './files/test.txt'),&#xA;    'utf-8',&#xA;    (err, data) =&gt; {&#xA;      if (err) throw err;&#xA;      values = data.toString().split('\n');&#xA;&#xA;      const listItems = values.map(val =&gt; &lt;p&gt;{val}&lt;/p&gt;);&#xA;      return callback(listItems);&#xA;    }&#xA;  );&#xA;}&#xA;</code></pre>&#xA;",599602,"",599602,"",2019-05-30T17:01:01,2019-05-30T17:01:01,"","",,2,,,
56392495,2,,56392433,2019-05-31T09:38:58,,1,,"<p>I think you are looking for the <a href=""https://electronjs.org/docs/api/tray"" rel=""nofollow noreferrer"">Tray API</a></p>&#xA;",4198912,"",,"",,2019-05-31T09:38:58,"","",,2,,,
56401198,2,,56400290,2019-05-31T20:11:27,,23,,"<p>I got my electron application to work by changing the <code>target</code> in the <em>tsconfig.json</em> to <code>es5</code>.</p>&#xA;&#xA;<pre><code>{&#xA;  ""compileOnSave"": false,&#xA;  ""compilerOptions"": {&#xA;    ""importHelpers"": true,&#xA;    ""module"": ""esnext"",&#xA;    ""outDir"": ""./dist/out-tsc"",&#xA;    ""sourceMap"": true,&#xA;    ""declaration"": false,&#xA;    ""moduleResolution"": ""node"",&#xA;    ""emitDecoratorMetadata"": true,&#xA;    ""experimentalDecorators"": true,&#xA;    ""target"": ""es5"", &lt;-- HERE&#xA;    ""typeRoots"": [&#xA;      ""node_modules/@types""&#xA;    ],&#xA;    ""lib"": [&#xA;      ""es2017"",&#xA;      ""dom""&#xA;    ]&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Prior to this, I was getting the blank (white) screen too after updating the Angular 8. Seems now that Angular does a build in both <code>es5</code> and <code>es2015</code>, electron doesn't like that. I would guess this will be fixed in the future.</p>&#xA;&#xA;<p><strong>UPDATE 2019-10-24:</strong></p>&#xA;&#xA;<p>Looks like this was fixed in <code>electron@7.0.0</code>. You can target <code>es2015</code> with that version. Tested with <code>@angular/cli@8.3.14</code>.</p>&#xA;",5437671,"",5437671,"",2019-10-24T19:51:07,2019-10-24T19:51:07,"","",,2,,,
56290464,2,,56289583,2019-05-24T10:08:15,,0,,"<p>I guess it's using <code>JSON.stringify()</code> but it's probably serialized for security reason so maybe it's better to not override it. BTW I don't think override <code>JSON.stringify()</code> is a good practice in any way. I didn't notice <code>ipcRenderer.send</code> serialized data, I pass plain JavaScript Object as data and don't parse it on ipcMain side.</p>&#xA;",1907797,"",,"",,2019-05-24T10:08:15,"","",,3,,,
56399997,2,,56398781,2019-05-31T18:16:31,,1,,"<p>Using preload script you can communicate with the main process, by importing only the ipcRenderer object to the window.</p>&#xA;&#xA;<p>To do that you have to specify the preload script absolute path in the browserWindow webPreferences.</p>&#xA;&#xA;<pre><code>&#xA;  mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    webPreferences: {&#xA;      nodeIntegration: true,&#xA;      preload : path.join(__dirname , '/preload_script.js')&#xA;    }&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>and in preload_script.js inject the ipcRenderer object</p>&#xA;&#xA;<pre><code>window.ipcRenderer = require('electron').ipcRenderer;&#xA;&#xA;</code></pre>&#xA;&#xA;<p>you can use the window.ipcRenderer object in the html script for communication with main process/ or with another renderer process.</p>&#xA;",3502805,"",3502805,"",2019-06-03T05:33:19,2019-06-03T05:33:19,"","",,4,,,
56246508,2,,56243029,2019-05-21T21:20:01,,1,,"<p>You can download the binaries for other platforms using the <code>--target_platform</code> option. To get Linux and MacOS binaries you want to use the values <code>linux</code> and <code>darwin</code>. When downloading the Linux binary you will also need to use the option <code>--target_libc=glib</code>.</p>&#xA;&#xA;<p>For completeness, if you want to download Windows binaries from other platforms, the <code>--target_platform</code> value is <code>win32</code>. And if you want to download Windows or MacOS binaries from Linux, you need to pass the option <code>--target_libc=unknown</code>.</p>&#xA;",159388,"",159388,"",2019-05-22T16:54:25,2019-05-22T16:54:25,"","",,14,,,
56256156,2,,56255956,2019-05-22T11:48:27,,1,,"<p>You can intercept the downloads using will-download event and show the downloaded file using shell.openItem();</p>&#xA;&#xA;<pre><code>// In the main process.&#xA;&#xA;const {app, BrowserWindow, Menu ,shell } = electron;&#xA;&#xA;app.on('ready', function() {&#xA;    // Create new window&#xA;    mainWindow = new BrowserWindow({});&#xA;    // Load html into window&#xA;    mainWindow.loadURL(url.format({&#xA;        pathname: path.join(__dirname, 'index.html'),&#xA;        protocol: 'file:',&#xA;        slashes: true&#xA;    }));&#xA;&#xA;    // Build menu from template&#xA;    const mainMenu = Menu.buildFromTemplate(mainMenuTemplate);&#xA;    // Insert menu&#xA;    Menu.setApplicationMenu(mainMenu);&#xA;mainWindow.webContents.session.on('will-download', (event, item, webContents) =&gt; {&#xA;    // Set the save path, making Electron not to prompt a save dialog.&#xA;    item.setSavePath('/tmp/save.pdf')// get the filename from item object and provide here according to your loic&#xA;&#xA;  item.on('updated', (event, state) =&gt; {&#xA;    if (state === 'interrupted') {&#xA;      console.log('Download is interrupted but can be resumed')&#xA;    } else if (state === 'progressing') {&#xA;      if (item.isPaused()) {&#xA;        console.log('Download is paused')&#xA;      } else {&#xA;        console.log(`Received bytes: ${item.getReceivedBytes()}`)&#xA;      }&#xA;    }&#xA;  })&#xA;  item.once('done', (event, state) =&gt; {&#xA;    if (state === 'completed') {&#xA;      console.log('Download successfully')&#xA;      //Open the document using the external application&#xA;      shell.openItem(item.getSavePath());&#xA;    } else {&#xA;      console.log(`Download failed: ${state}`)&#xA;    }&#xA;  })&#xA;})&#xA;&#xA;});&#xA;&#xA;&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/shell"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/shell</a></p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/download-item"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/download-item</a></p>&#xA;",3502805,"",3502805,"",2019-05-22T12:19:47,2019-05-22T12:19:47,"","",,14,,,
22793113,2,,22724972,2014-04-01T17:45:21,,0,,"<p>Basically, if you can do it in node.js, you should be able to do it in node-webkit.  For example, to receive output from the 'ls' command and print it to console.log, you could do this:</p>&#xA;&#xA;<pre><code>exec('ls', function (err, stdout, stderr) {&#xA;    console.log(stdout)&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Of course, you'd want to do some error handling as well in real life.</p>&#xA;",3476918,"",,"",,2014-04-01T17:45:21,"","",,2,,,
22878968,2,,22873923,2014-04-05T09:21:05,,0,,"<p>Strangely, it work by renamming the executable to nw.exe, thanks to <a href=""https://github.com/geo8bit/nodebob/pull/7"" rel=""nofollow"">https://github.com/geo8bit/nodebob/pull/7</a></p>&#xA;",2389422,"",,"",,2014-04-05T09:21:05,"","",,0,,,
22843628,2,,22842907,2014-04-03T16:28:48,,3,,"<p>Try changing <code>require</code> to start with your current directory explicitly, by adding <code>./</code> to the beginning of your path:</p>&#xA;&#xA;<pre><code>var cc = require(""./crawler/leboncoin/lbcCrawler.js"");&#xA;</code></pre>&#xA;&#xA;<p>Otherwise, node will look in a node_modules directory, or similar, cf:&#xA;<a href=""http://www.bennadel.com/blog/2169-Where-Does-Node-js-And-Require-Look-For-Modules-.htm"" rel=""nofollow"">http://www.bennadel.com/blog/2169-Where-Does-Node-js-And-Require-Look-For-Modules-.htm</a></p>&#xA;&#xA;<p>EDIT:</p>&#xA;&#xA;<p>For some reason, that's not working in node-webkit, but this might do the trick:</p>&#xA;&#xA;<pre><code>path = require('path');&#xA;var cc = require(path.join(process.cwd(),""js/crawler/leboncoin/lbcCrawler.js""));&#xA;</code></pre>&#xA;&#xA;<p>EDIT2:</p>&#xA;&#xA;<p>I think I've got it figured out now.  <code>__dirname</code> and <code>__filename</code> are not defined in the node REPL, nor in a node-webkit script tag, even if your script tag is used to include your .js file, as in</p>&#xA;&#xA;<pre><code>&lt;script src=""js/app.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Thus, if you call require <code>lbcCrawler.js</code> from <code>app.js</code> you'd need to require it as</p>&#xA;&#xA;<pre><code>var cc = require(""./js/crawler/leboncoin/lbcCrawler.js"");&#xA;</code></pre>&#xA;&#xA;<p>because the path is where you start node-webkit, e.g. where index.html lives.</p>&#xA;&#xA;<p>However, if you do</p>&#xA;&#xA;<pre><code>&lt;script&gt;require('js/app.js')&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>then <code>__dirname</code> and <code>__filename</code> are defined and <code>require</code> will search from where the app.js file  lives, i.e. you would do:</p>&#xA;&#xA;<pre><code>var cc = require(path.join(""./crawler/leboncoin/lbcCrawler.js""));&#xA;</code></pre>&#xA;&#xA;<p>Because of this discrepancy, you might be better off depending on the value of <code>process.cwd</code> (as in the first edit above) which should be the same in either case, whether app.js is included via <code>require</code> or <code>script</code>.</p>&#xA;",3476918,"",3476918,"",2014-04-10T07:16:39,2014-04-10T07:16:39,"","",,5,,,
22950957,2,,22766974,2014-04-09T00:56:29,,3,,"<p>To answer my own question: </p>&#xA;&#xA;<p>It just depends if the system has a video driver installed that supports:</p>&#xA;&#xA;<ul>&#xA;<li><code>hardware acceleration</code> and </li>&#xA;<li><code>OpenGL ES2.0</code></li>&#xA;</ul>&#xA;&#xA;<p>(the requirements for <code>WebGL</code>)</p>&#xA;&#xA;<p><code>Node-WebKit</code> or not, <code>WebGL</code> is gonna run smoothly, if the above requirements are met.</p>&#xA;",1846363,"",1846363,"",2014-04-09T18:58:15,2014-04-09T18:58:15,"","",,1,,,
22826834,2,,22760208,2014-04-03T02:39:55,,4,,"<p>webkitSpeechRecognition needs a back-end speech recognition system. </p>&#xA;&#xA;<p>Chrome may use Google's speech recognition system. So we can use webkitSpeechRecognition on Chrome without any hassle. But on others even though it is based on webkit, It may not work properly. </p>&#xA;&#xA;<p>I think it's difficult to use speech recognition feature on node-webkit before supporting Google's or someone's engine.</p>&#xA;&#xA;<p>Also CHANGELOG 0.8.0 / 10-30-2013 says</p>&#xA;&#xA;<blockquote>&#xA;  <p>- undefine window.webkitSpeechRecognition before it's supported </p>&#xA;</blockquote>&#xA;",553095,"",553095,"",2014-04-03T07:36:17,2014-04-03T07:36:17,"","",,0,,,
22937101,2,,22787613,2014-04-08T12:31:33,,9,,"<p>So, there is a bug logged for this in the nodewebkit repo, but I did find a workaround for now. Go into the node_modules directory (where nodewebkit is installed) in the nodewebkit directory, and rename package.json to _package.json.</p>&#xA;&#xA;<p>It seems that there is a conflict with the package.json and the read order of the files.</p>&#xA;&#xA;<p>So something like '<strong>cd [path to node modules]/node_modules/nodewebkit;mv package.json _package.json</strong>' should do it.</p>&#xA;&#xA;<p><strong>PLEASE NOTE:</strong> This is just a workaround, they should be releasing a fix (hopefully) soon, but until they do...</p>&#xA;",1168414,"",,"",,2014-04-08T12:31:33,"","",,0,,,
47743634,2,,47743585,2017-12-10T21:25:36,,0,,"<p>Turns out my package.json syntax was a bit messed up, in a way that didn't produce an error (what are the chances).</p>&#xA;&#xA;<p>Once the syntax was corrected, it worked fine.</p>&#xA;&#xA;<p>Make sure ""script"" is at the top level of the package.json properties.</p>&#xA;",6095037,"",,"",,2017-12-10T21:25:36,"","",,0,,,
47750183,2,,47705907,2017-12-11T09:52:22,,0,,"<p>This might help, datastore loosely follows nedb's implementation. It is not an exact representation, that's instead of going through all these lines of codes:</p>&#xA;&#xA;<pre><code>const Db = require('nedb-promise')&#xA;    , curry = new Db({&#xA;        filename: 'curry'&#xA;        , autoload: true&#xA;        , onload: (e) =&gt; e &amp;&amp; console.err(e)&#xA;    })&#xA;</code></pre>&#xA;&#xA;<p>If you want to control the underlying datastore, you can create it as regular using the original <code>nedb</code> library, and then create a wrapped version:</p>&#xA;&#xA;<pre><code>const nedb = require('nedb')&#xA;const nedbP = require('nedb-promise')&#xA;&#xA;const ds = nedb(...)&#xA;const db = nedbP.fromInstance(ds)&#xA;&#xA;const Datastore = require('nedb')&#xA;const nedbPromise = require('nedb-promise')&#xA;&#xA;const store = Datastore({autoload: true, filename: '...'})&#xA;const db = nedbPromise.fromInstance(store)&#xA;await db.insert(...)&#xA;store.persistence.compactDatafile()&#xA;</code></pre>&#xA;&#xA;<p>I hope this helps.</p>&#xA;",7905714,"",,"",,2017-12-11T09:52:22,"","",,0,,,
47848798,2,,47848772,2017-12-16T18:32:54,,0,,"<p>You aren’t attaching a listener to the connected socket <code>client</code> for the <code>'signIn'</code>event. Instead you are attaching it to your Socket Server.</p>&#xA;&#xA;<p>Change your code from </p>&#xA;&#xA;<p><code>io.on('signIn', () =&gt; {...})</code> </p>&#xA;&#xA;<p>to </p>&#xA;&#xA;<p><code>client.on('signIn', () =&gt; {...})</code></p>&#xA;",2980607,"",2980607,"",2017-12-16T20:06:50,2017-12-16T20:06:50,"","",,0,,,
47853034,2,,47849513,2017-12-17T07:22:02,,0,,"<pre><code>  &lt;p align=""center""&gt;&lt;button style=""height:50px;width:100px"" onclick= &#xA;dropdownChange();&gt;click me &lt;/button&gt;&lt;/p&gt;&#xA;&#xA;&lt;p align=""right""&gt;&lt;select dir=""rtl"" name=""test2"" id=""experience"" &#xA; &gt;&#xA;&#xA;    &lt;option value=""one""&gt; one&lt;/option&gt;&#xA;    &lt;option value=""five""&gt;five&lt;/option&gt;&#xA;    &lt;option value=""six""&gt;six&lt;/option&gt;&#xA;    &lt;option value=""seven""&gt;seven&lt;/option&gt;&#xA;    &lt;option value="""" disabled selected&gt;choose&lt;/option&gt;&#xA;&#xA;    &lt;/select&gt; &lt;font size=""3""&gt; number of experience&lt;/font&gt;&#xA;&#xA;   &lt;/p&gt;&#xA;&#xA;    &lt;script&gt;&#xA;     function dropdownChange() { &#xA;        var experience=document.getElementById(""experience"").value;&#xA;        if(experience===""one"")    {&#xA;        alert(""ok"");&#xA;        document.getElementById('experience').value = """";&#xA;      } &#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>This should do the trick</p>&#xA;",5893921,"",,"",,2017-12-17T07:22:02,"","",,0,,,
47861631,2,,47861342,2017-12-18T03:06:19,,0,,"<p>If you're trying to open it in an external window, you'll need to import shell</p>&#xA;&#xA;<p><code>const shell = require('electron').shell</code></p>&#xA;&#xA;<p>Then you'll need to use the openExternal method of shell</p>&#xA;&#xA;<p><code>shell.openExternal('yourpathhere')</code></p>&#xA;&#xA;<p>Is that what you're after? </p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/browser-window.md</a></p>&#xA;",7551362,"",,"",,2017-12-18T03:06:19,"","",,1,,,
47876667,2,,47815467,2017-12-18T21:27:48,,0,,"<p>I finally found the reason, thanks to this post:</p>&#xA;&#xA;<p><a href=""https://superuser.com/questions/338567/why-cant-i-delete-some-exe-files/521349#521349"">https://superuser.com/questions/338567/why-cant-i-delete-some-exe-files/521349#521349</a></p>&#xA;&#xA;<p>For some really really crazy (Microsoft internal) reasons you must have the ""<strong>Application Experience service</strong>"" enabled!!! God knows why! On German installations the service is called ""<strong>Anwendungserfahrung</strong>"". On my machine it was disabled. As soon as I enabled it, I was able to delete executable files immediately after terminating the EXE/programm!</p>&#xA;&#xA;<p>I hope this post prevents others from going crazy like I did! ;-)</p>&#xA;",1256558,"",1256558,"",2017-12-19T21:20:55,2017-12-19T21:20:55,"","",,0,,,
47919482,2,,47889237,2017-12-21T06:53:35,,0,,"<p>Fortunately, I found the solution. I had multiple dependencies included in the project (golang server, ffmpeg, AppleScript). It was caused by extra dependency (AppleScript). Saving the file again as application (run only, .app extension) fixed the problem.</p>&#xA;&#xA;<p>Here's the link to the ticket on electron-builder page, where i post all steps that i made: <a href=""https://github.com/electron-userland/electron-builder/issues/2399"" rel=""nofollow noreferrer"">enter link description here</a></p>&#xA;",4202365,"",,"",,2017-12-21T06:53:35,"","",,0,,,
47759149,2,,47758927,2017-12-11T18:31:04,,1,,"<p><code>getFocusedWindow</code> returns <code>BrowserWindow</code> object. <code>BrowserWindow</code> is electron's window object, not actual browser's global context - so none of <code>window.</code> global object is being exposed in BrowserWindow automatically. What you may need is get <code>webContents</code> via <code>focusedWindow.webContents</code> then ask renderer process to execute your javascript via <code>executeJavaScript</code> method. Main process and rendere process (browserWindow) are separate process, so you can't direcly invoke function right away but have to ask it.</p>&#xA;",2742189,"",,"",,2017-12-11T18:31:04,"","",,1,,,
47793145,2,,47785886,2017-12-13T12:33:09,,1,,"<p>I'm not exactly sure what your asking but from what I can tell you want to set a <code>menuBar</code> on the main window and a different <code>menuBar</code> on the child window.</p>&#xA;&#xA;<p>You can do this with <a href=""https://electronjs.org/docs/api/browser-window#winsetmenumenu-linux-windows"" rel=""nofollow noreferrer""><code>win.setMenu(menu)</code></a> like this: </p>&#xA;&#xA;<pre><code>const mainWindowMenuBar  = Menu.buildFromTemplate(&lt;Main window template&gt;);&#xA;const childWindowMenuBar = Menu.buildFromTemplate(&lt;Child window template&gt;);&#xA;&#xA;mainWindow.setMenu(mainWindowMenuBar);&#xA;&#xA;childWindow.setMenu(childWindowMenuBar);&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/browser-window#winsetmenumenu-linux-windows"" rel=""nofollow noreferrer"">Docs</a></p>&#xA;",6577664,"",,"",,2017-12-13T12:33:09,"","",,0,,,
47798314,2,,47797426,2017-12-13T16:48:46,,1,,"<p>Obviously, you're running into problems with security protocols in place to keep session information private. You'll need to change your methods one way or the other.</p>&#xA;&#xA;<p>You'll need to choose one of two approaches for this:</p>&#xA;&#xA;<ul>&#xA;<li>Treat your rails app as a pure API, in which case you'd use something link a JSON Web Token or custom API key sent with each request. This works best if you're generating views from electron itself.</li>&#xA;<li>Execute all your actions within the context of a Webview, which goes through the normal devise authentication flow. This works well if you're basically just using electron as a shell around server render views.</li>&#xA;</ul>&#xA;",1518336,"",,"",,2017-12-13T16:48:46,"","",,1,,,
47806983,2,,47806556,2017-12-14T06:17:09,,1,,"<p>The BrowserWindow object is supposed to be destroyed when closed.  You'll need to instantiate a new one when reopening instead of trying to reuse the reference.</p>&#xA;&#xA;<p>Edit:</p>&#xA;&#xA;<p>How you instantiate it depends on if you're doing it from the main process (i.e. ""Main.js"") or the renderer process.</p>&#xA;&#xA;<p>From the main process, it would look like: </p>&#xA;&#xA;<pre><code>var electron = require(""electron"");&#xA;var url = require(""url"");&#xA;var path = require(""path"");&#xA;var newWindow = new electron.BrowserWindow({&#xA;    width: 700,&#xA;    height: 500&#xA;});&#xA;&#xA;newWindow.loadURL(url.format({&#xA;    pathname: path.join(__dirname, '/SomeStuff.html'),&#xA;    protocol: 'file:',&#xA;    slashes: true&#xA;}));&#xA;</code></pre>&#xA;&#xA;<p>If instantiating from the renderer process, you need to use the ""remote"" object to access the main process.  So it'd be like:</p>&#xA;&#xA;<pre><code>var newWindow = new electron.remote.BrowserWindow({&#xA;    width: 700,&#xA;    height: 500&#xA;});&#xA;</code></pre>&#xA;",5705257,"",5705257,"",2017-12-14T18:16:52,2017-12-14T18:16:52,"","",,2,,,
47822695,2,,47822488,2017-12-14T21:56:06,,1,,"<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p>&#xA;&#xA;<p>Arrow functions, by their definition, do not assign a value to various variables associated with normal functions, one of which being <code>this</code>.</p>&#xA;&#xA;<p><em>An arrow function expression has a shorter syntax than a function expression and does not have its own this, arguments, super, or new.target</em></p>&#xA;&#xA;<p>There are two ways around this issue.  First, use a normal function that will assign the value to <code>this</code>.  Alternatively, you can pass in the event to the event handler and access the element off of it.</p>&#xA;&#xA;<pre><code>$('p').on('click', e =&gt; $(e.target).hide())&#xA;</code></pre>&#xA;",1586174,"",,"",,2017-12-14T21:56:06,"","",,0,,,
47826383,2,,47822960,2017-12-15T05:37:06,,1,,"<p>webView is special kind of tag in Electron. as document (<a href=""https://electronjs.org/docs/api/webview-tag"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/webview-tag</a>) says, <code>Unlike an iframe, the webview runs in a separate process than your app. It doesn't have the same permissions as your web page and all interactions between your app and embedded content will be asynchronous.</code>. </p>&#xA;&#xA;<p>Since it's different process and doesn't allow direct interaction, way you can communicate is using ipc between webview and outer frame. Check Electron's ipc to establish. Specifically you may interested in <code>ipcRenderer.sendToHost</code> for renderer host and webview. </p>&#xA;",2742189,"",,"",,2017-12-15T05:37:06,"","",,3,,,
47842294,2,,47842224,2017-12-16T03:37:59,,1,,"<p>It would have been very easy with angular js by two way binding and applying same valuechange listener on all the three dropdowns.</p>&#xA;&#xA;<p>However, here also you can provide 3 different ids to your dropdowns and bind them with same value-change listener using onchange attribute.</p>&#xA;&#xA;<p>In the value-change listener function , get the value of all the 3 drop down value by document.getElementById , comapre them and display alert accordingly. You can find below the sample solution for it which I prepared:</p>&#xA;&#xA;<pre><code>&lt;head&gt;&#xA;&lt;script&gt;&#xA;function dropdownChange()    {&#xA;var car=document.getElementById(""car"").value;&#xA;var color=document.getElementById(""color"").value;&#xA;var owner=document.getElementById(""owner"").value;&#xA;if(car===""volvo"" &amp;&amp; color===""red"" &amp;&amp; owner ===""james"")    {&#xA;    alert(""Cool"");&#xA;}&#xA;}&#xA;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&lt;select id =""car"" onchange=""dropdownChange();""&gt;&#xA;&lt;option value=""volvo""&gt;Volvo&lt;/option&gt;&#xA;&lt;option value=""saab""&gt;Saab&lt;/option&gt;&#xA;&lt;option value=""opel""&gt;Opel&lt;/option&gt;&#xA;&lt;option value=""audi""&gt;Audi&lt;/option&gt;&#xA;&lt;/select&gt;&#xA;&#xA;&lt;select id=""color"" onchange=""dropdownChange();""&gt;&#xA;&lt;option value=""red""&gt;red&lt;/option&gt;&#xA;&lt;option value=""blue""&gt;blue&lt;/option&gt;&#xA;&lt;option value=""black""&gt;black&lt;/option&gt;&#xA;&lt;option value=""green""&gt;green&lt;/option&gt;&#xA;&lt;/select&gt;&#xA;&#xA;&lt;select id=""owner"" onchange=""dropdownChange();""&gt;&#xA;&lt;option value=""'mark""&gt;'mark&lt;/option&gt;&#xA;&lt;option value=""jones""&gt;jones&lt;/option&gt;&#xA;&lt;option value=""james""&gt;james&lt;/option&gt;&#xA;&lt;option value=""Vardy""&gt;Vardy&lt;/option&gt;&#xA;&lt;/select&gt;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;",7671876,"",,"",,2017-12-16T03:37:59,"","",,0,,,
47879228,2,,46918826,2017-12-19T02:27:51,,1,,<ol>&#xA;<li>npm cache clean</li>&#xA;<li>npm install</li>&#xA;<li>electron-rebuild(need npm install electron-rebuild)</li>&#xA;</ol>&#xA;&#xA;<p>i ues these methods to solve the problem</p>&#xA;,5734635,"",,"",,2017-12-19T02:27:51,"","",,0,,,
47922366,2,,42711332,2017-12-21T09:59:52,,1,,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!doctype html&gt;&#xD;&#xA;&lt;html&gt;&#xD;&#xA;&lt;head&gt;&#xD;&#xA;  &lt;meta charset=""utf-8""&gt;&#xD;&#xA;  &lt;script src=""http://code.jquery.com/jquery-2.1.1.js""&gt;&lt;/script&gt;&#xD;&#xA;  &lt;title&gt;Workdesk 2.0&lt;/title&gt;&#xD;&#xA;  &lt;!--&lt;base href=""./""&gt;--&gt;&#xD;&#xA;  &lt;base href=""./""&gt;&#xD;&#xA;  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;&#xD;&#xA;  &lt;link rel=""icon"" type=""image/x-icon"" href=""favicon.ico""&gt;&#xD;&#xA;  &lt;link rel=""stylesheet"" href=""styles.css""&gt;&#xD;&#xA;  &lt;script src=""assets/jquery.js""&gt;&lt;/script&gt;&#xD;&#xA;&lt;/head&gt;&#xD;&#xA;&lt;body style=""margin: 0px;""&gt;&#xD;&#xA;  &lt;app-root&gt;  &lt;/app-root&gt;&#xD;&#xA;  &lt;script&gt;&#xD;&#xA;    var electron = require('electron');&#xD;&#xA;    var BrowserWindow = require('electron').remote.BrowserWindow;&#xD;&#xA;    var ipcMain = require('electron').remote.ipcMain;&#xD;&#xA;    var shell = require('electron').shell;&#xD;&#xA;    var Positioner = require('electron-positioner');&#xD;&#xA;    var path = require('path');&#xD;&#xA;    var gkm = require('gkm');&#xD;&#xA;    var fs = require('fs');&#xD;&#xA;    var os = require('os');&#xD;&#xA;    var path = require('path');&#xD;&#xA;    var base64Img = require('base64-img');&#xD;&#xA;    var ip = require('ip');&#xD;&#xA;  &lt;/script&gt;&#xD;&#xA;&lt;/body&gt;&#xD;&#xA;&lt;/html&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>This will help you to communicate with electron in any of the script languages like angular2,react js, node js etc.,</p>&#xA;",7664944,"",,"",,2017-12-21T09:59:52,"","",,0,,,
47932007,2,,47931957,2017-12-21T20:04:12,,1,,"<p>You have to export and call the <code>clicked</code> function. Otherwise you are never actually updating that object.</p>&#xA;&#xA;<p>For example.</p>&#xA;&#xA;<p><code>firstFile.js</code></p>&#xA;&#xA;<pre><code>const anObject = {};&#xA;&#xA;function clicked() {&#xA;&#xA; anObject.firstName = ""John"";&#xA; anObject.lastName = ""Doe"" ;&#xA;&#xA;}&#xA;&#xA;module.exports = anObject;&#xA;module.exports.clicked = clicked;&#xA;</code></pre>&#xA;&#xA;<p><code>secondFile.js</code></p>&#xA;&#xA;<pre><code>const importedObject = require(""./firstFile"");&#xA;console.log(importedObject.firstName) //undefined&#xA;importedObject.clicked()&#xA;console.log(importedObject.firstName) //John&#xA;</code></pre>&#xA;&#xA;<p><strong>Edit</strong></p>&#xA;&#xA;<p>After discussing further with the OP this is an Electron application. The code above works in Node.js. Electron might have a different setup and require extra steps to make this work.</p>&#xA;",894067,"",894067,"",2017-12-21T20:41:28,2017-12-21T20:41:28,"","",,6,,,
47749730,2,,43541320,2017-12-11T09:26:42,,2,,"<p>I think the main difference is that <code>ipcRenderer.on</code> is more flexible and scalable, because it lets you use <code>ipcRenderer</code> module which is an instance of <code>EventEmitter</code>. It can add, remove listeners (subscribers). It also lets you send both - synchronous and asynchronous messages.</p>&#xA;&#xA;<p><code>webContents.executeJavaScript</code> from what I found, just lets you remove limitations from some HTML APIs methods that can only be invoked by a gesture from the user. </p>&#xA;&#xA;<p>For ex. <code>requestFullScreen</code>:</p>&#xA;&#xA;<pre><code>webContents.executeJavaScript(code[, userGesture])&#xA;</code></pre>&#xA;&#xA;<p>Setting <code>userGesture</code> to <code>true</code> will remove this limitation.</p>&#xA;&#xA;<p><a href=""https://xwartz.gitbooks.io/electron-gitbook/content/en/api/web-contents.html"" rel=""nofollow noreferrer"">webContents</a></p>&#xA;",4554116,"",,"",,2017-12-11T09:26:42,"","",,1,,,
47793649,2,,46262130,2017-12-13T12:59:18,,2,,"<p>On windows you parse <code>process.argv</code> (in the main process) to get the filepath. but on mac you need to listen to the 'open-file' event. This can be done like this:</p>&#xA;&#xA;<pre><code>app.on('will-finish-launching', () =&gt; {&#xA;    app.on('open-file', (event, path) =&gt; {&#xA;        // do something&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#event-open-file-macos"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/app.md#event-open-file-macos</a></p>&#xA;",3497669,"",,"",,2017-12-13T12:59:18,"","",,0,,,
47848658,2,,47848621,2017-12-16T18:15:24,,2,,"<p>It's likely because electron will bundle the app in an asar archive (something like a zip/tar/jar). Hence, the path to the executable can't be resolved. Try passing <code>asar: false</code> to <code>electron-builder</code> (in <code>electron-builder.json</code>).</p>&#xA;",295262,"",,"",,2017-12-16T18:15:24,"","",,3,,,
47878948,2,,47877729,2017-12-19T01:51:32,,2,,<p>The problem is how you including your app.js script. It should be included as  tag in header or in any other place.</p>&#xA;,1315599,"",,"",,2017-12-19T01:51:32,"","",,1,,,
47884513,2,,47883109,2017-12-19T10:08:01,,2,,"<p>I found the answer with the help of the comments from kimy82!</p>&#xA;&#xA;<p>First i needed to get the Angular5 webpack.config.js by simply using:</p>&#xA;&#xA;<pre><code>ng eject&#xA;</code></pre>&#xA;&#xA;<p>After that i opened up the webpack.config.js and added the following:</p>&#xA;&#xA;<pre><code>""target"": ""node-webkit""&#xA;</code></pre>&#xA;&#xA;<p>Simply ""node"" did not work out for me and since electron uses a Chromium this should be ok.</p>&#xA;&#xA;<p>Thanks everyone!</p>&#xA;",4482780,"",,"",,2017-12-19T10:08:01,"","",,1,,,
47743264,2,,47664415,2017-12-10T20:44:21,,3,,"<p>Setting the location of the database is very simple. </p>&#xA;&#xA;<pre><code>db = new PouchDB(dbFilePath);&#xA;</code></pre>&#xA;&#xA;<p>You can set the dbFilePath to the path that you want. For example, I want to set the path to where the Electron application runs. So I do the following. </p>&#xA;&#xA;<pre><code>const appDataDirectory = app.getPath('appData');&#xA;let dbFilePath = appDataDirectory + '/data/';&#xA;if (process.env.NODE_ENV === 'development') {&#xA;  dbFilePath = './data/';&#xA;}&#xA;log.debug('NODE_ENV:%s, dbFilePath:%s', process.env.NODE_ENV, dbFilePath);&#xA;let db = new PouchDB(dbFilePath);&#xA;</code></pre>&#xA;",324143,"",,"",,2017-12-10T20:44:21,"","",,1,,,
47852798,2,,47810041,2017-12-17T06:37:53,,10,,"<p>I've got it working now, thanks to all the people here :) <a href=""https://github.com/mikaelbr/node-notifier/issues/144#issuecomment-319324058"" rel=""noreferrer"">https://github.com/mikaelbr/node-notifier/issues/144#issuecomment-319324058</a></p>&#xA;&#xA;<p>Based on <code>anthonyraymond</code>'s comment, you need to have your app <strong><code>INSTALLED</code></strong> in your windows machine with an appId. You can configure <code>appId</code> in your <code>package.json</code> like this.</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""myapp"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""description"": ""test"",&#xA;  ""main"": ""main.js"",&#xA;  ""build"": {&#xA;    ""appId"": ""com.myapp.id""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The <code>appId</code> does not need to have that <code>java/android</code> format, my app just have an <code>appId</code> of <code>elite-notifier</code>. </p>&#xA;&#xA;<p>Then you can pass the <code>appId</code> when calling the <code>notify</code> function of notifier.</p>&#xA;&#xA;<pre><code>notifier.notify(&#xA;    {&#xA;      appName: ""com.myapp.id"", &lt;-- yes, the key here is appName :)&#xA;      title: ""Hello"",&#xA;      message: ""Hello world!"",&#xA;      wait: true&#xA;    },&#xA;    function(err, response) {&#xA;      // Response is response from notification&#xA;      console.log(""responded..."");&#xA;    }&#xA;  );&#xA;</code></pre>&#xA;&#xA;<p>After installation, This will work even on development mode (<em>by running <code>electron .</code> command</em>) provided that you'll not change the <code>appId</code> of your app after installation since there will be a mismatch on the installed one and the development version of the app.</p>&#xA;",1730988,"",1730988,"",2017-12-17T06:46:34,2017-12-17T06:46:34,"","",,0,,,
47761652,2,,47756822,2017-12-11T21:23:33,,13,,"<p>I have fixed this by setting an Id to the menu item,</p>&#xA;&#xA;<pre><code>{ label: ""Show Colors"",  &#xA;        id: 'color-scale',&#xA;        accelerator: 'CmdOrCtrl+1', &#xA;        enabled: getStatus(),&#xA;        click() {getWebviewWebContents().send('switchToColors');} &#xA; },&#xA;</code></pre>&#xA;&#xA;<p>and getting the menu item with:</p>&#xA;&#xA;<pre><code>myItem = menu.getMenuItemById('color-scale')&#xA;</code></pre>&#xA;&#xA;<p>Then, when I need to enable/disable it programmatically, I am using:</p>&#xA;&#xA;<pre><code>myItem.enabled = true&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>myItem.enabled = false&#xA;</code></pre>&#xA;",4454021,"",,"",,2017-12-11T21:23:33,"","",,0,,,
47739033,2,,46222035,2017-12-10T12:53:02,,15,,"<p>There's no way at the moment to customize the native titlebar. So, first step is to hide the native titlebar by telling your BrowserWindow to hide the frame (that would also hide the menubar).</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;    frame: false&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>see: <a href=""https://electronjs.org/docs/api/browser-window"" rel=""noreferrer"">https://electronjs.org/docs/api/browser-window</a></p>&#xA;&#xA;<p>Then, you should create your custom titlebar (or import a third party library like <a href=""https://github.com/sidneys/electron-titlebar-windows"" rel=""noreferrer"">1</a> or <a href=""https://github.com/Menci/electron-titlebar"" rel=""noreferrer"">2</a>) in HTML, CSS and JS.&#xA;That way, the titlebar lives under the renderer process in Electron. So, to actually for example quit your application when clicking the X button, you should take advantage of the IPC to send an event to the main process and quit the application.</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre><code># renderer&#xA;ipcRenderer.send('app:quit')&#xA;&#xA;# main&#xA;ipcMain.on('app:quit', () =&gt; { app.quit() })&#xA;</code></pre>&#xA;&#xA;<p>Or as an alternative: <a href=""https://stackoverflow.com/questions/31171597/atom-electron-close-the-window-with-javascript"">look this answer here on StackOverflow</a></p>&#xA;",2607287,"",2607287,"",2017-12-10T14:21:38,2017-12-10T14:21:38,"","",,0,,,
53902246,2,,47773305,2018-12-23T08:31:04,,2,,"<p>You basically have two options:</p>&#xA;&#xA;<p><strong>Option 1:</strong>&#xA;Optimize <code>contact.html</code> to use a preloader (Waiting screen while your content loads) and caching.</p>&#xA;&#xA;<p><strong>Option 2:</strong>&#xA;Use the <code>BrowserWindow</code>'s <code>ready-to-show</code> event and show a different <code>BrowserWindow</code> while the one showing <code>contact.html</code> is still loading</p>&#xA;&#xA;<p><strong>Code for Option2:</strong></p>&#xA;&#xA;<pre><code>function showExternalPage(url) {&#xA;    let externalWindow = new BrowserWindow({&#xA;            width: 1280,&#xA;            minWidth: 640,&#xA;            height: 960,&#xA;            minHeight: 480,&#xA;            show: false // -&gt; Don't show it, it'll be shown when the content has been loaded (ready-to-show), show the WaitingWindow in the meantime&#xA;        }),&#xA;        waitingWindow = new BrowserWindow({&#xA;            width: 300,&#xA;            height: 200,&#xA;            transparent: true,&#xA;            frame: false,&#xA;            alwaysOnTop: true,&#xA;            show: false&#xA;        });&#xA;&#xA;    externalWindow.loadURL(url);&#xA;    waitingWindow.loadURL(url.format({&#xA;        pathname: ""PATH_TO_WAITING_HTML"",&#xA;        protocol: 'file:',&#xA;        slashes: true&#xA;    }));&#xA;&#xA;    // Show the waitingWindow prior to the external window&#xA;    waitingWindow.show();&#xA;&#xA;    externalWindow.once('ready-to-show', () =&gt; {&#xA;        externalWindow.show();&#xA;        waitingWindow.destroy();&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",1766321,"",,"",,2018-12-23T08:31:04,"","",,0,,,
53917872,2,,53917812,2018-12-24T21:40:54,,1,,"<p>Add some cdn for .js to work with javascript library functions as i see theres no library imported to work with javascript like&#xA;           <code>&lt;script src=""your_js/cdn""....&gt;&lt;/script&gt;</code></p>&#xA;",10497483,"",,"",,2018-12-24T21:40:54,"","",,0,,,
53929359,2,,53888391,2018-12-26T08:21:38,,1,,"<p>It is a reported issue. You can see <a href=""https://github.com/MrRio/jsPDF/issues/2176"" rel=""nofollow noreferrer"">here</a>.&#xA;By the time I type this message. The fix patch has not been merged yet. You can use the zip file attached <a href=""https://github.com/MrRio/jsPDF/issues/2176#issuecomment-450034947"" rel=""nofollow noreferrer"">here</a> temporarily and wait for next official version released.</p>&#xA;&#xA;<p>Extract the zip file, and copy them to node_modules/jspdf/dist, overwrite the original four files, and everything will be OK. </p>&#xA;",10834285,"",10834285,"",2018-12-27T09:51:58,2018-12-27T09:51:58,"","",,0,,,
53938119,2,,53937933,2018-12-26T23:12:23,,1,,"<p>I figure out that my <code>module.exports</code> on my <code>models/artist.js</code> file was wrong.</p>&#xA;&#xA;<p>Instead of:</p>&#xA;&#xA;<pre><code>// const Artist = mongoose.model('artist', ArtistSchema);&#xA;&#xA;// module.exports = ArtistSchema;&#xA;</code></pre>&#xA;&#xA;<p>it should be this:</p>&#xA;&#xA;<pre><code>module.exports = mongoose.model('artist', ArtistSchema);&#xA;</code></pre>&#xA;",6719819,"",,"",,2018-12-26T23:12:23,"","",,0,,,
53942704,2,,53921403,2018-12-27T09:29:39,,0,,"<p>I did this with a hacky bash script</p>&#xA;&#xA;<pre><code>#!bin/bash&#xA;&#xA;# make tmp package.json&#xA;cp package.json _package.json&#xA;&#xA;# set entry file&#xA;sed -i '' ""s/index.js/index.$1.js/"" package.json&#xA;&#xA;# set output folder&#xA;sed -i '' ""s/TARGET/$1/"" package.json&#xA;&#xA;# package app&#xA;npm run build&#xA;&#xA;# get rid of electron config package.json&#xA;rm package.json&#xA;&#xA;# ""reset"" old package.json&#xA;mv _package.json package.json&#xA;</code></pre>&#xA;&#xA;<p>and my package.json scripts looks like</p>&#xA;&#xA;<pre><code>{&#xA;  ""postinstall"": ""electron-builder install-app-deps"",&#xA;  ""reinstall"": ""rm -rf node_modules/ &amp;&amp; npm i"",&#xA;  ""start"": ""NODE_ENV=development electron src/index.development.js"",&#xA;  ""build"": ""build -mw"",&#xA;  ""build:development"": ""sh scripts/build.sh development"",&#xA;  ""build:pilot"": ""sh scripts/build.sh pilot"",&#xA;  ""build:pilot2"": ""sh scripts/build.sh pilot2"",&#xA;  ""build:production"": ""sh scripts/build.sh production"",&#xA;  ""build:all"":&#xA;    ""npm run build:development &amp;&amp; npm run build:pilot &amp;&amp; npm run build:pilot2 &amp;&amp; npm run build:production"",&#xA;  ""test"": ""npm run postinstall &amp;&amp; jest""&#xA;}&#xA;</code></pre>&#xA;",4769440,"",,"",,2018-12-27T09:29:39,"","",,0,,,
53949044,2,,53948588,2018-12-27T17:58:27,,0,,"<p>Found a solution:</p>&#xA;&#xA;<p>copy they files from a full windows installation to your windows pe image,&#xA;c:\windows\system32:</p>&#xA;&#xA;<ul>&#xA;<li>BCP47Langs.dll</li>&#xA;<li>d3d9.dll</li>&#xA;<li>d3d11.dll</li>&#xA;<li>dxgi.dll</li>&#xA;<li>dxva2.dll</li>&#xA;<li>msdmo.dll</li>&#xA;</ul>&#xA;&#xA;<p>(Tested/Found on Windows 10 Pro)</p>&#xA;&#xA;<p>Is just a simple electron app with a single page and a few buttons. Perhaps there are other *.dll's if you work with media files or similar.</p>&#xA;",5781499,"",,"",,2018-12-27T17:58:27,"","",,0,,,
53959610,2,,53958926,2018-12-28T13:50:40,,0,,"<p>I think this is because the Electron app was started via <code>execve()</code> in a forked process (<code>fork() +</code>daemon()` actually).</p>&#xA;&#xA;<p>One workaround is to execute <code>/usr/bin/open</code> as a wrapper, like so (pseudo code):</p>&#xA;&#xA;<pre><code>open -a argv[0] --args args[1...]&#xA;</code></pre>&#xA;&#xA;<p>Or basically this code:</p>&#xA;&#xA;<pre><code>char** args = parse_args(cmd);&#xA;char* arg0 = find_in_path(args[0]);&#xA;pid_t pid = fork();&#xA;if (pid == 0) {&#xA;    daemon(1, 0);&#xA;#ifdef __APPLE__&#xA;    {&#xA;        // We cannot directly use `execv` for a GUI app on MacOSX&#xA;        // in a forked process&#xA;        // (e.g. issues like https://stackoverflow.com/questions/53958926/).&#xA;        // But using `open` will work around this.&#xA;        int argc = 0;&#xA;        for(; args[argc]; ++argc);&#xA;        char** args_ext = malloc(sizeof(char*) * (argc + 5));&#xA;        arg0 = ""/usr/bin/open"";&#xA;        args_ext[0] = arg0;&#xA;        args_ext[1] = ""-a"";&#xA;        args_ext[2] = args[0];&#xA;        args_ext[3] = ""--args"";&#xA;        for(int i = 0; ; ++i) {&#xA;            args_ext[i + 4] = args[i + 1];&#xA;            if(!args[i + 1])&#xA;                break;&#xA;        }&#xA;        args = args_ext;&#xA;    }&#xA;#endif&#xA;    execv(arg0, args);&#xA;    exit(-1);&#xA;} else if (pid &gt; 0) { // master&#xA;    // go on ...&#xA;    free(args);&#xA;} else {&#xA;    // error handling...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(Basically via <a href=""https://github.com/PerBothner/DomTerm/pull/58/commits/9556950b3ae37e368cc12851422abbeb767bae51"" rel=""nofollow noreferrer"">this commit</a>.)</p>&#xA;",133374,"",133374,"",2018-12-28T14:48:25,2018-12-28T14:48:25,"","",,0,,,
53975560,2,,53971382,2018-12-30T05:48:29,,0,,"<p>After some research and testing, I've found that you can make a very minimal version of PDF.js. The ""pinch-to-zoom"" functionality isn't as smooth as on a native app, but you can get fairly close if you use PDF.js' experimental SVG renderer.</p>&#xA;&#xA;<p>Here are some examples of a full PDF viewer with no toolbar:&#xA;<a href=""https://github.com/mozilla/pdf.js/tree/master/examples/components"" rel=""nofollow noreferrer"">https://github.com/mozilla/pdf.js/tree/master/examples/components</a></p>&#xA;",8877952,"",,"",,2018-12-30T05:48:29,"","",,0,,,
53983383,2,,53983342,2018-12-31T03:42:39,,6,,"<p><code>fs.watch(...)</code> returns an instance of <a href=""https://nodejs.org/docs/latest/api/fs.html#fs_class_fs_fswatcher"" rel=""noreferrer"">fs.FSWatcher</a>, which has a <code>.close()</code> method.  So, if you want to unwatch you can:</p>&#xA;&#xA;<pre><code>const watcher = fs.watch(getHomeDirectory(), (eventname, filename) =&gt; {&#xA;  // your code here&#xA;})&#xA;&#xA;watcher.close()&#xA;</code></pre>&#xA;",2939688,"",,"",,2018-12-31T03:42:39,"","",,0,,,
53991599,2,,53990422,2018-12-31T21:37:52,,2,,"<p>I ended up figuring it out.</p>&#xA;&#xA;<p>I needed to send it to the webcontents, and from there send it to the webview.</p>&#xA;&#xA;<p><strong>preload</strong></p>&#xA;&#xA;<pre><code>ipcRenderer.on('ppause', () =&gt; {&#xA;    console.log(document); // can now manipulate webview DOM&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>Browser</strong></p>&#xA;&#xA;<pre><code>const webview = document.getElementById('webview');&#xA;ipcRenderer.on('ppause', () =&gt; {&#xA;    webview.send('ppause');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>index.js</strong></p>&#xA;&#xA;<pre><code>globalShortcut.register('MediaPlayPause', () =&gt; {&#xA;    window.webContents.send('ppause');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>All that was needed needed was an additional send to webview.</p>&#xA;",1272799,"",,"",,2018-12-31T21:37:52,"","",,0,,,
53991874,2,,53991777,2018-12-31T22:29:44,,0,,"<p>You can use this.props.monaco. Or you can pass the props to the changeLanguage function if you rewrite it</p>&#xA;&#xA;<pre><code>changeLanguage(language, props) {&#xA;  // Returns undefined all the time&#xA;  console.log(props.monaco);&#xA;  props.monaco.editor.setModelLanguage(this.editor, language);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and call it: <code>this.changeLanguage('English', this.props)</code></p>&#xA;",9063772,"",,"",,2018-12-31T22:29:44,"","",,0,,,
54008166,2,,54008137,2019-01-02T14:33:02,,1,,<p>It's not </p>&#xA;&#xA;<pre><code>price.innerHTML = '$'.cryptos;&#xA;// but&#xA;price.innerHTML = '$' + cryptos.USD;&#xA;</code></pre>&#xA;&#xA;<p>Add <code>.USD</code> because cryptos is an object. And the value is saved into the key <code>USD</code></p>&#xA;,3083093,"",3083093,"",2019-01-02T14:42:50,2019-01-02T14:42:50,"","",,0,,,
54012259,2,,54011027,2019-01-02T19:44:37,,4,,"<p>Okay so I encountered this issue on Github, and the solution suggested works as intended:&#xA;<a href=""https://github.com/reach/router/issues/25"" rel=""nofollow noreferrer"">https://github.com/reach/router/issues/25</a> </p>&#xA;&#xA;<p>The idea is to use memory history(since reach doesn't support hash). Reach exposes createMemorySource, createHistory, and LocationProvider for this purpose.</p>&#xA;&#xA;<pre><code>let source = createMemorySource(""/starting/url"")&#xA;let history = createHistory(source)&#xA;&#xA;let App = () =&gt; (&#xA;  &lt;LocationProvider history={history}&gt;&#xA;    &lt;Router&gt;&#xA;      {/* ... */}&#xA;    &lt;/Router&gt;&#xA;  &lt;/LocationProvider&gt;&#xA;)&#xA;</code></pre>&#xA;&#xA;<p>Reach-router docs suggest creating memory source is for development purposes but its perfectly suitable for Electron use case. I hope this helps someone in the future. </p>&#xA;",5627572,"",,"",,2019-01-02T19:44:37,"","",,0,,,
54032031,2,,52746470,2019-01-04T01:25:22,,1,,"<p>Change <code>var python = require(""python-shell"")</code> <br><br>to<br> <br><code>const {PythonShell} = require(""python-shell"");</code></p>&#xA;",7631607,"",,"",,2019-01-04T01:25:22,"","",,0,,,
54043619,2,,40589302,2019-01-04T17:35:03,,37,,"<p>Another >=v1.0 solution that makes more sense to me structurally than @galki's solution.</p>&#xA;&#xA;<p><code>RaisedButton</code> is deprecated in >=v1.0. I cannot find more information on <code>containerElement</code> (it may have been undocumented?) but the current API provides <code>component</code> for this purpose.</p>&#xA;&#xA;<pre><code>&lt;Button&#xA;  variant=""contained""&#xA;  component=""label""&#xA;&gt;&#xA;  Upload File&#xA;  &lt;input&#xA;    type=""file""&#xA;    style={{ display: ""none"" }}&#xA;  /&gt;&#xA;&lt;/Button&gt;&#xA;</code></pre>&#xA;",2736037,"",,"",,2019-01-04T17:35:03,"","",,0,,,
54066766,2,,53982590,2019-01-06T23:12:24,,1,,"<p>OK, so I figured it out. Quite simply you need to pass one environment variable to foreverjs like so:</p>&#xA;&#xA;<pre><code>const forever = require(""forever-monitor"");&#xA;let child = forever.start(scriptPath, {fork: true, env: {ELECTRON_RUN_AS_NODE: 1}});&#xA;</code></pre>&#xA;&#xA;<p>Doing this and the fork will correctly use its prepackaged version of node instead of launching another copy of electron ""main"".</p>&#xA;",3357587,"",,"",,2019-01-06T23:12:24,"","",,0,,,
54071661,2,,53987824,2019-01-07T09:30:03,,1,,"<p>Unfortunately AVA also looks for helper files. You currently can't configure these directory patterns. However if you disable AVA's compilation of test and helper files the problem should go away. See <a href=""https://github.com/avajs/ava/blob/master/docs/recipes/babel.md#disable-avas-babel-pipeline"" rel=""nofollow noreferrer"">https://github.com/avajs/ava/blob/master/docs/recipes/babel.md#disable-avas-babel-pipeline</a>.</p>&#xA;",15421,"",,"",,2019-01-07T09:30:03,"","",,0,,,
54080005,2,,54079936,2019-01-07T18:41:35,,3,,"<p>You can use <a href=""https://electronjs.org/docs/api/browser-window#event-maximize"" rel=""nofollow noreferrer"">window.maximize()</a></p>&#xA;&#xA;<p>To do it on startup, try this:</p>&#xA;&#xA;<pre><code>win = new BrowserWindow({show: false})&#xA;win.maximize()&#xA;win.show()&#xA;</code></pre>&#xA;&#xA;<h1>Notes</h1>&#xA;&#xA;<ul>&#xA;<li>Checkout out <a href=""https://github.com/electron/electron/issues/7076"" rel=""nofollow noreferrer"">this issue</a> for more information.</li>&#xA;<li>Also the <a href=""https://electronjs.org/docs/api/browser-window"" rel=""nofollow noreferrer"">BrowserWindow API</a> has even more information</li>&#xA;</ul>&#xA;",4959547,"",,"",,2019-01-07T18:41:35,"","",,0,,,
54081231,2,,52296921,2019-01-07T20:21:32,,2,,"<p>After 4+ months of working on this, I've managed to get this to work. I will try to outline my approach.</p>&#xA;&#xA;<ul>&#xA;<li>Each ""plugin"" or ""tool"" will need it's own .js file</li>&#xA;<li>the js file should contain an exports.html function that will return the html for the tool</li>&#xA;<li>the js file should contain an exports.Events function that adds all relevant event listeners</li>&#xA;<li>create a json file cataloging each tool, along with information needed i.e. a description, image path, .js file path, etc.</li>&#xA;<li>require the .js file when selected, load the html and the events</li>&#xA;<li>parse the json to figure out which tool to load along with needed info</li>&#xA;</ul>&#xA;&#xA;<p>all i need to do is update the json file and upload the .js file to add a new plugin.</p>&#xA;",3965629,"",3965629,"",2019-01-08T15:22:21,2019-01-08T15:22:21,"","",,0,,,
54084486,2,,54077828,2019-01-08T02:28:05,,0,,"<p>You can use <code>extraFiles</code> configuration (<code>electron-builder</code>), let take a look at document <a href=""https://www.electron.build/configuration/contents#extrafiles"" rel=""nofollow noreferrer"">https://www.electron.build/configuration/contents#extrafiles</a></p>&#xA;&#xA;<p>Your <code>package.json</code> should be like this:</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""MyApp"",&#xA;  ""build"": {&#xA;      ""win"": {&#xA;          ""extraFiles"": [&#xA;        {&#xA;          ""from"": ""[YOUR_DLL_PATH]"", //path to dlls, for example ./lib.dll&#xA;          ""to"": ""."" //root directory&#xA;        }&#xA;      }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",6522713,"",,"",,2019-01-08T02:28:05,"","",,0,,,
54087477,2,,54087373,2019-01-08T08:01:42,,1,,"<p>Electron is based on <code>node.js</code>.</p>&#xA;&#xA;<p>Export that function in your <code>second_script.js</code> and then import/require it and call it inside your <code>main.js</code>.</p>&#xA;&#xA;<p>Another way to communicate inside Electron is using the <a href=""https://electronjs.org/docs/api/ipc-main"" rel=""nofollow noreferrer"">ipcMain</a>:</p>&#xA;&#xA;<pre><code>const { ipcMain } = require('electron');&#xA;</code></pre>&#xA;&#xA;<p>Spy on messages like below inside your <code>second_script.js</code>:</p>&#xA;&#xA;<pre><code>ipcMain.on('CHANNEL_NAME', (event, arg) =&gt; {&#xA;  console.log('message received', event, args);&#xA;  // call your func here&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>Send messages like below inside your <code>main.js</code>:</p>&#xA;&#xA;<pre><code>win.on('focus', function () {&#xA;  ipcRenderer.send('CHANNEL_NAME', 'ping');&#xA;});&#xA;</code></pre>&#xA;",2652759,"",,"",,2019-01-08T08:01:42,"","",,0,,,
54093959,2,,54093391,2019-01-08T14:30:56,,2,,"<p>I accidentally created a filter via right click.&#xA;Found the answer here:&#xA;<a href=""https://stackoverflow.com/a/46110318/457059"">https://stackoverflow.com/a/46110318/457059</a></p>&#xA;",457059,"",,"",,2019-01-08T14:30:56,"","",,0,,,
54099109,2,,53938569,2019-01-08T20:16:39,,0,,<p>To solve the problem I created a __static variable based off of __dirname which changed location depending on production or development builds.</p>&#xA;,6402060,"",,"",,2019-01-08T20:16:39,"","",,0,,,
54110237,2,,42794556,2019-01-09T12:30:44,,1,,"<p>I have found a bunch of workarounds. I am still waiting for the final solution.</p>&#xA;&#xA;<h2>Workaround 1</h2>&#xA;&#xA;<p>So I had to add this <code>setTimeout</code> as a workaround. If I do not use this the page would be stuck forever.</p>&#xA;&#xA;<pre class=""lang-javascript prettyprint-override""><code>setTimeout(function () {&#xA;    mainWindow.show();&#xA;    mainWindow.loadURL('http://localhost:5006');&#xA;}, 3000);&#xA;</code></pre>&#xA;&#xA;<h2>Workaround 2</h2>&#xA;&#xA;<p>It checks if the bokeh port is still closed. But the elements may be not loaded and completely loaded</p>&#xA;&#xA;<pre class=""lang-javascript prettyprint-override""><code>var portscanner = require('portscanner')&#xA;var _checkServerStatus = setInterval(function() {&#xA;  portscanner.checkPortStatus(5006, '127.0.0.1', function(error, status) {&#xA;    if (status == 'open') {  // status = 'open' or 'close'&#xA;        clearInterval(_checkServerStatus);&#xA;        console.log('Server running');&#xA;        mainWindow.loadURL(bokehUrl); &#xA;    }&#xA;  });&#xA;}, 100);  &#xA;</code></pre>&#xA;&#xA;<h2>Workaround 3</h2>&#xA;&#xA;<p>Finally I found another workaround to check if all the elements are completely rendered. The answer is in <a href=""https://stackoverflow.com/questions/43915626/how-to-override-methods-on-bokeh-how-to-check-if-all-the-elements-are-already-r"">this question</a>:</p>&#xA;&#xA;<pre class=""lang-javascript prettyprint-override""><code>oldLog = console.log;&#xA;console.log = function (message) {&#xA;    if(message.localeCompare('Bokeh items were rendered successfully') == 0){&#xA;        window.top.postMessage('show-bokeh-iframe', '*')&#xA;        console.log = oldLog;&#xA;    }&#xA;    oldLog.apply(console, arguments);&#xA;};&#xA;</code></pre>&#xA;&#xA;<h2>Workaround 4</h2>&#xA;&#xA;<p>There is a <a href=""https://github.com/bokeh/bokeh/issues/4272"" rel=""nofollow noreferrer"">GH issue</a> where where the writer ask for calling a callback when bokeh is completely loaded and rendered. The user foobarbecue suggests to verify if the bokeh page is rendered with <a href=""https://stackoverflow.com/questions/38881301/observe-mutations-on-a-target-node-that-doesnt-exist-yet/38882022#38882022""><strong>MutationObserver</strong></a>, but I have never used it.</p>&#xA;",4891717,"",,"",,2019-01-09T12:30:44,"","",,0,,,
53987782,2,,53984072,2018-12-31T12:56:33,,1,,"<p>pls import async module.</p>&#xA;&#xA;<pre><code>qry = ""SELECT patients.*, patient_visits.visit_id,patient_visits.patient_id, patient_visits.visitdate, patient_visits.visittime FROM patients LEFT JOIN patient_visits ON patients.id = patient_visits.patient_id "" + where + "" GROUP BY patients.id ORDER BY patients.id  DESC LIMIT "" + limit + "" OFFSET "" + offset;&#xA;db.all(qry, (err, results) =&gt; {&#xA;    if (err) {&#xA;        response.error = err;&#xA;        res.send(response);&#xA;    } else {&#xA;        response.patients = patients;&#xA;&#xA;        async.forEachOf(patients, function (patient, key, callback) {&#xA;            db.each(""SELECT visit_id FROM patient_visits where patient_id='"" + patients[key] + ""' AND visitdate &gt;='"" + moment().format('YYYY-MM-DD') + ""'"", function (err, row) {&#xA;                if (row) {&#xA;                    response.patients[i].check = ""true"";&#xA;                }else{&#xA;                    callback();&#xA;                }&#xA;            });&#xA;        }, function (error) {&#xA;            if (error) {&#xA;                console.log(error)&#xA;            } else {&#xA;                res.send(response);&#xA;            }&#xA;        })&#xA;&#xA;    }&#xA;});&#xA;</code></pre>&#xA;",7754937,"",,"",,2018-12-31T12:56:33,"","",,1,,,
53988797,2,,53987767,2018-12-31T15:00:15,,2,,"<p>According to the <a href=""https://electronjs.org/docs/api/webview-tag#webviewsendchannel-arg1-arg2-"" rel=""nofollow noreferrer"">electron webview documentation</a> what you have there looks like it should basically work.</p>&#xA;&#xA;<p>However at the top of the webview documentation it does have <a href=""https://electronjs.org/docs/api/webview-tag#warning"" rel=""nofollow noreferrer"">this warning</a> which may be causing some issues in the version you are currently testing with:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Warning</strong></p>&#xA;  &#xA;  <p>Electron's webview tag is based on Chromium's webview, which is undergoing dramatic architectural changes. This impacts the stability of webviews, including rendering, navigation, and event routing. We currently recommend to not use the webview tag and to consider alternatives, like iframe, Electron's BrowserView, or an architecture that avoids embedded content altogether.</p>&#xA;</blockquote>&#xA;",12958,"",,"",,2018-12-31T15:00:15,"","",,1,,,
54040006,2,,54039928,2019-01-04T13:36:08,,1,,"<p>The function is <a href=""https://electronjs.org/docs/api/browser-window#winunmaximize"" rel=""nofollow noreferrer"">BrowserWindow.unmaximize</a>.</p>&#xA;&#xA;<p>There's also an <a href=""https://electronjs.org/docs/api/browser-window#event-unmaximize"" rel=""nofollow noreferrer"">unmaximize</a> event, and you can use <a href=""https://electronjs.org/docs/api/browser-window#winismaximized"" rel=""nofollow noreferrer"">isMaximized</a> to check whether the window is currently maximized.</p>&#xA;",4962525,"",,"",,2019-01-04T13:36:08,"","",,1,,,
54046216,2,,54045514,2019-01-04T21:19:47,,0,,"<p>Looking at the code, it looks like this feature is not implemented. It tests each value for special characters (the separator, <code>\n</code>, <code>\r</code>, and <code>""</code>), and adds quotes only if those characters are in the stringified value. So either use another tool, or fork and submit a PR for the project :). There is an issue for the project that seems related: <a href=""https://github.com/maxogden/csv-write-stream/issues/30"" rel=""nofollow noreferrer"">https://github.com/maxogden/csv-write-stream/issues/30</a></p>&#xA;",8031815,"",,"",,2019-01-04T21:19:47,"","",,1,,,
53920792,2,,53920666,2018-12-25T08:53:13,,1,,"<p>Well, basically yes. You can build a desktop app like this. </p>&#xA;&#xA;<p>But you wont be able to run it offline if it depends on a server sided API. If you can rewrite your backend Code in JavaScript and use a SQLite DB instead of a MySQL you can run this as electron App.&#xA;Keep in mind that your business logic in the frontend can always be abused because it’s not hidden from the user.</p>&#xA;&#xA;<p>FYI: Electron only runs a browser inside it’s own App container. So there is actually no crucial difference between Browser or electron App. </p>&#xA;",8013925,"",8013925,"",2018-12-25T09:04:13,2018-12-25T09:04:13,"","",,2,,,
53966845,2,,53966376,2018-12-29T05:02:04,,1,,"<p>According to <a href=""https://medium.com/@ishwar.rimal/generating-pdf-with-electron-js-31b59ac93249"" rel=""nofollow noreferrer"">Generating PDF with Electron.js</a>, it seems possible to use the <a href=""https://electronjs.org/docs/api/web-contents"" rel=""nofollow noreferrer"">webContents</a> method <a href=""https://electronjs.org/docs/api/web-contents#contentsprinttopdfoptions-callback"" rel=""nofollow noreferrer"">printToPDF</a> in a new BrowserWindow without actually showing the window:</p>&#xA;&#xA;<pre><code>window_to_PDF = new BrowserWindow({show : false});//to just open the browser in background&#xA;&#xA;window_to_PDF.loadURL('anylink.html'); //give the file link you want to display&#xA;&#xA;function pdfSettings() {&#xA;    var paperSizeArray = [""A4"", ""A5""];&#xA;    var option = {&#xA;        landscape: false,&#xA;        marginsType: 0,&#xA;        printBackground: false,&#xA;        printSelectionOnly: false,&#xA;        pageSize: paperSizeArray[settingCache.getPrintPaperSize()-1],&#xA;    };&#xA;  return option;&#xA;}&#xA;&#xA;window_to_PDF.webContents.on(""did-finish-load"", function() {&#xA;  window_to_PDF.webContents.printToPDF(pdfSettings(), function(err, data) {&#xA;      if (err) {&#xA;          //do whatever you want&#xA;          return;&#xA;      }&#xA;      try{&#xA;          fs.writeFileSync('./generated_pdf.pdf', data);&#xA;      }catch(err){&#xA;          //unable to save pdf..&#xA;      }&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>So, in your case, you may have to write your generated HTML to a temporary file <code>anylink.html</code> then use <a href=""https://electronjs.org/docs/api/browser-window#winloadurlurl-options"" rel=""nofollow noreferrer"">loadURL</a> or preferably <a href=""https://electronjs.org/docs/api/browser-window#winloadfilefilepath-options"" rel=""nofollow noreferrer"">loadFile</a> to load it in the ""off-screen"" window.</p>&#xA;",,user8022331,5832842,"",2018-12-29T12:51:51,2018-12-29T12:51:51,"","",,2,,,
53986285,2,,53986192,2018-12-31T10:22:38,,0,,"<p>Why creating &amp; writing to same file everytime, </p>&#xA;&#xA;<p>instead check if file already exists, then reopen your db file ""bd/mybd.sqlite"" and directly insert data to table, you can get syntax easily on net.</p>&#xA;&#xA;<p>Update to read a database from the disk:</p>&#xA;&#xA;<pre><code>   var fs = require('fs');&#xA;   var SQL = require('sql.js');&#xA;   var filebuffer = fs.readFileSync('test.sqlite');&#xA;&#xA;  // Load the db&#xA;  var db = new SQL.Database(filebuffer);&#xA;</code></pre>&#xA;&#xA;<p>Ref: <a href=""https://github.com/kripken/sql.js/blob/master/README.md"" rel=""nofollow noreferrer"">https://github.com/kripken/sql.js/blob/master/README.md</a></p>&#xA;",3999721,"",3999721,"",2018-12-31T16:50:52,2018-12-31T16:50:52,"","",,2,,,
54011151,2,,53906147,2019-01-02T18:09:39,,0,,"<p>The best answer I can come up with so far is to not use Electron. Use NW.js instead.</p>&#xA;&#xA;<p>There may be a way to make MusicKit.js work with Electron, but it will likely compromise security or require substantial effort.</p>&#xA;&#xA;<p>NW.js does not have the same problem since it is a single process framework. When authorizing the MusicKit instance, it pops up a 2nd window and allows the user to login as desired. However, NW.js does need <a href=""http://docs.nwjs.io/en/latest/For%20Developers/Enable%20Proprietary%20Codecs/"" rel=""nofollow noreferrer"">proprietary codecs</a> to play audio from MusicKit. I am using <a href=""https://github.com/iteufel/nwjs-ffmpeg-prebuilt"" rel=""nofollow noreferrer"">these prebuilts</a> and it seems to work fine so far.</p>&#xA;",8871355,"",,"",,2019-01-02T18:09:39,"","",,2,,,
53919507,2,,53919151,2018-12-25T05:11:04,,4,,"<p>It's not against Apple's Developer Program guidelines as long as the binary remains the same and the app continues working as advertised in the store.</p>&#xA;&#xA;<p><a href=""https://developer.apple.com/programs/information/Apple_Developer_Program_Information_8_12_15.pdf"" rel=""nofollow noreferrer"">https://developer.apple.com/programs/information/Apple_Developer_Program_Information_8_12_15.pdf</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>3.3.2 Except as set forth in the next paragraph, an Application may not download or install executable code. Interpreted code may only be&#xA;  used in an Application if all scripts, code and interpreters are&#xA;  packaged in the Application and not downloaded. The only exceptions to&#xA;  the foregoing are scripts and code downloaded and run by Apple's&#xA;  built-in WebKit framework or JavascriptCore, provided that such&#xA;  scripts and code do not change the primary purpose of the Application&#xA;  by providing features or functionality that are inconsistent with the&#xA;  intended and advertised purpose of the Application as submitted to the&#xA;  App Store.</p>&#xA;  &#xA;  <p>For OS X Applications submitted to Apple for distribution&#xA;  on the App Store, an Application may install or run interpreted or&#xA;  executable code (e.g., plug-ins and extensions) for use in conjunction&#xA;  with the Application only so long as such code: (a) does not change&#xA;  the Application's submitted binary or would not otherwise be&#xA;  considered an update (as determined in Apple’s sole discretion); and&#xA;  (b) does not change the primary purpose of the Application by&#xA;  providing features or functionality that are inconsistent with the&#xA;  intended and advertised purpose of the Application as submitted to the&#xA;  App Store.</p>&#xA;</blockquote>&#xA;",5259402,"",,"",,2018-12-25T05:11:04,"","",,3,,,
53980167,2,,53979681,2018-12-30T18:10:20,,0,,"<p>If I understand you correctly, you intend to store the image on the user's computer so there's no need to do a remote upload. You simply have to copy the file from its original location to the application local data path.</p>&#xA;&#xA;<p>To achieve this, you could add to your form a button which would first trigger a <a href=""https://electronjs.org/docs/api/dialog#dialog"" rel=""nofollow noreferrer"">dialog</a> to let the user browse for the file.&#xA;Then you would <a href=""https://nodejs.org/api/fs.html#fs_fs_copyfile_src_dest_flags_callback"" rel=""nofollow noreferrer"">copy</a> the chosen file to your application <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#appgetpathname"" rel=""nofollow noreferrer"">local data path</a>.&#xA;After that, the idea would be to store some information about the image file so that you can retrieve it for later use.</p>&#xA;&#xA;<pre><code>const { app, dialog } = require('electron');&#xA;const fs = require('fs');&#xA;const path = require(""path"");&#xA;&#xA;// The function triggered by your button&#xA;function storeImageFile() {&#xA;&#xA;  // Open a dialog to ask for the file path&#xA;  const filePath = dialog.showOpenDialog({ properties: ['openFile'] })[0];&#xA;  const fileName = path.basename(filePath);&#xA;&#xA;  // Copy the chosen file to the application's data path&#xA;  fs.copyFile(filePath, (app.getPath('userData') + fileName), (err) =&gt; {&#xA;    if (err) throw err;&#xA;    console.log('Image ' + fileName + ' stored.');&#xA;&#xA;    // At that point, store some information like the file name for later use&#xA;  });&#xA;}&#xA;</code></pre>&#xA;",8853013,"",8853013,"",2019-01-03T10:54:49,2019-01-03T10:54:49,"","",,3,,,
54105324,2,,54105224,2019-01-09T07:45:48,,3,,"<p>You can get the menu items using:</p>&#xA;&#xA;<pre><code>import { Menu } from 'electron';&#xA;&#xA;Menu.getApplicationMenu().items // all the items&#xA;Menu.getApplicationMenu().getMenuItemById('MENU_ITEM_ID') // get a single item by its id&#xA;</code></pre>&#xA;&#xA;<p>After that you have several properties on the single menu item as:</p>&#xA;&#xA;<pre><code>- checked&#xA;- enabled&#xA;- visible&#xA;- label&#xA;- click&#xA;</code></pre>&#xA;&#xA;<p>And you can customize your behavior as you want to.</p>&#xA;&#xA;<p>Tested with electron <code>3.0.5</code>, before the <code>27 Sep 2017</code> the method <code>getMenuItemById</code> was not there and you had to loop over all the items.</p>&#xA;",2652759,"",,"",,2019-01-09T07:45:48,"","",,5,,,
42621580,2,,42620164,2017-03-06T09:11:30,,0,,"<p>I ended up finding the solution here after a lot of digging : </p>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-builder/issues/335"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-builder/issues/335</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>The node spawn function in my app, which is a function&#xA;  that doesn't work with asar archives. I had to read the code to figure&#xA;  out how to stop electron-builder from archiving my app.</p>&#xA;  &#xA;  <p>All it takes is setting ""asar"": false in the build section of&#xA;  package.json.</p>&#xA;</blockquote>&#xA;",1838673,"",,"",,2017-03-06T09:11:30,"","",,0,,,
42627192,2,,42227299,2017-03-06T13:43:19,,1,,"<p>There's no problem with this, and nesting applications this way is pretty common on OS X (since you say "".app"" I'm assuming this is OS X, and not iOS. This is impossible on iOS). I doubt it'll be particularly effective as a copy-protection mechanism, but that's a completely <a href=""https://stackoverflow.com/questions/9181186/secure-https-encryption-for-iphone-app-to-webpage"">different question</a> (see the links for several discussions on this topic).</p>&#xA;&#xA;<p>To the question of ""what would be highly effective?"" unfortunately the answer is ""if you have to ask on Stack Overflow, then nothing you do is likely to be highly effective; do something simple and move on."" It doesn't mean you're a bad programmer or anything; it's just that copy protection is a game of obfuscation, and if you're using things you found on Stack Overflow, they're probably not that obfuscated. Anything you come up with over a week probably isn't that obfuscated. And if you do come up with something really good, you'll still need to keep updating it regularly every time it gets broken. Apple has a whole team devoted to this, and they control every part of the system including the hardware, and still there are jailbreaks.</p>&#xA;&#xA;<p>Again, that doesn't mean you can't do anything. You can stop a few people, maybe, particularly if your app isn't that interesting. But don't waste too much time on it, because it's not going to be that effective. (If this really is important for your business plan, you should research commercial solutions. I have no recommendations there, but expect to spend some money, and to update to new versions as they're defeated.)</p>&#xA;&#xA;<p>That said, nesting apps isn't hard.</p>&#xA;&#xA;<p>Make the ""sub-app"" a dependency of your target.</p>&#xA;&#xA;<p>Add a new ""Copy Files"" Phase to your build:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/K4pyu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/K4pyu.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>Set the destination to ""Executables"" and drag the app bundle here:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/Glulk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Glulk.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>When you're to launch it, just find it using <code>NSBundle.pathForResource:...</code> and then launch it with an <code>NSTask</code>.</p>&#xA;",97337,"",-1,"",2017-05-23T12:25:19,2017-03-06T13:49:07,"","",,0,,,
42637904,2,,42632797,2017-03-07T00:09:56,,0,,"<p><code>wcjs-prebuilt</code> only supports mac and windows. From the docs:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Target platform (<strong>supported: <code>win</code> / <code>osx</code></strong>. Default value: machine's platform)</p>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/wcjs-prebuilt#configuration"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/wcjs-prebuilt#configuration</a> (emphasis mine)</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Possibly related: <a href=""https://github.com/RSATom/WebChimera.js/issues/69"" rel=""nofollow noreferrer"">https://github.com/RSATom/WebChimera.js/issues/69</a>.</p>&#xA;",7127751,"",,"",,2017-03-07T00:09:56,"","",,0,,,
42640812,2,,42625651,2017-03-07T05:22:57,,0,,<p>I finally solved this problem. I was copying the app to build first. But node_modules (and those packages) didn't exist in that directory. Either copy it or run npm install in build before running Electron Packager will make it work.</p>&#xA;,1349923,"",,"",,2017-03-07T05:22:57,"","",,0,,,
42643669,2,,42638135,2017-03-07T08:39:30,,2,,"<p>Does your exe use a relative path to load the fonts? If so, either change the exe to be more flexible, or in your call to <code>execFile()</code> specify the optional 3rd arg to specify the desired working directory.</p>&#xA;&#xA;<pre><code>var child = require('child_process').execFile;&#xA;var exePath = ""C:\\Users\\name\\Documents\\Visual Studio 2015\\Projects\\Ten\\Release"";&#xA;var exe = exePath + ""\\Ten.exe"";&#xA;var parameters = [""test""];&#xA;var options = {cwd:exePath};&#xA;&#xA;child(exePath, parameters, options, function(err, data){&#xA;    console.log(err);&#xA;    console.log(data.toString());&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>If that doesn't work, my guess would be some kind of permissions problem. Is your electron app running as a different user to when you test the exe?</p>&#xA;",841830,"",,"",,2017-03-07T08:39:30,"","",,0,,,
42654036,2,,42653685,2017-03-07T17:02:11,,2,,"<p>You should consider using a state container framework like <a href=""https://github.com/reactjs/redux"" rel=""nofollow noreferrer"">Redux</a>, or <a href=""https://github.com/facebook/flux"" rel=""nofollow noreferrer"">Flux</a> to manage closing. This way, when you recieve the close signal from the user, you can dispatch a signal to make sure to:</p>&#xA;&#xA;<ul>&#xA;<li>Prompt the user if their data is unsaved</li>&#xA;<li>Buffer the config data of the app to a file, if you'd like (<em>to resume from previous state on next start</em>)</li>&#xA;<li>Then run <code>app.quit()</code> so you can ensure a safe exit</li>&#xA;</ul>&#xA;&#xA;<p>Other than that, if your app requires no safe-close, then <code>app.quit</code> by itself is a perfectly fine way of closing your electron app.</p>&#xA;",2162893,"",,"",,2017-03-07T17:02:11,"","",,0,,,
42697652,2,,42597241,2017-03-09T14:16:17,,1,,"<p>Please see this <a href=""https://plnkr.co/edit/a1nWIUxoE05cXIRM5lIN?p=preview"" rel=""nofollow noreferrer"">plunker</a> for an angular 1.5 example, or check the documentation. Basically you want to do this <code>&lt;div ng-include=""'yourtemplate.html'""&gt;&lt;/div&gt;</code> for the angular setup.</p>&#xA;&#xA;<p>For EJS templates, you would do something like <code>&lt;% include includes/header.ejs %&gt;</code></p>&#xA;&#xA;<p>I would wrap those in the bootstrap <code>navbar-header</code> class and <code>footer</code> tags for optimal placement, or any custom div that you are working on.</p>&#xA;&#xA;<p>Now, when it comes to using these in Electron, I would incorporate these files into your 'main' browserWindow, so that when the application runs, the index.html file you are referencing always has these files loaded.</p>&#xA;&#xA;<p>Another thing you can do is use ng-if statements to change the ng-includes based on certain parameters. The same can be said with any server side template like EJS.</p>&#xA;",5847412,"",5847412,"",2017-03-09T20:54:18,2017-03-09T20:54:18,"","",,0,,,
42716782,2,,42625889,2017-03-10T11:01:46,,1,,"<p>I managed to do the same and have uploaded a sample project in Github for reference at <a href=""https://github.com/rik12s/ElectronApp-Automation-Nightwatch.git"" rel=""nofollow noreferrer"">https://github.com/rik12s/ElectronApp-Automation-Nightwatch.git</a></p>&#xA;",6470949,"",472495,"",2017-03-10T20:43:57,2017-03-10T20:43:57,"","",,0,,,
42787941,2,,42729872,2017-03-14T13:55:45,,3,,"<p>So, after some research and tinkering, I've discovered the fastest way to render ~4000 images.</p>&#xA;&#xA;<ul>&#xA;<li>Don't use React components for Konva.js. I use React to structure my app, but I've skipped using an intermediate library for Konva.js rendering. Using React Components for the canvas will halve your performance.</li>&#xA;<li>Cache common images. I use a simple LRU cache to reuse HTMLImageElement objects.</li>&#xA;<li>Reuse Konva.js nodes (Konva.Image) whenever possible. My implementation is rendering a grid of images. The locations do not change, but the images may. Before, I would destroy() a node, and the add another. The destroy() causes an additional render, which creates jank for your users. Instead, I just use the image() method in combination with id() and name() to find and replace images at grid coordinates.</li>&#xA;<li>My app allows users to paint long strokes across the grid. This works OK in small strokes, when only using the literal mouse events. For long strokes, this does not work for two reasons. First, the OS and browser throttle the mouse events, giving you intermittent mouse events. Second, being in the middle of a render will give the same side effect. Instead, the software now detects long strokes, and ""fills in"" the missing coordinates that the user intended to draw between the intermittent mouse events.</li>&#xA;<li>Render at intervals. Since my grid can change often, I decided to sample the grid information 24 times a second, rather than allowing each tile change to queue up a batchDraw(). The underlying implementation is using RxJS to poll a Redux store once every 42ms, and only queues a batchDraw() if something has changed.</li>&#xA;</ul>&#xA;",1893005,"",1893005,"",2017-03-14T17:02:48,2017-03-14T17:02:48,"","",,0,,,
42816466,2,,42775250,2017-03-15T17:14:08,,0,,"<p>I've found an answer for myself.</p>&#xA;&#xA;<p>By using <code>myEngine = module.parent.exports</code> in my sub classes, I can access not only the other classes (as long as the class doesn't use the sub class until after the other class has been included in the parent's <code>module.exports</code>), but also access higher scope variables like <code>myEngine.entities</code>.</p>&#xA;",5334294,"",,"",,2017-03-15T17:14:08,"","",,0,,,
42828428,2,,42827992,2017-03-16T08:07:36,,6,,"<p>In mongo nested fields can be generally accessed using the . operator (<a href=""https://docs.mongodb.com/manual/core/document/#embedded-documents"" rel=""noreferrer"">dot notation</a>)</p>&#xA;&#xA;<p>Try this code:</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>users.find({ query: { 'personal.name': 'Robert' } }).then</code></p>&#xA;</blockquote>&#xA;",3345844,"",174843,"",2017-03-16T10:25:40,2017-03-16T10:25:40,"","",,0,,,
42835721,2,,42835597,2017-03-16T13:38:57,,1,,"<p>Usually SQLite is used for things like that. See:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://www.sqlite.org/"" rel=""nofollow noreferrer"">https://www.sqlite.org/</a></li>&#xA;</ul>&#xA;&#xA;<p>Sql.js is basically SQLite compiled with Emscripten but in Node or Electron apps you can easily use real SQLite.</p>&#xA;&#xA;<blockquote>&#xA;  <p>SQLite is an in-process library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine. The code for SQLite is in the public domain and is thus free for use for any purpose, commercial or private. SQLite is the most widely deployed database in the world with more applications than we can count, including several high-profile projects.</p>&#xA;</blockquote>&#xA;",613198,"",613198,"",2017-03-16T13:46:44,2017-03-16T13:46:44,"","",,0,,,
42673318,2,,42673125,2017-03-08T13:59:33,,1,,"<p>You can use <code>browserWindow.setAlwaysOnTop(boolean flag)</code>. </p>&#xA;&#xA;<p>Refer to <a href=""https://electron.atom.io/docs/api/browser-window/#winsetalwaysontopflag-level-relativelevel"" rel=""nofollow noreferrer"">https://electron.atom.io/docs/api/browser-window/#winsetalwaysontopflag-level-relativelevel</a>.</p>&#xA;",4284143,"",,"",,2017-03-08T13:59:33,"","",,1,,,
42720874,2,,42559135,2017-03-10T14:34:44,,2,,"<p>Delvar gave me the answer in the comment:</p>&#xA;&#xA;<pre><code>{""provider"": ""generic"", ""url"": ""your URL""}&#xA;</code></pre>&#xA;",2045257,"",,"",,2017-03-10T14:34:44,"","",,1,,,
42738546,2,,42690172,2017-03-11T17:48:29,,3,,"<p>Did you install fabric without the optional cairo dependencies (only needed/useful in node)? <br>&#xA;<code>npm install fabric --no-optional</code>&#xA;(see <a href=""https://github.com/kangax/fabric.js/issues/2775"" rel=""nofollow noreferrer"">https://github.com/kangax/fabric.js/issues/2775</a>)<br>&#xA;My workaround ended up using <a href=""https://github.com/webpack-contrib/script-loader"" rel=""nofollow noreferrer"">script-loader</a> which does the same thing as including fabric in a &lt;script&gt; tag in the browser (just that you get the benefits of webpack bundling)&#xA;<code>&#xA;import ""!script-loader!../static/fabricjs/fabric.js""&#xA;// window.fabric is now loaded&#xA;</code>&#xA;also, I didn't install fabric over npm (since that again installed the dependencies for node), but grabbed a <a href=""http://fabricjs.com/build/"" rel=""nofollow noreferrer"">custom build</a> - although both should work fine.</p>&#xA;",3067153,"",,"",,2017-03-11T17:48:29,"","",,1,,,
42763698,2,,42759956,2017-03-13T12:30:18,,11,,"<p>Check your <code>package.json</code> file: is <code>bootstrap</code> listed as a dependency? Probably not since it doesn't look like you are using the <code>--save</code> param:</p>&#xA;&#xA;<blockquote>&#xA;  <p>npm install bootstrap --save</p>&#xA;</blockquote>&#xA;&#xA;<p>I'm no Electron hero: I happen to be working on a project using <code>fs-jetpack</code> at the moment. I deleted the <code>fs-jetpack</code> entry from from my <code>project.json</code> and did an OSX build using <code>electron-packager</code>. On launch I got a script error about missing ""fs-jetpack'. From that I conclude that the packager uses the 'package.json` to know what to include. Maybe I'm wrong? I have ""--prune=true"" as one of the packager params. Maybe without that it includes everything?</p>&#xA;&#xA;<p>Also, I am surprised that this line works for you:</p>&#xA;&#xA;<pre><code>&lt;link rel=""stylesheet"" href=""node_modules/bootstrap/dist/css/bootstrap.min.css""&gt;&#xA;</code></pre>&#xA;&#xA;<p>but perhaps you are using a different folder structure where the index.html file is not in the app directory?</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/2iu4d.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2iu4d.png"" alt=""enter image description here""></a></p>&#xA;",840992,"",840992,"",2018-08-29T15:37:02,2018-08-29T15:37:02,"","",,1,,,
42788677,2,,42788366,2017-03-14T14:26:40,,1,,"<p>Took 2 minutes to find out that I'm stupid. I created another js file named app.js add add the:</p>&#xA;&#xA;<pre><code>function compile() {&#xA;&#xA;    var html = document.getElementById(""html"");&#xA;    var css = document.getElementById(""css"");&#xA;    var js = document.getElementById(""js"");&#xA;    var code = document.getElementById(""code"").contentWindow.document;&#xA;&#xA;     document.body.onkeyup = function(){&#xA;        code.open();&#xA;        code.writeln(html.value+""&lt;style&gt;""+css.value+""&lt;/style&gt;""+""&lt;script&gt;"" + js.value + ""&lt;/script&gt;"");&#xA;        code.close();&#xA;      };&#xA;    };&#xA;&#xA;&#xA;compile();&#xA;</code></pre>&#xA;&#xA;<p>there. problem solved.</p>&#xA;",6683139,"",,"",,2017-03-14T14:26:40,"","",,1,,,
42659919,2,,42657792,2017-03-07T22:56:06,,46,,"<p>So after reading through some related answers (specifically <a href=""https://stackoverflow.com/questions/38243652/react-redux-connect-issues-in-typescript?rq=1"">this one</a> and <a href=""https://stackoverflow.com/questions/40671978/typescript-struggles-with-redux-containers?rq=1"">this one</a> and looking at @basarat's answer to the question, I managed to find something that works for me. It looks (to my relatively new React eyes) like Connect was not supplying an explicit interface to the container component, so it was confused by the prop that it was trying to pass. </p>&#xA;&#xA;<p>So the container component stayed the same, but the child component changed a bit:</p>&#xA;&#xA;<pre><code>interface IChildComponentProps extends React.Props&lt;any&gt; {&#xA;  ... (other props needed by component)&#xA;}&#xA;&#xA;interface PassedProps extends React.Props&lt;any&gt; {&#xA;  propToPass: any&#xA;}&#xA;&#xA;class ChildComponent extends React.Component&lt;IChildComponentProps &amp; PassedProps, any&gt; {&#xA;  ...&#xA;}&#xA;&#xA;....&#xA;export default connect&lt;{}, {}, PassedProps&gt;(mapStateToProps, mapDispatchToProps)    (ChildComponent);&#xA;</code></pre>&#xA;&#xA;<p>The above managed to work for me. Passing explicitly the props that the component is expecting from the container seemed to work and both components rendered properly.</p>&#xA;&#xA;<p><strong>NOTE:</strong> I know this is a very simplistic answer and I'm not exactly sure WHY this works, so if a more experienced React ninja wants to drop some knowledge on this answer I'd be happy to amend it.</p>&#xA;",3352468,"",-1,"",2017-05-23T11:54:28,2017-03-07T22:56:06,"","",,2,,,
42718300,2,,42710882,2017-03-10T12:19:38,,8,,"<p>I'm struggling to find any definitive information on this but I am fairly confident about why this happens.</p>&#xA;&#xA;<p>A 4K screen has such a high pixel density that Chromium is scaling the elements on the page up so that they do not look tiny on the 4K screen. In this case it appears to be using a <strong>scaling factor of 1.5</strong>. This is clear from your screenshots: both the text and boxes appear about 1.5x larger on the 4K screen.</p>&#xA;&#xA;<p>So why does the 1px border not scale up to 1.5px too? Because it wouldn't look crisp. There seems to be an assumption that when you specify a 1px border, what you really want is the smallest border supported by the screen, so you still get 1px on a 4K screen, and thus it still looks sharp. </p>&#xA;&#xA;<p>Chromium scales for high DPI transparently, so that in the web inspector you still see the original CSS values. So although your 10px <code>font-size</code> is now really being rendered as 15px, it still shows as 10px in the inspector. To show you that the border has not been scaled up, the <strong>1px is divided by 1.5, giving 0.667px</strong>.</p>&#xA;&#xA;<p>This behaviour strikes me as sensible, but as a side effect it messes up your positioning. Here are a couple of possible workarounds:</p>&#xA;&#xA;<ol>&#xA;<li>Add a 1px border to all the boxes, making the border the same colour as the box where no black border is desired. This will ensure they all line up.</li>&#xA;<li>Use <code>box-sizing: border-box</code> so that the specified width and height of the boxes includes the border. The default value (<code>content-box</code>) adds the border outside of the specified box size, which is why you currently have an alignment problem.</li>&#xA;</ol>&#xA;",174979,"",,"",,2017-03-10T12:19:38,"","",,2,,,
42790669,2,,42789013,2017-03-14T15:52:54,,1,,"<p>There are is a package for that:&#xA;<a href=""https://www.npmjs.com/package/ps-node"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/ps-node</a></p>&#xA;&#xA;<h2><strong>However</strong></h2>&#xA;&#xA;<p>I will suggest that this is a poor solution for blocking screen capture. Trying to pursue this further will end up in a cat and mouse like game trying to block avenues of capture.</p>&#xA;&#xA;<p>Its trivial to start an application with a different name to get past your list&#xA;or if trying to block by comparing executable hashes building the application with a different compiler can change the hash.</p>&#xA;&#xA;<p>If you are ok with not having <strong>absolute</strong> security and making more of a best effort then i suggest you should explore, in addition to the above, using operating system support for blocking screencapture such as:&#xA;<a href=""https://code.msdn.microsoft.com/windowsapps/Disable-screen-capture-00efe630"" rel=""nofollow noreferrer"">https://code.msdn.microsoft.com/windowsapps/Disable-screen-capture-00efe630</a></p>&#xA;",1985217,"",,"",,2017-03-14T15:52:54,"","",,2,,,
42808063,2,,42730864,2017-03-15T11:09:55,,0,,"<p>There are two approaches I am aware of:</p>&#xA;&#xA;<p><strong>Unique folder names</strong></p>&#xA;&#xA;<p>By placing each file in a folder with a unique name, you can preserve the original file name and avoid any clashes. This method will make things much easier for you if you want to store associated files (e.g. image thumbnails) with the original.</p>&#xA;&#xA;<p>You can generate unique folder names using a UUID, which is a string that is virtually guaranteed not to clash. There are plenty of Node.js libraries to generate a UUID, such as <a href=""https://www.npmjs.com/package/uuid"" rel=""nofollow noreferrer"">uuid</a>. Or just use any random string and check if the folder already exists to be sure.</p>&#xA;&#xA;<p>Alternatively, as in the example you gave, the folder names could be generated according to date and time, but you have to be sure that you will only add one item at one point in time, or add random folders under the date as in the iPhoto example. The dated folders in iPhoto are probably not necessary when they are also using random-strings as folder names, but they would make it friendly for a user who is manually browsing through the folders, and there may be performance benefits if iPhoto needs a directory listing for a specific date.</p>&#xA;&#xA;<p>You need to store a reference to both the folder name and the file name in order to load the file, but of course this could be one string e.g. <code>""6c84fb90-12c4-11e1-840d-7b25c5ee775a/image.jpg""</code>.</p>&#xA;&#xA;<p><strong>Unique file names</strong></p>&#xA;&#xA;<p>Another technique is to rename files to have a unique name whenever there is a clash. This is the approach used by the macOS Finder when you create new folders or duplicate a file. This approach is usually best if the user may interact directly with the files, as they will not have to navigate through folders with meaningless names.</p>&#xA;&#xA;<p>As a simple example, let's say I am adding photos of penguins, and I've already added a photo called <code>penguin.jpg</code>. </p>&#xA;&#xA;<p>Now I add a second photo which also happens to be called <code>penguin.jpg</code>.</p>&#xA;&#xA;<ol>&#xA;<li>Check if <code>penguin.jpg</code> exists. It does, so...</li>&#xA;<li>Generate a new name for the file, <code>penguin-2.jpg</code></li>&#xA;<li>Check if <code>penguin-2.jpg</code> exists. It doesn't, so...</li>&#xA;<li>Save the new file as <code>penguin-2.jpg</code></li>&#xA;</ol>&#xA;&#xA;<p>If I add more files also called <code>penguin.jpg</code>, the program needs to keep incrementing the name until I find one which does not exist (e.g. <code>penguin-3.jpg</code>). This should not cause any performance issues unless adding thousands of files with the same name (which seems unlikely).</p>&#xA;&#xA;<p>I found a Node.js module which can handle this approach for you: <a href=""https://www.npmjs.com/package/uniquefilename"" rel=""nofollow noreferrer"">uniquefilename</a></p>&#xA;",174979,"",,"",,2017-03-15T11:09:55,"","",,2,,,
42616189,2,,42616008,2017-03-06T01:28:39,,46,,"<p>When this type of version mismatch occurs, you can either choose an electron distribution with the target Node version or rebuild the npm package. Since Electron's distribution has skipped Node v7.0.0 which is configured with NODE_MODULE_VERSION 51 (and jumped to v7.4.0), you would have to rebuild the <code>serialport</code> package. </p>&#xA;&#xA;<p>In your app's directory (where package.json is located at), </p>&#xA;&#xA;<p><strong>1. Install <code>electron-rebuild</code></strong></p>&#xA;&#xA;<p><code>npm install --save-dev electron-rebuild</code></p>&#xA;&#xA;<p><br /></p>&#xA;&#xA;<p><strong>2. Rebuild</strong></p>&#xA;&#xA;<p><code>./node_modules/.bin/electron-rebuild</code></p>&#xA;&#xA;<p><br /><br />&#xA;<strong>Or, even a better option</strong> - set environment variables from the first place. </p>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code># Electron's version.&#xA;export npm_config_target=1.6.1&#xA;# The architecture of Electron, can be ia32 or x64.&#xA;export npm_config_arch=x64&#xA;export npm_config_target_arch=x64&#xA;# Download headers for Electron.&#xA;export npm_config_disturl=https://atom.io/download/electron&#xA;# Tell node-pre-gyp that we are building for Electron.&#xA;export npm_config_runtime=electron&#xA;# Tell node-pre-gyp to build module from source code.&#xA;export npm_config_build_from_source=true&#xA;# Install all dependencies, and store cache to ~/.electron-gyp.&#xA;HOME=~/.electron-gyp npm install&#xA;</code></pre>&#xA;&#xA;<p>Take a look at the Electron's documentation page for using native Node modules. &#xA;<a href=""https://electron.atom.io/docs/tutorial/using-native-node-modules/"" rel=""noreferrer"">https://electron.atom.io/docs/tutorial/using-native-node-modules/</a></p>&#xA;",4284143,"",1147688,"",2018-04-13T17:22:00,2018-04-13T17:22:00,"","",,4,,,
42744090,2,,42743990,2017-03-12T05:22:56,,7,,"<p>Havent used electron.. But try <a href=""https://angular.io/docs/ts/latest/api/core/index/NgZone-class.html"" rel=""noreferrer"">ngZone</a>. </p>&#xA;&#xA;<pre><code>import { Component,NgZone } from '@angular/core';&#xA;</code></pre>&#xA;&#xA;<p>And in your constructor,</p>&#xA;&#xA;<pre><code>constructor(private environmentService: EnvironmentService,private _ngzone:NgZone) {&#xA;    this.environmentService.getVersionInfo();&#xA;&#xA;    ipcRenderer.on('environment-reply', (event, arg) =&gt; {&#xA;      console.log(arg);&#xA;      this._ngzone.run(()=&gt;{&#xA;         this.version = arg;&#xA;      });&#xA;    });&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Electron maybe updating the value outside the 'zone' and angular may not be able to detect it.</p>&#xA;",4826457,"",,"",,2017-03-12T05:22:56,"","",,4,,,
42786924,2,,42786492,2017-03-14T13:09:54,,0,,"<p>Try this.</p>&#xA;&#xA;<p>First of all, add a node element in you DOM which will contail all the messages.</p>&#xA;&#xA;<pre><code>&lt;body&gt;&#xA;    &lt;h1&gt;Messages&lt;/h1&gt;&#xA;    &lt;div id=""message-container""&gt;&lt;/div&gt;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;&#xA;<p>Then make you function write in the DOM:</p>&#xA;&#xA;<pre><code>connection.connect(function(err) {&#xA;    if (err) {&#xA;      console.error('error connecting: ' + err.stack);&#xA;      return;&#xA;    }&#xA;&#xA;    connection.query('SELECT * FROM message', function (error, results, fields) {&#xA;      if (error) throw error;&#xA;      json = JSON.stringify(results);&#xA;      console.log(json);&#xA;&#xA;      var container = document.getElementById(""message-container"")&#xA;&#xA;      // Use this in case you can't perform a more precise query&#xA;      container.innerHTML = """";&#xA;&#xA;      results.forEach(function(item){&#xA;          var node = document.createElement(""p"");&#xA;          var textnode = document.createTextNode(item.message); &#xA;&#xA;          node.appendChild(textnode);&#xA;          container.appendChild(node); &#xA;      })&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>To keep you data up to date, you can do some good ol' polling:</p>&#xA;&#xA;<pre><code>function startTimer() {&#xA;    setTimeout(query, 10000)&#xA;}&#xA;&#xA;function query() {&#xA;  connection.query('SELECT * FROM message', function (error, results, fields) {&#xA;      if (error) throw error;&#xA;      json = JSON.stringify(results);&#xA;      console.log(json);&#xA;&#xA;      var container = document.getElementById(""message-container"")&#xA;&#xA;      // Use this in case you can't perform a more precise query&#xA;      container.innerHTML = """";&#xA;&#xA;      results.forEach(function(item){&#xA;          var node = document.createElement(""p"");&#xA;          var textnode = document.createTextNode(item.message); &#xA;&#xA;          node.appendChild(textnode);&#xA;          container.appendChild(node); &#xA;          startTimer()&#xA;      })&#xA;    });&#xA;}&#xA;&#xA;connection.connect(function(err) {&#xA;    if (err) {&#xA;      console.error('error connecting: ' + err.stack);&#xA;      return;&#xA;    }&#xA;    query()&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>This way you have a first request. Once that is done, the app waits 10 seconds and prompt a second request. After that one is done, it waits for 10 seconds and so on...</p>&#xA;",5897505,"",5897505,"",2017-03-14T22:11:55,2017-03-14T22:11:55,"","",,6,,,
42753422,2,,42753339,2017-03-12T21:31:00,,1,,"<blockquote>&#xA;  <p>How do I set an environment variable on Windows 10, which was generated from GitHub?</p>&#xA;</blockquote>&#xA;&#xA;<p>Make sure to restart a new CMD session (in which you can type <code>bash</code>) in order to make sure your session does inherit the new Windows environment variable you have just set.</p>&#xA;&#xA;<p>Once you have done that, you can check in the (new) Git Bash session which are the environment variables already set, with:</p>&#xA;&#xA;<pre><code>env&#xA;env | grep GH&#xA;</code></pre>&#xA;&#xA;<p>Make sure your script starts with</p>&#xA;&#xA;<pre><code>#!/bin/bash&#xA;</code></pre>&#xA;&#xA;<p>The <a href=""https://stackoverflow.com/users/6600549/george"">OP George</a> points out <a href=""https://stackoverflow.com/questions/42753339/how-i-can-assign-an-environment-variable-on-windows-github-access-token-set-va/42753422?noredirect=1#comment72629969_42753422"">in the comments</a> that the correct form is:</p>&#xA;&#xA;<pre><code>export GH_TOKEN=MY_VARIABLE_NAME&#xA;</code></pre>&#xA;&#xA;<p>(no double quotes)</p>&#xA;",6309,"",63550,"",2019-05-27T13:37:09,2019-05-27T13:37:09,"","",,7,,,
42752261,2,,42751563,2017-03-12T19:47:38,,0,,"<p>You getting the output </p>&#xA;&#xA;<p>B: B05.txt</p>&#xA;&#xA;<p>over and over again seems to be a simple scoping issue.</p>&#xA;&#xA;<p>Try using ""let fileName"".</p>&#xA;",5180580,"",,"",,2017-03-12T19:47:38,"","",,8,,,
29412251,2,,29391570,2015-04-02T11:50:06,,0,,"<p>As far as I know, it can't. You could try making a <a href=""http://7zip.bugaco.com/7zip/MANUAL/switches/sfx.htm"" rel=""nofollow"">7zip SFX archive</a> and running your own program instead of an installer.</p>&#xA;&#xA;<p>This needs to create temporal files when run (which are deleted when the program quits) and I don't think you can remove the initial prompt. If you're okay with that, it might be what you need.</p>&#xA;&#xA;<p>Edit: You can get <a href=""http://www.7zsfx.info/en/"" rel=""nofollow"">the necessary SFX modules here</a>.</p>&#xA;",4712781,"",,"",,2015-04-02T11:50:06,"","",,0,,,
29303341,2,,29302682,2015-03-27T14:39:45,,1,,"<p>Corey Butler's <a href=""https://github.com/coreybutler/node-windows"" rel=""nofollow"">node-windows</a> is the closest thing that I'm aware of.  If it were me, and I were determined <em>not</em> to write this using Microsoft Visual Studio in C++ or C#, I think my approach would be to grab the full set of node-windows code and node_modules and then go to school on the underlying set of code.  Somewhere within those dependencies someone has exposed part of the WIN32 API for iterating and controlling/installing NT services.  In theory, one could fetch <em>that</em> module and work up a new one to provide access to the familiar methods to iterate and control windows by their handles.</p>&#xA;",4227790,"",,"",,2015-03-27T14:39:45,"","",,6,,,
29342910,2,,24621546,2015-03-30T09:41:48,,1,,"<p>I just ran into the same issue, here is how i solved it:</p>&#xA;&#xA;<pre><code>// Listen to `open` event&#xA;gui.App.on('open', function (cmdline) {&#xA;   // Break out the params from the command line&#xA;   var arr = /(.*)--original-process-start-time\=(\d+)(.*)/.exec(cmdline);&#xA;&#xA;   // Get the last match and split on spaces&#xA;   var params = arr.pop().split(' ');&#xA;&#xA;   console.log('Array of parameters', params);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This will work as long as they don't change the output structure of the event (i.e the <strong>--original-process-start-time</strong> flag)&#xA;but if and when they do i would look into doing this using the <strong>process.execPath</strong> maybe</p>&#xA;",1952477,"",,"",,2015-03-30T09:41:48,"","",,0,,,
29311864,2,,29265743,2015-03-27T23:37:20,,2,,"<p>Also, apparently left arrow fires on key down, not key press. Credit: <a href=""https://stackoverflow.com/questions/5597060/detecting-arrow-key-presses-in-javascript"">Detecting arrow key presses in JavaScript</a></p>&#xA;&#xA;<p>I'm just learning about atom-shell, but couldn't you catch the keypress inside your UI (I think it's called the rendererer process), like you would in a typical web page, then use the remote() API to call back to the renderer process and do whatever logic you wanted?</p>&#xA;",5480,"",-1,"",2017-05-23T12:33:28,2015-03-27T23:37:20,"","",,0,,,
29337986,2,,29337439,2015-03-30T03:31:34,,3,,"<p><a href=""https://github.com/leanote/desktop-app"" rel=""nofollow"">https://github.com/leanote/desktop-app</a> 's nw folder is not the distribute leanote app, it's just the NW. You must build the desktop-app. The README has written <strong>How to build it</strong>, <strong>How to develop it</strong></p>&#xA;&#xA;<p>You can download the distributed version via: <a href=""https://github.com/leanote/desktop-app/releases"" rel=""nofollow"">https://github.com/leanote/desktop-app/releases</a></p>&#xA;",4269908,"",,"",,2015-03-30T03:31:34,"","",,0,,,
29356102,2,,29320930,2015-03-30T20:55:15,,3,,"<p>Check out <code>BrowserWindow.reload()</code> or <code>WebContents.reload()</code>.</p>&#xA;&#xA;<p>If you are on the 'renderer' side, you can use <code>remote.getCurrentWindow().reload()</code></p>&#xA;&#xA;<p><a href=""https://github.com/atom/atom-shell/blob/master/docs/api/browser-window.md#browserwindowreload"" rel=""nofollow"">https://github.com/atom/atom-shell/blob/master/docs/api/browser-window.md#browserwindowreload</a></p>&#xA;&#xA;<p>If you want to wipe the 'javascript context' on the browser side too, you need to dereference the window and create a new window.</p>&#xA;",2719837,"",2719837,"",2015-04-02T21:00:59,2015-04-02T21:00:59,"","",,0,,,
29479567,2,,29472038,2015-04-06T20:57:13,,4,,"<p>Found solution here <a href=""https://github.com/RSATom/WebChimera/issues/105"" rel=""nofollow"">https://github.com/RSATom/WebChimera/issues/105</a>. Code for second window</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var gui = require('nw.gui');&#xD;&#xA;gui.Screen.Init();&#xD;&#xA;win = gui.Window.get();&#xD;&#xA;if (win.x &lt; gui.Screen.screens[gui.Screen.screens.length -1].work_area.x) win.x = gui.Screen.screens[gui.Screen.screens.length -1].work_area.x + win.x;&#xD;&#xA;&#xD;&#xA;var screenCB = {&#xD;&#xA;    onDisplayAdded : function(screen) {&#xD;&#xA;        win = gui.Window.get();&#xD;&#xA;        if (win.x &lt; screen.work_area.x) win.x = screen.work_area.x + win.x;&#xD;&#xA;    }&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;gui.Screen.on('displayAdded', screenCB.onDisplayAdded);</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4753449,"",,"",,2015-04-06T20:57:13,"","",,0,,,
29501347,2,,29500245,2015-04-07T21:08:58,,4,,"<p>I'm pretty sure it has to do with the fact that you have a <code>&lt;div&gt;</code> as a direct child of a <code>&lt;tr&gt;</code>. I've had issues with this type of design in the past where it causes strange behavior.</p>&#xA;&#xA;<p>A solution to this is to put the <code>&lt;div&gt;</code>'s within the <code>&lt;td&gt;</code>, like below: </p>&#xA;&#xA;<pre><code>&lt;tr data-ng-repeat=""line in chat""&gt;&#xA;    &lt;td class=""message-timestamp""&gt;{{line.time | date:'short'}}&lt;/td&gt;&#xA;    &lt;td class=""message-nick""&gt;&#xA;        &lt;div ng-if=""line.type === 'gist'""&gt;{{line.nick}}&lt;/div&gt;&#xA;        &lt;div ng-if=""line.type !== 'gist'""&gt;&lt;span class=""glyphicon glyphicon-arrow-right""&gt;&lt;/span&gt;&lt;/div&gt;&#xA;    &lt;/td&gt;&#xA;    &lt;td class=""message-text""&gt;&#xA;        &lt;div ng-if=""line.type === 'gist'""&gt;&#xA;            &lt;p&gt;&#xA;                &lt;code ng-show=""showGist"" walrus-auto-gistify data-gist-id=""{{line.options[0]}}""&gt;&lt;/code&gt;&#xA;                &lt;br /&gt;&#xA;                &lt;button ng-click=""showGist = !showGist"" class=""btn btn-primary btn-xs""&gt;Show/Hide&lt;/button&gt;&#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;        &lt;div ng-if=""line.type !== 'gist'""&gt;{line.message}}&lt;/div&gt;&#xA;    &lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>EDIT:</strong> Attempt at a JSFiddle <a href=""https://jsfiddle.net/cp7ctbde/1/"" rel=""nofollow"">here</a></p>&#xA;",2279020,"",2279020,"",2015-04-07T21:22:44,2015-04-07T21:22:44,"","",,1,,,
29336651,2,,29321179,2015-03-30T00:27:32,,15,,"<p><code>BrowserWindow</code> extends <code>EventEmitter</code>, so you would remove a listener the same way you typically would in Node.js:</p>&#xA;&#xA;<pre><code>var handler = function () {&#xA;    // ...&#xA;};&#xA;mainWindow.webContents.on('did-finish-load', handler);&#xA;&#xA;// Later:&#xA;mainWindow.webContents.removeListener('did-finish-load', handler);&#xA;</code></pre>&#xA;",237950,"",,"",,2015-03-30T00:27:32,"","",,2,,,
20165781,2,,20112297,2013-11-23T17:52:20,,2,,"<p>I got it to work. I used the same strategy used in the Angular documentation to make the ngRoute example code work in plunkr. I can't say I exactly understand why it didn't work using the stock <code>angular-seed</code> configuration. If anyone has insight, I'd like to hear it.</p>&#xA;&#xA;<p>The modified <code>index.html</code> and <code>app.js</code> files should look like this:</p>&#xA;&#xA;<p><code>app.js</code></p>&#xA;&#xA;<pre><code>'use strict';&#xA;&#xA;&#xA;// Declare app level module which depends on filters, and services&#xA;angular.module('myApp', [&#xA;  'ngRoute',&#xA;  'myApp.filters',&#xA;  'myApp.services',&#xA;  'myApp.directives',&#xA;  'myApp.controllers'&#xA;]).&#xA;config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {&#xA;  $routeProvider.when('/view1', {templateUrl: 'partials/partial1.html', controller: 'MyCtrl1'});&#xA;  $routeProvider.when('/view2', {templateUrl: 'partials/partial2.html', controller: 'MyCtrl2'});&#xA;  $routeProvider.otherwise({redirectTo: '/view1'});&#xA;  // configure html5 to get links working on node-webkit&#xA;  $locationProvider.html5Mode(true);&#xA;}]);&#xA;</code></pre>&#xA;&#xA;<p><code>index.html</code></p>&#xA;&#xA;<pre><code>&lt;!doctype html&gt;&#xA;&lt;html lang=""en"" ng-app=""myApp""&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=""utf-8""&gt;&#xA;  &lt;title&gt;My AngularJS App&lt;/title&gt;&#xA;  &lt;link rel=""stylesheet"" href=""css/app.css""/&gt;&#xA;  &lt;script src=""lib/angular/angular.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""lib/angular/angular-route.js""&gt;&lt;/script&gt;  &#xA;  &lt;script type=""text/javascript""&gt;&#xA;  //this is here to make node-webkit work with AngularJS routing&#xA;  angular.element(document.getElementsByTagName('head')).append(angular.element('&lt;base href=""' + window.location.pathname + '"" /&gt;'));&#xA;  &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;  &lt;ul class=""menu""&gt;&#xA;    &lt;li&gt;&lt;a href=""view1""&gt;view1&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=""view2""&gt;view2&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&#xA;  &lt;div ng-view&gt;&lt;/div&gt;&#xA;&#xA;  &lt;div&gt;Angular seed app: v&lt;span app-version&gt;&lt;/span&gt;&lt;/div&gt;&#xA;&#xA;  &lt;!-- In production use:&#xA;  &lt;script src=""//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js""&gt;&lt;/script&gt;&#xA;  --&gt;&#xA;  &lt;script src=""js/app.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""js/services.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""js/controllers.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""js/filters.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""js/directives.js""&gt;&lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Note that in this mode, <code>index.html</code> is no longer part of the URL, so if you reload, nw tries to reload a file that doesn't exist (e.g. <code>/path/to/app/view1</code>). You need to manually update it to <code>/path/to/app/index.html</code>. It would be nice if you could make nw go back to the main page on reload, but I so far don't see an option for making that happen.</p>&#xA;&#xA;<p>Late breaking news: It was due to a <a href=""https://github.com/angular/angular.js/issues/4680"" rel=""nofollow"">bug in Angular 1.2.0</a>, which has since been resolved. The <code>angular-seed</code> simply has not yet been updated to the most recent version. </p>&#xA;",1095092,"",1095092,"",2013-11-23T18:43:14,2013-11-23T18:43:14,"","",,2,,,
20011109,2,,20011053,2013-11-15T21:42:22,,3,,"<p>Commands that are prefixed by a variable assignment run in a modified environment.</p>&#xA;&#xA;<pre><code>LD_LIBRARY_PATH=/home/omi/nw:$LD_LIBRARY_PATH ./nw $*&#xA;</code></pre>&#xA;&#xA;<p>is (roughly) equivalent to</p>&#xA;&#xA;<pre><code>OLD_PATH=""$LD_LIBRARY_PATH""&#xA;export LD_LIBRARY_PATH=/home/omi/nw:$LD_LIBRARY_PATH&#xA;./nw $*&#xA;LD_LIBRARY_PATH=""$OLD_LIBRARY_PATH""&#xA;</code></pre>&#xA;&#xA;<p><code>./nw</code> runs in an environment where <code>LD_LIBRARY_PATH</code> is set to the given value, but nothing in the current environment is changed.</p>&#xA;&#xA;<p>Your two-line command is equivalent to</p>&#xA;&#xA;<pre><code>LD_LIBRARY_PATH=/home/omi/nw:$LD_LIBRARY_PATH; ./nw $*&#xA;</code></pre>&#xA;&#xA;<p>(note the semicolon). If <code>LD_LIBRARY_PATH</code> wasn't already marked for export to the environment, it is simply a local shell variable, and is not inherited by <code>./nw</code> when it runs.</p>&#xA;",1126841,"",,"",,2013-11-15T21:42:22,"","",,1,,,
32383835,2,,32374518,2015-09-03T19:21:27,,0,,"<p>I don't have a touchscreen myself so I can't test it, but adding the following to the HTML should do the trick:</p>&#xA;&#xA;<pre><code>&lt;meta name=""viewport"" content=""user-scalable=no""/&gt;&#xA;</code></pre>&#xA;&#xA;<p>let me know if it helped.. </p>&#xA;",1393862,"",,"",,2015-09-03T19:21:27,"","",,1,,,
32419310,2,,32416179,2015-09-06T01:56:07,,0,,"<blockquote>&#xA;  <p>from what I understand the renderer runs in the file:// origin so I cannot communicate with mysite.com</p>&#xA;</blockquote>&#xA;&#xA;<p>I'm pretty sure this is not the case, <code>file://</code> can communicate with any origin</p>&#xA;",5728,"",,"",,2015-09-06T01:56:07,"","",,1,,,
32557223,2,,32556591,2015-09-14T04:15:52,,0,,"<p>I've managed. I've changed <a href=""https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL"" rel=""nofollow""><code>readAsDataURL()</code></a> for <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL"" rel=""nofollow""><code>createObjectURL()</code></a>.</p>&#xA;&#xA;<p>For the sake of reference, my code</p>&#xA;&#xA;<pre><code>var video = document.createElement(""video"");&#xA;video.controls = true;&#xA;document.body.appendChild(video);&#xA;video.src = (window.URL||window.webkitURL).createObjectURL(file);&#xA;video.play();&#xA;</code></pre>&#xA;&#xA;<p>Now, the  <em>The Lord of Rings</em> marathon of my users is saved.</p>&#xA;",2205714,"",,"",,2015-09-14T04:15:52,"","",,0,,,
32393629,2,,32390320,2015-09-04T08:36:13,,1,,"<p>okay, fine i got the solution </p>&#xA;&#xA;<p>you need to go in the node_module/robotjs and configure the nw-gyp target by following command</p>&#xA;&#xA;<p>nw-gyp configure --target=0.12.3&#xA;then&#xA;nw-gyp build</p>&#xA;&#xA;<p>and this worked for me (if you get nw-gyp command not found then use npm install nw-gyp  )</p>&#xA;&#xA;<p>Thanks</p>&#xA;",4299103,"",,"",,2015-09-04T08:36:13,"","",,0,,,
32573734,2,,32557557,2015-09-14T20:53:19,,1,,"<p>If the files are locally and contain HTML, you could use the Node FileSystem module to load the file then set the content as the inner HTML of a DOM object - no external libraries required.</p>&#xA;&#xA;<p>I've extended your example below. I've used the synchronous API, but you could just as easily use the async. Note that ""Page loaded"" appears once, and your timer continues to execute in the background. Make sure the files are in the same directory as the main page.</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;script&gt;&#xA;    setInterval(function() {&#xA;        console.log(""this task can't be interrupted!"");&#xA;    }, 3000);&#xA;&#xA;    function loadPage(fileName)&#xA;    {&#xA;        var fs = require('fs');&#xA;        fs.readFile(fileName, function (err, data)&#xA;        {&#xA;            if (err) throw err;&#xA;            console.log(data);&#xA;&#xA;            document.getElementById(""content"").innerHTML = data;&#xA;        });&#xA;    }&#xA;    alert(""Page loaded"");&#xA;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;div id=""menu""&gt;&#xA;        &lt;ul&gt;&#xA;            &lt;li&gt;&lt;a href=""#"" onclick=""javascript:loadPage('page1.html')""&gt;Page 1&lt;/a&gt;&lt;/li&gt;&#xA;            &lt;li&gt;&lt;a href=""#"" onclick=""javascript:loadPage('page2.html')""&gt;Page 2&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;        &lt;div id=""content"" /&gt;&#xA;    &lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",271879,"",,"",,2015-09-14T20:53:19,"","",,0,,,
32391425,2,,32341587,2015-09-04T06:27:26,,2,,"<p>If you are using WPF, you can create you window with something like this (xaml):</p>&#xA;&#xA;<pre><code>&lt;Window x:Class=""WpfApplication2.MainWindow""&#xA;        xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""&#xA;        xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""&#xA;        WindowStyle=""None""&#xA;        Title=""MainWindow"" Left=""100"" Top=""200"" Height=""350"" Width=""525"" PreviewKeyDown=""Window_PreviewKeyDown""&gt;&#xA;    &lt;Grid x:Name=""grdBrowserHost""&gt;&#xA;    &lt;/Grid&gt;&#xA;&lt;/Window&gt;&#xA;</code></pre>&#xA;&#xA;<p><code>WindowStyle</code> attr <code>None</code> means ""borderless with no titlebars"" window. <code>Left</code> and <code>Top</code> are for position, and <code>Width</code> and <code>Height</code> are self-explanatory. All those properties can be accessed via code-behind with simple <code>this.Width</code>, etc... <code>PreviewKeyDown</code> I put here because in this example (as you will see), <code>Topmost</code> property will be changed from code behind (dynamically).</p>&#xA;&#xA;<p>Code-behind should look something like&#xA;using System;</p>&#xA;&#xA;<pre><code>using System.Windows;&#xA;using System.Windows.Input;&#xA;&#xA;namespace WpfApplication2&#xA;{&#xA;    public partial class MainWindow : Window&#xA;    {&#xA;        public MainWindow()&#xA;        {&#xA;            InitializeComponent();&#xA;&#xA;            System.Windows.Controls.WebBrowser browser = new System.Windows.Controls.WebBrowser();&#xA;            // you can put any other uri here, or better make browser field and navigate to desired uri on some event&#xA;            browser.Navigate(new Uri(""http://www.blic.rs/"")); &#xA;            grdBrowserHost.Children.Add(browser);&#xA;        }&#xA;&#xA;        private void Window_PreviewKeyDown(object sender, KeyEventArgs e)&#xA;        {&#xA;            if (e.Key == Key.Escape)&#xA;            {&#xA;                this.Close();&#xA;            }&#xA;            else&#xA;            {&#xA;                this.Topmost = !this.Topmost;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In this example I have created default <code>WebBrowser</code> control for showing html. If you want some other web rendering engine you must find 3rd-part control and include it in your references. For <code>webkit</code>, you can check <a href=""https://stackoverflow.com/questions/4386422/how-to-use-webkit-browser-control-in-wpf"">How to use WebKit browser control in WPF</a></p>&#xA;",1460830,"",-1,"",2017-05-23T11:52:08,2015-09-04T06:27:26,"","",,2,,,
32447772,2,,32441034,2015-09-08T00:59:47,,3,,"<p>You didn't specify a platform, but for OS X (darwin) you just need to replace the <code>name_here.icns</code> file at the path <code>&lt;approot&gt;/Contents/Resources/name_here.icns</code> with your own <code>.icns</code> file and when you reload the app it will have a then new icon.</p>&#xA;&#xA;<p>That being said, Electron packager is cool because it be platform agnostic and it can automate this.</p>&#xA;",4152310,"",,"",,2015-09-08T00:59:47,"","",,0,,,
32516358,2,,32475982,2015-09-11T05:51:10,,3,,<p>The Problem was in my grunt-file. I tried to reproduce the issue by simply downloading all dependencies manually at their vendors websites and placed them in the corresponding script-folder of my project - suddenly it worked. </p>&#xA;&#xA;<p>I switched to gulp now and it still works. No idea what i was doing wrong with grunt though...</p>&#xA;,1776367,"",,"",,2015-09-11T05:51:10,"","",,3,,,
32549027,2,,32532911,2015-09-13T11:07:25,,4,,"<ul>&#xA;<li>Be aware of the differences between Phantom versions. </li>&#xA;</ul>&#xA;&#xA;<p>Phantom 1.9.x (which Pageres is using) is a browser engine from quite a few years ago (Chrome 13 is the closest equivalent) and will not render many HTML5 features.</p>&#xA;&#xA;<p>Phantom 2.x is a much more modern webkit engine. But because of: a) because they have not produced a ready-made linux binary; b) some small API changes, projects like CasperJS and Pageres are holding back on supporting it. According a comment in  <a href=""https://github.com/sindresorhus/pageres/issues/77"" rel=""nofollow"">https://github.com/sindresorhus/pageres/issues/77</a>  if you make your own binary, and symlink to it, it works.</p>&#xA;&#xA;<p>Also be aware that SlimerJS is an alternative to PhantomJS, based on Firefox rather than WebKit. There is no similar project based on Blink (to get screenshots how a modern Chrome would render them), but there is TrifleJS for IE. (However the Pageres pages say it is not the goal of the project to support other engines.)</p>&#xA;&#xA;<ul>&#xA;<li>Wait for DOM elements to appear, rather than using a delay.</li>&#xA;</ul>&#xA;&#xA;<p>Ajax calls, delayed loading, etc. make things very hard to predict. So, enter a polling loop, and don't take your screenshot until the DOM element you want in your screenshot is now visible. CasperJS has <code>waitForSelector()</code> for this case. PhantomJS has the slightly lower-level <code>waitFor()</code>.</p>&#xA;&#xA;<p>I think pageres would need a bit of hacking to add this functionality.</p>&#xA;",841830,"",841830,"",2015-09-13T21:07:33,2015-09-13T21:07:33,"","",,1,,,
32550436,2,,32539000,2015-09-13T14:01:40,,4,,"<p>To build an electron app is quite easy. If you just want to run that app just on your machine you don't need to pack the files. If you want send that app to your friends you need to pack them:&#xA;<a href=""http://electron.atom.io/docs/v0.32.0/tutorial/application-distribution/"" rel=""nofollow"">http://electron.atom.io/docs/v0.32.0/tutorial/application-distribution/</a></p>&#xA;&#xA;<p>To create such an app I would recomend yeoman (<a href=""http://yeoman.io/"" rel=""nofollow"">http://yeoman.io/</a>). </p>&#xA;&#xA;<ol>&#xA;<li>Install node.js (<a href=""https://docs.npmjs.com/getting-started/installing-node"" rel=""nofollow"">https://docs.npmjs.com/getting-started/installing-node</a>), because it is neede to use npm</li>&#xA;<li>Install yeaoman via npm: <a href=""http://yeoman.io/"" rel=""nofollow"">http://yeoman.io/</a></li>&#xA;<li>Install the electron boilerplate via npm: <a href=""https://github.com/sindresorhus/generator-electron"" rel=""nofollow"">https://github.com/sindresorhus/generator-electron</a></li>&#xA;<li>Make a folder for your app</li>&#xA;<li>Use the terminal and go to the folder app. Type ""yo"" and choose the electron generator. The whole project is installed by yeoman</li>&#xA;<li><p>After yeoman is finished. Open the file index.js and seek after a line with</p>&#xA;&#xA;<p>win.loadUrl(<code>file://${__dirname}/index.html</code>);</p></li>&#xA;<li><p>Change the url to your website.</p></li>&#xA;</ol>&#xA;&#xA;<p>Now when you open the app the url should be loaded. I know there are better ways, but I think this should be the easiest way, when you don't have a lot experience with programming.</p>&#xA;",5291427,"",,"",,2015-09-13T14:01:40,"","",,2,,,
32415283,2,,32406397,2015-09-05T16:27:37,,6,,"<p>For pure JS (i.e. not native) modules you need the following:</p>&#xA;&#xA;<ol>&#xA;<li>Have the module listed in your <code>package.json</code> dependencies</li>&#xA;<li>Let electron know where to find the module (e.g. <code>export NODE_PATH=/PATH/TO/node_module</code>)</li>&#xA;</ol>&#xA;&#xA;<p>The first requirement is obvious and the second has its roots in <a href=""https://github.com/atom/electron/issues/1390"" rel=""noreferrer"">this issue</a>.</p>&#xA;&#xA;<p>For native node modules (such as <code>sqlite3</code>) which use C++ bindings, you need to build them against electron headers to work. According to <a href=""https://github.com/atom/electron/blob/master/docs/tutorial/using-native-node-modules.md"" rel=""noreferrer"">electron docs</a>, the easiest way to do that would be:</p>&#xA;&#xA;<pre><code>npm install --save-dev electron-rebuild&#xA;&#xA;# Every time you run npm install, run this&#xA;./node_modules/.bin/electron-rebuild&#xA;</code></pre>&#xA;",2295964,"",,"",,2015-09-05T16:27:37,"","",,2,,,
32425073,2,,32423097,2015-09-06T15:18:56,,7,,"<p>Finally I found a working solution to this problem, based on article provided by @Josh, and other blog posts and issue discussions. Below I wrote all steps I have taken in order to solve this problem. The <strong>final solution</strong> is posted on the <strong>bottom of this answer</strong></p>&#xA;&#xA;<p>I followed electron tutorial available in <a href=""https://github.com/atom/electron/blob/master/docs/tutorial/using-native-node-modules.md"" rel=""nofollow noreferrer"">electron repo</a>.</p>&#xA;&#xA;<p><strong>The Easy Way</strong></p>&#xA;&#xA;<p>I've installed <code>electron-rebuild</code> node package and run <code>./node_modules/.bin/electron-rebuild</code> which gave me the following error:</p>&#xA;&#xA;<pre><code>node-pre-gyp ERR! install error &#xA;node-pre-gyp ERR! stack Error: Unsupported target version: 0.31.2&#xA;node-pre-gyp ERR! command ""node"" ""/my/project/dir/node_modules/sqlite3/node_modules/.bin/node-pre-gyp"" ""install"" ""--fallback-to-build""&#xA;node-pre-gyp ERR! not ok&#xA;&#xA;npm ERR! Failed at the sqlite3@3.0.10 install script 'node-pre-gyp install --fallback-to-build'.&#xA;npm ERR! This is most likely a problem with the sqlite3 package,&#xA;npm ERR! not with npm itself.&#xA;npm ERR! Tell the author that this fails on your system:&#xA;npm ERR!     node-pre-gyp install --fallback-to-build&#xA;</code></pre>&#xA;&#xA;<p><strong>The node-gyp Way</strong></p>&#xA;&#xA;<p>I've installed node-gyp module globally and entered <code>./node_modules/sqlite3</code> dir. Then I tried to run the following command:</p>&#xA;&#xA;<pre><code>node-gyp rebuild --target=0.31.2 --arch=x64 --dist-url=https://atom.io/download/atom-shell&#xA;</code></pre>&#xA;&#xA;<p>and got the following error:</p>&#xA;&#xA;<pre><code>gyp: Undefined variable module_name in binding.gyp while trying to load binding.gyp&#xA;</code></pre>&#xA;&#xA;<p><strong>The npm Way</strong></p>&#xA;&#xA;<p>This resulted in the same results as The Easy Way.</p>&#xA;&#xA;<p><strong>The sqlite3 forks</strong></p>&#xA;&#xA;<p>Finally I tried to download few of the <a href=""https://github.com/mapbox/node-sqlite3/network"" rel=""nofollow noreferrer"">sqlite3 forks</a>. Unfortunately results were the same.</p>&#xA;&#xA;<p><strong>Final attempt - The solution</strong></p>&#xA;&#xA;<p>The blog post provided by @Josh was forbidden for me, but I found <a href=""http://webcache.googleusercontent.com/search?q=cache:6AMZ-aUXrAYJ:verysimple.com/2015/05/30/using-node_sqlite3-with-electron/%20&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=pl&amp;client=ubuntu"" rel=""nofollow noreferrer"">google cached</a> version of it. I also followed the discussion of the <a href=""https://github.com/atom/electron/issues/1182"" rel=""nofollow noreferrer"">electron issue</a>.</p>&#xA;&#xA;<p>Steps presented below should get you a working sqlite3 package.</p>&#xA;&#xA;<ul>&#xA;<li>Change version of electron-prebuilt in your package.json <code>""electron-prebuilt"": ""0.29.1""</code></li>&#xA;<li>Reinstall <code>electron-prebuilt</code></li>&#xA;<li>Change directory into <code>./node_modules/sqlite3</code></li>&#xA;<li>Run prepublish scripts <code>npm run prepublish</code></li>&#xA;<li><p>Configure node-gyp module_name and module_path</p>&#xA;&#xA;<pre><code>node-gyp configure --module_name=node_sqlite3 --module_path=../lib/binding/node-v44-linux-x64&#xA;</code></pre></li>&#xA;<li><p>Rebuild package</p>&#xA;&#xA;<pre><code>node-gyp rebuild --target=0.29.1 --arch=x64 --target_platform=linux --dist-url=https://atom.io/download/atom-shell --module_name=node_sqlite3 --module_path=../lib/binding/node-v44-linux-x64&#xA;</code></pre></li>&#xA;</ul>&#xA;&#xA;<p>I tried to compile using version 0.31.2 of electron-prebuilt package, but it failed for some reason.</p>&#xA;&#xA;<p><strong>If you are using mac replace <code>linux</code> with <code>darwin</code>.</strong></p>&#xA;&#xA;<p><strong>If your os architecture is 32 bit replace <code>x64</code> with <code>ia32</code></strong> </p>&#xA;",820144,"",1427161,"",2018-05-05T05:02:48,2018-05-05T05:02:48,"","",,9,,,
32429164,2,,32426208,2015-09-06T23:11:23,,9,,"<p>Here is what I finally did.</p>&#xA;&#xA;<p>In <code>package.json</code> declare a <code>node-main</code> property like that:</p>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>{&#xA;  ""main"": ""index.html"",&#xA;  ""node-main"": ""main.js""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then in your <code>main.js</code> use <code>require('child_process').fork</code>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>'use strict';&#xA;&#xA;var fork = require('child_process').fork,&#xA;    childProcess = fork('childProcess.js');&#xA;&#xA;exports.childProcess = childProcess;&#xA;</code></pre>&#xA;&#xA;<p>In <code>childProcess.js</code> communicate using <code>process.on('message', ...)</code> and <code>process.send(...)</code>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>process.on('message', function (param) {&#xA;    childProcessing(param, function (err, result) {&#xA;        if (err) {&#xA;            console.error(err.stack);&#xA;        } else {&#xA;            process.send(result);&#xA;        }&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And finaly in <code>index.html</code>, use <code>child_process.on('message', ...)</code> and <code>child_process.send(...)</code>:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>    &lt;script&gt;&#xA;        var childProcess = process.mainModule.exports.childProcess;&#xA;        childProcess.on('message', function (result) {&#xA;            console.log(result);&#xA;        });&#xA;        childProcess.send('my child param');&#xA;    &lt;/script&gt;&#xA;</code></pre>&#xA;",535203,"",,"",,2015-09-06T23:11:23,"","",,5,,,
32427579,2,,32402327,2015-09-06T19:43:41,,83,,"<p>I came up with this, after checking the solution from the previous answer.</p>&#xA;&#xA;<pre><code>mainWindow.webContents.on('new-window', function(e, url) {&#xA;  e.preventDefault();&#xA;  require('electron').shell.openExternal(url);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>According to the <a href=""https://github.com/atom/electron/blob/master/docs/api/web-contents.md#event-new-window"" rel=""noreferrer"">electron spec</a>, <code>new-window</code> is fired when external links are clicked. </p>&#xA;&#xA;<p><em>NOTE: Requires that you use <code>target=""_blank""</code> on your anchor tags.</em></p>&#xA;",4086592,"",293280,"",2018-09-04T13:56:23,2018-09-04T13:56:23,"","",,7,,,
56850445,2,,55047209,2019-07-02T10:29:33,,0,,"<p>At the end, the solutions could be, either run the build script directly in a Windows environment, or install Wine under Linux (where Jenkins was 'living'). The idea from @Kim Gentes helped me thought, specially to organized the build script in a better and more readable way.</p>&#xA;",4609498,"",,"",,2019-07-02T10:29:33,"","",,0,,,
56853061,2,,56844055,2019-07-02T12:59:36,,2,,"<p>i found the solution ,the disable site isolation trial should be toggled on :</p>&#xA;&#xA;<blockquote>&#xA;  <p>app.commandLine.appendSwitch('disable-site-isolation-trials')</p>&#xA;</blockquote>&#xA;",4529452,"",,"",,2019-07-02T12:59:36,"","",,0,,,
56864840,2,,56784670,2019-07-03T07:15:23,,2,,"<p>Just add <strong>dir</strong> as target in your package.json</p>&#xA;&#xA;<pre><code>""build"": {&#xA;    ""appId"": ""app.id"",&#xA;    ""mac"": {&#xA;        ""category"": ""your.app.category.type"",&#xA;        ""target"": ""dir""&#xA;           }&#xA; }&#xA;</code></pre>&#xA;",10203366,"",,"",,2019-07-03T07:15:23,"","",,0,,,
56884437,2,,56866935,2019-07-04T09:08:39,,0,,"<p>I was able to solve the issue by dynamic bundling of the plugins using <strong>browserify</strong>. I cannot share the entire code, but I will share the method I used.</p>&#xA;&#xA;<ul>&#xA;<li>First of all I included browserify into the dependency so that electron will include it in node_modules folder.</li>&#xA;<li>Then I set asar as false while packaging so that we can write into the app js file after bundling.</li>&#xA;<li>Each time the app starts it creates a js plugin loading script like:</li>&#xA;</ul>&#xA;&#xA;<pre><code>const imports = []&#xA;const pluginUses = []&#xA;&#xA;this.enabled.forEach((plugin, i) =&gt; {&#xA;&#xA;    imports.push(`const plugin${i} = require(""./modules/${plugin.name}"");`)&#xA;    pluginUses.push(`Vue.use(plugin${i});`)&#xA;&#xA;})&#xA;&#xA;return `&#xA;    ${imports.join('\n')}&#xA;&#xA;    window.BootstrapPlugin = {&#xA;        install(Vue, opts) {&#xA;&#xA;            ${pluginUses.join('\n')}&#xA;        }&#xA;    }&#xA;`&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li>each plugin are saved into plugins/modules folder. The dependencies are also installed into the folder automatically while installing.</li>&#xA;<li>The <code>this.enabled</code> is a getter that fetch all enabled plugins. <code>plugin.name</code> gets the package name of the plugin.</li>&#xA;<li>Once this script is created the program will write it into <strong>plugins/index.js</strong> using <strong>fs</strong>.</li>&#xA;<li>I have a bundle function which is called on app launch</li>&#xA;</ul>&#xA;&#xA;<pre><code>const browserify = require('browserify')&#xA;const fs = require('fs')&#xA;const path = require('path')&#xA;&#xA;// ...&#xA;function bundle() {&#xA;    const b = browserify({&#xA;        entries: [path.join(app.getAppPath(), 'plugins/index.js')],&#xA;        paths: [path.join(app.getAppPath(), 'plugins/modules'), path.join(app.getAppPath(), 'node_modules')]&#xA;    })&#xA;&#xA;    const stream = fs.createWriteStream(path.join(app.getAppPath(), 'dist/packages.js'))&#xA;&#xA;    b.bundle().pipe(stream)&#xA;}&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li><p>Now I added the script <strong>dist/packages.js</strong> into the html file before the main js file (in my case dist/app.js).</p></li>&#xA;<li><p>Now I have a plugin <strong>BootstrapPlugin</strong> available globally that installs all the other plugins</p></li>&#xA;<li><p>All I have to do now is to use this plugin in the main.js file (dist/app.js)</p></li>&#xA;</ul>&#xA;&#xA;<pre><code>Vue.use(window.BootstrapPlugin)&#xA;&#xA;const app = new Vue({...})&#xA;</code></pre>&#xA;&#xA;<p>Hope it helps someone :-)</p>&#xA;",5105045,"",5105045,"",2019-07-04T09:40:35,2019-07-04T09:40:35,"","",,0,,,
56913361,2,,56752532,2019-07-06T10:46:24,,0,,"<p>You will need a version of the Electron application built for your GNU/Linux distribution.  But if you cannot get that, something built for an older version of another distribution (such as Debian jessie or Red Hat Enterprise Linux 7) might help.  Unfortunately, you do not say which distribution and version you are using, so it is difficult to make proper recommendations.</p>&#xA;&#xA;<p>Another alternative is building Electron yourself from source, on your system, but given the size of Electron's dependencies, that can be quite an effort.</p>&#xA;",8316315,"",,"",,2019-07-06T10:46:24,"","",,0,,,
56915856,2,,56907635,2019-07-06T16:26:02,,3,,"<blockquote>&#xA;  <p>App Bundle has some unnecessary node&#xA;  modules(ex:electron-packager,electron-builder),why do I need them&#xA;  after its bundled, how to get rid of them?</p>&#xA;</blockquote>&#xA;&#xA;<p>Everything listed in ""bundledDependencies"" will be included in the app bundle.</p>&#xA;&#xA;<pre><code>  ""bundledDependencies"": [&#xA;    ""archiver"",&#xA;    ""child_process"",&#xA;    ""fs"",&#xA;    ""node-wget"",&#xA;    ""os"",&#xA;    ""path"",&#xA;    ""ping"",&#xA;    ""regedit"",&#xA;    ""request"",&#xA;    ""start"",&#xA;    ""xml2js"",&#xA;    ""util"",&#xA;    ""replace"",&#xA;    ""process"",&#xA;    ""fs"",&#xA;    ""console"",&#xA;    ""electron"",&#xA;    ""electron-builder"",&#xA;    ""electron-packager""&#xA;  ],&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code>  ""builderForWindows"": ""electron-packager --out winx64 --overwrite --platform&#xA; win32 --appname clientsettings . --executable-name abc --no-prune"",&#xA;</code></pre>&#xA;&#xA;<p>Specifying ""no prune"" – see this answer: <a href=""https://stackoverflow.com/a/44156640/840992"">https://stackoverflow.com/a/44156640/840992</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Be careful not to include node_modules you don't want into your final app. If you put them in the devDependencies section of&#xA;  package.json, by default none of the modules related to those&#xA;  dependencies will be copied in the app bundles. (This behavior can be&#xA;  turned off with the --no-prune flag.)</p>&#xA;</blockquote>&#xA;&#xA;<p>From electron-packager API page about --prune flag</p>&#xA;&#xA;<blockquote>&#xA;  <p>Runs the package manager command to remove all of the packages specified in the devDependencies section of package.json from the&#xA;  outputted Electron app.</p>&#xA;</blockquote>&#xA;",840992,"",,"",,2019-07-06T16:26:02,"","",,0,,,
56922700,2,,44477834,2019-07-07T13:43:55,,0,,"<p>I'll just post answer here since I managed to work this out long time ago. For some reason, script just ""stops"" whenever it gets to section where new window instance is created.</p>&#xA;&#xA;<p>The solution for this was to use setTimeout() with 0 delay, and put rest of the code under new function inside it. It may be something to do with race conditions, but I don't know about it. I found this solution through some random GitHub Issues-section comments.</p>&#xA;&#xA;<p>Another thing: this issue seems to happen only when window is created when app is started, but not when, for example, you call function later on through UI button when app is already running.</p>&#xA;&#xA;<pre><code>// Works&#xA;setTimeout(function () {&#xA;        var newWindow = new BrowserWindow({options});&#xA;}, 0);&#xA;&#xA;// Doesn't work&#xA;var newWindow = new BrowserWindow({options});&#xA;</code></pre>&#xA;",8142604,"",,"",,2019-07-07T13:43:55,"","",,0,,,
56925404,2,,56638162,2019-07-07T19:22:54,,0,,"<p><a href=""https://github.com/electron/electron/blob/6-0-x/atom/common/keyboard_util.cc"" rel=""nofollow noreferrer"">This file</a> might give some answers.</p>&#xA;",2978652,"",,"",,2019-07-07T19:22:54,"","",,0,,,
56931851,2,,56801737,2019-07-08T09:21:37,,0,,"<p>so after searching for a while I came to the result:</p>&#xA;&#xA;<ul>&#xA;<li>Jira will create a test of type generic for each test case you have in your result, if Jira finds a generic test for the test case, it will add an execution result to the test</li>&#xA;<li>if you want to have the e2e test results, you could write a plugin to show the results of manually executed cucumber tests with automatically executed results</li>&#xA;</ul>&#xA;",6546461,"",,"",,2019-07-08T09:21:37,"","",,0,,,
56938089,2,,56937104,2019-07-08T15:22:34,,0,,"<p>The JavaScript package you are loading is using a module system, likely commonJS. The webview is just a normal webpage so you need to bring your own module support.</p>&#xA;&#xA;<p>For this, you could use a bundler such as <a href=""https://webpack.js.org"" rel=""nofollow noreferrer"">webpack</a> or include a module loader such as <a href=""https://requirejs.org"" rel=""nofollow noreferrer"">RequireJs</a> directly.</p>&#xA;",306149,"",,"",,2019-07-08T15:22:34,"","",,0,,,
56941065,2,,56890437,2019-07-08T18:59:41,,0,,"<p>Finally I've figured out how to achieve the result and it's working perfectly</p>&#xA;&#xA;<p>html code</p>&#xA;&#xA;<pre><code>  &lt;table id=""datatable"" class=""table table-striped ""&gt;&#xA;                            &lt;thead&gt;&#xA;                                &lt;tr&gt;&#xA;                                    &lt;th&gt;Room Number&lt;/th&gt;&#xA;                                    &lt;th&gt;Name&lt;/th&gt;&#xA;                                    &lt;th&gt;Reg Number&lt;/th&gt;&#xA;                                    &lt;th&gt;Program&lt;/th&gt;&#xA;                                    &lt;!-- &lt;th&gt;Img&lt;/th&gt; --&gt;&#xA;                                &lt;/tr&gt;&#xA;                            &lt;/thead&gt;&#xA;                            &lt;tbody id=""tbdy""&gt;&#xA;&#xA;&#xA;                            &lt;/tbody&gt;&#xA;                            &lt;!-- &#xA;                            &lt;tfoot&gt;&#xA;                                &lt;tr&gt;&#xA;                                    &lt;th&gt;Name&lt;/th&gt;&#xA;                                    &lt;th&gt;Position&lt;/th&gt;&#xA;                                    &lt;th&gt;Office&lt;/th&gt;&#xA;                                    &lt;th&gt;Age&lt;/th&gt;&#xA;                                    &lt;th class=""disabled-sorting text-right""&gt;Actions&lt;/th&gt;&#xA;                                &lt;/tr&gt;&#xA;                            &lt;/tfoot&gt; --&gt;&#xA;                        &lt;/table&gt;&#xA;</code></pre>&#xA;&#xA;<p>script</p>&#xA;&#xA;<pre><code> &lt;!--  DataTables.net Plugin, full documentation here: https://datatables.net/    --&gt;&#xA;        &lt;script src=""assets/js/plugins/jquery.dataTables.min.js""&gt;&lt;/script&gt;&#xA; &lt;script&gt;&#xA;            $(document).ready(function() {&#xA;                $('#datatable').DataTable({&#xA;                    ""pagingType"": ""full_numbers"",&#xA;                    ""lengthMenu"": [&#xA;                        [5, 25, 50, -1],&#xA;                        [5, 25, 50, ""All""]&#xA;                    ],&#xA;                    responsive: false,&#xA;                    language: {&#xA;                        search: ""_INPUT_"",&#xA;                        searchPlaceholder: ""Search records"",&#xA;                    }&#xA;&#xA;                });&#xA;&#xA;                var table = $('#datatable').DataTable();&#xA;&#xA;                // Edit record&#xA;                table.on('click', '.edit', function() {&#xA;                    $tr = $(this).closest('tr');&#xA;&#xA;                    var data = table.row($tr).data();&#xA;                    alert('You press on Row: ' + data[0] + ' ' + data[1] + ' ' + data[2] + '\'s row.');&#xA;                });&#xA;&#xA;                // Delete a record&#xA;                table.on('click', '.remove', function(e) {&#xA;                    $tr = $(this).closest('tr');&#xA;                    table.row($tr).remove().draw();&#xA;                    e.preventDefault();&#xA;                });&#xA;&#xA;                //Like record&#xA;                table.on('click', '.like', function() {&#xA;                    alert('You clicked on Like button');&#xA;                });&#xA;            });&#xA;        &lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>renderer script</p>&#xA;&#xA;<pre><code>var mysql = require('mysql')&#xA;var con = mysql.createConnection({&#xA;    host: ""localhost"",&#xA;    user: ""root"",&#xA;    password: """",&#xA;    database: ""mydb""&#xA;});&#xA;con.connect(function(err) {&#xA;    if (err) throw err;&#xA;    con.query('SELECT * FROM customers', function(err, data) { &#xA;        if (err) throw err;&#xA;        console.log(data.length)&#xA;        var tbdy = document.getElementById('tbdy');&#xA;        for (var i = 0; i &lt; data.length; i++) {&#xA;            var tr = document.createElement('tr');&#xA;            var td = document.createElement('td');&#xA;            var td2 = document.createElement('td');&#xA;            var td3 = document.createElement('td');&#xA;            var td4 = document.createElement('td');&#xA;            td.appendChild(document.createTextNode(data[i].id));&#xA;            td2.appendChild(document.createTextNode(data[i].name));&#xA;            td3.appendChild(document.createTextNode(data[i].address));&#xA;            td4.appendChild(document.createTextNode(data[i].img));&#xA;            tr.appendChild(td);&#xA;            tr.appendChild(td2);&#xA;            tr.appendChild(td3);&#xA;            tr.appendChild(td4);&#xA;            tbdy.appendChild(tr);&#xA;        }&#xA;    });&#xA;});&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;</code></pre>&#xA;",11084151,"",11084151,"",2019-07-13T08:46:15,2019-07-13T08:46:15,"","",,0,,,
56951274,2,,54393089,2019-07-09T11:11:32,,0,,"<p>This <code>.babelrc</code> worked for me:</p>&#xA;&#xA;<pre><code>{&#xA;  ""presets"": [&#xA;    ""@babel/preset-react"",&#xA;    [ ""@babel/preset-env"", {&#xA;      ""targets"": {&#xA;        ""browsers"": [ ""last 1 version"" ]&#xA;      }&#xA;    } ]&#xA;  ],&#xA;  ""plugins"": [&#xA;    ""@babel/plugin-proposal-object-rest-spread"",&#xA;    [""@babel/plugin-proposal-decorators"", { ""legacy"": true }],&#xA;    [""@babel/plugin-proposal-class-properties"", { ""loose"" : true }]&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Mind how <code>decorators</code> plugin comes before <code>class-properties</code>.</p>&#xA;&#xA;<p>Somehow, it didn't work for me in non-<code>legacy</code> mode. <code>loose</code> option is required if <code>decorators</code> runs in <code>legacy</code> mode, according to official docs: <a href=""https://babeljs.io/docs/en/next/babel-plugin-proposal-decorators.html"" rel=""nofollow noreferrer"">https://babeljs.io/docs/en/next/babel-plugin-proposal-decorators.html</a></p>&#xA;&#xA;<p>It also states:</p>&#xA;&#xA;<blockquote>&#xA;  <p>In Babel 7, <a href=""https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy"" rel=""nofollow noreferrer"">transform-decorators-legacy</a> will be the default plugin in Stage-0.&#xA;  (Source: <a href=""https://babeljs.io/docs/en/babel-plugin-transform-decorators.html"" rel=""nofollow noreferrer"">https://babeljs.io/docs/en/babel-plugin-transform-decorators.html</a>)</p>&#xA;</blockquote>&#xA;&#xA;<p>More info:&#xA;<a href=""https://stackoverflow.com/questions/51857423/babel-7-decorators-transform-doesnt-work-with-babel-loader"">Babel 7 - Decorators transform doesn&#39;t work with babel-loader</a>&#xA;<a href=""https://stackoverflow.com/questions/33635511/simple-es7-decorator-with-babel"">Simple ES7 decorator with babel</a></p>&#xA;",2875219,"",,"",,2019-07-09T11:11:32,"","",,0,,,
56961213,2,,56869106,2019-07-09T22:26:20,,1,,"<p>This is because of the official version of FFI does not support electron 5. I asked on Github and got answered:&#xA;<a href=""https://github.com/electron/electron-rebuild/issues/308"" rel=""nofollow noreferrer"">https://github.com/electron/electron-rebuild/issues/308</a></p>&#xA;&#xA;<p>I used an old version of electron and succeed.</p>&#xA;",4256294,"",,"",,2019-07-09T22:26:20,"","",,0,,,
56962175,2,,56962142,2019-07-10T01:05:19,,1,,"<p>You dont need to call fetch method anymore since you are importing your json data from the file. What you can do is, since you are already importing the json data, then when the component is mounted just assign the json data to the user array: </p>&#xA;&#xA;<pre><code>data() {&#xA;    return {&#xA;      users: [],&#xA;    };&#xA;  },&#xA;  mounted() {&#xA;    this.users = JSON.parse(userDataJson)&#xA;  },&#xA;....&#xA;}&#xA;</code></pre>&#xA;",4898843,"",,"",,2019-07-10T01:05:19,"","",,0,,,
56963610,2,,56915191,2019-07-10T04:55:43,,0,,<p>These problems are due to corrupt node modules. some forums suggest answer such as mark fs as empty in webpack configurations but that is not a good solution as by making fs as false we are forcefully saying webpack not to use fs which our porject may require in future. </p>&#xA;&#xA;<p>For me this problem was solved by deleting package-lock.json and node module and again installing fresh node modules in open network. </p>&#xA;,11365957,"",,"",,2019-07-10T04:55:43,"","",,0,,,
56966615,2,,56966497,2019-07-10T08:34:47,,1,,"<p>Never mind, I was able to achieve this in the following way:</p>&#xA;&#xA;<pre><code>{&#xA;    ""targets"": [{&#xA;            ""conditions"":[&#xA;            [""OS=='win'"", {&#xA;                ""copies"":[&#xA;                    { &#xA;                        'destination': './build/Release',&#xA;                        'files':[&#xA;                            '../../cl-fc-client-thirdparty/bugtrap/BugTrapU-x64.dll',&#xA;                            '../build/bin/msvc/Release64/cloudDrive2Lib.dll',&#xA;                            '../../cl-fc-client-thirdparty/openssl/1.0.2j/lib/x86_64-win32/ssleay32MD.dll',&#xA;                            '../../cl-fc-client-thirdparty/poco/1.7.5/bin64/PocoZip64.dll',&#xA;                             '../../cl-fc-client-thirdparty/poco/1.7.5/bin64/PocoXML64.dll',&#xA;                            '../../cl-fc-client-thirdparty/poco/1.7.5/bin64/PocoUtil64.dll',&#xA;                            '../../cl-fc-client-thirdparty/poco/1.7.5/bin64/PocoNetSSL64.dll',&#xA;                            '../../cl-fc-client-thirdparty/poco/1.7.5/bin64/PocoNet64.dll',&#xA;                            '../../cl-fc-client-thirdparty/poco/1.7.5/bin64/PocoJSON64.dll',&#xA;                            '../../cl-fc-client-thirdparty/poco/1.7.5/bin64/PocoFoundation64.dll',&#xA;                            '../../cl-fc-client-thirdparty/poco/1.7.5/bin64/PocoCrypto64.dll',&#xA;                            '../../cl-fc-client-thirdparty/openssl/1.0.2j/lib/x86_64-win32/libeay32MD.dll'&#xA;                        ]&#xA;                    },&#xA;                    {                        &#xA;                        'destination': './libs',&#xA;                        'files':['../build/bin/msvc/Release64/cloudDrive2Lib.lib']&#xA;                    }&#xA;                ]&#xA;            }]&#xA;        ],&#xA;        ""target_name"": ""electronToCppBridge"",&#xA;        ""cflags!"": [ ""-fno-exceptions"" ],&#xA;        ""cflags_cc!"": [ ""-fno-exceptions"" ],&#xA;        ""sources"": [&#xA;            ""src/electronToCppBridge.cc"",&#xA;        ],&#xA;        'include_dirs': [&#xA;            ""&lt;!@(node -p \""require('node-addon-api').include\"")""&#xA;        ],&#xA;        'libraries': [""../libs/cloudDrive2Lib.lib""],&#xA;        'dependencies': [&#xA;            ""&lt;!(node -p \""require('node-addon-api').gyp\"")""&#xA;        ],&#xA;        'defines': [ 'NAPI_DISABLE_CPP_EXCEPTIONS' ]&#xA;    }]&#xA;}&#xA;</code></pre>&#xA;",11147356,"",,"",,2019-07-10T08:34:47,"","",,0,,,
56970859,2,,56934579,2019-07-10T12:36:21,,1,,"<p>Surely you can open a video player by using node's child_process spawn, but you need to somehow find what is the default video player and also take care of different operating systems.</p>&#xA;&#xA;<p>On the other hand electron's way is much better. Using <a href=""https://electronjs.org/docs/api/shell#shellopenitemfullpath"" rel=""nofollow noreferrer"">shell.openItem</a> electron will open the given file in the desktop's default manner. Also you could use <a href=""https://electronjs.org/docs/api/shell#shellopenexternalurl-options"" rel=""nofollow noreferrer"">shell.openExternal</a> to have the same experience regarding what your file path would be (url / filesystem path)</p>&#xA;",4906730,"",,"",,2019-07-10T12:36:21,"","",,0,,,
56973734,2,,56867149,2019-07-10T15:10:21,,0,,"<p>Two mistakes that i made,</p>&#xA;&#xA;<ol>&#xA;<li>I figured out, i was excluding assets folder (specifically icons) in files section of electron-builder configuration. So including significant files made it appeared.</li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/IuOnZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IuOnZ.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<ol start=""2"">&#xA;<li>updated the base uri for images.  </li>&#xA;</ol>&#xA;&#xA;<pre><code>&lt;base href=""./""&gt;&#xA;</code></pre>&#xA;",1740254,"",,"",,2019-07-10T15:10:21,"","",,0,,,
57001049,2,,56983184,2019-07-12T06:06:50,,0,,"<p>I spent one MD on this thing and I found out, that the middle row has <code>flex-grow: 1</code>. It means it'll take all available space it can. It looks like there is some issue with that in Chromium because it forces top <code>ion-row</code> and bottom <code>ion-row</code> to shrink to be shorter than actual height of its content.</p>&#xA;&#xA;<p><strong>Solution is simple</strong>, just add <code>flex-shrink: 0</code> to both top and bottom rows.</p>&#xA;",3359635,"",,"",,2019-07-12T06:06:50,"","",,0,,,
57004561,2,,56990565,2019-07-12T09:53:35,,0,,"<p>I ended up wrapping the code that was executed in an extra method and also binding that method to an <code>ipcMain.on(""should-shutdown"",..</code> event. This made sense anyway, since other renderers shouls also be able to request a smooth shutdown.</p>&#xA;&#xA;<p>In the Spectron test I then used </p>&#xA;&#xA;<pre><code> const { ipcRenderer } = app.electron;&#xA; ipcRenderer.send('smooth-shutdown');&#xA;</code></pre>&#xA;&#xA;<p>instead of <code>app.client.close()</code> to initiate the shutdown sequence.</p>&#xA;",1417633,"",,"",,2019-07-12T09:53:35,"","",,0,,,
57010771,2,,56364764,2019-07-12T16:25:20,,0,,"<p>After asking on the Electron Slack chatroom, I was informed that I can use the fs module from Node to reference the file's location and use electron-builder's extraResources option to have that file be moved outside the EXE after compilation.</p>&#xA;&#xA;<p>For example, if you wanted to reference config.json, you would reference it like so in your main.js file:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { readFileSync } = require('fs');&#xA;&#xA;var configFile = JSON.parse(readFileSync('./config.json'));&#xA;</code></pre>&#xA;&#xA;<p>Then, in your package.json file, you would use extraResources to tell electron-builder what file to pull from where:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>""build"": {&#xA;    ""extraResources"": [&#xA;        {&#xA;            ""filter"": [""./config.json""]&#xA;        }&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And of course, with <code>filter</code> being an array, you can continue to specify files that you'd like to remain external just by deliminating them with a comma!</p>&#xA;&#xA;<p>I hope this helps whoever else may have been having issues with it!</p>&#xA;",986444,"",,"",,2019-07-12T16:25:20,"","",,0,,,
57025808,2,,57015933,2019-07-14T08:38:13,,0,,"<p>I don't have enough points to comment so forgive me for distorting my comment into an answer.</p>&#xA;&#xA;<p>SQLite can support limited concurrency in various configurations such as running SQLite in WAL mode and using THREADSAFE=1 or the equivalent config option SQLITE_CONFIG_SERIALIZED. This configuration allows for multiple concurrent readers but only one writer at a time. Writes are serialized with blocking so this might not be desirable in your situation if you need simultaneous writes.</p>&#xA;&#xA;<p>There are client-server databases that you can use locally such as MySQL, Faircom, SQL Server, Postgres and many others.</p>&#xA;",11741591,"",,"",,2019-07-14T08:38:13,"","",,0,,,
56860191,2,,56860071,2019-07-02T21:22:36,,0,,"<h2>Answer</h2>&#xA;&#xA;<p>Use a number input box (<code>&lt;input type='number'&gt;</code>) with </p>&#xA;&#xA;<ul>&#xA;<li><code>min</code>: The minimum of the range</li>&#xA;<li><code>max</code>: The maximum of the range</li>&#xA;<li><code>value</code>: value to start with.</li>&#xA;<li><code>required</code>: can't be empty</li>&#xA;</ul>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code>&lt;input id=""temp"" type=""number"" value=""1"" min=""0"" max=""100"" required&gt;&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>You can then use CSS selectors (<code>input:valid</code> and <code>input:invalid</code>) to adjust the input box itself or to adjust a sibling element like a <code>span</code>:</p>&#xA;&#xA;<hr>&#xA;&#xA;<h2>Examples:</h2>&#xA;&#xA;<p><strong>With Sibling Span</strong>:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>input:invalid + span:after {&#xD;&#xA;  content: '✖';&#xD;&#xA;  padding-left: 5px;&#xD;&#xA;  color: red;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;input:valid + span:after {&#xD;&#xA;  content: '✓';&#xD;&#xA;  padding-left: 5px;&#xD;&#xA;  color: green;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>    &lt;label for=""temp""&gt;Temp between 0 and 100:&lt;/label&gt;&#xD;&#xA;    &lt;input id=""temp"" type=""number"" value=""1"" min=""0"" max=""100"" required&gt;&#xD;&#xA;    &lt;span&gt;&lt;/span&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>With Input Styling</strong>:</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>input {&#xD;&#xA;padding: 10px;&#xD;&#xA;font-weight: bolder;&#xD;&#xA;font-size:1.3em;&#xD;&#xA;font-family: monospace;&#xD;&#xA;border: dashed 3px black;&#xD;&#xA;width: 30%;&#xD;&#xA;text-align: center;&#xD;&#xA;}&#xD;&#xA;input:invalid {&#xD;&#xA;  background: rgba(100,0,0,.3);&#xD;&#xA;  color: black;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;input:valid {&#xD;&#xA;background: rgba(0, 200,0,.3);&#xD;&#xA;  color: black;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;label for=""temp""&gt;Temp between 0 and 100:&lt;/label&gt;&#xD;&#xA;    &lt;input id=""temp"" type=""number"" value=""1"" min=""0"" max=""100"" required&gt;&#xD;&#xA;    &lt;span&gt;&lt;/span&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",3700849,"",3700849,"",2019-07-02T21:29:23,2019-07-02T21:29:23,"","",,1,,,
56861211,2,,56856451,2019-07-02T23:36:55,,1,,"<p>Didn't see anything wrong in your implementation. I am not sure if you are writing in the <code>Socket</code> as you didn't share that piece of code in your snippet above. </p>&#xA;&#xA;<p>Try below along with your existing code, and believe me your socket will listen to you :)</p>&#xA;&#xA;<pre><code>public write(buffer: Buffer): void {&#xA;    if (this.client.destroyed) {&#xA;      return;&#xA;    }&#xA;    this.client.write(buffer);&#xA;  }&#xA;</code></pre>&#xA;",240091,"",240091,"",2019-07-02T23:49:46,2019-07-02T23:49:46,"","",,1,,,
56975719,2,,56959983,2019-07-10T17:21:41,,0,,"<p>The problem with your current approach is that object are unordered bags of properties. So it does not matter how order your columns - properties order is not guaranteed.</p>&#xA;&#xA;<p>If you need specific order you could use <code>Array</code> instead.</p>&#xA;&#xA;<p>Since you have general code to display tabular data you could do the following</p>&#xA;&#xA;<pre><code>ipcMain.on('getUserTable:all', (event) =&gt; {&#xA;  const columns = ['id','role','reference','password']&#xA;&#xA;  let getUserTable = &#xA;knex('User').select(columns).orderBy('role');&#xA;  getUserTable.then(function(tableData){&#xA;    newWin.webContents.send(""userResultSent"", {columns, tableData});&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>When creating html</p>&#xA;&#xA;<pre><code>ipc.on('userResultSent', (event, {columns, tableData}) =&gt; {&#xA;    var html = '&lt;table&gt;';&#xA;    html += '&lt;tr&gt;';&#xA;&#xA;    columns.forEach(column =&gt; {&#xA;        // if you want to capitalize names just do it here&#xA;        html += '&lt;th&gt;' + column + '&lt;/th&gt;';&#xA;    })&#xA;&#xA;    html += '&lt;/tr&gt;';&#xA;    for( var i = 0; i &lt; tableData.length; i++) {&#xA;        html += '&lt;tr&gt;';&#xA;        columns.forEach(column =&gt; {&#xA;          html += '&lt;td&gt;' + tableData[i][column] + '&lt;/td&gt;';&#xA;        })&#xA;&#xA;        html += '&lt;/tr&gt;'; &#xA;    }&#xA;    html += '&lt;/table&gt;';&#xA;    document.getElementById('db_output_container').innerHTML = html;&#xA;  })&#xA;</code></pre>&#xA;",351705,"",,"",,2019-07-10T17:21:41,"","",,2,,,
57001617,2,,57001410,2019-07-12T06:54:22,,0,,"<p>I have used the <strong>node-thermal-printer</strong> library for the thermal printing of any printer which accepts the <strong>ESC/POS command</strong></p>&#xA;&#xA;<p>It can be work both type of printers such as LAN or USB.</p>&#xA;&#xA;<p>I have used this library for the <strong>EPSON</strong> and <strong>Everycom</strong> thermal printer with the Electron and it works well.</p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/node-thermal-printer"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/node-thermal-printer</a>.</p>&#xA;&#xA;<p>I hope this can help you.</p>&#xA;",2231580,"",,"",,2019-07-12T06:54:22,"","",,3,,,
56911230,2,,56906153,2019-07-06T04:30:09,,1,,"<p>Be sure that in <code>index.html</code> the <code>head</code> includes: </p>&#xA;&#xA;<pre><code>&lt;base href=""/""&gt;&#xA;</code></pre>&#xA;&#xA;<p>See: <a href=""https://github.com/angular/angular-cli/issues/10325#issuecomment-399329033"" rel=""nofollow noreferrer"">https://github.com/angular/angular-cli/issues/10325#issuecomment-399329033</a></p>&#xA;&#xA;<p>This error also occurs when running Python servers on Windows machines where the Registry mime types are not set correctly. </p>&#xA;&#xA;<p>See: <a href=""https://github.com/pallets/flask/issues/1045#issuecomment-42202749"" rel=""nofollow noreferrer"">https://github.com/pallets/flask/issues/1045#issuecomment-42202749</a></p>&#xA;",1164465,"",1164465,"",2019-07-06T04:41:54,2019-07-06T04:41:54,"","",,4,,,
56969600,2,,56966840,2019-07-10T11:19:22,,1,,"<p>As the documentation shows, <a href=""https://electronjs.org/docs/api/ipc-renderer#ipcrendereronchannel-listener"" rel=""nofollow noreferrer""><code>ipcRenderer.on</code></a> takes a <code>event</code> as second argument which you specified correctly. You can see the documentation on the event Object <a href=""https://electronjs.org/docs/api/ipc-renderer#objet-event"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;&#xA;<p>So if you want to type it completely, assuming you have <code>Electron</code> imported already, <code>event</code> is of type <code>Electron.Event</code> : </p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>ipcRenderer.on('download-progress', function (event: Electron.Event, progressInfo: ProgressInfo) {&#xA;    document.getElementById('pbs_' + progressInfo.id).style.width = progressInfo.percent + ""%"";&#xA;    document.getElementById('pts_' + progressInfo.id).innerHTML = progressInfo.percent + ""%"";&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>For reference, here is the generic Electron.Event's type definition :</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>interface Event extends GlobalEvent {&#xA;  preventDefault: () =&gt; void;&#xA;  sender: WebContents;&#xA;  returnValue: any;&#xA;  ctrlKey?: boolean;&#xA;  metaKey?: boolean;&#xA;  shiftKey?: boolean;&#xA;  altKey?: boolean;&#xA;}&#xA;</code></pre>&#xA;",1841827,"",1841827,"",2019-07-10T11:26:39,2019-07-10T11:26:39,"","",,4,,,
56972131,2,,56971880,2019-07-10T13:47:00,,1,,"<p>Assuming that you succeeded in making <code>doWork()</code> return a Promise, you could <em>chain</em> the promises that each of these calls return:</p>&#xA;&#xA;<pre><code>let promise = Promise.resolve();&#xA;ipcRenderer.on('doWork', function (event, ...args) {&#xA;   promise = promise.then(doWork);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>If the arguments must be passed to <code>doWork</code>:</p>&#xA;&#xA;<pre><code>let promise = Promise.resolve();&#xA;ipcRenderer.on('doWork', function (event, ...args) {&#xA;   promise = promise.then(() =&gt; doWork(...args));&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Do realise however that if the rate of events is higher than what <code>doWork</code> can process, your chain will get longer and longer. If all these calls really have to be made, this is not really a problem. </p>&#xA;&#xA;<p>But in some scenario's it might be acceptable and more interesting to skip calls and just perform the ""last"" one. If that is an option, then look into one of the many ""debounce"" implementations. Alternatively, here is an idea to skip calls when a more recent request comes in:</p>&#xA;&#xA;<pre><code>let promise = Promise.resolve();&#xA;let pendingArgs = null;&#xA;ipcRenderer.on('doWork', function (event, ...args) {&#xA;    const isPending = pendingArgs !== null;&#xA;    pendingArgs = args; // doWork should be called with the latest version of args&#xA;    if (isPending) return; // There is already a pending request to doWork&#xA;    promise = promise.then(() =&gt; {&#xA;        const args = pendingArgs;&#xA;        pendingArgs = null;&#xA;        return doWork(...args);&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",5459839,"",5459839,"",2019-07-10T14:30:53,2019-07-10T14:30:53,"","",,6,,,
49804109,2,,49762251,2018-04-12T19:02:50,,0,,"<p>Found a solution. I placed my electron entry file into the root directory and changed the <code>loadURL</code> to reflect that.</p>&#xA;&#xA;<pre><code>let startUrl = process.env.ELECTRON_START_URL || url.format({&#xA;    pathname: path.join(__dirname, '/build/index.html'),&#xA;    protocol: 'file:',&#xA;    slashes: true&#xA;});&#xA;mainWindow.loadURL(startUrl);&#xA;</code></pre>&#xA;&#xA;<p>Changed my package.json to reflect this change:</p>&#xA;&#xA;<pre><code>{&#xA;  ""main"": ""./electron-entry.js"",&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then I ran </p>&#xA;&#xA;<p><code>electron-packager . --no-prune --ignore=/node_modules --ignore=/e2e --overwrite --ignore=/src</code></p>&#xA;",4385889,"",,"",,2018-04-12T19:02:50,"","",,0,,,
49810995,2,,49760019,2018-04-13T06:55:38,,1,,"<p>It looks like the problem is related with neither angular nor electon nor IPC, but with TypeScript.</p>&#xA;&#xA;<pre><code>public on(channel: string, listener: Function): void {&#xA;  this._electronService.ipcRenderer.on(channel, listener);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I have to use arrow expression <code>=&gt;</code>:</p>&#xA;&#xA;<pre><code>public on(channel: string, listener: Function): void {&#xA;  this._electronService.ipcRenderer.on(channel, (evt, args) =&gt; listener(evt, arg));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and </p>&#xA;&#xA;<pre><code>_ipc.on('resultSettings', (evt, args) =&gt; this._updateSettings(evt, args));&#xA;</code></pre>&#xA;",889562,"",,"",,2018-04-13T06:55:38,"","",,0,,,
49828577,2,,49828440,2018-04-14T06:21:54,,2,,"<p>The <code>download</code> function is part of an object exported by <code>electron-dl</code>. You need to destructure (ES6) or reference it directly (ES5) when requiring the module:</p>&#xA;&#xA;<pre><code>const { download } = require(""electron-dl"") // ES6&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>var download = require(""electron-dl"").download // ES5&#xA;</code></pre>&#xA;",1765851,"",,"",,2018-04-14T06:21:54,"","",,0,,,
49830741,2,,49830190,2018-04-14T11:07:13,,2,,"<p>I solved it using FileSaver. For anyone who is interested code here:</p>&#xA;&#xA;<pre><code>this.http.get('http://myexternalserver.com/example.pdf', {&#xA;  responseType: 'arraybuffer',&#xA;}).subscribe((data) =&gt; {&#xA;    const file = new Blob([data], {type: 'application/pdf'});&#xA;    FileSaver.saveAs(file, 'example.pdf');&#xA;};&#xA;</code></pre>&#xA;",5152674,"",,"",,2018-04-14T11:07:13,"","",,0,,,
49846847,2,,49805450,2018-04-15T21:12:40,,0,,"<p>You can use the electron and fs modules to access configuration files stored on your computer outside of the electron app. Instead of .ini files, I would suggest using .json files, they are easily parsed and managed within javascript. Here is an example to try from your rendering thread (just remove the remote to use from main thread):</p>&#xA;&#xA;<pre><code>import electron from 'electron';&#xA;import fs from 'fs';&#xA;&#xA;const data = fs.readFileSync(pathToSettingsJSON);&#xA;const json = data.toString('utf8');&#xA;console.log(`settings JSON: ${json}`);&#xA;settings = JSON.parse(json);&#xA;</code></pre>&#xA;&#xA;<p>You would then have a javascript object called settings that would contain properties from your JSON text file.</p>&#xA;",2554009,"",,"",,2018-04-15T21:12:40,"","",,0,,,
49852335,2,,49719056,2018-04-16T08:03:32,,0,,"<p>Apparently, there were 2 problems:&#xA;- that warning related to <code>goog</code> (which didn't affect the build itself)&#xA;- for some reasons <code>js/process</code> was different from <code>(js/require ""process"")</code></p>&#xA;&#xA;<p>Providing externs files and accessing process via <code>js/require</code> solved warnings and runtime problem.</p>&#xA;&#xA;<p>The version with fixed problems and latest clj and cljs libraries is here <a href=""https://github.com/Alexx-G/cljs-electron"" rel=""nofollow noreferrer"">https://github.com/Alexx-G/cljs-electron</a></p>&#xA;",3763259,"",,"",,2018-04-16T08:03:32,"","",,0,,,
49866564,2,,49826371,2018-04-16T21:32:21,,0,,"<p>I made it work by downloading eventsource.js from <a href=""https://github.com/EventSource/eventsource"" rel=""nofollow noreferrer"">this</a> JavaScript standalone implementation of the EventSource client. Then, in my main.js I added:</p>&#xA;&#xA;<pre><code>const EventSource = require(path.join(__dirname, 'eventsource.js'));&#xA;</code></pre>&#xA;&#xA;<p>As an added note, native EventSource does work within script tags in the source (HTML) of a window, but not in the Javascript (Node.js) source for a windowless app.</p>&#xA;",2475479,"",,"",,2018-04-16T21:32:21,"","",,0,,,
49888850,2,,49888753,2018-04-17T23:17:47,,5,,"<p>You should use dialogue module. Simple example for showing the file explorer will be: </p>&#xA;&#xA;<pre><code>  const {dialog} = require('electron')&#xA;  console.log(dialog.showOpenDialog({properties: ['openFile', 'openDirectory', 'multiSelections']}))&#xA;</code></pre>&#xA;&#xA;<p>Check this <a href=""https://electronjs.org/docs/api/dialog"" rel=""noreferrer"">link</a> for more information. </p>&#xA;",4684597,"",,"",,2018-04-17T23:17:47,"","",,0,,,
49894476,2,,49847593,2018-04-18T08:11:26,,1,,"<p>NW.js is Node and Chromium so yes, it should weigh more than 100mb.</p>&#xA;",2592581,"",397817,"",2018-04-18T10:03:19,2018-04-18T10:03:19,"","",,0,,,
49902142,2,,49742363,2018-04-18T14:20:00,,1,,"<p>Nightmare doesn't have support for passing extra arguments/options to <code>goto</code> function yet, nor it has the proper document about accessing window contents api provided by electron. </p>&#xA;&#xA;<p>You can track if page loaded or not by <code>dom-ready</code> event, but you cannot probably do anything about it right now.</p>&#xA;&#xA;<p>If there is a solution for this, I'll update the answer.</p>&#xA;",6161265,"",,"",,2018-04-18T14:20:00,"","",,0,,,
49904799,2,,44426180,2018-04-18T16:35:16,,0,,"<p>found the solution,&#xA;I should define jquery like this:</p>&#xA;&#xA;<pre><code>window.$ = window.jQuery = require('jquery')&#xA;</code></pre>&#xA;&#xA;<p>this is simply because of <em>variable scopes</em> in ECMAS</p>&#xA;&#xA;<p>so if I define it like this, I can use it everywhere</p>&#xA;",3332676,"",,"",,2018-04-18T16:35:16,"","",,0,,,
49906561,2,,49906156,2018-04-18T18:24:04,,9,,"<p>I've just discovered such an easy way to do this. You can use the electron shell module, like this:</p>&#xA;&#xA;<pre><code>const {shell} = require('electron');&#xA;// Open a local file in the default app&#xA;shell.openItem(app.getAppPath() + '\\local\\print.bat');&#xA;</code></pre>&#xA;",5827005,"",,"",,2018-04-18T18:24:04,"","",,0,,,
49924982,2,,47238650,2018-04-19T15:35:10,,0,,"<p>change </p>&#xA;&#xA;<pre><code>/c/workspace/_edu_zone/Proxy_Manager/filemover.sh&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>c:/workspace/_edu_zone/Proxy_Manager/filemover.sh&#xA;</code></pre>&#xA;&#xA;<p>or </p>&#xA;&#xA;<p>your could try using node-powershell to execute the command directly  </p>&#xA;&#xA;<pre><code>const shell = require('node-powershell')&#xA;&#xA;let ps = new shell({&#xA;    executionPolicy: 'Bypass',&#xA;    noProfile: true&#xA;});&#xA;&#xA;function lunchnode() {&#xA;    process.stdout.write('logging');&#xA;    ps.addCommand('node run.js')&#xA;    ps.invoke()&#xA;   .then(function (output) {&#xA;       process.stdout.write(output)&#xA;   }).catch(function (err) {&#xA;       process.stdout.write(err)&#xA;       ps.dispose()&#xA;   })   &#xA;}&#xA;</code></pre>&#xA;",7940129,"",,"",,2018-04-19T15:35:10,"","",,0,,,
49936283,2,,49936196,2018-04-20T07:26:08,,3,,"<p>change <code>link</code> tag to <code>script</code>:</p>&#xA;&#xA;<pre><code>&lt;script src=""node_modules/graph-dijkstra/dist/graph-dijkstra.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;",4689206,"",,"",,2018-04-20T07:26:08,"","",,0,,,
49938204,2,,39463270,2018-04-20T09:17:44,,0,,"<p>What I ended up doing is:</p>&#xA;&#xA;<p>I created a wrapper around node-sass that calls node-sass as a child process (through the cli).</p>&#xA;&#xA;<pre><code>const { exec } = require('child_process');&#xA;module.exports = function (options, cb) {&#xA;    // turn the options to node-sass cli args&#xA;    // something like this...&#xA;    exec(`node-sass ${agrs}`, execOptions, cb);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Works like a charm! ;)</p>&#xA;",5082460,"",,"",,2018-04-20T09:17:44,"","",,0,,,
49945326,2,,49906507,2018-04-20T15:42:25,,0,,"<p>Okay. I kind of figured this out by setting a flag from the tray click handler and catch that flag in an interval at the end of js file to start the server.</p>&#xA;&#xA;<p>My best guess, this is some weird thing to do with the process/thread that the tray is handled in. </p>&#xA;&#xA;<p>With some more investigating it seems I can start the server by calling a bound function. Not sure why.</p>&#xA;&#xA;<pre><code>tray = new Tray(path.join(__dirname, '/icon.png'));&#xA;tray.setToolTip(""Title"");&#xA;tray.setContextMenu(Menu.buildFromTemplate([&#xA;    { label: ""Start Server"", click: startServer.bind(this); }&#xA;]));&#xA;&#xA;function startServer(){&#xA;    new ws.Server({ port: 4837 }, () =&gt; {&#xA;        console.log(""Server started."");&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",4138281,"",4138281,"",2018-04-20T16:16:34,2018-04-20T16:16:34,"","",,0,,,
49945890,2,,49782247,2018-04-20T16:18:23,,0,,"<p>Ended up fixing the issue with</p>&#xA;&#xA;<pre><code>  &lt;link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/semantic-ui@2.3.1/dist/semantic.min.css""&gt;&#xA;  &lt;link rel=""stylesheet"" href=""index.css""&gt;&#xA;&#xA;  &lt;script&gt;&#xA;    window.$ = window.jQuery = require('jquery')&#xA;  &lt;/script&gt;&#xA;  &lt;script src=""https://code.jquery.com/jquery-3.1.1.min.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/semantic.min.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""view.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;",3788614,"",,"",,2018-04-20T16:18:23,"","",,0,,,
49946476,2,,30040736,2018-04-20T16:57:26,,1,,"<p>As of 2018, NW.js retains cookies and other persistent browser data by default. These are stored in <code>%LOCALAPPDATA%/name-in-manifest/</code> in Windows or equivalent depending on OS. Nothing is required from the application itself, you do not have to persist cookie data manually in local storage.</p>&#xA;",1329367,"",,"",,2018-04-20T16:57:26,"","",,0,,,
49956592,2,,49956517,2018-04-21T14:04:55,,1,,"<p>I was able to run it using:</p>&#xA;&#xA;<pre><code>npm install --save-dev electron-rebuild&#xA;</code></pre>&#xA;&#xA;<p>Adding this to package.json</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ""rebuild"": ""electron-rebuild -f -w yourmodule""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And running</p>&#xA;&#xA;<pre><code>npm run rebuild&#xA;</code></pre>&#xA;",1532587,"",,"",,2018-04-21T14:04:55,"","",,0,,,
49959331,2,,45274548,2018-04-21T19:10:00,,4,,"<p>This is the expected behavior. You need to run your app using electron (in node_modules/.bin), not plain node.</p>&#xA;&#xA;<p>This is what the <a href=""https://electronjs.org/docs/tutorial/first-app"" rel=""nofollow noreferrer"">official tutorial</a> uses inside package.json:</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ""start"": ""electron .""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This ends up calling the <a href=""https://github.com/electron/electron/blob/9dfb85dd21bed39639144e30f3438debdf9010d2/npm/cli.js"" rel=""nofollow noreferrer"">electron cli</a>, which uses <code>require</code> to <a href=""https://github.com/electron/electron/blob/9dfb85dd21bed39639144e30f3438debdf9010d2/npm/index.js"" rel=""nofollow noreferrer"">find the path to electron.exe</a> (the string you discovered) and spawns that as a child process that runs the app.</p>&#xA;",5764553,"",5764553,"",2018-04-21T19:24:39,2018-04-21T19:24:39,"","",,0,,,
49987243,2,,49986556,2018-04-23T17:57:45,,1,,"<p>Yes same problem I encountered when I was working on electron problem, So I would like to suggest you one options that I think It is best one from my knowledge</p>&#xA;&#xA;<blockquote>&#xA;  <p>Do time consuming task or system related task in separate window which&#xA;  is independent from  Main window(Render process) It will never affect&#xA;  your Main window(Render process).</p>&#xA;</blockquote>&#xA;&#xA;<p>after that send Message to Main window(Render process) in order to Notify and update UI.</p>&#xA;",6236938,"",,"",,2018-04-23T17:57:45,"","",,0,,,
50000337,2,,49869676,2018-04-24T11:17:27,,1,,"<p>I think I found out why, the methods take the full path and not the relative paths, even if files are inside the same folder. So, something like this works:</p>&#xA;&#xA;<blockquote>&#xA;  <p>loadcss!(w, ""D:\project\styles.css"")</p>&#xA;</blockquote>&#xA;&#xA;<p>but this won't work:</p>&#xA;&#xA;<blockquote>&#xA;  <p>loadcss!(w, ""styles.css"")</p>&#xA;</blockquote>&#xA;",4436241,"",,"",,2018-04-24T11:17:27,"","",,0,,,
50020113,2,,48486804,2018-04-25T10:37:09,,1,,"<p>Use the <code>open-file</code> event on the <code>app</code> object when running on macOS, on windows you need to parse <code>process.argv</code>. See the docs: <a href=""https://electronjs.org/docs/all#event-open-file-macos"" rel=""nofollow noreferrer"">https://electronjs.org/docs/all#event-open-file-macos</a></p>&#xA;",637425,"",,"",,2018-04-25T10:37:09,"","",,0,,,
49794423,2,,49784259,2018-04-12T10:40:04,,2,,"<p>If the source code is running properly with <code>npm start</code> on mac machine then it is an <strong>electron-packager</strong> issue. I would suggest you to try to make a build using <strong>electron-builder</strong>.</p>&#xA;&#xA;<p>Note: You will need a mac machine to make a .dmg build.</p>&#xA;&#xA;<p>See the configuration of <a href=""https://github.com/zulip/zulip-electron/blob/f70432f4e3cdc86ae610bf3d77bfa2e784fabdf3/package.json#L39"" rel=""nofollow noreferrer"">zulip/zulip-electron</a></p>&#xA;",6233893,"",,"",,2018-04-12T10:40:04,"","",,1,,,
49927753,2,,41557307,2018-04-19T18:23:06,,1,,"<p>Snap Assist will only display windows that are resizable. If your window is initially not resizable, then you won't be able to snap it to one side.</p>&#xA;&#xA;<p>Update: I see now that this happens if you set <code>resizable</code> to false, and then make it resizable later via <code>setResizable(true)</code>.</p>&#xA;&#xA;<p>This issue is being tracked <a href=""https://github.com/electron/electron/issues/11568"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;",3479456,"",3479456,"",2018-04-23T02:55:31,2018-04-23T02:55:31,"","",,1,,,
49938385,2,,48790003,2018-04-20T09:27:05,,3,,"<p>The extension is automatically added for each platform. Just supply an icon per platform like this: <code>app_icon.icns</code>, <code>app_icon.ico</code>, ...</p>&#xA;&#xA;<p>Then update your config:</p>&#xA;&#xA;<pre><code>""electronPackagerConfig"": {&#xA;    ""icon"": ""src/images/icon/app_icon""&#xA;}&#xA;</code></pre>&#xA;",974348,"",,"",,2018-04-20T09:27:05,"","",,1,,,
49976910,2,,49976706,2018-04-23T08:50:30,,1,,"<p>You will have to load your own HTML file which contains your app (this is a good idea anyway). There, you can render the side bar.</p>&#xA;&#xA;<p>And you can load gmail (or any other web site) in a <code>&lt;webview&gt;</code> tag, which is a little bit like an <code>iframe</code>, only safer:</p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/webview-tag"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/webview-tag</a></p>&#xA;",656806,"",,"",,2018-04-23T08:50:30,"","",,1,,,
49995878,2,,49995363,2018-04-24T07:35:06,,1,,"<p>I think this would work for you.</p>&#xA;&#xA;<p>just remove the <code>flex-grow: 1;</code> from <code>.window__content</code> and add <code>width: calc(100% - 44px);</code> </p>&#xA;&#xA;<p><code>width: calc(100% - 44px);</code>  == <code>width: calc(100% - .action-bar[width]);</code></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {&#xD;&#xA;    margin: 0;&#xD;&#xA;    width: 100vw;&#xD;&#xA;    height: 100vh;&#xD;&#xA;    overflow-x: hidden;&#xD;&#xA;    display: flex;&#xD;&#xA;    flex-direction: column;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.window {&#xD;&#xA;    position: relative;&#xD;&#xA;    display: flex;&#xD;&#xA;    flex-grow: 1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.window__content {&#xD;&#xA;    display: flex;&#xD;&#xA;    flex-direction: column;&#xD;&#xA;    width: calc(100% - 44px);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;ul {&#xD;&#xA;    padding: 0;&#xD;&#xA;    margin: 0;&#xD;&#xA;    list-style: none;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.action-bar {&#xD;&#xA;    display: flex;&#xD;&#xA;    flex-shrink: 0;&#xD;&#xA;    flex-direction: column;&#xD;&#xA;    overflow: hidden;&#xD;&#xA;    width: 44px;&#xD;&#xA;    transition: width 0.2s ease;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.action-bar .action-bar__item {&#xD;&#xA;    white-space: nowrap;&#xD;&#xA;    padding: 6px 12px;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.action-bar i {&#xD;&#xA;    font-size: 20px;&#xD;&#xA;    margin-right: 22px;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.action-bar__spacer {&#xD;&#xA;    flex-grow: 1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.console {&#xD;&#xA;    position: relative;&#xD;&#xA;    height: 44px;&#xD;&#xA;    transition: all 0.5s ease;&#xD;&#xA;    min-height: 44px;&#xD;&#xA;    max-height: 50%;&#xD;&#xA;    overflow: hidden;&#xD;&#xA;    font-size: 13px;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;.tabpane {&#xD;&#xA;    display: flex;&#xD;&#xA;    flex-grow: 1;&#xD;&#xA;    flex-direction: column;&#xD;&#xA;    height: 100%;&#xD;&#xA;    position: relative;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.tabpane .tabpane__tabs {&#xD;&#xA;    position: relative;&#xD;&#xA;    white-space: nowrap;&#xD;&#xA;    flex-shrink: 0;&#xD;&#xA;    overflow-x: auto;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.tabpane .tabpane__tabs li {&#xD;&#xA;    position: relative;&#xD;&#xA;    display: inline-block;&#xD;&#xA;    padding: 8px;&#xD;&#xA;    font-size: 13px;&#xD;&#xA;    min-width: 80px;&#xD;&#xA;    max-width: 160px;&#xD;&#xA;    border: solid #1E1E1E;&#xD;&#xA;    border-width: 0 1px;&#xD;&#xA;    margin-right: -5px;&#xD;&#xA;    color: #8D8D8D;&#xD;&#xA;    background: #333333;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.tabpane .tabpane__tabs li:hover {&#xD;&#xA;    cursor: pointer;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.tabpane .tabpane__tabs li.tab--active {&#xD;&#xA;    border-top-width: 1px;&#xD;&#xA;    padding-top: 7px;&#xD;&#xA;    background: #1E1E1E;&#xD;&#xA;    color: white;&#xD;&#xA;    z-index: 2;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.tabpane .tabpane__tabs li i {&#xD;&#xA;    float: right;&#xD;&#xA;    visibility: hidden;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.tabpane .tabpane__tabs li:hover i, .tabpane .tabpane__tabs li.tab--active i {&#xD;&#xA;    visibility: visible;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#draggableTab {&#xD;&#xA;    color: #8D8D8D;&#xD;&#xA;    background-color: rgba(51,51,51,0.9);&#xD;&#xA;    outline: 1px solid rgba(64,64,64,0.9);&#xD;&#xA;    padding: 7px 8px;&#xD;&#xA;    font-size: 13px;&#xD;&#xA;    min-width: 80px;&#xD;&#xA;    cursor: pointer;&#xD;&#xA;    position: fixed;&#xD;&#xA;    z-index: 10030;&#xD;&#xA;    pointer-events: none;&#xD;&#xA;    white-space: nowrap;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#draggableTab i {&#xD;&#xA;    color: white;&#xD;&#xA;    float: right;&#xD;&#xA;    opacity: 0.3;&#xD;&#xA;    position: relative;&#xD;&#xA;    z-index: 9999;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.tabpane__panes {&#xD;&#xA;    position: relative;&#xD;&#xA;    display: flex;&#xD;&#xA;    flex-grow: 1;&#xD;&#xA;    overflow-y: scroll;  &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.tabpane__panes li {&#xD;&#xA;    display: none;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.tabpane__panes li.pane--active {&#xD;&#xA;    display: initial;&#xD;&#xA;    flex: 1;&#xD;&#xA;    padding: 0 44px;&#xD;&#xA;    background: #1E1E1E;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Colors */&#xD;&#xA;.theme--dark {&#xD;&#xA;    color: white;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.shade--light {&#xD;&#xA;    background: #333333;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.shade--neutral {&#xD;&#xA;    background: #252526;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.shade--dark {&#xD;&#xA;    background: #1E1E1E;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.shade--darker {&#xD;&#xA;    background: #141516;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;&#xD;&#xA;&lt;html&gt;&#xD;&#xA;&#xD;&#xA;&lt;head&gt;&#xD;&#xA;    &lt;title&gt;Title&lt;/title&gt;&#xD;&#xA;    &lt;meta charset=""UTF-8""&gt;&#xD;&#xA;    &lt;link href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css"" rel=""stylesheet""&gt;&#xD;&#xA;&lt;/head&gt;&#xD;&#xA;&#xD;&#xA;&lt;body class=""theme--dark shade--dark""&gt;&#xD;&#xA;    &lt;div class=""window""&gt;&#xD;&#xA;        &lt;ul class=""action-bar shade--neutral""&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Expand""&gt;&lt;i class=""fa fa-bars"" aria-hidden=""true""&gt;&lt;/i&gt;&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Home"" data-template=""home""&gt;&lt;i class=""fa fa-home"" aria-hidden=""true""&gt;&lt;/i&gt;Home&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Search"" data-template=""search""&gt;&lt;i class=""fa fa-search"" aria-hidden=""true""&gt;&lt;/i&gt;Search&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Download"" data-template=""download""&gt;&lt;i class=""fa fa-download"" aria-hidden=""true""&gt;&lt;/i&gt;Download&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Statistics"" data-template=""statistics""&gt;&lt;i class=""fa fa-pie-chart"" aria-hidden=""true""&gt;&lt;/i&gt;Statistics&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Help"" data-template=""help""&gt;&lt;i class=""fa fa-question-circle"" aria-hidden=""true""&gt;&lt;/i&gt;Help&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__divider shade--light""&gt;&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Lights On""&gt;&lt;i class=""fa fa-sun-o"" aria-hidden=""true""&gt;&lt;/i&gt;Lights On&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Console""&gt;&lt;i class=""fa fa-code"" aria-hidden=""true""&gt;&lt;/i&gt;Console&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__spacer""&gt;&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Lock""&gt;&lt;i class=""fa fa-lock"" aria-hidden=""true""&gt;&lt;/i&gt;Lock&lt;/li&gt;&#xD;&#xA;            &lt;li class=""action-bar__item"" title=""Settings"" data-template=""settings""&gt;&lt;i class=""fa fa-cog"" aria-hidden=""true""&gt;&lt;/i&gt;Settings&lt;/li&gt;&#xD;&#xA;        &lt;/ul&gt;&#xD;&#xA;        &lt;div class=""window__content""&gt;&#xD;&#xA;            &lt;div class=""tabpane""&gt;&#xD;&#xA;                &lt;ul class=""tabpane__tabs shade--neutral""&gt;&#xD;&#xA;                    &lt;li template=""home"" source=""undefined"" class=""tab--active left""&gt;&#xD;&#xA;                        Home&#xD;&#xA;                        &lt;i class=""fa fa-times"" aria-hidden=""true"" title=""Close (Ctrl+W)""&gt;&lt;/i&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                    &lt;li template=""page_1"" source=""undefined"" class=""""&gt;&#xD;&#xA;                        page 1&#xD;&#xA;                        &lt;i class=""fa fa-times"" aria-hidden=""true"" title=""Close (Ctrl+W)""&gt;&lt;/i&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                    &lt;li template=""page_2"" source=""undefined"" class=""""&gt;&#xD;&#xA;                        page 2&#xD;&#xA;                        &lt;i class=""fa fa-times"" aria-hidden=""true"" title=""Close (Ctrl+W)""&gt;&lt;/i&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                    &lt;li template=""page_3"" source=""undefined"" class=""""&gt;&#xD;&#xA;                        page 3&#xD;&#xA;                        &lt;i class=""fa fa-times"" aria-hidden=""true"" title=""Close (Ctrl+W)""&gt;&lt;/i&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                    &lt;li template=""page_4"" source=""undefined"" class=""""&gt;&#xD;&#xA;                        page 4&#xD;&#xA;                        &lt;i class=""fa fa-times"" aria-hidden=""true"" title=""Close (Ctrl+W)""&gt;&lt;/i&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                    &lt;li template=""page_5"" source=""undefined"" class=""""&gt;&#xD;&#xA;                        page 5&#xD;&#xA;                        &lt;i class=""fa fa-times"" aria-hidden=""true"" title=""Close (Ctrl+W)""&gt;&lt;/i&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                    &lt;li template=""page_6"" source=""undefined"" class=""""&gt;&#xD;&#xA;                        page 6&#xD;&#xA;                        &lt;i class=""fa fa-times"" aria-hidden=""true"" title=""Close (Ctrl+W)""&gt;&lt;/i&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                    &lt;li template=""page_7"" source=""undefined"" class=""""&gt;&#xD;&#xA;                        page 7&#xD;&#xA;                        &lt;i class=""fa fa-times"" aria-hidden=""true"" title=""Close (Ctrl+W)""&gt;&lt;/i&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                    &lt;li template=""page_8"" source=""undefined"" class=""""&gt;&#xD;&#xA;                        page 8&#xD;&#xA;                        &lt;i class=""fa fa-times"" aria-hidden=""true"" title=""Close (Ctrl+W)""&gt;&lt;/i&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                &lt;/ul&gt;&#xD;&#xA;                &lt;ul class=""tabpane__panes""&gt;&#xD;&#xA;                    &lt;li class=""pane--active""&gt;&#xD;&#xA;                        &lt;h1&gt;Hello&lt;/h1&gt;&#xD;&#xA;                        &lt;div style=""max-width: 400px;""&gt;&#xD;&#xA;                            &lt;p&gt;Try resizing your browser window until some tabs are hidden and a scrollbar appears.&lt;/p&gt;&#xD;&#xA;                            &lt;p&gt;I have removed the JavaScript for this example don't expect buttons to work. The scrollbar however needs to work no matter the height of the console window below the tabs or the width of the action bar to the left.&lt;/p&gt;&#xD;&#xA;                        &lt;/div&gt;&#xD;&#xA;                    &lt;/li&gt;&#xD;&#xA;                    &lt;li&gt;page for page 2&lt;/li&gt;&#xD;&#xA;                    &lt;li&gt;page for page 3&lt;/li&gt;&#xD;&#xA;                    &lt;li&gt;page for page 4&lt;/li&gt;&#xD;&#xA;                    &lt;li&gt;page for page 5&lt;/li&gt;&#xD;&#xA;                    &lt;li&gt;page for page 6&lt;/li&gt;&#xD;&#xA;                    &lt;li&gt;page for page 7&lt;/li&gt;&#xD;&#xA;                    &lt;li&gt;page for page 8&lt;/li&gt;&#xD;&#xA;                &lt;/ul&gt;&#xD;&#xA;            &lt;/div&gt;&#xD;&#xA;            &lt;div class=""console console--is-closed shade--darker""&gt;&#xD;&#xA;                &lt;div class=""console__close""&gt;&lt;span class=""lnr lnr-cross""&gt;&lt;/span&gt;&lt;/div&gt;&#xD;&#xA;                &lt;div class=""console__area""&gt;&#xD;&#xA;                    &lt;div class=""console__resize-bar""&gt;&lt;/div&gt;&#xD;&#xA;                    &lt;p&gt;&lt;span class=""console__point""&gt;Console&gt; &lt;/span&gt;&lt;input type=""text"" class=""console__input""&gt;&lt;/p&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            &lt;/div&gt;&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;&lt;/body&gt;&#xD;&#xA;&#xD;&#xA;&lt;/html&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Hope this was helpfull for you.</p>&#xA;",7629714,"",,"",,2018-04-24T07:35:06,"","",,1,,,
49830663,2,,49774331,2018-04-14T10:57:44,,5,,"<p>I'm doing nearly the same, just without the extra vue-monaco component. After struggling quite a bit, I could solve the problem:</p>&#xA;&#xA;<pre><code>function loadMonacoEditor () {&#xA;  const nodeRequire = global.require&#xA;&#xA;  const loaderScript = document.createElement('script')&#xA;&#xA;  loaderScript.onload = () =&gt; {&#xA;    const amdRequire = global.require&#xA;    global.require = nodeRequire&#xA;&#xA;    var path = require('path')&#xA;&#xA;    function uriFromPath (_path) {&#xA;      var pathName = path.resolve(_path).replace(/\\/g, '/')&#xA;&#xA;      if (pathName.length &gt; 0 &amp;&amp; pathName.charAt(0) !== '/') {&#xA;        pathName = '/' + pathName&#xA;      }&#xA;&#xA;      return encodeURI('file://' + pathName)&#xA;    }&#xA;&#xA;    amdRequire.config({&#xA;      baseUrl: uriFromPath(path.join(__dirname, '../../../node_modules/monaco-editor/min'))&#xA;    })&#xA;&#xA;    // workaround monaco-css not understanding the environment&#xA;    self.module = undefined&#xA;&#xA;    // workaround monaco-typescript not understanding the environment&#xA;    self.process.browser = true&#xA;&#xA;    amdRequire(['vs/editor/editor.main'], function () {&#xA;      this.monaco.editor.create(document.getElementById('container'), {&#xA;        value: [&#xA;          'function x() {',&#xA;          '\tconsole.log(""Hello world!"");',&#xA;          '}'&#xA;        ].join('\n'),&#xA;        language: 'javascript'&#xA;      })&#xA;    })&#xA;  }&#xA;&#xA;  loaderScript.setAttribute('src', '../node_modules/monaco-editor/min/vs/loader.js')&#xA;  document.body.appendChild(loaderScript)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I've just taken the electron-amd sample and adjusted it a bit. I call the <code>loadMonacoEditor</code> function in the components' created function.</p>&#xA;&#xA;<p>In order to not get the <code>Not allowed to load local resource: file:///C:/.../node_modules/monaco-editor/min/vs/editor/editor.main.css</code> problem, you also have to set</p>&#xA;&#xA;<pre><code>webPreferences: {&#xA;  webSecurity: false&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>in your instance of the <code>BrowserWindow</code>.</p>&#xA;",453024,"",453024,"",2018-04-14T11:56:39,2018-04-14T11:56:39,"","",,2,,,
49868080,2,,49867855,2018-04-17T00:30:57,,1,,"<p>Webpack has <code>node</code> configuration object, where you can tell it <a href=""https://webpack.js.org/configuration/node/#other-node-core-libraries"" rel=""nofollow noreferrer"">what to do with built-in node modules and objects</a> when target is <code>web</code>. </p>&#xA;&#xA;<p>For example, if you want <code>import * as fs from ""fs"";</code> to result in <code>fs</code> being <code>undefined</code>, you can try adding this line to webpack config:</p>&#xA;&#xA;<pre><code>node: targetPlatform.isWeb ? {fs: 'empty'} : undefined,&#xA;</code></pre>&#xA;&#xA;<p>Then, at runtime, you can check the result and avoid using <code>fs</code> methods if they are undefined:</p>&#xA;&#xA;<pre><code>import * as fs from ""fs"";&#xA;&#xA;if (fs.writeFile) {&#xA;}&#xA;</code></pre>&#xA;",43848,"",43848,"",2018-04-17T01:01:38,2018-04-17T01:01:38,"","",,3,,,
49905555,2,,49905364,2018-04-18T17:21:18,,4,,"<p>As painful as it is for me to suggest... I'd recommend WebRTC for this, for these reasons:</p>&#xA;&#xA;<ul>&#xA;<li>It will make a local connection, when possible.</li>&#xA;<li>It will work over the internet as well, if required.</li>&#xA;<li>You can work around any firewall difficulties with TURN.</li>&#xA;<li>You will have compatibility with browsers.</li>&#xA;<li>You won't be opening up some server to a file that anyone on the network can get... transmission occurs over a secured connection.  (This doesn't mean you can ignore other security aspects in your application however!)</li>&#xA;</ul>&#xA;&#xA;<p>Sample code:  <a href=""https://webrtc.github.io/samples/src/content/datachannel/filetransfer/"" rel=""nofollow noreferrer"">https://webrtc.github.io/samples/src/content/datachannel/filetransfer/</a></p>&#xA;&#xA;<p><em>Commentary: It's amusing to me that in 2018, we still haven't solved the problem of sending a file from point A to point B.  Network Neighborhood in Windows was the golden age, and now it's all screwed up with this newfangled cloud crap.  :-)  Obligatory: <a href=""https://xkcd.com/949/"" rel=""nofollow noreferrer"">https://xkcd.com/949/</a></em></p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/LlAok.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LlAok.png"" alt=""XKCD""></a></p>&#xA;",362536,"",,"",,2018-04-18T17:21:18,"","",,3,,,
49983052,2,,49982845,2018-04-23T13:59:26,,-1,,"<p>as per this answer:</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/34817897/execute-java-code-on-a-server?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa"">Execute java code on a server</a></p>&#xA;&#xA;<p>using a .jar is good and can be run through node directly.</p>&#xA;",6616898,"",,"",,2018-04-23T13:59:26,"","",,3,,,
49937057,2,,49936910,2018-04-20T08:11:35,,4,,"<p>Electron needs to open a chrome browser window. So, when you run it from WSL using a node.js that was installed in WSL, I guess it would try to start the chromium browser for Ubuntu, which will not work out of the box, because:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Microsoft doesn't support graphical programs on WSL. Bash on WSL is intended for running command-line programs that developers might need, but it's possible to run graphical Linux desktop programs on Windows using the Bash shell. To be more precise, you'll be able to display graphical programs running in WSL on a Windows 10 desktop by using an X server which runs on Windows 10. </p>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://virtualizationreview.com/articles/2017/02/08/graphical-programs-on-windows-subsystem-on-linux.aspx"" rel=""nofollow noreferrer"">https://virtualizationreview.com/articles/2017/02/08/graphical-programs-on-windows-subsystem-on-linux.aspx</a></p>&#xA;",656806,"",,"",,2018-04-20T08:11:35,"","",,4,,,
49566436,2,,44342985,2018-03-29T23:24:44,,1,,"<p>It's been a while since this was asked, but you need to look into IPC messages to the webview.  I have my preload script listening for various messages and taking actions based on the message sent.  Something like this:</p>&#xA;&#xA;<pre><code>processInboundMessage(data: WebViewMsg) {&#xA;    switch (data.operation) {&#xA;      case WebViewOperation.GetElementText:&#xA;        this.processMessageGetElementText(data);&#xA;        break;&#xA;      case WebViewOperation.GetSelectedText:&#xA;        this.processMessageGetSelectedText(data);&#xA;        break;&#xA;      case WebViewOperation.SetElementValue:&#xA;        this.processMessageSetElementValue(data);&#xA;        break;&#xA;      case WebViewOperation.TriggerEvent:&#xA;        this.processMessageTriggerClick(data);&#xA;        break;&#xA;      case WebViewOperation.HttpGet:&#xA;        this.processMessageHttpGet(data);&#xA;        break;&#xA;      case WebViewOperation.HttpPost:&#xA;        this.processMessageHttpPost(data);&#xA;        break;&#xA;      case WebViewOperation.GetJsVariableValue:&#xA;        this.processMessageGetJsVariableValue(data);&#xA;        break;&#xA;      case WebViewOperation.AddBorder:&#xA;        this.processMessageAddBorder(data);&#xA;        break;&#xA;      case WebViewOperation.RegisterListener:&#xA;        this.processMessageRegisterListener(data);&#xA;        break;&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>When the action is complete, the preload script replies to the host:</p>&#xA;&#xA;<pre><code>respondToHost(data: WebViewMsg) {&#xA;    ipcRenderer.sendToHost(data.returnChannel, data);&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Where <code>data</code> is the payload to be sent back to the host and <code>data.returnChannel</code> is a GUID that the host checks for whenever a message is received.</p>&#xA;&#xA;<p>HTH,</p>&#xA;&#xA;<p>TTE</p>&#xA;",1816009,"",,"",,2018-03-29T23:24:44,"","",,0,,,
49571109,2,,49570974,2018-03-30T08:34:55,,2,,"<p>Let the myFunction reside in a separate javascript file. Let's say it's named ""functions.js"". To use this function in the HTML file (index.html), simply add the Javascript code using  tag in the following manner - </p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;  &lt;body&gt; &#xA;  ...&#xA;  &lt;/body&gt;&#xA;  &lt;script type=""text/javascript"" src=""./functions.js""&gt;&lt;/script&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Now, we will need to attach an onclick listener to the button that is rendered using the HTML code.</p>&#xA;&#xA;<p>To do that, add the following in functions.js</p>&#xA;&#xA;<pre><code>document.getElementById('btn').addEventListener(""click"", function(){&#xA;    myFunction();&#xA;});&#xA;</code></pre>&#xA;",5830855,"",,"",,2018-03-30T08:34:55,"","",,0,,,
49581639,2,,49480053,2018-03-30T21:26:30,,1,,"<p>I used fs.copyFile() instead and it worked. It works like that: </p>&#xA;&#xA;<pre><code>fs.copyFile('source.txt', 'destination.txt', (err) =&gt; {&#xA;    if (err) throw err;&#xA;      console.log('source.txt was copied to destination.txt');&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>source: <a href=""https://nodejs.org/api/fs.html#fs_fs_copyfile_src_dest_flags_callback"" rel=""nofollow noreferrer"">https://nodejs.org/api/fs.html#fs_fs_copyfile_src_dest_flags_callback</a></p>&#xA;",7261939,"",,"",,2018-03-30T21:26:30,"","",,0,,,
49616470,2,,49574117,2018-04-02T18:14:52,,0,,"<p>Alright, after more reading and getting familiar with Node.js and Electron apps, the following procedure works:&#xA;<code>&#xA;git clone https://github.com/zeit/hyper&#xA;cd hyper&#xA;npm install&#xA;</code></p>&#xA;&#xA;<p>A lot of packages will be installed in a subdirectory called node_modules, then:&#xA;<code>&#xA;yarn run dev&#xA;</code></p>&#xA;&#xA;<p>And (in a separate terminal window):&#xA;<code>&#xA;yarn rup app&#xA;</code></p>&#xA;&#xA;<p>This will open an Electron app similar to the original one built by <a href=""https://hyper.is/"" rel=""nofollow noreferrer"">Hyper</a>.</p>&#xA;",774606,"",,"",,2018-04-02T18:14:52,"","",,0,,,
49631127,2,,48891142,2018-04-03T13:18:24,,3,,"<p>You need to first build the main electron, you can use <code>electron-webpack</code> for that:</p>&#xA;&#xA;<p><em>package.json</em></p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;    ""compile"": ""electron-webpack"",&#xA;    ""build"": ""yarn compile &amp;&amp; electron-builder"" // Compile main first&#xA;  },&#xA;""electronWebpack"": {&#xA;    ""commonSourceDirectory"": ""common"",&#xA;    ""main"": {&#xA;      ""sourceDirectory"": ""main"" // The main folder&#xA;    },&#xA;    ""renderer"": {&#xA;      ""sourceDirectory"": null // Ignore any renderer build&#xA;    },&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>It will create a <code>main</code> folder inside your dist with the <code>main.js</code> build-in.</p>&#xA;&#xA;<p>You can take a look at <a href=""https://webpack.electron.build/building"" rel=""nofollow noreferrer"">Electron webpack</a> documentation for more information.</p>&#xA;",4121119,"",,"",,2018-04-03T13:18:24,"","",,0,,,
49635329,2,,49629387,2018-04-03T16:50:36,,2,,"<p>Installing electron-packager and referencing the packaged output when calling electron-build seems to do the trick.</p>&#xA;&#xA;<p>$ npm install --save-dev electron-packager@9.1.0 ( which happens to be the release version that doesn't error out on me""</p>&#xA;&#xA;<p>added the following script</p>&#xA;&#xA;<pre><code>""pack"": ""electron-packager .""&#xA;</code></pre>&#xA;&#xA;<p>modified the prod-build script</p>&#xA;&#xA;<pre><code>""prod-build"": ""ng build -prod --aot=false &amp;&amp; electron-builder -w --prepackaged ./Some-App-win32-x64"",&#xA;</code></pre>&#xA;",4697881,"",,"",,2018-04-03T16:50:36,"","",,0,,,
49649927,2,,49647882,2018-04-04T11:34:18,,0,,"<p>The spelling error that @Chirag Ravindra pointed out did the trick. After a bit of thinking I came to this solution:</p>&#xA;&#xA;<pre><code>shell.config.execPath = path.join('C:', 'Program Files', 'nodejs', 'node.exe')&#xA;</code></pre>&#xA;&#xA;<p>//Thomas</p>&#xA;",4619050,"",4619050,"",2018-04-04T12:27:16,2018-04-04T12:27:16,"","",,0,,,
49666073,2,,49651592,2018-04-05T07:03:26,,0,,"<p>Based on a reply from The Jared Wilcurt @TheJaredWilcurt on <a href=""http://gitter.im/nwjs"" rel=""nofollow noreferrer"">gitter.im</a>,</p>&#xA;&#xA;<p><em>Node and Chromium don't know what a TS file is. you need to use something to transpile it to code that can actually be ran. TS is a meta-language, like Markdown, Sass, HAML, CoffeeScript, JSX, etc. Node only understands JavaScript, Chromium only understands HTML, CSS, and JS.&#xA;If you are using something to transpile it and it alters your require statements, then that is the problem. You should inspect the actual code you are telling the environment to run.</em></p>&#xA;&#xA;<p>This was happening because the Ionic transpiler was changing the code in some way. I changed the code</p>&#xA;&#xA;<p>from</p>&#xA;&#xA;<pre><code>var os = require('os');&#xA;var fs = require('fs');&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>var os = nw.require('os');&#xA;var fs = nw.require('fs');&#xA;</code></pre>&#xA;&#xA;<p>Now the only problem was that TypeScript compiler was not recognizing '<strong>nw</strong>' as it was supposed to come at runtime. I have added</p>&#xA;&#xA;<pre><code>declare var nw: any;&#xA;</code></pre>&#xA;&#xA;<p>on top.&#xA;All fine now.</p>&#xA;",416877,"",416877,"",2018-04-05T07:13:11,2018-04-05T07:13:11,"","",,0,,,
49673272,2,,49637026,2018-04-05T13:11:29,,8,,"<p>The issue is because of the certificate error.</p>&#xA;&#xA;<p>Try adding the following lines inside your main.js file.</p>&#xA;&#xA;<pre><code>app.on('certificate-error', function(event, webContents, url, error, &#xA;  certificate, callback) {&#xA;      event.preventDefault();&#xA;      callback(true);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>If you want your application to run on <code>https</code>, the ideal solution would be to use the proper certificate.</p>&#xA;&#xA;<p>Hope you find this helpful.</p>&#xA;",2136825,"",,"",,2018-04-05T13:11:29,"","",,0,,,
49747455,2,,49743829,2018-04-10T07:08:41,,1,,"<p>I got the code from your repository, and ran into the same issue on macOS when using the packaged app.</p>&#xA;&#xA;<p>In order to enable the keyboard shortcuts, including the ones for Cut, Copy, Paste, they still have to be defined inside menu items, even if the menubar is hidden, which is normally the case for a Tray application.</p>&#xA;&#xA;<p>And it seems that, for some reason, the <em>packaged</em> application doesn't include the usual standard menu items and associated shortcuts.</p>&#xA;&#xA;<p>I've been able to restore the desired behavior by adding a <code>createMenu()</code> function defining a basic menu in <code>main.js</code>:</p>&#xA;&#xA;<pre><code>app.on('ready', () =&gt; {&#xA;  createTray();&#xA;  createWindow();&#xA;  createMenu();&#xA;});&#xA;&#xA;const createMenu = () =&gt; {&#xA;  const { Menu } = require('electron');&#xA;  let menuTemplate =&#xA;  [&#xA;    {&#xA;      label: app.getName(),&#xA;      submenu: [&#xA;        {role: 'quit'}&#xA;      ]&#xA;    },&#xA;    {&#xA;      label: 'Edit',&#xA;      submenu: [&#xA;        {role: 'undo'},&#xA;        {role: 'redo'},&#xA;        {role: 'cut'},&#xA;        {role: 'copy'},&#xA;        {role: 'paste'},&#xA;        {role: 'selectall'}&#xA;      ]&#xA;    }&#xA;  ];&#xA;  Menu.setApplicationMenu (Menu.buildFromTemplate (menuTemplate));&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>HTH...</p>&#xA;",,user8022331,,user8022331,2018-04-10T13:42:16,2018-04-10T13:42:16,"","",,0,,,
49760194,2,,49759857,2018-04-10T17:58:21,,2,,"<p>You're calling <code>Menu.getApplicationMenu()</code>, but you're never calling <a href=""https://electronjs.org/docs/api/menu#menusetapplicationmenumenu"" rel=""nofollow noreferrer""><code>Menu.setApplicationMenu(menu)</code></a>, which sets the menu for the entire application.</p>&#xA;&#xA;<p>Rather, you're calling <code>win.setMenu(menu)</code>,  which sets the menu for a specific window, which does not appear to be what you want.</p>&#xA;",3479456,"",3479456,"",2018-04-10T18:07:44,2018-04-10T18:07:44,"","",,0,,,
49776332,2,,49575309,2018-04-11T13:24:21,,0,,<p>This seemed to fix things:</p>&#xA;&#xA;<pre><code>mainWindow.webContents.setUserAgent('curl')&#xA;</code></pre>&#xA;,2069812,"",,"",,2018-04-11T13:24:21,"","",,0,,,
49590346,2,,49582030,2018-03-31T17:08:16,,6,,"<p>Indeed, <code>require(...)</code> can resolve relative paths, but from a file which has itself been <em>required</em>.</p>&#xA;&#xA;<p>You're indicating that <code>test.js</code> is <em>used</em> in <code>index.html</code>, and the <em>module not found</em> error message you get suggests that it is included using the <code>src</code> attribute of the <code>&lt;script&gt;</code> tag:</p>&#xA;&#xA;<pre><code>&lt;script src=""../js/test.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Try using a <code>require()</code> statement instead:</p>&#xA;&#xA;<pre><code>&lt;script&gt;require('../js/test.js');&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>then the code inside <code>test.js</code> should work properly:</p>&#xA;&#xA;<pre><code>const aTest = require('./test2.js');&#xA;// aTest();&#xA;</code></pre>&#xA;",,user8022331,,user8022331,2018-04-01T21:06:07,2018-04-01T21:06:07,"","",,1,,,
49600407,2,,49556041,2018-04-01T16:53:28,,2,,"<p>Solved.</p>&#xA;&#xA;<p>it turns out that <em>devDependencies</em> are being omitted during packaging by default, which means that the <code>electron-prebuild-compile</code> package is ""out of the game"" for a packaged application and without it ES6 can't be transcompiled. So in order to deactivate this default behavior, I had to call the packager command with the <code>--no-prune</code> flag so that the <em>devDependencies</em> will remain without being deleted:</p>&#xA;&#xA;<pre><code>electron-packager . MyCoolApp --platform=linux --arch=x64 --no-prune&#xA;</code></pre>&#xA;&#xA;<p>In addition, I had to introduce a new script (let's name it: <code>es6-init.js</code>) for initialization of the main app's script in order to ""compile"" the code before rendering (it should be used as the main entry point script of your application):</p>&#xA;&#xA;<pre><code>var appRoot = path.join(__dirname, '..');&#xA;&#xA;require('electron-compile').init(appRoot, require.resolve('./main'));&#xA;</code></pre>&#xA;&#xA;<p>References:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/electron-userland/electron-compile#how-does-it-work-slightly-harder-way"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-compile#how-does-it-work-slightly-harder-way</a></li>&#xA;<li><a href=""https://github.com/electron-userland/electron-packager"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-packager</a></li>&#xA;</ul>&#xA;",952310,"",952310,"",2018-04-03T20:12:15,2018-04-03T20:12:15,"","",,1,,,
49657506,2,,49643270,2018-04-04T17:57:34,,3,,"<p>Here my 2 cent, I did a package that works without the error, but also avoids to add unnecessary files:</p>&#xA;&#xA;<pre><code>electron-packager . --no-prune --ignore=/node_modules --ignore=/e2e --ignore=/src&#xA;</code></pre>&#xA;&#xA;<p>The electron-packager expect that you have already run run the angular build process:</p>&#xA;&#xA;<pre><code>ng build --prod&#xA;</code></pre>&#xA;&#xA;<p>You can add this script in the <code>package.json</code>:</p>&#xA;&#xA;<pre><code>""electron-package"": ""ng build --prod &amp;&amp; electron-packager . --no-prune --ignore=/node_modules --ignore=/e2e --ignore=/src --overwrite""&#xA;</code></pre>&#xA;&#xA;<p>Then run:</p>&#xA;&#xA;<pre><code>npm run electron-package&#xA;</code></pre>&#xA;",1082342,"",,"",,2018-04-04T17:57:34,"","",,1,,,
49707241,2,,49706586,2018-04-07T12:10:46,,0,,"<p>dot ""."" would pass your current working directory(<code>cwd</code>) to <code>runtimeExecutable</code> &#xA;,which in this case is <code>.bin/electron</code>.</p>&#xA;&#xA;<p>So this executes </p>&#xA;&#xA;<pre><code>$ electron .&#xA;</code></pre>&#xA;&#xA;<p>I'm guessing<code>""program"": ""${workspaceFolder}/Src/main.js""</code> is redundant and can be removed, because electron accepts a directory as path , given there's a package file in it.</p>&#xA;",1163434,"",1163434,"",2018-04-07T12:26:27,2018-04-07T12:26:27,"","",,1,,,
49587133,2,,49586794,2018-03-31T11:18:53,,5,,"<p>First you need to do </p>&#xA;&#xA;<blockquote>&#xA;  <p>npm start</p>&#xA;</blockquote>&#xA;&#xA;<p>which will start a server(which is required to serve resource files) in watch mode.</p>&#xA;&#xA;<p>Then inside electron-main.js change the ""loadUrl"" line as follwing</p>&#xA;&#xA;<blockquote>&#xA;  <p>mainWindow.loadURL('<a href=""http://127.0.0.1:8080/"" rel=""noreferrer"">http://127.0.0.1:8080/</a>')</p>&#xA;</blockquote>&#xA;&#xA;<p>Then do </p>&#xA;&#xA;<blockquote>&#xA;  <p>npm run electron</p>&#xA;</blockquote>&#xA;&#xA;<p>Everything should be fine.</p>&#xA;&#xA;<p>I am attaching a screenshot of your working project(with the changed message) on my local machine.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/Ur53J.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Ur53J.png"" alt=""enter image description here""></a></p>&#xA;",2136825,"",,"",,2018-03-31T11:18:53,"","",,2,,,
49576837,2,,49576772,2018-03-30T15:11:04,,0,,"<p>No, It is not possible by using only html. You have to use any server-side scripting language like PHP or C# etc.</p>&#xA;",9404438,"",,"",,2018-03-30T15:11:04,"","",,3,,,
49579560,2,,49578170,2018-03-30T18:31:01,,0,,"<p><a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md#remote-objects"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/remote.md#remote-objects</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Each object (including functions) returned by the remote module represents an object in the main process (we call it a remote object or remote function). When you invoke methods of a remote object, call a remote function, or create a new object with the remote constructor (function), you are actually sending synchronous inter-process messages.</p>&#xA;</blockquote>&#xA;&#xA;<p>every remote module is sync in nature.</p>&#xA;",2742189,"",,"",,2018-03-30T18:31:01,"","",,3,,,
49604802,2,,49604395,2018-04-02T03:06:37,,3,,"<p>Electron combines Chromium and Node.js into a single runtime so your app can run without Node.js installed. To ensure that, you can start a simple virtual machine, then install any Electron-based app, such as Atom, Slack, etc to see they work.</p>&#xA;&#xA;<p>However, when you finished building your app, you will need to release it as a complete package by using electron-packager or similar tools. Trying to install your released package in several different environment by yourself is always required.</p>&#xA;&#xA;<p>If you are new to Electron, it may be good to get started with <a href=""https://github.com/electron-userland/electron-builder"" rel=""nofollow noreferrer"">electron-builder</a>.</p>&#xA;",2658916,"",,"",,2018-04-02T03:06:37,"","",,3,,,
49582729,2,,49582728,2018-03-30T23:34:29,,20,,"<p>If you are getting the error <strong>cannot find node module sqlite3</strong> or <strong>please install sqlite3 package manually</strong> in <code>electron</code> application after install <code>sqlite</code>. Then this solution can be help full to fix your issue.</p>&#xA;&#xA;<p><strong>Step 1:</strong> We need to clone electron quick start project on your local</p>&#xA;&#xA;<p>Source: <a href=""https://electronjs.org/docs/tutorial/first-app"" rel=""noreferrer"">https://electronjs.org/docs/tutorial/first-app</a></p>&#xA;&#xA;<pre><code>$ git clone https://github.com/electron/electron-quick-start&#xA;</code></pre>&#xA;&#xA;<p><strong>Step 2:</strong> Go into the repository</p>&#xA;&#xA;<pre><code>$ cd electron-quick-start&#xA;</code></pre>&#xA;&#xA;<p><strong>Step 3:</strong> Install electronJs dependencies</p>&#xA;&#xA;<pre><code>$ npm install&#xA;</code></pre>&#xA;&#xA;<p><strong>Step 4:</strong> Run electron project</p>&#xA;&#xA;<pre><code>$ npm start&#xA;</code></pre>&#xA;&#xA;<p>Now lets come to most challenging part</p>&#xA;&#xA;<p><strong>Step 5:</strong> Now we need to install sqlite dependency</p>&#xA;&#xA;<pre><code>$ npm install sqlite3 --save&#xA;$ npm install sequelize --save&#xA;</code></pre>&#xA;&#xA;<p><strong>Step 6:</strong> Open main.js in your IDE and add this code at the end of file to create database connection</p>&#xA;&#xA;<p>Source: <a href=""http://docs.sequelizejs.com/manual/installation/usage.html"" rel=""noreferrer"">http://docs.sequelizejs.com/manual/installation/usage.html</a></p>&#xA;&#xA;<pre><code>// Create database connection&#xA;const Sequelize = require('sequelize');&#xA;    const sequelize = new Sequelize('database', 'username', 'password', {&#xA;    host: 'localhost',&#xA;    dialect: 'sqlite',&#xA;    operatorsAliases: false,&#xA;    pool: {&#xA;        max: 5,&#xA;        min: 0,&#xA;        acquire: 30000,&#xA;        idle: 10000&#xA;    },&#xA;    storage: './database.sqlite'&#xA;});&#xA;&#xA;// Test connection&#xA;sequelize&#xA;    .authenticate()&#xA;    .then(() =&gt; {&#xA;        console.log('Connection has been established successfully.');&#xA;    })&#xA;    .catch(err =&gt; {&#xA;        console.error('Unable to connect to the database:', err);&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p><strong>Step 7:</strong> Now again start your electron project using <code>npm start</code> and you will start getting exception</p>&#xA;&#xA;<pre><code>Error: Please install sqlite3 package manually&#xA;</code></pre>&#xA;&#xA;<h1>How we can fix it?</h1>&#xA;&#xA;<p><strong>Step 8:</strong> To fix this error we need to install electron-rebuild package. Make sure you are using cmd <strong>run as Administrator</strong> before execute this command otherwise it will never work.</p>&#xA;&#xA;<pre><code>$ npm install --save-dev electron-rebuild&#xA;</code></pre>&#xA;&#xA;<p><strong>Step 9:</strong> Now we have to configure the rebuild command in <code>package.json</code> under the script</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;    ""rebuild"": ""electron-rebuild -f -w sqlite3""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Step 10:</strong> Now we Need to install python and set it into Path in environment variable.</p>&#xA;&#xA;<ul>&#xA;<li>Download Python: <a href=""https://www.python.org/download/releases/2.7/"" rel=""noreferrer"">https://www.python.org/download/releases/2.7/</a></li>&#xA;<li>Open Control Panel > System and Security > System > Advanced System Setting > Enviroment Variables</li>&#xA;<li>Under <strong>User variables for %username%</strong> section click on new to add a new Item</li>&#xA;<li>Set variable name <code>Path</code> and variable value <code>C:\Python27</code> (where you have installed python) and click on <strong>OK</strong> Button</li>&#xA;</ul>&#xA;&#xA;<p><strong>Step 10:</strong> Now open a new command line and rebuild your electron project</p>&#xA;&#xA;<pre><code>$ npm run rebuild&#xA;</code></pre>&#xA;&#xA;<p><strong>Step 11:</strong> And now you can run it and it will works fine</p>&#xA;&#xA;<pre><code>$ npm start&#xA;</code></pre>&#xA;&#xA;<p>Happy Programming.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>NOTE: If you will get this error on Step 10 while running <code>npm run rebuild</code></strong></p>&#xA;&#xA;<pre><code>× Rebuild Failed&#xA;&#xA;An unhandled error occurred inside electron-rebuild&#xA;Building the projects in this solution one at a time. To enable parallel build, please add the ""/m"" switch.&#xA;MSBUILD : error MSB3428: Could not load the Visual C++ component ""VCBuild.exe"". To fix this, 1) install the .NET Framework 2.0 SDK, 2) install Microsoft Visual Studio 2005 or 3) add the location of the component to the system path if it is installed elsewhere.  [C:\Projects\Test\node_modules\sqlite3\build\binding.sln]&#xA;gyp ERR! build error&#xA;gyp ERR! stack Error: `C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe` failed with exit code: 1&#xA;gyp ERR! stack     at ChildProcess.onExit (C:\Projects\Test\node_modules\node-gyp\lib\build.js:262:23)&#xA;gyp ERR! stack     at emitTwo (events.js:106:13)&#xA;gyp ERR! stack     at ChildProcess.emit (events.js:191:7)&#xA;gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)&#xA;gyp ERR! System Windows_NT 10.0.17134&#xA;gyp ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Projects\\Test\\node_modules\\node-gyp\\bin\\node-gyp.js"" ""rebuild"" ""--target=1.8.8"" ""--arch=x64"" ""--dist-url=https://atom.io/download/electron"" ""--build-from-source"" ""--module_name=node_sqlite3"" ""--module_path=C:\\Projects\\Test\\node_modules\\sqlite3\\lib\\binding\\electron-v1.8-win32-x64"" ""--host=https://mapbox-node-binary.s3.amazonaws.com"" ""--remote_path=./{name}/v4.0.2/{toolset}/"" ""--package_name=electron-v1.8-win32-x64.tar.gz""&#xA;gyp ERR! cwd C:\\Projects\\Test\node_modules\sqlite3&#xA;gyp ERR! node -v v6.9.5&#xA;gyp ERR! node-gyp -v v3.8.0&#xA;gyp ERR! not ok&#xA;&#xA;Failed with exit code: 1&#xA;&#xA;Error: Building the projects in this solution one at a time. To enable parallel build, please add the ""/m"" switch.&#xA;MSBUILD : error MSB3428: Could not load the Visual C++ component ""VCBuild.exe"". To fix this, 1) install the .NET Framework 2.0 SDK, 2) install Microsoft Visual Studio 2005 or 3) add the location of the component to the system path if it is installed elsewhere.  [C:\Projects\Test\node_modules\sqlite3\build\binding.sln]&#xA;gyp ERR! build error&#xA;gyp ERR! stack Error: `C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe` failed with exit code: 1&#xA;gyp ERR! stack     at ChildProcess.onExit (C:\Projects\Test\node_modules\node-gyp\lib\build.js:262:23)&#xA;gyp ERR! stack     at emitTwo (events.js:106:13)&#xA;gyp ERR! stack     at ChildProcess.emit (events.js:191:7)&#xA;gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)&#xA;gyp ERR! System Windows_NT 10.0.17134&#xA;gyp ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Projects\\Test\\node_modules\\node-gyp\\bin\\node-gyp.js"" ""rebuild"" ""--target=1.8.8"" ""--arch=x64"" ""--dist-url=https://atom.io/download/electron"" ""--build-from-source"" ""--module_name=node_sqlite3"" ""--module_path=C:\\Projects\\Test\\node_modules\\sqlite3\\lib\\binding\\electron-v1.8-win32-x64"" ""--host=https://mapbox-node-binary.s3.amazonaws.com"" ""--remote_path=./{name}/v4.0.2/{toolset}/"" ""--package_name=electron-v1.8-win32-x64.tar.gz""&#xA;gyp ERR! cwd C:\\Projects\\Test\node_modules\sqlite3&#xA;gyp ERR! node -v v6.9.5&#xA;gyp ERR! node-gyp -v v3.8.0&#xA;gyp ERR! not ok&#xA;&#xA;Failed with exit code: 1&#xA;    at SafeSubscriber._error (C:\Projects\Test\node_modules\spawn-rx\lib\src\index.js:277:84)&#xA;    at SafeSubscriber.__tryOrUnsub (C:\Projects\Test\node_modules\rxjs\Subscriber.js:242:16)&#xA;    at SafeSubscriber.error (C:\Projects\Test\node_modules\rxjs\Subscriber.js:201:26)&#xA;    at Subscriber._error (C:\Projects\Test\node_modules\rxjs\Subscriber.js:132:26)&#xA;    at Subscriber.error (C:\Projects\Test\node_modules\rxjs\Subscriber.js:106:18)&#xA;    at MapSubscriber.Subscriber._error (C:\Projects\Test\node_modules\rxjs\Subscriber.js:132:26)&#xA;    at MapSubscriber.Subscriber.error (C:\Projects\Test\node_modules\rxjs\Subscriber.js:106:18)&#xA;    at SafeSubscriber._next (C:\Projects\Test\node_modules\spawn-rx\lib\src\index.js:251:65)&#xA;    at SafeSubscriber.__tryOrSetError (C:\Projects\Test\node_modules\rxjs\Subscriber.js:251:16)&#xA;    at SafeSubscriber.next (C:\Projects\Test\node_modules\rxjs\Subscriber.js:191:27)&#xA;</code></pre>&#xA;&#xA;<p>Then execute this in command line <code>npm install windows-build-tools --global</code></p>&#xA;&#xA;<p>And while installing <code>windows-build-tools</code> if you will get this exception</p>&#xA;&#xA;<pre><code>async function aquireInstallers(cb) {&#xA;      ^^^^^^^^&#xA;SyntaxError: Unexpected token function&#xA;    at Object.exports.runInThisContext (vm.js:76:16)&#xA;    at Module._compile (module.js:542:28)&#xA;    at Object.Module._extensions..js (module.js:579:10)&#xA;    at Module.load (module.js:487:32)&#xA;    at tryModuleLoad (module.js:446:12)&#xA;    at Function.Module._load (module.js:438:3)&#xA;    at Module.require (module.js:497:17)&#xA;    at require (internal/module.js:20:19)&#xA;    at Object.&lt;anonymous&gt; (C:\Users\User\AppData\Roaming\npm\node_modules\windows-build-tools\dist\start.js:4:29)&#xA;</code></pre>&#xA;&#xA;<p>It means you are using old version of nodeJS to fix it you can install old version of <strong>windows-build-tools</strong> using <code>npm install windows-build-tools@2.2.1 --global</code></p>&#xA;&#xA;<p>And now you can start the project using <code>npm start</code></p>&#xA;",3152702,"",3152702,"",2018-09-16T11:24:55,2018-09-16T11:24:55,"","",,5,,,
49776768,2,,49772262,2018-04-11T13:43:30,,3,,"<p>Have you tried using <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#appgetpathname"" rel=""nofollow noreferrer"">.getPath</a></p>&#xA;&#xA;<p>This API lets you find explicitly a given path name</p>&#xA;",5714823,"",,"",,2018-04-11T13:43:30,"","",,5,,,
49704070,2,,49703500,2018-04-07T05:07:30,,3,,"<p><code>electron</code> uses <code>chromius</code> and runs on <code>node.js</code>, you can use <code>fs</code>(node.js buildin file system module) directly for operating local files.</p>&#xA;&#xA;<p>For simply, you can include <code>fs</code> module as a global variable on <code>window</code> at your <code>index.html</code>(from angular project)</p>&#xA;&#xA;<pre><code>window.fs = require('fs')&#xA;</code></pre>&#xA;&#xA;<p>And build your file service for <code>get</code>, <code>post</code> and <code>post</code> functions or any others based on API from <code>fs</code> via <code>window.fs</code>.</p>&#xA;&#xA;<p>reading local file for example:</p>&#xA;&#xA;<pre><code>@Injectable()&#xA;export class FileService {&#xA;  fs: any;&#xA;  constructor() {&#xA;    // or this.fs = &lt;any&gt;window.fs&#xA;    this.fs = (window as any).fs;&#xA;  }&#xA;&#xA;  // read file synchronous&#xA;  getFile(path: string) {&#xA;    // return synchronous filestream&#xA;    return this.fs.readFileSync(path);&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",7579471,"",7579471,"",2018-04-07T06:23:57,2018-04-07T06:23:57,"","",,8,,,
49699682,2,,49699399,2018-04-06T19:18:16,,4,,"<p>I guess you misspelled it. You should be able to access the localStorage as <code>window.localStorage</code> and an item 'X' inside it as, <code>localStorage.getItem('X')</code>.</p>&#xA;&#xA;<p>Attaching a screenshot of localStorage accessed in the console.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/d2U2d.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/d2U2d.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>Error Scenario screenshot</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/lthNx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lthNx.png"" alt=""enter image description here""></a></p>&#xA;",2136825,"",2136825,"",2018-04-06T19:55:28,2018-04-06T19:55:28,"","",,9,,,
57074875,2,,53084522,2019-07-17T11:33:44,,0,,<p>The problem was that my 'dll' dependencies requires an specific Net Framework version to work.&#xA;Devtools doesn't tell me nothing about that because it's an error that occurs inside that dependencie.</p>&#xA;,7695835,"",,"",,2019-07-17T11:33:44,"","",,0,,,
57083863,2,,57081237,2019-07-17T20:47:55,,1,,"<p>The unfortunate answer as of now (Electron 5.0.7) is that you can't (natively). This is a tracked <a href=""https://github.com/electron/electron/issues/5256"" rel=""nofollow noreferrer"">issue</a>.</p>&#xA;&#xA;<p>One commenter suggested this workaround:</p>&#xA;&#xA;<blockquote>&#xA;<pre><code>// it's not possible to add multiple accelerators&#xA;// so need to do this the oldschool way&#xA;document.addEventListener('keydown', event =&gt; {&#xA;    if (process.platform === 'darwin' &amp;&amp; event.metaKey &amp;&amp; event.shiftKey) {&#xA;        if (event.keyCode === 221/* ] */) {&#xA;            nextConversation();&#xA;        }&#xA;&#xA;      if (event.keyCode === 219/* [ */) {&#xA;            previousConversation();&#xA;        }&#xA;    }&#xA;});&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<p>Someone else suggested to use the <a href=""https://www.npmjs.com/package/electron-localshortcut"" rel=""nofollow noreferrer""><code>electron-localshortcut</code></a> module to work around this.</p>&#xA;",3479456,"",3479456,"",2019-07-17T21:59:11,2019-07-17T21:59:11,"","",,0,,,
57095869,2,,55092250,2019-07-18T13:38:36,,2,,"<p>You may have to enable <em>Node integration</em> in your new window (disabled by default according to the <a href=""http://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer"">documentation</a>) :</p>&#xA;&#xA;<p><strong>index.js</strong></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>function main() {&#xA;&#xA;  win = new BrowserWindow({&#xA;    width: 500,&#xA;    height: 400,&#xA;    webPreferences: {&#xA;      nodeIntegration: true&#xA;    }&#xA;  });&#xA;&#xA;  win.loadFile(""index.html"") // To load local HTML files easily&#xA;&#xA;}&#xA;</code></pre>&#xA;",9717580,"",,"",,2019-07-18T13:38:36,"","",,0,,,
57099554,2,,56958867,2019-07-18T17:07:55,,0,,"<p>I ended up using <code>gipc</code> to spin up processes. The cancellation mechanism relies on the fact that when a <code>gipc</code> process is terminated, the pipe closes. The entire API is complicated, this is what I ended up with:</p>&#xA;&#xA;<pre><code>class ZerorpcService():&#xA;    def __init__(self):&#xA;        self.participant_id = None&#xA;        self.extraction_methods = []&#xA;        # maps pid to (process, pipe writer)&#xA;        self.processes = {}&#xA;        self. = lock.Semaphore()&#xA;&#xA;    def _launch_process(self, function, kwargs):&#xA;        """"""&#xA;        Launches a new process&#xA;        """"""&#xA;        try:&#xA;            # add required arguments&#xA;            pid = kwargs[""pid""]&#xA;&#xA;            # start independent gipc process, communicated via pipe&#xA;            started = False&#xA;            with gipc.pipe() as (r, w):&#xA;                with self.mutex:&#xA;                    if pid in self.processes:&#xA;                        return_value = {'status': 1, 'error': 'pid already exists', ""report"": True}&#xA;                        return&#xA;                    proc = gipc.start_process(self._process_wrapper, args=(function, kwargs, w))&#xA;                    self.processes[pid] = proc&#xA;                    started = True&#xA;                # wait for process to send something over pipe&#xA;                return_value = r.get()&#xA;        except EOFError as eof:&#xA;            # happens when we terminate a process because the pipe closes&#xA;            return_value = {'status': 1, 'error': ""pid {} terminated"".format(pid), ""report"": False}&#xA;        except Exception as error:&#xA;            logging.exception(error)&#xA;            return_value = {'status': 1, 'error': str(error), 'traceback': traceback.format_exc(), ""report"": True}&#xA;        finally:&#xA;            # deletes the pid from the map&#xA;            with self.mutex:&#xA;                if started:&#xA;                    del self.processes[pid]&#xA;            return return_value&#xA;&#xA;    @staticmethod&#xA;    def _process_wrapper(function, kwargs, pipe):&#xA;        """"""&#xA;        Executes f with kwargs and formats the result into a dict.&#xA;        Wraps it in error handling.&#xA;        Routes the return value through the pipe provided.&#xA;        """"""&#xA;        return_val = {'status': 0}&#xA;        try:&#xA;            raw_val = function(**kwargs)&#xA;            if raw_val is not None:&#xA;                return_val = raw_val&#xA;        except Exception as error:&#xA;            logging.exception(error)&#xA;            return_val = {'status': 1, 'error': str(error), 'traceback': traceback.format_exc(), ""report"": True}&#xA;        finally:&#xA;            pipe.put(return_val)&#xA;&#xA;    def cancel_process(self, pid):&#xA;        if pid in self.processes:&#xA;            with self.mutex:&#xA;                process = self.processes[pid]&#xA;                if process.is_alive():&#xA;                    process.terminate()&#xA;                return {'status': 0}&#xA;        else:&#xA;            return {'status': 1, 'error': 'pid {} not found'.format(pid), ""traceback"": traceback.format_exc(),&#xA;                    ""report"": True}&#xA;</code></pre>&#xA;",8432256,"",,"",,2019-07-18T17:07:55,"","",,0,,,
57110775,2,,57038073,2019-07-19T10:43:57,,2,,"<p><em>use e.sender.send in place of e.reply</em></p>&#xA;&#xA;<pre><code>ipcMain.on(""checkPerl"", function(e){&#xA;    tryToRun(""perl"", [""-v""])&#xA;        .then(function(){ e.sender.send(""checkPerlReply"", true) })&#xA;        .catch(function(){ e.sender.send(""checkPerlReply"", false) })&#xA;&#xA;})&#xA;</code></pre>&#xA;",3939472,"",,"",,2019-07-19T10:43:57,"","",,0,,,
57131818,2,,57101378,2019-07-21T09:14:38,,0,,<p>Never mind. I realized that the link_dependencies tag needs to be added in binding.gyp. Also the dylib needs to be copied at the root of the project.</p>&#xA;,11147356,"",,"",,2019-07-21T09:14:38,"","",,0,,,
57133182,2,,57118664,2019-07-21T12:22:32,,2,,"<p>The result of executing your data is :</p>&#xA;&#xA;<pre><code>[ { nom: 'Bettgnhitoz',&#xA;    idF: 'dededed',&#xA;    des: 'ddffff55f',&#xA;    ba: 'no',&#xA;    _id: 'cDeLArtZYkVCHI7e' },&#xA;  { nom: 'astohgff',&#xA;    idF: '5t554545',&#xA;    des: 'frfrfrcrfrrrf',&#xA;    ba: 'no',&#xA;    _id: 'oC4CIUmxJ2kqHcMC' },&#xA;  { nom: 'tpaggtff',&#xA;    iu: '5r55rr5rf',&#xA;    des: 'fffffffffffff',&#xA;    ba: 'no',&#xA;    _id: 'CLucpeOhxsnSUua6' } ]&#xA;</code></pre>&#xA;&#xA;<p>Which is accurate as the uppercase letters will be sorted before the smaller case letters, this is due to the order of the characters in the ASCII character set, check <a href=""https://ee.hawaii.edu/~tep/EE160/Book/chap4/subsection2.1.1.1.html"" rel=""nofollow noreferrer"">this</a>.</p>&#xA;",1013493,"",,"",,2019-07-21T12:22:32,"","",,0,,,
57141562,2,,57054339,2019-07-22T08:05:32,,0,,"<p>Looks like there is no issue with playing sounds from ""outside"" with the audio tag, but it's really playing a sound only after creating an exe with nwjs!</p>&#xA;&#xA;<pre><code>const url = ""http://example.com/sound.wav"";&#xA;&lt;audio autoPlay&gt;&#xA;&lt;source src={url} type=""audio/wav"" /&gt;&#xA;Your browser does not support the audio element.&#xA;&lt;/audio&gt;&#xA;</code></pre>&#xA;",3885095,"",,"",,2019-07-22T08:05:32,"","",,0,,,
57144635,2,,57144554,2019-07-22T11:02:04,,1,,"<p><code>By.linkText</code> works only for <code>&lt;a&gt;</code> tags. You can use <code>xpath</code> instead</p>&#xA;&#xA;<pre><code> findElement(By.xpath(""//mat-icon[.='more_vert']""));&#xA;</code></pre>&#xA;",5168011,"",,"",,2019-07-22T11:02:04,"","",,0,,,
57150365,2,,57149584,2019-07-22T16:42:59,,0,,"<p>I found from another post that you can also do this (using app.getAppPath()):</p>&#xA;&#xA;<pre><code>const prodPath = path.join(app.getAppPath() ,'renderer/out/start.html')&#xA;</code></pre>&#xA;&#xA;<p>This solved my problem!</p>&#xA;&#xA;<p>I'm still not sure as to what is the difference between the two ways of accessing the files is, and why one works and the other one doesn't.</p>&#xA;",6715542,"",,"",,2019-07-22T16:42:59,"","",,0,,,
57172615,2,,57048100,2019-07-23T21:45:01,,4,,"<p>I have a very basic knowledge of electron, so i'll try to show you the idea. For me, your problem comes from the initialization of the view. You're not loosing events because you can see them in the console but not in the view, which enforces my guesses.</p>&#xA;&#xA;<p>As shown in your code, your are sending only one event (I suppose it's only for testing raison) and we want to show it when the view is rendered.  </p>&#xA;&#xA;<p>In your component add a subject which informes us that the view is initialized, like:  </p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import { Subject, combineLatest, fromEvent } from 'rxjs';&#xA;&#xA;viewInitialized$ = new Subject();&#xA;&#xA;...&#xA;&#xA;ngAfterViewInit() {&#xA; this.viewInitialized$.next();&#xA;}&#xA;&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>Now we can wait the two emissions to come, one from the <code>ipcRenderer</code> and the other from <code>viewInitialized$</code>by using <code>combineLatest</code> operator.</p>&#xA;&#xA;<p>Before that, we have to convert the <code>ipcRenderer</code> to an <code>Observable</code>. From this <a href=""https://stackoverflow.com/questions/48509186/can-rxjs-observables-perform-inter-process-communication-in-an-electron-app"">SO</a> response we can do <code>fromEvent(ipcRenderer,'data-from-container')</code>. If it does not work we can use another subject that emits events each time we receive something in <code>ipcRenderer.on()</code>, the second solution requires ngZone.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>&#xA;ngOnInit() {&#xA;...&#xA;&#xA;const containerData$ = fromEvent(this.electronService.ipcRenderer, 'data-from-container');&#xA;this.subscription = combineLatest(containerData$, this.viewInitialized$).subscribe(combined =&gt; {&#xA;  const data = combined[0];&#xA;  this.formData = data;&#xA;  this.prepopulateForm(data) &#xA;})&#xA;&#xA;...&#xA;}&#xA;&#xA;ngOnDestroy() {&#xA;  this.subscription.unsubscribe();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps.</p>&#xA;",8325761,"",,"",,2019-07-23T21:45:01,"","",,0,,,
57188694,2,,57188393,2019-07-24T17:53:55,,1,,"<p>The problem was that I didn't notice the <code>require is not defined</code> at the top of console.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/75gjJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/75gjJ.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>After searching for it, I found <a href=""https://stackoverflow.com/a/55908510/6282576"">Sathiraumesh's answer</a>, and after adding <code>webPreferences: {nodeIntegration: true}</code> to the <code>main.js</code> file:</p>&#xA;&#xA;<pre><code>main_window = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    show: false,&#xA;    webPreferences: {&#xA;        nodeIntegration: true&#xA;    }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>The same code, suggested in Electron documenation, works:</p>&#xA;&#xA;<pre><code>const {dialog} = require('electron').remote&#xA;&#xA;function select_song() {&#xA;    dialog.showOpenDialog(&#xA;        {properties: ['openFile']}, &#xA;        filename =&gt; {&#xA;            console.log(filename)&#xA;        }&#xA;    )&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/8ZvH8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8ZvH8.png"" alt=""enter image description here""></a></p>&#xA;",6282576,"",,"",,2019-07-24T17:53:55,"","",,0,,,
57197301,2,,57142810,2019-07-25T08:16:25,,1,,<p>I found the answer. I only need to use <code>&lt;HashRouter&gt;</code> instead of <code>&lt;BrowserRouter&gt;</code></p>&#xA;,11769253,"",11769253,"",2019-07-25T09:06:31,2019-07-25T09:06:31,"","",,0,,,
57226515,2,,57203853,2019-07-26T20:13:54,,0,,"<p>You can use <a href=""https://www.npmjs.com/package/mockery"" rel=""nofollow noreferrer""><code>mockery</code></a> to mock objects in Node.</p>&#xA;&#xA;<pre><code>import * as mockery from ""mockery"";&#xA;</code></pre>&#xA;&#xA;<p>Then, to create a fake <code>BrowserWindow</code> object, you can do this in your <code>beforeEach</code>:</p>&#xA;&#xA;<pre><code>const fakeBrowserWindow = jasmine.createSpyObj(""browser"", [""hide""]);&#xA;const fakeBrowserWindowCtr = jasmine.createSpy(""BWCtr"").and.returnValue(fakeBrowserWindow);&#xA;&#xA;mockery.enable();&#xA;mockery.registerMock(""electron"", { BrowserWindow: fakeBrowserWindowCtr });&#xA;</code></pre>&#xA;&#xA;<p>In your <code>afterEach</code> do:</p>&#xA;&#xA;<pre><code>mockery.deregisterAll();&#xA;mockery.disable();&#xA;</code></pre>&#xA;&#xA;<p>Then, whenever your code requires electron like so:</p>&#xA;&#xA;<pre><code>const { BrowserWindow } = require(""electron"");&#xA;</code></pre>&#xA;&#xA;<p>It will return the fake <code>BrowserWindow</code>.</p>&#xA;&#xA;<p>One caveat of this is that if you load the script that you're testing before the mocks are set up, you'll use the original object, not the mock.</p>&#xA;&#xA;<p>So either delay importing the script until you've called <code>mockery.registerMock</code>, or do your <code>electron</code> requires at the function level, not the module level.</p>&#xA;",3479456,"",,"",,2019-07-26T20:13:54,"","",,0,,,
57234739,2,,57134084,2019-07-27T17:57:15,,1,,"<p>First of all, I greatly appreciate @CliteTailor's effort. This answer, by and large, based on his support.</p>&#xA;&#xA;<p>The problem was in the snippet that I didn't copy to the original question.&#xA;I left my <code>index.html</code> file in root folder (it's being used in the renderer process) 'as-is' - didn't copy it in <code>dist</code> folder with other compiled code and used such link to this file:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;html&gt;&#xA;    &lt;!-- some header --&gt;&#xA;    &lt;body&gt;&#xA;        &lt;script src='./dist/renderer.js&gt;&lt;/script&gt;&#xA;    &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>According to @CliteTailor's code, I've just my some changes:  </p>&#xA;&#xA;<p>1) added copying of <code>index.html</code> to the <code>dist</code> folder in <code>rollup.config.js</code>:</p>&#xA;&#xA;<pre><code>export default [&#xA;    {&#xA;        input: ['src/entries/main.js', 'src/entries/renderer.js'],&#xA;        output: {&#xA;            dir: 'dist',&#xA;            format: 'cjs',&#xA;            sourcemap: true&#xA;        },&#xA;        plugins: [&#xA;            svelte({&#xA;                css: css =&gt; {&#xA;                    css.write('dist/svelte.css');&#xA;                }&#xA;            }),&#xA;            resolve(),&#xA;            commonjs(),&#xA;            copy({&#xA;                targets: [{ src: 'index.html', dest: 'dist' }]&#xA;            })&#xA;        ],&#xA;        external: ['electron', 'child_process', 'fs', 'path', 'url', 'module', 'os']&#xA;    }&#xA;];&#xA;</code></pre>&#xA;&#xA;<p>2) replaced calling this <code>index.html</code> from the main file of the renderer process:</p>&#xA;&#xA;<pre><code>// old code&#xA;win.loadFile(path.resolve(__dirname, '../index.html'));&#xA;// fixed code&#xA;win.loadFile(path.resolve(__dirname, 'index.html'));&#xA;</code></pre>&#xA;&#xA;<p>3) changed a link to compiled renderer file in <code>index.html</code>:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;html&gt;&#xA;    &lt;!-- some header --&gt;&#xA;    &lt;body&gt;&#xA;        &lt;script src='./renderer.js&gt;&lt;/script&gt;&#xA;    &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>And now everything is working fine.</p>&#xA;",1820686,"",1820686,"",2019-07-28T07:32:30,2019-07-28T07:32:30,"","",,0,,,
57235663,2,,57235500,2019-07-27T20:06:06,,1,,"<p>You can generate a base64 of your image and pass it to the attribute of your image by doing something like this  : </p>&#xA;&#xA;<pre><code>const request = require('request').defaults({ encoding: null });&#xA;const mm = require('music-metadata')&#xA;&#xA;const generateBase64 = url  =&gt; {&#xA;    return new Promise(&#xA;        resolve =&gt; {&#xA;          request.get(url, (error, response, body) =&gt; {&#xA;          if (!error &amp;&amp; response.statusCode == 200) {&#xA;              const  data = ""data:"" + response.headers[""content-type""] + "";base64,"" + new Buffer.from(body).toString('base64')&#xA;              return (resolve(data))&#xA;          }&#xA;          return(resolve(null))&#xA;        }&#xA;      )}&#xA;    )&#xA;  }&#xA;&#xA;mm.parseFile(music_filepath)&#xA;    .then(async metadata =&gt; {&#xA;        const base64 = await generateBase64(metadata)&#xA;        if (!base64) return;&#xA;        const album_cover = document.getElementById('album-cover')&#xA;        album_cover.setAttribute('src', base64);&#xA;    })&#xA;    .catch(error =&gt; {&#xA;        console.error(error.message)&#xA;    })&#xA;&#xA;</code></pre>&#xA;",8253316,"",,"",,2019-07-27T20:06:06,"","",,0,,,
57239844,2,,57239663,2019-07-28T10:07:37,,2,,"<p>You should mock the process in this way:</p>&#xA;&#xA;<pre><code>const originalProcess = process&#xA;global.proces = {...originalProcess, version: ""your code here""}&#xA;// do the test&#xA;// ...&#xA;// restore the original process object for next tests&#xA;global.process = originalProcess&#xA;</code></pre>&#xA;",8534482,"",,"",,2019-07-28T10:07:37,"","",,0,,,
57240599,2,,57211498,2019-07-28T11:48:48,,0,,"<p>With <code>electron-builder</code> You can use a custom NSIS script as shown <a href=""https://www.electron.build/configuration/nsis#custom-nsis-script"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;&#xA;<p>You can use it to register your dll using the installer like this:</p>&#xA;&#xA;<pre><code>!macro customInstall&#xA;&#xA;  ; Register your DLL&#xA;  Exec ""regsvr32 /s $INSTDIR\path-to\your.dll""&#xA;&#xA;!macroend&#xA;&#xA;!macro customUnInit&#xA;&#xA; ; Unregister your DLL&#xA;  Exec ""regsvr32 /s /u $INSTDIR\path-to\your.dll""&#xA;&#xA;!macroend&#xA;</code></pre>&#xA;",9698583,"",9698583,"",2019-07-28T11:55:58,2019-07-28T11:55:58,"","",,0,,,
57243387,2,,53032104,2019-07-28T17:30:39,,1,,"<p>you need to install the datatable using NPM:</p>&#xA;&#xA;<pre><code>npm install --save datatables.net-dt&#xA;</code></pre>&#xA;&#xA;<p>PS : make sure that the jquery is also installed in your node modules if not, use <code>npm install --save jquery</code> and add this code in your html page :</p>&#xA;&#xA;<pre><code>&lt;script&gt; window.jQuery = window.$ = require('jquery'); &lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>To be able to use the selected software in your package, use the following code:</p>&#xA;&#xA;<pre><code>require( 'datatables.net-dt' )();&#xA;</code></pre>&#xA;&#xA;<p>now put the HTML table code and call the css file and the functionality of datatable with jquery in your html page:</p>&#xA;&#xA;<p>HTML</p>&#xA;&#xA;<pre><code>&lt;table id=""table_id"" class=""display""&gt;&#xA;    &lt;thead&gt;&#xA;        &lt;tr&gt;&#xA;            &lt;th&gt;Column 1&lt;/th&gt;&#xA;            &lt;th&gt;Column 2&lt;/th&gt;&#xA;        &lt;/tr&gt;&#xA;    &lt;/thead&gt;&#xA;    &lt;tbody&gt;&#xA;        &lt;tr&gt;&#xA;            &lt;td&gt;Row 1 Data 1&lt;/td&gt;&#xA;            &lt;td&gt;Row 1 Data 2&lt;/td&gt;&#xA;        &lt;/tr&gt;&#xA;        &lt;tr&gt;&#xA;            &lt;td&gt;Row 2 Data 1&lt;/td&gt;&#xA;            &lt;td&gt;Row 2 Data 2&lt;/td&gt;&#xA;        &lt;/tr&gt;&#xA;    &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;</code></pre>&#xA;&#xA;<p>Css</p>&#xA;&#xA;<pre><code>&lt;link rel=""stylesheet"" href=""node_modules/datatables.net-bs4/css/dataTables.bootstrap4.min.css""&gt;&#xA;</code></pre>&#xA;&#xA;<p>Javascript</p>&#xA;&#xA;<pre><code>&lt;script src=""node_modules/datatables.net-bs4/js/dataTables.bootstrap4.min.js""&gt;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;$(document).ready( function () {&#xA;      $('#table_id').DataTable();&#xA;  } );&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>source &#xA;<a href=""https://datatables.net/download/"" rel=""nofollow noreferrer"">Datatable download</a>&#xA;<a href=""https://datatables.net/manual/installation"" rel=""nofollow noreferrer"">Datatable manual installation</a></p>&#xA;",8665772,"",8665772,"",2019-07-29T01:05:25,2019-07-29T01:05:25,"","",,0,,,
57248792,2,,57214514,2019-07-29T07:14:38,,0,,"<p>I found the solution.</p>&#xA;&#xA;<ul>&#xA;<li>Remove html import from index.html</li>&#xA;<li>Add import cv  <code>'import cv from './../../assets/lib/opencv.js'</code> in your ts file</li>&#xA;<li>Add async tag to your action button (mine was min rect method)</li>&#xA;</ul>&#xA;&#xA;<p>If you get error with ""crypto"" , ""fs"" , etc ... add :</p>&#xA;&#xA;<pre><code>""browser"": {&#xA;    ""fs"": false,&#xA;    ""crypto"": false,&#xA;    ...&#xA;  }&#xA;</code></pre>&#xA;",4973728,"",,"",,2019-07-29T07:14:38,"","",,0,,,
57067786,2,,56948862,2019-07-17T02:32:34,,2,,"<blockquote>&#xA;  <p>And also if I fork multiple processes, it won't increase the speed.</p>&#xA;</blockquote>&#xA;&#xA;<p>To increase the speed, you need to speed up the bottleneck which is disk IO in your case(directory size calculation etc...). CPU is much faster than disk IO, therefore multi/single threads/processes just do not matter.</p>&#xA;&#xA;<blockquote>&#xA;  <p>if I forked two cluster means, and I fork two child process means, each child runs parallel in two different clusters?</p>&#xA;</blockquote>&#xA;&#xA;<p>yes, but it will not speed up your final result as mentioned above</p>&#xA;",7719945,"",7719945,"",2019-07-17T02:48:26,2019-07-17T02:48:26,"","",,1,,,
57135817,2,,57135624,2019-07-21T18:13:54,,2,,"<p>The event is not executed because you've added an event listener for ""Click"" while it should be lowercase ""click"". The code below will work.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>user_button.addEventListener('click', () =&gt; {&#xA;...&#xA;})&#xA;</code></pre>&#xA;",4405639,"",,"",,2019-07-21T18:13:54,"","",,1,,,
57166016,2,,57139850,2019-07-23T14:06:59,,0,,"<p>It looks like you are setting the timeout to 20 sec <code>this.timeout(20000);</code>, and in your <code>it</code> step the first thing you do is pause for 20 sec <code>app.client.pause(20000)</code> so that the timeout is reached before you try to setValue. Which would explain the output <code>Error: Timeout of 20000ms exceeded</code>. </p>&#xA;&#xA;<p>But I experienced a similar error when I was getting started with spectron. I saw application launched properly and I could view login page but when I tried to interact with input fields I got: <code>Error: unable to locate element.</code> I tried using <code>app.client.pause()</code> to eliminate the chance of a timing issue but that didn't help. </p>&#xA;&#xA;<p><strong>Spectron does <code>windowByIndex(0)</code> and you as the test author need to manage the number of windows in your electron application</strong>. In our application there are a number of developer plugins (e.g. Devotion, React, MobX) that create their own window. </p>&#xA;&#xA;<p>To diagnose the problem I used a wait strategy that would pause until <code>app.client.getWindowCount()</code> was equal to 4. But that wasn't a great solution because when new dev plugins were added later it would start to fail. </p>&#xA;&#xA;<p>There was another tricky part. I couldn't just launch the app and simply tell it to focus on the fifth window. Because when the app first was initialized only 3 windows existed. It took a while for the last 2 windows to be initialized, and it took even more time for the page to be rendered. This required us to implement a better wait strategy so that we did not attempt to interact with the app before it was ready.</p>&#xA;&#xA;<p>This solution may or may not work for you, but it has been solid for us. After initializing the client I use a function called waitUntilWindow and pass it the urlPart that is associated with our login page then do <code>app.client.windowByIndex</code> to set focus on the proper window. At that point I am able to interact with input fields and <code>.setValue</code> works like normal. </p>&#xA;&#xA;<p>I do apologize if this information has been more confusing than helpful. I have struggled to get going with spectron, but it remains the best option for UI testing electron apps. Grace and peace brother. </p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>await waitUntilWindow(app, 'bundle=login', 'Login window never appeared.', 15000);&#xD;&#xA;&#xD;&#xA;export async function waitUntilWindow(app, urlPart, msg, timeoutMs = 15000, interval = 150) {&#xD;&#xA;  await app.client.waitUntil(&#xD;&#xA;    async () =&gt; {&#xD;&#xA;      return selectWindow(app, urlPart);&#xD;&#xA;    },&#xD;&#xA;    timeoutMs,&#xD;&#xA;    msg || `Didn't see window with url part ${urlPart} in ${timeoutMs} ms.`,&#xD;&#xA;    interval&#xD;&#xA;  );&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Will return true if found the window with certain urlPart text in URL,&#xD;&#xA;// or false if it did not.&#xD;&#xA;export async function selectWindow(app, urlPart) {&#xD;&#xA;  const windowCount = await app.client.getWindowCount();&#xD;&#xA;  for (let i = 0; i &lt; windowCount; i++) {&#xD;&#xA;    await app.client.windowByIndex(i);&#xD;&#xA;    const url = await app.client.getUrl();&#xD;&#xA;    if (url.includes(urlPart)) {&#xD;&#xA;      return true;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  return false;&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",2664570,"",,"",,2019-07-23T14:06:59,"","",,1,,,
57211071,2,,56462501,2019-07-25T22:50:44,,0,,"<p>Solution1: &#xA;You should be able to do it with ""extraResources"" param, put your .dll under resources folder, then create config param named ""extraResources"" under targeted dist. </p>&#xA;&#xA;<p>The installation process should copy the file(s) to app’s resources directory</p>&#xA;&#xA;<p><a href=""https://www.electron.build/configuration/contents#extraresources"" rel=""nofollow noreferrer"">https://www.electron.build/configuration/contents#extraresources</a></p>&#xA;&#xA;<p>Solution2:&#xA;You can download .dll file from a web server then move it to the desired place with fs.</p>&#xA;",502649,"",502649,"",2019-07-25T22:57:19,2019-07-25T22:57:19,"","",,1,,,
57215287,2,,57214887,2019-07-26T07:37:51,,0,,"<p>I'm afraid that this is not possible from out of Electron without the use of any OS specific, native stuff. In theory, you could apply a system-wide hook on the respective functions for registering the shortcuts and work around that. Another option would be a low level keyboard hook because then you wouldn't have to register ""official"" listeners at all.</p>&#xA;&#xA;<p>Other than that, i don't see how this would be possible. Quote from the globalShortcut documentation: </p>&#xA;&#xA;<blockquote>&#xA;  <p>This behavior is intended by operating systems, since they don't want applications to fight for global shortcuts.</p>&#xA;</blockquote>&#xA;&#xA;<p>Here'd be a solution for Windows based systems: <a href=""https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms644985(v%3Dvs.85)"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms644985(v%3Dvs.85)</a> using SetWindowsHookEx with the WH_KEYBOARD_LL flag.</p>&#xA;&#xA;<p>So to conclude, your best bet is to find a method (presumably a low-level keyboard hook) that will not utilize the globalShortcut API at all but instead implement your own listener in an OS specific fashion.</p>&#xA;",5210630,"",,"",,2019-07-26T07:37:51,"","",,1,,,
57226616,2,,57224926,2019-07-26T20:25:51,,2,,"<p>When creating a new Electron window using <code>new BrowserWindow</code>, it is possible to have mouse click events captured even when the window is not focused by adding:</p>&#xA;&#xA;<pre><code>acceptFirstMouse: true&#xA;</code></pre>&#xA;&#xA;<p>to the <a href=""https://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer"">BrowserWindow options</a>.</p>&#xA;&#xA;<p>As for capturing mouse hover events, I'm afraid this is not possible <em>out of the box</em>.</p>&#xA;",11843313,"",,"",,2019-07-26T20:25:51,"","",,1,,,
57232343,2,,57231774,2019-07-27T12:54:21,,1,,"<p>You can create a Promise and get return value from it</p>&#xA;&#xA;<pre><code>function _testConnection( _host, _user, _password, _database) {&#xA;  return new Promise((resolve, reject) =&gt; {&#xA;    let status = false;&#xA;    let connection = mysql.createConnection({&#xA;      host: _host,&#xA;      user: _user,&#xA;      password: _password,&#xA;      database: _database&#xA;    });&#xA;&#xA;    connection.connect((err) =&gt; {&#xA;      status = !err;&#xA;      connection.destroy();&#xA;      resolve(status)&#xA;    });&#xA;  })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and you can call this function</p>&#xA;&#xA;<pre><code>_testConnection(...).then(status =&gt; {&#xA;  console.log(status)&#xA;})&#xA;</code></pre>&#xA;",2303610,"",,"",,2019-07-27T12:54:21,"","",,1,,,
57058495,2,,57054359,2019-07-16T13:33:21,,0,,"<p>In your <code>main.js</code> file, you can put the following code:</p>&#xA;&#xA;<pre><code>//Uses node.js process manager&#xA;const electron = require('electron');&#xA;const child_process = require('child_process');&#xA;const dialog = electron.dialog;&#xA;&#xA;// This function will output the lines from the script &#xA;// and will return the full combined output&#xA;// as well as exit code when it's done (using the callback).&#xA;function run_script(command, args, callback) {&#xA;    var child = child_process.spawn(command, args, {&#xA;        encoding: 'utf8',&#xA;        shell: true&#xA;    });&#xA;    // You can also use a variable to save the output for when the script closes later&#xA;    child.on('error', (error) =&gt; {&#xA;        dialog.showMessageBox({&#xA;            title: 'Title',&#xA;            type: 'warning',&#xA;            message: 'Error occured.\r\n' + error&#xA;        });&#xA;    });&#xA;&#xA;    child.stdout.setEncoding('utf8');&#xA;    child.stdout.on('data', (data) =&gt; {&#xA;        //Here is the output&#xA;        data=data.toString();   &#xA;        console.log(data);      &#xA;    });&#xA;&#xA;    child.stderr.setEncoding('utf8');&#xA;    child.stderr.on('data', (data) =&gt; {&#xA;        // Return some data to the renderer process with the mainprocess-response ID&#xA;        mainWindow.webContents.send('mainprocess-response', data);&#xA;        //Here is the output from the command&#xA;        console.log(data);  &#xA;    });&#xA;&#xA;    child.on('close', (code) =&gt; {&#xA;        //Here you can get the exit code of the script  &#xA;        switch (code) {&#xA;            case 0:&#xA;                dialog.showMessageBox({&#xA;                    title: 'Title',&#xA;                    type: 'info',&#xA;                    message: 'End process.\r\n'&#xA;                });&#xA;                break;&#xA;        }&#xA;&#xA;    });&#xA;    if (typeof callback === 'function')&#xA;        callback();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now, you can execute arbitary command (the example is from windows command prompt, but the funtion is universal) by calling:</p>&#xA;&#xA;<pre><code>  run_script(""dir"", [""/A /B /C""], null);&#xA;</code></pre>&#xA;&#xA;<p>The parameters of your command are in fact an array <code>[""/A /B /C""]</code>, and the last parameter is callback to be executed, you can provide <code>null</code> as parameter, if special callback function is not needed.</p>&#xA;",632524,"",,"",,2019-07-16T13:33:21,"","",,2,,,
57105203,2,,57100685,2019-07-19T03:37:26,,1,,"<p>sorry my answer to the other question wasn't clear enough (it was 2 years ago! I don't remember it that well but I'll give it a shot)</p>&#xA;&#xA;<p>This is the documentation for <a href=""https://electronjs.org/docs/api/web-contents"" rel=""nofollow noreferrer"">webcontents</a> and <a href=""https://electronjs.org/docs/api/ipc-main"" rel=""nofollow noreferrer"">IPCMain</a></p>&#xA;&#xA;<p>Here's what I have in my main.development.js (globals for the mainWindow and ipc communication):</p>&#xA;&#xA;<pre><code>mainWindow.on('focus', () =&gt; {&#xA;globalShortcut.register('CmdorCtrl+F', () =&gt; {&#xA;  mainWindow.webContents.send('find_request', '');&#xA;  });&#xA;});&#xA;&#xA;mainWindow.webContents.on('found-in-page', (event, result) =&gt; {&#xA;if (result.finalUpdate) {&#xA;  mainWindow.webContents.stopFindInPage('keepSelection');&#xA;}&#xA;});&#xA;ipcMain.on('search-text', (event, arg) =&gt; {&#xA;  mainWindow.webContents.findInPage(arg);&#xA;});&#xA;&#xA;mainWindow.on('blur', () =&gt; {&#xA;   globalShortcut.unregister('CmdorCtrl+F');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then I made an ipc listener for CmdorCtrl+F:</p>&#xA;&#xA;<pre><code>ipcRenderer.on('find_request', () =&gt; {&#xA;  const modalbox = document.getElementById('modalbox');&#xA; if (modalbox.style.display === 'block') {&#xA;   modalbox.style.display = 'none';&#xA;} else {&#xA;  modalbox.style.display = 'block';&#xA; }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then I made a modal searchbox:</p>&#xA;&#xA;<pre><code>const searchBox = (&#xA;  &lt;div&#xA;    id=""modalbox""&#xA;    style={{ display: 'none', position: 'fixed', zIndex: 1 }}&#xA;  &gt;&lt;input type=""text"" onChange={Calls.searchPage} /&gt;&#xA;  &lt;/div&gt;);&#xA;</code></pre>&#xA;&#xA;<p>The onchange sends the input text to the ipc listener:</p>&#xA;&#xA;<pre><code>static searchPage(event) {&#xA;  ipcRenderer.send('search-text', event.target.value);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I hope this is enough for you to get it fixed :)</p>&#xA;",1177244,"",,"",,2019-07-19T03:37:26,"","",,2,,,
57107616,2,,57104901,2019-07-19T07:32:06,,0,,"<p>Though the code and the question could be better phrased, your intention is to read from a source and save that JSON to a destination under a new filename.</p>&#xA;&#xA;<p>I've kept it without introducing async/await so you can follow through the same logic as you initially supplied.</p>&#xA;&#xA;<p>The issue with the <code>xhr</code> request is that since the application is an <code>electron</code> app, you don't need to fetch, as the files are based locally on the app.</p>&#xA;&#xA;<p>If you wish to fetch an external JSON file, say an <code>api</code> or external <code>FS</code>, then you will need to include a xhr module/call for that.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const fs = require('fs')&#xA;&#xA;const files = [{&#xA;  source: ""./assets/json/adminconfig.json"",&#xA;  destination: ""./bot/AdminOptions/Config.json""&#xA;}, {&#xA;  source: ""./assets/json/adminmessages.json""&#xA;  destination: ""./bot/AdminOptions/Messages.json""&#xA;}]&#xA;&#xA;// bot reads a config &#xA;// and then saves the content of source to destination&#xA;const create_bot = () =&gt; {&#xA;&#xA;  // note: you could make a symbolic link &#xA;  // between the data directory and the output&#xA;  // but that's up to you&#xA;  // &#xA;  // e.g.&#xA;  // const filenames = fs.readdir(data_directory).then((error, filenames) =&gt; filenames)&#xA;&#xA;  // we iterate through each file_object&#xA;  const filenames = files.forEach(file_object =&gt; {&#xA;&#xA;    // read the source&#xA;    fs.readFile(file_object.source, ""utf-8"")&#xA;      .then((err, content) =&gt; {&#xA;        if (err) {&#xA;          console.error(`An error ocurred reading the file: ${err.message}`)&#xA;          throw new Error(err);&#xA;          return&#xA;        }&#xA;&#xA;        // write the file&#xA;        // (destination, content, encoding) =&gt; callback&#xA;        fs.writeFile(file_object.destination, content, ""utf-8"")&#xA;          .then((err) =&gt; {&#xA;            if (err) {&#xA;              console.error(`An error ocurred updating the file: ${err.message}`)&#xA;              throw new Error(err);&#xA;              return&#xA;            }&#xA;            console.log(""success"")&#xA;        }&#xA;    })&#xA;  })&#xA;}&#xA;&#xA;create_bot();&#xA;</code></pre>&#xA;",2312051,"",,"",,2019-07-19T07:32:06,"","",,2,,,
57173007,2,,57172564,2019-07-23T22:30:09,,1,,"<ol>&#xA;<li><p>Only renderer process will affected. Main process will have access to node.js api all time.</p></li>&#xA;<li><p>Exposing node.js api into renderer process reveals security issue to local system - this means any XSS in renderer process can have system access (like <code>fs</code>, or <code>child_process</code>). Normally renderer process is sandboxed so XSS is limited to its scope.</p></li>&#xA;<li><p>Even after disabling node integration, <code>preload</code> script can access node.js all times. Preload script can be used to prepare interface to renderer process exposes only needed access / limit, verify input attacks.</p></li>&#xA;</ol>&#xA;",2742189,"",,"",,2019-07-23T22:30:09,"","",,3,,,
57126289,2,,57115837,2019-07-20T15:51:10,,1,,"<p>So let me show what I do, maybe that will help.</p>&#xA;&#xA;<p>Code to create a window. Note the <code>webPreferences</code> settings</p>&#xA;&#xA;<pre><code>app.on('ready', function () {&#xA;  mainWindow = new BrowserWindow({&#xA;    show: false,&#xA;    width: 1024,&#xA;    height: 768,&#xA;    backgroundColor: '#2C3E50',&#xA;    center: true,&#xA;    webPreferences: {&#xA;      nodeIntegration: true,&#xA;      devTools: true&#xA;    }&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>Without <a href=""https://electronjs.org/docs/tutorial/application-debugging"" rel=""nofollow noreferrer"">devtools</a> you can not see error output or inspect content. There are other ways to open <code>devTools</code> through menu and keyboard commands.</p>&#xA;&#xA;<p>Then, assuming you have installed the script or lib through <code>npm</code> you can just do the following without specifying a path, otherwise you will need a relative path</p>&#xA;&#xA;<pre><code>const THREE = require('three')&#xA;</code></pre>&#xA;",840992,"",,"",,2019-07-20T15:51:10,"","",,5,,,
57153715,2,,57153546,2019-07-22T21:06:18,,1,,"<p>For the save function you should either return a <code>promise</code>, or <code>callback</code>, or use <code>writeFileSync</code>(not recommended);</p>&#xA;&#xA;<p>Using Promise:</p>&#xA;&#xA;<pre><code>function saveData() {&#xA;  return new Promise((res, rej) =&gt; {&#xA;    fs.writeFile('data.txt', 'Test Data Output', function (err) {&#xA;      if (err) return rej(err);&#xA;      res();&#xA;    });&#xA;  })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>then close the window, you can use <code>async-await</code> here also:</p>&#xA;&#xA;<pre><code>function closeWin() {&#xA;  saveData()&#xA;  .then(()=&gt;{&#xA;    const remote = require('electron').remote;&#xA;    var win= remote.getCurrentWindow();&#xA;    win.close();&#xA;  })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Async-await version:</p>&#xA;&#xA;<pre><code>async function closeWin() {&#xA;  await saveData();&#xA;  const remote = require('electron').remote;&#xA;  var win= remote.getCurrentWindow();&#xA;  win.close();&#xA;}&#xA;</code></pre>&#xA;",1203844,"",1203844,"",2019-07-22T21:28:35,2019-07-22T21:28:35,"","",,5,,,
57071713,2,,57069210,2019-07-17T08:31:21,,2,,"<p>Are you using electron <a href=""https://electronjs.org/docs/api/auto-updater"" rel=""nofollow noreferrer"">auto-updater</a> module? from the API <a href=""https://electronjs.org/docs/api/auto-updater#autoupdatersetfeedurloptions"" rel=""nofollow noreferrer"">documentation</a>, I can see that they don't support.</p>&#xA;&#xA;<p>On the other hand, if you are using <a href=""https://www.npmjs.com/package/electron-updater"" rel=""nofollow noreferrer"">electron-updater</a> module, make sure that you are following the <a href=""https://www.electron.build/configuration/publish#recommended-github-releases-workflow"" rel=""nofollow noreferrer"">recommended release workflow</a>, and you should not use setFeedURL check the note <a href=""https://www.electron.build/auto-update#quick-setup-guide"" rel=""nofollow noreferrer"">here</a></p>&#xA;&#xA;<p><strong>Updated:</strong></p>&#xA;&#xA;<p>If you are using <a href=""https://www.npmjs.com/package/electron-updater"" rel=""nofollow noreferrer"">electron-updater</a> and you are publishing to a private repository, you will need to make sure that your token will be available within the <code>app-update.yml</code> file, that's why many say it's not recommended, if the token is not set in your <code>app-update.yml</code> file you will get 404.</p>&#xA;&#xA;<p>For <a href=""https://www.npmjs.com/package/electron-updater"" rel=""nofollow noreferrer"">electron-updater</a> to auto add your token to the <code>app-update.yml</code> file the token should be set within the publish section like the following:</p>&#xA;&#xA;<pre><code>  ""publish"": [&#xA;    {&#xA;      ""provider"": ""github"",&#xA;      ""private"": true,&#xA;      ""owner"": ""&lt;github_owner&gt;"",&#xA;      ""repo"": ""&lt;repo_name&gt;"",&#xA;      ""token"": ""&lt;your github token&gt;""&#xA;    }&#xA;  ],&#xA;</code></pre>&#xA;&#xA;<p>This will produce a <code>app-update.yml</code> file like the following:</p>&#xA;&#xA;<pre><code>owner: &lt;github_owner&gt;&#xA;repo: &lt;repo_name&gt;&#xA;provider: github&#xA;private: true&#xA;token: &lt;your github token&gt;&#xA;updaterCacheDirName: electron-updater-private-updater&#xA;&#xA;</code></pre>&#xA;&#xA;<p>Check this <a href=""https://imgur.com/a/p4fG8oG"" rel=""nofollow noreferrer"">small video</a> </p>&#xA;&#xA;<p>Here is my code <a href=""https://github.com/linuxjuggler/electron-auto-update-example"" rel=""nofollow noreferrer"">https://github.com/linuxjuggler/electron-auto-update-example</a> check the <code>electron-builder.json</code> file.</p>&#xA;&#xA;<p><strong>Update 2</strong></p>&#xA;&#xA;<p>Based on the note mentioned in the <a href=""https://www.electron.build/auto-update#quick-setup-guide"" rel=""nofollow noreferrer"">Quick Setup Guide</a> section, you should never call <strong>setFeedURL</strong>.</p>&#xA;",1013493,"",1013493,"",2019-07-25T08:41:31,2019-07-25T08:41:31,"","",,11,,,
52758740,2,,52741110,2018-10-11T11:17:46,,1,,"<p>I found a solution like below code : </p>&#xA;&#xA;<p>Firstly when I call <code>app.start()</code> , </p>&#xA;&#xA;<p><code>start()</code> function calls <code>_checkWindowReady()</code> </p>&#xA;&#xA;<p><code>_checkWindowReady</code> calls <code>waitFor()</code> </p>&#xA;&#xA;<p>And finally <code>waitFor</code> calls <code>_callClientAPI()</code> and it looks for specific function and element.</p>&#xA;&#xA;<pre><code> async start() {&#xA;    try {&#xA;      await this.spectron.start();&#xA;      await this.focusOnWindow(0);&#xA;      return this._checkWindowReady();&#xA;    } catch (err) {&#xA;      throw err;&#xA;    }&#xA;  }&#xA;&#xA; _checkWindowReady() {&#xA;    return this.waitFor(this.spectron.client.getHTML, '[id=""myApp.main.body""]');&#xA;  }&#xA;&#xA; waitFor(func, args) {&#xA;    return this._callClientAPI(func, args);&#xA;  }&#xA;&#xA; _callClientAPI(func, args) {&#xA;    let trial = 1;&#xA;    return new Promise(async(res, rej) =&gt; {&#xA;      while (true) {&#xA;        if (trial &gt; this._pollTrials) {&#xA;          rej(`Could not retrieve the element in ${this._pollTrials * this._pollTimeout} seconds.`);&#xA;          break;&#xA;        }&#xA;&#xA;        let result;&#xA;        try {&#xA;          result = await func.call(this.client, args, false);&#xA;        } catch (e) { }&#xA;&#xA;        if (result &amp;&amp; result !== '') {&#xA;          res(result);&#xA;          break;&#xA;        }&#xA;&#xA;        await this.wait();&#xA;        trial++;&#xA;      }&#xA;    });&#xA;  }&#xA;</code></pre>&#xA;",7819964,"",7819964,"",2018-10-11T12:04:39,2018-10-11T12:04:39,"","",,0,,,
52768863,2,,52768556,2018-10-11T21:01:15,,4,,"<p>Unless someone has built a specific electron api to do this (which I can't find), then from electron...no. However, the beauty of electron being built with node.js, means that any node module should be able to do the job for you.</p>&#xA;&#xA;<p>For example, <a href=""https://github.com/sindresorhus/ps-list"" rel=""nofollow noreferrer"">ps-list</a> should be able to get you all currently running processes. </p>&#xA;&#xA;<pre><code>psList().then(processes =&gt; {&#xA;  console.log(processes)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Which gives a list for me, including:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/57wnr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/57wnr.png"" alt=""chrome process""></a></p>&#xA;&#xA;<p>Just be aware that you need node access from the electron thread attempting to use this lib.</p>&#xA;&#xA;<p>This can easily be abstracted to do a name search in the list for you to get your desired functionality.</p>&#xA;",277697,"",277697,"",2018-10-12T02:13:21,2018-10-12T02:13:21,"","",,0,,,
52789973,2,,52783261,2018-10-13T05:54:57,,0,,"<blockquote>&#xA;  <p>Can I make electron send data when app starts</p>&#xA;</blockquote>&#xA;&#xA;<p>Not immediately, because your <code>BrowserWindow</code> isn't ready yet. But you can use <a href=""https://electronjs.org/docs/api/web-contents#event-dom-ready"" rel=""nofollow noreferrer""><code>'dom-ready'</code></a> event to be in the right time.&#xA;</p>&#xA;&#xA;<pre><code>win.webContents.on('dom-ready', () =&gt; {&#xA;  let data = ...&#xA;  win.webContents.send('sending', data)&#xA;})&#xA;win.loadURL(...)&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-10-13T05:54:57,"","",,0,,,
52796748,2,,52795557,2018-10-13T19:51:11,,3,,"<p>You can use the incoming events <code>focus</code> and <code>blur</code> of the <code>BrowserWindow</code> to handle the focusing/bluring (see possible event <a href=""https://electronjs.org/docs/all#event-focus"" rel=""nofollow noreferrer"">here</a>):</p>&#xA;&#xA;<pre><code>const wnd = new BrowserWindow();&#xA;&#xA;wnd.on('focus', () =&gt; {&#xA;    // Do your required stuff, when the window is focused&#xA;}); &#xA;&#xA;wnd.on('blur', () =&gt; {&#xA;    // Do your required stuff, when the window loose the focus&#xA;});&#xA;</code></pre>&#xA;",4661771,"",,"",,2018-10-13T19:51:11,"","",,0,,,
52798910,2,,52798281,2018-10-14T02:11:02,,1,,"<p>There are plenty of ways of doing. The way that I enjoy more is to make calls from the front to the back via <a href=""https://electronjs.org/docs/api/ipc-renderer"" rel=""nofollow noreferrer"">IPC</a> and manage the connection at the ""back"". Sounds better to me as a web developer, don't mix front code with back-end code.</p>&#xA;&#xA;<p>To make things easier, you can make a standard set of functions to make the communications using IPC easier.</p>&#xA;",4259351,"",,"",,2018-10-14T02:11:02,"","",,0,,,
52805179,2,,52804800,2018-10-14T17:20:56,,0,,"<p>The problem with your code is that you are using <code>fs.readFile</code> which is of asynchronous in nature. that means the script won't wait for the json read operation to complete, it will continue executing line by line. So after readFile your code then directly executes the <code>client.on</code> event. Here is an interesting read about <a href=""https://eloquentjavascript.net/11_async.html"" rel=""nofollow noreferrer""> asynchronous javascript</a></p>&#xA;&#xA;<p>Solutions to your problems is that you either handle async nature of code or use <code>readFileSync</code>(<a href=""https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options"" rel=""nofollow noreferrer"">documentation</a>) which is the synchronous version of <code>readFile</code>.</p>&#xA;",3660991,"",,"",,2018-10-14T17:20:56,"","",,0,,,
52821147,2,,52789124,2018-10-15T16:37:07,,0,,"<p>I ended up using a node package to detect the network type.</p>&#xA;&#xA;<pre><code>const network = require('network');&#xA;network.get_active_interface(function(err, obj) {&#xA;    // obj.type is the network type&#xA;    // 'Wireless' for wifi&#xA;    // 'Wired' for ethernet &#xA;});&#xA;</code></pre>&#xA;",7750163,"",,"",,2018-10-15T16:37:07,"","",,0,,,
52827201,2,,52808320,2018-10-16T02:39:43,,1,,"<p>I didn't add chrome debugger extension for VSCode.<br>&#xA;It's now working with this settings, with <code>run-script</code> args.</p>&#xA;&#xA;<pre><code>{&#xA;    ""version"": ""0.2.0"",&#xA;    ""configurations"": [&#xA;        {&#xA;            ""type"": ""node"",&#xA;            ""request"": ""launch"",&#xA;            ""name"": ""Launch via NPM"",&#xA;            ""cwd"": ""${workspaceRoot}"",&#xA;            ""runtimeExecutable"": ""npm"",&#xA;            ""runtimeArgs"": [&#xA;                ""run-script"",&#xA;                ""dev""&#xA;            ],&#xA;            ""port"": 9229&#xA;        },&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;",5734187,"",,"",,2018-10-16T02:39:43,"","",,0,,,
52831299,2,,52814192,2018-10-16T08:39:36,,1,,"<p>Sending message from Main to Renderer should be done by sending to a <em>specific</em> <code>webContents</code>. That's why <code>event.sender.send('myMSG', 'hello')</code> works, while <a href=""https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendchannel-arg1-arg2-"" rel=""nofollow noreferrer""><code>ipcRenderer.send</code></a> not. The latter sends <em>from</em> Renderer <em>to</em> Main as stated in docs (and also, cannot be accessed from Main process as your Error told you it's undefined).</p>&#xA;&#xA;<p>As explainded in <code>ipcMain</code>'s <a href=""https://electronjs.org/docs/api/ipc-main#sending-messages"" rel=""nofollow noreferrer"">docs</a> you should access the <code>webContents</code> you want to send to and call <code>send</code> on that.</p>&#xA;&#xA;<p>So to correct your code you can&#xA;</p>&#xA;&#xA;<ul>&#xA;<li><p>Pass a reference to the main window to <code>myClass</code> and call <code>send</code> on that</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>class myClass {&#xA;  constructor(args) {&#xA;    // ...&#xA;    this.mainWindow = args.win&#xA;  }&#xA;  // ...&#xA;  async Test() {&#xA;    this.mainWindow.webContents.send('myMessage', 'Hello');&#xA;  }&#xA;}&#xA;</code></pre></li>&#xA;<li><p>Or <code>send</code> to the actually focused window (<a href=""https://electronjs.org/docs/api/browser-window#browserwindowgetfocusedwindow"" rel=""nofollow noreferrer""><code>BrowserWindow.getFocusedWindow()</code></a>) if that fits your needs</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>class myClass {&#xA;  // ...&#xA;  async Test() {&#xA;    BrowserWindow.getFocusedWindow().webContents.send('myMessage', 'Hello');&#xA;  }&#xA;}&#xA;</code></pre></li>&#xA;</ul>&#xA;",2550156,"",,"",,2018-10-16T08:39:36,"","",,0,,,
52831721,2,,52831214,2018-10-16T09:00:48,,0,,"<p>I don't know electron so well, but in node.js, you have these types of options:</p>&#xA;&#xA;<ol>&#xA;<li><p>You can find an NPM module that knows how to list out the processes running on the current computer, install that module and use its API.  For example, here's one called <a href=""https://www.npmjs.com/package/process-list"" rel=""nofollow noreferrer""><code>process-list</code></a>.  There are a bunch of others shown <a href=""https://www.google.com/search?q=npm%20windows%20process%20list&amp;rlz=1C1CHFX_enUS515US515&amp;oq=npm%20windows%20process%20list&amp;aqs=chrome..69i57j33.6167j0j7&amp;sourceid=chrome&amp;ie=UTF-8"" rel=""nofollow noreferrer"">here</a>.</p></li>&#xA;<li><p>You can find a regular Windows command line program (similar to the Unix <code>ps</code>) that can list the current Windows processes at a command line prompt and you can then use the <code>child_process</code> module in node.js to run that program from node.js and capture its output.</p></li>&#xA;<li><p>You can write your own node.js native code plugin that accesses the Windows API directly to get this process information and then return that via the plugin to your Javascript.  This is likely what the NPM module in option #1 already did.</p></li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;  <p>Can I use a Windows API</p>&#xA;</blockquote>&#xA;&#xA;<p>Yes, from a native code plugin or via some plug-in that proxies access to the Windows API for you.  Windows API access is not directly built into node.js.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Personally I would stand on the shoulders of those who have already done this work and choose from the many NPM modules that appear to have this process listing functionality already built in.  Note: in any modern OS, there are security limitations to what you can do or learn about another process without having elevated privileges.  You can generally find out what's running.</p>&#xA;",816620,"",816620,"",2018-10-16T09:06:50,2018-10-16T09:06:50,"","",,0,,,
52898960,2,,52819631,2018-10-19T19:42:22,,0,,"<p>First, bind your ajax.    </p>&#xA;&#xA;<pre><code>$.ajax({&#xA;        type: 'POST',&#xA;        url:  ""path"",&#xA;&#xA;        headers: {&#xA;&#xA;&#xA;        },&#xA;        data: {&#xA;&#xA;        },&#xA;        success: function(data) {&#xA;&#xA;&#xA;            this.setState({&#xA;                successfullmessage: true&#xA;            });&#xA;&#xA;&#xA;&#xA;&#xA;        }.bind(this),&#xA;        error: function(errMsg) {&#xA;            console.log(errMsg);&#xA;        }.bind(this),&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>inside something like this: </p>&#xA;&#xA;<pre><code> super(props);&#xA;    this.state = {&#xA;&#xA;        successfullmessage: false&#xA;&#xA;    }&#xA;&#xA;this.submitclick = this.submitclick.bind(this);&#xA;submitclick() {&#xA;&#xA;               // ajax here &#xA;&#xA;              }&#xA;</code></pre>&#xA;&#xA;<p>Then you can use this.setState inside of the success of the ajax function.</p>&#xA;&#xA;<p>Next, to navigate,  in your render() { } before return you can do this:</p>&#xA;&#xA;<pre><code>if (this.state.successfullmessage) {&#xA;        return &lt;Redirect to=""/MainMenu"" /&gt;;&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Because you have updated the state, React will automatically rerender and the Redirect will be executed provided that the boolean has been set to true. This will work with electron because the React Redirect provides paths that are compatible with Electron.</p>&#xA;",1936916,"",,"",,2018-10-19T19:42:22,"","",,0,,,
52906467,2,,52897950,2018-10-20T13:59:35,,1,,"<p>I found the root problem. &#xA;Here is the relevant <a href=""https://github.com/mapbox/node-pre-gyp/issues/278"" rel=""nofollow noreferrer"">issue</a> and <a href=""https://github.com/mapbox/node-pre-gyp/pull/279"" rel=""nofollow noreferrer"">pull request 1</a>, <a href=""https://github.com/mapbox/node-pre-gyp/pull/343"" rel=""nofollow noreferrer"">pull request 2</a> on GitHub.</p>&#xA;&#xA;<p>My steps to temporarily fixing the problem were:</p>&#xA;&#xA;<ul>&#xA;<li>Clone node-pre-gyp git repository</li>&#xA;<li><code>checkout</code> to the version sqlite3 wants(0.10.3 at the moment)</li>&#xA;<li>Apply patch from the second pull request</li>&#xA;<li>Install this patched node-pre-gyp via <code>npm install ../path/to/patched/node-pre-gyp</code> from the main project folder</li>&#xA;<li><code>npm i --build-from-source sqlite3</code>(not sure this command is needed) and <code>./node_modules/.bin/electron-rebuild</code> from the main project folder (I installed electron-rebuild)</li>&#xA;<li><p>call <code>fork</code> with electron version set, like this: </p>&#xA;&#xA;<p><code>fork('fork', [], {&#xA;    env: {&#xA;        ELECTRON_VERSION: ""3.0.5""&#xA;    }});</code></p></li>&#xA;</ul>&#xA;&#xA;<p>This is a hack, but it seems to work. Hope the problem will be fixed in upstream.</p>&#xA;&#xA;<p>edited: fixed pull request link (I used the second pull request, not the first)</p>&#xA;",10530214,"",10530214,"",2018-12-14T14:46:40,2018-12-14T14:46:40,"","",,0,,,
52916751,2,,52902903,2018-10-21T15:10:40,,3,,"<p>In the Elm #electron channel on Slack, I saw a discussion about this issue and here is a recap for anyone interested.</p>&#xA;&#xA;<ol>&#xA;<li>The issue is that 'this' is not defined in the electron renderer </li>&#xA;<li>This causes <code>scope</code> within Elm runtime to be <code>undefined</code>.</li>&#xA;<li>Possible work-around is&#xA;&#xA;<ul>&#xA;<li>uglify the compiled elm code using the instructions at <a href=""https://elm-lang.org/0.19.0/optimize"" rel=""nofollow noreferrer"">https://elm-lang.org/0.19.0/optimize</a></li>&#xA;<li>or change (this) to (this||window) at the bottom of the compiled elm.js file (Opened an issue here <a href=""https://github.com/elm/core/issues/998"" rel=""nofollow noreferrer"">https://github.com/elm/core/issues/998</a>)</li>&#xA;</ul></li>&#xA;</ol>&#xA;",1255042,"",1255042,"",2018-10-21T15:32:44,2018-10-21T15:32:44,"","",,0,,,
52928534,2,,52925833,2018-10-22T11:42:58,,2,,"<p>Dev dependencies are not included by default in electron package made with <code>electron-packager</code>.</p>&#xA;&#xA;<p>Source: <a href=""https://www.npmjs.com/package/electron-packager"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/electron-packager</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>If you put them [the node modules] in the devDependencies section of package.json, by default none of the modules related to those dependencies will be copied in the app bundles. (This behavior can be turned off with the --no-prune flag.) In addition, folders like .git and node_modules/.bin will be ignored by default. </p>&#xA;</blockquote>&#xA;",1758853,"",,"",,2018-10-22T11:42:58,"","",,0,,,
52952663,2,,52930273,2018-10-23T15:23:46,,0,,"<p>I discovered that is a versioning incompatibility. At least, in my case was.</p>&#xA;&#xA;<p>The following combination fixed my problem:</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>""electron"": ""^3.0.4""</code> with <code>""electron-packager"": ""^12.2.0""</code></p>&#xA;</blockquote>&#xA;",8593412,"",,"",,2018-10-23T15:23:46,"","",,0,,,
52757930,2,,52757309,2018-10-11T10:34:07,,0,,"<p>Got it to work! Perhaps somebody can explain why, but when I made the aspect ratio the reciprocal of 1.37, then it worked. </p>&#xA;&#xA;<p>I got that number from dividing the viewbox height and width by each other. </p>&#xA;",10448478,"",,"",,2018-10-11T10:34:07,"","",,1,,,
52790850,2,,52790763,2018-10-13T08:02:16,,0,,"<p>I guess you forgot specify $set modifier, which says to change a field's value. Try something like this:</p>&#xA;&#xA;<pre><code>db.update({userid: ""u""+uid}, {$set:{credits: credit, dailyTime: currentTime}}, {}, function(err, numReplaced){&#xA;        if(err) console.log(err);&#xA;        message.channel.send(""&lt;@""+uid+""&gt; You received your daily credit! Your now have ""+credit+"" Credit!"");&#xA;      });&#xA;</code></pre>&#xA;&#xA;<p>Please, look at <a href=""https://github.com/louischatriot/nedb#updating-documents"" rel=""nofollow noreferrer"">official docs</a> about updating documents</p>&#xA;",2265497,"",,"",,2018-10-13T08:02:16,"","",,1,,,
52800498,2,,52800272,2018-10-14T07:35:54,,0,,"<p>you can specifiy libraries to link against in the <code>binding.gyp</code>, details is in <a href=""https://stackoverflow.com/questions/50531237/node-gyp-c-import-shared-library-so"">Node-gyp/C++ import shared library (.so)</a> and <strong><a href=""https://stackoverflow.com/questions/42512623/how-to-build-nodejs-c-addon-depending-on-a-shared-library-with-relative-locati"">How to build nodejs C++ addon depending on a shared library with relative location</a></strong>. when using NAPI you use <code>node-gyp</code> as the toolchain to compile automatically, is a dependency of NAPI</p>&#xA;",5230735,"",5230735,"",2018-10-14T07:41:27,2018-10-14T07:41:27,"","",,1,,,
52814158,2,,52808901,2018-10-15T09:58:16,,0,,"<p>The problem is in your <code>wait</code> function, since node js is sigle threaded your wait function is blocking your process. You may try following code. But I really recommend you to take a look at how to write async functions in JavaScript and setInterval and setTimeout as a start.</p>&#xA;&#xA;<p>But for the time you may try this code.</p>&#xA;&#xA;<pre><code>window.onload = function () {&#xA;    // Main Script&#xA;    console.log('before');&#xA;&#xA;    // wait 3 seconds&#xA;    setTimeout(function () {&#xA;        document.getElementById('progresstext').innerHTML = ""Testing connection..."";&#xA;        bar.animate(0.15); // Number from 0.0 to 1.0&#xA;&#xA;        // wait 250 mills&#xA;        setTimeout(function () {&#xA;            var amIOnline = false;&#xA;&#xA;            if (isOnline()) {&#xA;                amIOnline = true;&#xA;            }&#xA;            console.log(""Internet Test Ran"");&#xA;&#xA;            if (!amIOnline) {&#xA;                document.getElementById('errortext').innerHTML = ""ERROR: No internet connection. Check the internet connection."";&#xA;                document.getElementById('progresstext').innerHTML = ""ERROR"";&#xA;            }&#xA;&#xA;            var isEmbyReachable = false;&#xA;            if (isReachable('******')) {&#xA;                isEmbyReachable = true;&#xA;                document.getElementById('progresstext').innerHTML = ""Connection Test: Passed"";&#xA;                //=&gt; true&#xA;            }&#xA;&#xA;            //Open Emby in the default browser&#xA;            if (amIOnline &amp;&amp; isEmbyReachable) {&#xA;                shell.openExternal(""*****"");&#xA;            }&#xA;        }, 250)&#xA;    }, 3000)&#xA;&#xA;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>You may not while or any other blocking loops to wait in JavaScript since it will block all other executions including page rendering.</p>&#xA;",7532540,"",,"",,2018-10-15T09:58:16,"","",,1,,,
52887888,2,,52887835,2018-10-19T07:44:21,,4,,"<p>Typically data is stored in the user’s “app data” folder where this directory is varies by operating system.</p>&#xA;&#xA;<p><strong>Mac OS: ~/Library/Application Support/{Your App Name (taken from the name property in package.json)}</strong></p>&#xA;&#xA;<p><strong>Windows: C:\Users\\AppData\Local{Your App Name}</strong></p>&#xA;&#xA;<p><strong>Linux: ~/.config/{Your App Name}</strong></p>&#xA;&#xA;<p>Electron provides app.getPath which returns the right directory, depending on your platform.</p>&#xA;&#xA;<p>check this link for more info <a href=""https://medium.com/cameron-nokes/how-to-store-user-data-in-electron-3ba6bf66bc1e"" rel=""nofollow noreferrer"">electron-store-data</a></p>&#xA;",7425957,"",7425957,"",2018-10-19T07:46:19,2018-10-19T07:46:19,"","",,2,,,
52806957,2,,52806805,2018-10-14T20:46:24,,0,,"<p>Use <a href=""https://github.com/TypeStrong/ts-loader"" rel=""nofollow noreferrer"">ts-loader</a> with webpack to bundle <code>.ts</code> files with config like below,</p>&#xA;&#xA;<pre><code>const path = require(""path"")&#xA;module.exports = {&#xA;  entry: './src/index.ts',&#xA;  module: {&#xA;    rules: [&#xA;      {&#xA;        test: /\.tsx?$/,&#xA;        use: 'ts-loader',&#xA;        exclude: /node_modules/&#xA;      }&#xA;    ]&#xA;  },&#xA;  resolve: {&#xA;    extensions: [ '.tsx', '.ts', '.js' ]&#xA;  },&#xA;  output: {&#xA;    filename: 'bundle.js',&#xA;    path: path.resolve(__dirname, 'dist')&#xA;  }&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>and then in your npm script include these,</p>&#xA;&#xA;<pre><code>{&#xA;    ""build-watch"": ""webpack -w"",&#xA;    ""electron"": ""electon dist/main.js""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>then start both using <a href=""https://github.com/mysticatea/npm-run-all"" rel=""nofollow noreferrer"">npm-run-all</a> (or any other tool like <a href=""https://github.com/kimmobrunfeldt/concurrently"" rel=""nofollow noreferrer"">concurrently</a>),</p>&#xA;&#xA;<pre><code>npm-run-all start build-watch electron&#xA;</code></pre>&#xA;",5182917,"",5182917,"",2018-10-14T21:00:46,2018-10-14T21:00:46,"","",,3,,,
52844602,2,,52844135,2018-10-16T22:00:49,,20,,"<p>@karthick correctly pointed out that this is a bug that disables the plugins despite <code>plugins: true</code>. <a href=""https://github.com/electron/electron/issues/12337"" rel=""nofollow noreferrer"">The Issue</a> exists <a href=""https://electronjs.org/blog/electron-3-0#other-notes"" rel=""nofollow noreferrer"">since 3.0.0</a> (September 18, 2018) and <s>remains to be fixed today</s> <strong>has finally been fixed in Version 10!</strong></p>&#xA;&#xA;<p>Update your electron version to the latest 10.X (currently only available as a nightly release) with this command to re-enable the functionality:</p>&#xA;&#xA;<pre><code>npm install electron@nightly --save-dev&#xA;</code></pre>&#xA;&#xA;<p>You can check the <code>devDependencies</code> in the <code>package.json</code> which should be found in your project folder. It should look something like this:</p>&#xA;&#xA;<pre><code>""devDependencies"": {&#xA;    ""electron"": ""nightly""&#xA;},&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong><h1>Old answer:</h1></strong></p>&#xA;&#xA;<p>As long-lasting GitHub issues tend to get rather confusing I will update this answer with the gist of the development. You can also find three workarounds at the end of the answer.</p>&#xA;&#xA;<p><strong>Updates:</strong></p>&#xA;&#xA;<ol>&#xA;<li>March 19th: <a href=""https://github.com/electron/electron/pull/17163"" rel=""nofollow noreferrer"">A fix is on the way</a>.</li>&#xA;<li>May 19th: The fix mentioned above is currently on hold&#xA;waiting for <a href=""https://github.com/electron/electron/pull/17440"" rel=""nofollow noreferrer"">better extension support</a>.</li>&#xA;<li>June 28th: <a href=""https://github.com/electron/electron/pull/17440"" rel=""nofollow noreferrer"">Better&#xA;extension support</a> is not expected to be there any time soon.  </li>&#xA;<li><p>July 16th: <a href=""https://github.com/electron/electron/pull/17163"" rel=""nofollow noreferrer"">The fix</a> is no longer being actively worked on. Quote&#xA;of the developer:</p>&#xA;&#xA;<blockquote>&#xA;  <p>The main thing I ran into trying to port over Chromium's viewer was its dependency on the chromium extension system. Electron supports only a portion of that system which made it difficult to integrate the viewer.</p>&#xA;</blockquote></li>&#xA;<li><p>July 25th: There has been significant progress with the <a href=""https://github.com/electron/electron/pull/17440"" rel=""nofollow noreferrer"">improvement of the extension support</a> which was merged and a <a href=""https://github.com/electron/electron/issues/19447"" rel=""nofollow noreferrer"">follow-up tracking issue</a> was created. This increased the likeliness of a continuation of the work on <a href=""https://github.com/electron/electron/pull/17163"" rel=""nofollow noreferrer"">the fix</a>.</p></li>&#xA;<li><p>August 28th: Right now no one is working on a fix. You can <a href=""https://www.bountysource.com/issues/56240517-enable-pdf-viewer"" rel=""nofollow noreferrer"">put a bounty on this issue over on BountySource</a> if you want to see this solved more quickly.</p></li>&#xA;<li><p>November 19th: <a href=""https://github.com/electron/electron/pull/17163"" rel=""nofollow noreferrer"">The fix</a> was closed and the branch deleted. Quote of the developer:</p>&#xA;&#xA;<blockquote>&#xA;  <p>We're still intending to one day restore the PDF viewer, but it relies on us first migrating to use Chrome's extensions library instead of our own shim, as the PDF viewer in Chromium is implemented as an extension.</p>&#xA;</blockquote></li>&#xA;<li><p>January 2nd: Still no one is working on this despite <a href=""https://www.bountysource.com/issues/56240517-enable-pdf-viewer"" rel=""nofollow noreferrer"">a bounty of $1,600 over on BountySource</a></p></li>&#xA;<li><p>January 21st: Extension support is being improved continuously (<a href=""https://github.com/electron/electron/issues/19447"" rel=""nofollow noreferrer"">tracking issue</a>) and a <a href=""https://github.com/electron/electron/pull/21794"" rel=""nofollow noreferrer"">new fix</a> has been introduced.</p></li>&#xA;<li><p>February 13th: <a href=""https://github.com/electron/electron/pull/21794"" rel=""nofollow noreferrer"">The new fix</a> has been merged and the issue has been closed. <strong>Looks like this is going to be resolved in Electron 10!</strong> Quote of the developer:</p>&#xA;&#xA;<blockquote>&#xA;  <p>This should be ready to test out in the next 10.x nightly. I'm hoping to backport to 9.x as well, though it may not end up sticking if it causes issues.</p>&#xA;</blockquote></li>&#xA;</ol>&#xA;&#xA;<p><strong>Workarounds:</strong></p>&#xA;&#xA;<ol>&#xA;<li><p>You can make it work by downgrading to the latest 2.X.X. To do that use the following command:</p>&#xA;&#xA;<pre><code>npm install electron@""&lt;3.0.0"" --save-dev&#xA;</code></pre>&#xA;&#xA;<p>Keep in mind, however, that <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/support.md"" rel=""nofollow noreferrer"">only the latest three stable major versions are supported by the Electron team</a> which means <strong>2.X.X is not receiving security patches anymore</strong>.</p></li>&#xA;<li><p>Alternatively you could call on the system to open the file. It will choose the default program assigned to PDFs:</p>&#xA;&#xA;<pre><code>shell.openItem(fullPath);&#xA;</code></pre>&#xA;&#xA;<p>Just make sure that the path (<code>fullPath</code>) is always correctly resolved with something like <code>path.resolve(app.getAppPath(), filePath)</code> as it might change when you build the app.</p></li>&#xA;<li><p>Another workaround would be to use something like <a href=""https://github.com/mozilla/pdf.js/"" rel=""nofollow noreferrer"">PDF.js</a> which doesn't quite offer the full feature set of the Chrome PDF Viewer (e.g. missing field completion) but is probably good enough for most applications. Here is a sample implementation which catches the download-event and routes it to the PDF.js-viewer:</p>&#xA;&#xA;<pre><code>const { BrowserWindow, session } = require('electron')&#xA;session.defaultSession.on('will-download', (event, item, webContents) =&gt; {&#xA;    if (item.getMimeType() === 'application/pdf' &amp;&amp; item.getURL().indexOf('blob:file:') != 0) {&#xA;        event.preventDefault();&#xA;        new BrowserWindow().loadFile(path.resolve(__dirname, `pdfjs/web/viewer.html?file=${item.getURL()}`));&#xA;    }&#xA;})&#xA;</code></pre></li>&#xA;</ol>&#xA;",7910454,"",7910454,"",2020-02-24T04:12:13,2020-02-24T04:12:13,"","",,3,,,
52812385,2,,52800755,2018-10-15T08:15:30,,1,,"<p>Use <a href=""https://electronjs.org/docs/api/web-request"" rel=""nofollow noreferrer"">WebRequest</a> and intercept any request and then return your custom response.</p>&#xA;&#xA;<p>It also takes in a filter so you can only intercept say ""/api/subscriptions"" etc.</p>&#xA;&#xA;<pre><code>const {session} = require('electron')&#xA;&#xA;session.defaultSession.webRequest.onBeforeRequest((details, callback) =&gt; {&#xA;    //Stopping original request&#xA;&#xA;    //Fetch from some file etc.&#xA;    const response = fs.readFile .... //Or wherever&#xA;&#xA;    //Make sure to call the callback with response&#xA;    callback({response})&#xA;})&#xA;</code></pre>&#xA;",4985585,"",,"",,2018-10-15T08:15:30,"","",,5,,,
52907899,2,,52907801,2018-10-20T16:45:34,,1,,"<p>Define <code>docs</code> in the global scope and assign the data after the <code>find</code> method</p>&#xA;&#xA;<pre><code>let docs;&#xA;&#xA;client.connect(async err =&gt; {&#xA;  assert.equal(null, err);&#xA;  const db = client.db(myDatabase);&#xA;  const collection = db.collection(myCollection);&#xA;  try {&#xA;    // docs is now a global variable containing all of the db collection&#xA;    docs = await collection.find({});&#xA;    myFunction();&#xA;  } catch (error) {&#xA;    // do something with the error&#xA;  }&#xA;});&#xA;&#xA;function myFunction(){&#xA;  console.log(""print docs"", docs)&#xA;}&#xA;</code></pre>&#xA;",8605960,"",,"",,2018-10-20T16:45:34,"","",,6,,,
52908670,2,,52860108,2018-10-20T18:10:54,,1,,"<p>There is a javascript library that does exactly what you're looking for. It supports 27 languages, with the limitation that in browser chinese is not supported: <a href=""https://github.com/axa-group/nlp.js"" rel=""nofollow noreferrer"">https://github.com/axa-group/nlp.js</a></p>&#xA;",2834119,"",,"",,2018-10-20T18:10:54,"","",,11,,,
59093895,2,,59032008,2019-11-28T17:28:24,,0,,"<p>I discovered the answer when examining some other features that weren't working but should have.  While I didn't find any reference to this in the bootstrap documentation, it appears as if jquery was not initializing.  I amended the jquery import as follows:</p>&#xA;&#xA;<pre><code>&lt;script src=""~/lib/jquery/dist/jquery.min.js"" onload=""window.$ = window.jQuery = module.exports;""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Now Bootstrap tooltips work as expected. </p>&#xA;",2557010,"",,"",,2019-11-28T17:28:24,"","",,0,,,
59096184,2,,59096141,2019-11-28T21:10:51,,0,,"<p>No, it unfortunately is not yet possible, with JavaScript, to determine if the user has opened a new tab in google chrome or other browsers. The only thing you could do to see this would be to check from the input system (e.g. keys pressed), but the user would probably press the <em>new tab</em> button in the browser!</p>&#xA;",12423932,"",,"",,2019-11-28T21:10:51,"","",,0,,,
59102605,2,,59094105,2019-11-29T10:01:16,,0,,"<p>I finally solve my problem</p>&#xA;&#xA;<p>I'm new with Electron, so I though that run electron-packager was necessary before publish new versions.</p>&#xA;&#xA;<p>You only need to run:</p>&#xA;&#xA;<pre><code>electron-builder --publish always&#xA;</code></pre>&#xA;&#xA;<p><strong>electron-packager</strong> packs everything inside <strong>dist</strong> folder and creates a new folder outside dist.</p>&#xA;&#xA;<p><strong>electron-builder</strong> create necessary files to publish but ignores the old version files that was created for it. But if you have that new folder created by <strong>electron-packager</strong> it'll be published too and your .exe will be very large.</p>&#xA;",11282974,"",,"",,2019-11-29T10:01:16,"","",,0,,,
59133209,2,,59047519,2019-12-02T05:38:40,,0,,<p>I didn't find any option to do the mentioned above in electron's setLoginItemSetting API also not in npm auto-launch package. So i did it by installer.nsh file. By this file when installation complete it insert value into windows registry and on uninstall it removes the value from registry. Hope this will help!</p>&#xA;,8938880,"",,"",,2019-12-02T05:38:40,"","",,0,,,
59136424,2,,54019508,2019-12-02T09:58:36,,0,,"<p>I was unable to resolved the electron-packager issue due to the dependencies on internally distributed plugins and packages. After trying multiple options I found ""electron-builder"" useful to create successful build of "".exe""  and "".appx"" for windows.</p>&#xA;&#xA;<p><strong>Requirements</strong> :</p>&#xA;&#xA;<ol>&#xA;<li>NodeJS version should be more than 8.0.</li>&#xA;<li><p>If you have any <strong>internally distributed package dependencies</strong> then please make sure to add them in package.json file like:</p>&#xA;&#xA;<p>{ ""build"": {&#xA;        ""extraFiles"": [&#xA;          ""node_modules/ionic-enterprise-couchbase-lite-electron/**/*""&#xA;        ]&#xA;    }}</p></li>&#xA;<li><p>For more information i find this useful:<a href=""https://www.electron.build/configuration/configuration"" rel=""nofollow noreferrer"">https://www.electron.build/configuration/configuration</a>      </p></li>&#xA;</ol>&#xA;",6453158,"",,"",,2019-12-02T09:58:36,"","",,0,,,
59142300,2,,59061911,2019-12-02T15:43:43,,0,,<p>Its best to use a template starter such as this one: </p>&#xA;&#xA;<pre><code>https://github.com/SimulatedGREG/vue-electron&#xA;</code></pre>&#xA;&#xA;<p>and then configure tailwindcss following the guide here: </p>&#xA;&#xA;<pre><code>https://tailwindcss.com/docs/installation/&#xA;</code></pre>&#xA;&#xA;<p>I hope that helps</p>&#xA;,4351583,"",,"",,2019-12-02T15:43:43,"","",,0,,,
59149103,2,,59132304,2019-12-03T01:48:00,,1,,<p>VS Code does not expose functionality that lets users run arbitrary JS and this is unlikely to change. Using an extension is the correct approach</p>&#xA;,306149,"",,"",,2019-12-03T01:48:00,"","",,0,,,
59154490,2,,59095399,2019-12-03T10:02:33,,0,,"<p>Okay, I got news</p>&#xA;&#xA;<p>the method "".isMaximized"" from electron don't work that much, so the app don't see if it is max or minimized. Once you know that, you apply unmaximized in a case, maximized in the other (thanks to @Khokim Mamarasulov), and you just do a boolean that change once you put one or another value, here's a sample.</p>&#xA;&#xA;<pre><code>//Minimize &amp; Maximize&#xA; $('#size-btn').click(function() {&#xA;  let window = remote.getCurrentWindow()&#xA;  if(changeState == true){&#xA;      window.unmaximize();&#xA;      console.log (""beforeUnmax :"",changeState)&#xA;      changeState = false&#xA;      console.log (""afterUnmax :"",changeState)&#xA;  }else{&#xA;      window.maximize();&#xA;      console.log (""beforeMax :"",changeState)&#xA;      changeState = true&#xA;      console.log (""afterMax :"",changeState)&#xA;&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",12453573,"",,"",,2019-12-03T10:02:33,"","",,0,,,
59154792,2,,59154242,2019-12-03T10:19:13,,1,,"<p>you can do this call app.disableHardwareAcceleration()</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require(""electron"");&#xA;&#xA;app.disableHardwareAcceleration();&#xA;&#xA;app.on(""ready"", () =&gt; {&#xA;    const window = new BrowserWindow({&#xA;        width: 800,&#xA;        height: 600,&#xA;    });&#xA;&#xA;    window.loadURL(""about:blank"");&#xA;});&#xA;</code></pre>&#xA;",1117103,"",,"",,2019-12-03T10:19:13,"","",,0,,,
59166388,2,,57701675,2019-12-03T22:32:33,,0,,"<p>For anyone new to Electron who comes across this, I came back to this project recently and found a better definition of the real problem I had.</p>&#xA;&#xA;<p>It turns out the main UI thread was being blocked by my ""loadTheData"" function, and no alternative method of using the function with Promises or otherwise could change that.</p>&#xA;&#xA;<p>This link details the issue more: <a href=""https://electronjs.org/docs/tutorial/performance#3-blocking-the-main-process"" rel=""nofollow noreferrer"">Electron: Blocking the main process</a></p>&#xA;&#xA;<p>It turns out that in order to ""concurrently load and render data one by one,"" one needs to follow the steps from the linked online guide.</p>&#xA;",11960129,"",,"",,2019-12-03T22:32:33,"","",,0,,,
59168114,2,,59168051,2019-12-04T02:29:46,,0,,<p>In order to access/set a field of an object using a variable/dynamically you need to use the <code>[]</code> syntax.&#xA;For the example given we would have something like the below if you are using es6 and above.</p>&#xA;&#xA;<pre><code>let langKey = `forum_${s_lan}`&#xA;db[langKey].find()&#xA;</code></pre>&#xA;,3357399,"",,"",,2019-12-04T02:29:46,"","",,0,,,
59170560,2,,59169904,2019-12-04T07:02:28,,1,,"<p>Browser doesn't render the changes until your current execution cycle ends. So even though you update the width of the element, browser will wait for the execution cycle to render the changes, which will occur only after your whole loop is completed.</p>&#xA;&#xA;<p>You can implement 2 different types of solutions here</p>&#xA;&#xA;<h3>Use requestAnimationFrame between loops</h3>&#xA;&#xA;<p><code>requestAnimationFrame</code> executes the callback before rendering next frame, after rendering the current frame.</p>&#xA;&#xA;<pre><code>    function processRow(row = 1) {&#xA;      for (let col = 1; col &lt; src.cols; col+=2) {&#xA;        // Your code&#xA;        currentProgress += 4;&#xA;      }&#xA;      updateProgressBar(currentProgress/maxProgress);&#xA;      if (row &lt; src.rows) {&#xA;        requestAnimationFrame(() =&gt; processRow(row + 2));&#xA;      }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<h3>Use <a href=""https://electronjs.org/docs/tutorial/multithreading"" rel=""nofollow noreferrer"">WebWorker</a></h3>&#xA;&#xA;<p>As you are not depending on DOM or making any changes to DOM for processing the image, move the whole computation part to WebWorker and post message to main thread whenever you complete a loop.</p>&#xA;&#xA;<p>In main thread you can listen to messages from WebWorker and update the progress bar accordingly</p>&#xA;",5267487,"",,"",,2019-12-04T07:02:28,"","",,0,,,
59190046,2,,59115441,2019-12-05T07:17:49,,0,,"<p>The solution for me was <a href=""https://www.electron.build/tutorials/release-using-channels.html"" rel=""nofollow noreferrer""><em>channels</em></a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong><em><code>appUpdater.channel</code> (getter and setter)</em></strong></p>&#xA;  &#xA;  <p>Define the channel which the Auto-Updater will follow (see the&#xA;  auto-update with channels tutorial) using <code>appUpdater.channel = 'beta'</code>&#xA;  or get the current channel with <code>currentChannel = appUpdater.channel</code>.</p>&#xA;</blockquote>&#xA;&#xA;<p>Note that channels are not supported when using GitHub as a provider (for now), as described in <a href=""https://www.electron.build/auto-update"" rel=""nofollow noreferrer"">electron-builder autoUpdate documentation</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>channel</code> String - Get the update channel. <strong>Not applicable for GitHub</strong>. Doesn’t return channel from the update configuration, only if was previously set.</p>&#xA;</blockquote>&#xA;&#xA;<p>You can set the channel name to anything, and can even dynamically (if needed) direct your users to pull updates from that channel.</p>&#xA;&#xA;<p>You can also edit the <code>{your-channel-name}.latest</code> file manually and add parameters that will help you determine whether the current ""asking for update"" user should consume the certain version (in the <code>update-available</code> event from the <code>updateInfo</code> parameter for example).</p>&#xA;",1573640,"",,"",,2019-12-05T07:17:49,"","",,0,,,
59191156,2,,59190265,2019-12-05T08:39:23,,0,,"<p>OK, solved it myself. It seems that the book was using the <code>showOpenDialog</code> API according to a wrong/outdated syntax. It is likely that the API used to be synchronous, but later became async by default. I had to replace the sample code </p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const getFileFromUser = exports.getFileFromUser = () =&gt; {&#xA;    const files = dialog.showOpenDialog(mainWindow, {&#xA;        properties: ['openFile'],&#xA;        filters: [&#xA;            { name: 'Text Files', extensions: ['txt'] },&#xA;            { name: 'Markdown Files', extensions: ['md', 'markdown'] }&#xA;        ]&#xA;    });&#xA;    if (files) { openFile(files[0]); }&#xA;};&#xA;&#xA;</code></pre>&#xA;&#xA;<p>with an async version </p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const getFileFromUser = exports.getFileFromUser = () =&gt; {&#xA;    dialog.showOpenDialog(mainWindow, {&#xA;        properties: ['openFile'],&#xA;        filters: [&#xA;            { name: 'Text Files', extensions: ['txt'] },&#xA;            { name: 'Markdown Files', extensions: ['md', 'markdown'] }&#xA;        ]&#xA;    }).then(result =&gt; {&#xA;        if (result.filePaths.length &gt; 0) { openFile(result.filePaths[0]); }&#xA;    }).catch(err =&gt; {&#xA;        console.log(err);&#xA;    })&#xA;};&#xA;&#xA;</code></pre>&#xA;&#xA;<p>Also the returned promise contains more content than the book sample expects.</p>&#xA;&#xA;<p>After this fix, I can see the loaded Markdown file in the panes as expected.</p>&#xA;",987846,"",,"",,2019-12-05T08:39:23,"","",,0,,,
59198291,2,,59193517,2019-12-05T15:24:35,,1,,"<p>This is likely due to nodeIntegration not being set to true in the main process. Since you are calling the require method from the renderer process (add.js) you may need to add nodeIntegration: true to your webPreferences in your main process (probably main.js). Try doing something like this:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;    width: 500, &#xA;    height: 400,&#xA;    frame: false,&#xA;    webPreferences: {&#xA;      nodeIntegration: true&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>If there are any errors coming up in the console, let us know, they will help debug the issue.</p>&#xA;",9402948,"",,"",,2019-12-05T15:24:35,"","",,0,,,
59206979,2,,59205156,2019-12-06T04:40:40,,2,,"<p>I needed to mark keytar as external (as mentioned at <a href=""https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/guide.html#native-modules"" rel=""nofollow noreferrer"">https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/guide.html#native-modules</a>)</p>&#xA;&#xA;<pre><code>// vue.config.js&#xA;module.exports = {&#xA;  pluginOptions: {&#xA;    electronBuilder: {&#xA;      // List native deps here if they don't work&#xA;      externals: ['keytar']&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Once I did that it worked properly.</p>&#xA;",2080104,"",,"",,2019-12-06T04:40:40,"","",,0,,,
59225275,2,,59224459,2019-12-07T10:59:58,,1,,"<p>Electron is based on Chromium for HTML rendering and JavaScript execution. If you open up Chrome's (or Chromium's) task manager by right clicking the tab bar and selecting ""Task Manager"", you will see that Chrome spawns a separate process for each tab, one for the basic browser functions and a ""GPU process"", which handles graphic rendering on your hardware (or software).</p>&#xA;&#xA;<p>Electron does the same: It spawns one base process, one for your page, one for rendering your page and the last one, ""React App"", for the React stuff of your application. Google uses this concept to increase Chrome's/Chromium's overall performance by splitting different tasks to different processes which are independent and thus won't block each other.</p>&#xA;&#xA;<p>This is the way Chrome/Chromium works and I believe that there would be a great benefit from cutting the number of processes (if any). However, it seems that there is no way to tell Electron to just run on one single process.</p>&#xA;",6786876,"",,"",,2019-12-07T10:59:58,"","",,0,,,
59254990,2,,59250651,2019-12-09T18:54:57,,0,,<p>The error was running <code>node node_modules\.bin\electron-builder</code>. Adding electron-builder to an npm script worked. </p>&#xA;,4593061,"",,"",,2019-12-09T18:54:57,"","",,0,,,
59255764,2,,58863116,2019-12-09T19:59:52,,0,,"<p>I ended up using a remote mysql server and used the mysql node package to do this which is very easy to use</p>&#xA;&#xA;<p><code>npm install mysql --save</code></p>&#xA;&#xA;<p><a href=""https://github.com/mysqljs/mysql"" rel=""nofollow noreferrer"">https://github.com/mysqljs/mysql</a></p>&#xA;",7052236,"",,"",,2019-12-09T19:59:52,"","",,0,,,
59271218,2,,59269879,2019-12-10T16:04:15,,1,,"<p>Please try:</p>&#xA;&#xA;<pre><code>const w = new BrowserWindow({ webPreferences: { nodeIntegration: true } })&#xA;</code></pre>&#xA;&#xA;<p>The issue can be further explored here:</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/17241"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/17241</a></p>&#xA;&#xA;<p>Essentially, the 'nodeIntegration' used to default to true. However the was introduced as a 'Breaking change' when moving to v5</p>&#xA;",4965106,"",,"",,2019-12-10T16:04:15,"","",,0,,,
59273132,2,,59272351,2019-12-10T18:11:03,,2,,"<p>As r3wt said, when you see <code>promise&lt;pending&gt;</code>, it means you have not properly awaited the return of an async function. Try changing your getFileFromUser function to be async, like this: </p>&#xA;&#xA;<pre><code>const getFileFromUser = async () =&gt; {&#xA;&#xA;    // Triggers the OS' Open File Dialog box. We also pass it as a Javascript&#xA;    // object of different configuration arguments to the function&#xA;&#xA;    //This operation is asynchronous and needs to be awaited&#xA;    const files = await dialog.showOpenDialog(mainWindow, {&#xA;        // The Configuration object sets different properties on the Open File Dialog &#xA;        properties: ['openFile']&#xA;    });&#xA;&#xA;    // If we don't have any files, return early from the function&#xA;    if (!files) {&#xA;        return;&#xA;    }&#xA;&#xA;    // Pulls the first file out of the array&#xA;&#xA;    //const file = files[0];&#xA;    // Reads from the file and converts the resulting buffer to a string&#xA;    //const content = fs.readFileSync(file).toString();&#xA;&#xA;    // Log the Files to the Console&#xA;    console.log(files)&#xA;}&#xA;</code></pre>&#xA;",8833196,"",1364007,"",2019-12-10T19:39:34,2019-12-10T19:39:34,"","",,0,,,
59275776,2,,59272023,2019-12-10T21:40:32,,0,,<p>Anyone stopping by here who has the same problem. It might be electron-reload causing the problem. Try commenting it out and run again. The comments above explains the process of coming to this conclusion. </p>&#xA;&#xA;<p>ANSWER:&#xA;Remove the following line from your main.electron.js file</p>&#xA;&#xA;<p><code>require('electron-reload')(__dirname);</code> </p>&#xA;&#xA;<p>There may be other modules that could cause the same problem. This was what solved it for me.</p>&#xA;,4925067,"",4925067,"",2019-12-11T17:21:58,2019-12-11T17:21:58,"","",,0,,,
59282597,2,,59251731,2019-12-11T09:31:12,,0,,"<p>This <a href=""https://electronjs.org/docs/tutorial/application-packaging"" rel=""nofollow noreferrer"">Electron Application Packaging</a> gives details on the asar file type.</p>&#xA;&#xA;<p>To see what's inside the app.asar file you can run the following<br>&#xA;<code>npx asar list /path/to/app.asar</code></p>&#xA;&#xA;<p>Specific to my case I am working outside electron for a http server so I needed to include the following inside <em>electron-builder.json</em> which results in these being inside the folder <code>resources/app.asar.unpacked/</code> the same folder as the <code>app.asar</code> file.</p>&#xA;&#xA;<pre><code>  ""asarUnpack"": [&#xA;    ""**/dist/procurement-app/*"",&#xA;    ""http/*.js"",&#xA;    ""node_modules/mime/*"",&#xA;    ""node_modules/mime-types/*"",&#xA;    ""node_modules/mime-db/*""&#xA;  ],&#xA;</code></pre>&#xA;",4711754,"",,"",,2019-12-11T09:31:12,"","",,0,,,
59290937,2,,59275743,2019-12-11T17:17:32,,0,,"<p>The error was with a silly one. &#xA;In index.js, I was doing</p>&#xA;&#xA;<p><code>let addon= require(""node-gyp-build"")(""./"");</code></p>&#xA;&#xA;<p>Essentially, <code>""./""</code> will not link correctly when installed with npm since <code>./</code> is the root directory of the current project not the installed. Using <code>__dirname</code> instead will properly link the addon</p>&#xA;&#xA;<p><code>let addon= require(""node-gyp-build"")(__dirname);</code></p>&#xA;&#xA;<p>Note: I also switched to using <a href=""https://github.com/prebuild/prebuildify"" rel=""nofollow noreferrer"">prebuildify</a> which means I no longer have to run npm electron-builder </p>&#xA;",4925067,"",,"",,2019-12-11T17:17:32,"","",,0,,,
59100612,2,,59063127,2019-11-29T07:39:38,,0,,"<p>You can downgrade to tls1.2 by specifying method ""TLSv1_2_method"":</p>&#xA;&#xA;<pre><code>var https = require('https');&#xA;&#xA;var options = {&#xA;  hostname: 'example.com',&#xA;  port: 443,&#xA;  path: '/',&#xA;  method: 'GET',&#xA;  secureProtocol:'TLSv1_2_method'&#xA;};&#xA;&#xA;const req = https.request(options, (res) =&gt; {&#xA;  console.log('statusCode:', res.statusCode);&#xA;  console.log('headers:', res.headers);&#xA;&#xA;  res.on('data', (d) =&gt; {&#xA;    process.stdout.write(d);&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And if the server is part of your project I would advice to fix server side instead of crippling your client app.</p>&#xA;",12396017,"",,"",,2019-11-29T07:39:38,"","",,1,,,
59246618,2,,59246374,2019-12-09T10:11:55,,2,,"<p>you have a typo there:</p>&#xA;&#xA;<pre><code>created() {&#xA;    const userInDb = UserCotroller.getUser();&#xA;    this.$store.disptach(""setUser"", userInDb);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>change this to: </p>&#xA;&#xA;<pre><code>created() {&#xA;    const userInDb = UserCotroller.getUser();&#xA;    this.$store.dispatch(""setUser"", userInDb);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>you wrote <code>disptach</code> instead of the correct one <code>dispatch</code></p>&#xA;",4966705,"",,"",,2019-12-09T10:11:55,"","",,1,,,
59274117,2,,59273124,2019-12-10T19:27:57,,0,,"<p>There seems to be a known issue with the build of <code>tfjs-node</code> on Windows <a href=""https://github.com/tensorflow/tfjs/issues/2370"" rel=""nofollow noreferrer"">here</a></p>&#xA;&#xA;<p>The solution would be to use node 10.16.3 and run the command:</p>&#xA;&#xA;<pre><code>npm rebuild @tensorflow/tfjs-node --build-from-source&#xA;</code></pre>&#xA;",5069957,"",,"",,2019-12-10T19:27:57,"","",,1,,,
59274869,2,,59274621,2019-12-10T20:27:41,,1,,"<p>Because <code>fs.readFile</code> is async and the callback passed to it is executed at a later time when the fs operation completes, <code>obj</code> is being returned from <code>loadInCurrentSongList</code> before it is populated with the songs, and therefore when <code>mediaReceived</code> is dispatched <code>songs</code> is still empty. Your debugger is fooling you a bit because it displays the updated value of <code>obj</code> after it gets populated in the <code>fs.readFile</code> callback.</p>&#xA;&#xA;<p>The hot reload works because it forces a re-render without destroying state, at which point <code>obj</code> has been mutated inside of the <code>fs.readFile</code> callback.</p>&#xA;&#xA;<p>Here's one option to manage the async nature of <code>fs.readFile</code> with a Promise such that you wait for it complete instead of mutating the <code>obj</code> returned from <code>loanInCurrentSongList</code>. Not super familiar with typescript so you'll have to update the types probably:</p>&#xA;&#xA;<pre><code>function loadInCurrentSongList() {&#xA;  return new Promise(resolve =&gt; {&#xA;    fs.readFile(""saveFile.json"", ""utf-8"", (err: any, data: any) =&gt; {&#xA;      var obj: Songs = {&#xA;        //@ts-ignore&#xA;        songs: []&#xA;      };&#xA;      if (err) {&#xA;        alert(""An error ocurred reading the file :"" + err.message);&#xA;        resolve(obj);&#xA;        return;&#xA;      }&#xA;      const newData = JSON.parse(data);&#xA;      if (newData.songs.length &gt; 0) {&#xA;        newData.songs.map((song: any) =&gt; {&#xA;          obj.songs.push(song);&#xA;        });&#xA;      }&#xA;      resolve(obj);&#xA;    });&#xA;}&#xA;&#xA;export function receiveMedia() {&#xA;  return (dispatch: Function) =&gt; {&#xA;    loadInCurrentSongList().then(songList =&gt; {&#xA;      dispatch(mediaReceived(songList));&#xA;    }&#xA;  };&#xA;}&#xA;</code></pre>&#xA;",11847125,"",,"",,2019-12-10T20:27:41,"","",,1,,,
59212037,2,,59176140,2019-12-06T11:13:16,,1,,"<p>I think looking at how the DRM's are provided on platforms may help you understand the options and let you think about how you want to approach your solution.</p>&#xA;&#xA;<p>The DRM client functionality, i.e. the DRM functionality which resides on a phone or tablet or laptop etc as opposed to the DRM server side functionality, is generally built in by the device or OS vendor when it the device or OS is being produced/manufactured. For some DRM's on some devices it is also possible to add it via a SDK.</p>&#xA;&#xA;<p>Most DRM's are used via 'native' players in mobile devices and tablets and via the browser on PC's, laptops etc so this is the usual default that you can generally rely on to be supported. Smart TV's and games consoles are more varied and can be either via browser or native depending not he device.</p>&#xA;&#xA;<p>Recently, nearly all mobile and tablet browsers have added support for browser based DRM also, but many DRM's on laptops are restricted to the browser, or more specifically the CDM (Content Decryption Module) browser add on which is DRM specific.</p>&#xA;&#xA;<p>There are DRM's which are supported outside the browser on PC's and laptops - for example Windows based devices will generally support PlayReady DRM in a way that can be accessed by applications. Microsoft provide more infomrtaiopn on this here:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://docs.microsoft.com/en-us/playready/overview/developing-applications"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/playready/overview/developing-applications</a></li>&#xA;</ul>&#xA;&#xA;<p>There is a nice diagram which summarises different devices at the above link which I've copied below also as it helps explain:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/ucA0f.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ucA0f.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>I am not aware of a similar Widevine or FairPlay support on PC's or laptops although ones may exist or be in development.</p>&#xA;&#xA;<p>So, going back to your problem, the reason that most cross platform applications use Javascript and browser technology for DRM on laptops and PC's is not really a language issue, rather it is because via the browser is the only way to access the DRM functionality on some laptops and PC's.</p>&#xA;&#xA;<p>For Windows you have the option to use the Universal Windows Platform API but this still may not give you want you are looking for and is Windows and PlayReady specific.</p>&#xA;",334402,"",,"",,2019-12-06T11:13:16,"","",,2,,,
59249969,2,,59249853,2019-12-09T13:30:44,,3,,"<p>Per the <a href=""https://electronjs.org/docs/api/browser-window"" rel=""nofollow noreferrer"">docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>tabbingIdentifier</strong> <em>String (optional)</em> - Tab group name, allows opening the window as a native tab on macOS 10.12+. Windows with the same tabbing identifier will be grouped together. This also adds a native new tab button to your window's tab bar and allows your app and window to receive the new-window-for-tab event.</p>&#xA;</blockquote>&#xA;&#xA;<p>This was <a href=""https://github.com/electron/electron/pull/9052"" rel=""nofollow noreferrer"">added in 2017</a> to allow for ""native tabs"" in OSX. In order for it to work, you must pass a <code>tabbingIdentifier</code> when creating a new BrowserWindow.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { BrowserWindow } = require('electron')&#xA;&#xA;const win = new BrowserWindow({ &#xA;   tabbingIdentifier: 'myTabs'&#xA;});&#xA;</code></pre>&#xA;",468592,"",,"",,2019-12-09T13:30:44,"","",,2,,,
59111900,2,,59106580,2019-11-29T23:19:27,,0,,"<p>The issue is similar to <a href=""https://stackoverflow.com/a/58986728/3479456"">this</a> question.</p>&#xA;&#xA;<p>Every <code>open-new-window</code> event causes you to resubscribe <code>ipcMain</code> to the <code>done-loading</code> event for the new window, but it still maintains the subscription/closure to the old window.</p>&#xA;&#xA;<p>You do not want to do <code>ipcMain.on(""done-loading"", ...)</code> inside of the the new window handler.</p>&#xA;&#xA;<p>You want to do it outside of the window handler and instead send a response back to the same webcontents by using the event argument:</p>&#xA;&#xA;<pre><code>ipcMain.on('open-new-window', (event, arg) =&gt; {&#xA;    openNewWindow();&#xA;});&#xA;&#xA;ipcMain.on('done-loading', (event, arg) =&gt; {&#xA;    event.sender.send('test', arg);&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>However, there is a <code>did-finish-load</code> event that does what you seem to want to do:</p>&#xA;&#xA;<pre><code>function openNewWindow() {&#xA;    let win = new BrowserWindow({ autoHideMenuBar: true });&#xA;    win.loadURL(__dirname + '\\new_window.html');&#xA;    win.webContents.once(""did-finish-load"", () =&gt; {&#xA;        win.webContents.send(""test"", ...);&#xA;    });&#xA;};&#xA;</code></pre>&#xA;",3479456,"",,"",,2019-11-29T23:19:27,"","",,3,,,
59253914,2,,59253771,2019-12-09T17:35:19,,1,,"<p>You can use <a href=""https://electronjs.org/docs/api/download-item"" rel=""nofollow noreferrer""><code>DownloadItem</code></a> in your main process in electron to intercept the download.</p>&#xA;&#xA;<p>Then you can call <a href=""https://electronjs.org/docs/api/download-item#downloaditemsetsavedialogoptionsoptions"" rel=""nofollow noreferrer""><code>downloadItem.setSaveDialogOptions</code></a> to modify the save dialog that will be displayed by electron.</p>&#xA;&#xA;<p>In the save options you can specify the <code>FileFilters</code> which will control from which extensions the user can choose when saving the file.</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// in your main process:&#xA;const { BrowserWindow } = require('electron');&#xA;&#xA;// create the default window&#xA;let win = new BrowserWindow();&#xA;&#xA;// handle download event&#xA;win.webContents.session.on('will-download', (event, item, webContents) =&gt; {&#xA;  // TODO: find out what the user is downloading and set options accordingly&#xA;  item.setSaveDialogOptions({&#xA;    filters: [&#xA;      // Set your allowed file extensions here&#xA;      {name: ""My Special Filter"", extensions: [""special""]},&#xA;      {name: ""Images"", extensions: [""jpg"", ""png""]&#xA;    ],&#xA;    message: ""Please pick your poison""&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",8411406,"",8411406,"",2019-12-09T17:39:27,2019-12-09T17:39:27,"","",,3,,,
59214467,2,,59214379,2019-12-06T13:50:52,,2,,"<p>There is an interesting write up on this: <a href=""https://techsparx.com/nodejs/electron/load-jquery-bootstrap.html"" rel=""nofollow noreferrer"">https://techsparx.com/nodejs/electron/load-jquery-bootstrap.html</a></p>&#xA;&#xA;<p>Essentially:</p>&#xA;&#xA;<blockquote>&#xA;  <p>The effect is that if jQuery is executing in a Node.js/CommonJS environment it does not create a global jQuery object. While Electron is a Chrome browser, it also has Node.js support including the module and module.exports objects, and the require function, and so forth. Therefore when executed under Electron, jQuery runs the first branch and does not add itself to the global object, and instead exports itself via module.exports.</p>&#xA;</blockquote>&#xA;&#xA;<p>So you need to do:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;script&gt;&#xA;    window.jQuery = window.$ = require('jquery');&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>This is because of the way jQuery loads, it ends up exporting it instead of adding it to the window global scope.</p>&#xA;",468592,"",,"",,2019-12-06T13:50:52,"","",,5,,,
59228757,2,,59228636,2019-12-07T17:51:58,,1,,"<p>You are creating your SQL query via string concatenation, which leaves it vulnerable to SQL injection and otherwise malformed queries.</p>&#xA;&#xA;<p>Your query basically ends up looking like this when the database receives it:</p>&#xA;&#xA;<p><code>INSERT INTO patient(nom, prenom, age, tel, mail, sexe, paiement) VALUES(name,prename,25,555555555,example@gmail.com,male,500)</code></p>&#xA;&#xA;<p>The issues here:</p>&#xA;&#xA;<ol>&#xA;<li>String values need to be quoted in your query</li>&#xA;<li>The <code>@</code> symbol is used for variables (when not part of a true string, or not quoted)</li>&#xA;</ol>&#xA;&#xA;<p>You need to use parameterized queries. This will resolve both of these issues <em>and</em> protect you against pretty much any SQL injection. You create placeholders in the query, then set programmatically populate them via the library.</p>&#xA;",1324345,"",1324345,"",2019-12-07T18:12:19,2019-12-07T18:12:19,"","",,5,,,
15550365,2,,15549415,2013-03-21T14:31:38,,1,,"<p>I found the answer in the node-webkit documentation.</p>&#xA;&#xA;<blockquote>&#xA;  <p>In node-webkit, you can basically do the same thing by using&#xA;  <code>window.location</code>, you can install it in the <code>onclick</code> event of a link and&#xA;  node-webkit will navigate to a new page when user clicks it. But by&#xA;  doing this you would lose everything in <code>window</code> context, you can save&#xA;  everything in cookies like old web pages, or you can save things in&#xA;  the <code>global</code> variable, which resides in Node.js's context and will live&#xA;  through your app.</p>&#xA;</blockquote>&#xA;",1682987,"",,"",,2013-03-21T14:31:38,"","",,0,,,
15462928,2,,15419985,2013-03-17T16:04:46,,3,,"<p>If you're developing a standalone client application, not a website, I wouldn't try to use their Javascript API, because it assumes it's being run on some website.</p>&#xA;&#xA;<p>You might have more luck with the <a href=""https://developers.facebook.com/tools/third-party-sdks/#nodejs"" rel=""nofollow"">unofficial Node.js APIs</a>, seeing as node-webkit allows you to make calls to any Node.js library from within the DOM.</p>&#xA;&#xA;<p>If you still have no success, try letting the user log into Facebook itself, presenting its login page in an <code>&lt;iframe&gt;</code>. Then you might be able to make HTTP calls, either through AJAX or through Node.js HTTP APIs, to call Facebook's internal APIs directly.</p>&#xA;",517371,"",,"",,2013-03-17T16:04:46,"","",,6,,,
15608662,2,,15607111,2013-03-25T06:08:46,,6,,"<p>I was able to solve this following by adding the <a href=""https://github.com/rogerwang/node-webkit/wiki/Manifest-format#node-remote"">node-remote</a> field to the package.json file if anyone else runs into this issue.</p>&#xA;",1923100,"",,"",,2013-03-25T06:08:46,"","",,5,,,
57457957,2,,57392501,2019-08-12T08:36:38,,1,,"<p>Solved, you can't write in app folder, but you can here: app.getPath('userData')</p>&#xA;&#xA;<p>Some other location are available, see more <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#appgetpathname"" rel=""nofollow noreferrer"">here</a></p>&#xA;",10345897,"",,"",,2019-08-12T08:36:38,"","",,0,,,
57464127,2,,57459082,2019-08-12T15:31:20,,0,,"<p>This problem come from the scaleMangaer of Phaser 2. So to fix this you need to go to Boot init file and to change the your scaleMode.</p>&#xA;&#xA;<p>Go to <a href=""https://phaser.io/docs/2.6.2/Phaser.ScaleManager.html"" rel=""nofollow noreferrer"">https://phaser.io/docs/2.6.2/Phaser.ScaleManager.html</a> for more informations</p>&#xA;",11916915,"",,"",,2019-08-12T15:31:20,"","",,0,,,
57480079,2,,57400027,2019-08-13T14:38:22,,0,,<p>In the end this was a visual studio build tools install error. I uninstalled visual studio using the visual studio installer and then reinstalled windows-build-tools.</p>&#xA;,7982322,"",,"",,2019-08-13T14:38:22,"","",,0,,,
57490257,2,,57478807,2019-08-14T07:44:34,,0,,"<p>How, I solved it:</p>&#xA;&#xA;<pre><code>this.http.get('http://example.com/myfile.xslx', { responseType: 'blob' })&#xA;  .subscribe((response) =&gt; {&#xA;    console.log(response); // this returns {size: 508079, type: ""application/xlsx""}&#xA;   // here goes the code for writing content into file&#xA;&#xA;    const reader = new FileReader();&#xA;    reader.readAsBinaryString(file);&#xA;&#xA;    reader.onload = (data) =&gt; {&#xA;      const csvData = reader.result;&#xA;      console.log(csvData); // here I get contect of file using file reader&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>So solution was in FileReader(). </p>&#xA;",2087238,"",,"",,2019-08-14T07:44:34,"","",,0,,,
57490520,2,,57479171,2019-08-14T08:00:11,,1,,"<p>Those <code>.d.ts</code> files are so-called ""definition files"", think of them like <code>.h</code> (header) files for C/C++ programs. Thus, you don't see any implementation.</p>&#xA;&#xA;<p>Another approach which you could implement, given you have access to <code>url_1.html</code>, is to attach an event listener to all links pointing to <code>url_2.html</code> and change the link target to <code>url_3.html</code>, like so:</p>&#xA;&#xA;<pre><code>window.addEventListener (""load"", () =&gt; {&#xA;    nodes = document.querySelectorAll ('a[href=""url_2.html""]'); // (1)&#xA;    for (int i = 0; i &lt; nodes.length; i++) {&#xA;        nodes[i].addEventListener (""click"", (e) =&gt; {&#xA;            e.preventDefault ();&#xA;            window.location.href = ""url_3.html"";                // (2)&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Two things need adjustment here: (1) is where the <strong>exact</strong> URL of <code>url_2.html</code> needs to be inserted, namely exactly as it has been specified in the <code>a</code> elements, and (2) is where you need to insert the full URL to your (local) <code>url_3.html</code>.</p>&#xA;&#xA;<p>On the other hand, if you don't have access to the <code>url_1.html</code> file, possibly because it is used on a server and cannot be modified because it is also used through ""normal"" browsers which need to load <code>url_2.html</code>, you can manipulate the navigation process from the Electron main thread, like so:</p>&#xA;&#xA;<pre><code>webcontents = win.webContents;&#xA;webcontents.on (""will-navigate"", (e, url) =&gt; {&#xA;    if (url === ""url_2.html"") {              // (1)&#xA;        e.preventDefault ();&#xA;        webcontents.loadURL (""url_3.html"");  // (2)&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The above assumes that your <code>BrowserWindow</code> object is named <code>win</code>. Also, you need to modify two things here also: (1) is where you will need to put the full, exact URL to your <code>url_2.html</code>, namely exactly how Chromium would load it, and (2) is where you need to put your full URL to <code>url_3.html</code>.</p>&#xA;",6786876,"",,"",,2019-08-14T08:00:11,"","",,0,,,
57514053,2,,57498970,2019-08-15T17:56:21,,1,,"<p>Finally, I solved it by simply using a Windows VM Image.</p>&#xA;",4919526,"",,"",,2019-08-15T17:56:21,"","",,0,,,
57544794,2,,57544623,2019-08-18T12:58:43,,0,,"<p>if you want to read all files in a directory you should use another function in fs called fs.readdir or fs.readdirSync&#xA;<br /></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// Callback&#xA;fs.readdir('/home/guest/projects', (err, files) =&gt; {&#xA;    console.log(files);&#xA;})&#xA;// Sync&#xA;fs.readdirSync('/home/guest/projects')&#xA;</code></pre>&#xA;",9237784,"",,"",,2019-08-18T12:58:43,"","",,0,,,
57574401,2,,57568133,2019-08-20T13:06:22,,0,,"<p>We (<a href=""https://www.advancedinstaller.com/msix-windows-package.html"" rel=""nofollow noreferrer"">at Advanced Installer</a>) are working on dedicated support from bundles from Advanced Installer. If you are interested, email us at <em>support@advancedinstaller.com</em> and mention this thread, my colleagues can try to help you get this done.</p>&#xA;",882875,"",,"",,2019-08-20T13:06:22,"","",,0,,,
57603102,2,,57597633,2019-08-22T06:22:26,,2,,"<p>As a temporary solution you can run <code>export CSC_IDENTITY_AUTO_DISCOVERY=false</code> before running <code>npm run pack</code> script. What it will do is disable the electron-builder to automatically fetch the signing certificate from your keychain. However, you will get this info from builder as <code>skipped macOS application code signing  reason=, see https://electron.build/code-signing CSC_IDENTITY_AUTO_DISCOVERY=false</code>&#xA;but still you will be able to run and test application after build.</p>&#xA;",10753589,"",,"",,2019-08-22T06:22:26,"","",,0,,,
57617655,2,,57613605,2019-08-22T22:18:14,,0,,"<p>I did this and then works fine.</p>&#xA;&#xA;<p><em>index.html</em></p>&#xA;&#xA;<pre><code>&lt;base href=""./""&gt;&#xA;</code></pre>&#xA;&#xA;<p>And</p>&#xA;&#xA;<p><em>tsconfig.json</em> </p>&#xA;&#xA;<p>from es2015 to es5</p>&#xA;&#xA;<pre><code>""target"": ""es5"",&#xA;</code></pre>&#xA;",1077309,"",,"",,2019-08-22T22:18:14,"","",,0,,,
57632515,2,,57609632,2019-08-23T20:14:02,,0,,<p>I've managed to solve my error without browserify by enabling <code>nodeIntegration: true</code> in main.js file (electron entry file). Then I was able to load my script (coolscript.js) which has require function inside of it to my html without problems - </p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;   require('coolscript.js')&#xA;&lt;/script&gt; &#xA;</code></pre>&#xA;,10914570,"",,"",,2019-08-23T20:14:02,"","",,0,,,
57638001,2,,57621585,2019-08-24T12:34:47,,0,,"<p>landed on a decent but partial solution, as I have not been able to find an API or true  cross platform solution.</p>&#xA;&#xA;<p>The closest I could get is by directly using <a href=""https://nodejs.org/api/process.html#process_process_dlopen_module_filename_flags"" rel=""nofollow noreferrer"">process.dlopen</a> but that still only gives a success or throws an error.&#xA;the underlying <a href=""https://github.com/nodejs/node/blob/d3b10f66bd4943f7da9aa25415ea6900d7f48086/src/node_binding.cc#L485"" rel=""nofollow noreferrer"">loader</a> does have the information <code>mp-&gt;nm_version</code>, but it is only reported though the error.</p>&#xA;&#xA;<p>So the only way found thus far is to parse that error message. limitation is that this can only work on same platform and CPU architecture as the current runtime, but it is better than nothing at all. </p>&#xA;&#xA;<p>The below will extract a native module's ABI version by catching the error message and extracting the ABI from that.</p>&#xA;&#xA;<pre><code>// try to determine the ABI version for a native module&#xA;const getNativeABI = (filename) =&gt; {&#xA;    var moduleVersion = 0&#xA;    try {&#xA;        var test = new Module(filename, null);&#xA;        process.dlopen(module, filename) //,os.constants.dlopen.RTLD_NOW);&#xA;        // if this works the node version is the same &#xA;        moduleVersion = process.versions['modules']&#xA;        // but now we need to unload it :-( &#xA;        return moduleVersion&#xA;    } catch (error) {&#xA;        var match&#xA;        var versionRegexp = /NODE_MODULE_VERSION (\d*)./gm&#xA;        var platformRegexp = /(is not a valid Win32 application|invalid ELF header|wrong ELF class)/g&#xA;        // check for ABI version mismatch &#xA;            // Uncaught Error: The module '..\bindings.node'&#xA;            // was compiled against a different Node.js version using&#xA;            // NODE_MODULE_VERSION 47. This version of Node.js requires&#xA;            // NODE_MODULE_VERSION 70. Please try re-compiling or re-installing&#xA;        match = versionRegexp.exec(error.message)&#xA;        if (match != null){&#xA;            return match[1] // first version is that of the module &#xA;        } &#xA;        // not for valid on this win32 / linux &#xA;        match = platformRegexp.exec(error.message)&#xA;        if (match != null){&#xA;            // todo: @linux : use error for elfclass to determine architecture :: wrong ELF class: ELFCLASS32&#xA;            return 0 // can't validate cross platform&#xA;        } &#xA;        // other error &#xA;        console.debug( error.message)&#xA;    }&#xA;    return moduleVersion // just in case&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>you'll need to pass in an dummy Module structure.</p>&#xA;&#xA;<pre><code>/// dummy copy of  internal function&#xA;function Module(id, parent) {&#xA;    this.id = id;&#xA;    this.exports = {};&#xA;    this.parent = parent;&#xA;    // updateChildren(parent, this, false);&#xA;    this.filename = null;&#xA;    this.loaded = false;&#xA;    this.children = [];&#xA; }&#xA;</code></pre>&#xA;",7909427,"",,"",,2019-08-24T12:34:47,"","",,0,,,
57640116,2,,54863802,2019-08-24T17:24:11,,1,,<p>I solved the problem by updating some software:</p>&#xA;&#xA;<ul>&#xA;<li>VS Code: 1.37.1</li>&#xA;<li>Chrome: 69.0.3497.128</li>&#xA;<li>Node.js: 10.11.0</li>&#xA;<li>V8: 6.9.427.31</li>&#xA;</ul>&#xA;,9112327,"",,"",,2019-08-24T17:24:11,"","",,0,,,
57642861,2,,57642667,2019-08-25T02:46:03,,0,,<p>It was <code>remote.require('electron-updater').autoUpdater.checkForUpdates()</code></p>&#xA;,11173938,"",,"",,2019-08-25T02:46:03,"","",,0,,,
57651676,2,,57634578,2019-08-26T04:14:37,,0,,"<p>The answer to my question is to utilize this method to open the fileURL because it opens the xlsx file successfully:</p>&#xA;&#xA;<pre><code> mainWindow.loadURL(url.format({&#xA; pathname:path.join(__dirname, 'dist/index.html'),&#xA;     protocol:'file',&#xA; slashes: true&#xA; }));&#xA;</code></pre>&#xA;&#xA;<p>And change every instance of ""/assets"" to ""assets"". This made the css paths (and everything else) work just fine.</p>&#xA;",2525863,"",,"",,2019-08-26T04:14:37,"","",,0,,,
57527766,2,,57526599,2019-08-16T16:02:01,,0,,"<p>Hey I think you want to execute some javascript on the content and return the value of the inner html. Here is an example from a test project I created to investigate for you.</p>&#xA;&#xA;<pre><code>mainWindow.webContents.on('did-finish-load',()=&gt;{&#xA;let code = `var promise = Promise.resolve(document.getElementById('name').innerHTML);&#xA;            promise.then(data =&gt; data)`;&#xA;mainWindow.webContents.executeJavaScript(code, true)&#xA;  .then((result) =&gt; {&#xA;    console.log(result) // will be your innherhtml&#xA;  })&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Here is <a href=""https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture"" rel=""nofollow noreferrer"">electrons documentation</a> on the matter.&#xA;Here is an <a href=""https://github.com/fk1018/electron-quick-start"" rel=""nofollow noreferrer"">example github</a> I created pulling the inner html from an element using this method.</p>&#xA;",4763604,"",4763604,"",2019-08-17T13:30:07,2019-08-17T13:30:07,"","",,1,,,
57528884,2,,57526892,2019-08-16T17:32:04,,0,,"<p>Your error indicates that your build system somehow did not transpile ES modules syntax to CommonJS syntax. Electron does not support ES modules in a native way easily (some good links summarizing this: <a href=""https://discuss.atom.io/t/does-electron-support-es6/19366/17"" rel=""nofollow noreferrer"">Link</a>, <a href=""https://stackoverflow.com/questions/51113097/electron-es6-module-import/51126482"">Link</a>, <a href=""https://stackoverflow.com/questions/35374353/es6-syntax-import-electron-require"">Link</a>, <a href=""https://stackoverflow.com/questions/55044320/does-electron-v4-support-ecmascript-modules"">Link</a>), so it cannot interpret the <code>import</code> statement at runtime.</p>&#xA;&#xA;<p>Your old .js files with ES modules seem to be the crux here, as you transpile .ts files to <code>""target"": ""es5""</code> according to tsconfig.json. In .babelrc, you configured <a href=""https://babeljs.io/docs/en/babel-preset-env"" rel=""nofollow noreferrer"">@babel/preset-env</a> like this:</p>&#xA;&#xA;<pre><code>[&#xA;  ""@babel/preset-env"", {&#xA;    ""targets"": { ""electron"": ""6.0.2"" },&#xA;    ""corejs"": ""2"",&#xA;    ""useBuiltIns"": ""usage""&#xA;  }&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>My guess is there is no transpilation to CommonJS, because you specified Electron <code>6.0.2</code> as target, which maps to a very decent Chromium version supporting ES modules - see the setting <a href=""https://babeljs.io/docs/en/babel-preset-env#modules"" rel=""nofollow noreferrer""><code>modules: auto</code></a> and <a href=""https://stackoverflow.com/questions/55792519/what-does-the-modulesauto-means-in-babel-preset-env-field"">what it means</a> for further infos.</p>&#xA;&#xA;<p>I would further isolate your problem to the main process, as you set custom Babel settings for renderer:</p>&#xA;&#xA;<p><code>webpack.config.renderer.dev.js</code>, <code>babel-loader</code>:</p>&#xA;&#xA;<pre><code>use: {&#xA;  loader: 'babel-loader',&#xA;  options: {&#xA;    ...&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Whenever you set these <code>options</code>, <code>.babelrc</code> will be completely ignored and everything from <code>options</code> taken during the webpack build including babel transformations. So for the renderer config, Babel should take its default options, which includes converting to CommonJS syntax, effectively eliminating import errors in the renderer process.</p>&#xA;&#xA;<h3>Solution</h3>&#xA;&#xA;<p>We have to bring Babel to transpile your main process .js files to CommonJS syntax. Easiest way is to change <a href=""https://babeljs.io/docs/en/babel-preset-env#modules"" rel=""nofollow noreferrer"">modules</a> option:</p>&#xA;&#xA;<pre><code>[&#xA;  ""@babel/env"", {&#xA;    ...&#xA;    ""modules"": ""cjs""&#xA;  }&#xA;],&#xA;</code></pre>&#xA;&#xA;<p>You could add this setting in a babel config for your main process or directly in the options of <code>babel-loader</code> in your main webpack config (similar to renderer webpack.config). Remember, if you do the latter, you have to add every setting from <code>.babelrc</code> in options. As an alternative to <code>modules</code> option, you could also try the <a href=""https://babeljs.io/docs/en/babel-plugin-transform-modules-commonjs"" rel=""nofollow noreferrer"">@babel/plugin-transform-modules-commonjs</a> plugin.</p>&#xA;&#xA;<p>Puh, that was a bit longer than expected. Hope you are still awake and that it helps out. Good luck!</p>&#xA;",5669456,"",5669456,"",2019-08-16T19:48:54,2019-08-16T19:48:54,"","",,1,,,
57564919,2,,57559775,2019-08-19T23:12:29,,1,,"<p>forked process by default set <code>ELECTRON_RUN_AS_NODE=1</code> and will not expose any electron specific modules: </p>&#xA;&#xA;<p>as <a href=""https://github.com/electron/electron/issues/6656"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/6656</a> says, you may need workaround by explicitly invoke process separately vice versa.</p>&#xA;",2742189,"",,"",,2019-08-19T23:12:29,"","",,1,,,
57584968,2,,57582982,2019-08-21T05:28:33,,0,,"<p>Problem is that your consumer from context API needs to just have a single children element as a function whereas you are having an array of JSX elements as children.</p>&#xA;&#xA;<p>Also since you are using the latest context API you don't need to use the Consumer component, you could simply write your code as</p>&#xA;&#xA;<pre><code>class GroupDetails extends Component {&#xA;    static contextType = UserContext;&#xA;&#xA;    componentDidMount() {&#xA;        const data = this.context;&#xA;        //  console.log(data); // { name: 'Tania', loggedIn: true }&#xA;    }&#xA;&#xA;    render() {&#xA;        return (&#xA;            &lt;React.Fragment&gt;&#xA;                {this.context.TransportGrid.GROUPS.map((value, index) =&gt; (&#xA;                    &lt;div key={value.GROUP_ID} className='GroupDetail'&gt;&#xA;                        &lt;div className='groupRow1'&gt;&#xA;                            &lt;span className='Date_label'&gt;Date:&lt;/span&gt;&#xA;                            &lt;span className='GroupDate'&gt;&#xA;                                {value.GROUP_DATE}&#xA;                            &lt;/span&gt;&#xA;&#xA;                            &lt;span className='Group_label'&gt;Group No:&lt;/span&gt;&#xA;                            &lt;span className='GroupID'&gt;{value.GROUP_ID}&lt;/span&gt;&#xA;                        &lt;/div&gt;&#xA;                        &lt;div className='groupRow2'&gt;&#xA;                            &lt;span className='Driver_label'&gt;Driver:&lt;/span&gt;&#xA;                            &lt;span className='DriverName'&gt;&#xA;                                {value.DRIVER_NAME}&#xA;                            &lt;/span&gt;&#xA;&#xA;                            &lt;span className='Reg_label'&gt;Artic:&lt;/span&gt;&#xA;                            &lt;span className='VehcileReg'&gt;&#xA;                                {value.VEHICLE_REG}&#xA;                            &lt;/span&gt;&#xA;                        &lt;/div&gt;&#xA;                    &lt;/div&gt;&#xA;                ))}&#xA;            &lt;/React.Fragment&gt;&#xA;        );&#xA;    }&#xA;}&#xA;&#xA;export default GroupDetails;&#xA;</code></pre>&#xA;",5928186,"",,"",,2019-08-21T05:28:33,"","",,1,,,
57600467,2,,57600383,2019-08-21T23:53:05,,2,,"<p>Try changing the declaration of your controller to </p>&#xA;&#xA;<pre><code>app.controller(""salesController"", function ($scope, $location, dbService) {&#xA;</code></pre>&#xA;&#xA;<p>Your dbService factory it's not an AngularJS API's, which has <code>$</code>prefix, that's why it can't inject it.</p>&#xA;&#xA;<p>Please, refer to <a href=""https://docs.angularjs.org/guide/concepts#angular_namespace"" rel=""nofollow noreferrer"">https://docs.angularjs.org/guide/concepts#angular_namespace</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>$' Prefix Naming Convention&#xA;  You can create your own services, and in fact we will do exactly that in step 11. As a naming convention, angular's built-in services, Scope methods and a few other angular APIs have a '$' prefix in front of the name. Don't use a '$' prefix when naming your services and models, in order to avoid any possible naming collisions.</p>&#xA;  &#xA;  <p>Angular Namespace&#xA;  To prevent accidental name collision, Angular prefixes names of objects which could potentially collide with $. Please do not use the $ prefix in your code as it may accidentally collide with Angular code.</p>&#xA;</blockquote>&#xA;",2430459,"",,"",,2019-08-21T23:53:05,"","",,1,,,
57617153,2,,57600153,2019-08-22T21:16:30,,3,,"<p>In case someone hits the same problem. The answer is pretty simple, from the documentation for socket.io <a href=""https://python-socketio.readthedocs.io/en/latest/server.html#cross-origin-controls"" rel=""nofollow noreferrer"">here</a>: </p>&#xA;&#xA;<blockquote>&#xA;  <p>For security reasons, this server enforces a same-origin policy by&#xA;  default. In practical terms, this means the following:</p>&#xA;  &#xA;  <ul>&#xA;  <li>If an incoming HTTP or WebSocket request includes the Origin header, this header must match the scheme and host of the connection&#xA;  URL. In case of a mismatch, a 400 status code response is returned and&#xA;  the connection is rejected.</li>&#xA;  <li>No restrictions are imposed on incoming requests that do not include the Origin header.</li>&#xA;  </ul>&#xA;  &#xA;  <p>If necessary, the cors_allowed_origins option can be used to allow&#xA;  other origins. This argument can be set to a string to set a single&#xA;  allowed origin, or to a list to allow multiple origins. A special&#xA;  value of '*' can be used to instruct the server to allow all origins,&#xA;  but this should be done with care, as this could make the server&#xA;  vulnerable to Cross-Site Request Forgery (CSRF) attacks.</p>&#xA;</blockquote>&#xA;&#xA;<p>When using electron to load the gui, the server is not the same as the python server that's doing the monitoring, thus the Bad Request (not same origin). The solution is to just modify as follows the server properties adding <code>cors_allowed_origins='*'</code>:</p>&#xA;&#xA;<pre><code>socketio.AsyncServer(async_mode='aiohttp', cors_allowed_origins='*')&#xA;</code></pre>&#xA;",4230336,"",,"",,2019-08-22T21:16:30,"","",,1,,,
57475572,2,,57474136,2019-08-13T10:09:01,,1,,"<ol>&#xA;<li>One best way is using <code>keydown</code> and <code>keyup</code> events or you can just use electron web-contents <code>before-input-event</code> event which is emitted before dispatching <code>keydown</code> and <code>keyup</code> events in the page. It can be used to catch and handle custom shortcuts that are not visible in the menu. you can check the combination of key you want to add shortcut and then add a callback.</li>&#xA;<li>If you don't want to do manual shortcut parsing there are libraries that do advanced key detection such as <a href=""https://github.com/ccampbell/mousetrap"" rel=""nofollow noreferrer"">mousetrap</a>.</li>&#xA;</ol>&#xA;",5684857,"",5684857,"",2019-08-13T10:16:10,2019-08-13T10:16:10,"","",,2,,,
57570884,2,,57518133,2019-08-20T09:45:14,,0,,"<p>In Javascript or HTML, a path starting / is an absolute path to the URLs schema, hostname &amp; port E.G <code>http://localhost</code>, <code>http://localhost:8080</code></p>&#xA;&#xA;<p>so URL of <code>/Absolute/path/to/music.mp3</code> running on localhost would become  <code>http://localhost/Absolute/path/to/music.mp3</code> now while this might not be a problem for you, you should always use absolute filesystem paths when accessing the file system. E.G <code>const player = new Audio('file:///Absolute/path/to/music.mp3');</code> this will point to the local file.</p>&#xA;&#xA;<p>However, you might run into CORS problems if that is the case you need to disable the CORS on the browser it using, in which case you need to the answers on <a href=""https://stackoverflow.com/questions/35852684/electron-chromium-disable-web-security"">Electron (chromium) disable web security</a></p>&#xA;&#xA;<p>If this does not work we need to see the exception that is being uncaught,</p>&#xA;&#xA;<p><code>player.play().catch(e =&gt; console.error(""audio play failed with: ""+e))</code> if you have the console output showed, or <code>player.play().catch(e =&gt; alert(""audio play failed with: ""+e))</code></p>&#xA;",623150,"",623150,"",2019-08-20T09:50:30,2019-08-20T09:50:30,"","",,2,,,
57535892,2,,57535359,2019-08-17T11:32:16,,1,,"<p>You could add a preload script which provides some APIs, just like the following one:</p>&#xA;&#xA;<pre><code>const { remote } = require(""electron"");&#xA;&#xA;function initialise () {&#xA;    window.Controls = {&#xA;        minimize: () =&gt; { remote.getCurrentWindow ().minimize (); },&#xA;        close: () =&gt; { remote.getCurrentWindow ().close (); },&#xA;        getBounds: () =&gt; { remote.getCurrentWindow ().getBounds (); },&#xA;        setBounds: (bounds) =&gt; { remote.getCurrentWindow ().setBounds (bounds); },&#xA;        setResizable: (resizable) =&gt; { remote.getCurrentWindow ().setResizable (resizeable); }&#xA;    };&#xA;}&#xA;&#xA;initialise ();&#xA;</code></pre>&#xA;&#xA;<p>Then, you can use the functions defined like this in your renderer process:</p>&#xA;&#xA;<pre><code>document.getElementById (""close-button"").addEventListener (""click"", (e) =&gt; {&#xA;    window.Controls.close ();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This reduces the risk of executing insecure code by just setting <code>nodeIntegration: true</code> on the <code>BrowserWindow</code>. However, all code which has access to <code>window.Controls</code> will be able to manipulate the window state.</p>&#xA;",6786876,"",,"",,2019-08-17T11:32:16,"","",,4,,,
57646713,2,,57646633,2019-08-25T14:03:01,,2,,"<p>Path is default export from path module, so your require </p>&#xA;&#xA;<pre><code>const { path } = require(""path"");&#xA;</code></pre>&#xA;&#xA;<p>should be</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;</code></pre>&#xA;&#xA;<p>and it should be <a href=""https://nodejs.org/api/path.html#path_path_normalize_path"" rel=""nofollow noreferrer""><code>path.normalize()</code></a></p>&#xA;",9624435,"",9624435,"",2019-08-25T14:04:47,2019-08-25T14:04:47,"","",,4,,,
57507392,2,,57505082,2019-08-15T09:12:09,,2,,"<p><strong>TL;DR:</strong> Enabling <code>nodeIntegration</code> only imposes risks if you load and execute code from untrusted sources, i.e. the internet or from user input.</p>&#xA;&#xA;<p>If you are completely sure that your application will only run the code you have created (and no NodeJS module loads scripts from the internet), basically, there is no to very little risk if enabling <code>nodeIntegration</code>.</p>&#xA;&#xA;<p>However, if you allow the user to run code (i.e. input and then <code>eval</code> it) or you provide plug-in APIs from which you do not have any control over the plug-ins loaded, the risk level rises because NodeJS allows any NodeJS script, ex., to manipulate the filesystem.</p>&#xA;&#xA;<p>On the other hand, if you disable <code>nodeIntegration</code>, you have no way of communicating with the main process or manipulating the <code>BrowserWindow</code>, thus cannot create custom window controls.</p>&#xA;",6786876,"",,"",,2019-08-15T09:12:09,"","",,7,,,
57528131,2,,57527356,2019-08-16T16:28:36,,1,,"<p>The first thing i would do in this case is preventing memory overhead by not ""opening"" large files at all.</p>&#xA;&#xA;<p>So something like this should work:</p>&#xA;&#xA;<pre><code>const stream = fs.createReadStream(filePath);&#xA;const workbook = new Excel.Workbook();&#xA;stream.pipe(workbook.xlsx.createInputStream());&#xA;</code></pre>&#xA;&#xA;<p>and as those <a href=""https://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options"" rel=""nofollow noreferrer"">chunks</a> block the cycle for a minor amount of time you can use this even in the javascript event loop ;)</p>&#xA;",11204469,"",,"",,2019-08-16T16:28:36,"","",,7,,,
57253732,2,,57249773,2019-07-29T12:18:19,,0,,"<p>I think sqlite 3 query are asynchronous.</p>&#xA;&#xA;<p>You send empty data to your view.</p>&#xA;&#xA;<p>I sugest you tou use promise with async/await syntaxe like below :</p>&#xA;&#xA;<pre><code>Read() {&#xA;&#xA;return new&#xA;Promise(resolve&#xA;=&gt; {&#xA;&#xA;let data = [];&#xA;&#xA;//var db = new sqlite3.Database(""./dosimetre.sqlite"");&#xA;&#xA;let db =&#xA;new this.sqlite3.Database(&#xA;&#xA;""./dosimetre.sqlite"",&#xA;&#xA;this.sqlite3.OPEN_READWRITE,&#xA;&#xA;err =&gt; {&#xA;&#xA;if (err) {&#xA;&#xA;console.error(err.message);&#xA;&#xA;} else {&#xA;&#xA;console.log(""Connected to the dosi database."");&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;);&#xA;&#xA;&#xA;&#xA;let sql =&#xA;""SELECT code, id, nom FROM INDIVIDU LIMIT 0,5"";&#xA;&#xA;//let sql = ""SELECT * FROM sqlite_master WHERE type='table'"";&#xA;&#xA;&#xA;&#xA;db.each(sql, (err,&#xA;row) =&gt; {&#xA;&#xA;if (err) {&#xA;&#xA;console.error(err.message);&#xA;&#xA;}&#xA;&#xA;data.push(row);&#xA;&#xA;});&#xA;&#xA;&#xA;&#xA;db.close(err&#xA;=&gt; {&#xA;&#xA;if (err) {&#xA;&#xA;console.error(err.message);&#xA;&#xA;}&#xA;&#xA;console.log(""Close the database connection."");&#xA;// Resolve your promise here&#xA;resolve(data);&#xA;&#xA;});&#xA;&#xA;});&#xA;</code></pre>&#xA;",10068869,"",,"",,2019-07-29T12:18:19,"","",,0,,,
57265041,2,,57131956,2019-07-30T05:47:47,,0,,"<p>I have the answer.<br>&#xA;Someone helped me and sugested ioHook.<br>&#xA;<a href=""https://discuss.atom.io/t/register-strg-as-a-globalshortcut-in-electron/66963/2"" rel=""nofollow noreferrer"">https://discuss.atom.io/t/register-strg-as-a-globalshortcut-in-electron/66963/2</a></p>&#xA;&#xA;<pre><code>const ioHook = require('iohook')&#xA;// register ""STRG+&lt;""   &#xA;const id = ioHook.registerShortcut([29, 0], (keys) =&gt; {&#xA;    console.log('-----------------------------')&#xA;    console.log('Shortcut was pressed:', keys)&#xA;})&#xA;</code></pre>&#xA;",7625095,"",,"",,2019-07-30T05:47:47,"","",,0,,,
57281979,2,,57256805,2019-07-31T01:29:54,,0,,"<p>The problem was my webpack configuration was incorrect, and I was running an older version of my code that did not have the proper setup. Here are the final files that allowed me to get this to work!</p>&#xA;&#xA;<p><strong>src/store/index.js</strong></p>&#xA;&#xA;<pre><code>import { createStore, compose, applyMiddleware } from 'redux';&#xA;import thunk from 'redux-thunk';&#xA;import rootReducer from '../reducers';&#xA;import { persistStore, persistCombineReducers } from 'redux-persist';&#xA;import storage from 'redux-persist/lib/storage';&#xA;import autoMergeLevel1 from 'redux-persist/lib/stateReconciler/autoMergeLevel1';&#xA;import logger from 'redux-logger';&#xA;&#xA;const persistConfig = {&#xA;  key            : 'primary',&#xA;  storage,&#xA;  stateReconciler: autoMergeLevel1&#xA;};&#xA;const persistedReducer = persistCombineReducers(persistConfig, rootReducer);&#xA;&#xA;const actionSanitizer = (action) =&gt; (&#xA;  action.type === 'ADD_FILE' &amp;&amp; action.libraryEntry ?&#xA;    { ...action,&#xA;      libraryEntry: {&#xA;        artwork: '&lt;&lt;LARGE_ARTWORK_BUFFER&gt;&gt;'&#xA;      }&#xA;    } : action&#xA;);&#xA;&#xA;const composeEnhancers =&#xA;  typeof window === 'object' &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__&#xA;    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({&#xA;      name          : 'Melo',&#xA;      actionSanitizer,&#xA;      stateSanitizer: (state) =&gt; state.library.files ? {&#xA;        ...state, library: {&#xA;          files: '&lt;&lt;LONG_LIST_OF_FILES&gt;&gt;'&#xA;        }&#xA;      } : state&#xA;    })&#xA;    : compose;&#xA;&#xA;&#xA;const middlewares = [thunk, logger];&#xA;&#xA;const enhancer = composeEnhancers(&#xA;  applyMiddleware(...middlewares)&#xA;);&#xA;&#xA;const reduxStore = createStore(persistedReducer, {}, enhancer);&#xA;const persistor = persistStore(reduxStore);&#xA;const store = { reduxStore, persistor };&#xA;&#xA;export default store;&#xA;&#xA;</code></pre>&#xA;&#xA;<p><strong>src/index.js</strong></p>&#xA;&#xA;<pre><code>import React from 'react';&#xA;import ReactDOM from 'react-dom';&#xA;import { Provider } from 'react-redux';&#xA;import { BarLoader } from 'react-spinners';&#xA;import { PersistGate } from 'redux-persist/integration/react';&#xA;import MainView from './app';&#xA;import registerServiceWorker from './registerServiceWorker';&#xA;import './styles/global.scss';&#xA;import store from './store';&#xA;&#xA;const { reduxStore, persistor } = store;&#xA;&#xA;registerServiceWorker();&#xA;&#xA;const loading = &lt;BarLoader color={'#3E8BD3'} size={25}/&gt;;&#xA;&#xA;require('dotenv').config();&#xA;&#xA;ReactDOM.render(&#xA;  &lt;Provider store={reduxStore}&gt;&#xA;    &lt;PersistGate loading={loading} persistor={persistor}&gt;&#xA;      &lt;MainView/&gt;&#xA;    &lt;/PersistGate&gt;&#xA;  &lt;/Provider&gt;,&#xA;  document.getElementById('root')&#xA;);&#xA;&#xA;</code></pre>&#xA;&#xA;<p><strong>src/reducers/index.js</strong></p>&#xA;&#xA;<pre><code>import library from './library';&#xA;import player from './player';&#xA;import view from './view';&#xA;import settings from './settings';&#xA;&#xA;export default {&#xA;  library,&#xA;  player,&#xA;  view,&#xA;  settings&#xA;};&#xA;</code></pre>&#xA;&#xA;<p><strong>webpack.config.js</strong></p>&#xA;&#xA;<pre><code>const webpack = require('webpack');&#xA;const path = require('path');&#xA;const HtmlWebpackPlugin = require('html-webpack-plugin');&#xA;const { spawn } = require('child_process');&#xA;&#xA;// Config directories&#xA;const SRC_DIR = path.resolve(__dirname, 'src');&#xA;const OUTPUT_DIR = path.resolve(__dirname, './build');&#xA;&#xA;// Any directories you will be adding code/files into, need to be&#xA;// added to this array so webpack will pick them up&#xA;const defaultInclude = [SRC_DIR];&#xA;&#xA;&#xA;module.exports = {&#xA;  entry : `${SRC_DIR}/index.js`,&#xA;  mode  : 'development',&#xA;  output: {&#xA;    path      : OUTPUT_DIR,&#xA;    publicPath: path.join('./'),&#xA;    filename  : 'bundle.js'&#xA;  },&#xA;  module: {&#xA;    rules: [&#xA;      {&#xA;        test: /\.(s*)css$/,&#xA;        use : [&#xA;          'style-loader',&#xA;          'css-loader',&#xA;          'sass-loader'&#xA;        ]&#xA;      },&#xA;      {&#xA;        test   : /\.js$/,&#xA;        exclude: /node_modules(?!(\/|\\)js-utils)/,&#xA;        loader : 'babel-loader'&#xA;      },&#xA;      {&#xA;        test   : /\.jsx$/,&#xA;        exclude: /node_modules(?!(\/|\\)js-utils)/,&#xA;        loader : 'babel-loader'&#xA;      },&#xA;      {&#xA;        test   : /\.(jpe?g|png|gif)$/,&#xA;        use    : [{ loader: 'file-loader?name=img/[name]__[hash:base64:5].[ext]' }],&#xA;        include: defaultInclude&#xA;      },&#xA;      {&#xA;        test   : /\.(eot|svg|ttf|woff|woff2)$/,&#xA;        use    : [{ loader: 'file-loader?name=font/[name]__[hash:base64:5].[ext]' }],&#xA;        include: defaultInclude&#xA;      }&#xA;    ]&#xA;  },&#xA;  target : 'electron-renderer',&#xA;  plugins: [&#xA;    new HtmlWebpackPlugin({&#xA;      template: 'public/index.html',&#xA;      inject  : 'body'&#xA;    }),&#xA;    new webpack.DefinePlugin({&#xA;      'process.env.NODE_ENV': JSON.stringify('development')&#xA;    })&#xA;  ],&#xA;  devtool  : 'cheap-source-map',&#xA;  devServer: {&#xA;    contentBase: OUTPUT_DIR,&#xA;    stats      : {&#xA;      colors  : true,&#xA;      chunks  : false,&#xA;      children: false&#xA;    },&#xA;    before() {&#xA;      spawn(&#xA;        'electron',&#xA;        ['./public/electron.js'],&#xA;        { shell: true, env: process.env, stdio: 'inherit' }&#xA;      )&#xA;        .on('close', code =&gt; process.exit(0))&#xA;        .on('error', spawnError =&gt; console.error(spawnError));&#xA;    }&#xA;  }&#xA;};&#xA;&#xA;</code></pre>&#xA;&#xA;<p>Thanks to all who helped me!</p>&#xA;",5965537,"",,"",,2019-07-31T01:29:54,"","",,0,,,
57304754,2,,57301646,2019-08-01T08:23:54,,0,,"<p>After a chat with Miguel Grinberg on twitter, I found out how to set it up. There are a couple of things. First of all 4.3 introduced CORS restriction by default. There was a bug with CORS headers from node client, since node is not a browser. That is fixed by now.</p>&#xA;&#xA;<p>However, it is still not enough to simply <code>pip install python-socketio</code>&#xA;You have to install the master branch of <code>python-enginio</code> manually as there is the CORS header fix.</p>&#xA;&#xA;<p>My Pipfile looks like this:</p>&#xA;&#xA;<pre><code>[packages]&#xA;aiohttp = ""*""&#xA;aiohttp-cors = ""*""&#xA;python-enginio = {git = ""https://github.com/miguelgrinberg/python-engineio/"",ref = ""master""}&#xA;python-socketio = ""*""&#xA;</code></pre>&#xA;&#xA;<p>Dont forget to allow CORS now serverside.</p>&#xA;&#xA;<pre><code>sio = socketio.AsyncServer(cors_allowed_origins='*')&#xA;</code></pre>&#xA;",9208887,"",9208887,"",2019-08-08T16:45:06,2019-08-08T16:45:06,"","",,0,,,
57306982,2,,57303551,2019-08-01T10:28:24,,1,,"<p>For some reason, it seems that <code>console.log</code> always display a <code>NativeImage</code> <em>empty</em> object, whether there is an image in the clipboard or not.</p>&#xA;&#xA;<p>Try to go a step further and convert the <code>NativeImage</code> object to a data URL string, for instance; also, you should be able to check if the clipboard contains an image beforehand by using the <code>clipboard.availableFormats</code> method.</p>&#xA;&#xA;<p>The following code snippet works for me on macOS:</p>&#xA;&#xA;<pre><code>const { clipboard } = require(""electron"");&#xA;&#xA;let availableFormats = clipboard.availableFormats(""clipboard"");&#xA;if (availableFormats.includes(""image/png"") || availableFormats.includes(""image/jpeg""))&#xA;{&#xA;    console.log(clipboard.readImage(""clipboard"").toDataURL());&#xA;}&#xA;else&#xA;{&#xA;    console.log(""No image in clipboard"");&#xA;}&#xA;</code></pre>&#xA;",11868677,"",11868677,"",2019-08-01T10:52:34,2019-08-01T10:52:34,"","",,0,,,
57307314,2,,48459462,2019-08-01T10:47:23,,1,,"<p>Adding </p>&#xA;&#xA;<blockquote>&#xA;  <p>extraFiles</p>&#xA;</blockquote>&#xA;&#xA;<p>config property to the <em>electron-builder.json</em> seems to solve the problem.</p>&#xA;&#xA;<p>E.g.:</p>&#xA;&#xA;<pre><code>  ""extraFiles"": [&#xA;      {&#xA;         ""from"": ""../../CHANGELOG.md"",&#xA;          ""to"": "".""&#xA;      }&#xA;    ],&#xA;</code></pre>&#xA;&#xA;<p>See also electron configuration docu: <a href=""https://www.electron.build/configuration/contents#extrafiles"" rel=""nofollow noreferrer"">https://www.electron.build/configuration/contents#extrafiles</a></p>&#xA;",10036039,"",,"",,2019-08-01T10:47:23,"","",,0,,,
57339141,2,,55245165,2019-08-03T14:18:52,,1,,"<p>The only solution (if you stay with cdk) is that if you migrate up to Angular Material latest (^8.1.0).</p>&#xA;&#xA;<p>Cdk DragDrop (Material) 7 and early 8 are blocking the scroll when you are dragging (<a href=""https://github.com/angular/components/issues/14273#issuecomment-442201350"" rel=""nofollow noreferrer"">https://github.com/angular/components/issues/14273#issuecomment-442201350</a>). However it is already resolved with autoscroll feature in ^8.1.0 (<a href=""https://github.com/angular/components/issues/13588"" rel=""nofollow noreferrer"">https://github.com/angular/components/issues/13588</a>).</p>&#xA;&#xA;<p>So if you migrate up, you can try out the new autoscroll feature that works with simple containers (like div) close well, in addition scrolling with mouse wheel is enabled, but I couldn't make it work with material table for now (was not so much investigation).</p>&#xA;&#xA;<p>If you create an online example, i could try to help you more.</p>&#xA;",4462332,"",4462332,"",2019-08-03T14:28:52,2019-08-03T14:28:52,"","",,0,,,
57346329,2,,42894288,2019-08-04T11:54:33,,4,,"<p>If you mean the icon on the dock, on MAC can should use: </p>&#xA;&#xA;<pre><code>const app = electron.app;&#xA;const image = electron.nativeImage.createFromPath(&#xA;  app.getAppPath() + ""/public/YOUR_APP_IMAGE_NAME""&#xA;);&#xA;app.dock.setIcon(image);&#xA;</code></pre>&#xA;",6081519,"",,"",,2019-08-04T11:54:33,"","",,0,,,
57349926,2,,57328380,2019-08-04T20:15:38,,1,,"<p>Once you give open code to end-user side (which is JS case) you should be ready to accept possibility of malicious code change client-side, that's obvious.&#xA;Since CouchDB manage write permissions on per-DB basis - malicios user will write to all docs in that DB if he has write permission there. &#xA;Consider per-user DBs and then combine your multipart final docs server side only or consider other DB.</p>&#xA;",11559062,"",,"",,2019-08-04T20:15:38,"","",,0,,,
57357114,2,,57315072,2019-08-05T10:52:55,,0,,<p>Finally I have solved it.  Just added  <code>externals: { ffi: 'ffi' }</code> to my   <code>webpack.main.prod.js</code></p>&#xA;,7511435,"",,"",,2019-08-05T10:52:55,"","",,0,,,
57363135,2,,57297062,2019-08-05T17:06:55,,1,,<p>Adding <code>externals: { ffi: 'ffi' }</code>  into  my   <code>webpack.main.prod.js</code> has solved the problem</p>&#xA;,7511435,"",,"",,2019-08-05T17:06:55,"","",,0,,,
57376327,2,,57371604,2019-08-06T12:41:14,,0,,"<p>For someone with the same problem:</p>&#xA;&#xA;<p>Is not really a Capacitor bug, but a build problem in your part related to the Angular 8 build settings not being compatible with electron.</p>&#xA;&#xA;<p>Changing the target in tsconfig.json from es2015 to es5, or add</p>&#xA;&#xA;<pre><code>""browserslist"": [&#xA;  ""&gt; 5%""&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>in the package.json</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/56400290/white-screen-on-fresh-new-angular-8-electron-5-app"">Related</a></p>&#xA;&#xA;<p>Solves the problem</p>&#xA;",2781852,"",,"",,2019-08-06T12:41:14,"","",,0,,,
57405567,2,,57400209,2019-08-08T05:14:07,,3,,"<p>In order to block the main window, you need to pass a <code>BrowserWindow</code> object to the <code>dialog.showOpenDialog</code> method as the first optional argument, the one you would like to attach the dialog to (<em><code>mainWindow</code> in your case I guess</em>).</p>&#xA;&#xA;<p>Quote from <a href=""https://electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options"" rel=""nofollow noreferrer"">the docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>dialog.showOpenDialog([browserWindow, ]options)</strong></p>&#xA;  &#xA;  <p>The <code>browserWindow</code> argument allows the dialog to attach itself to a&#xA;  parent window, making it modal.</p>&#xA;</blockquote>&#xA;&#xA;<p>Now, how you make it happen is the whole different matter. It can be done in multiple ways, but if you are looking to invoke the dialog from <code>renderer</code> process the simplest one would be something like this:</p>&#xA;&#xA;<pre><code>import { remote } from 'electron'&#xA;&#xA;remote.dialog.showOpenDialog(&#xA;  remote.getCurrentWindow(), // &lt;- notice this one&#xA;  { properties: ['openDirectory'] }&#xA;).then(result =&gt; {&#xA;  // prefer promised API&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>The <strong><em>crucial</em></strong> part for whole thing to work properly is to have <code>nodeIntegration</code> enabled in your <code>BrowserWindow</code> options, which depending on a version of Electron you are using, you might or might not have (<em>they've switched defaults from <code>true</code> to <code>false</code> in <a href=""https://electronjs.org/blog/electron-4-0#webpreferences-default-values"" rel=""nofollow noreferrer"">version 4</a></em>). In any case it's better to have it set explicitly from now on. So that's how you would typically initiate your <code>mainwindow</code> now:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;  // ...&#xA;  show: false,&#xA;  webPreferences: {&#xA;    nodeIntegration: true // &lt;- this one&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",189673,"",189673,"",2019-08-08T16:34:49,2019-08-08T16:34:49,"","",,0,,,
57405820,2,,57361541,2019-08-08T05:43:55,,13,,"<p>Problems with the GPU acceleration and rendering can occur on Electron with misconfigured systems or driver issues. There are also other instances where these or similar issues occur, such as when executing Electron via a remote system, X11 forwarding or a remote desktop. In all these instances you will get some kind of GPU initialization error.</p>&#xA;&#xA;<p>For the error you are experiencing, it is actually already covered briefly here on Stack Overflow (however they don't cover a solution);</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/38466503/electron-error-avdcreategpuaccelerator-error-loading-gpu-renderer"">electron error AVDCreateGPUAccelerator: Error loading GPU renderer</a></p>&#xA;&#xA;<p>In my Electron applications I always have the following piece of code at the very begining of the application execution;</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import { app } from ""electron"";&#xA;&#xA;if (app.getGPUFeatureStatus().gpu_compositing.includes(""disabled"")) {&#xA;    app.disableHardwareAcceleration();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This will check if the GPU supports hardware acceleration and disable it if this is not the case. This check is very important but is not executed by default in Electron for some inexplicable reason - which results in Electron failing to start (or rather open any window) on systems where acceleration is broken or unsupported.</p>&#xA;&#xA;<p>If that doesn't work for you, simply calling (without the check)</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import { app } from ""electron"";&#xA;&#xA;app.disableHardwareAcceleration();&#xA;</code></pre>&#xA;&#xA;<p>should do the trick - but you should obviously only do it temporarily during development and only if you really need to. The first block of code is the prefered method.</p>&#xA;",10868666,"",10868666,"",2019-08-08T08:15:50,2019-08-08T08:15:50,"","",,0,,,
57435372,2,,57434970,2019-08-09T18:22:45,,0,,"<p>It's working now with dragscoll. I just imported it in the angular.json like: ""./node_modules/dragscroll/dragscroll.js"". I tried like this, but I wrote the html class for wrong div.</p>&#xA;",10886581,"",,"",,2019-08-09T18:22:45,"","",,0,,,
57446996,2,,53341132,2019-08-11T02:39:39,,4,,"<p>Support for Chromium extensions in Electron <a href=""https://github.com/electron/electron/issues/19447"" rel=""noreferrer"">is actively being worked on</a> at the moment. The support isn't complete yet, but the <a href=""https://github.com/electron/electron/issues/19447"" rel=""noreferrer"">GitHub issue</a> seems to have regular updates being posted.</p>&#xA;&#xA;<p>Fingers crossed!</p>&#xA;&#xA;<p>A current pull request is open for <a href=""https://github.com/electron/electron/pull/19515"" rel=""noreferrer"">'just enough extensions [api] to load a simple ... extension'</a></p>&#xA;",11091039,"",,"",,2019-08-11T02:39:39,"","",,0,,,
57259765,2,,57259629,2019-07-29T18:43:52,,1,,"<p>Export the function you want to use in main.js and require the <code>edit.js</code> file:</p>&#xA;&#xA;<p><strong>edit.js</strong></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>module.exports = {&#xA;    myfunction: function () {&#xA;        // do something here...&#xA;    }&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>exports.myfunction = function() {&#xA;    // do something here...&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>main.js</strong></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { MenuItem } = require('electron');&#xA;const { myfunction } = require(__dirname + '/edit.js');&#xA;&#xA;// Now myfunction is accessible in main.js&#xA;// ...&#xA;&#xA;const menuItem = new MenuItem({&#xA;    label: 'MenuItem1',&#xA;    click: function() {&#xA;        myfunction();&#xA;    },&#xA;    // ...&#xA;});&#xA;&#xA;// OR&#xA;&#xA;const menuItem2 = new MenuItem({&#xA;    label: 'MenuItem2',&#xA;    click: myfunction,&#xA;    // ...&#xA;});&#xA;</code></pre>&#xA;",10875622,"",,"",,2019-07-29T18:43:52,"","",,1,,,
57262901,2,,57261456,2019-07-30T00:43:22,,5,,"<p>Angular builds in both <code>es5</code> and <code>es2015</code>, Electron might not like the indecision. Does your <code>tsconfig.json</code> have the proper target:</p>&#xA;&#xA;<pre><code>""target"": ""es5""&#xA;</code></pre>&#xA;",4208845,"",,"",,2019-07-30T00:43:22,"","",,1,,,
57270542,2,,57260234,2019-07-30T11:24:48,,3,,"<p>by using preload webPreferences for browserview where you can use ipcRenderer where the preload.js script will be</p>&#xA;&#xA;<pre><code>document.addEventListener('click', (event) =&gt; {&#xA;  ipcRenderer.send('something', event);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>and in the main electron js you have to use preload and call ipc main to capture the mouse data</p>&#xA;&#xA;<pre><code>let view = new BrowserView({&#xA; webPreferences: {&#xA;  preload: path.join(__dirname, 'preload.js'),&#xA; }&#xA;});&#xA;&#xA;ipcMain.on('something', function (event, arg) {&#xA;  // your code here&#xA;})&#xA;</code></pre>&#xA;",1909446,"",,"",,2019-07-30T11:24:48,"","",,1,,,
57328402,2,,57299425,2019-08-02T14:23:11,,2,,"<p>I fixed the issue, it was just a compatibility problem between npm and node, I used the last version of npm with an old version of nodes, So I just downloaded the last version of nodes to update it, and the install commands run normally.</p>&#xA;",8665772,"",,"",,2019-08-02T14:23:11,"","",,1,,,
57351404,2,,57350987,2019-08-05T01:52:34,,2,,"<p><code>win.webContents.once()</code> does not return a promise (since interfaces generally don't accept both callbacks and return a promise at the same time). </p>&#xA;&#xA;<p>Therefore <code>await</code> doesn't wait for the asynchronous operation to complete. Therefore, you're looking at output before its value has been reassigned. <code>await</code> only does something useful when you <code>await</code> a promise that is connected to the asynchronous operation you're trying to wait for. </p>&#xA;&#xA;<p>To confirm this timing issue, add a unique <code>console.log()</code> statement before and after the <code>await win.webContents.once('dom-ready',retrieveTextWrapper);</code> and inside of <code>retrieveTextWrapper</code> and then you can see the sequencing of these log messages.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Yep, everything changes as it should within <code>retrieveTextWrapper</code> function. And your explanation makes a lot of sense. However, is it possible to wait for the callback to finish (using some other syntax aside from await)? That way, I can use the updated value for other operations in the main function?</p>&#xA;</blockquote>&#xA;&#xA;<p>You have a couple options.  </p>&#xA;&#xA;<p>You could ""promisify"" <code>win.webContents.once()</code> so you could then use <code>await</code> with it.</p>&#xA;&#xA;<p>You could put the callback inline and put the rest of your code in <code>main</code> inside that callback (a classic way of dealing with asynchronous operations).</p>&#xA;&#xA;<p>Here's an example of promisifying <code>win.webContents.once()</code>:</p>&#xA;&#xA;<pre><code>function waitForDomReady() {&#xA;    return new Promise((resolve, reject) =&gt; {&#xA;        // may want to check if document already has dom-ready and resolve immediately&#xA;        win.webContents.once('dom-ready', resolve);&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And, you could then use it like this:</p>&#xA;&#xA;<pre><code>async function main(){&#xA;   navigate();&#xA;   win.openDevTools();&#xA;   await waitForDomReady();&#xA;   await retrieveTextWrapper();&#xA;   console.log(output);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This assumes that the code in <code>retrieveTextWrapper</code> that calls <code>win.webContents.executeJavaScript()</code> does actually return a promise when it's done.  If not, you have to promisify that too.</p>&#xA;",816620,"",816620,"",2019-08-05T01:58:54,2019-08-05T01:58:54,"","",,1,,,
57419875,2,,57419669,2019-08-08T20:06:09,,0,,"<p>You can run a python script/program inside your electron app. This way, you can control the status of the operation in electron and update the UI accordingly. <a href=""https://www.techiediaries.com/python-electron-tutorial/"" rel=""nofollow noreferrer"">here is an example of what I'm talking about</a>.</p>&#xA;&#xA;<p>If that's not a possibility, you could consider using a communication channel (webosckets for example) to interface between the two applications, sending status from one to another. <a href=""https://en.wikipedia.org/wiki/Remote_procedure_call"" rel=""nofollow noreferrer"">Something like a RPC</a>.</p>&#xA;",11903395,"",,"",,2019-08-08T20:06:09,"","",,1,,,
57438789,2,,57435070,2019-08-10T02:16:37,,1,,"<p>Smells like you have an HTML <code>&lt;form&gt;</code> with a <code>&lt;button&gt;</code> or <code>&lt;input type=""submit""/&gt;</code>, since you target an element with id ""submit"".</p>&#xA;&#xA;<p>If that is the case, the HTML specified behaviour is to send the form data to the page indicated by the <code>action</code> attribute. If there no such indication, it sends the data to the current page, effectively reloading it.</p>&#xA;&#xA;<p>See also <a href=""https://stackoverflow.com/questions/26517974/javascript-redirect-not-working-anyway"">javascript redirect not working anyway</a></p>&#xA;&#xA;<p>The easy solution is simply to add <code>event.preventDefault()</code> at the start of your event listener.</p>&#xA;&#xA;<p>Leaflet itself has no mean to reload your page.</p>&#xA;&#xA;<p>For refererence for the case of a button: <a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>If your buttons are not for submitting form data to a server, be sure to set their <code>type</code> attribute to <code>button</code>. Otherwise they will try to submit form data and to load the (nonexistent) response, possibly destroying the current state of the document.</p>&#xA;</blockquote>&#xA;",5108796,"",5108796,"",2019-08-10T02:22:08,2019-08-10T02:22:08,"","",,1,,,
57271584,2,,57271511,2019-07-30T12:22:47,,4,,"<p>Because you package your old <code>react</code> code. You need to build your <code>react</code> app before using electron-builder to package your app. So you need to change <code>pack</code> script to build <code>react</code>.</p>&#xA;&#xA;<pre><code>""pack"": ""npm run build &amp;&amp; electron-builder --dir"",&#xA;</code></pre>&#xA;",11769253,"",,"",,2019-07-30T12:22:47,"","",,2,,,
57353267,2,,57353131,2019-08-05T06:33:10,,1,,<p>The only reason server is returning PHP code is that your server is not configured properly. Check if your server files resides in localhost server folder.</p>&#xA;,5766614,"",,"",,2019-08-05T06:33:10,"","",,2,,,
57398523,2,,57397499,2019-08-07T16:13:34,,4,,"<p>Interesting Question!!.</p>&#xA;&#xA;<ol>&#xA;<li>Is the mas package able to auto-update when a new version is published as a Github release? Or must the update be done through the Mac App Store?&#xA;&#xA;<ul>&#xA;<li>No <code>mas</code> is not able to auto update coz, it is targeted for the Application Store. We need to manually update it in the app store</li>&#xA;</ul></li>&#xA;<li>How do you decide which mac targets to use, do they all have a specific use case?&#xA;<strong>pkg / dmg /zip</strong>&#xA;&#xA;<ul>&#xA;<li>DMG is the format where app is installed in OS level i.e it can be accessed through any user. you simple drag and drop the app is the application folder</li>&#xA;<li>PKG is like a app installer, where there are steps of installation. Main advantage of <strong>PKG</strong> is that it gives us option to install the app at a user level which means app can be install for a specific user only just like window OS. Example in  the picture below.&#xA;<a href=""https://i.stack.imgur.com/rn61s.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rn61s.png"" alt=""enter image description here""></a></li>&#xA;</ul></li>&#xA;</ol>&#xA;",1909446,"",1909446,"",2019-08-07T16:16:06,2019-08-07T16:16:06,"","",,4,,,
57387416,2,,57387371,2019-08-07T05:19:36,,2,,"<p>When you run <code>npm run release</code>, it just run <code>npm run build &amp;&amp; electron-builder</code>. So it will only package your app and not publish it. You need to add <code>--publish=always</code> in your <code>package</code> script to publish your app</p>&#xA;&#xA;<pre><code>""package"": ""npm run build &amp;&amp; electron-builder --publish=always"",&#xA;</code></pre>&#xA;&#xA;<p>and edit <code>publish</code> in <code>package.json</code> to something like this</p>&#xA;&#xA;<pre><code>""publish"": [&#xA;      {&#xA;        ""provider"": ""github"",&#xA;        ""owner"": ""incognitochain"",&#xA;        ""repo"": ""incognito-monitor""&#xA;      }&#xA;    ]&#xA;</code></pre>&#xA;",11769253,"",11769253,"",2019-08-07T05:31:16,2019-08-07T05:31:16,"","",,5,,,
54807794,2,,54807645,2019-02-21T13:04:02,,1,,"<p>The easiest is to let <a href=""https://docs.npmjs.com/cli/init"" rel=""nofollow noreferrer"">npm do this for you</a>.</p>&#xA;&#xA;<p>create a folder for your project then go into that folder and run, follow the prompts:</p>&#xA;&#xA;<pre><code>npm init&#xA;</code></pre>&#xA;&#xA;<p>Npm will create a package.json for you. Then to set up electron run follow their <a href=""https://electronjs.org/"" rel=""nofollow noreferrer"">website</a>:</p>&#xA;&#xA;<pre><code>npm i -D electron@latest&#xA;</code></pre>&#xA;&#xA;<p>Which produces something like this:</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""test"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""description"": """",&#xA;  ""main"": ""index.js"",&#xA;  ""scripts"": {&#xA;    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1""&#xA;  },&#xA;  ""author"": """",&#xA;  ""license"": ""ISC"",&#xA;  ""devDependencies"": {&#xA;    ""electron"": ""^4.0.5""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then you can add other tools like the <a href=""https://github.com/electron-userland/electron-packager"" rel=""nofollow noreferrer"">electon-packager</a>:</p>&#xA;&#xA;<pre><code>npm install electron-packager --save-dev&#xA;</code></pre>&#xA;&#xA;<p>The --save-dev are tools used for your development, and will be stored in the devDependencies, any libraries that you need to run your application are saved in dependencies and use the --save switch.</p>&#xA;",7145806,"",7145806,"",2019-02-21T13:10:46,2019-02-21T13:10:46,"","",,0,,,
54812820,2,,54757807,2019-02-21T17:21:06,,1,,"<p>I was able to implement this behavior by using the <code>setAlwaysOnTop</code> method on the window object.</p>&#xA;&#xA;<pre><code>window.setAlwaysOnTop(true);&#xA;</code></pre>&#xA;&#xA;<p>MacOS by default do not show windows with this property in Mission Control.</p>&#xA;&#xA;<p>For more information about this method see the Electron documentation: <a href=""https://electronjs.org/docs/api/browser-window#winsetalwaysontopflag-level-relativelevel"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/browser-window#winsetalwaysontopflag-level-relativelevel</a></p>&#xA;",7220714,"",,"",,2019-02-21T17:21:06,"","",,0,,,
54848655,2,,54848583,2019-02-24T04:09:34,,0,,"<p>I'm not sure what these params represent here, but I think it should be something like this:</p>&#xA;&#xA;<pre><code>Mousetrap.bind('x', newnote);&#xA;</code></pre>&#xA;&#xA;<p>Second parameter should be a function, but the way you have it above is the result of the function call, so you're getting that error.</p>&#xA;",1633510,"",,"",,2019-02-24T04:09:34,"","",,0,,,
54849010,2,,54835751,2019-02-24T05:24:34,,1,,"<p>Found an open source project called <a href=""https://github.com/pd4d10/debugtron"" rel=""nofollow noreferrer"">debugtron</a> that does this. </p>&#xA;",6276648,"",,"",,2019-02-24T05:24:34,"","",,0,,,
54856819,2,,54856187,2019-02-24T21:37:39,,1,,"<p>It should be:</p>&#xA;&#xA;<pre><code>const { ipcRenderer } = require('electron');&#xA;</code></pre>&#xA;&#xA;<p>or, possibly:</p>&#xA;&#xA;<pre><code>const ipcRenderer = require('electron').ipcRenderer;&#xA;</code></pre>&#xA;",,user8022331,,"",,2019-02-24T21:37:39,"","",,0,,,
54861014,2,,53094261,2019-02-25T07:01:17,,0,,<p>Just starting messing around with Electron myself and ran into this error. I was able to solve it by changing my import to require:</p>&#xA;&#xA;<pre><code>const TitleBar = require('frameless-titlebar');&#xA;</code></pre>&#xA;,481154,"",,"",,2019-02-25T07:01:17,"","",,0,,,
54862165,2,,53539201,2019-02-25T08:28:26,,0,,"<p>If the apps both have same name in <code>package.json</code> under <code>build</code></p>&#xA;&#xA;<pre><code>""build"": {&#xA;    ""productName"": ""myApp"",&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>They both get same localStorage.</p>&#xA;",3830140,"",,"",,2019-02-25T08:28:26,"","",,0,,,
54884876,2,,54883490,2019-02-26T11:49:33,,1,,"<p>For others Developers:</p>&#xA;&#xA;<p>I've solved.</p>&#xA;&#xA;<p>I don't call a <strong>mainwindow.hide()</strong> anymore, but I have put in my <strong>browserwindow</strong> creation:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;    height: 563,&#xA;    useContentSize: true,&#xA;    width: 1000,&#xA;    show:false // this for solve the problem of router.push() avoid mainwindow.hide()&#xA;  }) &#xA;</code></pre>&#xA;",5630506,"",,"",,2019-02-26T11:49:33,"","",,0,,,
54894343,2,,54893762,2019-02-26T21:25:11,,0,,"<p>After some sleuthing around and documentation reading I got to this solution.</p>&#xA;&#xA;<p>Here's a function that you pass the webContents into this function and you get access to the BrowserWindow </p>&#xA;&#xA;<pre><code>function getBrowserWindowFromWebContents(&#xA;  contents: Electron.WebContents&#xA;): Electron.BrowserWindow {&#xA;  let topContents = contents&#xA;  while (topContents.hostWebContents) {&#xA;    topContents = topContents.hostWebContents&#xA;  }&#xA;&#xA;  return remote.BrowserWindow.fromWebContents(topContents)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>then we have access to <a href=""https://electronjs.org/docs/api/browser-window#wingetsize"" rel=""nofollow noreferrer"">getSize()</a></p>&#xA;&#xA;<pre><code>getBrowserWindowFromWebContents(remote.getCurrentWebContents()).getSize()&#xA;</code></pre>&#xA;&#xA;<p>And there we go :) </p>&#xA;",4830093,"",,"",,2019-02-26T21:25:11,"","",,0,,,
54911809,2,,54870431,2019-02-27T18:02:31,,2,,"<p>After downloading the repo and testing I haven't seen any issues so it appears something was removed or changed by accident. There's two ways you could resolve this issue. </p>&#xA;&#xA;<p>Option 1:</p>&#xA;&#xA;<p>run <code>npm update electron-prebuilt -save</code> after reading ""<a href=""https://discuss.atom.io/t/updating-electron/24595"" rel=""nofollow noreferrer"">Updating Electron</a>""</p>&#xA;&#xA;<p>Option 2:</p>&#xA;&#xA;<p>uninstall Electron and re-install with:</p>&#xA;&#xA;<ul>&#xA;<li>uninstall: <code>npm uninstall electron</code></li>&#xA;<li>re-install: <code>npm install electron</code></li>&#xA;</ul>&#xA;&#xA;<p>I did notice in your <em>main.js</em> that you've defined the constant <code>ipcMain</code> on line 34. It's a good practice to call constants at the top and you can modify:</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron')&#xA;</code></pre>&#xA;&#xA;<p>to:</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow, ipcMain} = require('electron')&#xA;</code></pre>&#xA;",1952287,"",,"",,2019-02-27T18:02:31,"","",,0,,,
54922119,2,,46876570,2019-02-28T09:18:55,,1,,"<p>from <a href=""https://github.com/facebook/create-react-app/issues/2541"" rel=""nofollow noreferrer"">https://github.com/facebook/create-react-app/issues/2541</a> :</p>&#xA;&#xA;<blockquote>&#xA;  <p>I don't think we'll do this as it seems like people generally don't&#xA;  use public folder for uploads. And it wouldn't work in production&#xA;  anyway.</p>&#xA;  &#xA;  <p>I would recommend to use a separate server (which you need anyway) and&#xA;  separate folder for image uploads, and have the app load images from a&#xA;  different host/port (just like it would in production, e.g. from a&#xA;  CDN).</p>&#xA;</blockquote>&#xA;",11129751,"",,"",,2019-02-28T09:18:55,"","",,0,,,
54946208,2,,54939989,2019-03-01T14:00:33,,1,,"<p>I somehow got a workaround for my problem:</p>&#xA;&#xA;<ol>&#xA;<li>I now use the <code>xth</code> library (install via npm: <code>npm i xth</code>)</li>&#xA;<li>import it into my function: <code>var xth = require('xth');</code></li>&#xA;<li>put the xml String into a data URI: <code>var xml = 'data:text/xml,' + encodeURIComponent(xmlString);</code></li>&#xA;<li>the XSLT file is now not a String but the file: <code>var xsl = './../components/ELGA_Stylesheet_v1-0.xsl';</code></li>&#xA;<li><p>Then, I just call the method xth as in the example at <a href=""https://www.npmjs.com/package/xth"" rel=""nofollow noreferrer"">xth - npm</a></p>&#xA;&#xA;<p><code>1 xth(xml, xsl, function (html) {&#xA;2    html = html.replace(/&amp;lt;/g, ""&lt;"");&#xA;3    html = html.replace(/&amp;gt;/g, ""&gt;"");&#xA;4   html = html.replace(/&amp;amp;/g, ""&amp;"");&#xA;5    openWindow(html);&#xA;6 });</code></p></li>&#xA;<li><p>the item <code>html</code> is the xslt transformed string, I had one final problem: in the <code>&lt;script&gt;</code> Tags of the output string, the symbols &lt;,> and &amp; were there as &amplt;, &ampgt;, and &ampamp; which caused problems. lines 2 to 4 are the workaround for this issue</p></li>&#xA;</ol>&#xA;&#xA;<p><code>openWindow(html)</code>is my own method to open the result string in a new electron window.</p>&#xA;&#xA;<p>NOTE: one problem remains: as mentioned <a href=""https://stackoverflow.com/q/54946393/3775957"">here</a>, navigation via # in <code>&lt;a href=#id&gt;</code> doesn't work, because Chromium doesn't allow navigation to top frame to data uri.</p>&#xA;",3775957,"",3775957,"",2019-03-04T07:17:59,2019-03-04T07:17:59,"","",,0,,,
54950703,2,,54950558,2019-03-01T18:56:24,,2,,"<p>You would want to create a TS file and export the Enum so that it can be imported by the components that need to use it.</p>&#xA;&#xA;<p>Example of this would be:</p>&#xA;&#xA;<p><code>export enum AttendusTypeEnum{&#xA;    Todo = 1, Sent = 2, Corrected = 3&#xA;};</code></p>&#xA;&#xA;<p>Then inside of the component, you would need to &#xA;import { AttendusTypeEnum } from './file location';</p>&#xA;&#xA;<p>here is a link to the stackblitz also: <a href=""https://stackblitz.com/edit/angular-pud3ri"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/angular-pud3ri</a></p>&#xA;",6501373,"",6501373,"",2019-03-01T19:03:02,2019-03-01T19:03:02,"","",,0,,,
54960674,2,,54951646,2019-03-02T16:40:08,,1,,"<p>A better way to this in TypeScript is to avoid <code>require()</code>. So, instead of requiring Electron the way you do, better importing <code>remote</code> within the import section and then accessing the remote variable. Now TSLint should be happy again.</p>&#xA;&#xA;<pre><code>import { remote } from 'electron';&#xA;&#xA;...&#xA;&#xA;private closeWindow() {&#xA;    remote.getCurrentWindow().close();&#xA;}&#xA;</code></pre>&#xA;",9415115,"",,"",,2019-03-02T16:40:08,"","",,0,,,
54975102,2,,54975101,2019-03-04T00:08:55,,1,,"<p>The quickest, and easiest way I've found to get Vue and Electron playing nice together is <a href=""https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/"" rel=""nofollow noreferrer"">vue electron-builder</a>.</p>&#xA;&#xA;<p>To use, set up a project with Vue CLI3 using</p>&#xA;&#xA;<p><code>vue create my-project</code></p>&#xA;&#xA;<p>then CD into that directory, in this case ""my-project"", and run</p>&#xA;&#xA;<p><code>vue add electron-builder</code></p>&#xA;&#xA;<p>This sets up barebones scaffolding that allows vue and electron to play nicely from the get go. You can test your work by launching an unbuilt test version using</p>&#xA;&#xA;<p><code>npm run electron:serve</code></p>&#xA;&#xA;<p>and, when you are ready for deployment, may use</p>&#xA;&#xA;<p><code>npm run electron:build</code></p>&#xA;&#xA;<p>to build. This vastly simplifies the process, seen elsewhere, of dealing with a giant over engineered boilerplate or trying to write out relative pathing so your builds and dev environments both work identically.</p>&#xA;",5831606,"",,"",,2019-03-04T00:08:55,"","",,0,,,
54993696,2,,54993667,2019-03-05T00:32:35,,1,,<p>Because I am a fool and was running <code>node app.js</code> not <code>npm start</code>.</p>&#xA;,11049358,"",,"",,2019-03-05T00:32:35,"","",,0,,,
54996144,2,,54993545,2019-03-05T05:44:24,,3,,"<p>You cannot alter visiblity of the menu with <a href=""https://electronjs.org/docs/api/browser-window#winismenubarvisible"" rel=""nofollow noreferrer"">isMenuBarVisible()</a>. It can only tell you if menu is visible or not.</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>isMenuBarVisible()</code> Returns Boolean - Whether the menu bar is visible.</p>&#xA;</blockquote>&#xA;&#xA;<p>Try <a href=""https://electronjs.org/docs/api/browser-window#winsetmenumenu-linux-windows"" rel=""nofollow noreferrer"">setMenu(null)</a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>setMenu(menu)</code> Sets the <code>menu</code> as the window's menu bar, setting it to <code>null</code> will remove&#xA;  the menu bar.</p>&#xA;</blockquote>&#xA;",189673,"",189673,"",2019-03-05T05:50:34,2019-03-05T05:50:34,"","",,0,,,
54998767,2,,54949384,2019-03-05T08:50:51,,2,,"<p>I figured out what was wrong: My application relies on some .dll I ship with the app. This .dll is part of the VC Redistributable 2015 package. When spawning the app with selenium-server or even using the <code>start</code> command, that .dll is not accessible. Installing the VC Redistributable 2015 package solved my issue</p>&#xA;",10233193,"",,"",,2019-03-05T08:50:51,"","",,0,,,
54808001,2,,54801062,2019-02-21T13:14:51,,0,,"<p>You need to edit strings in translations/en.js , because this is solution with localization (localization - adapting computer software to different languages).</p>&#xA;&#xA;<p>So, if you want to change sidebar strings, you need to edit this in en.js:</p>&#xA;&#xA;<pre><code>""Welcome"": ""Welcome"", &#xA;""Who we are"": ""IPC/Remote"", &#xA;""What we do"": ""What we do"", &#xA;""Get in touch"": ""Get in touch""&#xA;</code></pre>&#xA;",6599838,"",,"",,2019-02-21T13:14:51,"","",,1,,,
54855777,2,,54855404,2019-02-24T19:41:22,,1,,"<p>It seems you already have all the required parts to do the query. You just need to create the <code>sort</code> selector based on your <code>sortProperty</code>. This will be an object with a key equal to the value held by <code>sortProperty</code> for example <code>age</code>. The result will look like this</p>&#xA;&#xA;<pre><code>module.exports = (criteria, sortProperty, offset = 0, limit = 20) =&gt; {&#xA;  return Artist&#xA;    .find()&#xA;    .sort({ [sortProperty]: 1 })&#xA;    .skip(offset)&#xA;    .limit(limit);&#xA;};&#xA;</code></pre>&#xA;&#xA;<h1>Note</h1>&#xA;&#xA;<p>To illustrate the dynamic key assignation, here's a snippet</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const sortProperty = 'age';&#xD;&#xA;const selector = { [sortProperty]: 1 };&#xD;&#xA;&#xD;&#xA;console.log(selector);</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4959547,"",,"",,2019-02-24T19:41:22,"","",,1,,,
54950205,2,,54950138,2019-03-01T18:17:58,,2,,"<p>So at the end of <code>mainPage.js</code>:</p>&#xA;&#xA;<pre><code>module.exports = { createWindow }&#xA;</code></pre>&#xA;&#xA;<p>and at the top of <code>main.js</code></p>&#xA;&#xA;<pre><code>const { createWindow } = require(""./mainPage"") //assuming files in same dir&#xA;</code></pre>&#xA;&#xA;<p>See <a href=""https://nodejs.org/api/modules.html#modules_modules"" rel=""nofollow noreferrer"">https://nodejs.org/api/modules.html#modules_modules</a> for more information about how this works.</p>&#xA;",14357,"",,"",,2019-03-01T18:17:58,"","",,1,,,
54968327,2,,54965281,2019-03-03T11:28:14,,1,,"<p>You can send the ports the <code>serialport.list ()</code> function provides via IPC to your main process, where you put them to the template and then set this as your application's menu.</p>&#xA;&#xA;<p>For example, the renderer process' file:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const serialport = require (""serialport"");&#xA;const { ipcRenderer } = require (""electron"");&#xA;&#xA;get_ports = function () {&#xA;    console.log ('clicked');&#xA;    serialport.list ((err, ports) =&gt; {&#xA;        if (err) {&#xA;            console.log (err);&#xA;            return;&#xA;        } else {&#xA;            ipcRenderer.send (""serialports"", ports);&#xA;        }&#xA;    })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And then inside your main process' file:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// `template' as in your question&#xA;const { ipcMain, Menu } = require (""electron"");&#xA;&#xA;ipcMain.on (""serialports"", (event, data) =&gt; {&#xA;    var portsSubmenu = [];&#xA;&#xA;    for (port in data) {&#xA;        portsSubmenu.push ({ label: port.comName });&#xA;    }&#xA;&#xA;    template[1].submenu[0].submenu = portsSubmenu;&#xA;    Menu.setApplicationMenu (Menu.buildFromTemplate (template));&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The indices of the submenu you want to modify (here <code>template[1].submenu[0]</code>) change, if you put new items before your <code>""Ports""</code> item.</p>&#xA;",6786876,"",,"",,2019-03-03T11:28:14,"","",,1,,,
55006386,2,,55004146,2019-03-05T15:35:51,,1,,"<p>According to Electron's documentation on <a href=""https://electronjs.org/docs/api/ipc-renderer#eventsenderid"" rel=""nofollow noreferrer""><code>ipcRenderer</code>, the <code>event.sender.id</code> property</a> is equal to the ID of the <code>webContents</code> from which the message originated.</p>&#xA;&#xA;<p>Therefore it should be possible to retrieve the current window's unique ID via its <code>WebContents</code> using <a href=""https://electronjs.org/docs/api/remote"" rel=""nofollow noreferrer"">Electron's <code>remote</code> module</a>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import { remote } from 'electron';&#xA;const isMainRenderer = remote.getCurrentWebContents ().id === 2;&#xA;</code></pre>&#xA;",6786876,"",,"",,2019-03-05T15:35:51,"","",,1,,,
54852399,2,,54852372,2019-02-24T13:31:39,,0,,"<p>Declare <code>bloodType</code> as a <code>var</code> or <code>let</code> outside of onLoad to make it accessible inside another method, or obtain it from inside <code>submitForm</code>.</p>&#xA;&#xA;<pre><code>function submitForm(e){&#xA;    const bloodType = document.getElementById(""bloodType"").value;&#xA;    e.preventDefault();&#xA;    console.log(""working"");&#xA;    console.log(bloodType, ""working"");&#xA;    ipcRenderer.send('Request:bloodType', bloodType);&#xA;}&#xA;</code></pre>&#xA;&#xA;<pre><code>let bloodType;&#xA;&#xA;window.onload = function(){&#xA;    bloodType = document.getElementById(""bloodType"").value;&#xA;}&#xA;&#xA;function submitForm(e){&#xA;    e.preventDefault();&#xA;    console.log(""working"");&#xA;    console.log(bloodType, ""working"");&#xA;    ipcRenderer.send('Request:bloodType', bloodType);&#xA;}&#xA;</code></pre>&#xA;",5093961,"",9311972,"",2019-02-24T14:58:41,2019-02-24T14:58:41,"","",,2,,,
54910063,2,,54552734,2019-02-27T16:27:00,,0,,"<p>The server-side works and <code>receiptRaw.toString('base64')</code> is correct.</p>&#xA;&#xA;<p>If I send the following to <a href=""https://sandbox.itunes.apple.com/verifyReceipt/"" rel=""nofollow noreferrer"">https://sandbox.itunes.apple.com/verifyReceipt/</a> I get <code>""status"": 0</code> (so it works).</p>&#xA;&#xA;<pre><code>{&#xA;    ""receipt-data"": ""MIITvQYJKoZIhvcNAQcCoIITrjCCE6oCAQExCzAJBgUrDgMCGgUAMIIDXgYJKoZIhvcNAQcBoIIDTwSCA0sxggNHMAoCAQgCAQEEAhYAMAsCAQECAQEEAwIBADALAgELAgEBBAMCAQAwCwIBDgIBAQQDAgEBMAsCAQ8CAQEEAwIBADALAgEQAgEBBAMCAQAwCwIBGQIBAQQDAgECMAwCAQoCAQEEBBYCNCswDAIBDQIBAQQEAgJPsDANAgETAgEBBAUMAzEuMDAOAgEJAgEBBAYCBFAyNTAwDwIBAwIBAQQHDAUzLjEuMDAYAgEEAgECBBDZH25y3AVp0DiRwqCbmOYUMBsCAQACAQEEEwwRUHJvZHVjdGlvblNhbmRib3gwHAIBBQIBAQQUq4SAn3GP/r9wmiWblq6pOanTvI0wHgIBDAIBAQQWFhQyMDE5LTAyLTI4VDExOjMzOjEzWjAeAgESAgEBBBYWFDIwMTMtMDgtMDFUMDc6MDA6MDBaMCgCAQICAQEEIAweY29tLmRhbm55Y29ubmVsbC5lbWFpbHNuaXBwZXRzMEECAQcCAQEEOdrRqA/OxaHc8kLj001m9rQejr61l6M0gArTEDNzZpWxyLO7s1vqZfwiz6PvElR5ajPSI7EujKOUUzBJAgEGAgEBBEF/1IGlDJnWuNkYJbQNccJXMuG+5zDGmBE1wNMIcHZHpoSUeg7O9F5P2kvtgSGLiN2f/mVMzVlWXMyKmk3jXTtLTzCCAVACARECAQEEggFGMYIBQjALAgIGrAIBAQQCFgAwCwICBq0CAQEEAgwAMAsCAgawAgEBBAIWADALAgIGsgIBAQQCDAAwCwICBrMCAQEEAgwAMAsCAga0AgEBBAIMADALAgIGtQIBAQQCDAAwCwICBrYCAQEEAgwAMAwCAgalAgEBBAMCAQEwDAICBqsCAQEEAwIBADAMAgIGrgIBAQQDAgEAMAwCAgavAgEBBAMCAQAwDAICBrECAQEEAwIBADAWAgIGpgIBAQQNDAtwcm8udXBncmFkZTAbAgIGpwIBAQQSDBAxMDAwMDAwNTAwMzk0MTMyMBsCAgapAgEBBBIMEDEwMDAwMDA1MDAzOTQxMzIwHwICBqgCAQEEFhYUMjAxOS0wMi0wNlQxMDo1MzowMFowHwICBqoCAQEEFhYUMjAxOS0wMi0wNlQxMDo1MzowMFqggg5lMIIFfDCCBGSgAwIBAgIIDutXh+eeCY0wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNVBAYTAlVTMRMwEQYDVQQKDApBcHBsZSBJbmMuMSwwKgYDVQQLDCNBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9uczFEMEIGA1UEAww7QXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTUxMTEzMDIxNTA5WhcNMjMwMjA3MjE0ODQ3WjCBiTE3MDUGA1UEAwwuTWFjIEFwcCBTdG9yZSBhbmQgaVR1bmVzIFN0b3JlIFJlY2VpcHQgU2lnbmluZzEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApc+B/SWigVvWh+0j2jMcjuIjwKXEJss9xp/sSg1Vhv+kAteXyjlUbX1/slQYncQsUnGOZHuCzom6SdYI5bSIcc8/W0YuxsQduAOpWKIEPiF41du30I4SjYNMWypoN5PC8r0exNKhDEpYUqsS4+3dH5gVkDUtwswSyo1IgfdYeFRr6IwxNh9KBgxHVPM3kLiykol9X6SFSuHAnOC6pLuCl2P0K5PB/T5vysH1PKmPUhrAJQp2Dt7+mf7/wmv1W16sc1FJCFaJzEOQzI6BAtCgl7ZcsaFpaYeQEGgmJjm4HRBzsApdxXPQ33Y72C3ZiB7j7AfP4o7Q0/omVYHv4gNJIwIDAQABo4IB1zCCAdMwPwYIKwYBBQUHAQEEMzAxMC8GCCsGAQUFBzABhiNodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDAzLXd3ZHIwNDAdBgNVHQ4EFgQUkaSc/MR2t5+givRN9Y82Xe0rBIUwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBSIJxcJqbYYYIvs67r2R1nFUlSjtzCCAR4GA1UdIASCARUwggERMIIBDQYKKoZIhvdjZAUGATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMA4GA1UdDwEB/wQEAwIHgDAQBgoqhkiG92NkBgsBBAIFADANBgkqhkiG9w0BAQUFAAOCAQEADaYb0y4941srB25ClmzT6IxDMIJf4FzRjb69D70a/CWS24yFw4BZ3+Pi1y4FFKwN27a4/vw1LnzLrRdrjn8f5He5sWeVtBNephmGdvhaIJXnY4wPc/zo7cYfrpn4ZUhcoOAoOsAQNy25oAQ5H3O5yAX98t5/GioqbisB/KAgXNnrfSemM/j1mOC+RNuxTGf8bgpPyeIGqNKX86eOa1GiWoR1ZdEWBGLjwV/1CKnPaNmSAMnBjLP4jQBkulhgwHyvj3XKablbKtYdaG6YQvVMpzcZm8w7HHoZQ/Ojbb9IYAYMNpIr7N4YtRHaLSPQjvygaZwXG56AezlHRTBhL8cTqDCCBCIwggMKoAMCAQICCAHevMQ5baAQMA0GCSqGSIb3DQEBBQUAMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMSYwJAYDVQQLEx1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEWMBQGA1UEAxMNQXBwbGUgUm9vdCBDQTAeFw0xMzAyMDcyMTQ4NDdaFw0yMzAyMDcyMTQ4NDdaMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECgwKQXBwbGUgSW5jLjEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxRDBCBgNVBAMMO0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyjhUpstWqsgkOUjpjO7sX7h/JpG8NFN6znxjgGF3ZF6lByO2Of5QLRVWWHAtfsRuwUqFPi/w3oQaoVfJr3sY/2r6FRJJFQgZrKrbKjLtlmNoUhU9jIrsv2sYleADrAF9lwVnzg6FlTdq7Qm2rmfNUWSfxlzRvFduZzWAdjakh4FuOI/YKxVOeyXYWr9Og8GN0pPVGnG1YJydM05V+RJYDIa4Fg3B5XdFjVBIuist5JSF4ejEncZopbCj/Gd+cLoCWUt3QpE5ufXN4UzvwDtIjKblIV39amq7pxY1YNLmrfNGKcnow4vpecBqYWcVsvD95Wi8Yl9uz5nd7xtj/pJlqwIDAQABo4GmMIGjMB0GA1UdDgQWBBSIJxcJqbYYYIvs67r2R1nFUlSjtzAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFCvQaUeUdgn+9GuNLkCm90dNfwheMC4GA1UdHwQnMCUwI6AhoB+GHWh0dHA6Ly9jcmwuYXBwbGUuY29tL3Jvb3QuY3JsMA4GA1UdDwEB/wQEAwIBhjAQBgoqhkiG92NkBgIBBAIFADANBgkqhkiG9w0BAQUFAAOCAQEAT8/vWb4s9bJsL4/uE4cy6AU1qG6LfclpDLnZF7x3LNRn4v2abTpZXN+DAb2yriphcrGvzcNFMI+jgw3OHUe08ZOKo3SbpMOYcoc7Pq9FC5JUuTK7kBhTawpOELbZHVBsIYAKiU5XjGtbPD2m/d73DSMdC0omhz+6kZJMpBkSGW1X9XpYh3toiuSGjErr4kkUqqXdVQCprrtLMK7hoLG8KYDmCXflvjSiAcp/3OIK5ju4u+y6YpXzBWNBgs0POx1MlaTbq/nJlelP5E3nJpmB6bz5tCnSAXpm4S6M9iGKxfh44YGuv9OQnamt86/9OBqWZzAcUaVc7HGKgrRsDwwVHzCCBLswggOjoAMCAQICAQIwDQYJKoZIhvcNAQEFBQAwYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYwFAYDVQQDEw1BcHBsZSBSb290IENBMB4XDTA2MDQyNTIxNDAzNloXDTM1MDIwOTIxNDAzNlowYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYwFAYDVQQDEw1BcHBsZSBSb290IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5JGpCR+R2x5HUOsF7V55hC3rNqJXTFXsixmJ3vlLbPUHqyIwAugYPvhQCdN/QaiY+dHKZpwkaxHQo7vkGyrDH5WeegykR4tb1BY3M8vED03OFGnRyRly9V0O1X9fm/IlA7pVj01dDfFkNSMVSxVZHbOU9/acns9QusFYUGePCLQg98usLCBvcLY/ATCMt0PPD5098ytJKBrI/s61uQ7ZXhzWyz21Oq30Dw4AkguxIRYudNU8DdtiFqujcZJHU1XBry9Bs/j743DN5qNMRX4fTGtQlkGJxHRiCxCDQYczioGxMFjsWgQyjGizjx3eZXP/Z15lvEnYdp8zFGWhd5TJLQIDAQABo4IBejCCAXYwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFCvQaUeUdgn+9GuNLkCm90dNfwheMB8GA1UdIwQYMBaAFCvQaUeUdgn+9GuNLkCm90dNfwheMIIBEQYDVR0gBIIBCDCCAQQwggEABgkqhkiG92NkBQEwgfIwKgYIKwYBBQUHAgEWHmh0dHBzOi8vd3d3LmFwcGxlLmNvbS9hcHBsZWNhLzCBwwYIKwYBBQUHAgIwgbYagbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjANBgkqhkiG9w0BAQUFAAOCAQEAXDaZTC14t+2Mm9zzd5vydtJ3ME/BH4WDhRuZPUc38qmbQI4s1LGQEti+9HOb7tJkD8t5TzTYoj75eP9ryAfsfTmDi1Mg0zjEsb+aTwpr/yv8WacFCXwXQFYRHnTTt4sjO0ej1W8k4uvRt3DfD0XhJ8rxbXjt57UXF6jcfiI1yiXV2Q/Wa9SiJCMR96Gsj3OBYMYbWwkvkrL4REjwYDieFfU9JmcgijNq9w2Cz97roy/5U2pbZMBjM3f3OgcsVuvaDyEO2rpzGU+12TZ/wYdV2aeZuTJC+9jVcZ5+oVK3G72TQiQSKscPHbZNnF5jyEuAF1CqitXa5PzQCQc3sHV1ITGCAcswggHHAgEBMIGjMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECgwKQXBwbGUgSW5jLjEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxRDBCBgNVBAMMO0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENlcnRpZmljYXRpb24gQXV0aG9yaXR5AggO61eH554JjTAJBgUrDgMCGgUAMA0GCSqGSIb3DQEBAQUABIIBADI4d1kkuyKPadpuUOsloajh0qAe7imW3ezfSwdmAyGVPqLgm8sXYrms3oP9DQUp1280UZP+ZStjGxSHL++u1zl33v/Gbl1KOM+QPuPtj49967l9VqOlzI2Pm1uxBOa8ztqIpU/fdO5GMapJAyJ95If/BgrXLvb7dqNCOSjAZnqBXbCjucr2natn9xSg1ug++Qdck+cJaOt7QyKE3blhr7PoVnUpEmRlYy4XnaOja8I/Ac6n+mhnV7ITnCSfPFnZmAREXcylWxCUvm6RDtR9dNmyWXhhvQDK/vlA9rbGQi7KOrW6y2TuMy2mc8Ircd7qbzGs3GAossD39u7Xs+AUmuA=""&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>However, your server decodes the parameter when you call <code>$_GET['res']</code>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The GET variables are passed through urldecode(). (<a href=""http://php.net/manual/en/reserved.variables.get.php"" rel=""nofollow noreferrer"">http://php.net/manual/en/reserved.variables.get.php</a>)</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>So what you send to the Apple's verification endpoint is not a base64 encoded receipt.</strong></p>&#xA;&#xA;<p>Moreover, you use <code>$_GET['res']</code> while you call your server with a POST.</p>&#xA;&#xA;<p>I suggest you to use <code>$res = $_POST['res']</code> or <code>Content-Type: application/json</code> instead of <code>application/x-www-form-urlencoded</code> (see <a href=""https://www.stevenrombauts.be/2018/06/read-json-request-data-with-php/"" rel=""nofollow noreferrer"">https://www.stevenrombauts.be/2018/06/read-json-request-data-with-php/</a>).</p>&#xA;",6258697,"",6258697,"",2019-02-28T16:25:10,2019-02-28T16:25:10,"","",,2,,,
54979145,2,,54975281,2019-03-04T08:17:58,,1,,"<p><a href=""http://teamparamount.cn:8080/Paramount/filesroot?username=test"" rel=""nofollow noreferrer"">http://teamparamount.cn:8080/Paramount/filesroot?username=test</a> returns this:</p>&#xA;&#xA;<pre><code>{""status"":""success"",""info"":""[{\""size\"":\""10105\""...&#xA;</code></pre>&#xA;&#xA;<p>where <code>info</code> property is a string, which has to be parsed separately. That's what you apparently trying to do in:</p>&#xA;&#xA;<pre><code>var xxx = JSON.parse(data).info;&#xA;</code></pre>&#xA;&#xA;<p>But instead of <code>JSON.parse(data).info</code> you should do: <code>JSON.parse(data.info)</code>. Then you will receive your <code>info</code> array into the <code>xxx</code> variable.</p>&#xA;",189673,"",,"",,2019-03-04T08:17:58,"","",,2,,,
54998782,2,,54998062,2019-03-05T08:51:33,,2,,"<p><a href=""https://electronjs.org/docs/api/web-contents#contentsopendevtoolsoptions"" rel=""nofollow noreferrer""><code>openDevTools</code></a> is basically a function of <code>webContents</code> (when used on <code>BrowserWindow</code> it's only <a href=""https://github.com/electron/electron/blob/v4.0.7/lib/browser/api/browser-window.js#L156"" rel=""nofollow noreferrer"">redirected</a>)</p>&#xA;&#xA;<p>So you can open devtools of main window with&#xA;</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>win.webContents.openDevTools()&#xA;</code></pre>&#xA;&#xA;<p>And for the <code>BrowserView</code> with</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>view.webContents.openDevTools()&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2019-11-07T06:48:55,2019-11-07T06:48:55,"","",,2,,,
55000061,2,,54988921,2019-03-05T09:58:17,,2,,"<p>I created a sample React+Electron project following this <a href=""https://medium.freecodecamp.org/building-an-electron-application-with-create-react-app-97945861647c"" rel=""nofollow noreferrer"">guide</a> and didn't face any issue with TestCafe integration.</p>&#xA;&#xA;<p>I can only suppose that there is an error somewhere in configuration, so I'll appreciate it if you provide us with your project. In this case, I'll be able to research the issue in detail. Please create a separate issue on GitHub using the following <a href=""https://github.com/DevExpress/testcafe/issues/new?template=bug-report.md"" rel=""nofollow noreferrer"">form</a></p>&#xA;",9994312,"",,"",,2019-03-05T09:58:17,"","",,2,,,
54866695,2,,54845793,2019-02-25T12:54:33,,0,,"<p>This may work, Try it and let me know.</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    document.addEventListener('DOMContentLoaded', () =&gt; {&#xA;        fs.readFile(path.join(__dirname, 'fragments/main/welcome.html'), 'utf8', (err, data) =&gt; {&#xA;            document.getElementById('content').innerHTML = data;&#xA;            var scripts = document.getElementById('content').getElementsByTagName(""script"");&#xA;            for (var i = 0; i &lt; scripts.length; i++) {&#xA;              eval(scripts[i].innerText);&#xA;            }&#xA;        });&#xA;    });&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",6942249,"",6942249,"",2019-02-25T15:19:37,2019-02-25T15:19:37,"","",,3,,,
54993689,2,,54993235,2019-03-05T00:30:55,,1,,"<blockquote>&#xA;  <p>If I understand correctly you want to migrate from MSI to NSIS format?&#xA;  There is an article on this here:&#xA;  <a href=""https://nsis.sourceforge.io/Uninstalling_a_previous_MSI"" rel=""nofollow noreferrer"">https://nsis.sourceforge.io/Uninstalling_a_previous_MSI</a>.</p>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<p>I would suggest, however, that you find the <strong>product code</strong> for the MSI and invoke <strong><code>msiexec.exe</code></strong> with the product code and your own uninstall string (not the one gotten from the registry as shown in the above documentation). This way you can add a few constructs to prevent <strong>spontaneous reboot</strong> and to <strong>enforce proper silent running</strong>. This approach is described below.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong><em>Uninstall MSI</em></strong>: You can uninstall the previous MSI version by running an uninstall command in any number of ways: <a href=""https://stackoverflow.com/questions/450027/uninstalling-an-msi-file-from-the-command-line-without-using-msiexec/1055933#1055933"">Uninstalling an MSI file from the command line without using msiexec</a>.</p>&#xA;&#xA;<p><strong><em>Find Product Code</em></strong>: You can find the product GUID of the MSI as follows: <a href=""https://stackoverflow.com/questions/29937568/how-can-i-find-the-product-guid-of-an-installed-msi-setup/29937569#29937569"">How can I find the product GUID of an installed MSI setup?</a></p>&#xA;&#xA;<p><strong><em>Command Line</em></strong>: Combining approach 3.5 from first link above and the product code found using the information in the second link, you can use a command line like this to invoke from your NSIS installer:</p>&#xA;&#xA;<pre><code>msiexec.exe /x {11111111-1111-1111-1111-11111111111X} /QN /L*V ""C:\msilog.log"" REBOOT=ReallySuppress&#xA;</code></pre>&#xA;&#xA;<p><strong><em>Quick Parameter Explanation</em></strong>:</p>&#xA;&#xA;<pre><code>/X = run uninstall sequence&#xA;{11111111-1111-1111-1111-11111111111X} = product guid of app to uninstall&#xA;/QN = run completely silently&#xA;/L*V ""C:\msilog.log""= verbose logging at path specified&#xA;REBOOT=ReallySuppress = prevent unexpected reboot of computer&#xA;</code></pre>&#xA;&#xA;<p><strong><em>ExecWait</em></strong>: NSIS requires its own peculiar command format: <a href=""https://stackoverflow.com/questions/51445588/running-msiexec-in-a-nsis-script-with-installer-switches"">Running MSIEXEC in a NSIS script with installer switches</a>. Haven't tested this yet, but a suggestion:</p>&#xA;&#xA;<pre><code>StrCpy $R0 ""{11111111-1111-1111-1111-11111111111X}"";  the MSI's ProductID of my package&#xA;ExecWait '""msiexec.exe"" /x $R0 /QN REBOOT=ReallySuppress'&#xA;</code></pre>&#xA;&#xA;<p>Check here for fine-tuning the command line: <a href=""https://nsis.sourceforge.io/Uninstalling_a_previous_MSI"" rel=""nofollow noreferrer"">https://nsis.sourceforge.io/Uninstalling_a_previous_MSI</a>.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong><em>Links</em></strong>:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://nsis.sourceforge.io/Uninstalling_a_previous_MSI"" rel=""nofollow noreferrer"">https://nsis.sourceforge.io/Uninstalling_a_previous_MSI</a></li>&#xA;<li><a href=""https://nsis.sourceforge.io/Auto-uninstall_old_before_installing_new"" rel=""nofollow noreferrer"">https://nsis.sourceforge.io/Auto-uninstall_old_before_installing_new</a></li>&#xA;<li><a href=""https://stackoverflow.com/questions/719631/how-do-i-require-user-to-uninstall-previous-version-with-nsis"">How do I require user to uninstall previous version with NSIS</a></li>&#xA;<li><a href=""https://nsis.sourceforge.io/Removing_MSI_packages_with_MSI_related_functions"" rel=""nofollow noreferrer"">https://nsis.sourceforge.io/Removing_MSI_packages_with_MSI_related_functions</a></li>&#xA;</ul>&#xA;",129130,"",129130,"",2019-03-05T01:18:07,2019-03-05T01:18:07,"","",,3,,,
54952769,2,,54951520,2019-03-01T21:50:39,,1,,"<p>This works in Windows Powershell if all PATH variables to <code>vue-cli-sevice</code> and <code>electron</code> are correct: </p>&#xA;&#xA;<p><code>set NODE_ENV=DEV ; vue serve ; timeout 5 ; electron app.js</code></p>&#xA;&#xA;<p>Note that the new version of vue changed some commands:</p>&#xA;&#xA;<p><a href=""https://cli.vuejs.org/guide/installation.html"" rel=""nofollow noreferrer"">https://cli.vuejs.org/guide/installation.html</a></p>&#xA;&#xA;<p>Windows command help:</p>&#xA;&#xA;<p><a href=""https://superuser.com/questions/79612/setting-and-getting-windows-environment-variables-from-the-command-prompt"">Setting and getting Windows environment variables from the command prompt?</a></p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/8055371/how-do-i-run-two-commands-in-one-line-in-windows-cmd"">How do I run two commands in one line in Windows CMD?</a></p>&#xA;&#xA;<hr>&#xA;&#xA;<p>What solved the issue in the end was changing relative paths to absolute.</p>&#xA;&#xA;<p>Also this was useful: <a href=""https://nklayman.github.io/vue-cli-plugin-electron-builder/"" rel=""nofollow noreferrer"">https://nklayman.github.io/vue-cli-plugin-electron-builder/</a></p>&#xA;",1242389,"",1242389,"",2019-03-04T13:07:34,2019-03-04T13:07:34,"","",,6,,,
55004890,2,,54689968,2019-03-05T14:18:03,,3,,"<p>in ngx-print code we have this part to do this:</p>&#xA;&#xA;<pre><code>printContents = document.getElementById(this.printSectionId).innerHTML;&#xA;popupWin = window.open('_blank', '', 'top=0,left=0,height=100%,width=auto');&#xA;popupWin.document.open();&#xA;popupWin.document.write(""\n      &lt;html&gt;\n        &lt;head&gt;\n          &lt;title&gt;"" + (this.printTitle ? this.printTitle : '') + ""&lt;/title&gt;\n          &lt;style&gt;\n            "" + this.returnStyleValues() + ""\n          &lt;/style&gt;\n        &lt;/head&gt;\n    &lt;body onload=\""window.print();window.close()\""&gt;"" + printContents + ""&lt;/body&gt;\n      &lt;/html&gt;"");&#xA;popupWin.document.close();&#xA;</code></pre>&#xA;&#xA;<p>when electron tries to open new window it opens a <code>BrowserWindowProxy</code> so after that if it tries to access popupWin.document it get's undefined and shows error.&#xA;we can tell electron to open a native window to access the open of it and the access to document, so in your <code>main.js</code> or <code>main.ts</code> you can try:</p>&#xA;&#xA;<pre><code>win = new BrowserWindow({&#xA;    x: 0,&#xA;    y: 0,&#xA;    width: size.width,&#xA;    height: size.height,&#xA;    webPreferences: {&#xA;      nativeWindowOpen: true, // add this&#xA;      nodeIntegration: false&#xA;    }&#xA; });&#xA;</code></pre>&#xA;&#xA;<p>then the electron will new a native window. then in the ngx-print code the </p>&#xA;&#xA;<pre><code>popupWin = window.open('', '_blank', 'top=0,left=0,height=100%,width=auto'); &#xA;</code></pre>&#xA;&#xA;<p>should be:</p>&#xA;&#xA;<pre><code>popupWin = window.open('_blank', '', 'top=0,left=0,height=100%,width=auto');&#xA;</code></pre>&#xA;&#xA;<p>to open a new blank page.&#xA;you can read more about <code>webPreferences</code> in <a href=""https://electronjs.org/docs/api/browser-window"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/browser-window</a>.</p>&#xA;",8990367,"",,"",,2019-03-05T14:18:03,"","",,6,,,
55006200,2,,55005208,2019-03-05T15:26:36,,4,,"<p><code>app.getAppPath()</code> doesn't take an argument.</p>&#xA;&#xA;<p>For <code>app.getPath(name)</code>, the argument should be the <em>string</em> <code>""temp""</code>: <code>app.getPath(""temp"")</code>.</p>&#xA;",1269732,"",,"",,2019-03-05T15:26:36,"","",,6,,,
54982823,2,,54982622,2019-03-04T12:00:19,,1,,"<p>The screen resolution is not necessarily equal to the browser when it is in full screen. If you set the browser size base on the computer screen you will see gaps like those. You can see it by using Selenium <code>maximize()</code> function to get full screen and then <code>getRect()</code>, you will see it is different from <code>windowWidth</code> and <code>windowHeight</code></p>&#xA;&#xA;<p>Use Selenium <code>maximize()</code> function to set the browser size</p>&#xA;&#xA;<pre><code>driver.manage().window().maximize()&#xA;</code></pre>&#xA;",5168011,"",,"",,2019-03-04T12:00:19,"","",,7,,,
46552094,2,,46550171,2017-10-03T19:34:58,,0,,"<p>I might have been too early to post, but I ended up using xml2js:</p>&#xA;&#xA;<pre><code>const path = require('path')&#xA;const glob = require('glob');&#xA;const fs = require('fs');&#xA;const xml2js = require('xml2js');&#xA;&#xA;$(document).ready(function() {&#xA;    var files = glob.sync(path.join(__dirname, '../db/*/*.xml'));&#xA;    var counter = 0;&#xA;    files.forEach(function(f) {&#xA;        fs.readFile(f, function(err, data) {&#xA;            var parser = new xml2js.Parser({explicitArray : false});&#xA;            parser.parseString(data, function(err, xml) {&#xA;                // parsing done here&#xA;            });&#xA;            counter++;&#xA;            if (counter === files.length) {&#xA;                $(document).trigger('completed-xml-db-parse');&#xA;            }&#xA;        });&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",8166880,"",,"",,2017-10-03T19:34:58,"","",,0,,,
46568597,2,,46551003,2017-10-04T15:26:10,,3,,"<p>As discussed with the WebDriverio community it is difficult to handle the default alert() function. They suggested to implement my own alert() like function. So using <a href=""https://github.com/limonte/sweetalert2"" rel=""nofollow noreferrer"">https://github.com/limonte/sweetalert2</a> I implemented my own alert and the test is working fine.</p>&#xA;&#xA;<p>Community discussion : <a href=""https://gitter.im/webdriverio/webdriverio/archives/2017/10/04"" rel=""nofollow noreferrer"">https://gitter.im/webdriverio/webdriverio/archives/2017/10/04</a></p>&#xA;&#xA;<p>Spectron issue : <a href=""https://github.com/electron/spectron/issues/23"" rel=""nofollow noreferrer"">https://github.com/electron/spectron/issues/23</a></p>&#xA;",3768218,"",3768218,"",2018-03-16T01:28:43,2018-03-16T01:28:43,"","",,0,,,
46596347,2,,46595851,2017-10-05T23:50:02,,0,,"<p>Try it like this: </p>&#xA;&#xA;<pre><code>const sudo = require(""sudo-prompt"");// The -y did the trick&#xA;sudo.exec(""apt-get install lib32gcc1 -y"", {name: ""SteamCMD GUI""}, (error, stdout, stderr) =&gt; {&#xA;   // The code here doesn't execute, as it possibly waits for the user's confirmation to press Y and Enter &#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The <code>-y</code> option makes <code>apt-get</code> skip the prompts.</p>&#xA;",1796236,"",,"",,2017-10-05T23:50:02,"","",,0,,,
46608130,2,,46554634,2017-10-06T14:32:26,,5,,"<p>With the great help from Samuel Attard (<a href=""https://github.com/MarshallOfSound"" rel=""noreferrer"">https://github.com/MarshallOfSound</a>) I was able to solve the problem (he solved for me actually)</p>&#xA;&#xA;<p>As he said:</p>&#xA;&#xA;<pre><code>the default electron app will launch the first file path provided to it&#xA;so `electron path/to/thing` will work&#xA;in a packaged state, that launch logic is not present&#xA;it will always run the app you have packaged regardless of the CLI args passed to it&#xA;you need to handle the argument manually yourself&#xA;and launch that JS file if it's passed in as the 1st argument&#xA;The first argument to fork simply calls `process.execPath` with the first&#xA;argument being the path provided afaik&#xA;The issue is that when packaged Electron apps don't automatically run the&#xA;path provided to them&#xA;they run the app that is packaged within them&#xA;</code></pre>&#xA;&#xA;<p>In other words. <code>fork</code> is actually <code>spawn</code> being executed with <code>process.execPath</code> and passing the fork's first argument as the second for spawn.</p>&#xA;&#xA;<p>What happens in a packaged app is that the <code>process.execPath</code> isn't electron but the packaged app itself. So if you try to <code>spawn</code>, the app will be open over and over again.</p>&#xA;&#xA;<p>So, what Samuel suggest was implemented like this:</p>&#xA;&#xA;<pre><code>if (process.argv[1] === '--start-server') {&#xA;   require('./server/mainServer.js')&#xA;   return&#xA;}&#xA;&#xA;require('./local/mainLocal.js')&#xA;require('child_process').spawn(process.execPath, ['--start-server'])&#xA;</code></pre>&#xA;&#xA;<p>That way, the first time the packaged app will be executed, the <code>process.argv[1]</code> will be empty, so the server won't start. It will then execute the electron part (mainLocal in my case) and start the app over, but this time passing the <code>argv</code>. Next time the app starts, it will start the server and stop the execution, so the app won't open again because spawn is never reached.</p>&#xA;&#xA;<p>Huge thanks to Samuel.</p>&#xA;",2284797,"",,"",,2017-10-06T14:32:26,"","",,0,,,
46626819,2,,46626126,2017-10-08T01:51:07,,5,,"<p>Well, as suspected, the issue had nothing to do with either the front end or the back end. None of my code, really. It turned out that since I needed to compile some stuff while preparing zeroRPC, I used powershell as an administrator,, and you <a href=""https://github.com/electron/electron/issues/5243"" rel=""noreferrer"">can't drag files from user-run explorer into an admin-run electron app</a> - which makes sense and is in fact an expected behavior (it just so happened that I encountered this after doing some work, causing me to think the problem was with something I changed in my code).</p>&#xA;",2387772,"",,"",,2017-10-08T01:51:07,"","",,0,,,
46628334,2,,46628228,2017-10-08T06:59:41,,1,,"<p>Best practice (and required for the App Store) is to sandbox your app by putting all the files it needs under its own folder in ~/Library/Containers and only giving it access to that folder, which obviously means you can set the correct permissions. See <a href=""https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html"" rel=""nofollow noreferrer"">here</a> for full details. </p>&#xA;",554455,"",,"",,2017-10-08T06:59:41,"","",,0,,,
46642572,2,,46184599,2017-10-09T09:04:12,,3,,"<p>Your setup is correct for what you want to achieve. If the two builders do not run in parallel there's one of two things happening:</p>&#xA;&#xA;<ul>&#xA;<li>You set the project's concurrency to 1 in options (or this is the default nowadays) <a href=""https://blog.travis-ci.com/2014-07-18-per-repository-concurrency-setting/"" rel=""nofollow noreferrer"">blog post</a></li>&#xA;<li>There simply aren't enough free resources on travis side at that the time to run both. This could especially be relevant for macOS builds, where IIRC they have a lot fewer builders than for linux. </li>&#xA;</ul>&#xA;",2290151,"",,"",,2017-10-09T09:04:12,"","",,0,,,
46651272,2,,46562192,2017-10-09T16:44:40,,3,,"<p>Include a preload script when you are creating the browser window.&#xA;Ex. </p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;  webPreferences: {&#xA;    preload: path.join(__dirname, 'renderer.js')&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Here the <code>renderer.js</code> is loaded before any other js files of that window.</p>&#xA;&#xA;<p>From the source code - </p>&#xA;&#xA;<pre><code>     /**&#xA;     * Specifies a script that will be loaded before other scripts run in the page.&#xA;     * This script will always have access to node APIs no matter whether node&#xA;     * integration is turned on or off. The value should be the absolute file path to&#xA;     * the script. When node integration is turned off, the preload script can&#xA;     * reintroduce Node global symbols back to the global scope. See example .&#xA;     */&#xA;</code></pre>&#xA;&#xA;<p>Let me  know if that works!</p>&#xA;",2098614,"",,"",,2017-10-09T16:44:40,"","",,0,,,
46655113,2,,46653325,2017-10-09T21:15:53,,11,,"<p>In your renderer process (javascript loaded from <code>main.html</code>) you should be able to load Electron and Node modules.</p>&#xA;&#xA;<pre><code>const {ipcRenderer} = require('electron');&#xA;const closeApp = document.getElementById('closeApp');&#xA;closeApp.addEventListener('click', () =&gt; {&#xA;    ipcRenderer.send('close-me')&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>In <strong>main.js</strong> the script you posted</p>&#xA;&#xA;<pre><code>const {ipcMain} = require('electron')&#xA;ipcMain.on('close-me', (evt, arg) =&gt; {&#xA;  app.quit()&#xA;})&#xA;</code></pre>&#xA;",5423742,"",,"",,2017-10-09T21:15:53,"","",,0,,,
46693219,2,,44227258,2017-10-11T16:25:31,,1,,"<p>The short answer is that what you have described isn't the way you ""should"" use electron-packager. Normally, the intent is that you are building a local package (exe or such) under the project directory you are working on.  For example, an electron/angular project building on a Windows platform might have the following kind of structure:</p>&#xA;&#xA;<pre><code>C:.&#xA;+---ClientSide&#xA;¦   +---index.html&#xA;¦   +---app&#xA;¦   ¦   +---app.component.ts&#xA;¦   ¦   +---app.module.ts&#xA;¦   ¦   +---main.ts&#xA;¦   ¦   +---AppContent/&#xA;¦   ¦   +---help/&#xA;¦   +---Styles&#xA;¦   +---test&#xA;¦       +---AppContent/&#xA;+---dist/&#xA;+---edist&#xA;|   \---Application-win32-ia32 [*location of binary source for the install]&#xA;+---Installer&#xA;    +---Application/&#xA;gulpfile.js&#xA;karma.conf.js&#xA;main.js&#xA;package.json&#xA;README.md&#xA;webpack.config.js&#xA;</code></pre>&#xA;&#xA;<p>In this kind of scenario, the <code>package.json</code> file typically contains reference to both packages, as in:</p>&#xA;&#xA;<pre><code>.. .. ..&#xA;  ""devDependencies"": {&#xA;    ""@angular/animations"": ""4.4.4"",&#xA;    ""@angular/common"": ""4.4.4"",&#xA;    ""@angular/compiler"": ""4.4.4"",&#xA;.. .. ..&#xA;.. .. ..&#xA;    ""electron"": ""1.7.9"",&#xA;    ""electron-packager"": ""9.1.0"",&#xA;.. .. ..&#xA;</code></pre>&#xA;&#xA;<p>Then within your local <code>gulpfile.js</code> you would typically include a call to run the packager that refers to the local version of electron. Something like:</p>&#xA;&#xA;<pre><code>'use strict';&#xA;...   ...&#xA;var packager = require('electron-packager');&#xA;var electronPackage = require('electron/package.json');&#xA;var pkg = require('./package.json');&#xA;// pull the electron version from the package.json file&#xA;var electronVersion = electronPackage.version;&#xA;...   ...&#xA;&#xA;var opts = {&#xA;    name: pkg.name,&#xA;    platform: 'win32',&#xA;    arch: 'ia32',                           // ia32, x64 or all&#xA;    dir: './',                       // source location of app&#xA;    out: './edist/',              // destination location for app os/native binaries&#xA;    ignore: config.electronignore,          // don't include these directories in the electron app build&#xA;    icon: config.icon,&#xA;    asar: {unpackDir: config.electroncompiled}, // compress project/modules into an asar blob but don't use asar to pack the native compiled modules&#xA;    overwrite: true,&#xA;    prune: true,&#xA;    electronVersion: electronVersion ,       // Tell the packager what version of electron to build with&#xA;    appCopyright: pkg.copyright,            // copyright info&#xA;    appVersion: pkg.version,         // The version of the application we are building&#xA;    win32metadata: {                        // Windows Only config data&#xA;        CompanyName: pkg.authors,&#xA;        ProductName: pkg.name,&#xA;        FileDescription: pkg.description,&#xA;        OriginalFilename: pkg.name + '.exe'&#xA;    }&#xA;};&#xA;&#xA;&#xA;// Build the electron app&#xA;gulp.task('build:electron', function (cb) {&#xA;&#xA;    console.log('Launching task to package binaries for ' + opts.name + ' v' + opts['appVersion']);&#xA;&#xA;    packager(opts, function (err, appPath) {&#xA;        console.log(' &lt;- packagerDone() ' + err + ' ' + appPath);&#xA;        console.log(' all done!');&#xA;        cb();&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>If you don't want to build the same version of electron that as is present locally, you can change that parameter to whatever version of electron you'd like packager to use. As in, replacing this line of code:</p>&#xA;&#xA;<pre><code>// pull the electron version from the package.json file&#xA;var electronVersion = electronPackage.version;&#xA;</code></pre>&#xA;&#xA;<p>With something like this:</p>&#xA;&#xA;<pre><code>// Use a specific electron version&#xA;var electronVersion = '1.7.8';&#xA;</code></pre>&#xA;&#xA;<p>If you are going to run <code>electron-packager</code> from the command line, you have all the same options available as I've shown here in the API options. You can see the full list of options <a href=""https://github.com/electron-userland/electron-packager/blob/master/usage.txt"" rel=""nofollow noreferrer"">in their online github user docs</a> . In your case, if you are using command line then use the ""<code>--electron-version</code>"" switch to set the electron version you wish.</p>&#xA;",3946706,"",3946706,"",2017-10-24T22:24:04,2017-10-24T22:24:04,"","",,0,,,
46707990,2,,46071824,2017-10-12T11:03:06,,5,,"<p>I've just published a sample project which shows how to build a desktop app using Electron, Angular4 and Sqlite3. You can clone it <a href=""https://github.com/leota/electron-angular4-sqlite3"" rel=""noreferrer"">here</a></p>&#xA;&#xA;<p><strong>Note</strong>&#xA;I've node-gyp globally installed.</p>&#xA;&#xA;<p>Hope it helps</p>&#xA;",3276178,"",3276178,"",2017-10-12T12:23:35,2017-10-12T12:23:35,"","",,0,,,
46722356,2,,46691514,2017-10-13T04:03:07,,0,,"<p>I managed to required the dialog modifying the target in the webpack config <code>targe:electron-renderer</code> which import the module remote.</p>&#xA;&#xA;<p>Then we can import it like this</p>&#xA;&#xA;<pre><code>const remote = window.require(""electron"").remote;&#xA;const dialog = remote.require('dialog');&#xA;</code></pre>&#xA;&#xA;<p>And the I can use the dialog from electron. It's a workaround, I didn't figured out why electron was not available but it could be because of the really old version of <code>electron</code> and the <code>electron-packager</code>. This repo has not been updated for a while and the version were not fixed so it can produce issue.</p>&#xA;&#xA;<p>Anyway, for people trying this boilerplate, start with <code>electron forge</code> and <code>electron-compile</code>!</p>&#xA;",2798726,"",,"",,2017-10-13T04:03:07,"","",,0,,,
46725704,2,,46693401,2017-10-13T08:31:29,,1,,"<p>You can use <a href=""https://www.npmjs.com/package/winston"" rel=""nofollow noreferrer"">Winston</a> along with <a href=""https://www.npmjs.com/package/winston-mysql"" rel=""nofollow noreferrer"">winston-mysql</a> </p>&#xA;",324143,"",,"",,2017-10-13T08:31:29,"","",,0,,,
46730918,2,,38208469,2017-10-13T13:17:37,,1,,"<p><code>Menu.setApplicationMenu(Menu.buildFromTemplate(template));</code>&#xA;should be called within <code>createWindow()</code> function:</p>&#xA;&#xA;<pre><code>function createWindow() {&#xA;    mainWindow = new BrowserWindow({&#xA;        width: 800,&#xA;        height: 600&#xA;    })&#xA;    mainWindow.loadURL(url.format({&#xA;        pathname: path.join(__dirname, ""index_menus.html""),&#xA;        protocol: ""file:"",&#xA;        slashes: true&#xA;    }))&#xA;&#xA;    mainWindow.on(""closed"", () =&gt; {&#xA;        mainWindow = null;&#xA;    });&#xA;&#xA;    var template = [&#xA;      {label: 'File', submenu: [&#xA;        {label: 'New', click: SendEvent('file-new')},&#xA;        {label: 'Open', click: SendEvent('file-open')},&#xA;        {label: 'Save', click: SendEvent('file-save')},&#xA;        {label: 'Save As', click: SendEvent('file-save-as')},&#xA;        {label: 'Close', click: SendEvent('file-close')},&#xA;        {type: 'separator'},&#xA;        {label: 'Quit', click: function() {app.quit();}}&#xA;      ]},&#xA;      {label: 'View', submenu: [&#xA;        {label: 'HTML/Markdown', click: SendEvent('view-toggle')}&#xA;      ]}&#xA;    ];&#xA;    Menu.setApplicationMenu(Menu.buildFromTemplate(template));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you use ""File"" menu, it will be placed under YourAppName menu (the first one) on macOS.</p>&#xA;",8433375,"",8433375,"",2017-10-13T13:22:44,2017-10-13T13:22:44,"","",,0,,,
46747026,2,,46301543,2017-10-14T16:51:40,,0,,"<p>I was using angular material 1.1.5 with this error. When i downgraded it to 1.1.0 i can see the mdSelects working as expected, but still got some other erros like delay in mdDialog close, delay to change tabs, etc. It's a bug with angular-material animations.</p>&#xA;&#xA;<p>For anyone with this problem, I'm still using angular-material 1.1.5 , but I've disabled all the animations only in Safari, and now its working as expected.</p>&#xA;&#xA;<p>I'm using this code to inject a specific css file and bootstrap angularjs, and in the specific css file I disable all animations:</p>&#xA;&#xA;<pre><code>function boot() {&#xA;    if (/Safari/.test(navigator.userAgent)) {&#xA;        var head = document.head,&#xA;        style = document.createElement('link');&#xA;&#xA;        style.type = 'text/css';&#xA;        style.rel = 'stylesheet';&#xA;        style.href = 'styles/disable-animations.css';&#xA;&#xA;        head.appendChild(style);&#xA;    }&#xA;&#xA;    window.onload = function () {&#xA;        angular.bootstrap(document, ['app']);&#xA;    };&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>//styles/disable-animations.css file</p>&#xA;&#xA;<pre><code>* {&#xA;transition: none!important;&#xA;transition-duration: 0ms!important;&#xA;transition-delay: 0ms!important;&#xA;}&#xA;</code></pre>&#xA;",1358801,"",,"",,2017-10-14T16:51:40,"","",,0,,,
46770244,2,,46513808,2017-10-16T12:23:12,,2,,"<p>Well, it turns out I accidentally downloaded react dev tools instead of redux devtools :X, moral of the story is to double check before you download extensions </p>&#xA;",1245668,"",,"",,2017-10-16T12:23:12,"","",,0,,,
46562884,2,,46562367,2017-10-04T10:43:11,,22,,"<p>The problem seems to lie in the way <code>tsc</code> (and <code>tsserver</code>) resoves modules <a href=""http://www.typescriptlang.org/docs/handbook/modules.html"" rel=""noreferrer"">by default</a>.  </p>&#xA;&#xA;<p>To use use node.js-like algorithm you need to add <code>""moduleResolution"": ""node""</code> to <code>""compilerOptions""</code> section of <code>tsconfig.json</code>.</p>&#xA;",747768,"",747768,"",2017-10-04T13:25:09,2017-10-04T13:25:09,"","",,1,,,
46574307,2,,46573639,2017-10-04T21:15:45,,1,,"<p>Set nodeIntegration to false works.</p>&#xA;&#xA;<pre><code>  win = new BrowserWindow({&#xA;  width: 800,&#xA;  height: 600,&#xA;  webPreferences: {&#xA;    nodeIntegration: false,&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>For anyone else looking for an answer to this problem. More info on nodeIntegration here: <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/security.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/tutorial/security.md</a></p>&#xA;",8665466,"",,"",,2017-10-04T21:15:45,"","",,1,,,
46599404,2,,46596493,2017-10-06T06:16:22,,9,,"<p>In your main.js you could have this code:</p>&#xA;&#xA;<pre><code>// Quit when all windows are closed.&#xA;&#xA;  app.on('window-all-closed', function () {&#xA;  // On OS X it is common for applications and their menu bar  &#xA;  // to stay active until the user quits explicitly with Cmd + Q&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>So because you close the unique windows this event it's emitted and app is closed.</p>&#xA;&#xA;<p><strong>EDIT</strong>&#xA;This behavior is also default in Electron, so to avoid closing app closing the main window add this line:</p>&#xA;&#xA;<pre><code>app.on('window-all-closed', e =&gt; e.preventDefault() )&#xA;</code></pre>&#xA;",5423742,"",5423742,"",2017-10-07T09:46:56,2017-10-07T09:46:56,"","",,1,,,
46555793,2,,46356544,2017-10-04T01:40:35,,1,,"<p>Hot dang.  I finally found it.  My issue was that the button that was clicked-its type was not specified.  I assume that means it was defaulting to ""submit"" or ""reset"".  When I set it to ""button"", it quit refreshing for me and I'm able to go on my merry way.</p>&#xA;",8652998,"",,"",,2017-10-04T01:40:35,"","",,2,,,
46594601,2,,46594326,2017-10-05T20:52:13,,-1,,"<p>You should do it in javascript. You can use a library like Jquery to do that. I will note give code here, but if you have problem, show your work and it will be a pleasure to help you debug your code.</p>&#xA;&#xA;<p>There is a lot of way to do it.</p>&#xA;&#xA;<p>A way to do it:&#xA;You create a button. You add an event listener on it (listening the click event). Then you give a function to that event listener. This function is responsible for adding the textbox. You can look at the append function of jquery to do that. Or implement your own. </p>&#xA;&#xA;<p>Hope this help you, comment if something is not clear, I will add more explanation.</p>&#xA;",3184150,"",,"",,2017-10-05T20:52:13,"","",,2,,,
46635405,2,,46635313,2017-10-08T19:53:13,,1,,"<p>You can use <code>.load()</code> with hash set within ""settings.html""</p>&#xA;&#xA;<pre><code>$(""#element"").load(""downloader.html #sidebar"")&#xA;</code></pre>&#xA;",2801559,"",,"",,2017-10-08T19:53:13,"","",,2,,,
46647041,2,,46307797,2017-10-09T12:55:34,,8,,<p>I found a solution:&#xA;Use the Environment Variable (created by Electron-Builder)</p>&#xA;&#xA;<pre><code>process.env.PORTABLE_EXECUTABLE_DIR&#xA;</code></pre>&#xA;&#xA;<p>to show the real Path of the App.exe.&#xA;Works only packed with Electron-Builder</p>&#xA;,8635970,"",,"",,2017-10-09T12:55:34,"","",,2,,,
46650091,2,,46608622,2017-10-09T15:33:52,,1,,"<p>It's kinda ugly but you can pass a dummy holder browserwindow which is always on top.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>dialog.showMessageBox(&#xA;  new BrowserWindow({&#xA;    show: false,&#xA;    alwaysOnTop: true&#xA;  }),&#xA;  {&#xA;    type: 'question',&#xA;    message: 'is on top'&#xA;  }&#xA;)&#xA;</code></pre>&#xA;",2550156,"",,"",,2017-10-09T15:33:52,"","",,2,,,
46721447,2,,46721427,2017-10-13T02:10:01,,0,,"<p>If you are using the <code>-g</code> flag for global, you have to either run the command as the <code>root</code> user or invoke the command with <code>sudo</code></p>&#xA;&#xA;<p><code>sudo npm install -g electron</code></p>&#xA;",7700042,"",,"",,2017-10-13T02:10:01,"","",,2,,,
46746516,2,,46746424,2017-10-14T16:01:35,,0,,"<p>I believe you need to wrap the click event handler as a function, so line would read:</p>&#xA;&#xA;<pre><code>document.getElementById(""btn_submit"").addEventListener(""click"", function() { inputFromText(trainingText)});&#xA;</code></pre>&#xA;",7958667,"",,"",,2017-10-14T16:01:35,"","",,2,,,
46776534,2,,46776262,2017-10-16T18:08:59,,3,,"<p>I think it's just skipping your menus because they lack submenus, here is a modified version of your example that seems to work on my Mac:</p>&#xA;&#xA;<pre><code>const { app, BrowserWindow, Menu } = require(""electron"");&#xA;const url = require(""url"");&#xA;const path = require(""path"");&#xA;&#xA;const mainWindowUrl = url.format({&#xA;    pathname: path.join(__dirname, ""html"", ""main.html""),&#xA;    protocol: ""file:"",&#xA;    slashes: true&#xA;});&#xA;const menuTemplate = [&#xA;    {&#xA;        label: ""File"",&#xA;        submenu: [{role: 'TODO'}]&#xA;    },&#xA;    {&#xA;        label: ""Menu1"",&#xA;        submenu: [{role: 'TODO'}]&#xA;    },&#xA;    {&#xA;        label: ""Menu2"",&#xA;        submenu: [{role: 'TODO'}]&#xA;    }&#xA;];&#xA;&#xA;const onAppReady = () =&gt; {&#xA;    const mainWindow = new BrowserWindow({});&#xA;    mainWindow.loadURL(mainWindowUrl);&#xA;&#xA;    const menu = Menu.buildFromTemplate(menuTemplate);&#xA;    Menu.setApplicationMenu(menu);&#xA;};&#xA;&#xA;app.on(""ready"", onAppReady);&#xA;</code></pre>&#xA;&#xA;<p>I don't know if it's an OSX specific thing but it appears that at least Electron doesn't like menus that directly trigger roles instead they must reveal submenus that can then trigger some action.</p>&#xA;",16959,"",,"",,2017-10-16T18:08:59,"","",,2,,,
46556139,2,,46556011,2017-10-04T02:35:21,,22,,"<p>React removed <code>createClass</code> from version 16. &#xA;You can use <code>create-react-class</code> to migrate easily as shown in react documentation.</p>&#xA;&#xA;<pre><code>// Before (15.4 and below)&#xA;var React = require('react');&#xA;&#xA;var Component = React.createClass({&#xA;  mixins: [MixinA],&#xA;  render() {&#xA;    return &lt;Child /&gt;;&#xA;  }&#xA;});&#xA;&#xA;// After (15.5)&#xA;var React = require('react');&#xA;var createReactClass = require('create-react-class');&#xA;&#xA;var Component = createReactClass({&#xA;  mixins: [MixinA],&#xA;  render() {&#xA;    return &lt;Child /&gt;;&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>read more about this <a href=""https://reactjs.org/blog/2017/04/07/react-v15.5.0.html#migrating-from-reactcreateclass"" rel=""noreferrer"">https://reactjs.org/blog/2017/04/07/react-v15.5.0.html#migrating-from-reactcreateclass</a></p>&#xA;",8321804,"",740553,"",2017-10-04T02:47:41,2017-10-04T02:47:41,"","",,3,,,
46566908,2,,46564319,2017-10-04T14:03:10,,1,,"<p>Short answer (from mobile): use ipcRender module to send event to main and call the resize method.</p>&#xA;&#xA;<p><strong>Long answer:</strong>&#xA;I cannot find a playground for electron!</p>&#xA;&#xA;<pre><code>// In renderer process (web page).&#xA;const {ipcRenderer} = require('electron')&#xA;const myResizeBtn = document.getElementById('resizeBtn')&#xA;myResizeBtn.addEventListener('click', function () {&#xA;  ipcRenderer.send('resize-me-please')&#xA;})&#xA;&#xA;// in main.js&#xA;&#xA;const {ipcMain} = require('electron')&#xA;ipcMain.on('resize-me-please', (event, arg) =&gt; {&#xA;  win.setSize(width,height)&#xA;})&#xA;</code></pre>&#xA;",5423742,"",5423742,"",2017-10-04T15:59:49,2017-10-04T15:59:49,"","",,3,,,
46619100,2,,46606253,2017-10-07T10:18:38,,13,,"<p>In your renderer process (js script loaded from <code>login.html</code>) you should be able to load Electron and Node modules.</p>&#xA;&#xA;<pre><code>const {ipcRenderer} = require('electron');&#xA;&#xA;// Right after the line where you changed the document.location&#xA;ipcRenderer.send('resize-me-please')&#xA;</code></pre>&#xA;&#xA;<p>In <strong>main.js</strong></p>&#xA;&#xA;<pre><code>const {ipcMain} = require('electron')&#xA;ipcMain.on('resize-me-please', (event, arg) =&gt; {&#xA;  mainWindow.setSize(width,height)&#xA;})&#xA;</code></pre>&#xA;",5423742,"",,"",,2017-10-07T10:18:38,"","",,3,,,
46651348,2,,46571742,2017-10-09T16:50:12,,2,,"<p>try building with </p>&#xA;&#xA;<pre><code>""build"": ""electron-builder --publish never""&#xA;</code></pre>&#xA;&#xA;<p>to never publish.</p>&#xA;",2098614,"",,"",,2017-10-09T16:50:12,"","",,3,,,
46658784,2,,46500302,2017-10-10T04:48:50,,9,,"<p>This is actually very easy to do.</p>&#xA;&#xA;<ol>&#xA;<li>Configure your app in Visual Studio like this:</li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/3VKIw.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/3VKIw.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<ol start=""2"">&#xA;<li>Start your app. Electron will start on a separate terminal but Visual Studio won't be attached to it.</li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/K7t63.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/K7t63.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<ol start=""3"">&#xA;<li><p>Go to <strong>Debug > Attach to process...</strong> and enter the <strong>Webkit websocket</strong> connection type and <strong><a href=""http://127.0.0.1:5858"" rel=""noreferrer"">http://127.0.0.1:5858</a></strong> as the target.&#xA;<a href=""https://i.stack.imgur.com/nFU9v.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/nFU9v.png"" alt=""enter image description here""></a></p></li>&#xA;<li><p>Your breakpoints are now enabled.</p></li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/8BUEN.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/8BUEN.png"" alt=""enter image description here""></a></p>&#xA;",1623249,"",,"",,2017-10-10T04:48:50,"","",,3,,,
46764084,2,,46763893,2017-10-16T06:24:29,,2,,"<p>You always give the value to the progress with 1.0</p>&#xA;&#xA;<pre><code>function progress() {&#xA;    bar.animate(1.0);  // Number from 0.0 to 1.0&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So please change it to </p>&#xA;&#xA;<pre><code>function progress(val) {&#xA;    bar.animate(val);  // Number from 0.0 to 1.0&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and then change the update from </p>&#xA;&#xA;<pre><code>req.on('data', function (chunk) {&#xA;    // Update the received bytes&#xA;    received_bytes += chunk.length;&#xA;    progress();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>to this </p>&#xA;&#xA;<pre><code>req.on('data', function (chunk) {&#xA;    // Update the received bytes&#xA;    received_bytes += chunk.length;&#xA;    progress(received_bytes/total_bytes);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>as you can see you will find out that the progress change for every chunk update and divide it by the <code>total_bytes</code> if it is all downloaded then it will be 1.0 else will be the animation you need.</p>&#xA;&#xA;<p>or you can change the progress function to </p>&#xA;&#xA;<pre><code>function progress(val) {&#xA;    bar.set(val); // Number from 0.0 to 1.0&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>for setting the value exactly without animation. </p>&#xA;",3323137,"",8338128,"",2017-10-16T06:30:15,2017-10-16T06:30:15,"","",,5,,,
46690156,2,,46667106,2017-10-11T13:59:12,,1,,"<p><strong>Update</strong> </p>&#xA;&#xA;<p>You could use some different handlers include Basic/NTML in NodeJS API to authenticate, such as:</p>&#xA;&#xA;<pre><code>export function getBasicHandler(username: string, password: string): VsoBaseInterfaces.IRequestHandler {&#xA;    return new basicm.BasicCredentialHandler(username, password);&#xA;}&#xA;&#xA;export function getNtlmHandler(username: string, password: string, workstation?: string, domain?: string): VsoBaseInterfaces.IRequestHandler {&#xA;    return new ntlmm.NtlmCredentialHandler(username, password, workstation, domain);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>More details please refer this link： <a href=""https://github.com/Microsoft/vsts-node-api/blob/master/api/WebApi.ts"" rel=""nofollow noreferrer"">vsts-node-api-webapi</a> All you need is create a login page to collect the user name / password and then pass the arguments to the handler.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Being able to have access to the data in Team Foundation Server (TFS)/Visual Studio Team Services (VSTS), mostly use two methods. The known method was to use the NuGet packages <code>Microsoft.TeamFoundationServer.Client</code> to perform such tasks. With the arrival of TFS 2015 and above/VSTS, Microsoft introduced a <strong>REST API</strong> that can be used to access the same data. </p>&#xA;&#xA;<p>As on TFS2017, On-Prem TFS also supports creating <strong>personal access tokens</strong> for all users. Using the javascript code by <em>@Elmar</em> you can make requests to connect, edit TFS workitems from REST API. Details please refer this question: <a href=""https://stackoverflow.com/questions/36072327/tfs-2015-rest-api-authentication"">TFS 2015 REST API Authentication</a>  </p>&#xA;&#xA;<p>But on TFS2015, there is no (PERSONAL ACCESS TOKEN). If you are working on this version, you could create a login in page, and store username and password in cookies. Then use <a href=""https://github.com/SamDecrock/node-http-ntlm"" rel=""nofollow noreferrer"">httpntlm</a> to do this request. Refer to this case who have similar issue with you: <a href=""https://stackoverflow.com/questions/43309163/connecting-to-tfs-using-windows-auth-in-electron-app/43362152?noredirect=1#comment74010092_43362152"">connecting to TFS using windows auth in electron app</a>.</p>&#xA;",5391065,"",5391065,"",2017-10-12T10:06:05,2017-10-12T10:06:05,"","",,8,,,
34777292,2,,34777188,2016-01-13T21:24:32,,0,,"<p>Try this:</p>&#xA;&#xA;<pre><code>var exec = require('child_process').exec;&#xA;&#xA;var cmd = 'executable.exe parameter1 parameter2';&#xA;var path = 'c:\\path';&#xA;var child = exec(&#xA;    cmd, {&#xA;        cwd: path&#xA;    },&#xA;    function(error, stdout, stderr) {&#xA;        if (error === null) {&#xA;            console.log('success');&#xA;        } else {&#xA;            console.log('error');&#xA;        }&#xA;    }&#xA;);&#xA;</code></pre>&#xA;",5696392,"",,"",,2016-01-13T21:24:32,"","",,0,,,
34892282,2,,34877378,2016-01-20T05:35:57,,0,,"<p>Finally, I managed to run the hello world application with the help of <a href=""http://frontendgods.com/hello-world-desktop-app-with-node-js/"" rel=""nofollow noreferrer"">this link</a> and this <a href=""https://stackoverflow.com/questions/26320901/cannot-install-nodejs-usr-bin-env-node-no-such-file-or-directory"">stackoverflow answer</a> like</p>&#xA;&#xA;<ol>&#xA;<li>install nw builder by command <code>npm install nw-builder -g</code></li>&#xA;<li>If you got the error something like <code>/usr/bin/env: node: No such file or directory</code> then as given in second link above do a symlink of node as <code>ln -s /usr/bin/nodejs /usr/bin/node</code></li>&#xA;<li>Now we can run our application by the command <code>nwbuild -r ~/Desktop/webkit-example</code></li>&#xA;</ol>&#xA;",2293455,"",-1,"",2017-05-23T12:15:16,2016-01-20T05:35:57,"","",,1,,,
34733983,2,,34733540,2016-01-12T01:09:07,,1,,"<p>Here is an example with node-remote.</p>&#xA;&#xA;<p>package.json</p>&#xA;&#xA;<pre><code>{&#xA;  ""main"": ""http://localhost:3030/"",&#xA;  ""name"": ""nw-demo"",&#xA;  ""description"": ""demo app of node-webkit"",&#xA;  ""version"": ""0.1.0"",&#xA;  ""node-remote"" : ""localhost:3030"",&#xA;  ""window"": {&#xA;    ""title"": ""node-webkit demo"",&#xA;    ""toolbar"": true,&#xA;    ""frame"": true,&#xA;    ""position"": ""center""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>html file on localhost</p>&#xA;&#xA;<pre><code>&lt;script&gt;document.write(require, process);&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>nwjs (v0.12.3) app output</p>&#xA;&#xA;<blockquote>&#xA;  <p>function (name) { if (name == 'nw.gui') return nwDispatcher.requireNwGui(); return global.require(name); }[object process]</p>&#xA;</blockquote>&#xA;",5724947,"",,"",,2016-01-12T01:09:07,"","",,0,,,
34749435,2,,34745386,2016-01-12T16:54:10,,1,,"<p>The problem is that liquidfun first evaluates the evironment it's running on and since <code>require</code> is defined, it expects <code>module</code> and <code>exports</code> to be so as well. As a particularity of nw.js this won't be true. So you need to <code>require</code> your library like this instead:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    var lf      = require(""./libs/liquidfun.js"");&#xA;    var world   = null;&#xA;    var gravity = new lf.b2Vec2();&#xA;&#xA;    function init(){&#xA;        world = new lf.b2World(gravity);&#xA;    }&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Now, while this will do for almost all cases, won't help on it's own in this case since liquidfun doesn't seem to be exporting the necessary classes (I'm not familiar with this library so there might be a way of doing so). Following <a href=""https://stackoverflow.com/questions/27715782/how-to-include-liquidfun-physics-engine-with-nodejs"">this answer</a>, you could just add the necessary exports at the end of the library:</p>&#xA;&#xA;<pre><code>module.exports = {&#xA;    b2Vec2         : b2Vec2,&#xA;    b2BodyDef      : b2BodyDef,&#xA;    b2PolygonShape : b2PolygonShape,&#xA;    b2FixtureDef   : b2FixtureDef,&#xA;    b2World        : b2World,&#xA;    b2_dynamicBody : b2_dynamicBody,&#xA;    setWorld       : function(_world){ world=_world;   }&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Another way of approaching this (since you need to edit liquidfun.js anyway) would be tricking the library into running in regular web mode. You can accomplish this by replacing this bit in the first line:</p>&#xA;&#xA;<pre><code>...process===""object""&amp;&amp;typeof require===""function"";...&#xA;</code></pre>&#xA;&#xA;<p>with this:</p>&#xA;&#xA;<pre><code>...process===""object""&amp;&amp;false;...&#xA;</code></pre>&#xA;&#xA;<p>You can then use the library as expected: </p>&#xA;&#xA;<pre><code>&lt;script src=""libs/liquidfun.js""&gt;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;    var world   = null;&#xA;    var gravity = new b2Vec2();&#xA;    function init(){&#xA;        world = new b2World(gravity);&#xA;    }&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Needless to say, both solutions are a bit ""hacky"" and not quite optimal.</p>&#xA;",1551349,"",-1,"",2017-05-23T12:04:01,2016-01-12T19:10:30,"","",,5,,,
34796700,2,,34727628,2016-01-14T18:07:32,,1,,"<p>Node-webkit is basically a combination of node.js and chromium browser. If you want to have your server with your app, you can write a server in node.</p>&#xA;&#xA;<p>Check out Node main <a href=""https://github.com/nwjs/nw.js/wiki/node-main"" rel=""nofollow"">documentation</a></p>&#xA;&#xA;<p>In your package.json</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""nw-demo"",&#xA;  ""node-main"": ""index.js"",&#xA;  ""main"": ""index.html""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><code>mode-main</code> is basically a script that runs in <a href=""https://nodejs.org/en/"" rel=""nofollow"">node</a> context and starts as the application starts.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The script will be running in Node's context which won't be destroyed&#xA;  across page navigation in Webkit, so it can be used to write some&#xA;  'background' or 'daemon' like code.</p>&#xA;</blockquote>&#xA;&#xA;<p>So you can write and start your <a href=""https://nodejs.org/api/http.html#http_http_createserver_requestlistener"" rel=""nofollow"">http</a> server locally on 127.0.0.1 and communicate with it.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>If your concern is to load resources only, you can add them directly by providing absolute or relative paths.</p>&#xA;&#xA;<p>For Example:</p>&#xA;&#xA;<pre><code>&lt;link rel=""stylesheet"" type=""text/css"" href=""/bower_components/angular-ui-grid/ui-grid.css""/&gt;&#xA;&lt;script src=""/bower_components/jquery/dist/jquery.min.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Use the app protocol</strong></p>&#xA;&#xA;<p>Further more, there is an <code>app://</code> protocol provided in nw.js which you can use to access files locally. See the <a href=""https://github.com/nwjs/nw.js/wiki/App-protocol"" rel=""nofollow"">documentation</a>.</p>&#xA;&#xA;<p><em>Note:</em></p>&#xA;&#xA;<blockquote>&#xA;  <p>The root of path refers to the application's directory, which is the&#xA;  directory where the manifest file resides.</p>&#xA;</blockquote>&#xA;",2420102,"",,"",,2016-01-14T18:07:32,"","",,6,,,
34823678,2,,34813954,2016-01-16T04:57:27,,1,,"<p>This likely has something to do with you having a different version of Electron installed on your machine that you are using to build with. In the folder for your app, run <code>electron --version</code> to get the version of electron that you have installed. Then, change the <code>--version=0.36.0</code> to use whatever version you have installed.</p>&#xA;&#xA;<p>If that doesn't fix it, then you should try <code>rm -rf node_modules &amp;&amp; npm install</code> on your project. This will remove you node modules and then reinstall them all. If that doesn't work, please comment here and I will try to help again. </p>&#xA;",586809,"",,"",,2016-01-16T04:57:27,"","",,0,,,
34892687,2,,34862588,2016-01-20T06:07:07,,1,,"<p>You could try a package called <a href=""https://www.npmjs.com/package/electron-connect"" rel=""nofollow"">electron-connect</a>. I recently used it for the same purpose, and it worked well for me.</p>&#xA;&#xA;<p>You simply setup a gulp task:</p>&#xA;&#xA;<pre><code>gulp.task('serve', function () {&#xA;&#xA;  // Start browser process &#xA;  electron.start();&#xA;&#xA;  // Restart browser process &#xA;  gulp.watch('app.js', electron.restart);&#xA;&#xA;  // Reload renderer process &#xA;  gulp.watch(['index.js', 'index.html'], electron.reload);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then add a client to either... </p>&#xA;&#xA;<p><strong>the render process</strong> with a script tag:</p>&#xA;&#xA;<pre><code>&lt;script&gt;require('electron-connect').client.create()&lt;/script&gt; &#xA;</code></pre>&#xA;&#xA;<p><strong>Or the main process</strong>:</p>&#xA;&#xA;<pre><code>'use strict'; &#xA;var app = require('electron').app;&#xA;var browser = require('electron').BrowserWindow;&#xA;var client = require('electron-connect').client;&#xA;&#xA;app.on('ready', function () {&#xA;    var mainWindow = new browser({&#xA;        width: 400,&#xA;        height: 300&#xA;    });&#xA;    mainWindow.loadUrl('file://' + __dirname + '/index.html');&#xA;&#xA;    // Connect to server process &#xA;    client.create(mainWindow); &#xA;});&#xA;</code></pre>&#xA;",1846224,"",,"",,2016-01-20T06:07:07,"","",,1,,,
34921716,2,,34911682,2016-01-21T10:51:53,,2,,"<p>You require <code>dialog</code> in the main process, but try to use it in the renderer process. This can't work. You should either use the <code>remote</code> module to get a reference to the main process' <code>dialog</code> or use the <code>ipc</code> module to send a message to the main process to open the dialog.</p>&#xA;&#xA;<p>As a minimal example, try to replace <code>dialog</code> in your index.js with <code>require('electron').remote.require('dialog')</code>; in the long run, however, I would suggest using IPC instead.</p>&#xA;",2493332,"",,"",,2016-01-21T10:51:53,"","",,0,,,
34739714,2,,31976025,2016-01-12T09:22:56,,3,,"<p>As indicated in <a href=""https://stackoverflow.com/questions/32621988/electron-jquery-is-not-defined"">this answer</a> you need to load jquery in the following way (before including golden-layout):</p>&#xA;&#xA;<pre><code>&lt;script&gt;window.$ = window.jQuery = require('./path/to/jquery.js');&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>If I understand correctly, the issue occurs because jquery 'detects' that it is running in a requireJS environment and load <code>$</code> and <code>jQuery</code> in <code>modules</code> (not <code>window</code>)</p>&#xA;",766024,"",-1,"",2017-05-23T12:17:26,2016-01-12T09:22:56,"","",,1,,,
34889833,2,,34889695,2016-01-20T01:12:06,,3,,"<p>You can get them like this:</p>&#xA;&#xA;<pre><code>mainWindow.on( ""move"", function( event ) {&#xA;    console.log( event.sender.getBounds() );&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Output:</p>&#xA;&#xA;<pre><code>Object {x: 622, y: 159, width: 800, height: 600}&#xA;</code></pre>&#xA;",1551349,"",1551349,"",2016-01-20T01:24:54,2016-01-20T01:24:54,"","",,2,,,
34700975,2,,34668270,2016-01-10T01:22:35,,4,,"<p>This is not possible, sorry. Electron uses its own profile.</p>&#xA;",5728,"",,"",,2016-01-10T01:22:35,"","",,0,,,
34742370,2,,34731875,2016-01-12T11:22:55,,4,,"<p>Well how are you trying to parse the command line? What does <code>process.argv</code> look like when you start with <code>./MyApp --host blah --port 8080</code>?</p>&#xA;&#xA;<p>Basically, when you start Electron <a href=""https://github.com/atom/electron/blob/c180607ef672db1679235800e7b78dd256408638/atom/browser/lib/init.coffee#L72"" rel=""nofollow"">it looks in its resource folder</a> for 'app', 'app.asar', or 'default_app'; when you start your app with <code>electron main.js --host blah --port</code> what actually happens is that Electron's default app is started which, among other things, <a href=""https://github.com/atom/electron/blob/master/atom/browser/default_app/main.js#L17"" rel=""nofollow"">parses your command line arguments</a>. When you package your app, it is copied to the the resource folder as 'app' or 'app.asar' and will be started directly when you run <code>MyApp</code> later on. That is to say, you are starting your app in two fundamentally different ways and this is likely the source of your problem.</p>&#xA;&#xA;<p>To mitigate this, what I like to do is to link my development folder into Electron's resource folder during development; this way I can bypass 'default_app' and have the same execution path whether or not the app is packaged.</p>&#xA;&#xA;<p>Having said that, it does not matter which way you start the app, you should definitely be able to parse the command line arguments. For reference, <a href=""https://github.com/tropy/tropy/blob/master/src/browser/main.js#L6"" rel=""nofollow"">I just set this up</a> in one of my apps with yargs so you should definitely be able to get this to work.</p>&#xA;",2493332,"",,"",,2016-01-12T11:22:55,"","",,1,,,
34838010,2,,34837954,2016-01-17T11:52:52,,6,,"<p>Remember that in a JavaScript string literal, <code>\</code> is an escape character. The actual filename you've asked that to write to is <code>\192.168.1.1&lt;tab&gt;test.txt</code> (where <code>&lt;tab&gt;</code> represents a tab character), because <code>\\</code> => <code>\</code> and <code>\t</code> => tab.</p>&#xA;&#xA;<p>To put a backslash in a string using a string literal, you need to escape it (with a backslash):</p>&#xA;&#xA;<pre><code>filesystem.writeFile('\\\\192.168.1.1\\test.txt', 'data!', function(error){ ... });&#xA;</code></pre>&#xA;",157247,"",157247,"",2016-01-17T12:04:23,2016-01-17T12:04:23,"","",,9,,,
34912845,2,,34912015,2016-01-20T23:45:19,,7,,"<p>I finally found the solution, the problem was that the node_modules folder like sqlite was bundled in the bundle.js. </p>&#xA;&#xA;<p>The link below provide great explanation about that and explain the configuration for the backend with webpack and prevent the node_modules of being bundled when using the require directive.</p>&#xA;&#xA;<p><a href=""http://jlongster.com/Backend-Apps-with-Webpack--Part-I"" rel=""noreferrer"">http://jlongster.com/Backend-Apps-with-Webpack--Part-I</a></p>&#xA;&#xA;<p>The code that solve my problem is : </p>&#xA;&#xA;<pre><code>var nodeModules = {};&#xA;fs.readdirSync('node_modules')&#xA;  .filter(function(x) {&#xA;    return ['.bin'].indexOf(x) === -1;&#xA;  })&#xA;  .forEach(function(mod) {&#xA;    nodeModules[mod] = 'commonjs ' + mod;&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>I then added nodeModules to externals config of the webpack </p>&#xA;&#xA;<pre><code>module.exports = {&#xA;&#xA;module: {&#xA;  .....&#xA;  externals: [nodeModules]&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>It also works for me if i set <code>externals : [""sequelize""]</code></p>&#xA;",3343399,"",3343399,"",2016-01-23T01:26:36,2016-01-23T01:26:36,"","",,0,,,
34840393,2,,34840026,2016-01-17T16:02:38,,9,,"<p>Electron's 'default_app' <a href=""https://github.com/atom/electron/blob/master/atom/browser/default_app/main.js#L224"">sets the menu</a>; if you want to avoid this, you need Electron to start your app directly not via the default app (note: if you start your app with something like <code>electron .</code> you actually start the default app).</p>&#xA;&#xA;<p>Electron <a href=""https://github.com/atom/electron/blob/3875b30fcf2065cebc4e914ee5274084875e425b/atom/browser/lib/init.js#L93"">looks in its resource folder</a> for 'app', 'app.asar' or 'default_app', so in order to start your app directly you need to either copy or link it into Electron's resource folder.</p>&#xA;&#xA;<p>Regardless of how you start your app, you can set your menu using Menu.setApplicationMenu -- you can do it in the main process, you don't need to do it in the Renderer like in your example. Incidentally, there is a typo in your main.html (requier instead of require) so if that's your actual code it would indicate that your main.js does not run at all.</p>&#xA;",2493332,"",,"",,2016-01-17T16:02:38,"","",,1,,,
34829887,2,,34828768,2016-01-16T17:27:35,,12,,<p>If you've packaged your app correctly you will be able to send it to your friend (you probably need to zip / dmg the app because it contains symlinks). Your friend does not need to install electron nor node beforehand -- it should all be packaged already (including all your node modules).</p>&#xA;,2493332,"",,"",,2016-01-16T17:27:35,"","",,3,,,
43553935,2,,43553934,2017-04-22T00:35:11,,0,,"<p>After trying multiple options like:</p>&#xA;&#xA;<ul>&#xA;<li>Adding anchor tag with href pointing to relative path of pdf, it doesn't show the pdf content in eectron. <strong>Failed</strong></li>&#xA;<li>Tried window.open function, it <strong>failed</strong> due to security issues</li>&#xA;<li>Finally, I learnt that all the files opened in electron are saved in users/AppData/Roaming/'application name'/ and interestingly electron app can access all the content inside this location (since user manually dropped files there). So I used fs node package to read file and show save file dialog. </li>&#xA;</ul>&#xA;&#xA;<p>E.g.</p>&#xA;&#xA;<pre><code>var app = require('electron'),&#xA;    dialog = app.dialog,&#xA;    fs = require('fs');&#xA;&#xA;var pdfContent = fs.readFileSync(app.GetPath('UserData'));&#xA;dialog.showSaveDialog({ title: 'app'}, pdfContent, function(err){ /*show error*/});&#xA;//something like this&#xA;</code></pre>&#xA;",1808385,"",,"",,2017-04-22T00:35:11,"","",,0,,,
43554794,2,,43554745,2017-04-22T03:08:24,,3,,"<p>No you don't - Electron is based on <a href=""https://www.chromium.org/"" rel=""nofollow noreferrer"">Chromium</a> which has <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Storage"" rel=""nofollow noreferrer"">LocalStorage</a> support for a very long time now.</p>&#xA;&#xA;<h3>Side note</h3>&#xA;&#xA;<p>In Electron, you can also read/write actual files using the file system which might be a better alternative for storing config files.</p>&#xA;&#xA;<p>Since Chromium is not sandboxed when running in the way Electron runs it, you could also read/write actual text files just as you would in Node.js - <a href=""https://stackoverflow.com/questions/30465034/where-to-store-user-settings-in-electron-atom-shell-application"">This question</a> explores those alternatives - or just go straight to using <a href=""https://github.com/sindresorhus/electron-config"" rel=""nofollow noreferrer"">electron-config</a></p>&#xA;",1814486,"",-1,"",2017-05-23T12:25:54,2017-04-24T14:40:58,"","",,0,,,
43583809,2,,43583139,2017-04-24T09:01:04,,2,,"<p>Target the HTML <code>button</code> element with class <code>glyphicon-button</code> when focussed like so:</p>&#xA;&#xA;<pre><code>button.glyphicon-button:focus,&#xA;button.glyphicon-button:active:focus,&#xA;button.glyphicon-button.active:focus,&#xA;button.glyphicon-button.focus,&#xA;button.glyphicon-button:active.focus,&#xA;button.glyphicon-button.active.focus {&#xA;  outline: none !important;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Be aware that removing the outline property has <a href=""http://www.outlinenone.com/"" rel=""nofollow noreferrer"">consquences on accessibility</a>. </p>&#xA;",5561605,"",,"",,2017-04-24T09:01:04,"","",,0,,,
43617949,2,,43602290,2017-04-25T18:03:42,,1,,"<p>Alright, so I figured out I can't modify DOM directly from the main.js file. We have to use <code>webContents.send()</code> and <code>ipcRenderer</code> to send and recieve asynchronous messages via channels. Here's some simple code which lets you modify a <code>div</code>'s background color.</p>&#xA;&#xA;<p>main.js</p>&#xA;&#xA;<pre><code>app.on('ready', function() {&#xA;    globalShortcut.register('A', () =&gt; {&#xA;        mainWindow.webContents.send('changeColor','green');&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>index.html</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;const {ipcRenderer} = require('electron')&#xA;ipcRenderer.on('changeColor', (event,col) =&gt; {&#xA;    var element = document.getElementById('element');&#xA;    element.style.color = col;&#xA;})&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",6500151,"",,"",,2017-04-25T18:03:42,"","",,0,,,
43683399,2,,43670831,2017-04-28T15:05:40,,0,,"<p>I discovered that the difference I was experiencing was due to the fact that I had electron version 1.3.5 installed globally while locally I was using the latest stable version (and other releases as I tried them).  So npm was utilizing the local electron package while when I used the 'electron .' command directly, I was utilizing the global package. </p>&#xA;&#xA;<p>However I'm still uncertain why the later versions of electron are not taking the zoomFactor into account.   </p>&#xA;",5178406,"",,"",,2017-04-28T15:05:40,"","",,0,,,
43695301,2,,43689286,2017-04-29T11:45:13,,0,,"<p>This is possible by using the <a href=""https://github.com/electron/electron/blob/master/docs/api/tray.md#traysetimageimage"" rel=""nofollow noreferrer""><code>tray.setImage(image)</code></a> function.</p>&#xA;&#xA;<p><strong>Example:</strong></p>&#xA;&#xA;<pre><code>let iconPath = path.join(__dirname, 'icon.png');&#xA;appIcon.setImage(iconPath);&#xA;</code></pre>&#xA;",5269570,"",,"",,2017-04-29T11:45:13,"","",,0,,,
43699486,2,,43693221,2017-04-29T19:06:48,,5,,"<p><a href=""https://github.com/devongovett/font-manager"" rel=""noreferrer"">font-manager</a> is a ""module for Node.js providing access to the system font catalog"", which seems to fit the bill.</p>&#xA;&#xA;<p>Supported platforms:</p>&#xA;&#xA;<ul>&#xA;<li>Mac OS X 10.5 and later supported via CoreText</li>&#xA;<li>Windows 7 and later&#xA;supported via DirectWrite</li>&#xA;<li>Linux supported via fontconfig</li>&#xA;</ul>&#xA;",6730571,"",,"",,2017-04-29T19:06:48,"","",,0,,,
43715678,2,,43692986,2017-05-01T07:23:43,,0,,"<p>So by pure luck the answer I was looking for appeared in the stack overflow sidebar. The problem is explained here: <a href=""https://stackoverflow.com/questions/43659084/source-bashrc-in-a-script-not-working?rq=1"">source .bashrc in a script not working</a>, and I'll explain how I solved it in my case.</p>&#xA;&#xA;<p>So the problem was that every time I called <code>source</code> either in Node or in a C program, the <code>source</code> was always executed in the context of a non-interactive shell. To make it work you need to make sure that when the <code>source</code> command happens the context is an interactive shell, or at least it looks like one.</p>&#xA;&#xA;<p>What I did was compile the following application:</p>&#xA;&#xA;<pre><code>#include &lt;stdlib.h&gt;&#xA;&#xA;int main() {&#xA;    putenv(""PS1=BobeTerm"");&#xA;    system(""bash -i -c \""source ~/.bashrc &amp;&amp; ./editor\"""");&#xA;&#xA;    return 0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The magic here is the <code>bash -i -c ""command""</code> call, see the stack overflow question mentioned above for an explanation.</p>&#xA;&#xA;<p>I place this executable in the same folder as the editor, and when I want to launch the editor I can just doubleclick this executable, which in turn launches my editor in the context of the <code>source</code>'d <code>.bashrc</code>. Problem solved! I get my environment variables in a machine independent way, and the user can now just double-click an executable to launch the editor!</p>&#xA;",2078414,"",-1,"",2017-05-23T12:26:04,2017-05-01T07:23:43,"","",,0,,,2017-05-01T07:23:43
43742331,2,,43704947,2017-05-02T15:55:56,,0,,<p>Solved. jQuery was not loading properly ...</p>&#xA;&#xA;<p>Like.. why is it loading without the packager?! Idk...</p>&#xA;,7383698,"",,"",,2017-05-02T15:55:56,"","",,0,,,
43747093,2,,43739859,2017-05-02T20:56:23,,1,,"<p>The value of <code>window</code> variable within callback function for <code>did-finish-load</code> does not contain what you think: it always points to the last created BrowserWindow instance.</p>&#xA;&#xA;<p><a href=""http://www.datchley.name/loop-variable-gotcha/"" rel=""nofollow noreferrer"">Why? Scope.</a></p>&#xA;&#xA;<p>Since you're using Electron, you should be able to fix this easily by declaring <code>window</code> with <code>let</code> instead of <code>var</code>.</p>&#xA;",6730571,"",,"",,2017-05-02T20:56:23,"","",,0,,,
43747462,2,,43729832,2017-05-02T21:22:28,,1,,"<p>If I understand correctly, your thousands of files are static and local, so ideally you would pre-index them and provide the index as part of your bundle.</p>&#xA;&#xA;<p>I have not tried myself (I'm interested by the idea for a similar feature), but I see <a href=""https://lunrjs.com"" rel=""nofollow noreferrer"">lunr.js</a> offers this possibility: <a href=""https://lunrjs.com/guides/index_prebuilding.html"" rel=""nofollow noreferrer"">""index prebuilding""</a>. License is MIT.</p>&#xA;",6730571,"",,"",,2017-05-02T21:22:28,"","",,0,,,
43761676,2,,34188885,2017-05-03T13:35:37,,3,,"<p>Now there is a new <a href=""https://electron.atom.io/docs/api/webview-tag/#webviewloadurlurl-options"" rel=""nofollow noreferrer""><code>&lt;webview&gt;.loadURL()</code></a> method with a <code>postData</code> option in the docs. I haven't used it yet but it looks exactly like what I was looking for in the past.</p>&#xA;&#xA;<p>It seems they added it as a feature in the meantime.</p>&#xA;",793476,"",,"",,2017-05-03T13:35:37,"","",,0,,,
43765523,2,,42207862,2017-05-03T16:31:36,,1,,"<p>This started working some time ago, and I have since upgraded Electron a few times, so I am forced to assume this was an Electron bug in versions below 1.4.</p>&#xA;&#xA;<p>Countless other experiences on the web that also went unsolved during this time lend credence to this idea.</p>&#xA;",6025788,"",,"",,2017-05-03T16:31:36,"","",,0,,,
43561139,2,,43561061,2017-04-22T15:39:44,,0,,"<p>Have you tried this?</p>&#xA;&#xA;<h2>HTML</h2>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=""en""&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=""UTF-8""&gt;&#xA;  &lt;title&gt;Electron&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;  &lt;h1&gt;Hello world!&lt;/h1&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<h2>JavaScript</h2>&#xA;&#xA;<pre><code>var electron = require('electron'),&#xA;    app = electron.app,&#xA;    BrowserWindow = electron.BrowserWindow;&#xA;&#xA;var path = require('path');&#xA;&#xA;app.on('ready', function () {&#xA;  // Window&#xA;  var win = new BrowserWindow({&#xA;    darkTheme: true&#xA;  });&#xA;&#xA;  // Load HTML file&#xA;  win.loadURL('file://' + path.join(__dirname, 'index.html'));&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Moreover, you can load external URLs. Example:</p>&#xA;&#xA;<pre><code>win.loadURL('https://stackoverflow.com/');&#xA;</code></pre>&#xA;&#xA;<p>So localhost should work like a charm...</p>&#xA;",6910253,"",6910253,"",2017-04-22T16:02:18,2017-04-22T16:02:18,"","",,1,,,
43620514,2,,43620336,2017-04-25T20:37:46,,3,,"<p>There's a variety of existing libraries and approaches for keeping Redux stores in sync. Most of them involve serializing actions and passing them across to other Redux stores for dispatching.</p>&#xA;&#xA;<p>You may want to browse through the <a href=""https://github.com/markerikson/redux-ecosystem-links/blob/master/store.md#synchronization"" rel=""nofollow noreferrer"">Store#Synchronization</a> and <a href=""https://github.com/markerikson/redux-ecosystem-links/blob/master/store.md#integration-and-interop"" rel=""nofollow noreferrer"">Store#Interop</a> sections of my <a href=""https://github.com/markerikson/redux-ecosystem-links"" rel=""nofollow noreferrer"">Redux addons catalog</a> for a list of libraries that implement store synchronization approaches, including libs that specifically deal with Web Workers and Electron.  There's also some assorted articles that discuss this kind of idea, such as <a href=""https://medium.com/@grrowl/redux-scuttlebutt-eventually-consistent-shared-state-among-peers-191d48102079"" rel=""nofollow noreferrer"">Redux-Scuttlebutt: eventually consistent shared state between peers</a>.</p>&#xA;",62937,"",,"",,2017-04-25T20:37:46,"","",,1,,,
43640369,2,,43640245,2017-04-26T17:00:19,,1,,"<p>Use <code>exact</code> in your index route.</p>&#xA;&#xA;<pre><code>&lt;Route exact path=""/"" component={HomePage} /&gt;&#xA;</code></pre>&#xA;&#xA;<p><code>/identify</code> match with both <code>/</code> and <code>/identify</code>. Since these two routes are inside a <code>&lt;Switch&gt;</code>, only first one (HomePage) get rendered.</p>&#xA;",1036138,"",1036138,"",2017-04-26T17:06:41,2017-04-26T17:06:41,"","",,1,,,
43729481,2,,43726968,2017-05-02T03:13:55,,0,,"<p>If you mean like this image:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/yk3VC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yk3VC.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>in your code <code>app/src/main/index.js</code> remove the condition at line 15</p>&#xA;&#xA;<p>or set it to equals</p>&#xA;&#xA;<pre><code>if (process.env.NODE_ENV === 'production') { // change !== to ===&#xA;    require('vue-devtools').uninstall()&#xA;}&#xA;</code></pre>&#xA;",5191477,"",,"",,2017-05-02T03:13:55,"","",,1,,,
43738213,2,,43729849,2017-05-02T12:43:44,,0,,"<p>Currently there is no available api for right click in nightmare, reference issue:</p>&#xA;&#xA;<p><a href=""https://github.com/segmentio/nightmare/issues/346"" rel=""nofollow noreferrer"">https://github.com/segmentio/nightmare/issues/346</a></p>&#xA;&#xA;<p>A possible solution could be to use Electron directly bypassing nighmarejs.</p>&#xA;&#xA;<p>Example (no tested):</p>&#xA;&#xA;<pre><code>webpage.sendEvent('contextmenu')&#xA;</code></pre>&#xA;",379008,"",379008,"",2017-05-05T04:30:15,2017-05-05T04:30:15,"","",,1,,,
43556228,2,,43554536,2017-04-22T06:53:23,,3,,"<p>It is because you are trying to run the Javascript before the dom-ready event.</p>&#xA;&#xA;<p>Try executing your javascript after this event is completed like below</p>&#xA;&#xA;<pre><code>const { app, BrowserWindow } = require('electron');&#xA;&#xA;let win;&#xA;&#xA;function createWindow() {&#xA;&#xA;    win = new BrowserWindow({ width: 1000, height: 600 })&#xA;    win.openDevTools();&#xA;&#xA;    // First URL&#xA;    win.loadURL('https://www.google.com')&#xA;&#xA;    // Once dom-ready&#xA;    win.webContents.once('dom-ready', () =&gt; {&#xA;&#xA;        // THIS WORKS!!!&#xA;        win.webContents.executeJavaScript(`&#xA;      console.log(""This loads no problem!"");&#xA;    `)&#xA;&#xA;        // Second URL&#xA;        win.loadURL('https://github.com/electron/electron');&#xA;&#xA;        // Once did-navigate seems to function fine&#xA;        win.webContents.once('did-navigate', () =&gt; {&#xA;&#xA;            // THIS WORKS!!! So did-navigate is working!&#xA;            console.log(""Main view logs this no problem...."");&#xA;            win.webContents.once('dom-ready', () =&gt; {&#xA;                // NOT WORKING!!! Why?&#xA;                win.webContents.executeJavaScript(`&#xA;&#xA;        console.log(""I canot see this nor the affects of the code below..."");&#xA;&#xA;        const form = document.querySelectorAll('input.js-site-search-form')[0];&#xA;&#xA;        const input = form.querySelectorAll('input.header-search-input')[0]&#xA;&#xA;        input.value = 'docs';&#xA;&#xA;        form.submit();&#xA;&#xA;      `)&#xA;&#xA;            })&#xA;        });&#xA;    })&#xA;    }&#xA;&#xA;    app.on('ready', createWindow);&#xA;&#xA;    app.on('window-all-closed', () =&gt; {&#xA;        if (process.platform !== 'darwin') {&#xA;            app.quit();&#xA;        }&#xA;    });&#xA;</code></pre>&#xA;",4911871,"",,"",,2017-04-22T06:53:23,"","",,3,,,
43613242,2,,43562192,2017-04-25T14:17:58,,5,,"<p>You can do it using <code>FileReader</code> and <code>Buffer</code>.</p>&#xA;&#xA;<p>In the renderer process, send the event to the main process to save the file with the buffer:</p>&#xA;&#xA;<pre><code>function saveBlob(blob) {&#xA;    let reader = new FileReader()&#xA;    reader.onload = function() {&#xA;        if (reader.readyState == 2) {&#xA;            var buffer = new Buffer(reader.result)&#xA;            ipcRenderer.send(SAVE_FILE, fileName, buffer)&#xA;            console.log(`Saving ${JSON.stringify({ fileName, size: blob.size })}`)&#xA;        }&#xA;    }&#xA;    reader.readAsArrayBuffer(blob)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Get back the confirmation:</p>&#xA;&#xA;<pre><code>ipcRenderer.on(SAVED_FILE, (event, path) =&gt; {&#xA;    console.log(""Saved file "" + path)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>(SAVE_FILE and SAVED_FILE are static strings containing event name)</p>&#xA;&#xA;<p>and in the main process:</p>&#xA;&#xA;<pre><code>ipcMain.on(SAVE_FILE, (event, path, buffer) =&gt; {&#xA;    outputFile(path, buffer, err =&gt; {&#xA;        if (err) {&#xA;            event.sender.send(ERROR, err.message)&#xA;        } else {&#xA;            event.sender.send(SAVED_FILE, path)&#xA;        }&#xA;    })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>outputFile is from <a href=""https://github.com/jprichardson/node-fs-extra/blob/master/docs/outputFile.md"" rel=""noreferrer"">'fs-extra'</a></p>&#xA;&#xA;<p>Handling node operations in main process is preferred. See Electron Security suggestions.</p>&#xA;&#xA;<p>If you do want to not use main process, you can use <a href=""https://github.com/electron-userland/electron-remote"" rel=""noreferrer"">'electron-remote'</a> to create background processes to write the file. Additionally, you can invoke <code>ffmpeg</code> in the background process to compress/encode the file into different format.</p>&#xA;",1799019,"",1799019,"",2017-04-25T14:24:08,2017-04-25T14:24:08,"","",,3,,,
43549979,2,,43549851,2017-04-21T18:49:19,,0,,<pre><code>if(process.versions.electron != 'undefined' &amp;&amp; process.versions.electron != null){&#xA;    //Custom event&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I think is the most standard way of doing this.</p>&#xA;,7828418,"",,"",,2017-04-21T18:49:19,"","",,4,,,
43633557,2,,43633518,2017-04-26T11:58:07,,1,,"<p>Use <code>arrow function</code> it will bind the <code>context</code>. To call any <code>function</code> that is present in same <code>class</code> we need to use <code>this</code> keyword. Like this:</p>&#xA;&#xA;<p><code>this.myOwnFunction()   //it will call the 'myOwnFunction' function</code></p>&#xA;&#xA;<p>Write it like this using <code>arrow function</code>:</p>&#xA;&#xA;<pre><code>ipcRenderer.on('receiveData', () =&gt; {    //use arrow function&#xA;     this.myOwnFunction()&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>Note</strong>: Above code will work, but make sure you <code>bind</code> the method <code>onButtonClick</code>.</p>&#xA;",5185595,"",5185595,"",2017-04-26T12:18:19,2017-04-26T12:18:19,"","",,4,,,
43606682,2,,43593348,2017-04-25T09:27:00,,3,,"<p>On Windows, <code>subprocess.Popen</code> tries to duplicate non-zero standard handles and fails if they're invalid. You can redirect <code>stdin</code> and <code>stderr</code> to NUL. For example:</p>&#xA;&#xA;<pre><code>import os&#xA;&#xA;try:&#xA;    from subprocess import DEVNULL&#xA;except ImportError:&#xA;    DEVNULL = os.open(os.devnull, os.O_RDWR)&#xA;&#xA;output = subprocess.check_output(cmd, stdin=DEVNULL, stderr=DEVNULL)&#xA;</code></pre>&#xA;",205580,"",,"",,2017-04-25T09:27:00,"","",,5,,,
43722580,2,,43722450,2017-05-01T16:27:12,,11,,"<p>Basically you need to do the following things.</p>&#xA;&#xA;<p>1.Loading required dependencies</p>&#xA;&#xA;<pre><code>var remote = require('remote'); // Load remote compnent that contains the dialog dependency&#xA;var dialog = remote.require('dialog'); // Load the dialogs component of the OS&#xA;var fs = require('fs'); // Load the File System to execute our common tasks (CRUD)&#xA;</code></pre>&#xA;&#xA;<p>2.Read file content</p>&#xA;&#xA;<pre><code>dialog.showOpenDialog((fileNames) =&gt; {&#xA;    // fileNames is an array that contains all the selected&#xA;    if(fileNames === undefined){&#xA;        console.log(""No file selected"");&#xA;        return;&#xA;    }&#xA;&#xA;    fs.readFile(filepath, 'utf-8', (err, data) =&gt; {&#xA;        if(err){&#xA;            alert(""An error ocurred reading the file :"" + err.message);&#xA;            return;&#xA;        }&#xA;&#xA;        // Change how to handle the file content&#xA;        console.log(""The file content is : "" + data);&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>3.Update existing file content</p>&#xA;&#xA;<pre><code> var filepath = ""C:/Previous-filepath/existinfile.txt"";// you need to save the filepath when you open the file to update without use the filechooser dialog againg&#xA;var content = ""This is the new content of the file"";&#xA;&#xA;fs.writeFile(filepath, content, (err) =&gt; {&#xA;    if (err) {&#xA;        alert(""An error ocurred updating the file"" + err.message);&#xA;        console.log(err);&#xA;        return;&#xA;    }&#xA;&#xA;    alert(""The file has been succesfully saved"");&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>For more read please visit <a href=""http://ourcodeworld.com/articles/read/106/how-to-choose-read-save-delete-or-create-a-file-with-electron-framework"" rel=""noreferrer"">here</a> :) Thanks..</p>&#xA;&#xA;<p>One more thing to add..Please check that your path to file is correct. You could do something similar to below.</p>&#xA;&#xA;<pre><code>var path = require('path');&#xA;var p = path.join(__dirname, '.', 'README.md');&#xA;</code></pre>&#xA;",3919057,"",3919057,"",2017-05-01T17:34:43,2017-05-01T17:34:43,"","",,5,,,
38909234,2,,37227966,2016-08-12T03:08:49,,0,,"<p>Ended up using PouchDB, which also happen to handle very well html-strings.</p>&#xA;",4693216,"",,"",,2016-08-12T03:08:49,"","",,1,,,
38915667,2,,38799002,2016-08-12T10:24:31,,0,,"<p>How about collecting <code>service</code> objects into a array and then processing that array such as needed.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>let services = []&#xA;&#xA;bonjour.find({ type: 'HTTP' }, function (service) {&#xA;  console.log('Found an HTTP server:', service)&#xA;  services.push(service)&#xA;  // and eventually show list of actual services in some node&#xA;  document.getElementById('myParagraf').innerHTML = '&lt;ul&gt;&lt;li&gt;' + services.join('&lt;/li&gt;&lt;li&gt;') + '&lt;/li&gt;&lt;/ul&gt;'&#xA;})&#xA;</code></pre>&#xA;",4628371,"",,"",,2016-08-12T10:24:31,"","",,1,,,
38949336,2,,38943496,2016-08-15T04:29:55,,0,,"<p>The <code>shutdown</code> check fail is a <a href=""https://github.com/electron/electron/issues/6722"" rel=""nofollow"">known issue</a>. Electron runs just fine as a native Windows app, so just do that instead of over-complicating things with Bash on Windows.</p>&#xA;",1259938,"",,"",,2016-08-15T04:29:55,"","",,4,,,
38960480,2,,38939392,2016-08-15T18:06:28,,0,,"<p>So it turns out that this was just a simple issue with the SemVer having a ""-alpha"" on the end. Once removing that and retesting, it works just fine.</p>&#xA;&#xA;<p>Related to issue <a href=""https://github.com/GitbookIO/nuts/issues/54"" rel=""nofollow"">https://github.com/GitbookIO/nuts/issues/54</a> which looks like it has been patched in a pull request <a href=""https://github.com/GitbookIO/nuts/pull/52"" rel=""nofollow"">https://github.com/GitbookIO/nuts/pull/52</a>, but not merged yet.</p>&#xA;",651881,"",,"",,2016-08-15T18:06:28,"","",,0,,,
38978554,2,,38921884,2016-08-16T15:14:04,,0,,"<p>I was doing some search on internet and I found a solution that works for me.</p>&#xA;&#xA;<p>The idea is add a domain because by default angularJs only support the same domain, then we can add a white list with the ""$sceDelegateProvider"" like the folowing code</p>&#xA;&#xA;<pre><code>.config(function ($sceDelegateProvider) {&#xA;&#xA;    $sceDelegateProvider.resourceUrlWhitelist([&#xA;        // Allow same origin resource loads.&#xA;        'self',&#xA;        // Allow loading from our assets domain.  Notice the difference between * and **.&#xA;        'https://serverName.com/**'&#xA;    ]);&#xA; });&#xA;</code></pre>&#xA;&#xA;<p>after that when we will set the templateURL, we can use the remote server.</p>&#xA;&#xA;<pre><code>.when('/test1/', {&#xA;        templateUrl: 'https://serverName.com/html/test1.html',&#xA;        controller: 'test1'&#xA;</code></pre>&#xA;",6292474,"",,"",,2016-08-16T15:14:04,"","",,0,,,
38982974,2,,38967082,2016-08-16T19:27:16,,0,,<p>I was able to fix this by going from ui-router 0.2.15 to 0.2.18. Not exactly sure which bug was causing the issue.</p>&#xA;,651881,"",,"",,2016-08-16T19:27:16,"","",,0,,,
39001647,2,,39000700,2016-08-17T16:16:13,,0,,"<p>There is no json in the file you try to read. Before parsing data check if the file is empty. If it is then create an empty json, push the new data into it then write it to the file else parse the json in the file.</p>&#xA;",5653484,"",,"",,2016-08-17T16:16:13,"","",,0,,,
39040204,2,,38825493,2016-08-19T13:23:34,,0,,"<p>The solution is to use karma-electron.</p>&#xA;&#xA;<p>The karma.conf.js should be changed to use electron as browser:</p>&#xA;&#xA;<pre><code>var webpackConfig = require('./webpack.test');&#xA;&#xA;module.exports = function (config) {&#xA;    var _config = {&#xA;        basePath: '',&#xA;&#xA;        frameworks: ['jasmine'],&#xA;&#xA;        files: [{ pattern: './spec-bundle.js', watched: false }],&#xA;&#xA;        preprocessors: { './spec-bundle.js': ['electron', 'coverage', 'webpack', 'sourcemap'] },&#xA;&#xA;        webpack: webpackConfig,&#xA;&#xA;        coverageReporter: {&#xA;            dir: '../coverage/',&#xA;            reporters: [&#xA;                {&#xA;                    type: 'text-summary',&#xA;                    type: 'json',&#xA;                    type: 'html',&#xA;                }&#xA;            ]&#xA;        },&#xA;&#xA;        webpackMiddleware: {&#xA;            stats: 'errors-only'&#xA;        },&#xA;&#xA;        webpackServer: {&#xA;            noInfo: true&#xA;        },&#xA;&#xA;        reporters: ['spec', 'coverage'],&#xA;        port: 9876,&#xA;        colors: true,&#xA;        logLevel: config.LOG_INFO,&#xA;        autoWatch: false,&#xA;        browsers: ['Electron'],&#xA;        singleRun: true,&#xA;&#xA;        client: {&#xA;            useIframe: false&#xA;        }&#xA;    };&#xA;&#xA;    config.set(_config);&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>However, this will still throw an error:</p>&#xA;&#xA;<pre><code>Uncaught ReferenceError: exports is not defined&#xA;at &lt;appath&gt;/node_modules/jasmine-core/lib/jasmine-core/jasmine.js:32&#xA;</code></pre>&#xA;&#xA;<p>This is already solved in jasmine-core, but not yet in jasmine-npm (see: <a href=""https://github.com/jasmine/jasmine/issues/1144"" rel=""nofollow"">https://github.com/jasmine/jasmine/issues/1144</a></p>&#xA;&#xA;<p>Workaround until a new npm version of jasmine-core is released is to use the direct github link instead of the npm package version in package.json:</p>&#xA;&#xA;<pre><code>""devDependencies"": {&#xA;  ....&#xA;  ""jasmine-core"": ""https://github.com/jasmine/jasmine.git"",&#xA;  ....&#xA;}&#xA;</code></pre>&#xA;",6639843,"",,"",,2016-08-19T13:23:34,"","",,0,,,
39047276,2,,39046559,2016-08-19T20:35:19,,0,,"<pre><code>function pageZoom() {&#xA; var outer = document.getElementById('viewer');&#xA; var inner = document.getElementById('innerWindow');&#xA; var zoomSlide = document.getElementById('zoomSlider');&#xA; var imgOne = document.getElementById('viewImgOne');&#xA; var imgTwo = document.getElementById('viewImgTwo');&#xA; console.log(inner.clientHeight)&#xA;&#xA; // Center Points&#xA; var cPX = outer.scrollTop + outer.clientHeight/2;&#xA; var cPY = outer.scrollLeft + outer.clientWidth/2;&#xA;&#xA; // Position Ratios to whole&#xA; var cPXR = cPX/inner.clientHeight;&#xA; var cPYR = cPY/inner.clientWidth;&#xA;&#xA; inner.style.width = zoomSlide.value + ""%"";&#xA; if(imgOne.clientHeight &gt;= imgTwo.clientHeight) {&#xA;   inner.style.height = imgOne.clientHeight + ""px"";&#xA; } else {&#xA;   inner.style.height = imgTwo.clientHeight + ""px"";&#xA; };&#xA; outer.scrollTop = inner.clientHeight*cPXR - outer.clientHeight/2;&#xA; outer.scrollLeft = inner.clientWidth*cPYR - outer.clientWidth/2;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Get your percentages, save them, zoom in, then re-apply your percentages onto the who, subtracting half the <code>outer.clientWidth</code> to sync up again with the <code>scrollTop</code> and <code>ScrollLeft</code> positions.  It is a bit choppy, but it works.</p>&#xA;",5526037,"",5526037,"",2016-08-19T21:51:42,2016-08-19T21:51:42,"","",,0,,,
39090254,2,,39066800,2016-08-22T23:35:34,,0,,"<p>Electron windows do not load Jquery properly. You can find info on how to load Jquery <a href=""https://stackoverflow.com/questions/32621988/electron-jquery-is-not-defined"">here</a>.</p>&#xA;&#xA;<p>However, it looks as tho you are just loading a website url directly into Electron? I if this is true you should have a look at Electrons <a href=""http://electron.atom.io/docs/api/web-view-tag/"" rel=""nofollow noreferrer""><code>&lt;webview&gt;</code> tag</a>.</p>&#xA;",418710,"",-1,"",2017-05-23T12:15:00,2016-08-22T23:35:34,"","",,0,,,
38933391,2,,38933280,2016-08-13T13:49:18,,1,,"<p>Did you try just setting the url with the state after the hash:</p>&#xA;&#xA;<pre><code>win.loadURL(`file://${__dirname}/index.html#/page`)&#xA;</code></pre>&#xA;&#xA;<p>assuming you have a ui-router state configured with the url:</p>&#xA;&#xA;<pre><code>""url"":""/page""&#xA;</code></pre>&#xA;",4011728,"",,"",,2016-08-13T13:49:18,"","",,1,,,
38935356,2,,38935122,2016-08-13T17:38:04,,1,,"<p>**TL;DR: Your <code>~/.meteor</code> folder is where it is sourced from.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Searching the <a href=""https://github.com/arboleya/electrify/search?utf8=%E2%9C%93&amp;q=mongo"" rel=""nofollow"">GitHub Electrify repository</a>, we can see that the <code>MongoDB</code> path and daemon location is referenced in <a href=""https://github.com/arboleya/electrify/blob/94bb01d72d1cc0cc041836514de628d2c9009c23/lib/env.js#L125"" rel=""nofollow"">this file</a> as <code>this.meteor.mongo</code> and <code>this.meteor.mongod</code>:</p>&#xA;&#xA;<pre><code>this.meteor.mongo  = join(this.meteor.dev_bundle, 'mongodb', 'bin', 'mongo');&#xA;this.meteor.mongod = join(this.meteor.dev_bundle, 'mongodb', 'bin', 'mongod');&#xA;</code></pre>&#xA;&#xA;<p>Unwinding through those variables:</p>&#xA;&#xA;<pre><code>// https://github.com/arboleya/electrify/blob/94bb01d72d1cc0cc041836514de628d2c9009c23/lib/env.js#L114&#xA;this.meteor.dev_bundle     = join(this.meteor.tools, 'dev_bundle');&#xA;&#xA;// https://github.com/arboleya/electrify/blob/94bb01d72d1cc0cc041836514de628d2c9009c23/lib/env.js#L113&#xA;this.meteor.tools          = this.meteor.root.replace(/meteor(\.bat)?$/m, '');&#xA;&#xA;// https://github.com/arboleya/electrify/blob/94bb01d72d1cc0cc041836514de628d2c9009c23/lib/env.js#L112&#xA;this.meteor.root           = join(meteor_dir, meteor_symlink);&#xA;&#xA;// https://github.com/arboleya/electrify/blob/94bb01d72d1cc0cc041836514de628d2c9009c23/lib/env.js#L109&#xA;meteor_symlink = fs.readlinkSync(join(meteor_dir, 'meteor'));&#xA;&#xA;// https://github.com/arboleya/electrify/blob/94bb01d72d1cc0cc041836514de628d2c9009c23/lib/env.js#L108&#xA;meteor_dir    = join(this.os.home, '.meteor');&#xA;</code></pre>&#xA;&#xA;<p>So, we can see that for Linux, it would be:</p>&#xA;&#xA;<ul>&#xA;<li><code>meteor_dir</code>: the home path (<code>~</code>), then the subfolder <code>.meteor</code>, &#xA;&#xA;<ul>&#xA;<li>For me that is <code>~/.meteor</code>;</li>&#xA;</ul></li>&#xA;<li><code>meteor_symlink</code>: follows the symlink of <code>meteor</code>,&#xA;&#xA;<ul>&#xA;<li>For me, that links to <code>./packages/meteor-tool/1.3.5_1/mt-os.linux.x86_64/meteor</code>;</li>&#xA;</ul></li>&#xA;<li><code>meteor_root</code>: the combination of the above (e.g., <code>~/.meteor/&lt;symlink&gt;</code>), &#xA;&#xA;<ul>&#xA;<li>For me that is <code>~/.meteor/packages/meteor-tool/1.3.5_1/mt-os.linux.x86_64/meteor</code>;</li>&#xA;</ul></li>&#xA;<li><code>meteor_tools</code>: <code>meteor_root</code>, minus the trailing ""meteor"",&#xA;&#xA;<ul>&#xA;<li>For me that is <code>~/.meteor/packages/meteor-tool/1.3.5_1/mt-os.linux.x86_64/</code>;</li>&#xA;</ul></li>&#xA;<li><code>meteor_dev_bundle</code>: <code>meteor_tools</code> then the subfolder <code>dev_bundle</code>,&#xA;&#xA;<ul>&#xA;<li>For me that is <code>~/.meteor/packages/meteor-tool/1.3.5_1/mt-os.linux.x86_64/dev_bundle</code>;</li>&#xA;</ul></li>&#xA;<li><code>this.meteor.mongo</code>: <code>meteor_dev_bundle</code> then the subfolder <code>mongo</code> and then the subfolder <code>bin</code> and then the subfolder <code>mongo</code> &#xA;&#xA;<ul>&#xA;<li>For me that is <code>~/.meteor/packages/meteor-tool/1.3.5_1/mt-os.linux.x86_64/dev_bundle/mongodb/bin/mongo</code>;</li>&#xA;</ul></li>&#xA;<li><code>this.meteor.mongod</code>: equivalent to <code>this.meteor.mongo</code> with an appended <code>d</code> (i.e., <code>mongo</code> becomes <code>mongod</code>), &#xA;&#xA;<ul>&#xA;<li>For me that is <code>~/.meteor/packages/meteor-tool/1.3.5_1/mt-os.linux.x86_64/dev_bundle/mongodb/bin/mongod</code>.</li>&#xA;</ul></li>&#xA;</ul>&#xA;",2483271,"",,"",,2016-08-13T17:38:04,"","",,1,,,
38966418,2,,38957060,2016-08-16T03:54:58,,1,,"<blockquote>&#xA;  <p>const electron = require(""electron"").webFrame.setZoomLevelLimits(1, 1);</p>&#xA;</blockquote>&#xA;&#xA;<ol>&#xA;<li>The <code>webFrame</code> module in only available in the renderer process, you're attempting to access it in the main/browser process.</li>&#xA;<li>Even if <code>webFrame</code> was available in the main process <code>setZoomLevelLimits(1, 1)</code> doesn't return a reference to the <code>electron</code> module so the rest of your code won't work because <code>const electron</code> will be <code>undefined</code>.</li>&#xA;</ol>&#xA;",1259938,"",,"",,2016-08-16T03:54:58,"","",,3,,,
38987846,2,,38982135,2016-08-17T03:53:28,,1,,"<p>Native Node modules such as <code>serialport</code> must be rebuilt to target the specific Electron version you're using, to do so follow the steps documented at <a href=""http://electron.atom.io/docs/tutorial/using-native-node-modules/"" rel=""nofollow"">http://electron.atom.io/docs/tutorial/using-native-node-modules/</a></p>&#xA;&#xA;<p>There's also an <a href=""https://github.com/EmergingTechnologyAdvisors/node-serialport/issues/538"" rel=""nofollow"">open issue</a> covering the topic, so if you get stuck at least read <a href=""https://github.com/EmergingTechnologyAdvisors/node-serialport/issues/538#issuecomment-237641682"" rel=""nofollow"">this comment</a>.</p>&#xA;",1259938,"",,"",,2016-08-17T03:53:28,"","",,7,,,
38996504,2,,38994872,2016-08-17T12:20:41,,1,,<p>On the command line (terminal) run the following command in the root folder of your project:</p>&#xA;&#xA;<pre><code>npm install mysql --save&#xA;</code></pre>&#xA;&#xA;<p><em>the <code>--save</code> appendix will save the dependency in the <code>package.json</code> of your application</em></p>&#xA;&#xA;<p>Every time you see a <code>require</code> or <code>import</code> in Javascript it means that a module is necessary to be loaded to charge dependency's functionalities. <strong>NW.js</strong> is a module loader for the DOM but it still requires the modules you want to use in your application to be installed.</p>&#xA;&#xA;<p>Check the <code>package.json</code> in the root of your application folder to see other required dependencies.</p>&#xA;,1679414,"",,"",,2016-08-17T12:20:41,"","",,0,,,
39004092,2,,39002206,2016-08-17T18:42:58,,1,,"<p>I changed my test_app.js to use arrow functions, perhaps I fixed some subtle bug in the process, but now it works!</p>&#xA;&#xA;<p><strong>Output</strong></p>&#xA;&#xA;<p><code>Running app...</code></p>&#xA;&#xA;<p><code>Main window is visible:  true</code></p>&#xA;&#xA;<p><code>Checking text...</code></p>&#xA;&#xA;<p><code>Text:  Does this work?</code></p>&#xA;&#xA;<p><code>Checking the windows title...</code></p>&#xA;&#xA;<p><code>Title:  Hello World!</code></p>&#xA;&#xA;<p><code>Stopping the application</code></p>&#xA;&#xA;<p><strong>New test_app.js</strong></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>//A simple test to verify a visible window is opened with a title&#xD;&#xA;var Application = require('spectron').Application&#xD;&#xA;var assert = require('assert')&#xD;&#xA;&#xD;&#xA;var app = new Application({&#xD;&#xA;  path: '/home/vagrant/electron-quick-start/MyApp-linux-x64/MyApp'})&#xD;&#xA;&#xD;&#xA;console.log('Running app...')&#xD;&#xA;&#xD;&#xA;app.start()&#xD;&#xA;    .then(() =&gt; app.browserWindow.isVisible())&#xD;&#xA;    .then((isVisible) =&gt; console.log('Main window is visible: ', isVisible))&#xD;&#xA;    .then(() =&gt; {&#xD;&#xA;        console.log('Checking text...')&#xD;&#xA;        return app.client.getText('#par')    &#xD;&#xA;    })&#xD;&#xA;    .then((text) =&gt; {&#xD;&#xA;        assert.equal(text, ""Does this work?"")&#xD;&#xA;        console.log(""Text: "", text)   &#xD;&#xA;    })&#xD;&#xA;    .then(() =&gt; {&#xD;&#xA;        console.log('Checking the windows title...')&#xD;&#xA;        return app.client.getTitle()&#xD;&#xA;    })&#xD;&#xA;    .then((title) =&gt; {&#xD;&#xA;        assert.equal(title, 'Hello World!')&#xD;&#xA;        console.log(""Title: "", title)&#xD;&#xA;    })&#xD;&#xA;    .then(() =&gt; {&#xD;&#xA;        console.log('Stopping the application')&#xD;&#xA;        return app.stop()&#xD;&#xA;    })&#xD;&#xA;    .catch((error) =&gt; {&#xD;&#xA;        //Log any failures&#xD;&#xA;        console.error('Test failed: ', error.message)&#xD;&#xA;        console.log('Stopping the application')&#xD;&#xA;        return app.stop()&#xD;&#xA;    })</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",2912313,"",,"",,2016-08-17T18:42:58,"","",,0,,,
39030317,2,,39029638,2016-08-19T02:39:59,,1,,"<p>This would require a LOT of custom C++ piping, and wouldn't likely ever be supported in-browser.  We have an issue on VST support in web audio, but VST the way it is is very unlikely.</p>&#xA;",1789439,"",,"",,2016-08-19T02:39:59,"","",,0,,,
39031169,2,,39022538,2016-08-19T04:32:43,,1,,"<p>You need to wrap the <code>webview</code> element in a React component, and have the component create and insert the element into the DOM in <code>componentDidMount()</code>. See <a href=""https://github.com/electron/electron/issues/6046"" rel=""nofollow"">this issue</a> for more details.</p>&#xA;",1259938,"",,"",,2016-08-19T04:32:43,"","",,0,,,
39050235,2,,39049825,2016-08-20T03:40:42,,1,,<p>Ah dug deeper and looks like I have to declare it in the tasks/build.js file. </p>&#xA;,2911367,"",,"",,2016-08-20T03:40:42,"","",,1,,,
39062494,2,,39059339,2016-08-21T08:53:35,,1,,"<p>Just as most declaration files on DT, this one is a <strong>global declaration file</strong>. This means that you don't have to import anything, the type declarations are always present anywhere in your project. Eg. this:</p>&#xA;&#xA;<pre><code>// app.ts&#xA;let theWebContents: Electron.WebContents&#xA;</code></pre>&#xA;&#xA;<p>should compile just fine.</p>&#xA;",3472608,"",,"",,2016-08-21T08:53:35,"","",,1,,,
39076063,2,,39041071,2016-08-22T09:37:44,,1,,<p>I'm fairly sure the answer is no.</p>&#xA;&#xA;<p>For Windows 10 IoT you'll need to develop apps using the Universal Windows Platform SDK.</p>&#xA;&#xA;<p>I'll delete this answer if we find out otherwise.</p>&#xA;,6386258,"",,"",,2016-08-22T09:37:44,"","",,0,,,
39094032,2,,39091758,2016-08-23T06:41:01,,1,,"<p>Since <code>mdns</code> contains a native Node module you must rebuild it to target your version of Electron, there are <a href=""http://electron.atom.io/docs/tutorial/using-native-node-modules/"" rel=""nofollow"">a couple of ways to do this</a>. I'd suggest using the <code>electron-rebuild</code> approach.</p>&#xA;",1259938,"",,"",,2016-08-23T06:41:01,"","",,0,,,
39009450,2,,38948926,2016-08-18T03:16:13,,2,,"<p>Ok, I found the issue and get it solved. Posting it here so that it will help someone else who has the same issue.</p>&#xA;&#xA;<p>Error was raised due to <code>electron-prebuilt</code> was installed in the production <code>node_modules</code> folder. It should only be installed in development modules.</p>&#xA;&#xA;<p>I removed the <code>electron-prebuilt</code> from production modules and it works fine now.</p>&#xA;",1960950,"",,"",,2016-08-18T03:16:13,"","",,1,,,
39044381,2,,39035638,2016-08-19T17:04:11,,2,,"<p>This code is valid ES6/ES2015, but is not valid ES5. </p>&#xA;&#xA;<p>Destructuring assignments <a href=""http://node.green/#destructuring--declarations"" rel=""nofollow"">are supported in node.js >= 6.4</a>. If your Jasmine is run with an older version, it will not work. Not sure about Visual Studio, but it looks like you need a recent version of VS 2015 to be able to have ES6 features.</p>&#xA;&#xA;<p>Therefore you should either update your tools, or just configure Typescript so it targets ES5 instead.</p>&#xA;",834833,"",,"",,2016-08-19T17:04:11,"","",,0,,,
39068678,2,,39063187,2016-08-21T20:42:36,,2,,"<p>I have figured it out myself. This code works in a React component:</p>&#xA;&#xA;<pre><code>var remote = window.require('electron').remote;&#xA;remote.getGlobal(""mainWindow"").minimize();&#xA;</code></pre>&#xA;",172750,"",,"",,2016-08-21T20:42:36,"","",,0,,,
38977410,2,,38971485,2016-08-16T14:20:17,,3,,"<p>Your x and y values are strings not numbers. </p>&#xA;&#xA;<p>Should be:  </p>&#xA;&#xA;<pre><code>""x"":50&#xA;</code></pre>&#xA;&#xA;<p>Maximized is also a string not a Boolean. </p>&#xA;",1770432,"",,"",,2016-08-16T14:20:17,"","",,0,,,
39022886,2,,39002144,2016-08-18T16:06:42,,3,,"<p>You need to rebuild the serialport module as it uses different V8 headers than Electron.</p>&#xA;&#xA;<p>First you will need to set up a node-gyp toolchain (<a href=""https://github.com/nodejs/node-gyp"" rel=""nofollow"">https://github.com/nodejs/node-gyp</a>)</p>&#xA;&#xA;<p>Next, install any version of Visual Studio.</p>&#xA;&#xA;<p>Open a command window and change directory to node_modules/serialport within your project.</p>&#xA;&#xA;<p>Enter this command with the appropriate variables:</p>&#xA;&#xA;<pre><code>node-gyp rebuild --target=&lt;electron_version&gt; --arch=&lt;arch&gt; --dist-url=""https://atom.io/download/atom-shell"" --msvs_version=&lt;visual_studio_year&gt;&#xA;</code></pre>&#xA;&#xA;<p>For an example this is the command I use when rebuilding:</p>&#xA;&#xA;<pre><code>node-gyp rebuild --target=1.2.5 --arch=x64 --dist-url=""https://atom.io/download/atom-shell"" --msvs_version=2013&#xA;</code></pre>&#xA;",6678692,"",,"",,2016-08-18T16:06:42,"","",,0,,,
39090208,2,,39078170,2016-08-22T23:29:40,,3,,"<p>The <code>showSaveDialog()</code> API does not save the file for you. You must use the returned path and use Node to save your file.</p>&#xA;&#xA;<pre><code>const {dialog} = require(""electron"").remote;&#xA;const fs = require('fs');&#xA;&#xA;var savePath = dialog.showSaveDialog({});&#xA;&#xA;fs.writeFile(savePath, fileData, function(err) {&#xA;    // file saved or err&#xA;});&#xA;</code></pre>&#xA;",418710,"",,"",,2016-08-22T23:29:40,"","",,0,,,
38944984,2,,38944247,2016-08-14T17:52:59,,4,,"<p><code>electron-builder</code> is not installed. You don't need <code>electron-installer-squirrel-windows</code> and <code>electron-packager</code>, — remove it and <code>npm install electron-builder --save-dev</code></p>&#xA;",1910191,"",,"",,2016-08-14T17:52:59,"","",,2,,,
39065557,2,,39065459,2016-08-21T14:57:32,,4,,"<p>Windows has an issue with resolving <code>localhost</code> to a physical IP address when it is not connected to a network. Apparently what happens is that on Windows is when you give the address <code>localhost</code> it passes it to a full DNS resolver which requires a connection to the internet to work properly.</p>&#xA;&#xA;<p>Found a good answer about a possible why here: <a href=""https://serverfault.com/questions/4689/windows-7-localhost-name-resolution-is-handled-within-dns-itself-why"">Windows 7: “localhost name resolution is handled within DNS itself”. Why?</a></p>&#xA;&#xA;<p>Try using the IP address itself:</p>&#xA;&#xA;<pre><code>s = {database: ""test"", user: ""test"", password: ""test"", host: ""127.0.0.1""}&#xA;var mysql = require('./mysql');&#xA;var mysqlc = mysql.createConnection(settings);&#xA;mysqlc.connect(function(err) { console.log(err); });&#xA;</code></pre>&#xA;",5273921,"",-1,"",2017-04-13T12:13:45,2016-08-21T15:27:07,"","",,0,,,
39103587,2,,38962182,2016-08-23T14:10:51,,4,,"<p>I've managed to overcome this issue, finally.</p>&#xA;&#xA;<p>In the end it certainly seemed to be caused by AngularJS being a bit 'funny' about working correctly only when served by a webserver.</p>&#xA;&#xA;<p>With that in mind, I've implemented an express server on a specific port during the 'create window' phase of my electron app. I then point the window at the localhost URL, which is now technically an express app running inside an electron app, running AngularJS.</p>&#xA;&#xA;<p>It confused me for a while getting the setup in line, but now it seems to be working perfectly and very speedy, too.</p>&#xA;&#xA;<p>EDIT: Here's the code for that!</p>&#xA;&#xA;<p>main.js:</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const server = require(""./server"");&#xA;const sqlite3 = require('sqlite3');&#xA;// Module to control application life.&#xA;const app = electron.app;&#xA;// Module to create native browser window.&#xA;const BrowserWindow = electron.BrowserWindow;&#xA;&#xA;// Keep a global reference of the window object, if you don't, the window will&#xA;// be closed automatically when the JavaScript object is garbage collected.&#xA;let mainWindow;&#xA;&#xA;function createWindow () {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({width: 1000, height: 700});&#xA;&#xA;  // and load the index.html of the app.&#xA;  //mainWindow.loadURL(`file://${__dirname}/index.html`);&#xA;  mainWindow.loadURL(`http://localhost:3333`);&#xA;&#xA;  // Open the DevTools.&#xA;  mainWindow.webContents.openDevTools();&#xA;&#xA;  // Emitted when the window is closed.&#xA;  mainWindow.on('closed', function () {&#xA;    // Dereference the window object, usually you would store windows&#xA;    // in an array if your app supports multi windows, this is the time&#xA;    // when you should delete the corresponding element.&#xA;    mainWindow = null&#xA;  })&#xA;}&#xA;&#xA;// This method will be called when Electron has finished&#xA;// initialization and is ready to create browser windows.&#xA;// Some APIs can only be used after this event occurs.&#xA;app.on('ready', createWindow);&#xA;&#xA;// Quit when all windows are closed.&#xA;app.on('window-all-closed', function () {&#xA;  // On OS X it is common for applications and their menu bar&#xA;  // to stay active until the user quits explicitly with Cmd + Q&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;});&#xA;&#xA;app.on('activate', function () {&#xA;  // On OS X it's common to re-create a window in the app when the&#xA;  // dock icon is clicked and there are no other windows open.&#xA;  if (mainWindow === null) {&#xA;    createWindow()&#xA;  }&#xA;});&#xA;&#xA;process.on('uncaughtException', function (err) {&#xA;  console.log(err);&#xA;});&#xA;&#xA;// In this file you can include the rest of your app's specific main process&#xA;// code. You can also put them in separate files and require them here.&#xA;</code></pre>&#xA;&#xA;<p>server.js:</p>&#xA;&#xA;<pre><code>var path = require('path');&#xA;var express = require('express');&#xA;var app = express();&#xA;&#xA;app.use(express.static(__dirname));&#xA;&#xA;app.get('/', function (req, res) {&#xA;    res.sendfile(__dirname + 'index.html');&#xA;});&#xA;&#xA;app.listen(3333);&#xA;</code></pre>&#xA;",4070477,"",4070477,"",2016-08-24T10:29:10,2016-08-24T10:29:10,"","",,5,,,
38935092,2,,38935024,2016-08-13T17:05:40,,5,,"<p>You need to <code>apt-get install libgtk2.0-0</code> and install an X server for Windows, such as <a href=""http://www.straightrunning.com/XmingNotes/"" rel=""noreferrer"">xming</a>.</p>&#xA;",2050455,"",,"",,2016-08-13T17:05:40,"","",,7,,,
38953224,2,,38612165,2016-08-15T10:15:15,,5,,"<p>oh this is so simple, not sure why I tried to overcomplicate it!  Turned out I sneeded to use the Nodewebkit GUI Library.</p>&#xA;&#xA;<pre><code>// Load native Nodewebkit UI library.  &#xA;var gui = require('nw.gui');&#xA;&#xA;gui.Shell.openExternal('mailto:test@example.com?subject=test&amp;body=hello');&#xA;</code></pre>&#xA;",1001034,"",,"",,2016-08-15T10:15:15,"","",,1,,,
38934000,2,,38932098,2016-08-13T15:01:59,,6,,"<p>Oh, I Solved this problem just by changing function name of close() function to something else, it seems like close is conflicting with some other function or something like that.</p>&#xA;",2553387,"",,"",,2016-08-13T15:01:59,"","",,0,,,
38950592,2,,33949192,2016-08-15T06:57:44,,6,,"<p>Some native capabilities are available in Electron, like adding an entry to the Dock menu or showing a menu bar icon. Other capabilities have been added by third parties, like <a href=""https://github.com/electron/electron/blob/master/docs/api/system-preferences.md"" rel=""nofollow noreferrer"">this one</a>, which plugs into System Preferences. If nothing else, there's a <a href=""https://github.com/TooTallNate/NodObjC"" rel=""nofollow noreferrer"">JS-to-Obj C bridge</a>, to invoke Objective-C code.</p>&#xA;&#xA;<p>Another important factor is that apps made using write-once-run-anywhere frameworks often have an odd UX and don't fit in to platform conventions. You get this free when you build a real native app using Cocoa and Swift / Objective-C.</p>&#xA;&#xA;<p>For example, toolbars should change in appearance when the window loses focus. You can see this for yourself by opening (say) Safari Preferences and then switching to another window or app. Electron apps don't do this.</p>&#xA;&#xA;<p>As another example, if a right-click menu is open, the user should be able to press ""C"" to move the selection to ""Copy"". Electron again doesn't do this.</p>&#xA;&#xA;<p>This results in an app that looks and feels odd and second-tier. If a native-quality UX is a priority, build your app in Cocoa.</p>&#xA;&#xA;<p>If you don't have the resources to build separate Mac and Windows apps (say you're a two-person startup or a charity) but still want a better UX than a web app, then consider Electron.</p>&#xA;&#xA;<p>Reference: <a href=""https://www.youtube.com/watch?v=JIRXVGVPzn8"" rel=""nofollow noreferrer"">Making a web app feel native</a>, and a subsequent email discussion with Ben Gotow, the engineer who gave that talk.</p>&#xA;",297868,"",371557,"",2019-01-20T05:46:49,2019-01-20T05:46:49,"","",,2,,,
39062382,2,,39062131,2016-08-21T08:36:51,,12,,"<p>You can set the full screen when you create the windows object.</p>&#xA;&#xA;<pre><code>const {BrowserWindow} = require('electron');&#xA;let win = new BrowserWindow({width: 800, height: 600, fullscreen: true});&#xA;</code></pre>&#xA;&#xA;<p>Check here what options you can add when you make a window <a href=""http://electron.atom.io/docs/api/browser-window/#new-browserwindowoptions"" rel=""noreferrer"">Electron BrowserWindow</a></p>&#xA;&#xA;<p>My bad, i forgot you want to make it full on click. In a function use this.</p>&#xA;&#xA;<pre><code>var electron = require('electron');&#xA;var window = electron.remote.getCurrentWindow();&#xA;window.setFullScreen(true);&#xA;</code></pre>&#xA;",5697445,"",5697445,"",2016-08-21T08:43:37,2016-08-21T08:43:37,"","",,3,,,
39110428,2,,32158738,2016-08-23T20:49:28,,32,,"<p>It is possible to work with Electron but if you are looking for ""webbish"" UI capabilities, you can check <a href=""https://github.com/zoofIO/flexx"" rel=""noreferrer"">Flexx</a> - it allows you to code in pure Python but still use the styling and UI flexibility of web development tools.</p>&#xA;&#xA;<p>If you insist on going on Electron you should follow the idea of this <a href=""https://www.fyears.org/2015/06/electron-as-gui-of-python-apps.html"" rel=""noreferrer"">post</a>.</p>&#xA;&#xA;<p>First make sure you have everything installed:</p>&#xA;&#xA;<pre><code>pip install Flask&#xA;npm install electron-prebuilt -&#xA;npm install request-promise -g&#xA;</code></pre>&#xA;&#xA;<p>Now create the directory where you want all the magic to happen and include following files</p>&#xA;&#xA;<p>Create your <code>hello.py</code>:</p>&#xA;&#xA;<pre><code>from __future__ import print_function&#xA;import time&#xA;from flask import Flask&#xA;&#xA;app = Flask(__name__)&#xA;&#xA;@app.route(""/"")&#xA;def hello():&#xA;    return ""Hello World! This is powered by Python backend.""&#xA;&#xA;if __name__ == ""__main__"":&#xA;   print('oh hello')&#xA;    #time.sleep(5)&#xA;    app.run(host='127.0.0.1', port=5000)&#xA;</code></pre>&#xA;&#xA;<p>Create your basic <code>package.json</code>:</p>&#xA;&#xA;<pre><code>{&#xA;  ""name""    : ""your-app"",&#xA;  ""version"" : ""0.1.0"",&#xA;  ""main""    : ""main.js"",&#xA;  ""dependencies"": {&#xA;    ""request-promise"": ""*"",&#xA;    ""electron-prebuilt"": ""*""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Finally create your <code>main.js</code>:</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const app = electron.app;&#xA;const BrowserWindow = electron.BrowserWindow;&#xA;electron.crashReporter.start();&#xA;&#xA;var mainWindow = null;&#xA;&#xA;app.on('window-all-closed', function() {&#xA;  //if (process.platform != 'darwin') {&#xA;    app.quit();&#xA;  //}&#xA;});&#xA;&#xA;app.on('ready', function() {&#xA;  // call python?&#xA;  var subpy = require('child_process').spawn('python', ['./hello.py']);&#xA;  //var subpy = require('child_process').spawn('./dist/hello.exe');&#xA;  var rq = require('request-promise');&#xA;  var mainAddr = 'http://localhost:5000';&#xA;&#xA;  var openWindow = function(){&#xA;    mainWindow = new BrowserWindow({width: 800, height: 600});&#xA;    // mainWindow.loadURL('file://' + __dirname + '/index.html');&#xA;    mainWindow.loadURL('http://localhost:5000');&#xA;    mainWindow.webContents.openDevTools();&#xA;    mainWindow.on('closed', function() {&#xA;      mainWindow = null;&#xA;      subpy.kill('SIGINT');&#xA;    });&#xA;  };&#xA;&#xA;  var startUp = function(){&#xA;    rq(mainAddr)&#xA;      .then(function(htmlString){&#xA;        console.log('server started!');&#xA;        openWindow();&#xA;      })&#xA;      .catch(function(err){&#xA;        //console.log('waiting for the server start...');&#xA;        startUp();&#xA;      });&#xA;  };&#xA;&#xA;  // fire!&#xA;  startUp();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Taken from the post itself - are the following notes</p>&#xA;&#xA;<blockquote>&#xA;  <p>Notice that in main.js, we spawn a child process for a Python application. Then we check whether the server has been up or not using unlimited loop (well, bad practice! we should actually check the time required and break the loop after some seconds). After the server has been up, we build an actual electron window pointing to the new local website index page.</p>&#xA;</blockquote>&#xA;",5368083,"",4669158,"",2017-01-29T02:44:48,2017-01-29T02:44:48,"","",,2,,,
38980563,2,,37828758,2016-08-16T16:59:01,,73,,"<p>I actually figured it out a long time ago but for folks who encounter the same problem here is one way you could achieve minimizing to <code>tray</code> and restoring from <code>tray</code>. The trick is to catch the <code>close</code> and <code>minimize</code> events.</p>&#xA;&#xA;<pre><code>var BrowserWindow = require('browser-window'),&#xA;&#xA;var mainWindow = new BrowserWindow({&#xA;    width: 850,&#xA;    height: 450,&#xA;    title: ""TEST"",&#xA;    icon:'./icon.png'&#xA;});&#xA;&#xA;mainWindow.on('minimize',function(event){&#xA;    event.preventDefault();&#xA;    mainWindow.hide();&#xA;});&#xA;&#xA;mainWindow.on('close', function (event) {&#xA;    if(!application.isQuiting){&#xA;        event.preventDefault();&#xA;        mainWindow.hide();&#xA;    }&#xA;&#xA;    return false;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>and restoring from <code>Tray</code> </p>&#xA;&#xA;<pre><code>var contextMenu = Menu.buildFromTemplate([&#xA;    { label: 'Show App', click:  function(){&#xA;        mainWindow.show();&#xA;    } },&#xA;    { label: 'Quit', click:  function(){&#xA;        application.isQuiting = true;&#xA;        application.quit();&#xA;    } }&#xA;]);&#xA;</code></pre>&#xA;",2147627,"",4826084,"",2018-01-04T08:02:16,2018-01-04T08:02:16,"","",,7,,,
39092033,2,,39091964,2016-08-23T03:49:03,,107,,"<p>You can use <code>w.setMenu(null)</code> or set <code>frame: false</code> (this also removes  buttons for close, minimize and maximize options) on your window. See <a href=""http://electron.atom.io/docs/api/browser-window/#winsetmenumenu-linux-windows"" rel=""noreferrer"">setMenu()</a> or <a href=""http://electron.atom.io/docs/api/browser-window/"" rel=""noreferrer"">BrowserWindow()</a>. Also check this <a href=""https://github.com/electron/electron/issues/1415"" rel=""noreferrer"">thread</a></p>&#xA;&#xA;<p><strong>Edit:</strong></p>&#xA;&#xA;<p>Electron now have <a href=""https://electronjs.org/docs/api/browser-window#winremovemenu-linux-windows"" rel=""noreferrer""><code>win.removeMenu()</code></a> (<em>added in v5.0.0</em>), to remove application menus instead of using <code>win.setMenu(null)</code>.</p>&#xA;&#xA;<p><strong>Edit:</strong></p>&#xA;&#xA;<p>Electron 7.1.x seems to have a bug where <code>win.removeMenu()</code> doesn't work. The only workaround is to use <code>Menu.setApplicationMenu(null)</code> </p>&#xA;",5898312,"",5898312,"",2020-01-27T14:19:44,2020-01-27T14:19:44,"","",,5,,,
41009833,2,,40998200,2016-12-07T05:08:38,,0,,"<p>You're spinning up an Express server on the same machine as your Electron app, if your server can access a local database then what makes you think your app can't? You don't need an Express server. To use the <code>sqlite3</code> module in an Electron app you just have to rebuild it to target the specific Electron version using one of the <a href=""http://electron.atom.io/docs/tutorial/using-native-node-modules/"" rel=""nofollow noreferrer"">documented approaches</a>.</p>&#xA;",1259938,"",,"",,2016-12-07T05:08:38,"","",,2,,,
41034930,2,,40975675,2016-12-08T08:30:06,,0,,"<p>Finally I just didn't read the doc enough, there is a parameter called <code>detached</code> that will do exactly what I want:</p>&#xA;&#xA;<pre><code>var child = spawn(&#xA;     'D:\\DEV\\apache-tomcat-8.0.12\\bin\\startup.bat',&#xA;     {&#xA;         env: {'CATALINA_HOME': 'D:\\DEV\\apache-tomcat-8.0.12'},&#xA;        detached: true &#xA;     }&#xA;);&#xA;</code></pre>&#xA;",602928,"",,"",,2016-12-08T08:30:06,"","",,0,,,
41048756,2,,41022725,2016-12-08T21:03:27,,0,,"<p>I can debug NW.JS applications with a modified Debugger for Chrome extension and the following configurations in my launch.json file.   Note that I have one configuration for debugging the browser context and another for debugging the node context.  I tried mixed mode but the breakpoints were never hit.  This setup assumes the application files and NW.JS executable are in the same directory.</p>&#xA;&#xA;<pre><code>{&#xA;    ""version"": ""0.2.0"",&#xA;    ""configurations"": [&#xA;        {&#xA;            ""type"": ""chrome"",&#xA;            ""request"": ""launch"",&#xA;            ""name"": ""nwjs DOM debug"",&#xA;            ""runtimeExecutable"": ""${workspaceRoot}/nw.exe"",&#xA;            ""runtimeArgs"": [&#xA;                ""${workspaceRoot}"",&#xA;                ""--remote-debugging-port=9222""&#xA;            ],&#xA;            ""webRoot"": ""${workspaceRoot}"",&#xA;            ""sourceMaps"": false,&#xA;            ""diagnosticLogging"": true,&#xA;            ""port"": 9222&#xA;        },&#xA;        {&#xA;            ""type"": ""chrome"",&#xA;            ""request"": ""launch"",&#xA;            ""name"": ""nwjs Node debug"",&#xA;            ""runtimeExecutable"": ""${workspaceRoot}/nw.exe"",&#xA;            ""runtimeArgs"": [&#xA;                ""${workspaceRoot}"",&#xA;                ""--remote-debugging-port=9222""&#xA;            ],&#xA;            ""url"": ""chrome-extension://*/_generated_background_page.html"",&#xA;            ""webRoot"": ""${workspaceRoot}"",&#xA;            ""sourceMaps"": false,&#xA;            ""diagnosticLogging"": true,&#xA;            ""port"": 9222&#xA;        }&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I modified the Debugger for Chrome extension by changing a function to allow all scripts that are found to be loaded and mapped.  The debugger normally excludes extension:// and chrome-extension:// scripts.</p>&#xA;&#xA;<p>In file <em>[extensions path]\.vscode\extensions\msjsdiag.debugger-for-chrome-2.3.2\node_modules\vscode-chrome-debug-core\out\src\chrome\chromeDebugAdapter.js</em> change function shouldIgnoreScript() to return false.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>shouldIgnoreScript(script) {&#xA;    return false;//script.url.startsWith('extensions::') || script.url.startsWith('chrome-extension://');&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>One side effect is when the debugger starts in the node context you will get a lot messages saying that the debugger can't find the native node modules for NW.JS.  No big deal as long as you weren't needing to step into them.  </p>&#xA;&#xA;<p>This setup works for me but it is still flaky and the debugger websocket connection will drop seemingly at random.  But it's been reliable enough to debug without resorting to lots of console.logs().</p>&#xA;",869536,"",,"",,2016-12-08T21:03:27,"","",,4,,,
41095690,2,,40788810,2016-12-12T07:05:52,,0,,"<p>The solution to use/navigate/redirect to an HTML resource in an NW package from a hosted HTML page is to have this entry in the package.json file.</p>&#xA;&#xA;<p>""web_accessible_resources"": [&#xA;       ""*.html""&#xA;   ]&#xA;}</p>&#xA;&#xA;<p>Also, to reference the resource we should use the chrome-extension protocol as&#xA;window.location.href = ""chrome-extension://"" + chrome.runtime.id + ""/mytestpage.html""</p>&#xA;&#xA;<p>Wasted lot of my time on this. Hope this helps someone.</p>&#xA;",1989577,"",,"",,2016-12-12T07:05:52,"","",,0,,,
41177552,2,,41175585,2016-12-16T05:01:31,,0,,"<p><code>.find</code> returns a <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"" rel=""nofollow noreferrer"">Promise</a>. To get the result of the promise register a callback in <code>.then</code>:</p>&#xA;&#xA;<pre><code>app.service('messages').find({&#xA;  query: {&#xA;&#xA;    $skip: 5,&#xA;    $limit: 2&#xA;  }&#xA;})&#xA;.then(messages =&gt; {&#xA;  console.log('Found messages', messages);&#xA;});&#xA;</code></pre>&#xA;",120513,"",,"",,2016-12-16T05:01:31,"","",,1,,,
41182930,2,,41166343,2016-12-16T11:01:23,,0,,"<p>Upon reviewing the API, I've found that <code>window.flashFrame</code> actually makes the icon bounce.&#xA;And <code>dock.setBadge</code> only sets badge, without bouncing.</p>&#xA;&#xA;<p>So yes, it is possible with <code>window.flashFrame</code>.</p>&#xA;",753451,"",,"",,2016-12-16T11:01:23,"","",,0,,,
41226869,2,,41226307,2016-12-19T16:18:57,,0,,"<p>Instead of splitting words, I think you should insert another <code>p</code> element into the expected position instead. Then you can easily move the exceeding paragraph into the new page. For example</p>&#xA;&#xA;<pre><code>paragraphElement.innerHTML = paragraphElement.innerHTML.replace(lastWordToBeRemoved, '&lt;/p&gt;&lt;p class=""exceeding-paragraph""&gt;' + lastWordToBeRemoved);&#xA;newPage.insertBefore(oldPage.querySelector('.exceeding-paragraph'), newPage.firstElementChild);&#xA;</code></pre>&#xA;",3247703,"",,"",,2016-12-19T16:18:57,"","",,3,,,
41026686,2,,41025738,2016-12-07T20:23:17,,1,,"<p>Your code seems great.</p>&#xA;&#xA;<p>Try maybe to change your admin.js but usualy your code should work </p>&#xA;&#xA;<pre><code>var adm = function (firstName, lastName) {&#xA;   this.firstName = firstName;&#xA;   this.lastName = lastName;&#xA;   this.fullName = function () {&#xA;      return this.firstName + ' ' + this.lastName;&#xA;   }&#xA;}&#xA;var exports = module.exports = adm&#xA;</code></pre>&#xA;",7263945,"",,"",,2016-12-07T20:23:17,"","",,0,,,
41072008,2,,41069469,2016-12-10T03:58:28,,1,,"<p>Yes, you'll need to create a custom window, you can't create custom menu items via the Electron Menu API.</p>&#xA;",1259938,"",,"",,2016-12-10T03:58:28,"","",,2,,,
41086992,2,,41086973,2016-12-11T14:01:07,,1,,"<p>String concatenation:</p>&#xA;&#xA;<pre><code>webview.executeJavaScript(""$('body').css('left', "" + leftPos + "" )"");&#xA;// ----------------------------------------------^^^^^^^^^^^^^^^&#xA;</code></pre>&#xA;&#xA;<p>That'll work if <code>leftPos</code> just has a number in it (-300, which will be -300 pixels).</p>&#xA;&#xA;<p>If <code>leftPos</code> is a <em>string</em> with <code>px</code> in it, you'll need <code>'</code> in there as well:</p>&#xA;&#xA;<pre><code>webview.executeJavaScript(""$('body').css('left', '"" + leftPos + ""' )"");&#xA;// ----------------------------------------------^---------------^&#xA;</code></pre>&#xA;",157247,"",,"",,2016-12-11T14:01:07,"","",,0,,,
41146599,2,,41122953,2016-12-14T15:43:21,,1,,"<p>It's not officially supported yet, but we have merged a change that seems to make it work. It's not released yet but it will be included in the next release that is due very soon.</p>&#xA;",1417293,"",,"",,2016-12-14T15:43:21,"","",,3,,,
41154673,2,,41154033,2016-12-15T00:51:07,,1,,"<p>Perhaps more of a workaround than an answer, but if you swap your script inclusion from this:</p>&#xA;&#xA;<pre><code>&lt;script src=""scripts/controllers/controller.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>To this:</p>&#xA;&#xA;<pre><code>&lt;script&gt;require('./scripts/controllers/controller.js')&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Then the relative paths should work as you are expecting.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>I <em>think</em> that when you include scripts with the <code>src</code> attribute, then the internal context of the current working directory in that file is the root of the application.</p>&#xA;&#xA;<p>Why? I'm not 100% sure, to be honest. Limitation on how the files have to be loaded when included as script <code>src</code>? If you <em>really</em> want to continue using the <code>src</code> attribute, these would technically work in <code>controller.js</code>.</p>&#xA;&#xA;<pre><code>var Game = require(__dirname + '/scripts/models/game.js');&#xA;// or&#xA;var Game = require('./scripts/models/game.js');&#xA;</code></pre>&#xA;&#xA;<p>I can't whole-heartedly suggest either of those options, though. Seems fragile.</p>&#xA;&#xA;<p>To be honest, I've never even noticed this before, because I typically include a javascript ""entry"" point to my application in the same location as my <code>index.html</code>.</p>&#xA;",2012235,"",,"",,2016-12-15T00:51:07,"","",,2,,,
41155456,2,,41154921,2016-12-15T02:30:49,,1,,"<p>First get rid of the <code>electron.remote.require</code>, there are very few cases where that actually makes sense, just use regular <code>require</code>.</p>&#xA;&#xA;<p>Then you probably need to make this change:</p>&#xA;&#xA;<pre><code>openScriptFile(filePath, this.afterOpenScriptFileCallback.bind(this))&#xA;</code></pre>&#xA;&#xA;<p>I suggest you read through <a href=""https://stackoverflow.com/questions/3127429/how-does-the-this-keyword-work/3127440#3127440"">How does the &quot;this&quot; keyword work?</a> to understand what's going on here.</p>&#xA;",1259938,"",,"",,2016-12-15T02:30:49,"","",,1,,,
41158743,2,,41158608,2016-12-15T07:35:58,,1,,"<p>You can drop in an <code>express-pouchdb</code> layer on top of your PouchDB Electron app, which will allow it to communicate with other apps via HTTP. Here's a video where I demonstrate how you can use this to sync two separate PouchDBs running in Node: <a href=""https://www.youtube.com/watch?v=5iTzm8sTtd4"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=5iTzm8sTtd4</a></p>&#xA;",680742,"",,"",,2016-12-15T07:35:58,"","",,0,,,
41169757,2,,41169429,2016-12-15T17:12:23,,1,,"<p>Per <a href=""https://github.com/nwjs/nw.js/issues/264"" rel=""nofollow noreferrer"">this problem report</a>, it appears that <code>__dirname</code> does not work in node-webkit because it does not properly define all module-level variables.  </p>&#xA;&#xA;<p>Suggested work-arounds are to use <a href=""https://nodejs.org/docs/latest/api/process.html#process_process_cwd"" rel=""nofollow noreferrer""><code>process.cwd()</code></a>.</p>&#xA;",816620,"",,"",,2016-12-15T17:12:23,"","",,1,,,
41200108,2,,40990698,2016-12-17T15:25:41,,1,,<p>keyboard hooking is not possible with node js.you can create a low level keyboardhooking code in VC++ or c# and that run as a child process from nodewebkit</p>&#xA;,7310529,"",,"",,2016-12-17T15:25:41,"","",,0,,,
41210471,2,,41161431,2016-12-18T16:33:14,,1,,"<p>Here is how i managed to do it. </p>&#xA;&#xA;<p>Get the variable with the number of notifications and send it to the electron application</p>&#xA;&#xA;<p><strong>Home.html</strong></p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;//setup the electron object to be able to send variable to it &#xA;const ipcRenderer = require('electron').ipcRenderer;&#xA;&#xA;//send the value Html_Hidden_Variable to electron variable CountNotifElectron &#xA;ipcRenderer.send('CountNotifElectron', Html_Hidden_Variable);&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Retreive the variable send and update the badge.</p>&#xA;&#xA;<p><strong>Main.js</strong></p>&#xA;&#xA;<pre><code>const {ipcMain} = require('electron')&#xA;&#xA;//retreive the variable 'CountNotifElectron' with the number of notification&#xA;ipcMain.on('CountNotifElectron', function(event, arg) &#xA;{&#xA;  //update the value of the badge &#xA;  app.setBadgeCount(arg);&#xA;})&#xA;})&#xA;</code></pre>&#xA;",5171131,"",,"",,2016-12-18T16:33:14,"","",,0,,,
41213322,2,,41212844,2016-12-18T21:58:54,,1,,<p>I didn't realize that <code>mainWindow.webContents.openDevTools()</code> was in my main.js file from the boiler code I started with. I commented that out and built my app out again and that works.</p>&#xA;,3479801,"",,"",,2016-12-18T21:58:54,"","",,0,,,
41131453,2,,41131312,2016-12-13T22:13:01,,2,,"<p>Take a look <a href=""https://github.com/electron/electron-rebuild/blob/master/src/cli.js#L9-L39"" rel=""nofollow noreferrer"">here</a>, or by running <code>electron-rebuild --help</code>.</p>&#xA;&#xA;<p>I believe you can supply the version of electron for which you want to rebuild by supplying the <code>--version</code> flag.</p>&#xA;&#xA;<p>So for you:</p>&#xA;&#xA;<pre><code>electron-rebuild -w sqlite3 -p --version 1.2&#xA;</code></pre>&#xA;&#xA;<p>Or</p>&#xA;&#xA;<pre><code>electron-rebuild -w sqlite3 -p -v 1.2&#xA;</code></pre>&#xA;&#xA;<p>As for getting your electron app to use v1.4, I think it's just a matter of installing and using some variant of electron v1.4 to launch your application. Is your version of <code>electron-prebuilt</code> installing electron v1.2?</p>&#xA;",2012235,"",2012235,"",2016-12-13T22:30:01,2016-12-13T22:30:01,"","",,0,,,
41141774,2,,41136686,2016-12-14T11:44:47,,2,,<p>One way I can think of is that you could run a <code>ng build --watch</code> along side your 'ng serve'. That will cause the dit folder to be maintained as well.</p>&#xA;,4314799,"",,"",,2016-12-14T11:44:47,"","",,0,,,
41215207,2,,41214854,2016-12-19T03:02:18,,2,,"<p>Found out it wanted <code>.icns</code> file not <code>.ico</code>. So the command is</p>&#xA;&#xA;<p><code>electron-packager . --icon=""icon.icns""</code></p>&#xA;&#xA;<p>Where icon.icns is in my root where my <code>package.json</code> is</p>&#xA;",3479801,"",,"",,2016-12-19T03:02:18,"","",,1,,,
41223221,2,,40316631,2016-12-19T13:03:07,,2,,"<p>This answer maybe a bit late for you but in case someone else is wondering, here goes.</p>&#xA;&#xA;<p>If you want to use browserHistory instead of hashHistory you need to configure your server so that it can deal with the url that you are passing. Here is a link that explains how each works and it may also give you a clue about how to configure your server to handle the urls: <a href=""https://github.com/ReactTraining/react-router/blob/master/docs/guides/Histories.md"" rel=""nofollow noreferrer"">https://github.com/ReactTraining/react-router/blob/master/docs/guides/Histories.md</a></p>&#xA;",4987045,"",,"",,2016-12-19T13:03:07,"","",,0,,,
41008956,2,,41008819,2016-12-07T03:33:27,,3,,"<p>Although it is ES5 syntax but what you are writing is <strong>JSX and not pure Javascript</strong> and hence you get the error <code>unexpected token &lt;</code> at <code>return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;</code> . You need a tool to convert your <code>JSX to JS</code> for your browser to understand.</p>&#xA;&#xA;<p>For this you definitely need <code>babel</code>. In order to use it you can use <code>webpack</code> which will make use of <code>babel</code> to bundle code into a JS file. </p>&#xA;",5928186,"",,"",,2016-12-07T03:33:27,"","",,2,,,
41040757,2,,40996049,2016-12-08T13:32:19,,3,,"<p>Somehow i managed to find the solution for this one. After I installed these package using npm command, I was getting the binding error. As a solution, I needed to run ""electron-rebuild"" command for that new package externally. Download electron-rebuild module with npm and then run ""electorn-rebuild -f -w ffi"" and ""electron-rebuild -f -w ref"". That's all, its working now.</p>&#xA;",5088262,"",5088262,"",2017-01-26T11:14:48,2017-01-26T11:14:48,"","",,0,,,
41226563,2,,41173127,2016-12-19T16:02:04,,4,,"<p>The Node module needs to be run from the main Electron thread, not the renderer thread on which React runs.</p>&#xA;&#xA;<p>You can run NPM modules in the renderer process, as if you were in the browser, but those modules cannot use the Node.js library since obviously there is no Node in the browser.</p>&#xA;&#xA;<p>To communicate between the main (Node) and renderer (browser) threads you need to use IPC (inter process communication) a system which uses events to send data between threads.</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-main.md"" rel=""nofollow noreferrer"">Here's the IPC documentation for Electron.</a></p>&#xA;&#xA;<p>If you need constant communication between threads you can use the <a href=""https://www.npmjs.com/package/electron-ipc-socket"" rel=""nofollow noreferrer"">electron-ipc-socket</a> library.</p>&#xA;",816478,"",,"",,2016-12-19T16:02:04,"","",,0,,,
41167951,2,,41166869,2016-12-15T15:38:29,,6,,"<p>You can do it in more ways:</p>&#xA;&#xA;<p>1) Communicate between process with <strong><em>ipc</em></strong> and ask data with <strong><em>ipcRenderer.sendSync</em></strong> function, that asks to main process and wait for a return value. &#xA;<a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md"" rel=""noreferrer"">https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md</a></p>&#xA;&#xA;<p>2) use exports in the right way, so:</p>&#xA;&#xA;<p>in the main process:</p>&#xA;&#xA;<pre><code>exports.functionName = functionName;&#xA;</code></pre>&#xA;&#xA;<p>in the renderer:</p>&#xA;&#xA;<pre><code>var functionName = remote.require('./main').functionName;&#xA;</code></pre>&#xA;",6081475,"",,"",,2016-12-15T15:38:29,"","",,1,,,
41173679,2,,41130993,2016-12-15T21:32:27,,19,,"<p>It took a lot of trial and error but I got this working. There is a lot here that I don't totally understand, and much that might be pointless or bad practice and it might all fall down at the very next step but if, like me, you are just trying to get over the first hump then maybe something I found will help you.</p>&#xA;&#xA;<p>I found the problem by <a href=""https://stackoverflow.com/questions/38523617/asar-how-to-unpack-a-asar-file"">unpacking</a> the <code>app.asar</code> file that <code>electron-builder</code> produces. Instead of containing the bundled code from my <code>dist</code> folder it contained all the project code (<code>*.ts *.scss</code> etc). The problem was just that the packing functions were packing up the wrong stuff.<br>The steps to get the right source into the final app are simple when you lay them out but my god they didn't half put up a fight! Starting from where I left off in my initial question I did the following...</p>&#xA;&#xA;<p><em>Remember that my project structure is the default one set up by angular-cli</em></p>&#xA;&#xA;<p><strong>Electron specific files</strong><br>I moved the <code>main.js</code> down into <code>src</code> and changed its name to <code>electron-main.js</code> just to stop any confusion with the <code>main.ts</code> that is already in there. I also changed the path it references back to <code>/index.html</code>.<br>Next I created a new application level <code>package.json</code> also in <code>src</code> and gave it the following content:</p>&#xA;&#xA;<pre><code> {&#xA;  ""name"": ""application-name"",&#xA;  ""description"": ""CLI app"",&#xA;  ""author"": ""Me me me"",&#xA;  ""version"": ""0.0.1"",&#xA;  ""main"": ""electron-main.js""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>angular-cli.json</strong><br>I changed the <code>outDir</code> to <code>build</code> purely because electron seems to output to <code>dist</code> by default and I wanted some separation at this stage. Then I addded <code>package.json</code> and <code>electron-main.js</code> to the <code>assets</code> array.</p>&#xA;&#xA;<p><strong>Main package.json</strong><br>I removed the <code>""main"":""main.js""</code> as it is apparently no longer needed here. In <code>scripts</code> I changed the test command to <code>electron build</code> to point it at the build folder where the bundled code will be.<br>Finally, I went to the <code>build</code> field and added the following content:</p>&#xA;&#xA;<pre><code>""directories"": {&#xA;  ""buildResources"": ""build"",&#xA;  ""app"": ""build""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Seems pretty obvious now. This just tells the compiler where to look for the assets that will make up the final app. It was defaulting to the working directory and that was my problem.</p>&#xA;&#xA;<p>Using this setup I can now run <code>ng build</code> to bundle my project into the <code>build</code> folder along with the <code>electron-main.js</code> and <code>package.json</code>.<br>This done I can run <code>npm run electron</code> to quickly launch a test app or <code>npm run pack</code> to build an app that can be launched from <code>Finder</code>.</p>&#xA;&#xA;<p>Boom. Job done. I'll be back here in ten minutes with another annoying question I expect. Gotta love the dev these days :)</p>&#xA;",1166729,"",-1,"",2017-05-23T12:17:57,2016-12-15T21:32:27,"","",,3,,,
41058622,2,,41058569,2016-12-09T10:46:10,,137,,"<p>The two pieces of code are equivalent but the first one is using the <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"" rel=""noreferrer"">ES6 destructuring assignment</a> to be shorter.</p>&#xA;&#xA;<p>Here is a quick example of how it works:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const obj = {&#xD;&#xA;  name: ""Fred"",&#xD;&#xA;  age: 42,&#xD;&#xA;  id: 1&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//simple destructuring&#xD;&#xA;const { name } = obj;&#xD;&#xA;console.log(""name"", name);&#xD;&#xA;&#xD;&#xA;//assigning multiple variables at one time&#xD;&#xA;const { age, id } = obj;&#xD;&#xA;console.log(""age"", age);&#xD;&#xA;console.log(""id"", id);&#xD;&#xA;&#xD;&#xA;//using different names for the properties&#xD;&#xA;const { name: personName } = obj;&#xD;&#xA;console.log(""personName"", personName);</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",3689450,"",,"",,2016-12-09T10:46:10,"","",,0,,,
38708760,2,,38708323,2016-08-01T21:56:17,,0,,"<p>It would be alt+space+n to minimize but secure reasons I guess it won't work.</p>&#xA;&#xA;<pre><code>$(""#minimize"").click(function() {&#xA;    var e = jQuery.Event(""keydown"");&#xA;    //e.which = 115;       // # F4 code value&#xA;    e.altKey = true;     // Alt key pressed&#xA;    e.which = 32;      //space key&#xA;    //e.which = 78;      //n key&#xA;    $(""#minimize"").trigger(e);&#xA;&#xA;});&#xA;</code></pre>&#xA;",6264708,"",,"",,2016-08-01T21:56:17,"","",,0,,,
38712775,2,,38679571,2016-08-02T05:59:57,,0,,"<p>This might help you. It'll execute javascript on your Main Window when the New Window is closed.</p>&#xA;&#xA;<pre><code>newWindow.on('closed', function(e){&#xA;        mainWindow.webContents.executeJavaScript(`alert(""test"");`);&#xA;})&#xA;</code></pre>&#xA;",1926738,"",,"",,2016-08-02T05:59:57,"","",,0,,,
38772519,2,,38741468,2016-08-04T16:14:05,,0,,"<p>Contrary to my impression this issue was an Ubuntu matter. To solve this problem go to <code>~/.local/share/applications</code> then you'll see all config files with <code>.desktop</code> extension, now simply remove intended config file to reset application icon on Ubuntu Launcher.</p>&#xA;",5069269,"",5069269,"",2016-08-04T19:25:32,2016-08-04T19:25:32,"","",,0,,,
38772807,2,,38771861,2016-08-04T16:29:47,,0,,"<p>I'd create a <a href=""https://github.com/yelouafi/redux-saga"" rel=""nofollow"">redux-saga</a> for this task. Check out the readme, it gives pretty good idea what is it. It can be quite difficult to understand at first, but in the end you get a code that is easy to read and test.</p>&#xA;",6212547,"",,"",,2016-08-04T16:29:47,"","",,1,,,
38786514,2,,38775932,2016-08-05T10:01:47,,0,,"<p><code>nodegit</code> contains a native NodeJS module, native modules must be rebuilt to target the Electron version you use them with. Instructions for rebuilding native modules can be found at <a href=""http://electron.atom.io/docs/tutorial/using-native-node-modules/"" rel=""nofollow"">http://electron.atom.io/docs/tutorial/using-native-node-modules/</a></p>&#xA;",1259938,"",,"",,2016-08-05T10:01:47,"","",,3,,,
38833635,2,,38639455,2016-08-08T15:54:17,,0,,"<p>Turns out the lib on <a href=""http://slproweb.com/products/Win32OpenSSL.html"" rel=""nofollow"">http://slproweb.com/products/Win32OpenSSL.html</a> seems to be just a wrapper around the dll that still uses it.&#xA;I misguided thought that node-gyp was just compiling the thing without the dependency which is not true.&#xA;I found another precompiled openssl lib <a href=""http://www.npcglib.org/~stathis/blog/precompiled-openssl/"" rel=""nofollow"">here</a> that did the trick.</p>&#xA;&#xA;<p>So to wrap up:&#xA; I needed to ship something with OpenSSL under electron but electron does not expose OpenSSL like node does and switchs it for borinSSL.&#xA; I followed tooTallNate article that recommended a static library and assumed the static library was right and I was somehow needing the DLL and I assumed node-gyp was not bundling the used static library.&#xA; Switching the lib for another one (or better yet compiling it myself) did the trick.</p>&#xA;",1440762,"",,"",,2016-08-08T15:54:17,"","",,0,,,
38877472,2,,38868975,2016-08-10T15:18:37,,0,,"<p>You should set your path to contain the directories containing the nodes and npm executables, not the executables themselves.  Also, it's been a long time since I used Windows, but I think PATH should be upper case.  So you need:</p>&#xA;&#xA;<pre><code>PATH=C:\Program Files\nodejs;C:\Program Files\nodejs&#xA;</code></pre>&#xA;&#xA;<p>Then if you run ""npm install"" for example, Windows will search the PATH for directories containing npm.exe. </p>&#xA;",10715,"",,"",,2016-08-10T15:18:37,"","",,0,,,
38670820,2,,38670778,2016-07-30T05:55:56,,1,,"<p>This creates your app because you have included the second parameter (an array of dependencies to inject):</p>&#xA;&#xA;<pre><code>angular.module('app', [&#xA;    'ngRoute'&#xA;])&#xA;</code></pre>&#xA;&#xA;<p>Remove the second parameter on your other <code>angular.module()</code> definitions because that is causing a new app to be created each time. </p>&#xA;&#xA;<pre><code>angular.module('app') &lt;-- no second parameter tells it to use the existing 'app' module &#xA;    .factory('customerService', function() {&#xA;&#xA;    });&#xA;&#xA;angular.module('app') &lt;-- no second parameter tells it to use the existing 'app' module&#xA;    .controller('customerController', ['$scope', 'customerService', function($scope, customerService) {&#xA;      //&#xA;    }]);&#xA;</code></pre>&#xA;&#xA;<p>I added <code>customerService</code> to your injection array on your controller definition because the array elements have to match up exactly to your function parameters. &#xA;Also, if you are using <code>controllerAs</code> syntax as you have done on your route definition then you may not want to inject <code>$scope</code> into your controller.</p>&#xA;",548997,"",,"",,2016-07-30T05:55:56,"","",,0,,,
38714381,2,,35962047,2016-08-02T07:34:06,,1,,"<p>For future users: <a href=""http://docs.nwjs.io/en/latest/For%20Users/Advanced/Use%20Flash%20Plugin/#using-flash-plugin"" rel=""nofollow"">http://docs.nwjs.io/en/latest/For%20Users/Advanced/Use%20Flash%20Plugin/#using-flash-plugin</a></p>&#xA;&#xA;<p><strong>Note:</strong> i don't think you need chromium-args to do this, but anyway you can check your plugins by doing:</p>&#xA;&#xA;<pre><code>window.location=""chrome://plugins""&#xA;</code></pre>&#xA;&#xA;<p>and you can check if this flag is available in your nwjs version by doing:</p>&#xA;&#xA;<pre><code>window.location=""chrome://flags""&#xA;</code></pre>&#xA;",427622,"",,"",,2016-08-02T07:34:06,"","",,0,,,
38750073,2,,37305191,2016-08-03T17:24:21,,1,,"<p>I believe this error is due to an incorrect path when trying to create the installer. </p>&#xA;&#xA;<p>I still haven't been able to validate this, but if you have node_modules folder with its nested dependencies and you have <strong>paths longer than 260 characters</strong> that may just be the problem.</p>&#xA;&#xA;<p>If I'm able to comfirm this or get a solution I'll post it here.</p>&#xA;",3063255,"",,"",,2016-08-03T17:24:21,"","",,0,,,
38790965,2,,38681853,2016-08-05T13:52:13,,1,,"<p>Just set show:false in the manifest file, later on you can open new windows and close them.</p>&#xA;&#xA;<p>As for window entry point you can always set a blank page or a single javascript file to be executed at start</p>&#xA;&#xA;<p><a href=""http://docs.nwjs.io/en/latest/References/Manifest%20Format/#main"" rel=""nofollow"">http://docs.nwjs.io/en/latest/References/Manifest%20Format/#main</a></p>&#xA;&#xA;<p><a href=""http://docs.nwjs.io/en/latest/References/Manifest%20Format/#show"" rel=""nofollow"">http://docs.nwjs.io/en/latest/References/Manifest%20Format/#show</a></p>&#xA;",5653484,"",,"",,2016-08-05T13:52:13,"","",,0,,,
38812608,2,,38811399,2016-08-07T09:08:42,,1,,"<p>You have to use the callback (<code>cb</code>) if you want to execute the second step and so on:</p>&#xA;&#xA;<pre><code>.end()&#xA;.then(function (obj) {&#xA;    console.log(obj);&#xA;    console.log('done');&#xA;    cb();&#xA;})&#xA;.catch(function (error) {&#xA;    console.error('error', error);&#xA;    cb(error);&#xA;});&#xA;</code></pre>&#xA;",1816580,"",,"",,2016-08-07T09:08:42,"","",,0,,,
38896315,2,,38441935,2016-08-11T12:23:36,,1,,"<p>Unfortunately i found out by myself now, that this is not possible currently.&#xA;After investigating some electron and chromium source code i managed to find the place the keyboard is opened, which happens to be in the chromium implementation of textfields.&#xA;In order to support such a feature in electron there will first have to be an option in chromium to fully disable the onscreen keyboard, which there is not by now, unfortunately.&#xA;If that feature would be implemented electron could implement this option itself and pass it through to chromium.&#xA;I've started a discussion about it on github, hopefully enough people will upvote the issue and chromium will extend its code accordingly.</p>&#xA;&#xA;<p>For those who desperately need a workaround:&#xA;The only thing i was able to come up with after checking the sourcecode is to put an ""readonly"" on my input fields, since chromium will not open the keyboard on readonly fields.&#xA;The downside, of course, is that you will not be able to use the keyboard anymore for these fields, plus, the blinking cursor will not show up, so it feels a big odd to work with it.</p>&#xA;",5754677,"",,"",,2016-08-11T12:23:36,"","",,1,,,
38769670,2,,38747445,2016-08-04T14:06:43,,2,,"<p>As <a href=""https://stackoverflow.com/users/202694/pace"">Pace</a> mentioned in one of his comments, <code>System.js</code> overrides <code>Node.js</code>'s <code>require</code> method and uses it's own resolution mechanism. This is why the <code>require</code> method won't follow the <a href=""https://nodejs.org/api/modules.html#modules_all_together"" rel=""nofollow noreferrer""><code>Node.js</code> lookup mechanism</a>. However there is a way to use the latter:  </p>&#xA;&#xA;<p><code>System.js</code> stores the <code>Node.js</code>'s <code>require</code> in <code>_nodeRequire</code> variable. So the way to load a module using <code>Node.js</code> mechanism is to load it by</p>&#xA;&#xA;<pre><code>var module = System._nodeRequire('./path/to/module/')&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/jspm/jspm-cli/issues/248"" rel=""nofollow noreferrer"">Here</a> is the discussion that helped me to come up with this solution.</p>&#xA;",1544364,"",-1,"",2017-05-23T12:18:09,2016-12-27T09:48:07,"","",,1,,,
38809627,2,,38807145,2016-08-06T23:38:52,,2,,"<p>It's because when you set new size -even if it is the same size, the canvas will reset the state. can be fixed by setting line stuff after the new size is set</p>&#xA;&#xA;<pre><code>function snapshot() {&#xA;    canvas.width = 500;&#xA;    canvas.height = 300;&#xA;    ctx.drawImage(videoNode, 0, 0, canvas.width, canvas.height);&#xA;&#xA;    // set line stuff here &lt;=====================&#xA;    ctx.lineWidth = 5;&#xA;    ctx.lineJoin = 'round';&#xA;    ctx.lineCap = 'round';&#xA;    /* Posso fazer um switch case aqui pra escolher uma cor */&#xA;    ctx.strokeStyle = 'blue';&#xA;}&#xA;</code></pre>&#xA;",6599410,"",,"",,2016-08-06T23:38:52,"","",,2,,,
38844141,2,,36406172,2016-08-09T07:00:53,,2,,"<p>it might be late but i will answer this for future visitors :P</p>&#xA;&#xA;<p>I think the best and the direct way to set and get cookies without any workarounds is to use webview request interceptors and change the request and response headers this is more secure and reliable and will work in nodewebkit, electron and chromium extensions and apps:</p>&#xA;&#xA;<p>So to set headers you can use <code>onBeforeSendHeaders</code>,&#xA;for example lets say you want to change a cookie called ""connect.sid"" that used as session id in expressjs you can do the following:</p>&#xA;&#xA;<pre><code>var new_sessionId = ""s%randskbksbdfmnsdbf345k345h34k5"";&#xA;var $webview = $(""#my-webview"");&#xA;$webview.get(0).request.onBeforeSendHeaders.addListener(&#xA;    function (details) {&#xA;        details.requestHeaders.forEach(function (header) {&#xA;            if (header.name === ""Cookie"") {&#xA;                var cookies = header.value.split(""; "");&#xA;                var valid_cookies = cookies.filter(function (cookie) {&#xA;                    return cookie &amp;&amp; cookie.indexOf(""connect.sid"") &lt; 0;&#xA;                });&#xA;                valid_cookies.push(""connect.sid="" + new_sessionId);&#xA;                header.value = valid_cookies.join(""; "");&#xA;            }&#xA;        });&#xA;        return {requestHeaders: details.requestHeaders};&#xA;    },&#xA;    {urls: [""&lt;all_urls&gt;""]},&#xA;    [""blocking"", ""requestHeaders""]&#xA;);&#xA;$webview.attr(""src"",""http://example.com"");&#xA;</code></pre>&#xA;&#xA;<p>and to read headers you can use <code>onHeadersReceived</code></p>&#xA;&#xA;<pre><code>var $webview = $(""#my-webview"");&#xA;$webview.get(0).request.onHeadersReceived.addListener(function (details) {&#xA;        details.responseHeaders.forEach(function (header) {&#xA;            if (header.name === ""set-cookie"") {&#xA;                var cookies = header.value.split(""; "");&#xA;                var sessionCookie = cookies.find(function (cookie) {&#xA;                    return cookie &amp;&amp; cookie.indexOf(""connect.sid"") === 0;&#xA;                });&#xA;                if (sessionCookie) {&#xA;                    var sessionId = sessionCookie.split(""="")[1];&#xA;                    console.log(sessionId);&#xA;                }&#xA;            }&#xA;        });&#xA;    },&#xA;    {urls: [""&lt;all_urls&gt;""]},&#xA;    [""blocking"", ""responseHeaders""]&#xA;);&#xA;$webview.attr(""src"",""http://example.com"");&#xA;</code></pre>&#xA;&#xA;<p><strong>Note:</strong> you can also set and get cookies for your main window using this method but instead of intercepting <code>webview.request</code> you can intercept <code>chrome.webRequest</code> or just use <code>chrome.cookies.set</code> and <code>chrome.cookies.get</code>, i found all these things in chromium source code ;)</p>&#xA;",427622,"",427622,"",2017-03-09T19:33:09,2017-03-09T19:33:09,"","",,0,,,
38877567,2,,38796799,2016-08-10T15:22:25,,2,,"<p>In order to get your BrowserWindows to appear in the dock menu, an example of which is shown in the question, you must include a MenuItem in your Application Menu has the 'role' set to 'window'. Example:</p>&#xA;&#xA;<pre><code>{&#xA;  role: 'window',&#xA;  submenu: [&#xA;    {&#xA;      role: 'minimize'&#xA;    },&#xA;    {&#xA;      role: 'close'&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Further example of creating an application menu: &#xA;<a href=""https://github.com/electron/electron/blob/master/docs/api/menu.md"" rel=""nofollow"">https://github.com/electron/electron/blob/master/docs/api/menu.md</a></p>&#xA;",415219,"",,"",,2016-08-10T15:22:25,"","",,0,,,
38889819,2,,38889682,2016-08-11T07:21:46,,2,,"<p>Do you have <code>&lt;base href=""/"" &gt;</code> in your <code>index.html</code>? I believe electron uses the filesystem and <code>/</code> is the root of filesystem, so <code>C:\</code>.</p>&#xA;&#xA;<p>You should change your <code>&lt;base href=""/""&gt;</code> to the path where your <code>index.html</code> resides</p>&#xA;&#xA;<pre><code>&lt;base href=""C:/path/to/index""&gt;&#xA;</code></pre>&#xA;",3106920,"",,"",,2016-08-11T07:21:46,"","",,4,,,
38686251,2,,38685731,2016-07-31T16:45:20,,3,,"<p>You can use <a href=""https://github.com/TooTallNate/NodObjC"" rel=""nofollow""><code>NodObjC</code></a> - the Node.js ⇆ Objective-C bridge:</p>&#xA;&#xA;<pre><code>var $ = require('nodobjc')&#xA;&#xA;$.framework('Foundation');&#xA;$.framework('Cocoa');&#xA;&#xA;var pool = $.NSAutoreleasePool('alloc')('init');&#xA;var result = $.CGWindowListCopyWindowInfo($.kCGWindowListExcludeDesktopElements |&#xA;                                          $.kCGWindowListOptionOnScreenOnly,&#xA;                                          $.kCGNullWindowID);&#xA;var windowList = $.CFBridgingRelease(result);&#xA;&#xA;var error = $.alloc($.NSError).ref();&#xA;&#xA;var jsonData = $.NSJSONSerialization('dataWithJSONObject', &#xA;                                     windowList, &#xA;                                     'options',&#xA;                                     $.NSJSONWritingPrettyPrinted,&#xA;                                     'error', &#xA;                                     error);&#xA;&#xA;var jsonString = $.NSString('alloc')('initWithData', &#xA;                                     jsonData, &#xA;                                     'encoding',                                          &#xA;                                     $.NSUTF8StringEncoding);&#xA;&#xA;var parsed = JSON.parse(jsonString);&#xA;&#xA;console.log(parsed);&#xA;&#xA;pool('drain');&#xA;</code></pre>&#xA;",4989460,"",4989460,"",2016-07-31T16:51:04,2016-07-31T16:51:04,"","",,2,,,
38689576,2,,38689432,2016-08-01T00:32:54,,3,,"<p>You can use <code>change</code> event, <code>FileReader</code>, <code>.readAsText()</code>, <a href=""https://github.com/evanplaice/jquery-csv"" rel=""nofollow""><code>jquery-csv</code></a> plugin&#xA;<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>$("":file"").change(function() {&#xD;&#xA;  var reader = new FileReader();&#xD;&#xA;  reader.onload = function(e) {&#xD;&#xA;    console.log($.csv.toArrays(e.target.result))&#xD;&#xA;  };&#xD;&#xA;  reader.readAsText(this.files[0])&#xD;&#xA;})</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""&gt;&lt;/script&gt;&#xD;&#xA;&lt;input type=""file"" name=""File Upload"" id=""txtFileUpload"" accept="".csv""/&gt;&#xD;&#xA;&lt;script&gt;&#xD;&#xA;  // https://github.com/evanplaice/jquery-csv/blob/master/src/jquery.csv.min.js&#xD;&#xA;  RegExp.escape=function(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,""\\$&amp;"")},function(a){""use strict"";var b;b=""undefined""!=typeof jQuery&amp;&amp;jQuery?jQuery:{},b.csv={defaults:{separator:"","",delimiter:'""',headers:!0},hooks:{castToScalar:function(a){var b=/\./;if(isNaN(a))return a;if(b.test(a))return parseFloat(a);var c=parseInt(a);return isNaN(c)?null:c}},parsers:{parse:function(b,c){function d(){if(j=0,k="""",c.start&amp;&amp;c.state.rowNum&lt;c.start)return i=[],c.state.rowNum++,void(c.state.colNum=1);if(c.onParseEntry===a)h.push(i);else{var b=c.onParseEntry(i,c.state);b!==!1&amp;&amp;h.push(b)}i=[],c.end&amp;&amp;c.state.rowNum&gt;=c.end&amp;&amp;(l=!0),c.state.rowNum++,c.state.colNum=1}function e(){if(c.onParseValue===a)i.push(k);else{var b=c.onParseValue(k,c.state);b!==!1&amp;&amp;i.push(b)}k="""",j=0,c.state.colNum++}var f=c.separator,g=c.delimiter;c.state.rowNum||(c.state.rowNum=1),c.state.colNum||(c.state.colNum=1);var h=[],i=[],j=0,k="""",l=!1,m=RegExp.escape(f),n=RegExp.escape(g),o=/(D|S|\r\n|\n|\r|[^DS\r\n]+)/,p=o.source;return p=p.replace(/S/g,m),p=p.replace(/D/g,n),o=new RegExp(p,""gm""),b.replace(o,function(a){if(!l)switch(j){case 0:if(a===f){k+="""",e();break}if(a===g){j=1;break}if(/^(\r\n|\n|\r)$/.test(a)){e(),d();break}k+=a,j=3;break;case 1:if(a===g){j=2;break}k+=a,j=1;break;case 2:if(a===g){k+=a,j=1;break}if(a===f){e();break}if(/^(\r\n|\n|\r)$/.test(a)){e(),d();break}throw new Error(""CSVDataError: Illegal State [Row:""+c.state.rowNum+""][Col:""+c.state.colNum+""]"");case 3:if(a===f){e();break}if(/^(\r\n|\n|\r)$/.test(a)){e(),d();break}if(a===g)throw new Error(""CSVDataError: Illegal Quote [Row:""+c.state.rowNum+""][Col:""+c.state.colNum+""]"");throw new Error(""CSVDataError: Illegal Data [Row:""+c.state.rowNum+""][Col:""+c.state.colNum+""]"");default:throw new Error(""CSVDataError: Unknown State [Row:""+c.state.rowNum+""][Col:""+c.state.colNum+""]"")}}),0!==i.length&amp;&amp;(e(),d()),h},splitLines:function(b,c){function d(){if(h=0,c.start&amp;&amp;c.state.rowNum&lt;c.start)return i="""",void c.state.rowNum++;if(c.onParseEntry===a)g.push(i);else{var b=c.onParseEntry(i,c.state);b!==!1&amp;&amp;g.push(b)}i="""",c.end&amp;&amp;c.state.rowNum&gt;=c.end&amp;&amp;(j=!0),c.state.rowNum++}var e=c.separator,f=c.delimiter;c.state.rowNum||(c.state.rowNum=1);var g=[],h=0,i="""",j=!1,k=RegExp.escape(e),l=RegExp.escape(f),m=/(D|S|\n|\r|[^DS\r\n]+)/,n=m.source;return n=n.replace(/S/g,k),n=n.replace(/D/g,l),m=new RegExp(n,""gm""),b.replace(m,function(a){if(!j)switch(h){case 0:if(a===e){i+=a,h=0;break}if(a===f){i+=a,h=1;break}if(""\n""===a){d();break}if(/^\r$/.test(a))break;i+=a,h=3;break;case 1:if(a===f){i+=a,h=2;break}i+=a,h=1;break;case 2:var b=i.substr(i.length-1);if(a===f&amp;&amp;b===f){i+=a,h=1;break}if(a===e){i+=a,h=0;break}if(""\n""===a){d();break}if(""\r""===a)break;throw new Error(""CSVDataError: Illegal state [Row:""+c.state.rowNum+""]"");case 3:if(a===e){i+=a,h=0;break}if(""\n""===a){d();break}if(""\r""===a)break;if(a===f)throw new Error(""CSVDataError: Illegal quote [Row:""+c.state.rowNum+""]"");throw new Error(""CSVDataError: Illegal state [Row:""+c.state.rowNum+""]"");default:throw new Error(""CSVDataError: Unknown state [Row:""+c.state.rowNum+""]"")}}),""""!==i&amp;&amp;d(),g},parseEntry:function(b,c){function d(){if(c.onParseValue===a)g.push(i);else{var b=c.onParseValue(i,c.state);b!==!1&amp;&amp;g.push(b)}i="""",h=0,c.state.colNum++}var e=c.separator,f=c.delimiter;c.state.rowNum||(c.state.rowNum=1),c.state.colNum||(c.state.colNum=1);var g=[],h=0,i="""";if(!c.match){var j=RegExp.escape(e),k=RegExp.escape(f),l=/(D|S|\n|\r|[^DS\r\n]+)/,m=l.source;m=m.replace(/S/g,j),m=m.replace(/D/g,k),c.match=new RegExp(m,""gm"")}return b.replace(c.match,function(a){switch(h){case 0:if(a===e){i+="""",d();break}if(a===f){h=1;break}if(""\n""===a||""\r""===a)break;i+=a,h=3;break;case 1:if(a===f){h=2;break}i+=a,h=1;break;case 2:if(a===f){i+=a,h=1;break}if(a===e){d();break}if(""\n""===a||""\r""===a)break;throw new Error(""CSVDataError: Illegal State [Row:""+c.state.rowNum+""][Col:""+c.state.colNum+""]"");case 3:if(a===e){d();break}if(""\n""===a||""\r""===a)break;if(a===f)throw new Error(""CSVDataError: Illegal Quote [Row:""+c.state.rowNum+""][Col:""+c.state.colNum+""]"");throw new Error(""CSVDataError: Illegal Data [Row:""+c.state.rowNum+""][Col:""+c.state.colNum+""]"");default:throw new Error(""CSVDataError: Unknown State [Row:""+c.state.rowNum+""][Col:""+c.state.colNum+""]"")}}),d(),g}},helpers:{collectPropertyNames:function(a){var b,c,d=[];for(b in a)for(c in a[b])a[b].hasOwnProperty(c)&amp;&amp;d.indexOf(c)&lt;0&amp;&amp;""function""!=typeof a[b][c]&amp;&amp;d.push(c);return d}},toArray:function(c,d,e){d=d!==a?d:{};var f={};f.callback=e!==a&amp;&amp;""function""==typeof e?e:!1,f.separator=""separator""in d?d.separator:b.csv.defaults.separator,f.delimiter=""delimiter""in d?d.delimiter:b.csv.defaults.delimiter;var g=d.state!==a?d.state:{};d={delimiter:f.delimiter,separator:f.separator,onParseEntry:d.onParseEntry,onParseValue:d.onParseValue,state:g};var h=b.csv.parsers.parseEntry(c,d);return f.callback?void f.callback("""",h):h},toArrays:function(c,d,e){d=d!==a?d:{};var f={};f.callback=e!==a&amp;&amp;""function""==typeof e?e:!1,f.separator=""separator""in d?d.separator:b.csv.defaults.separator,f.delimiter=""delimiter""in d?d.delimiter:b.csv.defaults.delimiter;var g=[];return d={delimiter:f.delimiter,separator:f.separator,onPreParse:d.onPreParse,onParseEntry:d.onParseEntry,onParseValue:d.onParseValue,onPostParse:d.onPostParse,start:d.start,end:d.end,state:{rowNum:1,colNum:1}},d.onPreParse!==a&amp;&amp;d.onPreParse(c,d.state),g=b.csv.parsers.parse(c,d),d.onPostParse!==a&amp;&amp;d.onPostParse(g,d.state),f.callback?void f.callback("""",g):g},toObjects:function(c,d,e){d=d!==a?d:{};var f={};f.callback=e!==a&amp;&amp;""function""==typeof e?e:!1,f.separator=""separator""in d?d.separator:b.csv.defaults.separator,f.delimiter=""delimiter""in d?d.delimiter:b.csv.defaults.delimiter,f.headers=""headers""in d?d.headers:b.csv.defaults.headers,d.start=""start""in d?d.start:1,f.headers&amp;&amp;d.start++,d.end&amp;&amp;f.headers&amp;&amp;d.end++;var g=[],h=[];d={delimiter:f.delimiter,separator:f.separator,onPreParse:d.onPreParse,onParseEntry:d.onParseEntry,onParseValue:d.onParseValue,onPostParse:d.onPostParse,start:d.start,end:d.end,state:{rowNum:1,colNum:1},match:!1,transform:d.transform};var i={delimiter:f.delimiter,separator:f.separator,start:1,end:1,state:{rowNum:1,colNum:1}};d.onPreParse!==a&amp;&amp;d.onPreParse(c,d.state);var j=b.csv.parsers.splitLines(c,i),k=b.csv.toArray(j[0],d);g=b.csv.parsers.splitLines(c,d),d.state.colNum=1,d.state.rowNum=k?2:1;for(var l=0,m=g.length;m&gt;l;l++){for(var n=b.csv.toArray(g[l],d),o={},p=0;p&lt;k.length;p++)o[k[p]]=n[p];h.push(d.transform!==a?d.transform.call(a,o):o),d.state.rowNum++}return d.onPostParse!==a&amp;&amp;d.onPostParse(h,d.state),f.callback?void f.callback("""",h):h},fromArrays:function(c,d,e){d=d!==a?d:{};var f={};f.callback=e!==a&amp;&amp;""function""==typeof e?e:!1,f.separator=""separator""in d?d.separator:b.csv.defaults.separator,f.delimiter=""delimiter""in d?d.delimiter:b.csv.defaults.delimiter;var g,h,i,j,k="""";for(i=0;i&lt;c.length;i++){for(g=c[i],h=[],j=0;j&lt;g.length;j++){var l=g[j]===a||null===g[j]?"""":g[j].toString();l.indexOf(f.delimiter)&gt;-1&amp;&amp;(l=l.replace(f.delimiter,f.delimiter+f.delimiter));var m=""\n|\r|S|D"";m=m.replace(""S"",f.separator),m=m.replace(""D"",f.delimiter),l.search(m)&gt;-1&amp;&amp;(l=f.delimiter+l+f.delimiter),h.push(l)}k+=h.join(f.separator)+""\r\n""}return f.callback?void f.callback("""",k):k},fromObjects:function(c,d,e){d=d!==a?d:{};var f={};if(f.callback=e!==a&amp;&amp;""function""==typeof e?e:!1,f.separator=""separator""in d?d.separator:b.csv.defaults.separator,f.delimiter=""delimiter""in d?d.delimiter:b.csv.defaults.delimiter,f.headers=""headers""in d?d.headers:b.csv.defaults.headers,f.sortOrder=""sortOrder""in d?d.sortOrder:""declare"",f.manualOrder=""manualOrder""in d?d.manualOrder:[],f.transform=d.transform,""string""==typeof f.manualOrder&amp;&amp;(f.manualOrder=b.csv.toArray(f.manualOrder,f)),f.transform!==a){var g=c;c=[];var h;for(h=0;h&lt;g.length;h++)c.push(f.transform.call(a,g[h]))}var i=b.csv.helpers.collectPropertyNames(c);if(""alpha""===f.sortOrder&amp;&amp;i.sort(),f.manualOrder.length&gt;0){var j,k=[].concat(f.manualOrder);for(j=0;j&lt;i.length;j++)k.indexOf(i[j])&lt;0&amp;&amp;k.push(i[j]);i=k}var l,j,m,n,o=[];for(f.headers&amp;&amp;o.push(i),l=0;l&lt;c.length;l++){for(m=[],j=0;j&lt;i.length;j++)n=i[j],m.push(n in c[l]&amp;&amp;""function""!=typeof c[l][n]?c[l][n]:"""");o.push(m)}return b.csv.fromArrays(o,d,f.callback)}},b.csvEntry2Array=b.csv.toArray,b.csv2Array=b.csv.toArrays,b.csv2Dictionary=b.csv.toObjects,""undefined""!=typeof module&amp;&amp;module.exports&amp;&amp;(module.exports=b.csv)}.call(this);&#xD;&#xA;  &lt;/script&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",2801559,"",,"",,2016-08-01T00:32:54,"","",,3,,,
38711965,2,,38711854,2016-08-02T04:48:13,,3,,"<p>The Node <code>fs</code> module works with file paths, not URLs, so you need to pass a valid path to <code>fs.lstatSync</code>:</p>&#xA;&#xA;<pre><code>fs.lstatSync(`${__dirname}/../test/test.jpg`).isFile()&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-08-02T04:48:13,"","",,1,,,
38717648,2,,38698121,2016-08-02T10:14:09,,3,,"<p>In NodeJS you don't have to use the <code>file</code> protocol for reading files.</p>&#xA;&#xA;<p>You can get rid of the <code>""file://""</code> part and try read the <code>filePath</code> directly</p>&#xA;&#xA;<pre><code>let filePath = ""/home/mysystem/dev/myproject/sayHello.txt"";&#xA;let newFile = fs.readFileSync(filePath);&#xA;</code></pre>&#xA;",2739092,"",,"",,2016-08-02T10:14:09,"","",,0,,,
38743385,2,,38732244,2016-08-03T12:15:08,,3,,"<p>I have found the answer by myself.&#xA;To show the correct image in the second renderer window, I add a GET parameter to the URL which contains the path of the image.</p>&#xA;",6664824,"",,"",,2016-08-03T12:15:08,"","",,2,,,
38840632,2,,38758444,2016-08-09T01:18:35,,4,,"<p>Ok after trying and researching i've decided to package my application via programmatic API</p>&#xA;&#xA;<p>with this script i can achieve all what i want. hope this help someone with the same problem.</p>&#xA;&#xA;<pre><code>var packager = require('electron-packager');&#xA;var options = {&#xA;    'arch': 'ia32',&#xA;    'platform': 'win32',&#xA;    'dir': './',&#xA;    'app-copyright': 'Paulo Galdo',&#xA;    'app-version': '2.0.5',&#xA;    'asar': true,&#xA;    'icon': './app.ico',&#xA;    'name': 'TierraDesktop',&#xA;    'ignore': ['./releases', './.git'],&#xA;    'out': './releases',&#xA;    'overwrite': true,&#xA;    'prune': true,&#xA;    'version': '1.3.2',&#xA;    'version-string':{&#xA;      'CompanyName': 'Paulo Galdo',&#xA;      'FileDescription': 'Tierra de colores', /*This is what display windows on task manager, shortcut and process*/&#xA;      'OriginalFilename': 'TierraDesktop',&#xA;      'ProductName': 'Tierra de colores',&#xA;      'InternalName': 'TierraDesktop'&#xA;    }&#xA;};&#xA;packager(options, function done_callback(err, appPaths) {&#xA;    console.log(err);&#xA;    console.log(appPaths);&#xA;});&#xA;</code></pre>&#xA;",5697445,"",,"",,2016-08-09T01:18:35,"","",,0,,,
38887172,2,,38439854,2016-08-11T04:15:46,,5,,"<p>The problem is the unmatched node.js binary that is delivered by Electron and your version of node. The long answer is that you need to compile Electron and ZeroMQ with the same Node.js headers. Here is the response from Electron community <a href=""http://github.com/electron/electron/issues/6805"" rel=""nofollow noreferrer"">http://github.com/electron/electron/issues/6805</a>. There's a short answer now though!</p>&#xA;&#xA;<p>Use <a href=""https://github.com/zeromq/zeromq.js"" rel=""nofollow noreferrer""><code>zeromq</code></a> in place of <code>zmq</code> (same API). <a href=""https://github.com/zeromq/zeromq.js"" rel=""nofollow noreferrer""><code>zeromq</code></a> provides prebuilt binaries for electron and node.js for OS X, Windows, and macOS/OS X. After installing <code>zeromq</code>, rebuild for the version of electron you're using:</p>&#xA;&#xA;<pre><code>npm rebuild zeromq --runtime=electron --target=1.4.5&#xA;</code></pre>&#xA;&#xA;<p>Thanks to the zeromq.js team and have fun with ZeroMQ!</p>&#xA;",91813,"",700228,"",2016-12-13T23:04:21,2016-12-13T23:04:21,"","",,2,,,
38745742,2,,38715269,2016-08-03T13:58:13,,7,,"<p>The documentation isn't <em>terrifically</em> clear, but the intent is to show that the Nightmare options are passed to  <code>BrowserWindow</code>, effectively using the same options set.</p>&#xA;&#xA;<p>In other words,</p>&#xA;&#xA;<pre><code>const nightmare = new Nightmare({ show: show, height: 900});&#xA;</code></pre>&#xA;&#xA;<p>... should work.</p>&#xA;",1139700,"",,"",,2016-08-03T13:58:13,"","",,0,,,
38859855,2,,38252346,2016-08-09T20:29:02,,11,,"<p>You can also change </p>&#xA;&#xA;<pre><code>&lt;base href=""/""&gt;&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>&lt;base href=""./""&gt;&#xA;</code></pre>&#xA;",557360,"",,"",,2016-08-09T20:29:02,"","",,0,,,
38859135,2,,38858879,2016-08-09T19:40:03,,16,,"<p><code>prompt</code>, <code>confirm</code> and <code>alert</code> are functions which blocks the execution thread of the script until a user input and that's the reason electron team didn't supported it. Instead you can use some third party package for the same reason.</p>&#xA;&#xA;<p>Here are some packages which provides this functionality in async way</p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/smalltalk"" rel=""noreferrer"">https://www.npmjs.com/package/smalltalk</a></p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/vex-js"" rel=""noreferrer"">https://www.npmjs.com/package/vex-js</a></p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/dialogs"" rel=""noreferrer"">https://www.npmjs.com/package/dialogs</a></p>&#xA;",2610720,"",2610720,"",2016-11-24T11:36:43,2016-11-24T11:36:43,"","",,3,,,
47044915,2,,47044811,2017-10-31T21:38:31,,2,,"<p>Simply add <code>margin-left:auto</code> to the element like this :</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {&#xD;&#xA;  background-color: rgb(48, 58, 65);&#xD;&#xA;  margin: 0;&#xD;&#xA;  padding: 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#controlBar {&#xD;&#xA;  width: 100%;&#xD;&#xA;  height: 30px;&#xD;&#xA;  background-color: rgb(27, 42, 51)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#exit {&#xD;&#xA;  width: 15px;&#xD;&#xA;  height: 15px;&#xD;&#xA;  background-color: red;&#xD;&#xA;  border-radius: 100%;&#xD;&#xA;  margin-left: auto;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id='controlBar' style='-webkit-app-region:drag'&gt;&#xD;&#xA;  &lt;div id='exit'&gt;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Or you can make it <code>inline-block</code> and use <code>text-align :right</code> on its container like this :</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {&#xD;&#xA;  background-color: rgb(48, 58, 65);&#xD;&#xA;  margin: 0;&#xD;&#xA;  padding: 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#controlBar {&#xD;&#xA;  width: 100%;&#xD;&#xA;  height: 30px;&#xD;&#xA;  background-color: rgb(27, 42, 51);&#xD;&#xA;  text-align:right;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#exit {&#xD;&#xA;  width: 15px;&#xD;&#xA;  height: 15px;&#xD;&#xA;  background-color: red;&#xD;&#xA;  border-radius: 100%;&#xD;&#xA;  display:inline-block;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id='controlBar' style='-webkit-app-region:drag'&gt;&#xD;&#xA;  &lt;div id='exit'&gt;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Or use <code>float:right</code> like this :</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {&#xD;&#xA;  background-color: rgb(48, 58, 65);&#xD;&#xA;  margin: 0;&#xD;&#xA;  padding: 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#controlBar {&#xD;&#xA;  width: 100%;&#xD;&#xA;  height: 30px;&#xD;&#xA;  background-color: rgb(27, 42, 51);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#exit {&#xD;&#xA;  width: 15px;&#xD;&#xA;  height: 15px;&#xD;&#xA;  background-color: red;&#xD;&#xA;  border-radius: 100%;&#xD;&#xA;  float:right;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id='controlBar' style='-webkit-app-region:drag'&gt;&#xD;&#xA;  &lt;div id='exit'&gt;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Or <code>position:absolute</code> with <code>right:0</code> like this :</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {&#xD;&#xA;  background-color: rgb(48, 58, 65);&#xD;&#xA;  margin: 0;&#xD;&#xA;  padding: 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#controlBar {&#xD;&#xA;  width: 100%;&#xD;&#xA;  height: 30px;&#xD;&#xA;  background-color: rgb(27, 42, 51);&#xD;&#xA;  position:relative;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#exit {&#xD;&#xA;  width: 15px;&#xD;&#xA;  height: 15px;&#xD;&#xA;  background-color: red;&#xD;&#xA;  border-radius: 100%;&#xD;&#xA;  position:absolute;&#xD;&#xA;  right:0;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id='controlBar' style='-webkit-app-region:drag'&gt;&#xD;&#xA;  &lt;div id='exit'&gt;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",8620333,"",8620333,"",2017-10-31T21:55:16,2017-10-31T21:55:16,"","",,0,,,
47079733,2,,47077884,2017-11-02T16:03:53,,0,,<p>The reason this failed is because i forgot to switch the start script from using node. Requiring electron in a node results in the path to electron instead.</p>&#xA;,2080768,"",,"",,2017-11-02T16:03:53,"","",,0,,,
47095332,2,,47069721,2017-11-03T12:02:27,,0,,"<p>Yes you can do both those with electron by setting <code>frameless: true</code> and <code>transparent: true</code>.</p>&#xA;&#xA;<p><code>frameless: true</code> Gets rid of the window chrome (or the frame).</p>&#xA;&#xA;<p><code>transparent: true</code> Makes the window transparent.</p>&#xA;&#xA;<p>For your 2nd image all you need to do is put a transparent image in the html page and set: <code>frameless: true</code>, <code>transparent: true</code>.</p>&#xA;&#xA;<p>For your last image you would only need to set <code>frameless: true</code>.</p>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/frameless-window/"" rel=""nofollow noreferrer"">Frame less window docs</a></p>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/frameless-window/#transparent-window"" rel=""nofollow noreferrer"">Transparent window docs</a></p>&#xA;",6577664,"",,"",,2017-11-03T12:02:27,"","",,0,,,
47111571,2,,47109607,2017-11-04T14:04:04,,1,,"<p>This is what i did in order to solve the problem. Maybe it will help somebody else too.</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;var request = require('request');&#xA;&#xA;var req = request.post(uploadURL, function (err, resp, body) {&#xA;    if (err) {&#xA;      console.log('Error!');&#xA;    } else {&#xA;      console.log('URL: ' + body);&#xA;    }&#xA;  });&#xA;  var form = req.form();&#xA;  form.append('myfile', fs.createReadStream(""path\to\image.jpg""), {&#xA;    filename: ""image.jpg"",&#xA;    contentType: 'image/jpeg'&#xA;  });&#xA;</code></pre>&#xA;",7422179,"",,"",,2017-11-04T14:04:04,"","",,0,,,
47139707,2,,47137362,2017-11-06T14:55:28,,2,,"<p>All you need to do is listen to the <code>close</code> event like this:</p>&#xA;&#xA;<pre><code>var tray;&#xA;&#xA;mainWindow.on('close', function (evt) {&#xA;    evt.preventDefault();&#xA;    mainWindow.hide();&#xA;    tray = new Tray('./path/to/icon.png');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This will instead of closing the window hide the window and make a tray icon.</p>&#xA;&#xA;<p>But you probably want to open the window again if you double click the tray icon or something and for that you can do:</p>&#xA;&#xA;<pre><code>tray.on('double-click', function () {&#xA;    mainWindow.show();&#xA;    tray.destroy();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/tray/"" rel=""nofollow noreferrer"">Tray documentation</a></p>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/browser-window/#event-close"" rel=""nofollow noreferrer"">Close event</a></p>&#xA;",6577664,"",,"",,2017-11-06T14:55:28,"","",,0,,,
47149098,2,,47137288,2017-11-07T02:34:58,,0,,"<p>Via NodeJs in the main process (<a href=""https://nodejs.org/api/child_process.html"" rel=""nofollow noreferrer"">Child Process Documentation</a>) if you want a node process.</p>&#xA;&#xA;<p>If you want to add new Windows you can do so by defining BrowserWindow objects <code>const myNewWindow = new BrowserWindow();</code> from the main process, you can kill those windows via the <code>close</code> or <code>destroy</code> method on the object like <code>myNewWindow.close()</code></p>&#xA;",5115009,"",,"",,2017-11-07T02:34:58,"","",,0,,,
47164045,2,,46124442,2017-11-07T17:31:23,,1,,"<p>This happens because <code>BrowserWindow</code> has the <code>nodeIntergration</code> flag enabled by default. And this conflicts with the <code>RequireJS</code> implementation with which <code>Dropbox</code> was bundled.</p>&#xA;&#xA;<p>So the solution would be to disable <code>nodeIntergration</code> when creating the browser window:</p>&#xA;&#xA;<pre><code>const win = new electron.BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    webPreferences: {&#xA;        nodeIntegration: false&#xA;    }&#xA;});&#xA;&#xA;win.loadURL(link);&#xA;</code></pre>&#xA;&#xA;<p>Here's a small demo project:&#xA;<a href=""https://github.com/kenjiru/electron-dropbox-sample-app"" rel=""nofollow noreferrer"">https://github.com/kenjiru/electron-dropbox-sample-app</a></p>&#xA;",938494,"",,"",,2017-11-07T17:31:23,"","",,0,,,
47164119,2,,43049634,2017-11-07T17:35:11,,1,,"<p>This happens because <code>BrowserWindow</code> has the <code>nodeIntergration</code> flag enabled by default. And this conflicts with the <code>RequireJS</code> implementation with which <code>Dropbox</code> was bundled.</p>&#xA;&#xA;<p>Try to set <code>nodeIntergration</code> to false when creating a new <code>BrowserWindow</code>.</p>&#xA;&#xA;<p>For more details, please check out my answer from a similar question:&#xA;<a href=""https://stackoverflow.com/questions/46124442/dropbox-oauth-window-is-not-working/47164045#47164045"">Dropbox oauth window is not working</a></p>&#xA;",938494,"",,"",,2017-11-07T17:35:11,"","",,0,,,
47174279,2,,47149677,2017-11-08T07:51:11,,0,,"<p>Your code is right but you use jquery, which requires further operations to make it work in node.js:</p>&#xA;&#xA;<ul>&#xA;<li>install <a href=""https://www.npmjs.com/package/jquery"" rel=""nofollow noreferrer""><code>jquery</code></a> node module with <code>npm i jquery</code> (add <code>--save</code> flag to copy dependency to package.json if you plan to deploy it)</li>&#xA;<li>Add this line as the first line in your script </li>&#xA;</ul>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>window.$ = window.jQuery = require('jquery');&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><em>Further readings on this topic can be found:</em></p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://ourcodeworld.com/articles/read/202/how-to-include-and-use-jquery-in-electron-framework"" rel=""nofollow noreferrer"">https://ourcodeworld.com/articles/read/202/how-to-include-and-use-jquery-in-electron-framework</a></li>&#xA;<li><a href=""https://stackoverflow.com/questions/37745273/integrate-jquery-into-a-electron-app"">Integrate jQuery into a electron app</a></li>&#xA;</ul>&#xA;",2550156,"",,"",,2017-11-08T07:51:11,"","",,0,,,
47192591,2,,47184706,2017-11-09T01:47:33,,7,,"<p>You can use NodeJs to read/write the enviroment variables via <code>process.env</code> you can read all methods and possabilities on the <a href=""https://nodejs.org/api/process.html#process_process_env"" rel=""noreferrer"">process</a> documentation.</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<p><code>console.log(process.env.PATH)</code></p>&#xA;",5115009,"",,"",,2017-11-09T01:47:33,"","",,0,,,
47210948,2,,47210508,2017-11-09T20:27:43,,1,,"<p>This looks like case for state, whether it's component level or app level with redux.</p>&#xA;&#xA;<p>With component level state, you can use it with a function or method like so:</p>&#xA;&#xA;<pre><code>class MyComponent extends React.Component {&#xA;  state = { myInput: '' };&#xA;&#xA;  myMethod = () =&gt; {&#xA;  createMachine(this.state.myInput);&#xA;  };&#xA;&#xA;  render() {&#xA;    return (&#xA;      &lt;div&gt;&#xA;        Memory size (MB): &#xA;        &lt;TextField&#xA;          type=""text""&#xA;          placeholder=""4096""&#xA;          value={this.state.myInput} // This makes it a controlled input&#xA;          name=""memory""&#xA;          onChangeText={(text) =&gt; this.setState(state =&gt; ({ ...state, myInput: text }))}&#xA;        /&gt;&#xA;      &lt;/div&gt;&#xA;    )&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",5890903,"",,"",,2017-11-09T20:27:43,"","",,0,,,
47036146,2,,47025830,2017-10-31T13:02:10,,2,,"<p>Loading the svg as text into DOM element can look something like this</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow } = require('electron')&#xA;const path = require('path')&#xA;const fs = require('fs')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  const win = new BrowserWindow()&#xA;  win.loadURL(path.join(__dirname, 'renderer.html'))&#xA;  win.webContents.on('dom-ready', () =&gt; {&#xA;    fs.readFile(path.join(__dirname, 'myimage.svg'), 'utf8', (err, data) =&gt; {&#xA;      if (err) throw err&#xA;      win.webContents.executeJavaScript(`&#xA;        var doc = new DOMParser().parseFromString(&#xA;          '${data}',&#xA;          'application/xml')&#xA;        var svgHolder = document.getElementById('svgtest') // is just a &lt;div&gt;&#xA;        svgHolder.appendChild(svgHolder.ownerDocument.importNode(doc.documentElement, true))&#xA;      `)&#xA;    })&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",2550156,"",,"",,2017-10-31T13:02:10,"","",,1,,,
47129252,2,,47129188,2017-11-06T03:18:28,,0,,"<p>After a quick Google search I saw <a href=""https://www.npmjs.com/package/html-to-text"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/html-to-text</a> which looks like it probably could do what you want and it is in Javascript :)</p>&#xA;&#xA;<p>I have not actually tried it myself, but I hope it works well for you.</p>&#xA;",3092540,"",,"",,2017-11-06T03:18:28,"","",,1,,,
47133402,2,,47132925,2017-11-06T09:17:22,,0,,"<p>'ES7' is ambiguous and technically incorrect term, because it colloqually referred to proposals that weren't included into ES6 (currently as ES.next), but also had referred to ES2016.</p>&#xA;&#xA;<p>Package description <a href=""http://][1]"" rel=""nofollow noreferrer"">refers to ES2016</a>. While decorators are not a part of existing standards and supported in Babel via <a href=""https://babeljs.io/docs/plugins/transform-decorators/"" rel=""nofollow noreferrer"">a plugin</a>.</p>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-compile#how-do-i-set-up-babel--less--whatever-the-way-i-want"" rel=""nofollow noreferrer"">The package</a> explains that it respects user <code>.babelrc</code> file, so it should contain <code>transform-decorators</code> or <code>transform-decorators-legacy</code> in <code>presets</code> section, and respective Babel plugin should be installed.</p>&#xA;",3731501,"",,"",,2017-11-06T09:17:22,"","",,1,,,
47147898,2,,47108588,2017-11-07T00:07:20,,3,,"<p>You don't need Babel if you only want features up to ES7 in electron. You have two processes going on the main process and the render process. </p>&#xA;&#xA;<p>Main Process:</p>&#xA;&#xA;<ul>&#xA;<li>Uses node (Current node version v7.9.0 on electron v1.7.x)</li>&#xA;<li>Support ES6/ES7 with 99% coverage, the exceptions are:&#xA;&#xA;<ul>&#xA;<li>RegExp.prototype.compile does not return this</li>&#xA;<li>Symbol.toStringTag does not affect existing built-ins</li>&#xA;<li>Array.prototype.values (No one supports this anyway)</li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p>Render process:</p>&#xA;&#xA;<ul>&#xA;<li>Uses chromium (Current chromium version is 58)</li>&#xA;<li>Supports ES6 99% and ES7 with ~85% coverage, you can increase the support by enabling the experimatal features flag via <code>new BrowserWindow({ webPreferences: { experimentalFeatures: true } })</code>.</li>&#xA;</ul>&#xA;&#xA;<p>Be aware that I would encourage you to use the same version of node that electron uses for development, it will prevent incompatibility issues. you can check this by viewing the <code>.node-version</code> file in the electron repository. At the current version this would be v7.9.0.</p>&#xA;&#xA;<p>There are still valid points to use BableJs if you want to use even newer functions some operators like the spread operator <code>...</code> nearly all of my projects still use babel with the 'Stage 0' preset for that reason.</p>&#xA;&#xA;<p>Some good lists for checking the supported ES spec and methods</p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://kangax.github.io/compat-table/es2016plus/#chrome60"" rel=""nofollow noreferrer"">Chrome support table</a></li>&#xA;<li><a href=""http://node.green/"" rel=""nofollow noreferrer"">Node support table</a></li>&#xA;</ul>&#xA;",5115009,"",5115009,"",2017-11-07T00:31:03,2017-11-07T00:31:03,"","",,1,,,
47237863,2,,46857534,2017-11-11T12:27:03,,2,,"<p>I understand are you asking how to tell electron-forge which directory to find your source files in for packaging the app.</p>&#xA;&#xA;<p>If so, see: <a href=""https://github.com/electron-userland/electron-packager/blob/master/docs/api.md"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-packager/blob/master/docs/api.md</a></p>&#xA;&#xA;<p>where it describes the options of the </p>&#xA;&#xA;<p><code>""config"": {&#xA;    ""forge"": {&#xA;</code></p>&#xA;&#xA;<p>object in your package.json file </p>&#xA;&#xA;<p>inside they there is this package config object:</p>&#xA;&#xA;<pre><code>  ""electronPackagerConfig"": {&#xA;    ""dir"": ""./src"",&#xA;</code></pre>&#xA;&#xA;<p>where you can specify your source folder.</p>&#xA;&#xA;<p>Also, BTW: there you can specify files/file-regexs to be ignored in packaging:</p>&#xA;&#xA;<pre><code>    ""ignore"": ["".idea"", "".gitignore""]&#xA;</code></pre>&#xA;",573149,"",,"",,2017-11-11T12:27:03,"","",,1,,,
47017404,2,,47015705,2017-10-30T14:12:25,,0,,<p>For me it was the same but I needed to save settings about the window so I made a <code>settings.js</code> file and stored my settings in there.</p>&#xA;&#xA;<p>For you your settings file would contain something like this:</p>&#xA;&#xA;<pre><code>exports.machineType = 'A';&#xA;</code></pre>&#xA;&#xA;<p>And you would get it in your app like this:</p>&#xA;&#xA;<pre><code>var settings    = require('./settings.js');&#xA;var machineType = settings.machineType;&#xA;&#xA;if (machineType == 'A') {&#xA;    // Do things for machine type A.&#xA;} else {&#xA;    // Do things for machine type B.&#xA;}&#xA;</code></pre>&#xA;,6577664,"",,"",,2017-10-30T14:12:25,"","",,2,,,
47073260,2,,47063878,2017-11-02T10:40:05,,2,,"<p>Unfortunately setting <code>-webkit-app-region: drag;</code> disables all click and mouse events because it's treated as a title-bar so you can't change the cursor.</p>&#xA;&#xA;<p>I would include where I read that but I can't find it anymore.</p>&#xA;&#xA;<p>See:</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/1354"" rel=""nofollow noreferrer"">#1354</a> -webkit-app-region: drag eats all click events</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/8730"" rel=""nofollow noreferrer"">#8730</a> Frameless Electron App not work css cursor:pointer</p>&#xA;",6577664,"",,"",,2017-11-02T10:40:05,"","",,2,,,
47080670,2,,47078386,2017-11-02T16:53:47,,1,,"<p>I would suggest using the <a href=""https://github.com/mattdesl/electron-canvas-to-buffer"" rel=""nofollow noreferrer""><code>electron-canvas-to-buffer</code></a> package  and depending on the users export choice, create two methods and use electron dialog's <a href=""https://github.com/electron/electron/blob/master/docs/api/dialog.md"" rel=""nofollow noreferrer""><code>filter</code></a> to save accordingly.</p>&#xA;&#xA;<p>For the pdf I used <a href=""https://github.com/MrRio/jsPDF"" rel=""nofollow noreferrer""><code>jspdf</code></a> package. This will save the file as whatever filename you specify. Also I added a snippet to paint the canvas background white to avoid black backgrounds.</p>&#xA;&#xA;<p>Here is a simple example</p>&#xA;&#xA;<pre><code>var canvasBuffer = require('electron-canvas-to-buffer');&#xA;var fs = require('fs');&#xA;var jsPDF = require('jspdf');&#xA;&#xA;// your canvas drawing&#xA;var canvas = document.createElement('canvas');&#xA;var context = canvas.getContext('2d');&#xA;// painting the canvas white to prevent black background&#xA;context.clearRect(0, 0, canvas.width, canvas.height);&#xA;context.fillStyle = '#fff';&#xA;context.fillRect(0, 0, canvas.width, canvas.height);&#xA;// drawing&#xA;context.fillStyle = 'blue';&#xA;context.fillRect(0, 0, 50, 50);&#xA;context.fillStyle = 'red';&#xA;context.fillRect(50, 10, 30, 20);&#xA;&#xA;&#xA;// PNG&#xA;function savePNG() {&#xA;    var buffer = canvasBuffer(canvas, 'image/png');&#xA;    dialog.showSaveDialog({&#xA;        filters: [{&#xA;            name: 'png',&#xA;            extensions: ['png']&#xA;        }]&#xA;    }, function (fileName) {&#xA;        if (fileName === undefined) return;&#xA;        fs.writeFile(fileName, buffer, function (err) {});&#xA;    });&#xA;}&#xA;// JPG&#xA;function saveJPG() {&#xA;  var buffer = canvasBuffer(canvas, 'image/jpg');&#xA;  dialog.showSaveDialog(&#xA;    {&#xA;      filters: [&#xA;        {&#xA;          name: 'jpg',&#xA;          extensions: ['jpg'],&#xA;        },&#xA;      ],&#xA;    },&#xA;    (fileName) =&gt; {&#xA;      if (fileName === undefined) return;&#xA;      fs.writeFile(fileName, buffer, (err) =&gt; {});&#xA;    },&#xA;  );&#xA;}&#xA;// PDF&#xA;function savePDF() {&#xA;  // only jpeg is supported by jsPDF&#xA;  let imgData = canvas.toDataURL('image/jpeg', 1.0);&#xA;  let pdf = new jsPDF();&#xA;  pdf.addImage(imgData, 'JPEG', 0, 0);&#xA;  pdf.save('test.pdf');&#xA;}&#xA;</code></pre>&#xA;",4104766,"",4104766,"",2017-11-03T14:47:08,2017-11-03T14:47:08,"","",,2,,,
47114698,2,,47114603,2017-11-04T19:25:14,,1,,"<pre><code>var sampleObject = { Input1: Input1, Input2: Input2 }&#xA;</code></pre>&#xA;&#xA;<p>Should solve your issue. </p>&#xA;",1068746,"",,"",,2017-11-04T19:25:14,"","",,2,,,
47135723,2,,47134835,2017-11-06T11:17:26,,0,,"<p>does it match the behaviour of the infamous ""webrtc osx audio bug"" described <a href=""https://bugs.chromium.org/p/webrtc/issues/detail?id=4799#c133"" rel=""nofollow noreferrer"">here</a>?</p>&#xA;",4352772,"",,"",,2017-11-06T11:17:26,"","",,2,,,
47123891,2,,47059589,2017-11-05T16:28:16,,1,,"<p>I have built a multi-window (multi-page) Electron app using both Bootstrap and Angular and had no issues.</p>&#xA;&#xA;<p>You can get Typescript definitions for React / Bootstrap <a href=""https://github.com/react-bootstrap/react-bootstrap-typescript"" rel=""nofollow noreferrer"">here</a> or (for Bootstrap) <a href=""https://www.npmjs.com/package/@types/bootstrap"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;&#xA;<p>A tutorial for using Typescript with Angular can be found <a href=""https://www.sitepoint.com/getting-started-with-angular-2-using-typescript/"" rel=""nofollow noreferrer"">here</a>.  It is a little dated but should be a good starting point.</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/38534276/how-to-use-bootstrap-4-in-angular-2"">This question</a> in stackoverflow also has some useful information that you may find helpful.</p>&#xA;",2079373,"",2079373,"",2017-11-05T16:46:19,2017-11-05T16:46:19,"","",,4,,,
47129082,2,,47128378,2017-11-06T02:55:43,,0,,"<p>No, it does not make any difference in performance. Both examples require the whole <code>electron</code> module and all its dependencies.</p>&#xA;&#xA;<p>The only difference is that <code>Menu</code> is not in scope in your module, and that one variable less will be created in memory.</p>&#xA;",1048572,"",,"",,2017-11-06T02:55:43,"","",,4,,,
47162952,2,,47160857,2017-11-07T16:32:24,,3,,"<p><code>window.show()</code> will always focus the new Window, you have to use <code>window.showInactive()</code> in order <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winshowinactive"" rel=""nofollow noreferrer"">to open a window that is not focused.</a> </p>&#xA;",5115009,"",5115009,"",2017-11-08T01:09:18,2017-11-08T01:09:18,"","",,4,,,
47195047,2,,47194786,2017-11-09T06:13:45,,0,,"<p>The problem is here <code>var scriptFile = exec('sh absolutePath');</code>&#xA;The <code>exec</code> function takes a <code>string</code> as an argument. So in your case it is literally executing <code>absolutePath</code> instead of the value tha <code>absolutePath</code> has.&#xA;Try this, rather</p>&#xA;&#xA;<pre><code>var toExec = 'sh ' + absolutePath;&#xA;var scriptFile = exec(toExec);&#xA;</code></pre>&#xA;&#xA;<p>Also, should this not work, then the problem is with <code>sh</code>. You do not need it, as the exec function will simply execute whatever path you provide.</p>&#xA;",6219957,"",6219957,"",2017-11-09T07:31:56,2017-11-09T07:31:56,"","",,4,,,
47210923,2,,47210665,2017-11-09T20:25:57,,1,,"<p><code>DeleteRegKey</code> deletes keys but I'm guessing your run entry is actually <a href=""https://blogs.msdn.microsoft.com/oldnewthing/20090204-00/?p=19263"" rel=""nofollow noreferrer"">a value</a>. Use <code>DeleteRegValue</code> to delete values:</p>&#xA;&#xA;<pre><code>DeleteRegValue HKCU ""Software\Microsoft\Windows\CurrentVersion\Run"" ""electron.app my app""&#xA;</code></pre>&#xA;&#xA;<p>Why are you using SHCTX? Use HKCU if you know it is always written to HKEY_CURRENT_USER.</p>&#xA;",3501,"",,"",,2017-11-09T20:25:57,"","",,4,,,
47017459,2,,47017260,2017-10-30T14:15:10,,2,,"<p>There is the <code>silent</code> option of <a href=""https://electron.atom.io/docs/api/web-contents/#contentsprintoptions"" rel=""nofollow noreferrer""><code>BrowserWindow.webContents.print</code></a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Prints window’s web page. When <code>silent</code> is set to <code>true</code>, Electron will pick the system’s default printer if <code>deviceName</code> is empty and the default settings for printing.</p>&#xA;  &#xA;  <p>Calling <code>window.print()</code> in web page is equivalent to calling <code>webContents.print({silent: false, printBackground: false, deviceName: ''})</code>.</p>&#xA;</blockquote>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>let win = new BrowserWindow(params);&#xA;&#xA;win.webContents.print({silent: true});&#xA;</code></pre>&#xA;",5108796,"",,"",,2017-10-30T14:15:10,"","",,5,,,
28791266,2,,28763474,2015-03-01T07:39:42,,0,,"<p>I try to make it, when I open usual window and try to call <code>win.eval</code> how it says in <a href=""https://github.com/nwjs/nw.js/wiki/Window"" rel=""nofollow"">documentation</a> it don't work. But I can access all child window objects.</p>&#xA;&#xA;<p>I find there is option: <a href=""https://github.com/nwjs/nw.js/wiki/Manifest-format#inject-js-start--inject-js-end"" rel=""nofollow"">inject-js-end</a>, it allows us to inject local file in page.</p>&#xA;&#xA;<p>This example of file I will inject:</p>&#xA;&#xA;<pre><code>// checker.js&#xA;// this file will run in newly opened page.&#xA;console.log(""checker loaded"");&#xA;window.myChecker = {&#xA;  listeners: [],&#xA;&#xA;  done: function (callback) {&#xA;    if (this.result) callback(this.result);&#xA;    else this.listeners.push(callback);&#xA;  },&#xA;&#xA;  start: function () {&#xA;    this.result = {a: 123, title: document.title};&#xA;    this.listeners.forEach(function (fn) { fn(this.result); });&#xA;  }&#xA;};&#xA;&#xA;myChecker.start();&#xA;</code></pre>&#xA;&#xA;<p>Then we can open any url and inject our checker:</p>&#xA;&#xA;<pre><code>var win = gui.Window.open('https://github.com', {&#xA;  show: true, // make it false to make window hidden&#xA;  ""inject-js-end"": ""./checker.js""&#xA;});&#xA;&#xA;win.on('loaded', function () {&#xA;  console.log(""window loaded"");&#xA;  win.window.myChecker.done(function (result) {&#xA;    console.log(""Result is"", result);&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You should be able to see something like:</p>&#xA;&#xA;<pre><code>[87518:0301/142832:INFO:CONSOLE(1)] """"checker loaded"""", source:  (1)&#xA;[87518:0301/142835:INFO:CONSOLE(107)] """"window loaded"""", source: file:///my_path/index.js (107)&#xA;[87518:0301/142835:INFO:CONSOLE(109)] """"Result is"" {""a"":123,""title"":""GitHub \u00B7 Build software better, together.""}"", source: file:///my_path/index.js (109)&#xA;</code></pre>&#xA;&#xA;<p>Probably you want to add jQuery in <code>checker.js</code> and do some different things, so better make it return result asynchronous.</p>&#xA;&#xA;<p>I use ""inject-js-end"" to make sure all content is ready at time I run checker, it also can work with ""inject-js-start"".</p>&#xA;",1083428,"",,"",,2015-03-01T07:39:42,"","",,0,,,
28844745,2,,27154941,2015-03-04T00:40:04,,0,,"<p>I ended up writing a module to do this: <a href=""https://github.com/maxkorp/which-native-nodish"" rel=""nofollow"">https://github.com/maxkorp/which-native-nodish</a> (also supports atom-shell and the renamed nw.js)</p>&#xA;&#xA;<p>The gist is that you start at the parent directory to the module, and keep going up as long as you are a child of a node_modules folder which is a child of a folder with a package.json. Once at the root level, check the engines property in the package.json for an atom-shell, node-webkit or nwjs property. Not guaranteed to work (The farthest ancestor project must specify if its using a node-ish engine in this way), but it's better than nothing, and the only out of the box solution I've seen. </p>&#xA;",2406479,"",,"",,2015-03-04T00:40:04,"","",,0,,,
28876098,2,,28874079,2015-03-05T10:52:27,,0,,"<p>I finally found a way by using <a href=""https://github.com/nwjs/nw.js/wiki/Window#document-end"" rel=""nofollow""><code>document-end</code></a> listener which is fired when window or a child iframe is loaded (just before the onload event).</p>&#xA;&#xA;<pre><code>win.on('document-end', function(frame) {&#xA;    if(frame != null){ // If frame is not the window but an Iframe&#xA;        frame.contentDocument.body.addEventListener('keydown', yourScript);&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Maybe not the proper way to do it but it works.</p>&#xA;",2765126,"",,"",,2015-03-05T10:52:27,"","",,0,,,
28813500,2,,26548831,2015-03-02T15:31:43,,1,,"<p>I ran into the same problem. weirdly enough, using jquery helped me fix it. I have an html page with an image tag with id ""close"". If I tried using document.getElementById('close') as is, it would always return null. So I wrapped it inside jquery like this:</p>&#xA;&#xA;<pre><code>var nw = require('nw.gui');&#xA;var win = nw.Window.get();&#xA;&#xA;&#xA;$(function(){&#xA;    var close = document.getElementById('close');&#xA;    close.onclick = function(){&#xA;        win.close();&#xA;    };&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>It started working immediately. Very confused about why nwjs behaves like this.</p>&#xA;",3282103,"",3282103,"",2015-03-02T15:56:24,2015-03-02T15:56:24,"","",,0,,,
28932889,2,,28932641,2015-03-08T22:54:03,,1,,"<p>node-webkit (nw.js) has support of internal and third party modules for node.js. &#xA;You could install any npm and use it in nw.js apps. There is guide how to do that  in official nw.js documentation: <a href=""https://github.com/nwjs/nw.js/wiki/Using-Node-modules"" rel=""nofollow"">Using Node modules</a></p>&#xA;&#xA;<p>Depending of what you need (e.g. storing user credentials in external database or locally in files or database) you should pick solution that suits your needs.</p>&#xA;&#xA;<p>There are a lot of npm packages to access databases which you could find in <a href=""https://www.npmjs.com/"" rel=""nofollow"">nmp repository</a></p>&#xA;",1119072,"",,"",,2015-03-08T22:54:03,"","",,3,,,
28935618,2,,28933580,2015-03-09T05:13:25,,1,,"<p>This <strong>IS</strong> a nw.js limitation.</p>&#xA;&#xA;<p>The tooltip is generated by <strong>Chrome</strong> the browser in your former image, but nw.js does not have the same version as Chrome as you are using, so its support for HTML5 stuff like this is expected to be sub-par.</p>&#xA;&#xA;<p>I can't find any references for this claim, but this is most likely what's happening.</p>&#xA;",1937836,"",,"",,2015-03-09T05:13:25,"","",,3,,,
28786037,2,,28785127,2015-02-28T19:41:12,,2,,"<p>The <code>protractor</code> command line script <a href=""https://github.com/angular/protractor/blob/master/bin/protractor"" rel=""nofollow"">boils down to</a> invoking <a href=""https://github.com/angular/protractor/blob/master/lib/cli.js"" rel=""nofollow"">lib/cli.js</a> which mostly deals with parsing commmand-line arguments and then invokes <a href=""https://github.com/angular/protractor/blob/master/lib/launcher.js"" rel=""nofollow"">lib/launcher.js</a> to actually start protractor.</p>&#xA;&#xA;<p>I don't think any special concessions have been made in these files to be directly invoked programmatically, but I don't see any particular hurdles either.</p>&#xA;",960524,"",,"",,2015-02-28T19:41:12,"","",,0,,,
28786679,2,,28773947,2015-02-28T20:43:40,,2,,"<p>While I wasn't able to get webpack working, I was able to get ES6 + JSX working by using <a href=""http://babeljs.io/docs/usage/require/"" rel=""nofollow""><code>require('babel/register')</code></a>:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;!-- index.html --&gt;&#xA;&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;  &lt;title&gt;Hello World!&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;  &lt;main&gt;&lt;/main&gt;&#xA;  &lt;script&gt;&#xA;    require('babel/register');&#xA;    require('./js/app');&#xA;  &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// ./js/app.js&#xA;&#xA;import React from 'react';&#xA;&#xA;React.render(&#xA;  &lt;span&gt;Hello World!&lt;/span&gt;,&#xA;  document.querySelector('main')&#xA;);&#xA;</code></pre>&#xA;",1626478,"",1626478,"",2015-07-11T16:32:11,2015-07-11T16:32:11,"","",,0,,,
28854017,2,,28844052,2015-03-04T12:03:36,,2,,"<p>You need to make sure you set correct size on the node you use for ace and to call <code>editor.resize()</code> when layout changes. Like this:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN"" ""http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd""&gt;&#xD;&#xA;&lt;html xmlns=""http://www.w3.org/1999/xhtml"" style=""height: 100%""&gt;&#xD;&#xA;&lt;head&gt;&#xD;&#xA;	&lt;meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" /&gt;&#xD;&#xA;	&lt;meta name=""language"" content=""en"" /&gt;&#xD;&#xA;&#xD;&#xA;	&lt;title&gt;Complex Layout Demo&lt;/title&gt;&#xD;&#xA;&#xD;&#xA;	&lt;link href=""//code.jquery.com/ui/1.11.2/themes/smoothness/jquery-ui.min.css"" rel=""stylesheet"" type=""text/css"" /&gt;&#xD;&#xA;&lt;script src=""//code.jquery.com/jquery-1.11.0.min.js""&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=""//code.jquery.com/ui/1.11.2/jquery-ui.min.js""&gt;&lt;/script&gt;&#xD;&#xA;    &lt;meta charset=""utf-8""&gt;&#xD;&#xA;    &lt;title&gt;JS Bin&lt;/title&gt;&#xD;&#xA;  &lt;link rel=""stylesheet"" type=""text/css"" href=""http://layout.jquery-dev.com/demos/css/complex.css""&gt;&#xD;&#xA;  	&lt;script type=""text/javascript"" src=""http://layout.jquery-dev.com/lib/js/jquery-latest.js""&gt;&lt;/script&gt;&#xD;&#xA;	&lt;script type=""text/javascript"" src=""http://layout.jquery-dev.com/lib/js/jquery-ui-latest.js""&gt;&lt;/script&gt;&#xD;&#xA;	&lt;script type=""text/javascript"" src=""http://layout.jquery-dev.com/lib/js/jquery.layout-latest.js""&gt;&lt;/script&gt;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;    &lt;script src=""http://ajaxorg.github.io/ace-builds/src/ace.js""&gt;&lt;/script&gt;&#xD;&#xA;    &lt;script src=""http://ajaxorg.github.io/ace-builds/src/ext-language_tools.js""&gt;&lt;/script&gt;&#xD;&#xA;    &lt;style&gt;&#xD;&#xA;        #editor { position: absolute; top: 50px; left: 0; right: 0; bottom: 0;}&#xD;&#xA;    &lt;/style&gt;&#xD;&#xA;&#xD;&#xA;	&lt;script type=""text/javascript""&gt;&#xD;&#xA;/*&#xD;&#xA; * complex.html&#xD;&#xA; *&#xD;&#xA; * This is a demonstration page for the jQuery layout widget&#xD;&#xA; *&#xD;&#xA; *	NOTE: For best code readability, view this with a fixed-space font and tabs equal to 4-chars&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;	var outerLayout, innerLayout;&#xD;&#xA;&#xD;&#xA;	/*&#xD;&#xA;	*#######################&#xD;&#xA;	*     ON PAGE LOAD&#xD;&#xA;	*#######################&#xD;&#xA;	*/&#xD;&#xA;	$(function(){&#xD;&#xA;		// create the OUTER LAYOUT&#xD;&#xA;		outerLayout = $(""body"").layout( layoutSettings_Outer );&#xD;&#xA;      &#xD;&#xA;      var editor = window.editor = ace.edit(""editor"");&#xD;&#xA;        $(""#tabs"").tabs();&#xD;&#xA;&#xD;&#xA;		//editor.setTheme(""ace/theme/chrome"");&#xD;&#xA;		editor.setTheme(""ace/theme/monokai"");&#xD;&#xA;		editor.getSession().setMode(""ace/mode/lua"");&#xD;&#xA;&#xD;&#xA;		/*******************************&#xD;&#xA;		 ***  CUSTOM LAYOUT BUTTONS  ***&#xD;&#xA;		 *******************************&#xD;&#xA;		 *&#xD;&#xA;		 * Add SPANs to the east/west panes for customer ""close"" and ""pin"" buttons&#xD;&#xA;		 *&#xD;&#xA;		 * COULD have hard-coded span, div, button, image, or any element to use as a 'button'...&#xD;&#xA;		 * ... but instead am adding SPANs via script - THEN attaching the layout-events to them&#xD;&#xA;		 *&#xD;&#xA;		 * CSS will size and position the spans, as well as set the background-images&#xD;&#xA;		 */&#xD;&#xA;&#xD;&#xA;		// BIND events to hard-coded buttons in the NORTH toolbar&#xD;&#xA;		outerLayout.addToggleBtn( ""#tbarToggleNorth"", ""north"" );&#xD;&#xA;		outerLayout.addOpenBtn( ""#tbarOpenSouth"", ""south"" );&#xD;&#xA;		outerLayout.addCloseBtn( ""#tbarCloseSouth"", ""south"" );&#xD;&#xA;		outerLayout.addPinBtn( ""#tbarPinWest"", ""west"" );&#xD;&#xA;		outerLayout.addPinBtn( ""#tbarPinEast"", ""east"" );&#xD;&#xA;&#xD;&#xA;		// save selector strings to vars so we don't have to repeat it&#xD;&#xA;		// must prefix paneClass with ""body &gt; "" to target ONLY the outerLayout panes&#xD;&#xA;		var westSelector = ""body &gt; .ui-layout-west""; // outer-west pane&#xD;&#xA;		var eastSelector = ""body &gt; .ui-layout-east""; // outer-east pane&#xD;&#xA;&#xD;&#xA;		 // CREATE SPANs for pin-buttons - using a generic class as identifiers&#xD;&#xA;		$(""&lt;span&gt;&lt;/span&gt;"").addClass(""pin-button"").prependTo( westSelector );&#xD;&#xA;		$(""&lt;span&gt;&lt;/span&gt;"").addClass(""pin-button"").prependTo( eastSelector );&#xD;&#xA;		// BIND events to pin-buttons to make them functional&#xD;&#xA;		outerLayout.addPinBtn( westSelector +"" .pin-button"", ""west"");&#xD;&#xA;		outerLayout.addPinBtn( eastSelector +"" .pin-button"", ""east"" );&#xD;&#xA;&#xD;&#xA;		 // CREATE SPANs for close-buttons - using unique IDs as identifiers&#xD;&#xA;		$(""&lt;span&gt;&lt;/span&gt;"").attr(""id"", ""west-closer"" ).prependTo( westSelector );&#xD;&#xA;		$(""&lt;span&gt;&lt;/span&gt;"").attr(""id"", ""east-closer"").prependTo( eastSelector );&#xD;&#xA;		// BIND layout events to close-buttons to make them functional&#xD;&#xA;		outerLayout.addCloseBtn(""#west-closer"", ""west"");&#xD;&#xA;		outerLayout.addCloseBtn(""#east-closer"", ""east"");&#xD;&#xA;&#xD;&#xA;		// DEMO HELPER: prevent hyperlinks from reloading page when a 'base.href' is set&#xD;&#xA;		$(""a"").each(function () {&#xD;&#xA;			var path = document.location.href;&#xD;&#xA;			if (path.substr(path.length-1)==""#"") path = path.substr(0,path.length-1);&#xD;&#xA;			if (this.href.substr(this.href.length-1) == ""#"") this.href = path +""#"";&#xD;&#xA;		});&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;	/*&#xD;&#xA;	*#######################&#xD;&#xA;	* OUTER LAYOUT SETTINGS&#xD;&#xA;	*#######################&#xD;&#xA;	*&#xD;&#xA;	* This configuration illustrates how extensively the layout can be customized&#xD;&#xA;	* ALL SETTINGS ARE OPTIONAL - and there are more available than shown below&#xD;&#xA;	*&#xD;&#xA;	* These settings are set in 'sub-key format' - ALL data must be in a nested data-structures&#xD;&#xA;	* All default settings (applied to all panes) go inside the defaults:{} key&#xD;&#xA;	* Pane-specific settings go inside their keys: north:{}, south:{}, center:{}, etc&#xD;&#xA;	*/&#xD;&#xA;	var layoutSettings_Outer = {&#xD;&#xA;		name: ""outerLayout"" // NO FUNCTIONAL USE, but could be used by custom code to 'identify' a layout&#xD;&#xA;		// options.defaults apply to ALL PANES - but overridden by pane-specific settings&#xD;&#xA;	,	defaults: {&#xD;&#xA;			size:					""auto""&#xD;&#xA;		,	minSize:				50&#xD;&#xA;		,	paneClass:				""pane"" 		// default = 'ui-layout-pane'&#xD;&#xA;		,	resizerClass:			""resizer""	// default = 'ui-layout-resizer'&#xD;&#xA;		,	togglerClass:			""toggler""	// default = 'ui-layout-toggler'&#xD;&#xA;		,	buttonClass:			""button""	// default = 'ui-layout-button'&#xD;&#xA;		,	contentSelector:		"".content""	// inner div to auto-size so only it scrolls, not the entire pane!&#xD;&#xA;		,	contentIgnoreSelector:	""span""		// 'paneSelector' for content to 'ignore' when measuring room for content&#xD;&#xA;		,	togglerLength_open:		35			// WIDTH of toggler on north/south edges - HEIGHT on east/west edges&#xD;&#xA;		,	togglerLength_closed:	35			// ""100%"" OR -1 = full height&#xD;&#xA;		,	hideTogglerOnSlide:		true		// hide the toggler when pane is 'slid open'&#xD;&#xA;		,	togglerTip_open:		""Close This Pane""&#xD;&#xA;		,	togglerTip_closed:		""Open This Pane""&#xD;&#xA;		,	resizerTip:				""Resize This Pane""&#xD;&#xA;		//	effect defaults - overridden on some panes&#xD;&#xA;		,	fxName:					""slide""		// none, slide, drop, scale&#xD;&#xA;		,	fxSpeed_open:			750&#xD;&#xA;		,	fxSpeed_close:			1500&#xD;&#xA;		,	fxSettings_open:		{ easing: ""easeInQuint"" }&#xD;&#xA;		,	fxSettings_close:		{ easing: ""easeOutQuint"" }&#xD;&#xA;	}&#xD;&#xA;	,	north: {&#xD;&#xA;			spacing_open:			1			// cosmetic spacing&#xD;&#xA;		,	togglerLength_open:		0			// HIDE the toggler button&#xD;&#xA;		,	togglerLength_closed:	-1			// ""100%"" OR -1 = full width of pane&#xD;&#xA;		,	resizable: 				false&#xD;&#xA;		,	slidable:				false&#xD;&#xA;		//	override default effect&#xD;&#xA;		,	fxName:					""none""&#xD;&#xA;		}&#xD;&#xA;	,	south: {&#xD;&#xA;			maxSize:				200&#xD;&#xA;		,	size:					200&#xD;&#xA;		,	spacing_closed:			21			// HIDE resizer &amp; toggler when 'closed'&#xD;&#xA;		,	slidable:				true		// REFERENCE - cannot slide if spacing_closed = 0&#xD;&#xA;		,	initClosed:				false&#xD;&#xA;		//	CALLBACK TESTING...&#xD;&#xA;		//,	onhide_start:			function () { return confirm(""START South pane hide \n\n onhide_start callback \n\n Allow pane to hide?""); }&#xD;&#xA;		//,	onhide_end:				function () { alert(""END South pane hide \n\n onhide_end callback""); }&#xD;&#xA;		//,	onshow_start:			function () { return confirm(""START South pane show \n\n onshow_start callback \n\n Allow pane to show?""); }&#xD;&#xA;		//,	onshow_end:				function () { alert(""END South pane show \n\n onshow_end callback""); }&#xD;&#xA;		//,	onopen_start:			function () { return confirm(""START South pane open \n\n onopen_start callback \n\n Allow pane to open?""); }&#xD;&#xA;		//,	onopen_end:				function () { alert(""END South pane open \n\n onopen_end callback""); }&#xD;&#xA;		//,	onclose_start:			function () { return confirm(""START South pane close \n\n onclose_start callback \n\n Allow pane to close?""); }&#xD;&#xA;		//,	onclose_end:			function () { alert(""END South pane close \n\n onclose_end callback""); }&#xD;&#xA;		//,	onresize_start:			function () { return confirm(""START South pane resize \n\n onresize_start callback \n\n Allow pane to be resized?)""); }&#xD;&#xA;		//,	onresize_end:			function () { alert(""END South pane resize \n\n onresize_end callback \n\n NOTE: onresize_start event was skipped.""); }&#xD;&#xA;		}&#xD;&#xA;	,	west: {&#xD;&#xA;			size:					250&#xD;&#xA;		,	spacing_closed:			21			// wider space when closed&#xD;&#xA;		,	togglerLength_closed:	21			// make toggler 'square' - 21x21&#xD;&#xA;		,	togglerAlign_closed:	""top""		// align to top of resizer&#xD;&#xA;		,	togglerLength_open:		0			// NONE - using custom togglers INSIDE west-pane&#xD;&#xA;		,	togglerTip_open:		""Close West Pane""&#xD;&#xA;		,	togglerTip_closed:		""Open West Pane""&#xD;&#xA;		,	resizerTip_open:		""Resize West Pane""&#xD;&#xA;		,	slideTrigger_open:		""click"" 	// default&#xD;&#xA;		,	initClosed:				false&#xD;&#xA;		//	add 'bounce' option to default 'slide' effect&#xD;&#xA;		,	fxSettings_open:		{ easing: ""easeOutBounce"" }&#xD;&#xA;		}&#xD;&#xA;	,	east: {&#xD;&#xA;			size:					250&#xD;&#xA;		,	spacing_closed:			21			// wider space when closed&#xD;&#xA;		,	togglerLength_closed:	21			// make toggler 'square' - 21x21&#xD;&#xA;		,	togglerAlign_closed:	""top""		// align to top of resizer&#xD;&#xA;		,	togglerLength_open:		0 			// NONE - using custom togglers INSIDE east-pane&#xD;&#xA;		,	togglerTip_open:		""Close East Pane""&#xD;&#xA;		,	togglerTip_closed:		""Open East Pane""&#xD;&#xA;		,	resizerTip_open:		""Resize East Pane""&#xD;&#xA;		,	slideTrigger_open:		""mouseover""&#xD;&#xA;		,	initClosed:				false&#xD;&#xA;		//	override default effect, speed, and settings&#xD;&#xA;		,	fxName:					""drop""&#xD;&#xA;		,	fxSpeed:				""normal""&#xD;&#xA;		,	fxSettings:				{ easing: """" } // nullify default easing&#xD;&#xA;		}&#xD;&#xA;	,	center: {&#xD;&#xA;			paneSelector:			""#mainContent"" 			// sample: use an ID to select pane instead of a class&#xD;&#xA;		,	minWidth:				200&#xD;&#xA;		,	minHeight:				200&#xD;&#xA;        ,   onresize_end:			function () { editor.resize() }&#xD;&#xA;		}&#xD;&#xA;	};&#xD;&#xA;	&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;/head&gt;&#xD;&#xA;&lt;body style=""height: 100%""&gt;&#xD;&#xA;&#xD;&#xA;&lt;input style=""display: none"" id=""projectDialog"" type=""file"" /&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=""ui-layout-west""&gt;&#xD;&#xA;	&lt;div class=""header""&gt;Project Explorer&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;	&lt;div class=""content""&gt;&#xD;&#xA;		&lt;!-- This is the project structure. We start with the Scripts and Shaders folder and dynamically add the tree structure in code above when they open a project. Starts out invisible until project selected. --&gt;&#xD;&#xA;		&lt;div class=""css-treeview"" id=""projectTree"" style=""display: none;""&gt;&#xD;&#xA;			&lt;ul&gt;&#xD;&#xA;				&lt;li&gt;&lt;input type=""checkbox"" id=""projectRoot"" /&gt;&lt;label for=""ProjectRoot"" id=""projectRootLabel""&gt;ProjectName&lt;/label&gt;&#xD;&#xA;					&lt;ul&gt;&#xD;&#xA;						&lt;li&gt;&lt;input type=""checkbox"" id=""Scripts"" /&gt;&lt;label for=""Scripts""&gt;Scripts&lt;/label&gt;&#xD;&#xA;							&lt;ul&gt;&#xD;&#xA;								&lt;li&gt;Test.lua&lt;/li&gt;&#xD;&#xA;							&lt;/ul&gt;&#xD;&#xA;						&lt;/li&gt;&#xD;&#xA;						&lt;li&gt;&lt;input type=""checkbox"" id=""Shaders"" /&gt;&lt;label for=""Shaders""&gt;Shaders&lt;/label&gt;&#xD;&#xA;						&lt;/li&gt;&#xD;&#xA;					&lt;/ul&gt;&#xD;&#xA;				&lt;/li&gt;&#xD;&#xA;			&lt;/ul&gt;&#xD;&#xA;		&lt;/div&gt;&#xD;&#xA;	&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=""ui-layout-north""&gt;&#xD;&#xA;	&lt;ul class=""toolbar""&gt;&#xD;&#xA;		&lt;li id=""tbarToggleNorth"" class=""first""&gt;&lt;span&gt;&lt;/span&gt;TODO: Toolbar here&lt;/li&gt;&#xD;&#xA;		&lt;li id=""tbarOpenSouth""&gt;&lt;span&gt;&lt;/span&gt;TODO: Toolbar icons here&lt;/li&gt;&#xD;&#xA;	&lt;/ul&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=""ui-layout-south""&gt;&#xD;&#xA;	&lt;div class=""header""&gt;Outer - South&lt;/div&gt;&#xD;&#xA;	&lt;div class=""content""&gt;&#xD;&#xA;		TODO: Debug/console/error/warning tabs here&#xD;&#xA;	&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=""mainContent"" style=""padding: 0; height: 100%; overflow-y: hidden;""&gt;&#xD;&#xA;	&lt;div class=""ui-layout-center"" style=""height: 100%""&gt;&#xD;&#xA;		&lt;div class=""ui-layout-content"" style=""padding: 0; height: 100%;""&gt;&#xD;&#xA;			&lt;div id=""tabs"" style=""padding: 0; margin: 0; height: 100%""&gt;&#xD;&#xA;				&lt;ul&gt;&#xD;&#xA;					&lt;li&gt;&lt;a href=""#App_lua""&gt;App.lua&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;					&lt;li&gt;&lt;a href=""#AnimationManager_lua""&gt;AnimationManager.lua&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;					&lt;li&gt;&lt;a href=""#AI_lua""&gt;AI.lua&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;				&lt;/ul&gt;&#xD;&#xA;				&lt;div id=""App_lua"" style=""background-color: orange; padding: 0; margin-left: 0px;""&gt;&#xD;&#xA;					&lt;div id=""editor"" &gt;function App:Start()&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;function App:Loop()&#xD;&#xA;end&lt;/div&gt;&#xD;&#xA;				&lt;/div&gt;&#xD;&#xA;				&lt;div id=""AnimationManager_lua""&gt;&#xD;&#xA;					File 2&#xD;&#xA;				&lt;/div&gt;&#xD;&#xA;				&lt;div id=""AI_lua""&gt;&#xD;&#xA;					File 3&#xD;&#xA;				&lt;/div&gt;&#xD;&#xA;			&lt;/div&gt;&#xD;&#xA;		&lt;/div&gt;&#xD;&#xA;	&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;/body&gt;&#xD;&#xA;&lt;/html&gt; </code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",1743328,"",,"",,2015-03-04T12:03:36,"","",,1,,,
28973350,2,,28635694,2015-03-10T20:20:45,,2,,"<p>I solved this with the following code. It was just a matter of rooting around and finding the right menu to append or insert to. I used the menu to open a modal that has user preferences in it.</p>&#xA;&#xA;<pre><code>var gui = require('nw.gui');&#xA;&#xA;// Create menu container&#xA;var Menu = new gui.Menu({&#xA;    type:   'menubar'&#xA;});&#xA;&#xA;//initialize default mac menu&#xA;Menu.createMacBuiltin(""MyApp"");&#xA;&#xA;// Get the root menu from the default mac menu&#xA;var rootMenu = Menu.items[0].submenu;&#xA;&#xA;// Append new item to root menu&#xA;rootMenu.insert(&#xA;    new gui.MenuItem({&#xA;        label: 'Preferences',&#xA;        click : function () {&#xA;          $('#preferences').modal('toggle');&#xA;        }&#xA;    })&#xA;);&#xA;&#xA;// Append Menu to Window&#xA;gui.Window.get().menu = Menu;&#xA;</code></pre>&#xA;",4589187,"",,"",,2015-03-10T20:20:45,"","",,0,,,
29017736,2,,28550372,2015-03-12T18:38:09,,2,,"<p>If you cannot find <code>nwsnapshot</code>, then look after <strong><code>nwjc</code></strong>.<br><br>&#xA;To make a snapshot, you'll type under console <em>(replace names accordingly)</em>:</p>&#xA;&#xA;<pre><code>nwjc yourjsfiletoprotect.js jshidden.bin&#xA;</code></pre>&#xA;&#xA;<p>Then, you'll need to import <code>jshidden.bin</code> into your HTML file. You will not achieve this using <code>&lt;script src=""jshidden.bin""&gt;&lt;/script&gt;</code>. That won't work.&#xA;You'll achieve this by writing:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;var nw = require('nw.gui');&#xA;nw.Window.get().evalNWBin(null, 'jshidden.bin');&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>You'd be aware that there are serious limitations when it comes to using nw snapshots.</p>&#xA;",298285,"",,"",,2015-03-12T18:38:09,"","",,0,,,
28891892,2,,28889212,2015-03-06T03:29:23,,3,,"<p>Starting with NW 12.0, a new manifest field, 'bg-script' allows for just this capability.  The ""main"" field is NOT required (when ""bg-script"" is present) and no window will be opened, unless created in the js file.  This provides an atom-shell-like  ""js rather than HTML"" basic orientation to the app. Because this has just been added to NWJS, documentation and sample code have not caught up... so some experimentation will no doubt be required.</p>&#xA;",4286031,"",,"",,2015-03-06T03:29:23,"","",,2,,,
28791411,2,,28768476,2015-03-01T08:06:52,,7,,"<p>First you need to prevent app appear in taskbar</p>&#xA;&#xA;<pre><code>{&#xA;    ""name"": ""My App"",&#xA;    ""version"": ""1.0.0"",&#xA;    ""main"": ""app.html"",&#xA;    ""window"": {&#xA;        ""show"": false,&#xA;        ""show_in_taskbar"": false&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then you need to create tray (top bar) menu: (example from his source)</p>&#xA;&#xA;<pre><code>tray = new app.node.gui.Tray({&#xA;    title: '',&#xA;    icon: 'assets/css/images/menu_icon.png',&#xA;    alticon: 'assets/css/images/menu_alticon.png',&#xA;    iconsAreTemplates: false&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then need create hidden window and show it on click in tray:</p>&#xA;&#xA;<pre><code>// create window&#xA;var params = {toolbar: app.devMode, frame: false, transparent: true, resizable: false, show: false};&#xA;window = app.node.gui.Window.open('templates/panel.html', params);&#xA;&#xA;function showPopup (x, y) {&#xA;  window.on('document-end', function()&#xA;    window.moveTo(x - (window.window.width / 2) - 6, y);&#xA;    window.show();&#xA;    window.focus();&#xA;  });&#xA;}&#xA;&#xA;// show panel when click in tray&#xA;tray.on('click', function (evt) {&#xA;  showPopup(evt.x, evt.y);&#xA;});&#xA;</code></pre>&#xA;",1083428,"",,"",,2015-03-01T08:06:52,"","",,1,,,
28932588,2,,28920621,2015-03-08T22:19:24,,23,,"<p>I have solved the problem. Here's the example code:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>...&#xA;&#xA;app.on('ready', function() {&#xA;&#xA;  ...&#xA;&#xA;  mainWindow.webContents.on('did-finish-load', function() {&#xA;    mainWindow.webContents.executeJavaScript(""alert('Hello There!');"");&#xA;  });&#xA;&#xA;  ...&#xA;&#xA;});&#xA;</code></pre>&#xA;",2097076,"",352784,"",2015-08-06T19:29:58,2015-08-06T19:29:58,"","",,2,,,
55635586,2,,55631903,2019-04-11T14:58:07,,1,,"<p>Just create a shared singleton service</p>&#xA;&#xA;<pre><code>@Injectable()&#xA;export class GlobalService {&#xA;&#xA;  private _data = {value:0};&#xA;&#xA;  getData(){&#xA;    return this._data; // get ref of the data object &#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>notice that every time you ask for data you got the same object so&#xA;  there is need to create a property in the component body unless you&#xA;  want to display the object in the template</p>&#xA;</blockquote>&#xA;&#xA;<p>shared or singleton service is just a <strong>service</strong> add to <em>AppModule</em>  or <em>root</em> module providers list </p>&#xA;&#xA;<pre><code>@NgModule({&#xA;  ...&#xA;  providers: [GlobalService]&#xA;})&#xA;export class AppModule { }&#xA;</code></pre>&#xA;&#xA;<p>if you want to render any data from the data object you need to create a property in the component body a,b to hold a reference of the object.</p>&#xA;&#xA;<pre><code>export class AComponent implements OnInit {&#xA;&#xA;  data;&#xA;  constructor(public _g:GlobalService) { }&#xA;&#xA;  ngOnInit() {&#xA;    this.data = this._g.getData()&#xA;  }&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>in case you just want to change the data c component </p>&#xA;&#xA;<pre><code>export class CComponent  {&#xA;&#xA; data;&#xA;  constructor(public _g:GlobalService) { }&#xA;&#xA;  reset() {&#xA;    const data = this._g.getData(); // &#xA;    data.value = 0;&#xA;  }&#xA;&#xA;  inc(){&#xA;    const data = this._g.getData(); // &#xA;    data.value +=10; &#xA;  }&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>in the global service <code>getData</code> return a <strong>reference</strong> to _data object <strong><em>not a new object every time</em></strong></p>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://stackblitz.com/edit/angular-dmlsqo"" rel=""nofollow noreferrer""><strong>stackblitz demo</strong></a></p>&#xA;",3980621,"",3980621,"",2019-04-11T15:04:13,2019-04-11T15:04:13,"","",,0,,,
55654139,2,,55651989,2019-04-12T14:41:37,,0,,"<p>I have now managed to work out a sort-of solution. This is by no means perfect and still requires some more work and testing.</p>&#xA;&#xA;<p>I ended up modifying the <code>model.js</code> file within NeDB, more specifically the <code>comparisonFunctions.$regex</code> function. I added an additional check to see if the regular expression that gets passed in can be converted to a regular expression from its string form. The <code>model.js</code> file now looks as follows:</p>&#xA;&#xA;<pre><code>comparisonFunctions.$regex = function (a, b) {&#xA;&#xA;  if (!util.isRegExp(b)) {&#xA;&#xA;    try {&#xA;&#xA;      // convert the string based regex into an actual regular expression&#xA;      b = new RegExp(b.replace(/[\\/]/g, """"), 'i');&#xA;&#xA;      // check again if it worked&#xA;      if (!util.isRegExp(b))&#xA;        throw new Error(""$regex operator called with non regular expression"");&#xA;&#xA;    } catch {&#xA;&#xA;      // we were not working with a regex&#xA;      throw new Error(""$regex operator called with non regular expression"");&#xA;&#xA;    }&#xA;  }&#xA;&#xA;  if (typeof a !== 'string') {&#xA;    return false&#xA;  } else {&#xA;    return b.test(a);&#xA;  }&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>So now if I pass this to my API:</p>&#xA;&#xA;<pre><code>{&#xA;    ""test"": {&#xA;        ""$regex"": ""/ell/""&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It will return the first document from the database where the <code>test</code> field == <code>Hello</code></p>&#xA;&#xA;<p>Any recommendations on how to make this neater and/or feedback will be greatly appreciated.</p>&#xA;",10223771,"",10223771,"",2019-04-12T14:47:21,2019-04-12T14:47:21,"","",,0,,,
55673860,2,,55673788,2019-04-14T09:38:37,,0,,"<p>Your game internal file/resource lookup is probably done in a relative manner to the game process current working directory which it assumes to be the game exe directory.</p>&#xA;&#xA;<p>I would assume that the launcher is running from another directory, so to solve your issue you need to call <code>spawn</code> with the <code>cwd</code> option:</p>&#xA;&#xA;<pre><code>spawn('C:\\Games\\Game\\Game.exe', {cwd: 'C:\\Games\Game'});&#xA;</code></pre>&#xA;",2191573,"",,"",,2019-04-14T09:38:37,"","",,0,,,
55677999,2,,55536840,2019-04-14T17:19:35,,0,,"<p>That's how it worked:</p>&#xA;&#xA;<p>1- Moved <strong>notification-process.js</strong> file from assets folder to main directory.</p>&#xA;&#xA;<p>2- Changed file path in main.js:</p>&#xA;&#xA;<pre><code>var child = new (forever.Monitor)(path.join(__dirname, 'notification-process.js')...&#xA;</code></pre>&#xA;&#xA;<p>Without using join, it doesn't work after packaging the app. </p>&#xA;",4587557,"",,"",,2019-04-14T17:19:35,"","",,0,,,
55678040,2,,55656878,2019-04-14T17:23:39,,0,,"<p>I found a way to do it,</p>&#xA;&#xA;<ol>&#xA;<li>I am using the <a href=""https://www.npmjs.com/package/username"" rel=""nofollow noreferrer"">username package </a> to obtain the logged-in user.</li>&#xA;</ol>&#xA;&#xA;<pre><code>async getUsername() {&#xA;  return await username();&#xA;}&#xA;</code></pre>&#xA;&#xA;<ol start=""2"">&#xA;<li><p>Then in node js and electron you can use the child processes, <a href=""https://nodejs.org/api/child_process.html"" rel=""nofollow noreferrer"">child_process docs</a>.</p></li>&#xA;<li><p>When you perform the command <code>net user &lt;username&gt;</code> or <code>net user &lt;username&gt; / domain</code> you get all the user information, among all the information is the full name, also the name can be empty.</p></li>&#xA;</ol>&#xA;&#xA;<pre><code>const child = require('child_process');&#xA;let exec = child.exec;&#xA;&#xA;// And make a function for do command&#xA;&#xA;function execute(command, callback){&#xA;    exec(command, function(error, stdout, stderr){ &#xA;      let result = null;&#xA;&#xA;      if(!error){&#xA;&#xA;        var splitted = stdout.split(""\n"");    &#xA;        var username = '';&#xA;        var fullname = '';&#xA;&#xA;        for(var i=0; i &lt; splitted.length; i++){&#xA;          if(splitted[i].search(""User name"") != -1){&#xA;            splitted[i] = splitted[i].replace('User name',' ');&#xA;            splitted[i] = splitted[i].trim();&#xA;            username = splitted[i];&#xA;          }else if(splitted[i].search(""Full Name"") != -1){&#xA;            splitted[i] = splitted[i].replace('Full Name',' ');&#xA;            splitted[i] = splitted[i].trim();&#xA;            fullname = splitted[i];&#xA;          }&#xA;        }&#xA;&#xA;        let data = {&#xA;          username: (username) ? username.toLowerCase() : null,&#xA;          fullname: (fullname) ? fullname: null&#xA;        }&#xA;&#xA;        result = data;&#xA;      } else{&#xA;        result = null;&#xA;      }&#xA;      callback(result); &#xA;    });&#xA;  };&#xA;&#xA;</code></pre>&#xA;&#xA;<p>This way you can get the user's full name.</p>&#xA;",7328093,"",7328093,"",2019-04-17T16:06:26,2019-04-17T16:06:26,"","",,0,,,
55679149,2,,53162307,2019-04-14T19:19:47,,0,,<p>Using the latest Electron &amp; google packages (and no other changes) seems to have resolved this issue</p>&#xA;,1930712,"",,"",,2019-04-14T19:19:47,"","",,0,,,
55698657,2,,55682195,2019-04-15T23:45:51,,0,,"<p>You should indeed mock SchoolAPI, since your component only requires SchoolAPI when deleting it should not affect your component too much. The school data you can just mock and feed into the component as well if need be. So it would look like the following:</p>&#xA;&#xA;<pre><code>jest.mock('./path/to/SchoolAPI');&#xA;&#xA;describe(""SchoolList component"", () =&gt; {&#xA;  it(""renders without throwing an error"", () =&gt; {&#xA;      const SchoolListComponent = renderer.create(&lt;SchoolList schoolsData={schoolsData/&gt;).toJson();&#xA;      expect(SchoolListComponent).toMatchSnapshot();&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>If you want to have mocks which behave similar to the original implementions and not have them just return nothing, you can look into jest <a href=""https://jestjs.io/docs/en/manual-mocks"" rel=""nofollow noreferrer"">manual mocks</a></p>&#xA;",10353987,"",10353987,"",2019-04-15T23:57:49,2019-04-15T23:57:49,"","",,0,,,
55727934,2,,55726947,2019-04-17T12:49:41,,3,,"<p>Browsers can sometimes try to be a bit more clever than they need too,  proxy server's used to be common in the early days of the web.  And in co-operate companies they are still popular.  But in most case's proxy servers can be handled transparently by the OS, so why browsers still try to handle this I'm not 100% sure.</p>&#xA;&#xA;<p>But the easy fix is to tell the embedded Chromium not to try a resolve the proxy server.</p>&#xA;&#xA;<pre><code>app.commandLine.appendSwitch('auto-detect', 'false');&#xA;app.commandLine.appendSwitch('no-proxy-server')&#xA;</code></pre>&#xA;&#xA;<p>You may not need both the above switches.</p>&#xA;&#xA;<p>Of course if you app is running on a system that does use a proxy, it might have issues.  But I've a feeling even then it's unlikely to cause an isssue, as hopefully the OS would be handling this anyway.</p>&#xA;&#xA;<p>Also this might be handy keeping an eye on -> <a href=""https://github.com/electron/electron/issues/13829"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/13829</a></p>&#xA;",6870228,"",,"",,2019-04-17T12:49:41,"","",,0,,,
55746675,2,,55734857,2019-04-18T13:05:25,,1,,"<p>After more research, it seems that Spectron is not able to do this. Spectron starts up in a Webdriver process rather than in the main process of your electron app. This works for end to end testing but not for normal module testing. Luckily, the <a href=""https://github.com/jprichardson/electron-mocha"" rel=""nofollow noreferrer"">electron-mocha</a> module works great for module testing. It lets you specify which process to run tests from, and any modules to include in the main process. Best of all it runs in Chromium so you can access all APIs of your app like normal. </p>&#xA;",160936,"",160936,"",2019-04-19T15:10:01,2019-04-19T15:10:01,"","",,0,,,
55766311,2,,55735666,2019-04-19T18:38:44,,0,,"<p>The answer was quite simple, don't use the protocol to POST data. Instead I ended up creating a web server within electron, and passed the data off via the URL.</p>&#xA;&#xA;<pre><code>var http=require('http');&#xA;var url=require('url');&#xA;&#xA;var server=http.createServer(function(req,res){&#xA;    var pathname=url.parse(req.url).pathname;&#xA;    switch(pathname){&#xA;        case '/data':&#xA;            var query=url.parse(req.url).query;&#xA;            someFunction(query);&#xA;            res.end('200 ok');&#xA;        break;&#xA;    }&#xA;&#xA;}).listen(8080);&#xA;</code></pre>&#xA;&#xA;<p>This way I can use AJAX to launch and hand off data to Electron, instead of iframes.</p>&#xA;&#xA;<p>Then you just pass the data in like:&#xA;<code>http://localhost:8080/data?{insertyourdatahere}</code></p>&#xA;",2360118,"",,"",,2019-04-19T18:38:44,"","",,0,,,
55767578,2,,55767577,2019-04-19T20:35:53,,0,,"<p>Yes, it can be done using <a href=""https://github.com/cyrus-and/chrome-har-capturer"" rel=""nofollow noreferrer""><code>chrome-har-capturer</code></a> - you can pass a bunch of events from the <code>webContents.debugger</code> and then <code>chrome-har-capturer</code> will transform them into a HAR for you.</p>&#xA;&#xA;<p>Example code:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const chromeHarCapturer = require('chrome-har-capturer')&#xA;&#xA;let log = []&#xA;const webContents = browserWindow.webContents&#xA;&#xA;webContents.debugger.on(""message"", function(event, method, params) {&#xA;  // https://github.com/cyrus-and/chrome-har-capturer#fromlogurl-log-options&#xA;  if (![""Page.domContentEventFired"", ""Page.loadEventFired"", ""Network.requestWillBeSent"", ""Network.dataReceived"", &#xA;        ""Network.responseReceived"", ""Network.resourceChangedPriority"", ""Network.loadingFinished"", &#xA;        ""Network.loadingFailed""].includes(method)) {&#xA;    // not relevant to us&#xA;    return&#xA;  }&#xA;  log.push({method, params})&#xA;&#xA;  if (method === 'Network.responseReceived') { // the chrome events don't include the body, attach it manually if we want it in the HAR&#xA;    webContents.debugger.sendCommand('Network.getResponseBody', {&#xA;      requestId: params.requestId&#xA;    }, function(err, result) {&#xA;      result.requestId = params.requestId&#xA;      log.push({&#xA;        method: 'Network.getResponseBody',&#xA;        params: result&#xA;      })&#xA;    })&#xA;  }&#xA;})&#xA;&#xA;webContents.debugger.once(""detach"", function() {&#xA;  // on detach, write out the HAR&#xA;  return chromeHarCapturer.fromLog(""http://dummy-url-for-whole-session"", log).then(function(har) {&#xA;    const path = `/tmp/${Number(new Date())}-har.json`&#xA;&#xA;    fs.writeJson(path, log)&#xA;&#xA;    log = []&#xA;  })&#xA;})&#xA;&#xA;// subscribe to the required events&#xA;webContents.debugger.attach()&#xA;webContents.debugger.sendCommand('Network.enable')&#xA;webContents.debugger.sendCommand('Page.enable')&#xA;</code></pre>&#xA;",3474615,"",,"",,2019-04-19T20:35:53,"","",,0,,,
55769207,2,,55762367,2019-04-20T00:27:59,,3,,"<p>As the error message states, the file <code>package.json</code> cannot be found.</p>&#xA;&#xA;<p>One possible reason is that the terminal is not in the correct project folder and that you need to <code>cd</code> into the folder before running <code>npm start</code>.</p>&#xA;&#xA;<p>If you <code>cd</code> to any folder that has no <code>package.json</code> (and whose parent folders don't have a <code>package.json</code>) and run <code>npm start</code>, you'll be presented with this error message.</p>&#xA;&#xA;<p>Your specific file path seems to indicate that you ran <code>npm start</code> from your home folder, not the project folder that contains <code>package.json</code>.</p>&#xA;",1335237,"",1335237,"",2019-04-20T22:30:07,2019-04-20T22:30:07,"","",,0,,,
55779746,2,,55777223,2019-04-21T03:56:46,,1,,"<p>If you save the images to (temporary) files, you can copy references to these files to the clipboard with <br><a href=""https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/set-clipboard"" rel=""nofollow noreferrer""><code>Set-Clipboard -LiteralPath</code></a>.</p>&#xA;",45375,"",,"",,2019-04-21T03:56:46,"","",,0,,,
55786227,2,,55785855,2019-04-21T19:53:54,,1,,"<p>As for now, the problem with code...</p>&#xA;&#xA;<pre><code> // event in receive, not e... &#xA; ipcMain.on('content-edit', async (event, args) =&gt; {&#xA;   console.log(""content-edit - Backend"");&#xA;   let res = await contentService.getAllContent()&#xA;   event.sender.send('content-edit-res', res)&#xA; })&#xA;</code></pre>&#xA;&#xA;<p>But, as additional information, you also can send data to renderer process with <a href=""https://electronjs.org/docs/api/web-contents"" rel=""nofollow noreferrer""><code>webContents</code></a> of window.</p>&#xA;&#xA;<pre><code> const BrowserWindow = electron.BrowserWindow;&#xA; let win = new BrowserWindow(&lt;your configs&gt;);&#xA; win.webContents.send('message', 'Hello from main!');&#xA;</code></pre>&#xA;&#xA;<p>You can find useful information <a href=""https://medium.com/@kahlil/how-to-communicate-between-two-electron-windows-166fdbcdc469"" rel=""nofollow noreferrer"">here</a></p>&#xA;",6066986,"",,"",,2019-04-21T19:53:54,"","",,0,,,
55790588,2,,55789917,2019-04-22T07:15:01,,0,,"<p>I found that the process kept running by going to Task Manager details. I am guessing the application does not handle well when the window is closed, therefore the application does not terminate resources. Killing the running application permits the folder to be operated</p>&#xA;",4451521,"",,"",,2019-04-22T07:15:01,"","",,0,,,
55800494,2,,55438675,2019-04-22T20:11:19,,0,,"<p>This isn't a fix, and may not be awfully helpful for anyone else searching, but it did get me unblocked.</p>&#xA;&#xA;<p>I created a second typescript module that defines the component using react-dates.  This module is compiled to es5 and then ""yarn link""-ed into my main app.  Although I never figured out why there were differences (and I still/also get duplicate initialization warnings from ethers.js) this fixed at least this problem.</p>&#xA;",1930712,"",,"",,2019-04-22T20:11:19,"","",,0,,,
55805942,2,,55748564,2019-04-23T07:06:15,,0,,"<p>I found a good way:</p>&#xA;&#xA;<p>C#:</p>&#xA;&#xA;<pre><code>public Task&lt;object&gt; WithCallback(IDictionary&lt;string, object&gt; payload)&#xA;{&#xA;    Func&lt;object, Task&lt;object&gt;&gt; changed = (Func&lt;object, Task&lt;object&gt;&gt;)payload[""changed""];&#xA;    return Task.Run(async () =&gt; await OnQuery(payload[""request""], changed));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>js:</p>&#xA;&#xA;<pre><code>var withCallback = edge.func({&#xA;    assemblyFile: '..dllUrl..',&#xA;    typeName: 'Electron.Wrapper.QueryWrapper',&#xA;    methodName: 'WithCallback' &#xA;});&#xA;&#xA;window.query = function (options) {&#xA;    function triggerResponse(error, result) {&#xA;        ...&#xA;    }&#xA;&#xA;    withCallback({&#xA;        changed: (result) =&gt; triggerResponse(null, result),&#xA;        request: JSON.stringify(options)&#xA;    }, triggerResponse);&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>When you need trigger when someting changes you should use the parameter 'payload' in OnQuery function:</p>&#xA;&#xA;<pre><code>public async Task&lt;object&gt; OnQuery(dynamic request, dynamic payload = null)&#xA;{&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Next the OnQuery return the value you can call again the js callback in this way:</p>&#xA;&#xA;<pre><code>payload(""Notify js callback!"");&#xA;</code></pre>&#xA;&#xA;<p>I hope this can help someone!</p>&#xA;",4991755,"",,"",,2019-04-23T07:06:15,"","",,0,,,
55817891,2,,55767253,2019-04-23T19:08:22,,0,,"<p>So after a lot of headaches, I finally found a way to avoid all these warnings and errors. When I initialized the project I used these commands:</p>&#xA;&#xA;<pre><code>$ npm install vue-cli -g&#xA;$ vue init simulatedgreg/electron-vue &lt;&lt;project-name&gt;&gt;&#xA;</code></pre>&#xA;&#xA;<p>After a suggestion on reinitializing the project using the vue-cli and add the plugin for electron after (This person created a quick project and had no problems). So when initializing the project again I used these commands:</p>&#xA;&#xA;<pre><code>npm install vue-clie -g&#xA;vue create &lt;&lt;project-name&gt;&gt;&#xA;cd &lt;&lt;project-name&gt;&gt;&#xA;vue add electron-builder&#xA;npm install bootstrap-vue&#xA;npm install&#xA;</code></pre>&#xA;&#xA;<p>If I remeber correctly those were all the npm install commands you needed, but if you get an error of a package missing, just use npm install &lt;> to install it.</p>&#xA;&#xA;<p>Now I had to move every .vue file over to the new project and check that all the import statements are correct, and import and use bootstrap again in the index.js.</p>&#xA;&#xA;<p>If you use vue-router, vuex or vuex-electron these also need to be moved over and installed again. This should just be to move the files over to the new project and check where they were imported in the old files and copy that over.</p>&#xA;&#xA;<p>For me, it seemed that the <code>vue init</code> command did something that the bootstrap-vue package doesn't like. I didn't have a very large project, so the whole process took about 15-20 min.</p>&#xA;&#xA;<p>To run an auto update dev server use the command <code>npm run electron:serve</code> and the command <code>npm run electron:build</code> to build the project. These commands can be changed in the package.json file.</p>&#xA;&#xA;<p>The folder structure is a bit different, there will no longer be a renderer and main folder. Everything will be in the src folder. The main.js from the main folder is now named background.js. Apart from that, I think it is similar enough to figure out by just looking through the files.</p>&#xA;",3407591,"",,"",,2019-04-23T19:08:22,"","",,0,,,
55834310,2,,55799133,2019-04-24T16:06:28,,0,,"<p>It seems like you don't need to generate the <code>.cert</code> and <code>.pem</code> files from each computer that installs it. You can simply just create them once, then package the certificates together in the Electron app.</p>&#xA;&#xA;<p>However, you may want to note that you'll need to visit the page once <code>https://localhost:3000</code> and accept/ignore and warnings the browser gives you beforehand or else it will not work correctly.</p>&#xA;",2360118,"",,"",,2019-04-24T16:06:28,"","",,0,,,
55835125,2,,54793230,2019-04-24T16:58:52,,0,,<p>Turns out the problem was only with videos that were not the first one loaded after launching the player. We were able to track down that we were getting multiple eventListeners that were fighting with each other. We just had add to add a tracker to only add event listeners when they didn't already exist.</p>&#xA;,2903532,"",,"",,2019-04-24T16:58:52,"","",,0,,,
55643169,2,,55581488,2019-04-12T01:18:16,,2,,"<p>I ended up using setBounds, but instead moving it to the left the amount that I need for it to be open. </p>&#xA;&#xA;<pre><code>  let display = electron.screen.getPrimaryDisplay()&#xA;  const { width, height } = display.bounds&#xA;  mainWindow.setBounds({&#xA;    x: width - 320 ,&#xA;    y: height,&#xA;    width: 320,&#xA;    height: height&#xA;  })&#xA;})```&#xA;</code></pre>&#xA;",7437772,"",,"",,2019-04-12T01:18:16,"","",,1,,,
55656779,2,,55650277,2019-04-12T17:21:00,,2,,"<p>Having recreated exactly what you described, it works flawlessly for me.</p>&#xA;&#xA;<p>The following is output on the console:</p>&#xA;&#xA;<pre class=""lang-none prettyprint-override""><code>http://ipv4.download.thinkbroadband.com/5MB.zip&#xA;DownloadItem {&#xA;  _events: { updated: [Function], done: [Function] },&#xA;  _eventsCount: 2 }&#xA;</code></pre>&#xA;&#xA;<p>The package determines the <a href=""https://github.com/sindresorhus/electron-dl#directory"" rel=""nofollow noreferrer"">location to store the file</a> itself, if you don't specify it. You can output the path it chooses by default using <code>app.getPath('downloads')</code>. For me, this is my home directory (Linux).</p>&#xA;&#xA;<p>If you want to set the download directory yourself:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>download(win, url, {&#xA;    directory: ""/path/to/my/directory/""&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>The package will create directories as needed.</p>&#xA;",1335237,"",1335237,"",2019-06-08T22:43:55,2019-06-08T22:43:55,"","",,1,,,
55668808,2,,55668283,2019-04-13T18:46:49,,0,,"<p>Ideally, you would provide more details about how you would like to use Tensorflow in Electron, but in my answer I am assuming you only need to run inference. </p>&#xA;&#xA;<p><strong>In that case you need to:</strong></p>&#xA;&#xA;<ol>&#xA;<li>Ensure python environment is setup (you can use virtualenv or something similar)</li>&#xA;<li>Ensure you have installed all your requirements like tensorflow - <code>pip -m requirements.txt</code></li>&#xA;<li>Install python shell package via npm - <code>npm install --save python-shell</code></li>&#xA;<li>Write a python script that executes your interaction with tensorflow</li>&#xA;<li>Use pyshell to execute your script. Here is an example:</li>&#xA;</ol>&#xA;&#xA;<pre><code>var pyshell = require('python-shell');&#xA;&#xA;pyshell.run('tensorflow.py',  function  (err, results)  {&#xA;    if  (err)  throw err;&#xA;    console.log('tensorflow.py finished.');&#xA;    console.log('results', results);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Finally: The other option is to write a <a href=""https://electronjs.org/docs/tutorial/using-native-node-modules"" rel=""nofollow noreferrer"">node module</a> in c++ that interacts with the <a href=""https://www.tensorflow.org/guide/extend/cc"" rel=""nofollow noreferrer"">Tensorflow C++</a> API. </p>&#xA;",1308771,"",1308771,"",2019-04-13T18:52:17,2019-04-13T18:52:17,"","",,1,,,
55716593,2,,55715645,2019-04-16T21:05:19,,0,,"<p>I'm not sure which problem you're exactly having.</p>&#xA;&#xA;<p>Besides the now-corrected <code>if (windowshown = true){</code> that should read <code>==</code>, the tray icon vanishes after some time.</p>&#xA;&#xA;<p>This is likely caused by the fact that you declare the variable within the ready handler. It is therefore removed by garbage collection after some time.</p>&#xA;&#xA;<p>If you move the declaration in the main part (same level as <code>mainWindow</code>), the tray will stick around.</p>&#xA;",1335237,"",,"",,2019-04-16T21:05:19,"","",,1,,,
55728602,2,,55717426,2019-04-17T13:25:00,,3,,<p>The cause is in an incorrect <code>-hostname</code> argument. It should be <code>--hostname</code>. I'm not sure why some <code>-m</code> error appears but tests work after I fix incorrect argument syntax.</p>&#xA;,9994312,"",,"",,2019-04-17T13:25:00,"","",,1,,,
55799786,2,,55797664,2019-04-22T19:10:15,,1,,"<p>You're attaching a new event handler for <code>botCheckLoginReturn</code> each time you click the button. This list of event handlers is extended each time you click the button. Each of this growing list of event handlers is then called upon the event.</p>&#xA;&#xA;<p>Make sure the following is only executed ""once"":</p>&#xA;&#xA;<pre><code>IPC.on('botCheckLoginReturn', (event: Electron.IpcMessageEvent, response: any) =&gt; {&#xA;    console.log(response);&#xA;    // ...&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>That means, move it out of the code called when you press the button.</p>&#xA;",1335237,"",,"",,2019-04-22T19:10:15,"","",,1,,,
55821105,2,,55804720,2019-04-24T01:18:30,,1,,"<p>This is an asynchronous problem. You need to upload file after the connect is successful.</p>&#xA;&#xA;<p>The code should be:</p>&#xA;&#xA;<pre><code>ftp.on('open', function(){&#xA;  ftp.upload(csvName, ""/csvs/"", function (err) {&#xA;    // process upload result&#xA;  });&#xA;});&#xA;&#xA;ftp.connect(config);&#xA;</code></pre>&#xA;&#xA;<p>In your code, the <code>upload</code> request is sent immediately after the <code>connect</code> operation. If lucky, when easy-ftp try to deliver the <code>upload</code> operation, the previous <code>connect</code> is already finished and successful, then <code>upload</code> would be successful too.</p>&#xA;&#xA;<p>If unlucky, when easy-ftp try to deliver the <code>upload</code> operation, the previous <code>connect</code> is still not finished yet. Then the <code>upload</code> will fail and show ""Cannot read property..."" error (looks like easy-ftp should display some better error message).</p>&#xA;&#xA;<p>To solve the problem, you need to listen the <a href=""https://www.npmjs.com/package/easy-ftp"" rel=""nofollow noreferrer"">""open"" event</a> in easy-ftp, and only upload files when that event has been emitted:</p>&#xA;&#xA;<blockquote>&#xA;  <p>open(&lt; FTPClient >client) - Emitted when connection and authentication were sucessful.</p>&#xA;</blockquote>&#xA;",707451,"",707451,"",2019-04-24T01:29:00,2019-04-24T01:29:00,"","",,2,,,
55716793,2,,55715384,2019-04-16T21:22:13,,4,,"<p>For some reason, your code is trying to navigate to an invalid (non-existing) URL, which then results in <code>window.location.href</code> being <code>chrome-error://chromewebdata</code>.</p>&#xA;&#xA;<p>To reiterate: there is no direct redirection to <code>chrome-error://chromewebdata</code>, but instead to a URL that doesn't exist or is not reachable.</p>&#xA;&#xA;<p>Check if your code causes this navigation (possibly a redirect). It is very useful to inspect the Network tab in DevTools, making sure that ""Preserve log"" is checked. This should give some indication about what exactly is happening.</p>&#xA;",1335237,"",,"",,2019-04-16T21:22:13,"","",,3,,,
19877135,2,,19877028,2013-11-09T14:31:29,,2,,"<p>Variables defined inside a function only exist inside the function when the function is executed. </p>&#xA;&#xA;<p>Your code creates an input element and it assigns a callback function to it's state change handler, but you don't actually attach/insert the element to the DOM anywhere, so the element only exists as that variable; it never becomes something in the DOM to exist after the function ends</p>&#xA;&#xA;<p>Therefore when the function ends, the variable will be destroyed and that element wouldn't exist anymore, including the state change handler.</p>&#xA;&#xA;<p><strong>sidenote</strong>: it's <code>.createElement()</code> not <code>.create()</code> (unless you have code that defined a <code>.create()</code> method..)</p>&#xA;",184595,"",184595,"",2013-11-09T14:38:02,2013-11-09T14:38:02,"","",,7,,,
19842882,2,,19627591,2013-11-07T17:41:34,,3,,"<p>What you want to do, is to intercept links in the internal frame.</p>&#xA;&#xA;<p>Here we have an iframe where all links will open in the default browser, not in the Node WebKit context.  I hope this helps.</p>&#xA;&#xA;<p>Try this:</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA; &lt;head&gt;&#xA;&#xA;  &lt;script type=""text/javascript""&gt;&#xA;    window.gui = require('nw.gui');&#xA;&#xA;    handleLinks = function(event)&#xA;    {&#xA;            var href;&#xA;&#xA;            function checkLinks(element) &#xA;            {&#xA;                if (element.nodeName.toLowerCase() === 'a') &#xA;                {&#xA;                    href = element.getAttribute('href');&#xA;                    if (href)&#xA;                    {&#xA;                        gui.Shell.openExternal(href);&#xA;                        // important, prevent the default event from happening!&#xA;                        event.preventDefault();&#xA;                    }   &#xA;                }                   &#xA;                else if (element.parentElement) &#xA;                {&#xA;                  checkLinks(element.parentElement);&#xA;                }&#xA;            }&#xA;            checkLinks(event.target);&#xA;    };&#xA;&#xA;     function isLoaded() &#xA;     {&#xA;       // let's see if the iframe has finished loading&#xA;       var iframe = document.getElementById('myframe');&#xA;&#xA;       if (iframe &amp;&amp; iframe.contentWindow &amp;&amp; iframe.contentWindow.document &amp;&amp;&#xA;           iframe.contentWindow.document.body &amp;&amp;&#xA;           iframe.contentWindow.document.body.innerHTML) &#xA;           {&#xA;            //now deal with links&#xA;            iframe.contentWindow.document.body.addEventListener('click', handleLinks, false);&#xA;           } &#xA;           else &#xA;           {&#xA;             // not yet, let's wait a bit and try again&#xA;             setTimeout(isLoaded, 300);&#xA;           }&#xA;     };&#xA;   &lt;/script&gt;&#xA; &lt;/head&gt;&#xA; &lt;body&gt;&#xA;   &lt;iframe id=""myframe"" src=""http://www.google.com"" onLoad=""isLoaded();"" style=""width: 100%;"" seamless=""true"" nwdisable nwfaketop&gt;&lt;/iframe&gt;&#xA;   &lt;div&gt;&#xA;    Links in the normal browser should still work in the Node Webkit environment.&#xA;   &lt;/div&gt;&#xA;   &lt;footer&gt;&#xA;    &lt;a href=""http://www.yoursitehere.com""&gt;Whaddayaknow&lt;/a&gt;&#xA;   &lt;/footer&gt;&#xA; &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",991479,"",991479,"",2017-01-30T15:00:21,2017-01-30T15:00:21,"","",,5,,,
19668650,2,,19667698,2013-10-29T20:41:04,,10,,"<p>Use <code>detached</code> option in spawn/execute arguments:</p>&#xA;&#xA;<blockquote>&#xA;  <p>If the detached option is set, the child process will be made the&#xA;  leader of a new process group. This makes it possible for the child to&#xA;  continue running after the parent exits.</p>&#xA;  &#xA;  <p>By default, the parent will wait for the detached child to exit. To&#xA;  prevent the parent from waiting for a given child, use the&#xA;  child.unref() method, and the parent's event loop will not include the&#xA;  child in its reference count.</p>&#xA;  &#xA;  <p>Example of detaching a long-running process and redirecting its output&#xA;  to a file:</p>&#xA;</blockquote>&#xA;&#xA;<pre><code> var fs = require('fs'),&#xA;     spawn = require('child_process').spawn,&#xA;     out = fs.openSync('./out.log', 'a'),&#xA;     err = fs.openSync('./out.log', 'a');&#xA;&#xA; var child = spawn('prg', [], {&#xA;   detached: true,&#xA;   stdio: [ 'ignore', out, err ]&#xA; });&#xA;&#xA; child.unref();&#xA;</code></pre>&#xA;",705115,"",,"",,2013-10-29T20:41:04,"","",,0,,,
51641160,2,,51639238,2018-08-01T19:42:10,,0,,"<p>One can use child.stderr data event handler to catch the error. I added this piece of code in my script and I was able to debug the issue with the output on console.</p>&#xA;&#xA;<pre><code>child.stderr.on('data', function(data) {&#xA;  console.log('stdout: ' + data);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Refer this article which helped me to solve this issue. &#xA;<a href=""https://medium.freecodecamp.org/node-js-child-processes-everything-you-need-to-know-e69498fe970a"" rel=""nofollow noreferrer"">https://medium.freecodecamp.org/node-js-child-processes-everything-you-need-to-know-e69498fe970a</a></p>&#xA;",8196111,"",,"",,2018-08-01T19:42:10,"","",,0,,,
51678861,2,,51678085,2018-08-03T19:17:34,,1,,"<p><a href=""https://www.npmjs.com/package/nw-dialog"" rel=""nofollow noreferrer""><code>nw-dialog</code></a> is intended to be used with <a href=""https://nwjs.io/"" rel=""nofollow noreferrer""><code>nw</code></a>, not with Electron.</p>&#xA;&#xA;<p>If you want to open dialogs in Electron, you should use Electron's <a href=""https://github.com/electron/electron/blob/master/docs/api/dialog.md"" rel=""nofollow noreferrer""><code>dialog</code></a> module:</p>&#xA;&#xA;<pre><code>const {dialog} = require('electron')&#xA;console.log(dialog.showOpenDialog({properties: ['openFile', 'openDirectory', 'multiSelections']}))&#xA;</code></pre>&#xA;",3479456,"",,"",,2018-08-03T19:17:34,"","",,0,,,
51682359,2,,51587024,2018-08-04T04:14:27,,0,,"<p>JSON Object isn't supposed to keep the same order. </p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/a/17229462"">Check this Answer</a></p>&#xA;",463576,"",,"",,2018-08-04T04:14:27,"","",,0,,,
51684275,2,,51680976,2018-08-04T09:31:25,,0,,"<p>It will seem silly but you're not enclosing the values with a quote and also not evaluating the variables. &#xA;The <code>INSERT INTO</code> query will be in the form of </p>&#xA;&#xA;<pre><code>INSERT INTO Customers (CustomerName, City, Country)&#xA;VALUES ('Cardinal', 'Stavanger', 'Norway');&#xA;</code></pre>&#xA;&#xA;<p>So change your db query to: </p>&#xA;&#xA;<pre><code>db.run(`INSERT INTO info(Name, Age, bloodGroup, lastdate) VALUES('${patientName}', '${patientAge}', '${patientBloodGroup}', '${PatientLastDate}')`), function(err) {&#xA;    if (err) {&#xA;        return console.log(err.message);&#xA;    }&#xA;    console.log(`A row has been inserted with rowid ${this.lastID}`);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Now, this code is obviously susceptible to SQL injection. You should use prepared statement</p>&#xA;&#xA;<pre><code>db.run(`INSERT INTO info(Name, Age, bloodGroup, lastdate) VALUES(?, ?, ?, ?)`, patientName, patientAge, patientBloodGroup, PatientLastDate), function(err) {&#xA;    if (err) {&#xA;        return console.log(err.message);&#xA;    }&#xA;    console.log(`A row has been inserted with rowid ${this.lastID}`);&#xA;});&#xA;</code></pre>&#xA;",1203844,"",,"",,2018-08-04T09:31:25,"","",,0,,,
51690270,2,,51667742,2018-08-04T23:21:56,,3,,"<p><a href=""https://blog.alexdevero.com/building-desktop-apps-electron-react/"" rel=""nofollow noreferrer"">I found great guideline for my question, if someone is looking for answer, check out this link - there is everything explained very well, thanks ""Alex Devero""</a></p>&#xA;",6276198,"",,"",,2018-08-04T23:21:56,"","",,0,,,
51700152,2,,51699606,2018-08-06T03:20:35,,2,,"<p>It seems the reason that this occurs is that when handling an error, the <strong>request</strong> module uses the <code>.on</code> method on a <code>FormData</code> object. However this isn't the Browser <code>FormData</code>, rather it's pulled from another dependency.</p>&#xA;&#xA;<p>Node can recognize everything just fine, but the Browser has some trouble with it. I'm assuming that since you're using this for and Electron app, that might be the issue.</p>&#xA;&#xA;<p>See this to check if it helps: <a href=""https://github.com/request/request/issues/1961#issuecomment-233956542"" rel=""nofollow noreferrer"">https://github.com/request/request/issues/1961#issuecomment-233956542</a></p>&#xA;&#xA;<p>Otherwise, if this is on a front-end, maybe using the <code>fetch()</code> can be an alertnative.&#xA;<a href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch</a></p>&#xA;&#xA;<hr>&#xA;&#xA;<p>The other hacky option is to go into the <code>request</code> module (specifically <code>request.js</code>) and search for <code>self._form.on</code> and comment out that block. But I do not recommend this at all because it's simply bad practice, doesn't really solve the problem, and can cause unexpected side-effects.</p>&#xA;",2930091,"",,"",,2018-08-06T03:20:35,"","",,0,,,
51710302,2,,51682494,2018-08-06T14:46:58,,0,,<p>I ended up using a mix of loadUrl and preload js combination: i'm loading a basic html file with a div that has an id and i specify for the browser view in web preferences to load a js file where i manipulate that html and create objects that will populate it with an event listener for click.</p>&#xA;,1379869,"",,"",,2018-08-06T14:46:58,"","",,0,,,
51711238,2,,51601844,2018-08-06T15:40:01,,0,,"<p>It automatically considers all the files present in the current directory which includes the package.json file. Also I found 'Bolt' useful while working with multiple npm packages.</p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/bolt"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/bolt</a></p>&#xA;",8196111,"",,"",,2018-08-06T15:40:01,"","",,0,,,
51714480,2,,51504644,2018-08-06T19:31:12,,0,,<p>Just a report in case anyone is reading this:&#xA;I convinced the client to move off of Electron and on to NW.JS so we could package the application properly.</p>&#xA;,1204153,"",,"",,2018-08-06T19:31:12,"","",,0,,,
51735395,2,,51734837,2018-08-07T21:03:26,,1,,"<p>You are passing a callback to a 'Sync'rounous function. You'll notice in the <a href=""https://nodejs.org/api/fs.html#fs_fs_readdirsync_path_options"" rel=""nofollow noreferrer"">documentation</a> that there is no <code>callback</code> parameter to the Sync version only in the async version which does not end with 'sync'</p>&#xA;&#xA;<p>So to get what you want, call like a regular, non callback style, function.</p>&#xA;&#xA;<pre><code>var files = fs.readdirSync(packetDir+""\\bin"");&#xA;&#xA;for(var i = 0; i &lt; files.length; i++){&#xA;    console.log(packetDir+""\\""+files[i]);&#xA;    libraryPath += packetDir+""\\""+files[i];&#xA;}&#xA;</code></pre>&#xA;",5976576,"",,"",,2018-08-07T21:03:26,"","",,0,,,
51742191,2,,51742060,2018-08-08T08:37:59,,0,,"<p>If I found how to do that</p>&#xA;&#xA;<pre><code>mainWindow.webContents.session.setProxy({ proxyRules: 'direct://' }, () =&gt; {})&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/8SLZ4.png"" rel=""nofollow noreferrer"">enter image description here</a></p>&#xA;",6737784,"",,"",,2018-08-08T08:37:59,"","",,0,,,
51747939,2,,40525012,2018-08-08T13:27:22,,0,,"<p>I found answer myself:</p>&#xA;&#xA;<pre><code>const menu = new Menu();&#xA;menu.append(new MenuItem({&#xA;  label: 'Resume', click(){&#xA;    console.log('resume clicked');&#xA;  }&#xA;}));&#xA;menu.append(new MenuItem({type: 'separator'}));&#xA;menu.append(new MenuItem({&#xA;  label: 'Pause', click(){&#xA;    console.log('item 2 clicked');&#xA;  }&#xA;}));&#xA;</code></pre>&#xA;&#xA;<p>And where I am adding dynamic rows:</p>&#xA;&#xA;<pre><code>new_row.addEventListener('contextmenu', function(e){&#xA;      var t = e.srcElement.id.split('-');&#xA;      id = t[1];&#xA;      menu.popup(remote.getCurrentWindow());&#xA;    });&#xA;</code></pre>&#xA;",2520628,"",,"",,2018-08-08T13:27:22,"","",,0,,,
51748499,2,,51747855,2018-08-08T13:53:52,,2,,"<p>Where you currently <code>console.log(""RETURN"")</code> you can resolve a Promise which is returned by <code>downloadFile</code>. Then you can simply await the calls in your <code>if</code> branches (and pass <code>async</code> callback to <code>ipcMain</code> of course).</p>&#xA;&#xA;<p>The structure in a more simple form would look like the followings&#xA;</p>&#xA;&#xA;<pre><code>function doJob () {&#xA;  return new Promise((resolve, reject) =&gt; {&#xA;    setTimeout(() =&gt; {&#xA;      console.log('RETURN')&#xA;      resolve()&#xA;    }, 2000)&#xA;  })&#xA;}&#xA;// ipcMain.on('play', async (event, payload) =&gt; { ... })&#xA;(async () =&gt; {&#xA;  if (true) {&#xA;    await doJob()&#xA;  }&#xA;  if (true) {&#xA;    await doJob()&#xA;  }&#xA;})()&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-08-08T13:53:52,"","",,0,,,
51770525,2,,51770450,2018-08-09T15:11:26,,7,,"<p>There is a <code>.center()</code> method on <a href=""https://electronjs.org/docs/api/browser-window#wincenter"" rel=""noreferrer""><code>BrowserWindow</code></a>, so</p>&#xA;&#xA;<pre><code>const win = remote.getCurrentWindow();&#xA;win.setSize(width, height);&#xA;win.center();&#xA;</code></pre>&#xA;&#xA;<p>centers the window after resizing.</p>&#xA;",1091751,"",,"",,2018-08-09T15:11:26,"","",,0,,,
51780536,2,,51724944,2018-08-10T06:45:26,,0,,"<p>You can bypass that problem as follows:</p>&#xA;&#xA;<ol>&#xA;<li><p>Install <code>openssl</code> library and extract <code>libcrypto.1.0.0.dylib</code> to your project.</p></li>&#xA;<li><p>Include <code>sudo-prompt</code> library in your project (it allows to generate sudo commands inside node application or invoke <code>.sh</code> scripts using administrator privileges)</p></li>&#xA;<li><p>Create <code>.sh</code> script that checks whether <code>libcrypto.1.0.0.dylib</code> file resides in the <code>/usr/local/opt/openssl/lib/</code> directory, if not - copy that file to the new directory (<code>mkdir -p /usr/local/opt/openssl/lib/ &amp;&amp; cp ./libcrypto.1.0.0.dylib $_)</code></p></li>&#xA;</ol>&#xA;",4202365,"",,"",,2018-08-10T06:45:26,"","",,0,,,
51780952,2,,51780663,2018-08-10T07:12:13,,2,,"<p>you can use Native bind printers on POSIX and Windows OS from Node.js, iojs and node-webkit.</p>&#xA;&#xA;<pre><code>npm install printer --target_arch=ia32&#xA;npm install printer --target_arch=x64&#xA;</code></pre>&#xA;&#xA;<p>Say you are installing 1.4.5 electron. Please check the Releases for supported Electron versions</p>&#xA;&#xA;<pre><code>npm install printer --runtime=electron --target=1.4.5 --target_arch=x64&#xA;npm install printer --runtime=electron --target=1.4.5 --target_arch=ia32&#xA;</code></pre>&#xA;&#xA;<p>For building after install</p>&#xA;&#xA;<pre><code>npm install -g node-gyp&#xA;npm install printer --msvs_version=2013  --build-from-source=node_printer&#xA;</code></pre>&#xA;&#xA;<p><strong>To print file:</strong></p>&#xA;&#xA;<pre><code>// use: node printFile.js [filePath printerName]&#xA;var printer = require(""../lib""),&#xA;    filename = process.argv[2] || __filename;&#xA;&#xA;console.log('platform:', process.platform);&#xA;console.log('try to print file: ' + filename);&#xA;&#xA;if( process.platform != 'win32') {&#xA;  printer.printFile({filename:filename,&#xA;    printer: process.env[3], // printer name, if missing then will print to default printer&#xA;    success:function(jobID){&#xA;      console.log(""sent to printer with ID: ""+jobID);&#xA;    },&#xA;    error:function(err){&#xA;      console.log(err);&#xA;    }&#xA;  });&#xA;} else {&#xA;  // not yet implemented, use printDirect and text&#xA;  var fs = require('fs');&#xA;  printer.printDirect({data:fs.readFileSync(filename),&#xA;    printer: process.env[3], // printer name, if missing then will print to default printer&#xA;    success:function(jobID){&#xA;      console.log(""sent to printer with ID: ""+jobID);&#xA;    },&#xA;    error:function(err){&#xA;      console.log(err);&#xA;    }&#xA;  });&#xA;}&#xA;</code></pre>&#xA;",5700401,"",,"",,2018-08-10T07:12:13,"","",,0,,,
51785393,2,,51785223,2018-08-10T11:20:59,,1,,"<p>Try this see <a href=""https://github.com/electron/electron/blob/master/docs/api/session.md#sesclearstoragedataoptions-callback"" rel=""nofollow noreferrer"">source</a></p>&#xA;&#xA;<pre><code>electronConstants().mySession.clearStorageData([], function (data) {&#xA;    console.log(data);&#xA;})&#xA;</code></pre>&#xA;",2885781,"",,"",,2018-08-10T11:20:59,"","",,0,,,
51818854,2,,51805382,2018-08-13T09:08:48,,0,,"<p><a href=""https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendchannel-arg1-arg2-"" rel=""nofollow noreferrer"">Docs</a> clearly shows that you can pass any number of argument to <code>send</code>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Send a message to the main process asynchronously via channel, you can&#xA;  also send arbitrary arguments. Arguments will be serialized in JSON&#xA;  internally and hence no functions or prototype chain will be included.</p>&#xA;</blockquote>&#xA;&#xA;<p>From that point on you have no restrictions on <em>how</em> to use those arbitrary arguments. It depends on your needs, your codebase style etc.</p>&#xA;",2550156,"",,"",,2018-08-13T09:08:48,"","",,0,,,
51822440,2,,51497025,2018-08-13T12:31:18,,0,,<p>Problem was solved by updating Nightmare to the latest version. Thanks.</p>&#xA;,10127356,"",,"",,2018-08-13T12:31:18,"","",,0,,,
51834889,2,,41364539,2018-08-14T06:23:08,,3,,"<p>I had the same issue, this was my solution:</p>&#xA;&#xA;<p>In renderer:</p>&#xA;&#xA;<pre><code>const { ipcRenderer } = require('electron')&#xA;window._saved = false&#xA;window.onbeforeunload = (e) =&gt; {&#xA;    if (!window.saved) {&#xA;        callSaveAPI(() =&gt; {&#xA;            // success? quit the app&#xA;            window._saved = true&#xA;            ipcRenderer.send('app_quit')&#xA;            window.onbeforeunload = null&#xA;        })&#xA;    }&#xA;    e.returnValue = false&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In main:</p>&#xA;&#xA;<pre><code>const { ipcMain } = require('electron')&#xA;// listen the 'app_quit' event&#xA;ipcMain.on('app_quit', (event, info) =&gt; {&#xA;    app.quit()&#xA;})&#xA;</code></pre>&#xA;",4715721,"",4715721,"",2018-08-15T15:01:25,2018-08-15T15:01:25,"","",,0,,,
51846222,2,,51790513,2018-08-14T16:45:29,,0,,"<p>I use vue-localStorage. For some reason it don't do an Array-to-string conversion right:</p>&#xA;&#xA;<pre><code>this.$localStorage.set('data', data) // data will be not an Array, but an Observer instance&#xA;</code></pre>&#xA;&#xA;<p>This is why I had Object instances stored right, but an error with Arrays. So to fix it you need to work with localStorage directly, like this:</p>&#xA;&#xA;<pre><code>localStorage['data'] = JSON.stringify(data)&#xA;</code></pre>&#xA;&#xA;<p>People, who told me to check localStorage were partly right - the problem was in localStorage yet.</p>&#xA;",10209345,"",102937,"",2019-02-20T20:39:09,2019-02-20T20:39:09,"","",,0,,,
51632431,2,,51631715,2018-08-01T11:43:19,,1,,"<p>In this line:</p>&#xA;&#xA;<pre><code>console.dir(""Information : "" + inf, { depth: null, colors: true });&#xA;</code></pre>&#xA;&#xA;<p>the string concatenation is calling <code>inf.toString()</code>, converting <code>inf</code> to that useless <code>[object Object]</code> string before it even gets to <code>console.dir</code>.  Try this and you may see your data:</p>&#xA;&#xA;<pre><code>console.dir(""Information : "", inf, { depth: null, colors: true });&#xA;</code></pre>&#xA;",4468617,"",,"",,2018-08-01T11:43:19,"","",,1,,,
51776162,2,,51717602,2018-08-09T21:43:35,,7,,<p>After a bit of research I found a command that rebuilds the binaries required correctly.</p>&#xA;&#xA;<pre><code>npm rebuild --runtime=electron --target=1.8.4 --disturl=https://atom.io/download/electron&#xA;</code></pre>&#xA;&#xA;<p>As of this post for electron 1.8.* should work with this.</p>&#xA;,4962223,"",,"",,2018-08-09T21:43:35,"","",,1,,,
51794604,2,,51789711,2018-08-10T22:11:52,,1,,"<p>The <code>Window.on('show')</code> event does not trigger until you set <code>show: false</code> in window options.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>winPodInfo = new BrowserWindow({&#xA;  show: false&#xA;});&#xA;&#xA;winPodInfo.once(""show"", function() {&#xA;  winPodInfo.webContents.send(""channel"", arg);&#xA;});&#xA;&#xA;winPodInfo.once(""ready-to-show"", () =&gt; {&#xA;  winPodInfo.show();&#xA;});&#xA;</code></pre>&#xA;",10209697,"",,"",,2018-08-10T22:11:52,"","",,1,,,
51662815,2,,51573965,2018-08-02T22:12:03,,2,,<p>This is caused by a bug in <code>electron-builder</code> that is present after version 20.15.0 and at least up to version 20.26.0. Install <code>electron-builder@20.15.0</code> and this issue will be fixed.</p>&#xA;,4449035,"",,"",,2018-08-02T22:12:03,"","",,2,,,
51798829,2,,51795352,2018-08-11T10:39:59,,0,,"<blockquote>&#xA;  <p>Actually using WebWorkers (or rather something TinyWorkers)</p>&#xA;</blockquote>&#xA;&#xA;<p>Yes. This is how you move code to a different thread.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Here, there seems to be no elegant way to pass the starting parameters before the worker starts running.</p>&#xA;</blockquote>&#xA;&#xA;<ol>&#xA;<li>Create the worker. Don't have it do anything except listen for <code>postMessage</code> events.</li>&#xA;<li>Send a message to it, with <code>postMessage</code> with the starting parameters</li>&#xA;<li>An event listener in the worker gets the message and starts running the job</li>&#xA;<li>When it is done, <code>postMessage</code> from the work to the main application</li>&#xA;<li>An event listener in the main application gets the message with the results</li>&#xA;</ol>&#xA;",19068,"",,"",,2018-08-11T10:39:59,"","",,2,,,
51831893,2,,49650784,2018-08-13T23:36:53,,6,,"<p>If you have already have the pdf file or you save the pdf before printing ""I assuming it is"", then you can grab the file location then you can use externals process to do the printing using <code>child_process</code>.</p>&#xA;&#xA;<p>You can use <code>lp command</code> or <a href=""http://www.columbia.edu/~em36/pdftoprinter.html"" rel=""noreferrer"">PDFtoPrinter</a> for windows</p>&#xA;&#xA;<pre><code>const ch = require('os');&#xA;&#xA;switch (process.platform) {&#xA;    case 'darwin':&#xA;    case 'linux':&#xA;        ch.exec(&#xA;            'lp ' + pdf.filename, (e) =&gt; {&#xA;                if (e) {&#xA;                    throw e;&#xA;                }&#xA;            });&#xA;        break;&#xA;    case 'win32':&#xA;        ch.exec(&#xA;            'ptp ' + pdf.filename, {&#xA;                windowsHide: true&#xA;            }, (e) =&gt; {&#xA;                if (e) {&#xA;                    throw e;&#xA;                }&#xA;            });&#xA;        break;&#xA;    default:&#xA;        throw new Error(&#xA;            'Platform not supported.'&#xA;        );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I hope it helps.</p>&#xA;&#xA;<p><strong>Edit:</strong>&#xA;You can also use SumatraPDF for windows <a href=""https://github.com/sumatrapdfreader/sumatrapdf"" rel=""noreferrer"">https://github.com/sumatrapdfreader/sumatrapdf</a></p>&#xA;",3387602,"",3387602,"",2018-08-14T00:49:00,2018-08-14T00:49:00,"","",,3,,,
51702132,2,,51701693,2018-08-06T06:59:03,,0,,"<p>Welcome to SO!</p>&#xA;&#xA;<p>What happens is that electron specifies its own environment, while realm runtime loads its binaries based on this currently running environment.</p>&#xA;&#xA;<p>However, when installing realm with npm, we fetch the binaries corresponding to the environment at the time of install, i.e. our node engine.</p>&#xA;&#xA;<p>Therefore when running electron in dev mode, realm does not find the binary corresponding to the electron environment.</p>&#xA;&#xA;<p>The usual workaround is to use the <a href=""https://www.electron.build/"" rel=""nofollow noreferrer"">electron-builder</a> package and run its <code>install-app-deps</code> command, which will install the appropriate binaries for the electron target environment.</p>&#xA;&#xA;<p>It is <a href=""https://www.electron.build/#quick-setup-guide"" rel=""nofollow noreferrer"">usually recommended</a> to make it an automatic script in your <code>package.json</code> file:</p>&#xA;&#xA;<blockquote>&#xA;  <p>To ensure your native dependencies are always matched electron version, simply add script :</p>&#xA;</blockquote>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>""scripts"": {&#xA;  ""postinstall"": ""electron-builder install-app-deps""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>…so that it get run whenever you install a new package.</p>&#xA;",5108796,"",,"",,2018-08-06T06:59:03,"","",,8,,,
35465580,2,,35440382,2016-02-17T19:10:29,,0,,<p>Did the trick by using <code>!important</code> and <code>-webkit-print-color-adjust: exact;</code> on my CSS.</p>&#xA;,1154667,"",,"",,2016-02-17T19:10:29,"","",,0,,,
35548798,2,,35548060,2016-02-22T08:19:36,,0,,"<p>This is not angular's concern. In HTML5 You can use an <a href=""http://www.w3schools.com/html/html5_app_cache.asp"" rel=""nofollow"">appcache</a> for that.</p>&#xA;&#xA;<p>as noted in <a href=""http://www.w3schools.com/"" rel=""nofollow"">http://www.w3schools.com/</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>HTML5 introduces application cache, which means that a web application&#xA;  is cached, and accessible without an internet connection.</p>&#xA;</blockquote>&#xA;&#xA;<p>create a file beside your <code>index.html</code> named <code>resource.appcache</code> </p>&#xA;&#xA;<p>add the link to the following files you want to cache inside <code>resource.appcache</code></p>&#xA;&#xA;<pre><code>CACHE MANIFEST&#xA;# v1.0.0&#xA;https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700&#xA;</code></pre>&#xA;&#xA;<p>then in your html, link it like</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE HTML&gt;&#xA;&lt;html manifest=""resource.appcache""&gt;&#xA;...&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",2773086,"",,"",,2016-02-22T08:19:36,"","",,6,,,
35406404,2,,35400441,2016-02-15T10:03:54,,1,,"<p>On the one hand, it depends on where Electron stores your local storage on disk. This is governed by <a href=""http://electron.atom.io/docs/v0.36.7/api/app/#appgetpathname"" rel=""nofollow"">app</a> module's path for <code>userData</code>. If you look it the corresponding folder, you should find a directory called <code>Local Storage</code> -- that's where your app saves the data. I guess what you're looking for is to use separate storage for your app depending on whether you run it in production/release or development/test mode; this is easy to achieve by setting the <code>userData</code> path when you start your app. For instance, we are using a local folder during development and a tempdir for tests.</p>&#xA;&#xA;<p>Alternatively, take a look at Electron's <a href=""http://electron.atom.io/docs/v0.36.7/api/session/#sessionfrompartitionpartition"" rel=""nofollow"">session</a> module, which you can use to handle multiple session stores.</p>&#xA;",2493332,"",,"",,2016-02-15T10:03:54,"","",,3,,,
35454828,2,,35447035,2016-02-17T11:01:53,,1,,"<p>You just use the <a href=""http://electron.atom.io/docs/v0.36.7/api/menu/#menu"" rel=""nofollow"">Menu</a> module in your main process. Actually, <code>Menu</code> is part of the main process modules anyway, so I'd say this is indeed the 'proper' way to use it. The example in the docs calls it via <code>remote</code> to demonstrate the possibility of setting the menu via the renderer; but you can just call <code>Menu.setApplicationMenu()</code> from the main process directly.</p>&#xA;",2493332,"",,"",,2016-02-17T11:01:53,"","",,1,,,
35475612,2,,35197643,2016-02-18T07:46:20,,1,,"<p>i wrote this <a href=""https://github.com/jstacoder/angular-node-fs"" rel=""nofollow"">example</a>, if you had any questions as to how things are working? you may also want to check out <a href=""https://github.com/jstacoder/node-ng"" rel=""nofollow"">this</a> as well, which the former example uses to work outside of the browser.</p>&#xA;&#xA;<p>but since the main question is regarding the error involving the <code>require</code> function, i will elaborate. <code>require</code> is a function implemented by the node runtime, it was added because there was no way initially built into js to import code from fileA to fileB. so when your in the browser you dont need to require anything, just make sure you have the file added to the html ie: <code>&lt;script src=""my/file.js""&gt;&lt;/script&gt;</code>. but if you really want to do require in the browser, just use <a href=""http://www.sitepoint.com/getting-started-browserify"" rel=""nofollow"">browserfy</a>.</p>&#xA;",3946884,"",3946884,"",2016-02-18T10:59:25,2016-02-18T10:59:25,"","",,3,,,
35515166,2,,35514538,2016-02-19T21:15:55,,1,,"<p>You <em>can</em> use <code>require</code> in electron - it extends the webkit API with this functionality. Basically the whole NPM is at your disposal. Well, some thing will not work, obviously, but <code>require</code> will.</p>&#xA;",162070,"",,"",,2016-02-19T21:15:55,"","",,3,,,
35519460,2,,35514949,2016-02-20T05:19:48,,1,,"<p>Electron doesn't provide that information, you will need to use the relevant platform specific APIs to obtain it. Fortunately it seems like people have already published some NPM packages to get that info, for example the username could be obtained using <a href=""https://github.com/sindresorhus/fullname"" rel=""nofollow"">fullname</a> and the WiFi name could be obtained using <a href=""https://github.com/kevva/wifi-name"" rel=""nofollow"">wifi-name</a>.</p>&#xA;",1259938,"",,"",,2016-02-20T05:19:48,"","",,0,,,
35535960,2,,35531516,2016-02-21T12:14:04,,2,,"<p>Electron allows you to make apps that run node scripts and display UI in a webkit based view.</p>&#xA;&#xA;<p>The purpose of Electron is to provide native OS interactions to node and package everything in a distributable app. It does a fairly decent job covering basic OS interaction, however it is by no means a full API wrapper.</p>&#xA;&#xA;<p>In short, no Electron itself will not do this. I doubt it is worth the time writing a node module for this purpose, you would be far better off writing a native app for whatever platform you are targeting.</p>&#xA;",418710,"",,"",,2016-02-21T12:14:04,"","",,5,,,
35482761,2,,35481748,2016-02-18T13:27:06,,3,,"<p>That was real silly of me</p>&#xA;&#xA;<p>I missed the <code>new</code> keyword.&#xA;plus my loadURL function call is wrong (though i encountered it later and had nothing to do with the above error). In all, this final thing worked for me:</p>&#xA;&#xA;<p><code>main.js</code></p>&#xA;&#xA;<pre><code>'use strict';&#xA;&#xA;const electron      = require('electron');&#xA;const app           = electron.app;&#xA;const BrowserWindow = electron.BrowserWindow;&#xA;&#xA;var mainWindow = null;&#xA;&#xA;app.on('ready', function() {&#xA;    mainWindow = new BrowserWindow({width: 800, height: 600});&#xA;    mainWindow.loadURL('file://' + __dirname + '/index.html');&#xA;&#xA;    mainWindow.on('closed', function() {&#xA;        mainWindow = null;&#xA;    })&#xA;&#xA;});&#xA;</code></pre>&#xA;",2972348,"",,"",,2016-02-18T13:27:06,"","",,1,,,
35509872,2,,35507295,2016-02-19T16:17:06,,3,,"<p>You can use Electron browser with <a href=""https://sites.google.com/a/chromium.org/chromedriver/"" rel=""nofollow"">ChromeDriver</a>. Try creating WebDriver with similar setup:</p>&#xA;&#xA;<pre><code>// If chromediver executable is not in your project directory, &#xA;//  point to it with this system variable&#xA;System.setProperty(""webdriver.chrome.driver"", ""D:\\chromedriver.exe""); &#xA;&#xA;Map&lt;String, Object&gt; chromeOptions = new HashMap&lt;String, Object&gt;();&#xA;chromeOptions.put(""binary"", ""path/to/electron/binary"");&#xA;chromeOptions.put(""args"", Arrays.asList("" path-to-electron-app""));&#xA;//eg.: chromeOptions.put(""binary"", ""D:\\electron-quick-start\\node_modules\\electron-prebuilt\\dist\\electron.exe"");&#xA;//     chromeOptions.put(""args"", Arrays.asList("" D:\\electron-quick-start""));&#xA;//  for some reason the app arg needs to follow a space on my Windows machine&#xA;&#xA;DesiredCapabilities capabilities = new DesiredCapabilities();&#xA;capabilities.setCapability(""chromeOptions"", chromeOptions);&#xA;capabilities.setBrowserName(""chrome"");&#xA;&#xA;WebDriver driver = new ChromeDriver(capabilities);&#xA;</code></pre>&#xA;",1374322,"",1374322,"",2016-02-19T16:53:15,2016-02-19T16:53:15,"","",,1,,,
35437672,2,,35352971,2016-02-16T16:20:09,,5,,"<h1>$*REPO is the 6.c replacement for @INC in Perl 5</h1>&#xA;&#xA;<p>In Perl 5 the <code>@INC</code> variable is a global array of paths to be searched when Perl is looking for modules (analogous to the PATH variable used by many OSes to contain the paths to be searched when that OS is looking for programs).</p>&#xA;&#xA;<p>Until recently Perl 6 had a corresponding <code>@*INC</code> variable.</p>&#xA;&#xA;<p>Having an array for this turned out to be inappropriate for 6.c given concurrent module loading and advanced module selection features introduced by the Perl 6 module repository mechanism.</p>&#xA;&#xA;<p>About a month or two before 6.c a lead dev (Stefan Seifert aka nine) switched module loading to use a chained repo approach via a new <code>$*REPO</code> scalar and obsoleted the include array.</p>&#xA;&#xA;<p>For various reasons they did this without a deprecation period.</p>&#xA;&#xA;<p>Any pre 6.c modules that directly mention <code>@*INC</code> need an update and some haven't yet gotten that update. The Electron module was one such -- until you filed an issue (thanks!) and the module's author responded by <a href=""https://github.com/azawawi/perl6-electron/issues/1"" rel=""nofollow noreferrer"">fixing it</a>.</p>&#xA;&#xA;<p>I'm not aware of any ""official"" design or enduser documentation of <code>$*REPO</code>. The best info is probably to be found by asking user <em>nine</em> on the freenode IRC channel #perl6-toolchain (<a href=""http://colabti.org/irclogger//irclogger_logs/perl6-toolchain"" rel=""nofollow noreferrer"">logs</a>; <a href=""https://kiwiirc.com/client/irc.freenode.net/perl6-toolchain"" rel=""nofollow noreferrer"">join</a>).</p>&#xA;",1077672,"",1077672,"",2018-09-12T21:06:29,2018-09-12T21:06:29,"","",,0,,,
35519353,2,,35518984,2016-02-20T05:05:03,,6,,"<p>Yes it's possible to show the DevTools in a packaged app, just call <code>someBrowserWindow.webContents.openDevTools()</code>. If you want a menu item and/or keyboard shortcut to do it then you'll need to create and set your own menu for the browser window using <code>someBrowserWindow.setMenu(someMenu)</code>.</p>&#xA;",1259938,"",,"",,2016-02-20T05:05:03,"","",,0,,,
35432687,2,,35431750,2016-02-16T12:30:47,,8,,"<p>First you need to understand the difference between the browser process and the renderer process, reading the Electron <a href=""https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md"" rel=""noreferrer"">Quick Start</a>, and a brief overview of the Electron <a href=""https://github.com/ilyavorobiev/atom-docs/blob/master/atom-shell/Architecture.md"" rel=""noreferrer"">architecture</a> should help.</p>&#xA;&#xA;<p>Now, <code>main.js</code> runs in the browser process, <code>index.html</code> runs in the renderer process, so to use <code>electron-cookies</code> you have to load it either directly or indirectly in your <code>index.html</code>. The direct approach would be:</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=""UTF-8""&gt;&#xA;  &lt;script&gt;&#xA;    require('electron-cookies');&#xA;  &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;&#xA;<p></p>&#xA;",1259938,"",,"",,2016-02-16T12:30:47,"","",,0,,,
35426611,2,,34427446,2016-02-16T07:46:35,,27,,"<p>Webpack tries to resolve <code>electron</code> module with the installed node_modules. But the <code>electron</code> module is resolved in Electron itself at runtime. So, you have to  exclude particular module from webpack bundling like this:</p>&#xA;&#xA;<p>webpack.config.js:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>module.exports = {&#xA;  entry: './app.jsx',&#xA;  output: {&#xA;    path: './built',&#xA;    filename: 'app.js'&#xA;  },&#xA;  target: 'atom',&#xA;  module: {&#xA;    loaders: [&#xA;      {&#xA;        loader: 'babel',&#xA;        test: /\.jsx$/,&#xA;        query: {&#xA;          presets: ['es2015', 'react']&#xA;        }&#xA;      }&#xA;    ]&#xA;  },&#xA;  externals: [&#xA;    (function () {&#xA;      var IGNORES = [&#xA;        'electron'&#xA;      ];&#xA;      return function (context, request, callback) {&#xA;        if (IGNORES.indexOf(request) &gt;= 0) {&#xA;          return callback(null, ""require('"" + request + ""')"");&#xA;        }&#xA;        return callback();&#xA;      };&#xA;    })()&#xA;  ]&#xA;};&#xA;</code></pre>&#xA;",448332,"",1511546,"",2016-09-09T02:58:12,2016-09-09T02:58:12,"","",,3,,,
35539560,2,,35529532,2016-02-21T17:42:27,,31,,"<p>You could obtain the filename in the main process and then send it to the renderer process via Electron IPC, for example:</p>&#xA;&#xA;<p>In <code>main.js</code></p>&#xA;&#xA;<pre><code>// mainWindow = new BrowserWindow();&#xA;&#xA;submenu: [{&#xA;  label: '&amp;Open',&#xA;  accelerator: 'Ctrl+O',&#xA;  click: () =&gt; {&#xA;    // popup a dialog to let the user select a file&#xA;    // ...&#xA;    // then send the filename to the renderer process&#xA;    mainWindow.webContents.send('open-file', selectedFilename);&#xA;  }&#xA;}]&#xA;</code></pre>&#xA;&#xA;<p>In <code>index.js</code></p>&#xA;&#xA;<pre><code>import { ipcRenderer } from 'electron';&#xA;&#xA;ipcRenderer.on('open-file', (event, filename) =&gt; {&#xA;  store.dispatch({ type: 'OPEN_FILE', filename });&#xA;});&#xA;</code></pre>&#xA;",1259938,"",192729,"",2016-02-21T21:16:51,2016-02-21T21:16:51,"","",,2,,,
34952805,2,,34898257,2016-01-22T17:38:25,,0,,"<p>I have finally found a way to do it here is the code I used.</p>&#xA;&#xA;<p>var gui = require('nw.gui');</p>&#xA;&#xA;<p>In your a tag for linking in html, create an id = ""GoToWebsite""</p>&#xA;&#xA;document.getElementById('GoToWebsite').onclick = function(){gui.Shell.openExternal('http://www.nickzom.org');};&#xA;",3021594,"",3021594,"",2016-01-22T17:43:50,2016-01-22T17:43:50,"","",,0,,,
34959895,2,,34959809,2016-01-23T05:13:47,,0,,"<p>It is solved by copying the <code>nod_modules</code> folder wich contains the diskdb dependency files to root folder of the project and by using relative path to the diskdb folder in the connection string as,</p>&#xA;&#xA;<pre><code>var db = require('./node_modules/diskdb');&#xA;  db.connect('appDB', ['users']);&#xA;</code></pre>&#xA;",2293455,"",,"",,2016-01-23T05:13:47,"","",,0,,,
35029086,2,,34921903,2016-01-27T04:46:06,,0,,"<p>It turns out the error is in my package.js The </p>&#xA;&#xA;<pre><code>""main"": ""src/index.js"",&#xA;  ""scripts"": {&#xA;    ""test"": ""npm run test:eslint &amp;&amp; npm run test:unit"",&#xA;    ""test:eslint"": ""webpack --config webpack.config.dev.js"",&#xA;    ""test:unit"": ""mocha --compilers js:babel-core/register ./src/**/__tests__/*.js"",&#xA;    ""test:watch"": ""npm test -- --watch"",&#xA;    ""test:coverage"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha ./src/_common/__tests__/*.js"",&#xA;    ""start"": ""node server.js"",&#xA;    ""build"": ""npm run clean &amp;&amp; npm run build:webpack"",&#xA;    ""translate"": ""bash fetch-translation.sh""&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Change the main above to point to your electron file .like</p>&#xA;&#xA;<pre><code>""main"": ""src/electron.js"",&#xA;  ""scripts"": {&#xA;    ""test"": ""npm run test:eslint &amp;&amp; npm run test:unit"",&#xA;    ""test:eslint"": ""webpack --config webpack.config.dev.js"",&#xA;    ""test:unit"": ""mocha --compilers js:babel-core/register ./src/**/__tests__/*.js"",&#xA;    ""test:watch"": ""npm test -- --watch"",&#xA;    ""test:coverage"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha ./src/_common/__tests__/*.js"",&#xA;    ""start"": ""node server.js"",&#xA;    ""build"": ""npm run clean &amp;&amp; npm run build:webpack"",&#xA;    ""translate"": ""bash fetch-translation.sh""&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>in my case . The electron.js is simply the electron js implementation below which is obtainable on the electron github page.</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const app = electron.app;  // Module to control application life.&#xA;const BrowserWindow = electron.BrowserWindow;  // Module to create native browser window.&#xA;&#xA;// Report crashes to our server.&#xA;electron.crashReporter.start();&#xA;&#xA;// Keep a global reference of the window object, if you don't, the window will&#xA;// be closed automatically when the JavaScript object is garbage collected.&#xA;var mainWindow = null;&#xA;&#xA;// Quit when all windows are closed.&#xA;app.on('window-all-closed', function() {&#xA;  // On OS X it is common for applications and their menu bar&#xA;  // to stay active until the user quits explicitly with Cmd + Q&#xA;  if (process.platform != 'darwin') {&#xA;    app.quit();&#xA;  }&#xA;});&#xA;&#xA;// This method will be called when Electron has finished&#xA;// initialization and is ready to create browser windows.&#xA;app.on('ready', function() {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({width: 600, height: 500});&#xA;&#xA;  // and load the index.html of the app.&#xA;  mainWindow.loadURL('file://' + __dirname + '/../public/index.html',{""userAgent"":""Mobile""});&#xA;&#xA;  // Open the DevTools.&#xA;  mainWindow.webContents.openDevTools();&#xA;&#xA;  // Emitted when the window is closed.&#xA;  mainWindow.on('closed', function() {&#xA;    // Dereference the window object, usually you would store windows&#xA;    // in an array if your app supports multi windows, this is the time&#xA;    // when you should delete the corresponding element.&#xA;    mainWindow = null;&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>In this case your electron does not need to be aware of your es6 scripts as it would be handle by babel and rendered on your index.html. index.html is in return rendered on our electron</p>&#xA;",2270185,"",,"",,2016-01-27T04:46:06,"","",,0,,,
35029960,2,,34998608,2016-01-27T06:07:05,,0,,"<pre><code>var SQL = remote.require('sql.js');&#xA;</code></pre>&#xA;&#xA;<p>Why are you doing a remote require here? <code>sql.js</code> is not a built-in main-process module, so there's no reason you can't do a regular <code>require('sql.js')</code> in your renderer-process. You should be very careful about using the <code>remote</code> module, since serialization across process boundaries may have undesirable side-effects (which are documented in the <a href=""https://github.com/atom/electron/blob/v0.36.5/docs/api/remote.md"" rel=""nofollow"">API docs</a>).</p>&#xA;",1259938,"",,"",,2016-01-27T06:07:05,"","",,3,,,
34968106,2,,34962253,2016-01-23T19:53:52,,1,,"<p>You could evaluate a page and send a keydown event using plain JS or jQuery, jQuery is the easy way but it most be injected.</p>&#xA;&#xA;<p>Using jQuery:</p>&#xA;&#xA;<pre><code>.inject('js', '/jquery-2.1.4.min.js')&#xA;.evaluate(function () {&#xA;    var e = $.Event( ""keypress"", { which: 13 } );&#xA;    $('#yourInput').trigger(e);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>EDIT:</strong> Looks like there is support in Nightmare for firing key events. Take a look at <a href=""https://github.com/segmentio/nightmare/issues/244"" rel=""nofollow"">https://github.com/segmentio/nightmare/issues/244</a> and <a href=""https://github.com/segmentio/nightmare/issues/147"" rel=""nofollow"">https://github.com/segmentio/nightmare/issues/147</a>.</p>&#xA;&#xA;<p><strong>EDIT2:</strong> Nope, should be <code>.type('document', '\u000d')</code>. Got the wrong unicode character.</p>&#xA;",1324960,"",1324960,"",2016-01-24T14:23:32,2016-01-24T14:23:32,"","",,2,,,
34971963,2,,34963168,2016-01-24T03:44:08,,1,,"<p>I ran into similar problems as you did and I could fix it by doing the following. </p>&#xA;&#xA;<p>Install Visual Studio Express 2012 or 2010. &#xA;Afterwards Install Python and <strong>make sure</strong> that you set the build path. There is usually a option asking you to set the for you, if you use the installer. </p>&#xA;&#xA;<p>Use the following command to install SQLite</p>&#xA;&#xA;<pre><code>npm install sqlite3 --build-from-source --runtime=node-webkit --target_arch=x64 --target=""0.12.3"" --save&#xA;</code></pre>&#xA;&#xA;<p>Don't forget the <code>--save</code> as it will save the installation to your package.json. This is necessary for node-webkit to find it. </p>&#xA;&#xA;<p><strong>UPDATE</strong>&#xA;With <code>echo %PATH%</code> in cmd you can see your path. Adding Python would look like this <code>set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib</code> &#xA;Depending on where you installed python</p>&#xA;",1551974,"",774183,"",2016-11-17T16:56:39,2016-11-17T16:56:39,"","",,4,,,
34994693,2,,34981122,2016-01-25T14:13:11,,1,,"<blockquote>&#xA;  <p>Is this the correct method of accessing common javascript, or is there a different best-practice?</p>&#xA;</blockquote>&#xA;&#xA;<p>This is indeed how you should be loading <strong>Node modules</strong>, but some of your script files (or third-party libs) may not be written as modules. When Node integration is enabled you can load modules from <code>node_modules</code>, your source directory, or the app ASAR using <code>require</code>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Similarly- aside from a slightly messier folder structure, are there any practical ramifications to this method vs. linking to it via <code>&lt;script&gt;</code> tags in the renderer process?</p>&#xA;</blockquote>&#xA;&#xA;<p><code>&lt;script&gt;</code> tags shove everything into the global namespace, this can be useful in some cases, and some browser libs (like jQuery) expect to be loaded that way. You shouldn't be loading Node modules via <code>&lt;script src=""path/to/module.js""&gt;</code>, though it's perfectly reasonable to call <code>require</code> within a <code>&lt;script&gt;</code> tag.</p>&#xA;",1259938,"",1016716,"",2016-01-31T11:06:15,2016-01-31T11:06:15,"","",,0,,,
35054862,2,,35026158,2016-01-28T07:06:32,,1,,"<p>I don't think that nwjs includes this feature. If you choose to write your own mechanism, try <a href=""https://www.npmjs.com/package/request-progress"" rel=""nofollow noreferrer"">request-progress</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Tracks the download progress of a request made with mikeal/request,&#xA;  giving insight of various metrics including progress percent, download&#xA;  speed and time remaining</p>&#xA;</blockquote>&#xA;&#xA;<p>check <a href=""https://stackoverflow.com/questions/18323152/get-download-progress-in-node-js-with-request"">this answer</a> for more options.</p>&#xA;",1393862,"",-1,"",2017-05-23T11:52:25,2016-01-28T07:12:11,"","",,1,,,
35063715,2,,35062031,2016-01-28T14:06:43,,1,,"<p>The function of the child_process library you are importing is execFile, but you use it to run a shell command and not to run an executable file.</p>&#xA;&#xA;<p>Just change :</p>&#xA;&#xA;<pre><code>var exec = require('child_process').execFile;&#xA;</code></pre>&#xA;&#xA;<p>To:</p>&#xA;&#xA;<pre><code>var exec = require('child_process').exec;&#xA;</code></pre>&#xA;&#xA;<p>And it should work!</p>&#xA;",3824918,"",,"",,2016-01-28T14:06:43,"","",,0,,,
35080022,2,,35079539,2016-01-29T08:33:18,,1,,"<p>If your tests load built-in Electron modules you have to run them within an Electron process, built-in Electron modules are not available in a regular Node process (which is what you get if you just run <code>jest</code> from the commandline).</p>&#xA;",1259938,"",,"",,2016-01-29T08:33:18,"","",,2,,,
35091794,2,,35089343,2016-01-29T18:44:51,,1,,"<p>I'm going to assume you're doing this in the main process, if so you might want to check if you have another <code>electron</code> module installed somewhere, as mentioned in the FAQ: <a href=""https://github.com/atom/electron/blob/v0.36.6/docs/faq/electron-faq.md#requireelectronxxx-is-undefined"" rel=""nofollow"">https://github.com/atom/electron/blob/v0.36.6/docs/faq/electron-faq.md#requireelectronxxx-is-undefined</a></p>&#xA;",1259938,"",,"",,2016-01-29T18:44:51,"","",,1,,,
35129838,2,,35122014,2016-02-01T11:51:19,,1,,"<p>Use hash history as of react-router 1.0.3:</p>&#xA;&#xA;<pre><code>// history.js&#xA;import createHashHistory from 'history/lib/createHashHistory';&#xA;export default createHashHistory();&#xA;</code></pre>&#xA;&#xA;<p>Rendering:</p>&#xA;&#xA;<pre><code>// index.js&#xA;import history from './history'&#xA;render(&lt;Router history={ history }/&gt;, el);&#xA;</code></pre>&#xA;&#xA;<p>And route as following:</p>&#xA;&#xA;<pre><code>// action.js&#xA;import history from './history';&#xA;history.replaceState(null, '/some/path');&#xA;</code></pre>&#xA;&#xA;<p>Read <a href=""https://github.com/rackt/react-router/blob/v1.0.3/docs/guides/basics/Histories.md"" rel=""nofollow"">doc</a> for detail.</p>&#xA;",1217590,"",,"",,2016-02-01T11:51:19,"","",,0,,,
34951856,2,,34892201,2016-01-22T16:47:51,,2,,<p>Build the application is using the old version</p>&#xA;&#xA;<pre><code>nwbuild ./ -p linux64 /path/to/myapp -v v0.12.3&#xA;</code></pre>&#xA;,5822480,"",,"",,2016-01-22T16:47:51,"","",,1,,,
35054723,2,,35030531,2016-01-28T06:57:47,,2,,"<p>If the middle section is a series of remote pages, then I think you should look at <a href=""https://github.com/atom/electron/blob/master/docs/api/web-view-tag.md"" rel=""nofollow"">Webview</a>, which is a piece provided by electron for this purpose. </p>&#xA;&#xA;<p>If the middle section is a series of content that you would have locally in your electron app, I recommend using something like <a href=""https://angularjs.org"" rel=""nofollow"">Angular</a> or <a href=""https://facebook.github.io/react/"" rel=""nofollow"">React</a> in your app, both of which have SOLID support for updating only a few subsections of your app at a time. </p>&#xA;",586809,"",,"",,2016-01-28T06:57:47,"","",,1,,,
35079554,2,,34873860,2016-01-29T08:03:25,,2,,"<p>This is the only way I got it to work with edge-atom-shell:<br>&#xA;> npm install --save-dev electron-prebuilt<br>&#xA;> npm install edge-atom-shell<br>&#xA;> cd node_modules/edge-atom-shell/<br>&#xA;> node-gyp configure --msvs_version=2013<br>&#xA;> HOME=~/.electron-gyp node-gyp rebuild --target=0.36.6 --arch=x64 --dist-url=<a href=""https://atom.io/download/atom-shell"" rel=""nofollow"">https://atom.io/download/atom-shell</a></p>&#xA;",360674,"",,"",,2016-01-29T08:03:25,"","",,2,,,
34934129,2,,34933840,2016-01-21T20:55:22,,3,,"<p>Since you are using <code>electron-packager</code> anyway, look into using the <code>--icon</code> option (<a href=""https://github.com/maxogden/electron-packager#programmatic-api"" rel=""nofollow"">see here</a>).</p>&#xA;&#xA;<p>If you want to do it manually, look into the contents of your tE.app: open it in the Terminal, it's just a folder, or right-click in Finder and open package contents -- that's were you will find the contents you're missing.</p>&#xA;",2493332,"",,"",,2016-01-21T20:55:22,"","",,2,,,
35119916,2,,35109367,2016-01-31T21:48:07,,4,,"<p>The problem lay with this line:</p>&#xA;&#xA;<pre><code>async.each(urls, load, function (err) {&#xA;</code></pre>&#xA;&#xA;<p>By default, <code>async</code> runs <code>each</code> in parallel (<a href=""https://github.com/caolan/async#eacharr-iterator-callback"" rel=""nofollow"">see the documentation here</a>, if you're curious).  Nightmare is not capable of executing multiple requests in parallel, and as such, doing so will result in errant results like what you're seeing.</p>&#xA;&#xA;<p>The solution is straightforward: switch to using <code>async.eachSeries</code>.  That will guarantee your requests will be run in series, allowing Nightmare to work as designed.</p>&#xA;",1139700,"",,"",,2016-01-31T21:48:07,"","",,1,,,
35043479,2,,35039240,2016-01-27T16:57:27,,6,,"<p>You've set the height of the <code>webview</code> to <code>100%</code>, but didn't set an explicit height for the parent (in this case the <code>body</code>). Giving the <code>body</code> and explicit size should fix your problem:</p>&#xA;&#xA;<pre><code>body {&#xA;    width: 100vw;&#xA;    height: 100vh;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>See also:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://stackoverflow.com/questions/4789835/setting-height-100-on-my-label-element-doesnt-work"">Setting height: 100% on my label element doesn&#39;t work</a></li>&#xA;<li><a href=""https://stackoverflow.com/questions/6654958/make-body-have-100-of-the-browser-height"">Make body have 100% of the browser height</a></li>&#xA;</ul>&#xA;",1259938,"",-1,"",2017-05-23T10:27:57,2016-01-27T16:57:27,"","",,0,,,
35090442,2,,35090014,2016-01-29T17:25:28,,6,,"<p>Actually, <a href=""https://github.com/atom/electron/blob/master/docs/api/menu.md"" rel=""noreferrer"">the documentation</a> says that it's designed to be used in the Main process, although you can use it in Renderer with the <code>remote</code> module:</p>&#xA;&#xA;<blockquote>&#xA;  <p>This module is a main process module which can be used in a render process via the <code>remote</code> module.</p>&#xA;</blockquote>&#xA;&#xA;<p>So, wherever you have your Main process, you just need to do:</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const Menu = electron.Menu;&#xA;&#xA;mainWindow = new BrowserWindow({width: 800, height: 600});&#xA;&#xA;var menu = new Menu();&#xA;&#xA;// Prepare your menu's content ...&#xA;&#xA;Menu.setApplicationMenu(menu);&#xA;</code></pre>&#xA;",5744659,"",5744659,"",2016-01-29T18:20:27,2016-01-29T18:20:27,"","",,2,,,
35022140,2,,35019166,2016-01-26T19:23:24,,9,,"<p>If you only want to log the contents you can write them to the Main process stdout directly using <a href=""http://electron.atom.io/docs/v0.36.5/api/remote/#remote-process"" rel=""noreferrer"">Electron's <code>remote.process</code></a> directly from the Renderer, but if you want to send the contents to the Main process IPC is probably the best way (you could also use files, sockets etc.).</p>&#xA;&#xA;<p>Here is a very quick example of how you could do this all from your main.js file (but I'd suggest to use a separate file for the Renderer code and require it using BrowserWindow's 'preload' option, this is just for illustrative purposes).</p>&#xA;&#xA;<pre><code>var electron = require('electron');&#xA;var ipc = electron.ipcMain;&#xA;var BrowserWindow = electron.BrowserWindow;&#xA;&#xA;var win = new BrowserWindow({ width: 800, height: 600, show: false });&#xA;&#xA;win.webContents.on('dom-ready', () =&gt; {&#xA;  win.webContents.executeJavaScript(`&#xA;    require('electron').ipcRenderer.send('gpu', document.body.innerHTML);&#xA;  `);&#xA;});&#xA;&#xA;ipc.on('gpu', (_, gpu) =&gt; {&#xA;  console.log(gpu)&#xA;})&#xA;&#xA;win.loadURL('chrome://gpu');&#xA;</code></pre>&#xA;",2493332,"",700228,"",2016-09-19T04:06:31,2016-09-19T04:06:31,"","",,1,,,
44002060,2,,44000667,2017-05-16T12:53:31,,2,,"<p>Don't show the dialog...? Just replace <code>files[0]</code> with the known filename and path.</p>&#xA;&#xA;<p>e.g.</p>&#xA;&#xA;<pre><code>fs.readFile('/path/to/your/file', 'utf8', (err, res) =&gt; {&#xA;  if (!err) {&#xA;    editor.setModel(monaco.editor.createModel(res, 'javascript'));&#xA;  }&#xA;})&#xA;</code></pre>&#xA;",31280,"",,"",,2017-05-16T12:53:31,"","",,0,,,
44003433,2,,44003324,2017-05-16T13:52:30,,0,,"<p>Probably a bug in VSCODE. I rolled electron back to 1.6.7 and it works again. I filed an issue on <a href=""https://github.com/Microsoft/vscode/issues/26693"" rel=""nofollow noreferrer"">github</a>.</p>&#xA;",959460,"",,"",,2017-05-16T13:52:30,"","",,0,,,
44003613,2,,44002484,2017-05-16T13:59:58,,0,,"<p>This works, although it seems like additional overhead as a lookup:</p>&#xA;&#xA;<p>On <code>main.js</code></p>&#xA;&#xA;<pre><code>foo(mainWindow.id)&#xA;</code></pre>&#xA;&#xA;<p>On <code>foo.js(id: number)</code></p>&#xA;&#xA;<pre><code>const win = BrowserWindow.fromId(id);&#xA;win.webContents.send('toast', 'woohoo');&#xA;</code></pre>&#xA;&#xA;<p>I welcome any more efficient method.</p>&#xA;",2142239,"",,"",,2017-05-16T13:59:58,"","",,0,,,
44005254,2,,43989408,2017-05-16T15:10:23,,2,,"<p><strong>I finally figured it out.</strong></p>&#xA;&#xA;<p>In your <code>project.json</code> file, the command you use to build your application is where the code will go.</p>&#xA;&#xA;<p>The part you're looking for is <code>--version-string.ProductName=\""My App Name\""</code> and is found in <code>""scripts"": { ""build"": ""YOUR CODE HERE""}</code>:</p>&#xA;&#xA;<p><strong><em>Side note... I'm using electron-packager.</em></strong></p>&#xA;&#xA;<p>Here's an example using my code:<br />&#xA;<code>""pack:win64"": ""electron-packager ./ --overwrite --asar=true --platform=win32 --arch=x64 --ignore=assets --ignore=build --ignore=installers --icon=./images/icons/icon.ico --prune=true --out=build/win --version-string.ProductName=\""My App Name\""""</code></p>&#xA;",3439244,"",3439244,"",2017-05-17T11:56:31,2017-05-17T11:56:31,"","",,0,,,
44019718,2,,43996775,2017-05-17T08:40:10,,2,,"<p>First, you have several flaws in your code:</p>&#xA;&#xA;<ul>&#xA;<li><code>addon.cc</code>: <code>FunctionCallbackInfo</code> and <code>Local</code> must have template parameters. Corrected function signatures are:</li>&#xA;</ul>&#xA;&#xA;<pre class=""lang-cpp prettyprint-override""><code>void hello(const FunctionCallbackInfo&lt;Value&gt;&amp; args)&#xA;void Init(Local&lt;Object&gt; exports)&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li><code>package.json</code>: Your entry point should be</li>&#xA;</ul>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>""main"": ""main.js"",&#xA;</code></pre>&#xA;&#xA;<p>Second, you have to build your addon specifically to <code>electron</code> as described in <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/using-native-node-modules.md#manually-building-for-electron"" rel=""nofollow noreferrer"">guide</a>. For example, building it to latest <code>electron</code> release (1.4.13) use the following command:</p>&#xA;&#xA;<pre><code>node-gyp configure build --target=1.4.13 --arch=x64 --dist-url=https://atom.io/download/electron&#xA;</code></pre>&#xA;&#xA;<p><em>(<code>--arch</code> flag according to your platform)</em></p>&#xA;&#xA;<p>After all of these, it runs successfully with</p>&#xA;&#xA;<pre><code>npm run start&#xA;</code></pre>&#xA;&#xA;<p>printing <code>This should be eight: world</code> to console</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>As you don't use your <code>index.html</code> anywhere in your code - although probably your goal is to print there - you can try these improved <code>main.js</code> and <code>index.html</code>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow } = require('electron')&#xA;const path = require('path')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  new BrowserWindow().loadURL(path.join(__dirname, 'index.html'))&#xA;})&#xA;</code></pre>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;title&gt;My C++ App&lt;/title&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;div&gt;&#xA;      &lt;h1&gt;&#xA;        Hello &#xA;        &lt;script&gt;document.write(require('./build/Release/addon').hello())&lt;/script&gt;&#xA;      &lt;/h1&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Result showing <code>Hello world</code> in browser window</p>&#xA;&#xA;<p><img src=""https://i.imgur.com/IBpyHkD.png"" alt=""""></p>&#xA;",2550156,"",2550156,"",2017-05-17T09:19:48,2017-05-17T09:19:48,"","",,0,,,
44019848,2,,43888114,2017-05-17T08:45:56,,0,,"<p>This is a solution, it illustrate how to achieve this, the structure is quite unpretty.</p>&#xA;&#xA;<p>This library will be used : <a href=""https://github.com/sidorares/node-x11"" rel=""nofollow noreferrer"">https://github.com/sidorares/node-x11</a></p>&#xA;&#xA;<pre><code>const x11 = require( 'x11' );&#xA;var X;&#xA;</code></pre>&#xA;&#xA;<p>Using electron, we create a browser window with an arbitrary window title.</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow(&#xA;    x: 0,&#xA;    y: 0,&#xA;    frame: false,&#xA;    type: 'dock',&#xA;    title: 'myTitle'&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>There is a limitation here : this window name must be unique because it will be used to retrieve the window id (that will be used to apply the property)</p>&#xA;&#xA;<p>Two functions will be needed : to retrieve a window name using its id and to retrieve a window id using its name :</p>&#xA;&#xA;<pre><code>var getWindowName = function( wid ) {&#xA;    return new Promise( function( resolve, reject ) {&#xA;        X.InternAtom(false, '_NET_WM_NAME', function (wmNameErr, wmNameAtom) {&#xA;            X.InternAtom(false, 'UTF8_STRING', function (utf8Err, utf8Atom) {&#xA;                X.GetProperty(0, wid, wmNameAtom, utf8Atom, 0, 10000000, function(err, nameProp) {&#xA;                    if( err ) {&#xA;                      reject( err );&#xA;                    }&#xA;                    resolve( nameProp.data.toString() );&#xA;                });&#xA;            });&#xA;        });&#xA;    });&#xA;}&#xA;&#xA;&#xA;var getWindowId = function (name) {&#xA;&#xA;    return new Promise( function( resolve, reject ) {&#xA;        x11.createClient(function( err, display ) {&#xA;          X = display.client;&#xA;          var root = display.screen[0].root;&#xA;          X.QueryTree(root, function(err, tree) {&#xA;              tree.children.map( function( id ) {&#xA;                  let prop = getWindowName( id ).then( function( n ) {&#xA;                      if( n === name ) {&#xA;                          resolve( id );&#xA;                      }&#xA;                  })&#xA;              } );&#xA;          }) &#xA;        });&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>To get the window id, we have to retrieve all windows from the root and loop on them. For each, the function compare their name with the searched one. </p>&#xA;&#xA;<p>We assume that the <code>getWindowId</code> function will be called one time at the starting point so we instanciate the X client inside, but it should not be this way in a real app.</p>&#xA;&#xA;<p>Finally, we need a function to set the <code>_NET_WM_STRUT_PARTIAL</code> property :</p>&#xA;&#xA;<pre><code>  var setStrutValues = function (wid, &#xA;    left, right, top, bottom, &#xA;    left_start_y, left_end_y, right_start_y, right_end_y, &#xA;    top_start_x, top_end_x, bottom_start_x, bottom_end_x ) {&#xA;&#xA;    var values = new Buffer( 4 * 12 );&#xA;    values.writeUInt32LE(left           ,0*4 );&#xA;    values.writeUInt32LE(right          ,1*4 );&#xA;    values.writeUInt32LE(top            ,2*4 );&#xA;    values.writeUInt32LE(bottom         ,3*4 );&#xA;    values.writeUInt32LE(left_start_y   ,4*4 );&#xA;    values.writeUInt32LE(left_end_y     ,5*4 );&#xA;    values.writeUInt32LE(right_start_y  ,6*4 );&#xA;    values.writeUInt32LE(right_end_y    ,7*4 );&#xA;    values.writeUInt32LE(top_start_x    ,8*4 );&#xA;    values.writeUInt32LE(top_end_x      ,9*4 );&#xA;    values.writeUInt32LE(bottom_start_x ,10*4 );&#xA;    values.writeUInt32LE(bottom_end_x   ,11*4 );&#xA;&#xA;    X.InternAtom( false, '_NET_WM_STRUT_PARTIAL', function( err, strutAtom ) {&#xA;        X.ChangeProperty(0, wid, strutAtom, X.atoms.CARDINAL, 32, values) ;&#xA;    } );&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>Using all of this, we can do :</p>&#xA;&#xA;<pre><code>getWindowId( 'myTitle' ).then( function( wid ) {&#xA;    setStrutValues( wid, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0 );&#xA;} )&#xA;</code></pre>&#xA;",1643930,"",,"",,2017-05-17T08:45:56,"","",,0,,,
44020426,2,,40248844,2017-05-17T09:12:17,,1,,"<p>You probably already found the answer, but I though I would share my solution. For me it was to move the <code>babel</code> section out next to the <code>ava</code> section like so:</p>&#xA;&#xA;<pre><code>{&#xA;  ""ava"": { ... ava config ... },&#xA;  ""babel"": { ... babael config ... }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Full example</p>&#xA;&#xA;<pre><code>{&#xA;  ""ava"": {&#xA;    ""files"": [&#xA;      ""./app/**/*.spec.js""&#xA;    ],&#xA;    ""source"": [&#xA;      ""./app/**/*.{js,jsx}""&#xA;    ],&#xA;    ""concurrency"": 5,&#xA;    ""failFast"": true,&#xA;    ""require"": [&#xA;      ""babel-register"",&#xA;      ""ignore-styles"",&#xA;      ""./app/test/setup.js""&#xA;    ]&#xA;  },&#xA;  ""babel"": {&#xA;    ""babelrc"": false,&#xA;    ""presets"": [&#xA;      ""es2015"",&#xA;      ""react""&#xA;    ]&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The reason being that this is what babel search for. Either a <code>package.json</code> config or a <code>.babelrc</code> file. </p>&#xA;",351835,"",,"",,2017-05-17T09:12:17,"","",,0,,,
44047009,2,,44040033,2017-05-18T11:53:40,,1,,"<p>It sounds to me like the window borders (and scrollbar, for example) are not taken into account. You can take those into account by first setting the size you want, then reading the actual size you have and updating the size to what you want plus the difference you detected.</p>&#xA;&#xA;<pre><code>// get elementWidth in some way&#xA;var remote = require('electron').remote,&#xA;    win = remote.getCurrentWindow();&#xA;win.setMinimumSize(elementWidth, 400);&#xA;// check size, update window width&#xA;var contentWidth = window.innerWidth;&#xA;if (contentWidth !== elementWidth) {&#xA;  win.setMinimumSize(2 * elementWidth - contentWidth, 400);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Alternatively, you can use the <a href=""https://electron.atom.io/docs/api/browser-window/#winsetcontentsizewidth-height-animate"" rel=""nofollow noreferrer""><code>win.setContentSize</code></a> method directly, which should achieve what you want (although it does not enforce a minimum size, obviously...</p>&#xA;&#xA;<pre><code>// get elementWidth in some way&#xA;var remote = require('electron').remote,&#xA;    win = remote.getCurrentWindow();&#xA;win.setContentSize(elementWidth, 400);&#xA;</code></pre>&#xA;",962603,"",,"",,2017-05-18T11:53:40,"","",,0,,,
44063433,2,,44063144,2017-05-19T06:58:51,,2,,"<p>It is copying an environment variable to a local variable. Any software can set environment variables but going by the name I'd suggest it is a variable that the user should set in their shell prior to running the software to define the device node of the wifi hardware (ie: /dev/eth0 or equivalent) that the software should communicate with.</p>&#xA;&#xA;<pre><code>export WIFI_INTERFACE=/dev/eth0&#xA;</code></pre>&#xA;&#xA;<p>Windows also supports environment variables usually set via the ""System"" control panel.</p>&#xA;&#xA;<p>If you want a more specific answer you'll really need to look at the source code and/or documentation.</p>&#xA;",108741,"",,"",,2017-05-19T06:58:51,"","",,0,,,
44073973,2,,43929836,2017-05-19T15:35:31,,3,,"<p>NeDB is working correctly.  Updates to data are appended at the end of the file until NeDB ""compacts"" the data.</p>&#xA;&#xA;<p>You can manually compact the data with the command: chats.persistence.compactDatafile()</p>&#xA;&#xA;<p>For more information see:&#xA;<a href=""https://github.com/louischatriot/nedb#persistence"" rel=""nofollow noreferrer"">https://github.com/louischatriot/nedb#persistence</a></p>&#xA;",5971970,"",,"",,2017-05-19T15:35:31,"","",,0,,,
44077165,2,,44077073,2017-05-19T18:54:35,,2,,"<p>Your function returns all files in the folder, including the hidden .DS_Store file. You can choose to ignore just that file</p>&#xA;&#xA;<pre><code>fs.readdirSync(folderUrl).forEach(file =&gt; { if(file != "".DS_Store""){options.push(file)}})&#xA;</code></pre>&#xA;&#xA;<p>All files that start with . (usually hidden files)</p>&#xA;&#xA;<pre><code>fs.readdirSync(folderUrl).forEach(file =&gt; { if(file[0] != "".""){options.push(file)}})&#xA;</code></pre>&#xA;&#xA;<p>Ignore all files that don't have the a specific extension</p>&#xA;&#xA;<pre><code>fs.readdirSync(folderUrl).forEach(file =&gt; { if(file.includes("".html"") || file.includes("".js"") || file.includes("".txt"")){options.push(file)}})&#xA;</code></pre>&#xA;",4575011,"",,"",,2017-05-19T18:54:35,"","",,0,,,
44085105,2,,44081685,2017-05-20T11:02:07,,1,,"<p>First of all, there isn't a short answer to your question. Each of the subjects can be delved into for days, weeks, or months to understand and master. I will try to use metaphors for all related topics in your question.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Q: What is Babel and why do I need it?</p>&#xA;</blockquote>&#xA;&#xA;<p>JavaScript has evolved over the past few years. A lot!. JavaScript today has so many new words and sentence structures that old browsers simply can't understand without a translator. Babel is that translator. Modern browsers today (Chrome, Firefox, Edge, Safari) can natively understand most of that modern version of JavaScript, or as cool kids call it ECMAScript2015, or ES2015, or ES6, etc. </p>&#xA;&#xA;<p>Even so, ES(JavaScript) is constantly evolving. New features are being added in stages and babel is keeping up with these stage features, literally translating all these new features into plain old JavaScript that all browsers, regardless of age, can understand. You can play with babel and see what it does here: <a href=""https://babeljs.io/repl/"" rel=""nofollow noreferrer"">https://babeljs.io/repl/</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Q: What is React?</p>&#xA;</blockquote>&#xA;&#xA;<p>React is just one of many modern front-end frameworks to help you display your data in an efficient way.</p>&#xA;&#xA;<p>If IKEA produced LEGO for developers, it would be called React. React let's you create LEGO blocks (called components) and put them together to create an app. React components can be purely presentational(or 'dumb'), meaning they will simply return some HTML, or they can be 'smart'. Smart components can have something called a <em>state</em>. </p>&#xA;&#xA;<p>If we go back to the LEGO analogy, the <em>state</em> would be the engine in a LEGO Technics set. If a component was a plain old LEGO car, it would need some outside help to get it moving forward. You push the car with your hand and it moves forward. With a smart component, or a LEGO technics engine, your LEGO Technics car can change its <em>state</em> from resting to moving on its own when the engine starts, intrinsically pushing the car forward from within. So whenever the state changes, your car <em>REACTS</em> and changes. The same goes for a component. React will watch for changes in the state of your component and whenever there's a change (usually triggered by a user event) the component will update. React components can be written in plain old javascript, but ES6 is encouraged, and makes your life as a React developer a lot easier. Thus, you will need a translator, like Babel, to make your React app understandable in the browser.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Q: Redux?</p>&#xA;</blockquote>&#xA;&#xA;<p>Ok, I will simply stop you here and tell you that at this point you don't need Redux to create a React app. Redux is a library that can be used in combination with any framework or on its own with vanilla JavaScript. What Redux does is give you the ability to abstract your application <em>model</em> or data away in something Redux calls a store. A store can be anything, an array, an object, literally anything. Redux's job is to update that store anytime it receives and action.</p>&#xA;&#xA;<p>Let's imagine Redux is a living person called John. John is given an empty cup (the store). Each time John is told 'pour water', John will grab the cup and pour some water in it. The 'pour water' command is our action. John can listen for other actions, for instance 'empty cup'. Each action goes through a processing unit - John's brain (the reducer of the actions). If John was brainless, he wouldn't be able to execute any of the actions. When John receives a 'empty cup' command he throws the water away. You can teach John however many actions you want, and you can give John a different store to execute those actions on. The important takeaway here is that John has a store(the cup), a reducer(the brain) and is given some actions to execute. So the action, goes through the reducer and based on what the reducer decides, it updates the store. So in JavaScript terms the reducer is a function, which takes an action and returns a store. The action is a plain javascript object, which has a type property ('pour'), and it can also have some payload ('water'). So basically you can tell John, 'pour water' in the cup, where pour is the action type and the payload is water.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Q: React-Redux?</p>&#xA;</blockquote>&#xA;&#xA;<p>Think of react-redux as a scotch-tape that lets you fuse react and redux together, so that each component can send an action to the reducer, and each component can have access to the store.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Q: Webpack?</p>&#xA;</blockquote>&#xA;&#xA;<p>So with the above example we already have several libraries. Babel, React, Redux, React-Redux, and who knows how many other libraries, assets, files and what not you will need in your project. Probably what you are used to is importing each of them in your index.html using the script, image, link tags. Well, overly simplified, webpack does that for you! Whenever some module in your app depends on another module, asset, or anything else, webpack will recursively look for all dependencies and put them together in one file. You simply import that one file in your index.html and you forget about it. Webpack can do many other things for you, but that's the gist of it, hence why it's called module bundler.</p>&#xA;&#xA;<p>Whew, that's about it. You are a real hero if you got this far, and I admire your patience. </p>&#xA;&#xA;<p>P.S.</p>&#xA;&#xA;<p>A really great (and funny) article to help you get up to date with all these libraries and frameworks is this one:&#xA;<a href=""https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f"" rel=""nofollow noreferrer"">https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f</a></p>&#xA;",6272557,"",,"",,2017-05-20T11:02:07,"","",,0,,,
44086869,2,,44086533,2017-05-20T14:10:17,,1,,"<p><code>url: 'https://imdb.com/'</code>&#xA;Make it just &#xA;<code>url: 'http://imdb.com/'</code>&#xA;If you try navigating to <a href=""https://imdb.com"" rel=""nofollow noreferrer"">https://imdb.com</a> in any other browser you get redirected to <a href=""http://imdb.com"" rel=""nofollow noreferrer"">http://imdb.com</a>. It seems they don't provide https: on their homepage. Changing the code to use the http version made it work for me.</p>&#xA;",2116959,"",,"",,2017-05-20T14:10:17,"","",,0,,,
44089151,2,,44069505,2017-05-20T17:54:36,,0,,"<p>Finally found the fix. This has nothing to do with the order or imports or  tags inside index.html as I was originaly suspecting.&#xA;This is related to <a href=""https://github.com/angular/zone.js/issues/537"" rel=""nofollow noreferrer"">This issue causing angular to drop out the zone</a>. So the solution was to use Zone.current.wrap like mentioned in the issue workaround...</p>&#xA;",704681,"",704681,"",2017-05-21T15:21:05,2017-05-21T15:21:05,"","",,0,,,
44092039,2,,44092007,2017-05-21T00:22:53,,0,,"<p>If all of the functions are methods of the object <code>toasts</code>, then you should be able to use bracket notation as follows:</p>&#xA;&#xA;<pre><code>export default (func) =&gt; toasts[func] ? toasts[func]():null;&#xA;</code></pre>&#xA;&#xA;<p>The arrow function will the return the result of the ternary operator  (he value that <code>toasts[func]</code> evaluates to of it exists or <code>null</code>)</p>&#xA;&#xA;<p>If there is a method on <code>toasts</code> that matches the variable <code>func</code>, this is what will be returned.</p>&#xA;",2902660,"",2902660,"",2017-05-21T00:36:58,2017-05-21T00:36:58,"","",,0,,,
44114660,2,,40469490,2017-05-22T13:51:36,,0,,<p>So this has already been a while but I completed this project successfully 5 months ago.</p>&#xA;&#xA;<p>I completed it by writing my own sync functions and storing everything using ng2-webstorage. This was very easy to use with Angular 2.</p>&#xA;,5423101,"",,"",,2017-05-22T13:51:36,"","",,0,,,
44138739,2,,44127151,2017-05-23T15:12:35,,3,,"<p>You can create array of references to BrowserWindow instances and when global event is necessary you can map it with sender function, like this for example:</p>&#xA;&#xA;<pre><code>let windows = [];&#xA;&#xA;let backgroundComputation = new BrowserWindow(options);&#xA;let webInteractions = new BrowserWindow(different_options);&#xA;let imageProcessing = new BrowserWindow(another_options);&#xA;&#xA;windows.push(backgroundComputation)&#xA;windows.push(webInteractions)&#xA;windows.push(imageProcessing)&#xA;&#xA;let sender = (message, windows) =&gt; &#xA;        windows.map((ref) =&gt; ref.webContents.send('event_name', message))&#xA;</code></pre>&#xA;&#xA;<p>This will probably be handy if you have whole bunch of them. You can also set flag in options <code>alwaysOnTop:true</code> to true for window on top so any other window will stay underneath. Hope this helps!</p>&#xA;",5715298,"",5715298,"",2017-05-23T15:18:18,2017-05-23T15:18:18,"","",,0,,,
44156640,2,,41953889,2017-05-24T11:09:36,,1,,"<p>From packager <a href=""https://github.com/electron-userland/electron-packager"" rel=""nofollow noreferrer"">github page</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Be careful not to include <code>node_modules</code> you don't want into your final app. If you put them in the <code>devDependencies</code> section of <code>package.json</code>, by default none of the modules related to those dependencies will be copied in the app bundles. (This behavior can be turned off with the <code>--no-prune</code> flag.)</p>&#xA;</blockquote>&#xA;&#xA;<p>From electron-packager <a href=""https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#prune"" rel=""nofollow noreferrer"">API page</a> about <code>--prune</code> flag</p>&#xA;&#xA;<blockquote>&#xA;  <p>Runs the package manager command to remove all of the packages specified in the <code>devDependencies</code> section of <code>package.json</code> from the outputted Electron app.</p>&#xA;</blockquote>&#xA;&#xA;<p>You should be able to simply put all packages except <code>mqtt</code> in <code>devDependencies</code> and run packaging</p>&#xA;",7185919,"",7185919,"",2017-05-24T12:22:03,2017-05-24T12:22:03,"","",,0,,,
44166086,2,,43641804,2017-05-24T18:30:48,,1,,"<p>I was able to load a .db file using the node module sqlite3 and included a javascript function as such:</p>&#xA;&#xA;<pre><code>var sqlite3 = require('sqlite3').verbose();&#xA;let dbSrc = 'processlist.db';&#xA;&#xA;var fetchDBData = (tablename) =&gt; {&#xA;  var db = new sqlite3.Database(dbSrc);&#xA;  var queries = [];&#xA;    db.each(""SELECT * FROM "" + tablename, function(err, row) {&#xA;        queries.push(row);&#xA;    });&#xA;&#xA;&#xA;    db.close();&#xA;    return queries;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Since I am using React and Redux for my front end, I was able to invoke this function by calling </p>&#xA;&#xA;<pre><code>window.fetchDBData(tablename);&#xA;</code></pre>&#xA;",7009732,"",,"",,2017-05-24T18:30:48,"","",,0,,,
44172313,2,,44154905,2017-05-25T04:32:21,,1,,"<p>If I understand correctly you're trying to package for osx, just change <code>--platform=win32</code> to <code>--platform=darwin</code> like this:</p>&#xA;&#xA;<pre><code>""package:electron"": ""electron-packager electron \""CICone NT\"" --platform=darwin --arch=all --out=electron-package --overwrite""&#xA;</code></pre>&#xA;",6577664,"",,"",,2017-05-25T04:32:21,"","",,0,,,
44181556,2,,44076533,2017-05-25T13:15:23,,0,,"<p>This issue seems to arise when you set the height and width of the canvas in it's style attribute before drawing the image on the canvas. In the above example, the issue can be remedied by setting:</p>&#xA;&#xA;<pre><code>canvas.width = map.width;&#xA;canvas.height = map.height;&#xA;</code></pre>&#xA;&#xA;<p>after the image's onload event, and removing any css related to the height or width of your canvas.</p>&#xA;",2759359,"",,"",,2017-05-25T13:15:23,"","",,0,,,
44189829,2,,44187778,2017-05-25T21:06:33,,12,,"<p>I think you may be missing a ""type"" attribute within that link. Try the markup below:</p>&#xA;&#xA;<pre><code>&lt;link rel=""stylesheet"" type=""text/css"" href=""https://github.com/karinakozarova/HealthCalc/blob/master/style.css""&gt;&#xA;</code></pre>&#xA;",7887014,"",,"",,2017-05-25T21:06:33,"","",,0,,,
44196499,2,,44192641,2017-05-26T07:58:29,,0,,"<p>It would be really great to know why the quality is not satisfying for your users. It captured exactly the same image as it was painted on your <code>BrowserWindow</code>.</p>&#xA;&#xA;<p>However <a href=""https://github.com/electron/electron/blob/master/docs/api/native-image.md"" rel=""nofollow noreferrer""><code>NativeImage</code> API</a> provides you some ways to improve your image quality:</p>&#xA;&#xA;<ul>&#xA;<li>You can convert to PNG</li>&#xA;<li>You can resize the image</li>&#xA;<li>You can use high-DPI images on high-DPI diplays</li>&#xA;</ul>&#xA;&#xA;<p>The following code creates an ~800 KB png as screenshot:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { BrowserWindow, app } = require('electron')&#xA;const fs = require('fs')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  let win = new BrowserWindow({&#xA;    width: 1280, // win size affects captured image ofc&#xA;    height: 720&#xA;  })&#xA;  win.webContents.on('dom-ready', () =&gt; {&#xA;    setTimeout(() =&gt; {&#xA;      win.capturePage( img =&gt; {&#xA;        var conv = img.resize({ // resize&#xA;          width: 2560,&#xA;          height: 1480,&#xA;          quality: 'best'&#xA;        }).toPNG(1.0) // to PNG&#xA;        fs.writeFile(__dirname + '/captured.png', conv, err =&gt; {&#xA;          if (err) console.log(err)&#xA;        });&#xA;      })&#xA;    }, 3000);&#xA;  })&#xA;  win.loadURL('http://github.com')&#xA;})&#xA;</code></pre>&#xA;",2550156,"",,"",,2017-05-26T07:58:29,"","",,0,,,
44199906,2,,43518212,2017-05-26T11:02:20,,0,,"<p>During a recent update to the environment, this was retested. It was found that <code>npm</code> now (as of <a href=""https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V7.md#7.10.0"" rel=""nofollow noreferrer""><code>npm@4.2.0</code></a> installed with node v 7.10.0 and <a href=""https://github.com/npm/npm/releases/tag/v4.6.1"" rel=""nofollow noreferrer""><code>npm@4.6.1</code></a>, ""latest"") does seem to preserve the <code>file:</code> dependency. In addition the <code>--production</code> flag works as expected as well.</p>&#xA;&#xA;<p>It is not known exactly when this begin to work or was supported, but it may be circa <a href=""https://github.com/npm/npm/releases/tag/v4.1.0"" rel=""nofollow noreferrer""><code>npm@4.1.0</code></a>; in particular the rewrite to use the <a href=""https://github.com/npm/npm/commit/981ce6395e7892dde2591b44e484e191f8625431"" rel=""nofollow noreferrer"">updated <code>prune</code> plumbing</a>.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>To update <code>npm</code> to the <a href=""https://docs.npmjs.com/getting-started/installing-node"" rel=""nofollow noreferrer"">latest version</a>;</p>&#xA;&#xA;<pre><code>npm install npm@latest -g&#xA;</code></pre>&#xA;",3747990,"",3747990,"",2017-05-26T16:56:43,2017-05-26T16:56:43,"","",,0,,,
44211069,2,,44210635,2017-05-26T22:44:50,,2,,"<p>Electron now contains all of it's 'parts' within the root Electron package. As such, you don't need the <code>browser-window</code> or <code>app</code> packages (I am not even sure what they are/do).</p>&#xA;&#xA;<p>You can import the relevant parts straight out of the core electron package.</p>&#xA;&#xA;<pre><code>// One Line&#xA;var { app, BrowserWindow } = require('electron')&#xA;// OR&#xA;// Three Lines&#xA;var electron = require('electron')&#xA;var app = electron.app&#xA;var BrowserWindow = electron.BrowserWindow&#xA;</code></pre>&#xA;&#xA;<p>Both approaches are valid. From there, everything else should be fine. </p>&#xA;",2737241,"",,"",,2017-05-26T22:44:50,"","",,0,,,
44054941,2,,43989590,2017-05-18T18:03:22,,3,,"<p>The method <code>getOSProcessId()</code> to acquire the renderer's OS pid (not the routing id) was added to <a href=""https://github.com/electron/electron/releases/tag/v1.7.1"" rel=""nofollow noreferrer"">Electron v1.7.1</a>. Here is the original <a href=""https://github.com/electron/electron/pull/9222"" rel=""nofollow noreferrer"">pull request</a>.</p>&#xA;&#xA;<pre><code>require('electron').remote.getCurrentWebContents().getOSProcessId();&#xA;</code></pre>&#xA;",3697757,"",3697757,"",2017-05-19T07:04:01,2017-05-19T07:04:01,"","",,1,,,
44070359,2,,43912119,2017-05-19T12:38:25,,10,,"<blockquote>&#xA;  <p>Solved for both macOS and win32 ( Updated project <a href=""https://github.com/oikonomopo/electron-deep-linking-mac-win"" rel=""nofollow noreferrer"">'electron-deep-linking-mac-win' on GitHub</a>).</p>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<p><code>package.json</code>:</p>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>{&#xA;  ""name"": ""electron-deeplinking-macos-win32"",&#xA;  ""version"": ""0.0.1"",&#xA;  ""description"": ""Minimal Electron application with deep inking (macOS/win32)"",&#xA;  ""main"": ""main.js"",&#xA;  ""scripts"": {&#xA;    ""start"": ""electron ."",&#xA;    ""pack"": ""build --dir"",&#xA;    ""dist"": ""build""&#xA;  },&#xA;  ""repository"": ""https://github.com/oikonomopo/electron-deep-linking-osx"",&#xA;  ""author"": ""oikonomopo"",&#xA;  ""license"": ""CC0-1.0"",&#xA;  ""devDependencies"": {&#xA;    ""electron"": ""1.6.6"",&#xA;    ""electron-builder"": ""17.1.2""&#xA;  },&#xA;  ""build"": {&#xA;    ""appId"": ""oikonomopo.electron-deeplinking-macos-win32"",&#xA;    ""protocols"": {&#xA;      ""name"": ""electron-deep-linking"",&#xA;      ""schemes"": [""myapp""]&#xA;    },&#xA;    ""mac"": {&#xA;      ""category"": ""public.app-category.Reference""&#xA;    },&#xA;    ""win"": {&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><code>main.js</code>:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const {app, BrowserWindow} = require('electron')&#xA;// Module with utilities for working with file and directory paths.&#xA;const path = require('path')&#xA;// Module with utilities for URL resolution and parsing.&#xA;const url = require('url')&#xA;&#xA;// Keep a global reference of the window object, if you don't, the window will&#xA;// be closed automatically when the JavaScript object is garbage collected.&#xA;let mainWindow&#xA;&#xA;// Deep linked url&#xA;let deeplinkingUrl&#xA;&#xA;// Force Single Instance Application&#xA;const shouldQuit = app.makeSingleInstance((argv, workingDirectory) =&gt; {&#xA;  // Someone tried to run a second instance, we should focus our window.&#xA;&#xA;  // Protocol handler for win32&#xA;  // argv: An array of the second instance’s (command line / deep linked) arguments&#xA;  if (process.platform == 'win32') {&#xA;    // Keep only command line / deep linked arguments&#xA;    deeplinkingUrl = argv.slice(1)&#xA;  }&#xA;  logEverywhere(""app.makeSingleInstance# "" + deeplinkingUrl)&#xA;&#xA;  if (win) {&#xA;    if (win.isMinimized()) win.restore()&#xA;        win.focus()&#xA;  }&#xA;})&#xA;if (shouldQuit) {&#xA;    app.quit()&#xA;    return&#xA;}&#xA;&#xA;function createWindow () {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({width: 800, height: 600})&#xA;&#xA;  // and load the index.html of the app.&#xA;  mainWindow.loadURL(url.format({&#xA;    pathname: path.join(__dirname, 'index.html'),&#xA;    protocol: 'file:',&#xA;    slashes: true&#xA;  }))&#xA;&#xA;  // Open the DevTools.&#xA;  mainWindow.webContents.openDevTools()&#xA;&#xA;  // Protocol handler for win32&#xA;  if (process.platform == 'win32') {&#xA;    // Keep only command line / deep linked arguments&#xA;    deeplinkingUrl = process.argv.slice(1)&#xA;  }&#xA;  logEverywhere(""createWindow# "" + deeplinkingUrl)&#xA;&#xA;  // Emitted when the window is closed.&#xA;  mainWindow.on('closed', function () {&#xA;    // Dereference the window object, usually you would store windows&#xA;    // in an array if your app supports multi windows, this is the time&#xA;    // when you should delete the corresponding element.&#xA;    mainWindow = null&#xA;  })&#xA;}&#xA;&#xA;// This method will be called when Electron has finished&#xA;// initialization and is ready to create browser windows.&#xA;// Some APIs can only be used after this event occurs.&#xA;app.on('ready', createWindow)&#xA;&#xA;// Quit when all windows are closed.&#xA;app.on('window-all-closed', function () {&#xA;  // On OS X it is common for applications and their menu bar&#xA;  // to stay active until the user quits explicitly with Cmd + Q&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;&#xA;app.on('activate', function () {&#xA;  // On OS X it's common to re-create a window in the app when the&#xA;  // dock icon is clicked and there are no other windows open.&#xA;  if (mainWindow === null) {&#xA;    createWindow()&#xA;  }&#xA;})&#xA;&#xA;// Define custom protocol handler. &#xA;// Deep linking works on packaged versions of the application!&#xA;app.setAsDefaultProtocolClient('myapp')&#xA;&#xA;// Protocol handler for osx&#xA;app.on('open-url', function (event, url) {&#xA;  event.preventDefault()&#xA;  deeplinkingUrl = url&#xA;  logEverywhere(""open-url# "" + deeplinkingUrl)&#xA;})&#xA;&#xA;// Log both at dev console and at running node console instance&#xA;function logEverywhere(s) {&#xA;    console.log(s)&#xA;    if (mainWindow &amp;&amp; mainWindow.webContents) {&#xA;        mainWindow.webContents.executeJavaScript(`console.log(""${s}"")`)&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><code>main.js</code> code description:</p>&#xA;&#xA;<ul>&#xA;<li><p>At <code>let deeplinkingUrl</code> we keep the provided url.</p></li>&#xA;<li><p><a href=""https://stackoverflow.com/questions/39292648/electron-js-deep-linking-example-of-how-to-use-deep-linking?rq=1"">On macOS you need to listen to the app.open-url event, while on Windows the url should be available in process.argv (in the main process).</a></p>&#xA;&#xA;<ul>&#xA;<li><p>On macOS platform this is captured at <a href=""https://electron.atom.io/docs/api/app/#event-open-url-macos"" rel=""nofollow noreferrer""><code>'open-url'</code> event</a>, we set it with <code>deeplinkingUrl = url</code>! (See <code>// Protocol handler for osx</code>)</p></li>&#xA;<li><p>On win32 platform this is saved at <a href=""https://nodejs.org/api/process.html#process_process_argv"" rel=""nofollow noreferrer""><code>process.argv</code></a> together with other arguments. To get only the provided url, <code>deeplinkingUrl = argv.slice(1)</code>.  (See <code>// Protocol handler for win32</code>)</p></li>&#xA;<li><p>At <a href=""https://electron.atom.io/docs/api/app/#appmakesingleinstancecallback"" rel=""nofollow noreferrer""><code>app.makeSingleInstance</code> method</a> we check in which platform we are and we set <code>deeplinkingUrl</code> accordingly! If we are on win32 platform, the url is located at <code>argv</code> variable from callback, else on macOS should have already been set at <code>'open-url'</code> event! (See <code>// Force Single Instance Application</code>)</p></li>&#xA;</ul></li>&#xA;</ul>&#xA;",1420433,"",966508,"",2020-01-16T03:27:24,2020-01-16T03:27:24,"","",,1,,,
44072209,2,,43711738,2017-05-19T14:08:01,,4,,"<p>Check for the squirrel-firstrun flag:</p>&#xA;&#xA;<pre><code>var cmd = process.argv[1];&#xA;&#xA;if (cmd == '--squirrel-firstrun') {&#xA;    // Running for the first time.&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(you don't need to install anything for this to work)</p>&#xA;&#xA;<p><a href=""https://github.com/Squirrel/Squirrel.Windows/blob/master/docs/using/custom-squirrel-events-non-cs.md#application-startup-commands"" rel=""nofollow noreferrer"">Ref.</a></p>&#xA;",6577664,"",,"",,2017-05-19T14:08:01,"","",,1,,,
44073542,2,,43794397,2017-05-19T15:12:46,,12,,"<p>You can specify the type of the proxy via the URI scheme: &#xA;<strong><code>socks5://</code></strong></p>&#xA;&#xA;<pre><code>const nightmare = Nightmare({&#xA;    switches: {&#xA;        'proxy-server': 'socks5://' + proxyHost + ':' + proxyPort,&#xA;    },&#xA;});&#xA;</code></pre>&#xA;",1150911,"",,"",,2017-05-19T15:12:46,"","",,1,,,
44179817,2,,38709706,2017-05-25T11:46:47,,3,,<p>Try to use <code>child.setAlwaysOnTop(true);</code> method after child-win init.</p>&#xA;,4417142,"",,"",,2017-05-25T11:46:47,"","",,1,,,
44216260,2,,44216154,2017-05-27T11:24:45,,2,,"<p>See <a href=""https://electron.atom.io/docs/api/browser-window/"" rel=""nofollow noreferrer""><code>BrowserWindow</code></a>, there're many properties you can configure when create BrowserWindow.</p>&#xA;&#xA;<ul>&#xA;<li><p>Zoom: <code>zoomFactor</code></p></li>&#xA;<li><p>Fullscreen: <code>fullscreen</code></p></li>&#xA;</ul>&#xA;&#xA;<p>So just use <code>mainWindow = new BrowserWindow({ fullscreen: true, zoomFactor: 0.8 });</code></p>&#xA;",5741762,"",,"",,2017-05-27T11:24:45,"","",,1,,,
44024881,2,,43933951,2017-05-17T12:27:24,,10,,"<p>In main.js, add:</p>&#xA;&#xA;<pre><code>app.commandLine.appendSwitch('js-flags', '--max-old-space-size=4096');&#xA;</code></pre>&#xA;&#xA;<p>According to <a href=""https://github.com/electron/electron/blob/master/docs/api/chrome-command-line-switches.md"" rel=""noreferrer"">Supported Chrome Command Line Switches</a>, this should be called before the <code>ready</code> event is emitted. For example:</p>&#xA;&#xA;<pre><code>import { app } from ""electron"";&#xA;&#xA;app.commandLine.appendSwitch('js-flags', '--max-old-space-size=4096');&#xA;&#xA;app.on('ready', () =&gt; {&#xA;    // ...&#xA;});&#xA;</code></pre>&#xA;",1349923,"",2788872,"",2017-06-28T19:43:15,2017-06-28T19:43:15,"","",,2,,,
44058767,2,,44057551,2017-05-18T22:30:03,,1,,"<p>It's a good practice to attach the event listeners in the <code>componentDidMount</code> and detach the event listeners in the <code>componentWillUnmount</code>! </p>&#xA;&#xA;<p>See the code example:</p>&#xA;&#xA;<pre><code>class Foobar extends Component {&#xA;&#xA;  componentDidMount() {&#xA;    ipcRenderer.on('sendTable', (evt, arg) =&gt; {&#xA;      this.props.setTable(arg);&#xA;     });&#xA;  }&#xA;&#xA;  componentWillUnmount() {&#xA;    // Make sure to remove the DOM listener when the component is unmounted&#xA;    // read the ipcMain documentation to understand how to attach and detach listeners&#xA;    ipcMain.removeListener(channel, listener)&#xA;  }&#xA;&#xA;  render() {&#xA;   // stuff&#xA;  }&#xA;&#xA;}&#xA;</code></pre>&#xA;",284693,"",284693,"",2017-05-18T22:56:22,2017-05-18T22:56:22,"","",,2,,,
44077850,2,,44077155,2017-05-19T19:39:26,,1,,"<p>this is the minified version of your code. try and see if it still only fires 7 times</p>&#xA;&#xA;<pre><code>/* Server side */&#xA;&#xA;  // instead of two app.post functions, use this one&#xA;  app.get('/remote/:key', function(request, response, next) {&#xA;    var ip = getRemoteIP(request);&#xA;    log(mainWin, ""presenter - "" + request.params.key);&#xA;    robot.keyTap(request.params.key);&#xA;    response.send(request.params.key + ' key pressed');&#xA;  });&#xA;&#xA;/* Client Side */&#xA;&#xA;function sendKey(key) {&#xA;  return $.get('http://192.168.2.110:3000/remote/' + key)&#xA;}&#xA;&#xA;// to send right key&#xA;sendKey('right').done(function(response) { /*success*/ }).fail(function(error) { /*error*/ });&#xA;</code></pre>&#xA;",2712079,"",2712079,"",2017-05-19T19:45:52,2017-05-19T19:45:52,"","",,2,,,
44116962,2,,44116714,2017-05-22T15:39:05,,1,,"<p><strong>1) is it advisable to implement the admin panel using Electron knowing that it depends on its own version of NodeJS?</strong></p>&#xA;&#xA;<p>Yes, that is perfectly fine.  You can access your current node server directly from your electron app, or create a new node server that electron will access.  </p>&#xA;&#xA;<p><strong>2) is there away to integrate my current NodeJS server for mobile apps to my Electron? because using two different servers will be costly when it comes to hosting them</strong></p>&#xA;&#xA;<p>You can run multiple nodejs servers on one machine (just use different ports when starting the servers).  This is one easy way to get around this issue, or you can just have a group of /admin endpoints that handle all admin related functionality. Think of electron has a front-end that can be distributed across various platforms and access any back-end you choose.   </p>&#xA;&#xA;<p><strong>3) what are other alternatives that enable me to implement cross-platform desktop application using my current mobile apps server?</strong></p>&#xA;&#xA;<p>Electron / nwjs (node-webkit) are the only two that come to mind.  Although there are probably others. </p>&#xA;&#xA;<p><strong>More Electron/nwjs details:</strong></p>&#xA;&#xA;<p>Just think of these as browsers that allow you to write nodejs.  Therefore, within the browser you can access databases you ship with your app, or anything on the users file system.  You can also make requests from your app to already created nodejs servers.  Also, they allow you to easily package up your app for cross-platform distribution. </p>&#xA;",2263572,"",2263572,"",2017-05-22T15:44:34,2017-05-22T15:44:34,"","",,2,,,
44212279,2,,44212256,2017-05-27T02:14:18,,1,,"<p>If you are new with electron and don't know where to start, I recommend to you to download this example and take a look to the reedme.txt and the code inside, it will lead you to the path to begin your app. </p>&#xA;&#xA;<p><a href=""https://github.com/hokein/electron-sample-apps"" rel=""nofollow noreferrer"">Take a look</a></p>&#xA;",7128034,"",,"",,2017-05-27T02:14:18,"","",,2,,,
44199235,2,,44199178,2017-05-26T10:27:37,,2,,"<p>Just go through <a href=""https://socket.io/get-started/chat/"" rel=""nofollow noreferrer"">this tutorial</a>. Start from simple web. When you make it work - port it to electron.</p>&#xA;",4379015,"",,"",,2017-05-26T10:27:37,"","",,3,,,
44133350,2,,44122559,2017-05-23T11:21:02,,20,,"<p>Figured it out. Configure the path to your icon in your <code>package.json</code>.</p>&#xA;&#xA;<p>Electron-Forge v5:</p>&#xA;&#xA;<pre><code>{&#xA;  ...&#xA;  ""config"": {&#xA;    ""forge"": {&#xA;      ...&#xA;      ""electronPackagerConfig"": {&#xA;        ""icon"": ""path/to/icon.icns""&#xA;      },&#xA;      ...&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Electron-Forge v6:</p>&#xA;&#xA;<pre><code>{&#xA;  ...&#xA;  ""config"": {&#xA;    ""forge"": {&#xA;      ...&#xA;      ""packagerConfig"": {&#xA;        ""icon"": ""path/to/icon.icns""&#xA;      },&#xA;      ...&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",813020,"",813020,"",2019-12-11T09:09:29,2019-12-11T09:09:29,"","",,4,,,
44219413,2,,44217883,2017-05-27T16:53:24,,0,,"<h2>Option 1</h2>&#xA;&#xA;<p>Register <code>electron-localshortcut</code> on all the windows then when it get's pressed then run a function that checks for the focused window like this:</p>&#xA;&#xA;<pre><code>var win1 = new BrowserWindow({title: ""Win 1""});&#xA;var win2 = new BrowserWindow({title: ""Win 2""});&#xA;&#xA;electronLocalshortcut.register(win1, 'CmdOrCtrl+Alt+Super+Right', () =&gt; {&#xA;    shortcutPressed();&#xA;});&#xA;&#xA;electronLocalshortcut.register(win2, 'CmdOrCtrl+Alt+Super+Right', () =&gt; {&#xA;    shortcutPressed();&#xA;});&#xA;&#xA;function shortcutPressed () {&#xA;    var focusedWin = BrowserWindow.getFocusedWindow();&#xA;    console.log(""Shortcut pressed on "" + focusedWin.getTitle());&#xA;}&#xA;</code></pre>&#xA;&#xA;<h2>Option 2</h2>&#xA;&#xA;<p>Add a invisible menu item then set the <code>accelerator</code> option to <code>'CmdOrCtrl+Alt+Super+Right'</code> like this:</p>&#xA;&#xA;<pre><code>{&#xA;    accelerator: 'CmdOrCtrl+Alt+Super+Right'&#xA;    visible:     false,&#xA;    click:       function () {&#xA;        shortcutPressed();&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(This doesn't work on OSX because it needs to be visible for the shortcut to work)</p>&#xA;",6577664,"",6577664,"",2017-05-27T17:32:39,2017-05-27T17:32:39,"","",,4,,,
44012723,2,,44011961,2017-05-16T22:38:33,,1,,"<p>There are two things involved.</p>&#xA;&#xA;<ol>&#xA;<li>ES6 -> CommonJS interop</li>&#xA;<li>class syntax</li>&#xA;</ol>&#xA;&#xA;<p>For the first point, you are declaring an ES6 module while consuming it in commonJs syntax.</p>&#xA;&#xA;<p>that's why you need the extra <code>X</code> to hold on to the module object in CJS:</p>&#xA;&#xA;<pre><code>var X = require('./speak');&#xA;var speak = new X.Speak();&#xA;&#xA;// or accessing the `Speak` class directly:&#xA;var Speak = require('./speak').Speak;&#xA;var speak = new Speak();&#xA;</code></pre>&#xA;&#xA;<p>If you consume the same code in ES6, it would be:</p>&#xA;&#xA;<pre><code>import { Speak } from './speak'&#xA; const s = new Speak();&#xA;&#xA;// or&#xA;import * as X from './speak'&#xA;const s = new X.Speak();&#xA;</code></pre>&#xA;&#xA;<p>Of course, ESM (ES6 Module system) is not available in every browser, so you need to transpile your TypeScript code down to ES5 and use some loader mechanism to load the module (like requireJS).</p>&#xA;&#xA;<p>For the second point, you are writing a class. so you typically would create an instance of <code>Speak</code> and use it (following code assume you consume the code in a module, to avoid confusion with the first point):</p>&#xA;&#xA;<pre><code>var speak = new Speak();&#xA;speak.write();&#xA;</code></pre>&#xA;&#xA;<p>If you don't need an instance, you can use a static method or just function:</p>&#xA;&#xA;<pre><code>export class Speak {&#xA;  static write() { ... }&#xA;}&#xA;&#xA;// usage:&#xA;Speak.write();&#xA;&#xA;// function&#xA;export function write() { ... }&#xA;&#xA;// usage:&#xA;write();&#xA;</code></pre>&#xA;",3505900,"",3505900,"",2017-05-17T03:17:45,2017-05-17T03:17:45,"","",,5,,,
44206992,2,,44205831,2017-05-26T17:18:03,,13,,"<p>You're using the old webPreferences syntax, your constructor should look something this :)</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    frame: true,&#xA;    webPreferences: {&#xA;        webSecurity: false&#xA;    }&#xA;});&#xA;</code></pre>&#xA;",2499250,"",,"",,2017-05-26T17:18:03,"","",,8,,,
35962898,2,,35962868,2016-03-12T20:27:46,,0,,"<p>If you are trying that inside an electron app, then it is most likely the fact that the Jquery file is not in the path specified. It would most likely be located in /node_modules/Jquery/... Something like that. Try an absolute path. Alternatively, if the host computer is connected to the Internet you should be able to use the Jquery CDN.</p>&#xA;&#xA;<p>This appears to be a known issue with a work around in Electron,</p>&#xA;&#xA;<p><a href=""https://github.com/atom/electron/issues/254"" rel=""nofollow"">Here #254</a></p>&#xA;",216679,"",216679,"",2016-03-12T20:40:20,2016-03-12T20:40:20,"","",,6,,,
36078390,2,,36055509,2016-03-18T07:21:10,,0,,"<p>I think you should use <a href=""https://www.npmjs.com/package/electron-packager"" rel=""nofollow"">electron-packager</a> suggested by Electron. Just pass your icon via <code>icon</code> option of electron-packager.</p>&#xA;",3614616,"",,"",,2016-03-18T07:21:10,"","",,0,,,
35920669,2,,35506265,2016-03-10T15:27:50,,1,,<p>Try to switch to google-chrome directly since the new nw version is probably released 19.04.2016. After that NW will hopefully keep up with every Chromium release.</p>&#xA;&#xA;<p>You should not have the same problems in Chrome.</p>&#xA;,1235841,"",,"",,2016-03-10T15:27:50,"","",,0,,,
35955526,2,,35954908,2016-03-12T08:42:38,,1,,"<p>It is an known <a href=""https://github.com/atom/electron/issues/4765"" rel=""nofollow"">issue</a> in version 0.37. As a temporary workaround you can downgrade to version 0.36.</p>&#xA;",421446,"",,"",,2016-03-12T08:42:38,"","",,0,,,
35964181,2,,35963971,2016-03-12T22:37:33,,1,,"<p>You better use a forEach loop. This way you can have a closure and keep you context. also reads better.</p>&#xA;&#xA;<pre><code> mark.list.forEach(function(item, i){&#xA;   var webadd = ""&lt;webview id=web"" + i + "" src="" + item.url + "" preload='preload.js' disablewebsecurity&gt;&lt;/webview&gt;"";&#xA;   $('#canvas1').append(webadd);&#xA;&#xA;  document.getElementById(""web"" + i).addEventListener(""dom-ready"", function() {&#xA;        console.log(""nice"" + i); // &lt;-- &#xA;  });&#xA;})&#xA;</code></pre>&#xA;",6051982,"",,"",,2016-03-12T22:37:33,"","",,0,,,
35992392,2,,35985917,2016-03-14T16:03:15,,1,,"<h2>An example using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" rel=""nofollow"">Promises</a></h2>&#xA;&#xA;<h3>Assumption</h3>&#xA;&#xA;<p>I'm not familiar with how your <code>icpRenderer</code> works, or exaclty when the dispatching is completed. I am going to <strong>assume</strong> that the dispatch is completed after  the call <code>dispatch(receiveOptions(arg))</code> returns in</p>&#xA;&#xA;<pre><code>    ipcRenderer.on('sendOptions', function(event, arg) {&#xA;        dispatch(receiveOptions(arg));&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p><em>If <code>dispatch()</code> is asynchronous, this will not work</em> (unless you wait to resolve the promise until after <code>dispatch()</code> is done).</p>&#xA;&#xA;<h3>If my assumption is correct</h3>&#xA;&#xA;<p>you should be able to <s>return</s> receive a ""promise"" (and resolve it) like this</p>&#xA;&#xA;<pre><code>    // actions.js&#xA;    export function fetchOptions(promise) {&#xA;        return dispatch =&gt; {&#xA;            dispatch(requestOptions());&#xA;            ipcRenderer.on('sendOptions', function(event, arg) {&#xA;                dispatch(receiveOptions(arg));&#xA;                if (promise) promise.resolve(); // Resolve the promise&#xA;            });&#xA;            ipcRenderer.send('requestOptions', '');&#xA;        }&#xA;    }&#xA;    // return Promises others accordingly&#xA;</code></pre>&#xA;&#xA;<p>(Note that you may call fetchOptions without passing a ""promise"", because we only call promise.resolve() if promise is present. Hence, this should not complicate your existing code.)</p>&#xA;&#xA;<p>In order to wait for the promises to resolve, you can do like this</p>&#xA;&#xA;<pre><code>    // in the main app component&#xA;    componentWillMount() {&#xA;        const { store } = this.context;&#xA;        const promises = [&#xA;            new Promise((resolve, reject) =&gt;&#xA;                store.dispatch(fetchOptions({resolve, reject}))),&#xA;            new Promise((resolve, reject) =&gt;&#xA;                store.dispatch(fetchRequirements({resolve, reject}))),&#xA;            new Promise((resolve, reject) =&gt;&#xA;                store.dispatch(fetchStats({resolve, reject})))&#xA;        ];&#xA;        Promise.all(promises).then(() =&gt;&#xA;            // Dispatch another action after the first three dispatches are completed.&#xA;        );&#xA;    },&#xA;</code></pre>&#xA;&#xA;<p>The code didn't turn out super clean, but hopefully it will at least work.</p>&#xA;",2054731,"",,user1833590,2016-03-15T01:24:19,2016-03-15T01:24:19,"","",,10,,,
36007000,2,,36005173,2016-03-15T09:18:11,,1,,"<p>I think your choice of IPC method will depend on the kind of data you need to share between the windows and by the way you manage the windows. For instance, if you manage your windows from the Main process, you could use the Main process as a central hub to pass around messages using Electron's 'ipc' modules. If your windows know about each other, it's probably better to exchange messages directly between them, without going through the Main process.</p>&#xA;&#xA;<p>If you open one window from the other using Electron's <a href=""http://electron.atom.io/docs/v0.37.2/api/window-open/#the-windowopen-function"" rel=""nofollow""><code>window.open</code></a> for example, you can then use <code>postMessage</code> on the window proxy (in the child window, use <code>window.opener.postMessage</code>) for message passing.</p>&#xA;&#xA;<p>Of course, you could also open up a socket between the two windows or use any other form of IPC, especially if you need to pass around a lot of data. For simple messages and events <code>postMessage</code> should be fine though.</p>&#xA;",2493332,"",,"",,2016-03-15T09:18:11,"","",,3,,,
36022052,2,,35445372,2016-03-15T21:01:05,,1,,"<p>I finally figured it out!</p>&#xA;&#xA;<p>This package is obnoxiously difficult to build on win32 -</p>&#xA;&#xA;<p>See the following <a href=""https://github.com/ibmdb/node-ibm_db/issues/96"" rel=""nofollow"">issue</a>.</p>&#xA;&#xA;<p>Here is how I solved it: </p>&#xA;&#xA;<p><strong>NOTE:</strong> In the proceeding instructions, for best results, always use the fully qualified path for any directory listed.</p>&#xA;&#xA;<ol>&#xA;<li>Navigate to:  <code>$projectDir/node_modules/ibm_db</code></li>&#xA;<li>Run: <code>node-gyp clean</code></li>&#xA;<li>Set the <code>IBM_DB_HOME</code> environment variable to <code>$projectDir/node_modules/ibm_db/installer/clidriver</code> </li>&#xA;<li>Run: <code>node-gyp configure --target=0.35.4 --arch=x64 --dist-url=https://atom.io/download/atom-shell --msvs_version=2015 --IS_DOWNLOADED=true</code></li>&#xA;<li>This will make a .vcxproj xml file in your <code>~./ibm_db/Build/</code> directory. You will need to manually edit this file to remove any reference to 'odbc32.lib'</li>&#xA;<li>You now need to download the header files for the linux (yes, really) 64bit DB2 drivers <a href=""http://public.dhe.ibm.com/ibmdl/export/pub/software/data/db2/drivers/odbc_cli/linuxx64_odbc_cli.tar.gz"" rel=""nofollow"">link</a></li>&#xA;<li>Inside that tar.gz file is an <code>clidriver/include/</code> directory. Copy that entire 'include' folder, and paste it into <code>$projectDir/installer/clidriver/</code> (so you now have the folder <code>$projectDir/installer/clidriver/include</code>)</li>&#xA;<li>Now, from your <code>$projectDir/node_modules/ibm_db</code> directory, run: <code>msbuild build/binding.sln /nologo /p:Configuration=Release;Platform=x64</code></li>&#xA;</ol>&#xA;&#xA;<p><strong>NOTE:</strong> For whatever reason, msbuild wasn't aliased properly on my machine, so the command I actually had to run was: &#xA;<code>""C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe"" build/binding.sln /nologo /p:Configuration=Release;Platform=x64</code> &#xA;- Your mileage may vary.</p>&#xA;&#xA;<ol start=""9"">&#xA;<li>Ta-da! Assuming you didn't get any nasty build errors, you've now finally finished building the ibm_db package for use with Electron.</li>&#xA;</ol>&#xA;",2492166,"",,"",,2016-03-15T21:01:05,"","",,0,,,
36078499,2,,36041127,2016-03-18T07:26:51,,1,,<p>Try this command: <code>electron-packager . MyApp --platform=linux --arch=x64 --version=0.37.2 --icon=&lt;path/to/your-icon-name&gt;</code></p>&#xA;,3614616,"",,"",,2016-03-18T07:26:51,"","",,0,,,
36036874,2,,36030757,2016-03-16T13:19:03,,2,,<p>Fixed!  I had to amend the <code>build.js</code> within <code>/tasks/build/</code> to include my newly created assets directory.</p>&#xA;,271271,"",,"",,2016-03-16T13:19:03,"","",,1,,,
36045204,2,,36042333,2016-03-16T19:26:33,,2,,"<p>Electron uses Chromium under the hood and I don't believe Chromium is bundled with a PDF viewer plugin like Chrome is. You would need to recompile Electron with the proper plugins. There are also some Javascript PDF viewers out there you may want to look into.</p>&#xA;&#xA;<p><a href=""https://mozilla.github.io/pdf.js/"" rel=""nofollow"">PDF.js</a> appears to be a solid choice and indeed <a href=""https://discuss.atom.io/t/pdf-plugin-in-electron-app/19186"" rel=""nofollow"">another Electron user</a> appears to be using it to solve your exact problem :)</p>&#xA;&#xA;<p>Good luck!</p>&#xA;",498624,"",,"",,2016-03-16T19:26:33,"","",,0,,,
35925359,2,,30032924,2016-03-10T19:20:12,,3,,"<p>What I'm doing is two-fold.</p>&#xA;&#xA;<pre><code>mainWindow.webContents.on('new-window', function(event, url) {&#xA;    event.preventDefault();&#xA;    console.log(""Handing off to O/S: ""+url);&#xA;    shell.openExternal(url);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>That is there so that whenever a page in my app wants to open a new window, that'll happen in an actual browser. This is also good for opening PDFs and such.</p>&#xA;&#xA;<p>Then I just make sure that any download links use target=_blank or window.open() and the download will happen in the user's browser.</p>&#xA;",531261,"",,"",,2016-03-10T19:20:12,"","",,1,,,
36017809,2,,36017543,2016-03-15T17:11:10,,3,,<p>You can treat the main Electron file like a server running in node. Meaning you can communicate with it any way you choose.</p>&#xA;&#xA;<ul>&#xA;<li><p>You can spin up an express http server and create some API endpoints to hit from your Angular code on the client-side.</p></li>&#xA;<li><p>You could fire up a socket.io server and use a websocket for communication.</p></li>&#xA;<li><p>You can also just straight up use those APIs right inside your angular code if you don't care about mixing system code with client-side code. Only do this if your app will always be an Electron app and never ported to a web app. If it's ever going to be a web app then your client-side Angular app should stick to using only font-end javascript code and let the main Electron file act as a server.</p></li>&#xA;</ul>&#xA;,498624,"",,"",,2016-03-15T17:11:10,"","",,2,,,
36073217,2,,36022891,2016-03-17T23:01:20,,3,,"<p>Yes, use <a href=""http://enigmaprotector.com/en/aboutvb.html"" rel=""nofollow"">enigma virtual box</a> or something similar. It can pack app into standalone app.exe with all files, libraries, etc.</p>&#xA;",2771556,"",,"",,2016-03-17T23:01:20,"","",,0,,,
35996918,2,,35992236,2016-03-14T19:59:32,,4,,"<p>It is fairly simple to setup a <code>globalShortcut</code> in Electron. The documentation can be found <a href=""https://github.com/atom/electron/blob/master/docs/api/global-shortcut.md"" rel=""nofollow"">here</a>, but the gist of it is:</p>&#xA;&#xA;<pre><code>globalShortcut.register('Ctrl+Alt+v', function() {&#xA;    // open menu&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>As for a menu, I'm not sure what you mean by ""shell menu"", however as far as I know Electron has no built in global menu. You would likely use a simple Electron window, and create a menu with CSS.</p>&#xA;",418710,"",,"",,2016-03-14T19:59:32,"","",,3,,,
36018281,2,,36017963,2016-03-15T17:35:39,,4,,"<p>In Electron the console becomes the Chromium console which is not like the terminal you're used to. Readline is not going to work as far as I know. The blink console in Chromium does not support reading input this way. It operates more like a debug REPL where you can type JS code, inspect variables, etc. It's not for user input. I don't think you're going to be able to get input supplied from that console into <code>stdin</code>, which is where the readline module is waiting to see data.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h1>Update</h1>&#xA;&#xA;<p>I assumed OP was using the dev tools console expecting it to work like a shell. He was using it properly. The actual issue is <a href=""https://github.com/nodejs/node/issues/5384"" rel=""nofollow"">a bug</a> with node's readline module on Windows. Node devs are actively working to fix it. It's a regression bug that was fixed once before but appeared again in recent versions of node.</p>&#xA;",498624,"",498624,"",2016-03-16T19:22:09,2016-03-16T19:22:09,"","",,8,,,
35893897,2,,35870192,2016-03-09T14:09:33,,5,,"<p>If you want to understand what is happening when you require a module, you could read <a href=""https://nodejs.org/dist/latest-v5.x/docs/api/modules.html#modules_all_together"" rel=""nofollow noreferrer"">the docs</a>.</p>&#xA;&#xA;<p>On the first look, your code snippets should work. To require <strong>a module</strong> inside node.js, you always use the path from the file. </p>&#xA;&#xA;<p>But, in your case, you are just importing plain JS. In this case, the script runs out of your HTML call. </p>&#xA;&#xA;<p>That logic could cause a lot of other problems, so I would recommend you to create your own modules. node.js makes that very easy. </p>&#xA;&#xA;<pre><code>var configuration = {a: 1,b: 2};&#xA;module.exports = configuration;&#xA;</code></pre>&#xA;&#xA;<p>More reading aout that:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://nodejs.org/dist/latest-v5.x/docs/api/modules.html"" rel=""nofollow noreferrer"">https://nodejs.org/dist/latest-v5.x/docs/api/modules.html</a></li>&#xA;<li><a href=""http://www.sitepoint.com/understanding-module-exports-exports-node-js/"" rel=""nofollow noreferrer"">http://www.sitepoint.com/understanding-module-exports-exports-node-js/</a></li>&#xA;</ul>&#xA;&#xA;<p>Inside your HTML file, you could put your modules together via require statements.</p>&#xA;",5291427,"",3894781,"",2017-11-02T12:17:08,2017-11-02T12:17:08,"","",,0,,,
35978419,2,,35976359,2016-03-14T02:05:57,,7,,"<p>If your app isn't installed, calling out to Squirrel won't work. You need to have an installed app.</p>&#xA;",5728,"",,"",,2016-03-14T02:05:57,"","",,3,,,
35916543,2,,35608927,2016-03-10T12:30:01,,14,,"<p>To draw overlay in a game, you need hook Direct3D or OpenGL api according to which the game use.</p>&#xA;&#xA;<p>And before present call(in D3D), you can draw your own stuff on a swapchain surface.</p>&#xA;&#xA;<p>To control a overlay window in game, you need use Windows message hook and some other stuff.</p>&#xA;&#xA;<p>And you should carefully manage all the windows in your program that draws in game.</p>&#xA;&#xA;<p>There is a hook project <a href=""https://github.com/spazzarama/Direct3DHook"" rel=""noreferrer"">Direct3DHook</a>, it's written in C#, but it will be easy to write in C++.</p>&#xA;&#xA;<p>If you want to write a good overlay engine, there will be plenty details to consider. </p>&#xA;&#xA;<p><a href=""http://www.overwolf.com/"" rel=""noreferrer"">Overwolf</a> is a overlay app platform, I write an overlay project at work which took about two month to be something approximate.</p>&#xA;&#xA;<p>I have written a project,  <a href=""https://github.com/hiitiger/gelectron"" rel=""noreferrer"">https://github.com/hiitiger/gelectron</a>.</p>&#xA;",793634,"",793634,"",2018-11-12T16:17:35,2018-11-12T16:17:35,"","",,0,,,
36048721,2,,36029955,2016-03-16T23:10:56,,21,,"<p>You need to rebuild your native Node addon for Electron, <a href=""https://github.com/atom/electron/blob/v0.37.2/docs/tutorial/using-native-node-modules.md#using-native-node-modules"" rel=""noreferrer"">the steps are outlined in the docs</a>.</p>&#xA;",1259938,"",,"",,2016-03-16T23:10:56,"","",,2,,,
35878545,2,,35876939,2016-03-08T21:39:18,,72,,"<p>Assuming you don't want window chrome, you can accomplish this by removing the frame around Electron and filling the rest in with html/css/js. I wrote an article that achieves what you are looking for on my blog here: <a href=""http://www.mylifeforthecode.com/making-the-electron-shell-as-pretty-as-the-visual-studio-shell/"">http://www.mylifeforthecode.com/making-the-electron-shell-as-pretty-as-the-visual-studio-shell/</a>. Code to get you started is also hosted here: <a href=""https://github.com/srakowski/ElectronLikeVS"">https://github.com/srakowski/ElectronLikeVS</a></p>&#xA;&#xA;<p>To summarize, you need to pass frame: false when you create the BrowserWindow:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({width: 800, height: 600, frame: false});&#xA;</code></pre>&#xA;&#xA;<p>Then create and add control buttons for your title bar:</p>&#xA;&#xA;<pre><code> &lt;div id=""title-bar""&gt;&#xA;      &lt;div id=""title""&gt;My Life For The Code&lt;/div&gt;&#xA;      &lt;div id=""title-bar-btns""&gt;&#xA;           &lt;button id=""min-btn""&gt;-&lt;/button&gt;&#xA;           &lt;button id=""max-btn""&gt;+&lt;/button&gt;&#xA;           &lt;button id=""close-btn""&gt;x&lt;/button&gt;&#xA;      &lt;/div&gt;&#xA; &lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>Bind in the max/min/close functions in js:</p>&#xA;&#xA;<pre><code>(function () {&#xA;&#xA;      var remote = require('remote'); &#xA;      var BrowserWindow = remote.require('browser-window'); &#xA;&#xA;     function init() { &#xA;          document.getElementById(""min-btn"").addEventListener(""click"", function (e) {&#xA;               var window = BrowserWindow.getFocusedWindow();&#xA;               window.minimize(); &#xA;          });&#xA;&#xA;          document.getElementById(""max-btn"").addEventListener(""click"", function (e) {&#xA;               var window = BrowserWindow.getFocusedWindow(); &#xA;               window.maximize(); &#xA;          });&#xA;&#xA;          document.getElementById(""close-btn"").addEventListener(""click"", function (e) {&#xA;               var window = BrowserWindow.getFocusedWindow();&#xA;               window.close();&#xA;          }); &#xA;     }; &#xA;&#xA;     document.onreadystatechange = function () {&#xA;          if (document.readyState == ""complete"") {&#xA;               init(); &#xA;          }&#xA;     };&#xA;&#xA;})();&#xA;</code></pre>&#xA;&#xA;<p>Styling the window can be tricky, but the key use to use special properties from webkit. Here is some minimal CSS:</p>&#xA;&#xA;<pre><code>body {&#xA; padding: 0px;&#xA; margin: 0px; &#xA;}&#xA;&#xA;#title-bar {&#xA; -webkit-app-region: drag;&#xA; height: 24px; &#xA; background-color: darkviolet;&#xA; padding: none;&#xA; margin: 0px; &#xA;}&#xA;&#xA;#title {&#xA; position: fixed;&#xA; top: 0px;&#xA; left: 6px; &#xA;}&#xA;&#xA;#title-bar-btns {&#xA; -webkit-app-region: no-drag;&#xA; position: fixed;&#xA; top: 0px;&#xA; right: 6px;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Note that these are important:</p>&#xA;&#xA;<pre><code>-webkit-app-region: drag;&#xA;-webkit-app-region: no-drag;&#xA;</code></pre>&#xA;&#xA;<p>-webkit-app-region: drag on your 'title bar' region will make it so that you can drag it around as is common with windows. The no-drag is applied to the buttons so that they do not cause dragging.</p>&#xA;",3399439,"",,"",,2016-03-08T21:39:18,"","",,2,,,
52542434,2,,52523926,2018-09-27T17:39:57,,1,,"<p>See the docs for <strong>$CMDLINE</strong> variable: <a href=""http://nsis.sourceforge.net/Docs/Chapter4.html#varother"" rel=""nofollow noreferrer"">http://nsis.sourceforge.net/Docs/Chapter4.html#varother</a></p>&#xA;&#xA;<p>You can parse this variable manually using (get parameters using <strong>GetParameters</strong>) and search for your desired parameter <em>/p</em> and handle various cases.</p>&#xA;&#xA;<p>Another method is to use <strong>GetOptions</strong>: <a href=""http://nsis.sourceforge.net/Docs/AppendixE.html#getoptions"" rel=""nofollow noreferrer"">http://nsis.sourceforge.net/Docs/AppendixE.html#getoptions</a> which offers also parsing the parameters and their values (note, they use = to delimit name and value like /ADMIN=password).</p>&#xA;",765955,"",,"",,2018-09-27T17:39:57,"","",,0,,,
52552003,2,,52345461,2018-09-28T09:12:26,,0,,"<p>It turns out that it wasn't the websocket implementation but electron blocking the renderer process completely while scrolling, thus the delayed reception. I had to move the websocket connection out of the renderer and tunnel all messages using the IPC system.</p>&#xA;",7281683,"",,"",,2018-09-28T09:12:26,"","",,0,,,
52555592,2,,52555431,2018-09-28T12:41:48,,1,,"<p>You could use <a href=""https://pypi.org/project/py2exe/"" rel=""nofollow noreferrer"">py2exe</a> and <a href=""https://py2app.readthedocs.io/en/latest/"" rel=""nofollow noreferrer"">py2app</a> for Windows and Mac. Linux and MacOS should already have python installed though. These allow you to make executable python applications that do not require python to be installed on the users' computer.</p>&#xA;&#xA;<p>I hope this helped :)</p>&#xA;",4600403,"",,"",,2018-09-28T12:41:48,"","",,0,,,
52642942,2,,52636427,2018-10-04T09:04:15,,3,,"<p>You just have to <a href=""https://nodejs.org/api/modules.html#modules_require"" rel=""nofollow noreferrer""><code>require</code></a> the script you want to use in <code>index.html</code>, then call it from <code>main.js</code> either by</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture-callback"" rel=""nofollow noreferrer""><code>executeJavaScript</code></a> on the page</li>&#xA;<li>or using <a href=""https://electronjs.org/docs/api/ipc-main"" rel=""nofollow noreferrer""><code>ipc</code> communication</a></li>&#xA;</ul>&#xA;&#xA;<p>A full example could be:&#xA;</p>&#xA;&#xA;<p><em>main.js</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, Menu, Tray, BrowserWindow } = require('electron')&#xA;const path = require('path')&#xA;&#xA;let tray = null&#xA;let win = null&#xA;app.on('ready', () =&gt; {&#xA;  win = new BrowserWindow({&#xA;    show: false&#xA;  })&#xA;  win.loadURL(path.join(__dirname, 'index.html'))&#xA;  tray = new Tray('test.png')&#xA;  const contextMenu = Menu.buildFromTemplate([&#xA;    {label: ""Open window"", click: () =&gt; { win.show() }},&#xA;    {label: ""Close completely"", click: () =&gt; { app.quit() }},&#xA;    // call required function&#xA;    {&#xA;      label: ""Call function"",&#xA;      click: () =&gt; {&#xA;        const text = 'asdasdasd'&#xA;        // #1&#xA;        win.webContents.send('call-foo', text)&#xA;        // #2&#xA;        win.webContents.executeJavaScript(`&#xA;          foo('${text}')&#xA;        `)&#xA;      }&#xA;    }&#xA;  ])&#xA;  tray.setContextMenu(contextMenu)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>index.html</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>&lt;html&gt;&#xA;  &lt;body&gt;&#xA;    &lt;script&gt;&#xA;      const { foo } = require('./script.js')&#xA;      const { ipcRenderer } = require('electron')&#xA;      // For #1&#xA;      ipcRenderer.on('call-foo', (event, arg) =&gt; {&#xA;        foo(arg)&#xA;      })&#xA;    &lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p><em>script.js</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>module.exports = {&#xA;  foo: (text) =&gt; { console.log('foo says', text) }&#xA;}&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-10-04T09:04:15,"","",,0,,,
52646400,2,,52645738,2018-10-04T12:11:29,,0,,"<p>How about naming the handler function?&#xA;</p>&#xA;&#xA;<pre><code>const openWindow = () =&gt; {&#xA;  // open the window&#xA;}&#xA;&#xA;ipcMain.on('open-hover', openWindow)&#xA;&#xA;const traytemplate = [{&#xA;  'label': 'About',&#xA;  click: () =&gt; {&#xA;    openWindow()&#xA;  }&#xA;}]&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-10-04T12:11:29,"","",,0,,,
52701672,2,,52692258,2018-10-08T11:52:47,,5,,"<p>I assume that your <code>canvas</code> is correct and already drawn. So you don't need canvas-to-buffer.&#xA;Try this approach. (I used jpg, but png works as well)</p>&#xA;&#xA;<pre><code>function saveCallback(filePath) {&#xA;    // Get the DataUrl from the Canvas&#xA;    const url = canvas.toDataURL('image/jpg', 0.8);&#xA;&#xA;    // remove Base64 stuff from the Image&#xA;    const base64Data = url.replace(/^data:image\/png;base64,/, """");&#xA;    fs.writeFile(filePath, base64Data, 'base64', function (err) {&#xA;        console.log(err);&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",10465547,"",2914876,"",2019-09-13T12:52:48,2019-09-13T12:52:48,"","",,0,,,
52712124,2,,52560243,2018-10-09T01:31:02,,0,,<p>I install Visual Studio Developer Tools 2015 and sqlite3 module works well!</p>&#xA;,5896263,"",,"",,2018-10-09T01:31:02,"","",,0,,,
52718010,2,,52717557,2018-10-09T09:46:38,,1,,"<p><code>document</code> is available only in <em>Renderer</em> process. So you have to call your query there.&#xA;Most straightforward thing to do in your case is to <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentsexecutejavascriptcode-usergesture-callback"" rel=""nofollow noreferrer""><code>executeJavaScript</code></a> on <code>BrowserWindow</code>'s <code>webContents</code>&#xA;</p>&#xA;&#xA;<pre><code>mainWindow.webContents.on('dom-ready', () =&gt; {&#xA;  mainWindow.webContents.executeJavaScript(`&#xA;    const form = document.querySelector('form');&#xA;    // manipulate form...&#xA;  `)&#xA;})&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-10-09T09:46:38,"","",,0,,,
52735057,2,,52731285,2018-10-10T07:40:36,,4,,<p>Try to use <code>\.bin\electron.cmd</code> instead of <code>\.bin\electron</code> in <strong>Node interpreter</strong> configuration</p>&#xA;&#xA;<p>Hope this help.</p>&#xA;,6522713,"",,"",,2018-10-10T07:40:36,"","",,0,,,
52750722,2,,47764268,2018-10-11T01:04:30,,0,,"<p>It turns out that Jest can collect all the Webdriver results. Try using <a href=""http://jest-teamcity"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/jest-teamcity</a>.</p>&#xA;&#xA;<p>In jest.config.js use:</p>&#xA;&#xA;<pre><code>""testResultsProcessor"": ""jest-teamcity""&#xA;</code></pre>&#xA;",7663531,"",,"",,2018-10-11T01:04:30,"","",,0,,,
52558913,2,,52557538,2018-09-28T15:56:11,,4,,"<p>So, here are the steps that make it work:</p>&#xA;&#xA;<p>First remove your node_modules folder and package-lock.json&#xA;and follow below steps </p>&#xA;&#xA;<p>install electron-rebuild</p>&#xA;&#xA;<blockquote>&#xA;  <p>npm install --save-dev electron-rebuild</p>&#xA;</blockquote>&#xA;&#xA;<p>install sqlite3 using npm</p>&#xA;&#xA;<blockquote>&#xA;  <p>npm install --save sqlite3</p>&#xA;</blockquote>&#xA;&#xA;<p>rebuild electron with sqlite3. In package.json scripts section, add:</p>&#xA;&#xA;<blockquote>&#xA;  <p>""rebuild"": ""electron-rebuild -f -w sqlite3""</p>&#xA;</blockquote>&#xA;&#xA;<p>run the following command</p>&#xA;&#xA;<blockquote>&#xA;  <p>npm run rebuild</p>&#xA;</blockquote>&#xA;&#xA;<p>Now, you’ll get another binding, something like:</p>&#xA;&#xA;<blockquote>&#xA;  <p>/.../node_modules/sqlite3/lib/binding/electron-v1.4-darwin-x64/node_sqlite3.node</p>&#xA;</blockquote>&#xA;&#xA;<p>which is accepted by electron.</p>&#xA;",4098392,"",,"",,2018-09-28T15:56:11,"","",,1,,,
52586544,2,,52338407,2018-10-01T07:41:30,,1,,"<p>When the Socket host is ip instead of the domain, I have the same problem. Maybe this is the bug of Electron. Upgrading to electron3.0, and Socket.connect is fixed. </p>&#xA;",2964086,"",,"",,2018-10-01T07:41:30,"","",,1,,,
52604484,2,,52599019,2018-10-02T08:17:04,,3,,"<p>It works for me when applying background color on <code>BrowserWindow</code> directly.&#xA;It seems to be undocumented but it <a href=""https://github.com/electron/electron/blob/master/atom/browser/api/atom_api_browser_window.h#L73"" rel=""nofollow noreferrer"">exists</a> (from <a href=""https://github.com/electron/electron/commit/e36d455d518cf79bc06a33a27df6e597dbc39485"" rel=""nofollow noreferrer"">0.34.1</a> on)&#xA;</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow } = require('electron')&#xA;&#xA;function createWindow () {&#xA;  let mainWindow = new BrowserWindow({&#xA;    transparent: true&#xA;  })&#xA;  mainWindow.loadURL(""http://browserify.org"") // transparent background&#xA;  mainWindow.setBackgroundColor('#56cc5b10') // turns opaque brown&#xA;}&#xA;app.on('ready', createWindow)&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Doing the same from renderer process seems to be buggy indeed.</p>&#xA;&#xA;<p>However I noticed that if you un-focus then focus the window it'll start working properly.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>  &lt;script&gt;&#xA;    const { remote } = require('electron')&#xA;    const mainWindow = remote.getCurrentWindow()&#xA;    mainWindow.setBackgroundColor('#56cc5b10')&#xA;    mainWindow.blur()&#xA;    mainWindow.focus()&#xA;  &lt;/script&gt;&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2018-10-03T08:14:04,2018-10-03T08:14:04,"","",,1,,,
52618888,2,,52608156,2018-10-03T02:26:45,,2,,"<p>Your mock service doesn't need to extend the real one. You can just have something like this:</p>&#xA;&#xA;<pre><code>export class TestServiceMock {&#xA;  public isFileExistent(path: string): boolean {&#xA;    return true;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This defines all the public methods/fields that outside code can interact with and in the case of testing expects to find.</p>&#xA;&#xA;<p>Then in your test file add the following to your beforEach block that angular provides by default:</p>&#xA;&#xA;<pre><code>TestBed.configureTestingModule({&#xA;  declarations: [&#xA;    AppComponent&#xA;  ],&#xA;  providers: [&#xA;    {provide: TestService, useValue: new TestServiceMock()} // &lt;- this is what you need&#xA;  ]&#xA;}).compileComponents();&#xA;</code></pre>&#xA;&#xA;<p>The line marked with the arrow in the comment essentially says provide <code>TestService</code> but actually use this value for it. That way components that expect to receive <code>TestService</code> get it but not the real one.</p>&#xA;&#xA;<p>Using the <code>TestBed</code> you can then get a handle of the TestService that you injected (which is the fake one) and apply spies to it to manipulate the output of its methods.</p>&#xA;&#xA;<p>I hope that helps.</p>&#xA;",8459521,"",,"",,2018-10-03T02:26:45,"","",,1,,,
52633637,2,,35916158,2018-10-03T18:35:15,,51,,"<p>There is a new API now: <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#apprequestsingleinstancelock"" rel=""noreferrer"">requestSingleInstanceLock</a></p>&#xA;&#xA;<pre><code>const { app } = require('electron')&#xA;let myWindow = null&#xA;&#xA;const gotTheLock = app.requestSingleInstanceLock()&#xA;&#xA;if (!gotTheLock) {&#xA;  app.quit()&#xA;} else {&#xA;  app.on('second-instance', (event, commandLine, workingDirectory) =&gt; {&#xA;    // Someone tried to run a second instance, we should focus our window.&#xA;    if (myWindow) {&#xA;      if (myWindow.isMinimized()) myWindow.restore()&#xA;      myWindow.focus()&#xA;    }&#xA;  })&#xA;&#xA;  // Create myWindow, load the rest of the app, etc...&#xA;  app.on('ready', () =&gt; {&#xA;  })&#xA;}&#xA;</code></pre>&#xA;",899227,"",,"",,2018-10-03T18:35:15,"","",,1,,,
52699178,2,,52641122,2018-10-08T09:26:10,,2,,"<blockquote>&#xA;  <p>if it is common practice to use an in-memory database for a test environment, instead </p>&#xA;</blockquote>&#xA;&#xA;<p>Sadly it is a common practise, but not particulary good one. When you use different database for testing and other for production your tests are actually not testing that the application code is working in real database. </p>&#xA;&#xA;<p>Other negative effect is also that you cannot use special features of any of those databases, but the code would have to use that subset of DB features, which are supported by both of the databases.</p>&#xA;&#xA;<p>I would ran all the tests with all the supported real databases to actually make sure that code works on every targeted setup. </p>&#xA;&#xA;<p>ps. Someone was telling to use mocks for abstracting database... that is another bad practise. They work for some small part of testing, but in general case you need to run tests against real database to be sure that code works correctly. Important thing is to setup tests in a way that you have a fast way of truncating old data and populating new test data in.</p>&#xA;",360060,"",,"",,2018-10-08T09:26:10,"","",,1,,,
52568948,2,,52568352,2018-09-29T13:45:09,,2,,"<p>The problem with <code>grabPopup</code> is that it isn't expose underlying promise, it should be:</p>&#xA;&#xA;<pre><code>function grabPopup(fetchurl) {&#xA;  return axios.get(fetchurl)...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is special case of <a href=""https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call"">this popular problem</a>. There is no way to access the result synchronously because the function is <strong>a</strong>synchronous.</p>&#xA;&#xA;<p>It should be:</p>&#xA;&#xA;<pre><code>grabPopup(""https://pastebin.com/raw/0L1erTs1"")).then(result =&gt; {&#xA;  console.log(result);&#xA;});&#xA;</code></pre>&#xA;",3731501,"",,"",,2018-09-29T13:45:09,"","",,2,,,
52669696,2,,52647009,2018-10-05T16:18:31,,1,,"<p>This is what I am familiar with</p>&#xA;&#xA;<pre><code>const {BrowserWindow} = require('electron')&#xA;let win = new BrowserWindow({width: 800, height: 600})&#xA;</code></pre>&#xA;&#xA;<p><strong>Edit</strong> : I have seen online where the type is specified as</p>&#xA;&#xA;<pre><code>win: Electron.BrowserWindow&#xA;</code></pre>&#xA;",187519,"",187519,"",2018-10-05T16:36:50,2018-10-05T16:36:50,"","",,2,,,
52688530,2,,52688381,2018-10-07T12:34:11,,2,,"<p>Node.js is a Javascript runtime, using it doesn't mean you need to use it to run a server of any kind. In fact, Electron uses Node.js internally to implement <a href=""https://electronjs.org/docs/tutorial/application-architecture#main-and-renderer-processes"" rel=""nofollow noreferrer"">""lower level operating system interactions""</a>, like the ability to read local files.</p>&#xA;",893780,"",,"",,2018-10-07T12:34:11,"","",,2,,,
52689732,2,,52684262,2018-10-07T14:58:20,,2,,"<blockquote>&#xA;  <p>I tried mathjax-electron and mathjax-node but I couldn't get it working at all. Can someone give an example on how to implement it?</p>&#xA;</blockquote>&#xA;&#xA;<p>Sure. Using mathjax-electron:</p>&#xA;&#xA;<pre><code>mkdir mathjax-test&#xA;cd mathjax-test&#xA;npm init -y&#xA;npm i -s electron mathjax-electron&#xA;</code></pre>&#xA;&#xA;<p>Then create two files: <code>index.js</code> and <code>index.html</code>.</p>&#xA;&#xA;<p><strong>index.js</strong> (borrowed from here -  <a href=""https://www.christianengvall.se/electron-hello-world/"" rel=""nofollow noreferrer"">Electron hello world</a>)</p>&#xA;&#xA;<pre><code>const electron = require('electron')&#xA;const app = electron.app&#xA;const BrowserWindow = electron.BrowserWindow&#xA;&#xA;let mainWindow&#xA;&#xA;function createWindow () {&#xA;  mainWindow = new BrowserWindow({width: 800, height: 600})&#xA;  mainWindow.loadURL(`file://${__dirname}/index.html`)&#xA;  mainWindow.webContents.openDevTools()&#xA;&#xA;  mainWindow.on('closed', function () {&#xA;    mainWindow = null&#xA;  })&#xA;}&#xA;&#xA;app.on('ready', createWindow)&#xA;&#xA;app.on('window-all-closed', function () {&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;&#xA;app.on('activate', function () {&#xA;  if (mainWindow === null) {&#xA;    createWindow()&#xA;  }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><strong>index.html</strong> (using <a href=""https://github.com/nteract/mathjax-electron#loading-mathjax"" rel=""nofollow noreferrer"">the first example from their homepage</a>)</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;meta charset=""UTF-8""&gt;&#xA;    &lt;title&gt;Mathjax&lt;/title&gt;&#xA;    &lt;script src=""./node_modules/mathjax-electron/resources/MathJax/MathJax.js?config=electron""&gt;&lt;/script&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;h1&gt;MathJax&lt;/h1&gt;&#xA;&#xA;    &lt;script&gt;&#xA;      var mathjaxHelper = require('mathjax-electron')&#xA;      var container = document.createElement('div')&#xA;      container.innerHTML = '$$\\sum\\limits_{i=0}^{\\infty} \\frac{1}{n^2}$$'&#xA;      mathjaxHelper.typesetMath(container)&#xA;      document.querySelector('body').append(container)&#xA;    &lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Then kick it off from the root of your project:</p>&#xA;&#xA;<pre><code>./node_modules/electron/dist/electron .&#xA;</code></pre>&#xA;&#xA;<p>The result:</p>&#xA;&#xA;<p><img src=""https://i.stack.imgur.com/8tTBj.png"" alt=""MathJax Electron showing an equation""></p>&#xA;&#xA;<p>HTH.</p>&#xA;",1136887,"",,"",,2018-10-07T14:58:20,"","",,2,,,
52704244,2,,52692839,2018-10-08T14:15:11,,6,,"<p>I think the reason is that sqlite3@4.0.2 seems to be not (yet) compatible with recently released electron@3.0.3. When you have a look at your log you can see that downloading the according package failed:<br>&#xA;<code>node-pre-gyp WARN Tried to download(403): https://mapbox-node-binary.s3.amazonaws.com/sqlite3/v4.0.2/electron-v3.0-win32-x64.tar.gz</code></p>&#xA;&#xA;<p>Instead, when you try to open <code>https://mapbox-node-binary.s3.amazonaws.com/sqlite3/v4.0.2/electron-v2.0-win32-x64.tar.gz</code> in your browser, it works.</p>&#xA;&#xA;<p>I'm currently discovering the same issue. Using an older version of electron works for me. My <code>package.json</code> looks something like this:<br>&#xA;<code>""sqlite3"": ""^4.0.2"",&#xA;...&#xA;""electron"": ""2.0.7"",&#xA;""electron-builder"": ""20.28.1"",&#xA;</code></p>&#xA;&#xA;<p>Hope that helps!</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Update:</strong> A few days ago <a href=""https://github.com/mapbox/node-sqlite3/blob/master/CHANGELOG.md"" rel=""noreferrer"">sqlite3@4.0.3</a> has been published. This version resolves the issue and can now be used along with electron@3.0.6. My dependencies look like this now:<br>&#xA;<code>""sqlite3"": ""^4.0.3"",&#xA;...&#xA;""electron"": ""3.0.6"",&#xA;""electron-builder"": ""20.28.4"",&#xA;</code></p>&#xA;",5276055,"",5276055,"",2018-10-25T20:31:31,2018-10-25T20:31:31,"","",,2,,,
52718534,2,,52710458,2018-10-09T10:13:32,,0,,"<p>Bellow is the page accoring your question</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE HTML&gt;&#xD;&#xA;&lt;html&gt;&#xD;&#xA;&lt;head&gt;&#xD;&#xA;    &lt;style&gt;&#xD;&#xA;        .split {&#xD;&#xA;            width: 100%;&#xD;&#xA;            position: fixed;&#xD;&#xA;            z-index: 1;&#xD;&#xA;            top: 0;&#xD;&#xA;            overflow-x: hidden;&#xD;&#xA;            padding-top: 20px;&#xD;&#xA;            height:100%;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        .left {&#xD;&#xA;            left: 0;&#xD;&#xA;            background-color: #111;&#xD;&#xA;            width: 25%;&#xD;&#xA;            float: left;&#xD;&#xA;            height: 100%;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        .right {&#xD;&#xA;            right: 0;&#xD;&#xA;            background-color: red;&#xD;&#xA;            width: 75%;&#xD;&#xA;            float: right;&#xD;&#xA;            height: 100%;&#xD;&#xA;        }&#xD;&#xA;    &lt;/style&gt;&#xD;&#xA;&lt;/head&gt;&#xD;&#xA;&#xD;&#xA;&lt;body&gt;&#xD;&#xA;    &lt;div class=""split""&gt;&#xD;&#xA;        &lt;div class=""split left""&gt;&#xD;&#xA;&#xD;&#xA;            &lt;h1&gt;Hi&lt;/h1&gt;&#xD;&#xA;            &lt;h2&gt;test &lt;/h2&gt; &lt;a href=""javascript:test()""&gt;Some text.&lt;/a&gt;&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=""split right""&gt;&#xD;&#xA;&#xD;&#xA;            &lt;div id=""content""&gt;&#xD;&#xA;&#xD;&#xA;            &lt;/div&gt;&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        function test() {&#xD;&#xA;            var p = document.createElement(""p"");&#xD;&#xA;            p.innerText = ""This is the test element text"";&#xD;&#xA;           &#xD;&#xA;            document.getElementById(""content"").innerHTML = p.innerHTML;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;/body&gt;&#xD;&#xA;&lt;/html&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",10460106,"",,"",,2018-10-09T10:13:32,"","",,2,,,
52735443,2,,52709372,2018-10-10T08:05:59,,1,,"<p>It seems to me that it works exactly as you described, so maybe the requirements are different.</p>&#xA;&#xA;<p>This code&#xA;</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron')&#xA;&#xA;app.on('browser-window-focus', (event, win) =&gt; {&#xA;  console.log('browser-window-focus', win.webContents.id)&#xA;})&#xA;app.on('browser-window-blur', (event, win) =&gt; {&#xA;  if (win.webContents.isDevToolsFocused()) {&#xA;    console.log('Ignore this case')&#xA;  } else {&#xA;    console.log('browser-window-blur', win.webContents.id)&#xA;  }&#xA;})&#xA;app.once('ready', () =&gt; {&#xA;  new BrowserWindow()&#xA;  new BrowserWindow().webContents.openDevTools({detach: true})&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>works the following way (in 3.0.3) given that nothing is focused initially:</p>&#xA;&#xA;<ul>&#xA;<li>Clicking on window <code>1</code> prints <code>browser-window-focus 1</code></li>&#xA;<li>Clicking on window <code>2</code> prints <code>browser-window-blur 1 browser-window-focus 2</code></li>&#xA;<li>Clicking on devtools window prints <s><code>browser-window-blur 2</code></s> <code>Ignore this case</code></li>&#xA;</ul>&#xA;&#xA;<p>So as far as I see devtool is not included in these events, windows are getting blurred for <em>any</em> other window focused (including devtool)</p>&#xA;",2550156,"",2550156,"",2018-10-11T15:01:26,2018-10-11T15:01:26,"","",,2,,,
52540751,2,,52540424,2018-09-27T15:48:33,,19,,"<p>Well, I end up finding the solution thanks to <a href=""https://ahmadawais.com/fix-macos-mojave-font-rendering-issue/"" rel=""noreferrer"">Ahmad Awais post</a>. It is a font rendering issue that affects to many ElectronJS based apps.</p>&#xA;&#xA;<ol>&#xA;<li><p>Open the terminal and execute</p>&#xA;&#xA;<pre><code>defaults write -g CGFontRenderingFontSmoothingDisabled -bool FALSE&#xA;</code></pre></li>&#xA;<li><p>Restart the system</p></li>&#xA;</ol>&#xA;",663064,"",,"",,2018-09-27T15:48:33,"","",,3,,,
52725763,2,,52724004,2018-10-09T16:45:58,,2,,"<p>First, create an <code>afterPack.js</code> file, containing this code:</p>&#xA;&#xA;<pre><code>exports.default = async function () {&#xA;    const { exec } = require('child_process');&#xA;    const bat = exec('powershell ""&amp; """"path/to/powershell/file.ps1""""""');&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Edit the path to the .ps1 file accordingly. You may need to add a '.\' to the start of the path. The console readout will tell you if you do.</p>&#xA;&#xA;<p>Next, edit your package.json file to include an <code>afterPack</code> parameter in your build settings, like so:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/une7J.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/une7J.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>Now when you run your build script, it will run your <code>.ps1</code> file.</p>&#xA;",5525402,"",,"",,2018-10-09T16:45:58,"","",,3,,,
52682169,2,,52682085,2018-10-06T18:33:05,,2,,"<p>The content of the json file assuming it is a json object can be assigned to a javascript variable in the html document in a script tag.</p>&#xA;&#xA;<p>Then to refer to, for example <code>foo</code>, you use <code>theJsonObject.foo</code>;</p>&#xA;&#xA;<p>With the following javascript snipet you can see inthe browser's console the name of each property an the value.</p>&#xA;&#xA;<p>How you mix this in your current code depends on how you are writting it. But make sure the variable is declared before you use it.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>for (let prop in theJsonObject) {  &#xD;&#xA;  console.log( prop + "": "" + theJsonObject[prop] );&#xD;&#xA;};</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;html&gt;&#xD;&#xA;  &lt;head&gt;&#xD;&#xA;      ....&#xD;&#xA;      &lt;script&gt;&#xD;&#xA;         var theJsonObject = {""foo"":""bar"", ""bar"":""foo"", ""far"":""boo""};&#xD;&#xA;      &lt;/script&gt;&#xD;&#xA;  &lt;/head&gt;&#xD;&#xA;  &lt;body&gt;&#xD;&#xA;      ....&#xD;&#xA;  &lt;/body&gt;&#xD;&#xA;&lt;/html&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",2225960,"",2225960,"",2018-10-06T18:54:40,2018-10-06T18:54:40,"","",,6,,,
24053407,2,,24019665,2014-06-05T06:47:16,,0,,<blockquote>&#xA;  <p>The root of the project is node-webkit's CWD.&#xA;  The right path should be the next one.</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>var path = 'resources/file1.txt';&#xA;</code></pre>&#xA;,3315462,"",,"",,2014-06-05T06:47:16,"","",,4,,,
24053550,2,,24014318,2014-06-05T06:55:06,,0,,"<blockquote>&#xA;  <p>Please monitor <a href=""https://github.com/rogerwang/node-webkit/issues/132"" rel=""nofollow"">#issue132</a>.&#xA;  It would be a feature later.</p>&#xA;</blockquote>&#xA;",3315462,"",,"",,2014-06-05T06:55:06,"","",,0,,,
24232602,2,,24232534,2014-06-15T18:10:37,,0,,"<p>Instead of <code>float:right/left</code> for <code>.mainarea</code>/<code>.sidebar</code> use <code>display:table-cell</code>. Also :</p>&#xA;&#xA;<pre class=""lang-css prettyprint-override""><code>body, html { height: 100%; margin:0; }&#xA;.content { width: 100%; height: calc(100% - 80px); display:table; }&#xA;</code></pre>&#xA;&#xA;<h3><a href=""http://jsfiddle.net/3zGYa/5/"" rel=""nofollow"">JSFiddle</a></h3>&#xA;",3444240,"",3444240,"",2014-06-15T18:52:01,2014-06-15T18:52:01,"","",,2,,,
24109261,2,,24104658,2014-06-08T18:10:50,,1,,"<p>You have to make file dialog open with emulating <code>click</code> event of an <code>input</code>, then get <code>innerHTML</code> of <code>#editor</code>, and finally use node's <code>fs.writeFile</code> to save content.</p>&#xA;&#xA;<p>Here is full working example:</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;&lt;script&gt;&#xA;var initInputFile = function() {&#xA;    document.getElementById('inputFile').addEventListener('change', function() {&#xA;        var path = this.value;   //get fullpath of chosen file&#xA;        var content = document.getElementById('editor').innerHTML;  //get editor's content&#xA;        content = (' ' + content).slice(1);   //hack to prevent strange bug of saving just half of the content&#xA;        require('fs').writeFile(path, content, function(err) {&#xA;            if (err) throw err;&#xA;            console.log('done');&#xA;        });&#xA;&#xA;        var wrapper = document.getElementById('inputFileWrapper');&#xA;        wrapper.innerHTML = wrapper.innerHTML;  //hack to make ""change"" event trigger...&#xA;        initInputFile();                            //...when choosing the same file&#xA;    });&#xA;}&#xA;window.onload = function() {&#xA;    initInputFile();&#xA;    document.getElementById('saveBtn').addEventListener('click', function() {&#xA;        var event = document.createEvent('MouseEvents');&#xA;        event.initMouseEvent('click');&#xA;        document.getElementById('inputFile').dispatchEvent(event);&#xA;    });&#xA;}&#xA;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;    &lt;div id=""editor"" class=""textbox"" style=""width:400px; height:100px;"" contenteditable&gt;&lt;/div&gt;&#xA;    &lt;div id=""inputFileWrapper"" style=""display:none;""&gt;&#xA;        &lt;input type=""file"" id=""inputFile"" nwsaveas=""untitled.txt""/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;input type=""button"" id=""saveBtn"" value=""Save"" /&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps.</p>&#xA;",2600208,"",,"",,2014-06-08T18:10:50,"","",,0,,,
24225321,2,,24224155,2014-06-14T23:47:17,,1,,"<p>So, I have found a solution. I instead use <a href=""https://github.com/ariya/phantomjs/blob/master/examples/rasterize.js"" rel=""nofollow"">https://github.com/ariya/phantomjs/blob/master/examples/rasterize.js</a> with phantomJS and run this from node-webkit with phantomJS and it work like a charm.</p>&#xA;",3678146,"",,"",,2014-06-14T23:47:17,"","",,0,,,
24244314,2,,24244261,2014-06-16T12:57:41,,3,,"<p>You could use the HTML5 download attribute like so:</p>&#xA;&#xA;<pre><code>  &lt;a href=""path/document.pdf"" download&gt; Click to download&lt;/a&gt;&#xA;</code></pre>&#xA;&#xA;<p>This opens a ""save as"" dialog regardless of file type without taking you away from the page.</p>&#xA;",2307758,"",,"",,2014-06-16T12:57:41,"","",,1,,,
24130121,2,,24065228,2014-06-09T22:34:48,,4,,"<p>How do you maximize the app, are you using require('nw.gui').Window.get().maximize()? I'm not experiencing the same issue on Windows 7. </p>&#xA;&#xA;<p>If there is indeed an issue on Windows 8.1, you can just implement the resize method yourself in JS. Not too fancy, but it will work as a workaround until the next version of NW is released...</p>&#xA;&#xA;<pre><code>var nw = require('nw.gui').Window.get();&#xA;nw.resizeTo(screen.availWidth, screen.availHeight);&#xA;nw.moveTo(0, 0);&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>var nw = require('nw.gui').Window.get();&#xA;nw.setMaximumSize(screen.availWidth, screen.availHeight);&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps...</p>&#xA;&#xA;<p>EDIT: Looks like a <a href=""https://github.com/rogerwang/node-webkit/issues/1021"" rel=""nofollow"">known issue</a> on NW. The solutions suggested in the thread are similar to the solutions suggested above.</p>&#xA;",478442,"",478442,"",2014-06-10T08:14:49,2014-06-10T08:14:49,"","",,2,,,
24123182,2,,23731517,2014-06-09T15:09:11,,42,,"<p>I did similar research about two months ago, and in the end I went with node-webkit.  The biggest upside on node-webkit is node.js and npm.  The package management of npm is really nice, and node has well done filesystem access.</p>&#xA;&#xA;<p>Brackets-shell looked interesting, but other than a nice IDE I didn't really get what made this one as good or better than the rest.  They are very clear that ""The brackets-shell is only maintained for use by the Brackets project "", that screams run away to me.</p>&#xA;&#xA;<p><a href=""https://github.com/adobe/brackets-shell#overview"" rel=""noreferrer"">https://github.com/adobe/brackets-shell#overview</a></p>&#xA;&#xA;<p>Atom-shell seems to be recently active, but it seems much like brackets in that they are really writing and editor/IDE that just happens to be attached to a webkit runtime.  It also is built on top of node.js.  This one has the downside of being difficult to search for stuff online without being reminded of your middle school chemistry.</p>&#xA;&#xA;<p>I really don't want an new editor, and most programmers have their favorite already.  For the actual application development, they pretty much work the same, and should, since they all use webkit.   You basically write 90-95% of it like a website, and then deal with the native parts, and some config.</p>&#xA;&#xA;<p>These things are true for all three of them&#xA;platforms - runs on Windows, Mac, and Linux&#xA;language support - HTML5, CSS3 and Javascript : since they run javascript you can download and run nearly any library/framework that you want.</p>&#xA;&#xA;<p>The big caveat on webkit is codec support.  Typically you will have problems with non-free video codecs, unless you rebuild the dll/so to support them.  For example the shipped node-webkit won't play mp4 video.</p>&#xA;",3565153,"",,"",,2014-06-09T15:09:11,"","",,5,,,
59699510,2,,59698697,2020-01-11T23:13:27,,0,,"<p>The command you are running is:</p>&#xA;&#xA;<pre><code>yarn add --dev @babel-loader @babel/core @babel/preset-react @babel/preset-typescript typescript&#xA;</code></pre>&#xA;&#xA;<p>but the command you should be running is:</p>&#xA;&#xA;<pre><code>yarn add --dev babel-loader @babel/core @babel/preset-react @babel/preset-typescript typescript&#xA;</code></pre>&#xA;&#xA;<p>This is because the package is called <code>babel-loader</code> not <code>@babel-loader</code> (no <code>@</code> sign is needed) </p>&#xA;&#xA;<p><a href=""https://github.com/babel/babel-loader#install"" rel=""nofollow noreferrer"">See here for more info</a></p>&#xA;",10431732,"",,"",,2020-01-11T23:13:27,"","",,0,,,
59711047,2,,59705289,2020-01-13T05:36:07,,0,,"<p>Thanks to Xarqron &amp; Bergi I made it finnaly work, I just had to throw error in both connectDB and init catch's </p>&#xA;&#xA;<pre><code>async function connectDB(){&#xA;    try{&#xA;        let connected = await db.connect(THIS_SHOULD_THROW_ERROR);&#xA;&#xA;        return connected;&#xA;    }catch( error ){&#xA;        dispatcher.send('connection-error', error);&#xA;        throw error;&#xA;    }&#xA;}&#xA;&#xA;exports.init = async function( win ){&#xA;    dispatcher.init(win);&#xA;&#xA;    try{&#xA;        const connected = await connectDB();&#xA;&#xA;        /*if(!connected){&#xA;            dispatcher.send('fatal-error', ""MYSQL NOT CONNECTED"");&#xA;        }*/&#xA;    }catch( error ){&#xA;        dispatcher.send('fatal-error', error);&#xA;        throw error;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Do you advice to always throw error in every catch block so that debugging would be easier ? Because I had hard time to find this kind of bug without any console warning or error </p>&#xA;",1611556,"",,"",,2020-01-13T05:36:07,"","",,0,,,
59725486,2,,59724062,2020-01-13T23:08:04,,2,,"<blockquote>&#xA;  <p>I know I need to add import { app } from ""electron""; some where but I&#xA;  am unsure where to place it.</p>&#xA;</blockquote>&#xA;&#xA;<p>The <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md"" rel=""nofollow noreferrer"">app</a> module is always (in my experience) imported in your <code>main</code> process so you can control the applications lifecycle. However, if you want to use some of the <code>app</code> module functionality in your <code>renderer</code> process, you can import it there through the <code>remote</code> module ( as shown in the accepted answer to this question: <a href=""https://stackoverflow.com/questions/47957479/how-to-use-electrons-app-getpath-to-store-data/47962333#47962333"">How to use electron&#39;s app.getPath() to store data?</a> )</p>&#xA;&#xA;<pre><code>const remote = require('electron').remote;&#xA;const app = remote.app;&#xA;console.log(app.getPath('userData'));&#xA;</code></pre>&#xA;&#xA;<p>The <code>main</code> and <code>renderer</code> processes are key concepts in <code>Electron</code> so I'd suggest reading up on those. The gist is that you have one <code>main</code> process – it has no visual representation and it is involved with the lifecycle of your app, creating and destroying <code>renderer</code> processes (like <a href=""https://electronjs.org/docs/api/browser-window"" rel=""nofollow noreferrer"">BrowserWindows</a>), communication between renderer processes, etc.  – and you can have as many <code>renderer</code> processes as you need.</p>&#xA;&#xA;<p>So if you want to read and write files you can do it in the <code>renderer</code> process as shown above – or you can do it in the <code>main</code> process. In the latter case, if a <code>renderer</code> process wants to save a file, it can message the <code>main</code> process through <a href=""https://www.brainbell.com/javascript/ipc-communication.html"" rel=""nofollow noreferrer"">IPC</a>, sending the data to be saved. </p>&#xA;&#xA;<p>Which way you do it is an architectural choice.</p>&#xA;",840992,"",,"",,2020-01-13T23:08:04,"","",,0,,,
59759356,2,,55618591,2020-01-15T20:51:08,,0,,"<p>Thanks for @edelCustodio&#xA;<a href=""https://github.com/edelCustodio"" rel=""nofollow noreferrer"">https://github.com/edelCustodio</a></p>&#xA;&#xA;<p>Reference: <a href=""https://github.com/electron-userland/electron-builder/issues/3776#issuecomment-486888574"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-builder/issues/3776#issuecomment-486888574</a></p>&#xA;&#xA;<p>This works for me, on PowerShell type this</p>&#xA;&#xA;<pre><code>[Environment]::SetEnvironmentVariable(""GH_TOKEN"",""my-personal-token"",""User"") &#xA;</code></pre>&#xA;&#xA;<p>and be sure that you package.json will be like this:</p>&#xA;&#xA;<pre><code>""build"": {&#xA;    ""appId"": ""com.friasoftit.electron-auto-update"",&#xA;    ""productName"": ""Electron Auto Update"",&#xA;    ""publish"": [&#xA;      {&#xA;        ""provider"": ""github"",&#xA;        ""owner"": ""edelCustodio"",&#xA;        ""repo"": ""electron-auto-update""&#xA;      }&#xA;    ],&#xA;    ""win"": {&#xA;      ""publish"": [&#xA;        ""github""&#xA;      ],&#xA;      ""target"": [&#xA;        {&#xA;          ""target"": ""nsis"",&#xA;          ""arch"": [&#xA;            ""x64"",&#xA;            ""ia32""&#xA;          ]&#xA;        }&#xA;      ]&#xA;    }&#xA;  },&#xA;</code></pre>&#xA;&#xA;<p>And then I run this command yarn run publish and this is how is my publish is on my package.json ""publish"": ""build --win -p always"" don't forget to close and open a new PowerShell terminal</p>&#xA;",7406981,"",,"",,2020-01-15T20:51:08,"","",,0,,,
59762525,2,,58126745,2020-01-16T03:12:27,,0,,"<p>The problem turned out to be the fact that I created the window with the option <code>closable: false</code>, preventing the auto updater from closing it. The auto updater works perfectly after removing this setting</p>&#xA;",8610083,"",,"",,2020-01-16T03:12:27,"","",,0,,,
59781174,2,,59781063,2020-01-17T04:25:09,,1,,"<p>Use <code>app.makeSingleInstance()</code>, to make sure the user does not open multiple instances of electron. Once you share your code I will make an edit to show you how to properly implement it.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>var shouldQuit = app.makeSingleInstance(function(commandLine, workingDirectory) {&#xA;  // Someone tried to run a second instance, we should focus our window.&#xA;  if (myWindow) {&#xA;    if (myWindow.isMinimized()) myWindow.restore();&#xA;    myWindow.focus();&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",7689333,"",,"",,2020-01-17T04:25:09,"","",,0,,,
59782086,2,,59777774,2020-01-17T06:12:18,,1,,"<p>You should use <strong>PouchDB</strong> only in case it must be possible to also work offline with your application. Otherwise it makes the code unnecessary more complex, but does not bring any real benefits in your case. Simply access CouchDB directly through its HTTP API.</p>&#xA;&#xA;<p>CouchDB distinguishes between two types of users</p>&#xA;&#xA;<ol>&#xA;<li><strong>admin users</strong> are stored in the <code>[admins]</code> section of the configuration file $COUCHDB_HOME/etc/local.ini. When setting up your CouchDB, you're requested to define a first admin user. Additional admin users may be created later on (see <a href=""https://docs.couchdb.org/en/stable/intro/security.html#creating-new-admin-user"" rel=""nofollow noreferrer"">Creating New Admin User</a>). </li>&#xA;<li><strong>regular users</strong> are stored in the <em>authentication database</em>, named <code>_users</code>. User documents contain system information like login, password hash and roles but may also contain personal information like real name, email, phone etc. Creating a new regular user is trivial (see <a href=""https://docs.couchdb.org/en/stable/intro/security.html#creating-a-new-user"" rel=""nofollow noreferrer"">Creating New User</a>). </li>&#xA;</ol>&#xA;",2358409,"",,"",,2020-01-17T06:12:18,"","",,0,,,
59793652,2,,59780330,2020-01-17T19:20:59,,0,,"<p>Turns out I was doing something dumb. Because my button is inside a form, and I didn't specify the button type, it was doing the default behavior of ""submit"" which causes a render with the onClick. </p>&#xA;&#xA;<p>The solution was to add type=""button"" to the button and now it's solved.</p>&#xA;&#xA;<pre><code>    &lt;div className=""form-group""&gt;&#xA;        &lt;button onClick={addUrls} type=""button""&gt;&#xA;            Add a Reference URL&#xA;        &lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>I hope this can save someone some time if they come across this problem in the future.</p>&#xA;",8431351,"",,"",,2020-01-17T19:20:59,"","",,0,,,
59801049,2,,59731858,2020-01-18T13:29:24,,-1,,<p>You can use electron window for this. You can directly get path using input type file if you use electron windows dialog.</p>&#xA;,12075635,"",,"",,2020-01-18T13:29:24,"","",,0,,,
59809471,2,,59799629,2020-01-19T11:13:27,,0,,"<p>The problem was not clearing the inputs, but rather <a href=""https://stackoverflow.com/questions/56805920/cant-edit-input-text-field-after-window-alert"">showing the confirm box</a>. I used the following snippet instead:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>dialog.showMessageBoxSync(&#xA;    title: ""Clear inputs"",&#xA;    message: ""Clear all input boxes?"",&#xA;    type: ""warning"",&#xA;    buttons: [""Cancel"", ""Ok""]&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>And now everything works as expected.</p>&#xA;",10666216,"",,"",,2020-01-19T11:13:27,"","",,0,,,
59821860,2,,59138340,2020-01-20T10:59:08,,0,,<p>This issue has been solved when I created a Windows Build from a windows system. According to my understanding -  Cross origin OS build was generating that issue.</p>&#xA;,11440433,"",,"",,2020-01-20T10:59:08,"","",,0,,,
59850313,2,,59850258,2020-01-21T22:45:51,,2,,"<p>Your current code says ""Every time <code>togBtn</code> is clicked, add a listener to <code>checkbox</code> that will be executed when it <code>change</code>s.""</p>&#xA;&#xA;<p>Click the button five times - you add five <code>change</code> listeners to <code>checkbox</code>. Every single listener will run when the checkbox changes state, and the more times you click <code>togBtn</code>, the more times the listener function will run in the future.</p>&#xA;&#xA;<p>To fix, you need to structure your code in a way that you can <em>never</em> add more than one listener unless you really, really need to (unlikely). This will certainly involve moving the <code>change</code> listener outside of the <code>click</code> listener.</p>&#xA;",12270289,"",,"",,2020-01-21T22:45:51,"","",,0,,,
59867679,2,,59866014,2020-01-22T20:21:14,,0,,"<p>Well, I figured out my problem:</p>&#xA;&#xA;<p>I was loading the preload script in the BrowserWindow. I needed to load it into the BrowserView instead and then it works.</p>&#xA;",1078475,"",,"",,2020-01-22T20:21:14,"","",,0,,,
59869925,2,,58905950,2020-01-23T00:01:48,,0,,"<p>I had a similar problem. I had installed multiple versions of Electron (electron, electron-html-to, electron-prebuilt), and the problem was resolved when I deleted the older versions in package.json so only one was left. The assumption is that they were interfering with each other. </p>&#xA;&#xA;<p>So check the installed versions of electron, because the problem might be there rather than your code.</p>&#xA;",11973670,"",,"",,2020-01-23T00:01:48,"","",,0,,,
59870929,2,,59868274,2020-01-23T02:45:00,,0,,"<pre><code>mainWindow.webContents.on('did-finish-load', () =&gt; {&#xA;    mainWindow.webContents.openDevTools()&#xA;    mainWindow.webContents.executeJavaScript(`window.addEventListener('keydown', (e) =&gt; {&#xA;      if (e.key === 'ArrowLeft' &amp;&amp; e.altKey) {&#xA;        console.log('Alt + &lt;-')&#xA;        window.history.back();&#xA;      } else if (e.key === 'ArrowRight' &amp;&amp; e.altKey) {&#xA;        console.log('Alt + -&gt;')&#xA;        window.history.forward();&#xA;      }&#xA;    });`)&#xA;  })&#xA;</code></pre>&#xA;",10909844,"",,"",,2020-01-23T02:45:00,"","",,0,,,
59874607,2,,59870267,2020-01-23T08:53:36,,0,,"<p><strong>Solution</strong></p>&#xA;&#xA;<pre><code>var formdata = {&#xA;    key1: 'value1',&#xA;    key2: 'value2',&#xA;    file1: fs.createReadStream(path_to_file)&#xA;}&#xA;&#xA;request.post({url: 'http://127.0.0.1/upload', formData: formdata},&#xA;    function (err, resp, body) {&#xA;        if (err) {&#xA;            console.log('Error!');&#xA;        } else {&#xA;            console.log('URL: ' + body);&#xA;        }&#xA;    }&#xA;)&#xA;</code></pre>&#xA;",4759016,"",,"",,2020-01-23T08:53:36,"","",,0,,,
59889863,2,,59889729,2020-01-24T02:58:50,,1,,"<p><code>invoke</code> is new api to help ergonomics around existing <code>send</code> / <code>on</code> pair when try to invoke some fn to return values to the sender. You can achieve same thing via <code>send</code> if you prefer to use it, there's no functional differences.</p>&#xA;",2742189,"",,"",,2020-01-24T02:58:50,"","",,0,,,
59893515,2,,59891299,2020-01-24T09:23:01,,0,,"<p><strong>WebContents:</strong></p>&#xA;&#xA;<p>Event Listener for Electron Webcontents:</p>&#xA;&#xA;<pre><code>const { BrowserWindow } = require('electron')&#xA;&#xA;let win = new BrowserWindow({ width: 800, height: 1500 })&#xA;win.loadURL('http://github.com');&#xA;&#xA;win.webContents.on('did-finish-load', () =&gt; {&#xA;   console.log('finished to load ');&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Possible WebContent events. Refer: <a href=""https://www.electronjs.org/docs/api/web-contents#instance-events"" rel=""nofollow noreferrer"">https://www.electronjs.org/docs/api/web-contents#instance-events</a></p>&#xA;&#xA;<p><strong>Webview:</strong></p>&#xA;&#xA;<p>Event listener for electron <code>webviews</code>.</p>&#xA;&#xA;<p>HTML: </p>&#xA;&#xA;<pre><code>&lt;webview id=""webview"" src=""content.html""&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;&#xA;<p>Js:</p>&#xA;&#xA;<pre><code>let webview = document.getElementById(""webview"");&#xA;webview.addEventListener(""dom-ready"", () =&gt; {&#xA;     console.log(""blah-blah-"");&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Possible webview dom events. Refer: <a href=""https://www.electronjs.org/docs/api/webview-tag#dom-events"" rel=""nofollow noreferrer"">https://www.electronjs.org/docs/api/webview-tag#dom-events</a></p>&#xA;",8579855,"",,"",,2020-01-24T09:23:01,"","",,0,,,
59821792,2,,59803490,2020-01-20T10:54:46,,0,,"<p>Is there any error info in DevTool? like:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Uncaught ReferenceError: require is not defined.</p>&#xA;</blockquote>&#xA;&#xA;<p>If there are errors, you could enable nodeIntegration when open </p>&#xA;&#xA;<pre><code>BrowserWindow, for example &#xA;    splashWindow = new BrowserWindow({&#xA;     width: 900,&#xA;     height: 600,&#xA;     show: true,&#xA;     frame: false,&#xA;     resizable: false,&#xA;     webPreferences: {&#xA;      nodeIntegration: true&#xA;     }&#xA;    });&#xA;</code></pre>&#xA;",12747219,"",,"",,2020-01-20T10:54:46,"","",,1,,,
59821882,2,,59568260,2020-01-20T11:00:18,,0,,"<p>Here is a code sample that will just return the first device instead of having to implement a device chooser:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>  mainWindow.webContents.on('select-bluetooth-device', (event, deviceList, callback) =&gt; {&#xA;    event.preventDefault();&#xA;    console.log('Device list:', deviceList);&#xA;    let result = deviceList[0];&#xA;    if (!result) {&#xA;      callback('');&#xA;    } else {&#xA;      callback(result.deviceId);&#xA;    }&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>Source: <a href=""https://electronjs.org/docs/api/web-contents#event-select-bluetooth-device"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/web-contents#event-select-bluetooth-device</a></p>&#xA;",682179,"",,"",,2020-01-20T11:00:18,"","",,1,,,
59768796,2,,59762823,2020-01-16T11:33:44,,1,,"<p>I recommend the use of <a href=""https://couchdb.apache.org/"" rel=""nofollow noreferrer"">CouchDB</a>, which uses a <code>JSON</code> based document format. CouchDB bundles the server and data storage functionality in a single product, providing a REST-like <strong>HTTP interface</strong> for document insertion, updates, retrieval and deletion.</p>&#xA;&#xA;<p>Therefore, you'll be able to interact with CouchDB directly from within the Electron desktop application. <a href=""https://github.com/apache/couchdb-nano"" rel=""nofollow noreferrer"">Apache CouchDB Nano</a> is the official Node.js library for accessing CouchDB.</p>&#xA;&#xA;<p>The following additional factors speach for CouchDB:</p>&#xA;&#xA;<ul>&#xA;<li>It is open source. </li>&#xA;<li>It has comprehensive documentation.</li>&#xA;<li>It is available for Linux, macOS and Windows.</li>&#xA;<li>It's easily installed and quickly set up.  </li>&#xA;<li>It can be installed on your local computer (for development), on your own servers, or in the cloud.</li>&#xA;<li>It supports <a href=""https://github.com/cloudant/mango"" rel=""nofollow noreferrer"">Mango</a> querying language (inspired from MongoDB).</li>&#xA;<li>It is highly scalable. </li>&#xA;<li>It is shipped with <a href=""https://couchdb.apache.org/fauxton-visual-guide/index.html"" rel=""nofollow noreferrer"">Fauxton</a> web interface that lets you create, update, delete, view and query documents on the fly.</li>&#xA;<li>etc. </li>&#xA;</ul>&#xA;",2358409,"",,"",,2020-01-16T11:33:44,"","",,2,,,
59810163,2,,59810049,2020-01-19T12:50:54,,0,,<p>Here use this.</p>&#xA;&#xA;<pre><code>window.top.close();&#xA;</code></pre>&#xA;&#xA;<p>It works just fine wherever you are inside of the electron app.</p>&#xA;,12417416,"",,"",,2020-01-19T12:50:54,"","",,2,,,
59868302,2,,59866034,2020-01-22T21:10:16,,1,,"<p>As you can read in the <a href=""https://www.electronjs.org/docs/api/app#event-before-quit"" rel=""nofollow noreferrer""><code>before-quit</code> docs</a>, you can use <code>event.preventDefault()</code> inside the <code>before-quit</code> event handler to prevent the app from terminating.</p>&#xA;&#xA;<p>Your cleanup code can then run unimpeded. At the end of the cleanup, close the app programmatically.</p>&#xA;&#xA;<p>To make sure that <code>before-quit</code> will not block app termination at that time, you probably want to keep track of the current state of the app. You may want to allow the app to terminate inside <code>before-quit</code> if the cleanup code has completed. That means: execute <code>event.preventDefault()</code> only if the cleanup has not been completed yet.</p>&#xA;&#xA;<p>It's probably wise to inform the user about the state of the app: display ""shutting down"" or something similar, so that it is clear that the app is no longer functional.</p>&#xA;",1335237,"",,"",,2020-01-22T21:10:16,"","",,2,,,
59711348,2,,59560042,2020-01-13T06:12:24,,1,,"<p>Why don't you just get the environment variable and then append to it?</p>&#xA;&#xA;<p>I.e.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const {spawnSync} = require(""child_process"");&#xA;const current_value = process.env.PATH;&#xA;const new_path_value = current_value.concat("";"", ""/some/new/path"");&#xA;&#xA;var result = spawnSync('setx', ['-m', 'PATH', new_path_value])&#xA;&#xA;// STDOUT&#xA;var stdOut = result.stdout.toString();&#xA;console.log(stdOut)&#xA;&#xA;// STDERR&#xA;var stdErr =  result.stderr.toString();&#xA;&#xA;if(stdErr === '') {&#xA;    console.log('Successfully set environment variable')&#xA;} else {&#xA;    console.log(`ERROR: ${stderr}`)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Update ""/some/new/path"" and run this as admin as the link you provided suggests and it should work.</p>&#xA;",11188910,"",11188910,"",2020-01-15T01:28:58,2020-01-15T01:28:58,"","",,3,,,
59737579,2,,59737073,2020-01-14T16:03:52,,1,,"<p>The problem in <code>cd</code>. Module <code>sudo-prompt</code> <a href=""https://github.com/jorangreef/sudo-prompt/blob/master/index.js#L653"" rel=""nofollow noreferrer"">redirect stderror to file</a>. Just try to run like this example or add command for return back like <code>cd ~/Library/Caches &amp;&amp; du -sh * &amp;&amp; cd ${process.cwd()}</code></p>&#xA;&#xA;<pre><code>child_process.exec('push /etc\ndu -sh *\npopd', (error, stdout, stderr)=&gt; console.log(stdout))&#xA;</code></pre>&#xA;&#xA;<p>`</p>&#xA;",3778960,"",3778960,"",2020-01-14T16:10:39,2020-01-14T16:10:39,"","",,4,,,
59784143,2,,59769469,2020-01-17T09:05:35,,1,,"<p>It is not currently (January 2020) possible to have a device chooser for WebUSB in Electron - see the issue here: <a href=""https://github.com/electron/electron/issues/14545"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/14545</a></p>&#xA;&#xA;<p>At the moment the suggested solution is to use the <a href=""https://github.com/thegecko/webusb"" rel=""nofollow noreferrer"">thegecko/webusb</a> polyfill, that uses the node-usb library instead.</p>&#xA;",682179,"",682179,"",2020-01-20T10:39:40,2020-01-20T10:39:40,"","",,4,,,
37593520,2,,37578858,2016-06-02T13:37:28,,0,,"<p>Apparently I needed to update to the <em>Current</em> version of Node (v6.2.0) instead of the <em>LTS</em> version (v4.4.4). After updating and rebuilding serialport, everything works perfectly!</p>&#xA;",4019986,"",,"",,2016-06-02T13:37:28,"","",,0,,,
37605436,2,,37332066,2016-06-03T03:23:42,,0,,"<p>A nested app dependency was changed somehow changed after the signing which invalidates the signature. To check for this, you have to run <code>codesign --verify --deep MyApp.app/</code>. The <code>--deep</code> flag recurses through nested dependencies and verifies them. </p>&#xA;&#xA;<p>The reason downloading the app from the internet will trigger Gatekeeper security checks that won't happen otherwise. For electron apps using electron-builder, deep codesign verification has been added, see details here: <a href=""https://github.com/electron-userland/electron-osx-sign/issues/42"" rel=""nofollow"">https://github.com/electron-userland/electron-osx-sign/issues/42</a>. </p>&#xA;",1397311,"",,"",,2016-06-03T03:23:42,"","",,0,,,
37680242,2,,37660686,2016-06-07T13:04:30,,0,,"<p>There are a number of npm modules that would not work because most of the node core modules are not available to use in NativeScript as yet you can track the issue <a href=""https://github.com/NativeScript/NativeScript/issues/195"" rel=""nofollow"">here</a></p>&#xA;",4155829,"",,"",,2016-06-07T13:04:30,"","",,0,,,
37729160,2,,37723466,2016-06-09T14:44:50,,0,,"<p>add </p>&#xA;&#xA;<pre><code>&lt;script src=""../node_modules/es6-shim/es6-shim.min.js""&gt;&lt;/script&gt;&#xA;&lt;script src=""../node_modules/zone.js/dist/zone.js""&gt;&lt;/script&gt;&#xA;&lt;script src=""../node_modules/reflect-metadata/Reflect.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>to your app/index.html file and remove </p>&#xA;&#xA;<pre><code>  'rxjs',&#xA;  'reflect-metadata',&#xA;</code></pre>&#xA;&#xA;<p>from your angular2 entry in webpack.config.js file.</p>&#xA;",1121008,"",,"",,2016-06-09T14:44:50,"","",,2,,,
37529174,2,,37302266,2016-05-30T15:23:36,,1,,"<p>It isn't fixed yet but this is a known issue and the Electron folks are already working on it. If you like to follow the issue: <a href=""https://github.com/electron/electron/issues/3471"" rel=""nofollow"">Issue: #3471 Twitter authentifcation form POST REDIRECT</a></p>&#xA;",2004682,"",,"",,2016-05-30T15:23:36,"","",,0,,,
37553350,2,,37547559,2016-05-31T18:43:52,,1,,"<p>After reading through this: <a href=""https://stackoverflow.com/questions/11856766/osx-notification-center-icon"">OSX Notification Center Icon</a></p>&#xA;&#xA;<p>I noticed that adding a app-bundle-id through electron-packager fixed the issue for me. &#xA;The issue was caused by icon caching in Mac OS X. Simply deleting the cache files did not solve the issue for me. Changing/adding a bundle-id did though.</p>&#xA;",904533,"",-1,"",2017-05-23T12:08:03,2016-05-31T18:43:52,"","",,0,,,
37587579,2,,37470570,2016-06-02T09:17:44,,1,,"<p>Yes, it is possible. There is a repository on GitHub called Cumulus: </p>&#xA;&#xA;<p><a href=""https://github.com/gillesdemey/Cumulus"" rel=""nofollow"">https://github.com/gillesdemey/Cumulus</a></p>&#xA;&#xA;<p>This application is built on electron and uses the SoundCloud API, if you take a look at this file, or in the repository, you may be able to get an understanding of how it uses the API:</p>&#xA;&#xA;<p><a href=""https://github.com/gillesdemey/Cumulus/blob/master/app/js/utils/soundcloud.js"" rel=""nofollow"">https://github.com/gillesdemey/Cumulus/blob/master/app/js/utils/soundcloud.js</a></p>&#xA;&#xA;<p>Hope this helps</p>&#xA;",4126230,"",,"",,2016-06-02T09:17:44,"","",,0,,,
37603347,2,,37447911,2016-06-02T22:47:55,,1,,"<p>Well, I was looking for an answer on the Internet without results.</p>&#xA;&#xA;<p>But the best solution i 've implemented is to use a VBScript help file .</p>&#xA;&#xA;<p>And it works well !! </p>&#xA;&#xA;<p>The app calls the Paste function to execute the "" paste.vbs "" file.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>paste.vbs</p>&#xA;&#xA;<pre><code>set shell = CreateObject(""WScript.Shell"") &#xA;WScript.Sleep 300&#xA;shell.SendKeys ""^V""&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>myapp.js</p>&#xA;&#xA;<pre><code>var gui = require('nw.gui');&#xA;var win = gui.Window.get();&#xA;&#xA;function getCommandLine() {&#xA;   switch (process.platform) { &#xA;      case 'darwin' : return 'open';&#xA;      case 'win32' : return 'start';&#xA;      case 'win64' : return 'start';&#xA;      default : return 'xdg-open';&#xA;   }&#xA;} &#xA;function Paste(){&#xA;    var sys = require('util');&#xA;    var exec = require('child_process').exec; &#xA;    exec(getCommandLine() + ' ' + ""paste.vbs""); &#xA;} &#xA;function useSnippet(content){&#xA;    var clipboard = gui.Clipboard.get(); &#xA;    clipboard.set(content, 'text');&#xA;    win.minimize();&#xA;    Paste();&#xA;} &#xA;</code></pre>&#xA;&#xA;<p>Now you can get the file contents for pasting into other applications.</p>&#xA;&#xA;<p>If you want compatibility with other operating systems, you must use another command file similar to VBS</p>&#xA;&#xA;<p>I use a list of files and reading passages content of a search list .</p>&#xA;&#xA;<p>I can create a project on GitHub to load the code so that other people can use it or help me improve the code.</p>&#xA;",5831897,"",,"",,2016-06-02T22:47:55,"","",,0,,,
37609844,2,,37592192,2016-06-03T08:44:28,,1,,"<p>One way you could do this is using the <code>ipcRenderer</code> to communicate between <code>BrowserWindow</code> instances and the <code>main</code> process. For example, in the main process you could have something like the following: -</p>&#xA;&#xA;<pre><code>const electron          = require('electron');&#xA;const app               = electron.app;&#xA;const BrowserWindow     = electron.BrowserWindow;&#xA;let mainWindow, subWindow;&#xA;&#xA;mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    fullscreen: true&#xA;});&#xA;&#xA;mainWindow.loadURL('file://' + __dirname + '/../index.html');&#xA;&#xA;subWindow = new BrowserWindow(); // etc&#xA;&#xA;electron.ipcMain&#xA;    .on('myMainMessage', function (event, data) {&#xA;        // data can be passed from browser window&#xA;        subWindow.webContents.send('myPassedMessage', data);&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>Then, inside the first <code>mainWindow</code> instance you could throw together a message using the <code>ipcRenderer</code> like so: -</p>&#xA;&#xA;<pre><code>var electron = require('electron');&#xA;var ipc = electron.ipcRenderer;&#xA;&#xA;ipc.send('myMainMessage', {&#xA;    property: 'someValue'&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And inside your other window instance you'd have some JavaScript to listen to the other trigger. Something like this: -</p>&#xA;&#xA;<pre><code>var electron = require('electron');&#xA;var ipc = electron.ipcRenderer;&#xA;&#xA;ipc.on('myPassedMessage', function (event, data) {&#xA;    console.log(data); // will be from the mainWindow instance&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Consult <a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md"" rel=""nofollow"">the docs on the ipcRenderer section</a> for more information.</p>&#xA;",5951251,"",,"",,2016-06-03T08:44:28,"","",,0,,,
37617933,2,,37616663,2016-06-03T15:12:50,,1,,"<p>Assuming you're running Electron v0.37.5 or later, I think this should do the trick:</p>&#xA;&#xA;<pre><code>fetch(fileUrl).then(response =&gt; {&#xA;  var buff = Buffer.from(response.arrayBuffer());&#xA;  fsp.writeFile(""filename.pdf"", buff).then(() =&gt; {&#xA;    console.log('Success!')&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-06-03T15:12:50,"","",,0,,,
37621592,2,,37620226,2016-06-03T18:55:44,,1,,"<p>Explicitly typing <code>template</code> works for me</p>&#xA;&#xA;<pre><code>const template : Electron.MenuItemOptions[] = [&#xA; {&#xA;    label: 'Edit',&#xA;    submenu: [&#xA;      {&#xA;        label: 'Undo',&#xA;        accelerator: 'CmdOrCtrl+Z',&#xA;        role: 'undo'&#xA;      },&#xA;      {&#xA;        label: 'Redo',&#xA;        accelerator: 'Shift+CmdOrCtrl+Z',&#xA;        role: 'redo'&#xA;     } &#xA;    ]&#xA;  }&#xA;];&#xA;&#xA;const menu = Menu.buildFromTemplate(template);&#xA;</code></pre>&#xA;&#xA;<p>It seems to be because the <code>role</code> property is registered as type <code>string</code> which is not compatiable with type <code>'""undo"" | ""redo"" | ""cut"" | ""copy"" | ""paste"" | ""selectall"" | ""minimize"" | ""close"" | ""about"" | ""hide...'</code></p>&#xA;",2229334,"",,"",,2016-06-03T18:55:44,"","",,0,,,
37625585,2,,37625194,2016-06-04T01:49:11,,1,,"<p>The way you need to require built-in Electron modules has changed in Electron v1.0.0 and they are now all exposed through the <code>electron</code> module. Also the <code>remote</code> module now has properties that correspond to main-process modules. So, instead of: </p>&#xA;&#xA;<pre><code>var remote = require('remote');&#xA;var BrowserWindow = remote.require('browser-window');&#xA;</code></pre>&#xA;&#xA;<p>you should write:</p>&#xA;&#xA;<pre><code>const { remote } = require('electron');&#xA;const { BrowserWindow } = remote;&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-06-04T01:49:11,"","",,0,,,
37680166,2,,37056747,2016-06-07T13:01:22,,1,,"<p>Thanks @Maggew Dot Com, I'm the coauthor of the N1 unsubscribe plugin. Here is the code you want to use to open a browser window:</p>&#xA;&#xA;<pre><code>const BrowserWindow = require('electron').remote.BrowserWindow;&#xA;const url = 'https://github.com';&#xA;&#xA;const browserWindow = new BrowserWindow({&#xA;    web-preferences: { 'web-security': false },&#xA;    width: 1000,&#xA;    height: 800,&#xA;    center: true,&#xA;});&#xA;&#xA;browserWindow.on('closed', () =&gt; {&#xA;    callback(null, true);&#xA;});&#xA;&#xA;// // Useful for development and monitoring action of browserWindow&#xA;// // Especially since N1 doesn't allow injecting a custom script&#xA;// browserWindow.on('page-title-updated', function(event) {&#xA;//    webContents = browserWindow.webContents;&#xA;//    if (!webContents.isDevToolsOpened()) {&#xA;//        webContents.openDevTools();&#xA;//    }&#xA;// });&#xA;&#xA;browserWindow.loadURL(url);&#xA;browserWindow.show();&#xA;</code></pre>&#xA;&#xA;<p>If you want to learn more, see the <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow"">Electron - Browser Window</a> documentation</p>&#xA;",3219667,"",,"",,2016-06-07T13:01:22,"","",,0,,,
37681553,2,,37361849,2016-06-07T14:01:04,,1,,"<p>Personaly, i have chosen <a href=""https://github.com/andyet/SimpleWebRTC"" rel=""nofollow"">https://github.com/andyet/SimpleWebRTC</a>, which is an API pretty easy to setup. This is not relative to Electron, this is open source, there is no API key needed and it works pretty well! &#xA;But to transfer JSON data you can just use websockets, because you will need it with webRTC for signalling anyway... (ok this is not a p2p solution)</p>&#xA;",1456028,"",,"",,2016-06-07T14:01:04,"","",,0,,,
37563078,2,,37561169,2016-06-01T08:15:29,,2,,"<p>If you use a desktop application you have a couple of choices:</p>&#xA;&#xA;<ol>&#xA;<li>You can start a webserver locally and use <code>localhost</code> as redirectUri. The downside is that you will usually need to also supply the port number in the list of allowed redirect Uris and you won't necessrily know if a certain port is available on the client.</li>&#xA;<li>The <code>urn:ietf:wg:oauth:2.0:oob</code> instructs the server not redirect the user at all but output the code in the browser windows title. If you have the appropriate permission to read other windows title then you can autodetect changes there. Also the code is usually displayed to the user so that as a fallback he can copy&amp;paste the code into your application. However your service may not support this.</li>&#xA;<li>Setup a webservice that forwards the token for you. Basically you setup a webservice against which your application authenticates and that webservice returns an URL to the authentication service including an appropriate <code>state</code> to you to which you send the user. Then the authentication service will send your user back to your webservice which again reports the code to your application e.g. by means of long polling, web sockets, or a real TCP connection which is kept open during the whole process. Note that the webservice will need careful design so that the service is not abused by third-parties. Since you cannot technically authenticate your desktop application against the webservice, you cannot stop other applications from calling your webservice, but you can present some information to the user on the consent screen that helps users identify whether the request was legitimate or not.</li>&#xA;</ol>&#xA;",327301,"",,"",,2016-06-01T08:15:29,"","",,1,,,
37563909,2,,37561851,2016-06-01T08:55:38,,2,,"<p>.apps are technically just folders. Your editor is taking that into account and showing the contents. If you right click on your app, and press show package contents, you'll see whats inside the app. Also, electron-packager does not support outputting to a different directory. You could however <code>cd electron</code> and run electron packager from there, and then it would package to that directory. EDIT: you can actually output to a different directory, with the --out option.</p>&#xA;",6407432,"",6407432,"",2016-06-15T22:17:34,2016-06-15T22:17:34,"","",,4,,,
37604668,2,,37507464,2016-06-03T01:44:38,,2,,"<p>I have a sample code that I have tested and it works.&#xA;Link to drone.io output (as well as the source code).&#xA;<a href=""https://drone.io/github.com/ttwd80/electron-aws/27"" rel=""nofollow"">https://drone.io/github.com/ttwd80/electron-aws/27</a></p>&#xA;&#xA;<p>My change was that I did not use this:</p>&#xA;&#xA;<pre><code>AWS.config.loadFromPath(path);&#xA;</code></pre>&#xA;&#xA;<p>I used this:&#xA;load the json file to make it an object&#xA;and update the credentials using AWS.config.update</p>&#xA;&#xA;<pre><code>const keys = require(__dirname + '/keys.json');&#xA;AWS.config.update({""accessKeyId"": keys.awsAccessKey, ""secretAccessKey"": keys.awsSecretKey, ""region"": keys.region});&#xA;</code></pre>&#xA;",96332,"",,"",,2016-06-03T01:44:38,"","",,0,,,
37620622,2,,37538122,2016-06-03T17:49:57,,2,,<p>You're calling <code>app.quit()</code> twice which is causing the crash. Only call it once in either the <code>all-windows-closed</code> event handler or <code>closed</code> event handler on the <code>mainWindow</code>. </p>&#xA;,1397311,"",,"",,2016-06-03T17:49:57,"","",,0,,,
37656348,2,,37656091,2016-06-06T11:33:37,,2,,"<p><code>-L</code> checks whether the file is a symbolic link and returns True if so. From <code>man test</code>:</p>&#xA;&#xA;<pre><code>   -L FILE&#xA;          FILE exists and is a symbolic link (same as -h)&#xA;</code></pre>&#xA;&#xA;<p>See an example where we create a file <code>hello</code> and a (soft)link to it called <code>my_link</code>:</p>&#xA;&#xA;<pre><code>$ touch hello&#xA;$ ln -s hello my_link&#xA;$ [ -L ""hello"" ] &amp;&amp; echo ""this is a link"" || echo ""this is NOT a link""&#xA;this is NOT a link&#xA;$ [ -L ""my_link"" ] &amp;&amp; echo ""this is a link"" || echo ""this is NOT a link""&#xA;this is a link&#xA;</code></pre>&#xA;",1983854,"",,"",,2016-06-06T11:33:37,"","",,5,,,
37691394,2,,37691304,2016-06-08T00:11:58,,2,,"<p>From the documentation site: </p>&#xA;&#xA;<pre><code>const {BrowserWindow} = require('electron');&#xA;&#xA;let win = new BrowserWindow({width: 800, height: 600});&#xA;win.loadURL('http://github.com');&#xA;&#xA;const ses = win.webContents.session.clearCache(function() {&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>So, the following function will return the window you have and save it on the win variable.</p>&#xA;&#xA;<pre><code>var remote = require('remote'); &#xA;var win = remote.getCurrentWindow();&#xA;</code></pre>&#xA;&#xA;<p>And then, using the same function that you have like on the doc site:</p>&#xA;&#xA;<pre><code>win.webContents.session.clearCache(function(){&#xA;//some callback.&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You will clean the cache from the current window you have. If you have stored the value of your windows before on some variable, you don't need to get it with the ""getCurrentWindow() function </p>&#xA;",5650007,"",,"",,2016-06-08T00:11:58,"","",,4,,,
37705788,2,,37675229,2016-06-08T14:45:03,,2,,"<p>So it turns out I can access the contents of the iframe just like that in <strong>nw.js</strong> and I was just doing something wrong in my original code.</p>&#xA;&#xA;<p>The problem was the use of jquery <code>ready</code>. When I tried to access the iframe when <code>ready</code> was triggered, I got an empty document, but when I did the same from iframe's <code>onload</code> callback, I actually got all the contents.</p>&#xA;&#xA;<pre><code>&lt;iframe src=""http://google.com"" width=""800"" height=""600"" id=""myIframe"" onload=""loaded()""&gt;&lt;/iframe&gt;&#xA;&lt;script&gt;&#xA;    function loaded()&#xA;    {&#xA;        console.log(window.frames[0].document);&#xA;        // Returns the actual page&#xA;    }&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>P.S.</strong> It is advised to use <code>nwdisable</code> and <code>nwfaketop</code> attributes when loading unsafe content (such as external site) into an <code>iframe</code> in <strong>nw.js</strong>.</p>&#xA;&#xA;<pre><code>&lt;iframe src=""http://google.com"" width=""800"" height=""600"" nwdisable nwfaketop&gt;&lt;/iframe&gt;&#xA;</code></pre>&#xA;",2123652,"",,"",,2016-06-08T14:45:03,"","",,0,,,
37508774,2,,37508113,2016-05-29T10:27:18,,3,,"<p>You can store the last value of the index in the database. Something like this:</p>&#xA;&#xA;<pre><code>var Datastore = require('nedb');&#xA;var db = new Datastore({ &#xA;  filename: __dirname + '/dbFilePath.db', &#xA;  autoload: true &#xA;});&#xA;&#xA;// Initialize the initial index value&#xA;// (if it already exists in the database, it is not overwritten)&#xA;db.insert({_id: '__autoid__', value: -1});&#xA;&#xA;db.getAutoId = function(onFind) {&#xA;  db.findOne( { _id: '__autoid__' }, function(err, doc) {&#xA;    if (err) {&#xA;      onFind &amp;&amp; onFind(err)&#xA;    } else {&#xA;      // Update and returns the index value&#xA;      db.update({ _id: '__autoid__'}, { $set: {value: ++doc.value} }, {},&#xA;         function(err, count) {&#xA;           onFind &amp;&amp; onFind(err, doc.value);&#xA;      });&#xA;    }&#xA;  });&#xA;  return db;&#xA;}&#xA;</code></pre>&#xA;",4989460,"",4989460,"",2016-11-16T10:07:29,2016-11-16T10:07:29,"","",,0,,,
37581854,2,,37537357,2016-06-02T02:52:22,,3,,"<p>The example is <em>close</em>, but it looks like you're mixing and matching generator with Promise syntax.  The <code>.evaluate()</code> method does behave as you describe, but when you're using <code>vo</code> (or <code>co</code>), <code>.then()</code> will be taken care of and managed for you, returning what would be the value of <code>.then()</code> back to the left-hand side of the <code>yield</code> expression if one is defined.  Also, for what it's worth, your generators do not return values, and as such you will (correctly) get <code>undefined</code>.</p>&#xA;&#xA;<p><a href=""https://github.com/segmentio/nightmare/issues/537#issuecomment-197603932"" rel=""nofollow"">This</a> goes into a bit more depth on iterators, generators, promises, and <code>vo</code>/<code>co</code>.  You might also want to have a look at <a href=""https://github.com/rosshinkley/nightmare-examples/"" rel=""nofollow""><code>nightmare-examples</code></a> document on <a href=""https://github.com/rosshinkley/nightmare-examples/blob/master/docs/beginner/vo.md"" rel=""nofollow""><code>vo</code></a>.</p>&#xA;&#xA;<p>Finally, your example, modified to return results from <code>gen</code>, through <code>forEach</code> up to <code>run</code>:</p>&#xA;&#xA;<pre><code>const nightmare = require('nightmare'),&#xA;  vo = require('vo'),&#xA;  nbot = nightmare({&#xA;    title: 'Bot',&#xA;    show: true&#xA;  });&#xA;&#xA;const searchTerms = ['spacex', 'tesla', 'elon musk', 'hyperloop']; // EXAMPLE SEARCH TERMS&#xA;&#xA;vo(run)(function(err) {&#xA;  if (err) throw err&#xA;});&#xA;&#xA;function* run() {&#xA;  yield nbot.goto('http://google.com');&#xA;&#xA;  var results = yield * forEach(searchTerms, gen);&#xA;  console.log(results);&#xA;  yield nbot.end();&#xA;}&#xA;&#xA;function* gen(item) {&#xA;  var value = yield nbot.wait('input[title=""Search""]')&#xA;    .click('input[title=""Search""]')&#xA;    .type('input[title=""Search""]', item)&#xA;    .click('input[name=""btnK""]')&#xA;    .wait(100)&#xA;    .screenshot(item + '.png')&#xA;    .insert('input[title=""Search""]', '')&#xA;    .evaluate(function() {&#xA;      return 'foobar' // STUFF RETURNED HERE&#xA;    });&#xA;&#xA;  return value;&#xA;}&#xA;&#xA;function* forEach(arr, fn) { // NEEDED BECAUSE FOREACH DOESN'T WORK IN GENERATORS&#xA;  let i;&#xA;  var results = [];&#xA;  for (i = 0; i &lt; arr.length; i++) {&#xA;    results.push(yield * fn(arr[i]));&#xA;  }&#xA;  return results;&#xA;}&#xA;</code></pre>&#xA;",1139700,"",,"",,2016-06-02T02:52:22,"","",,1,,,
37506671,2,,37506005,2016-05-29T05:53:14,,4,,"<p>I don't know if you omitted the relevant import from the snippet you posted, but assuming you haven't <code>remote</code> will be undefined when you call <code>remote.getCurrentWindow()</code>. If you add <code>const { remote } = require('electron');</code> to the top of your snippet I think your click handler will work as expected.</p>&#xA;",1259938,"",,"",,2016-05-29T05:53:14,"","",,4,,,
37581291,2,,37327515,2016-06-02T01:32:33,,6,,"<p>For now, you can suppress this error by removing the authDomain line from your config. authDomain is needed for the Auth signInWithPopup/signInWithRedirect operations, but everything else should work.</p>&#xA;&#xA;<p>A version of the library that throws that error only when you actually try to do a signInWithPopup/Redirect is in the works.</p>&#xA;",6373086,"",,"",,2016-06-02T01:32:33,"","",,1,,,
37669728,2,,37655020,2016-06-07T02:50:32,,6,,"<p>I have some experience with NeDB in an Electron app and I can say it will definitely work on the filesystem. </p>&#xA;&#xA;<p>How are you initializing NeDB (or whatever your database choice is)? Also, are you initializing it in the main or renderer process? If you can share that, I think we could trace the issue to a configuration issue. </p>&#xA;&#xA;<p>This is how you start NeDB with a persistent data-store that saves to disk.</p>&#xA;&#xA;<pre><code>var Datastore = require('nedb')&#xA;  , db = new Datastore({ filename: 'path/to/datafile', autoload: true });&#xA;</code></pre>&#xA;&#xA;<p>I think MongoDB is going to be overkill for an Electron app (it's meant to be really a high performance, distributed database running in the cloud).</p>&#xA;&#xA;<p>Another option you could consider is <a href=""https://github.com/Level/levelup"" rel=""nofollow noreferrer"">LevelDB</a> (a key/value store that can persist to the filesystem) which is popular in the node community. (EDIT 4/17/17 IndexedDB uses LevelDB underneath the hood, so if you go that route, may as well just use that)</p>&#xA;&#xA;<p>One aspect I would definitely evaluate carefully is: How difficult is this database going to be to package and distribute? How do I integrate it into my build system? Level and NeDB can be included simply via <code>npm install</code> and any native code compiling is handled seamlessly with node-gyp, which is as simple as it gets. However, bundling Mongo, for example, will require some work to get a working build for each different platform. </p>&#xA;",1397311,"",1397311,"",2017-04-18T03:30:29,2017-04-18T03:30:29,"","",,2,,,
37633861,2,,37621981,2016-06-04T18:54:53,,7,,"<p>No. There are a number of APIs that have to be run in the renderer process, such as Notifications, and it looks like accessing a camera is one of those. If you don't want to actually show a BrowserWindow, pass the <code>show:false</code> option (<a href=""https://github.com/electron/electron/blob/ad3b3e016261e746e667f6a2f8df33cae1e5f0eb/docs/api/browser-window.md"" rel=""noreferrer"">documented here</a>)</p>&#xA;&#xA;<p>Here's a sample app using the camera: <a href=""https://github.com/hokein/electron-sample-apps/tree/master/camera"" rel=""noreferrer"">https://github.com/hokein/electron-sample-apps/tree/master/camera</a>.</p>&#xA;",1397311,"",,"",,2016-06-04T18:54:53,"","",,0,,,
37663447,2,,37622389,2016-06-06T17:25:44,,7,,"<p>In order to get your application to work with the file:// protocol, you need to do the following: </p>&#xA;&#xA;<p>Inside of src/index.html, change the following line as follows:</p>&#xA;&#xA;<p>From:</p>&#xA;&#xA;<pre><code>&lt;base href=""/""&gt;&#xA;</code></pre>&#xA;&#xA;<p>To</p>&#xA;&#xA;<pre><code>&lt;base href=""./""&gt;&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps.</p>&#xA;&#xA;<p>EDIT: Also, forgot to mention: If you are running your app both online and offline, you might want to use some sort of detection, so that you can switch back to the / base when the app is running inside a normal browser window, via HTTP.</p>&#xA;",4727567,"",,"",,2016-06-06T17:25:44,"","",,1,,,
37670360,2,,37322862,2016-06-07T04:13:16,,7,,"<p>I checked into how to do this from Node and found this answer: <a href=""https://stackoverflow.com/questions/29669244/how-to-know-if-node-webkit-app-is-running-with-administrator-elevated-privilege"">How to know if node-webkit app is running with Administrator/elevated privilege?</a>.</p>&#xA;&#xA;<p>I checked into the answer, downloaded node-windows and tried it. The solution, however, brought up the UAC dialog and always responded with ""The user has administrative privileges"". </p>&#xA;&#xA;<p>I dug into the node-windows code that handles the isAdminUser command and found that it tried to  run NET SESSION and, if does not have privilege, tries to run it elevated causing the UAC dialog.</p>&#xA;&#xA;<p>I pulled out the part that does the elevate and ended up with this snippet:</p>&#xA;&#xA;<pre><code>var exec = require('child_process').exec; &#xA;exec('NET SESSION', function(err,so,se) {&#xA;      console.log(se.length === 0 ? ""admin"" : ""not admin"");&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>I tested this by running the application normally and with ""Run as Administrator"". The code above correctly displayed ""not admin"" when not run as administrator and ""admin"" when run as administrator.</p>&#xA;&#xA;<p>This should work for the content of your .isAdminPrivilegesUsed method you referenced in the question.</p>&#xA;",3399439,"",-1,"",2017-05-23T12:00:51,2016-06-07T04:13:16,"","",,1,,,
37649349,2,,37648756,2016-06-06T03:59:04,,8,,"<p>For this purpose, you can use <a href=""https://github.com/nwjs/nw-builder"" rel=""noreferrer"">https://github.com/nwjs/nw-builder</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Lets you build your NW.js apps for mac, win and linux via cli. It will&#xA;  download the prebuilt binaries for a newest version, unpacks it,&#xA;  creates a release folder, create the app.nw file for a specified&#xA;  directory and copies the app.nw file where it belongs.</p>&#xA;</blockquote>&#xA;&#xA;<p>First of all, install the node-webkit-builder module globally using:</p>&#xA;&#xA;<pre><code>$ npm install node-webkit-builder -g&#xA;</code></pre>&#xA;&#xA;<p>Once the module has been installed, you can run the nwbuild command as follows:</p>&#xA;&#xA;<pre><code>$ nwbuild [options] [path]&#xA;</code></pre>&#xA;&#xA;<p>Whereas path is the path to your project folder, options are the ones described in the following code:</p>&#xA;&#xA;<pre><code>-p Operating System to build ['osx32', 'osx64', 'win32', 'win64']&#xA;-v NW.js version [default: ""latest""]&#xA;-r Runs NW.js project [default: false]&#xA;-o The path of the output folder [default: ""./build""]&#xA;-f Force download of node-webkit [default: false]&#xA;--quiet Disables logging&#xA;</code></pre>&#xA;&#xA;<p>Some examples:</p>&#xA;&#xA;<ol>&#xA;<li><p>Run a project (on the current platform):</p>&#xA;&#xA;<pre><code>$ nwbuild -v [version of your nw.js] -r /path/to/the/project&#xA;</code></pre></li>&#xA;<li><p>Build a project (executable file ( .exe )) for Win32 or/and Win64 platforms:</p>&#xA;&#xA;<pre><code>$ nwbuild -v [version of your nw.js] -p win32,win64 /path/to/the/project&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;  <p>If your cmd currently open in the project folder, instread write full&#xA;  path to your project you can just use dot symbol</p>&#xA;</blockquote>&#xA;",5526354,"",5526354,"",2016-06-06T04:41:38,2016-06-06T04:41:38,"","",,7,,,
37589384,2,,37447020,2016-06-02T10:34:49,,9,,"<p>From <a href=""https://stackoverflow.com/q/37265855/514463"">How should I configure the base href for Angular 2 when using Electron?</a> the answer is to change you </p>&#xA;&#xA;<pre><code> &lt;base href=""/""&gt;&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code> &lt;base href=""./""&gt;&#xA;</code></pre>&#xA;",514463,"",-1,"",2017-05-23T12:09:53,2016-06-02T10:34:49,"","",,2,,,
37603416,2,,37559596,2016-06-02T22:55:27,,9,,"<p>I'm assuming you mean that once you package your app to an asar, your file paths don't work. </p>&#xA;&#xA;<blockquote>&#xA;<pre><code>fs.readFileSync('asar:'+ __dirname + './app/data/sample.db')&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<p>This is close. You don't need ""asar:"" and you should use the path module to make your life easier.</p>&#xA;&#xA;<p>Try constructing a path dynamically using <code>path</code>. Also your main entry point JS is probably already running in the app folder. Try something like this:</p>&#xA;&#xA;<pre><code>path.join(__dirname, '/data/sample.db');&#xA;</code></pre>&#xA;&#xA;<p>This will create a valid, absolute path for each operating system (paths in Windows use \ whereas OSX and Linux uses /). Remember <code>__dirname</code> is whatever your current directory is, so everything after that has to be relative to it. </p>&#xA;",1397311,"",1397311,"",2016-06-02T23:00:59,2016-06-02T23:00:59,"","",,2,,,
37521169,2,,37520322,2016-05-30T08:38:22,,12,,"<p>Finally, I found a solution in Electron Documentation : <a href=""https://github.com/electron/electron/blob/master/docs/api/session.md#sesclearstoragedataoptions-callback"" rel=""noreferrer"">Source</a></p>&#xA;&#xA;<p>here is the function that clear everything in one go:</p>&#xA;&#xA;<pre><code>electronConstants().mySession.clearStorageData([], function (data) {&#xA;    console.log(data);&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>The first parameter takes <code>options</code> so you can customize what you want to clear. Refer the documentation link that I provided above.</p>&#xA;&#xA;<p>Many thanks.</p>&#xA;",4221433,"",,"",,2016-05-30T08:38:22,"","",,1,,,
37663861,2,,37625327,2016-06-06T17:53:09,,13,,"<p>There are two parts related to this question:</p>&#xA;&#xA;<ol>&#xA;<li>Running chromium (what electron and, in turn, nightmare ""uses"") headlessly on linux.</li>&#xA;<li>Install/Use xvfb to run chromium on app engine.</li>&#xA;</ol>&#xA;&#xA;<p>Part 1) </p>&#xA;&#xA;<p>You need xvfb.</p>&#xA;&#xA;<p>Xvfb (Virtual Framebuffer) is just a program that, from wiki: ""is a display server implementing the X11 display server protocol. In contrast to other display servers, Xvfb performs all graphical operations in memory without showing any screen output.""</p>&#xA;&#xA;<p>Which is what you need to run a browser without a screen output.</p>&#xA;&#xA;<p>First, install all the xvfb related packages to run it on linux.</p>&#xA;&#xA;<p><code>apt-get install -y \&#xA;  xvfb \&#xA;  x11-xkb-utils \&#xA;  xfonts-100dpi \&#xA;  xfonts-75dpi \&#xA;  xfonts-scalable \&#xA;  xfonts-cyrillic \&#xA;  x11-apps \&#xA;  clang \&#xA;  libdbus-1-dev \&#xA;  libgtk2.0-dev \&#xA;  libnotify-dev \&#xA;  libgnome-keyring-dev \&#xA;  libgconf2-dev \&#xA;  libasound2-dev \&#xA;  libcap-dev \&#xA;  libcups2-dev \&#xA;  libxtst-dev \&#xA;  libxss1 \&#xA;  libnss3-dev \&#xA;  gcc-multilib \&#xA;  g++-multilib</code></p>&#xA;&#xA;<p>So with xvfb installed you need to create a virtual xvfb screen and export an environment variable called DISPLAY that points to it. Chromium in Electron will automatically look for $DISPLAY.</p>&#xA;&#xA;<p>The above can be done more easily. Here are two options:</p>&#xA;&#xA;<ul>&#xA;<li><p>Calling the program with linux cli (ignore the xvfb warnings if the nightmare script runs fine):</p>&#xA;&#xA;<ul>&#xA;<li><p><code>xvfb-run -a node main.js</code>. Or...</p></li>&#xA;<li><p>If using rendering related functionality like taking screenshots: <code>xvfb-run -a --server-args=""-screen 0 1280x1028x24 -ac +extension GLX +extension RANDR +render"" node app.js</code>. Google the xvfb options to adjust to your taste.</p></li>&#xA;</ul></li>&#xA;<li><p>Programmatically: using <a href=""https://www.npmjs.com/package/xvfb"" rel=""noreferrer"">xvfb npm package</a></p></li>&#xA;</ul>&#xA;&#xA;<p>From this point on you should be able to run nightmare on linux.</p>&#xA;&#xA;<p>Part 2) </p>&#xA;&#xA;<p>Nodejs on app engine is ran via the flexible environment. Meaning, through docker containers. </p>&#xA;&#xA;<p>From GAE nodejs runtime: ""If your application requires additional operating-system-level dependencies, you will need to use a custom runtime based on this runtime to install the appropriate packages.""</p>&#xA;&#xA;<p>Docker is a whole separate topic, but in order to do the above with app engine you have two options as far as I know:</p>&#xA;&#xA;<ol>&#xA;<li><p><a href=""https://cloud.google.com/appengine/docs/flexible/nodejs/runtime#extending_the_runtime"" rel=""noreferrer"">Extending the runtime</a></p></li>&#xA;<li><p>Use GAE with a <a href=""https://cloud.google.com/appengine/docs/flexible/custom-runtimes"" rel=""noreferrer"">custom runtime</a> from scratch.</p></li>&#xA;</ol>&#xA;&#xA;<p>Either way, basically what you would need to do is install the xvfb related packages defining them in the dockerfile and that should do the trick.</p>&#xA;&#xA;<p>Good luck!</p>&#xA;&#xA;<p>Important Notes:</p>&#xA;&#xA;<ol>&#xA;<li><p>The above apt-get packages depend on the availability regarding the linux distro (the above code works on ubuntu and debian). For example, with the specified set of packages and at the time of this post, it will work with GAE's flexible environment since it is based on debian jessie and won't work on linux alpine.</p></li>&#xA;<li><p>Chromium needs a minimum dev/shm allocation to run well. For example, on heroku it is fixed to 5mb -and there is no way to change it. Chromium will crash after a few nightmare actions. So chromium won't work on any heroku's dynos of any size. In docker it is set to 64mb, so depending on the complexity of your script you will do fine or need to adjust it. In plain linux installations, dev/shm is normally set to half of the total available memory. So in a 512mb environment, dev/shm will be set to 256mb and nightmare will most likely run fine. </p></li>&#xA;</ol>&#xA;",5563506,"",5563506,"",2016-06-07T15:00:32,2016-06-07T15:00:32,"","",,1,,,
37638481,2,,37602759,2016-06-05T04:31:14,,19,,"<p>I can understand why it would be confusing on which of these to host your content in given their similarities. They both start in separate processes and have many similar configurations. The key difference between the BrowserWindow and the webview is that the BrowserWindow is a <strong><em>window</em></strong> on the platform and a webview is an <strong><em>element</em></strong> on an webpage This may be a bit of an obvious, superficial distinction, but much of their differences and usages derive from it.</p>&#xA;&#xA;<p>Much of the reason a webview exists is to allow for untrusted content to be embedded within your application. If you read up on the use cases for the webview, a lot of them point to the fact that the BrowserWindow, by default, has complete access to the Node APIs. Hosting untrusted content within it is handing that content significant access to your system and presents a security concern. The webview, however, does not have Node integration turned on by default, and so it shields your application, and the platform, from the hosted content.</p>&#xA;&#xA;<p>However, this distinction is a bit of a red herring as Node integration can be disabled on BrowserWindow and can be enabled on a webview element. That is to say, you should be able to safely host untrusted content in a BrowserWindow by taking away access to Node and host trusted content in a webview and provide it access to Node.</p>&#xA;&#xA;<p>The key to the webview is that it allows the <strong><em>embedding</em></strong> of untrusted content on a webpage/view in your application. If, within the same view/page, you would like to have some content that is trusted with full access to Node APIs and some content that is untrusted and given limited or no access to Node APIs then this may only be accomplished with the webview element. It is a way to segregate and lock down a piece of a webpage hosted in a BrowserWindow while allowing the rest of it to be open.</p>&#xA;&#xA;<p>Aside from embedding untrusted content, the only other case I can think of for  using webviews over BrowserWindows is if you want to open and view multiple separate processes in a single window. An application could choose to create 10 different windows for 10 different processes and have the platform handle layout, focus, etc or it could open 1 window with 10 webviews for 10 different processes and handle the layout, focus, etc itself within that window. </p>&#xA;&#xA;<p>(Edit) To address the edit to the question:</p>&#xA;&#xA;<p>For both of these cases I would suggest using a webview. </p>&#xA;&#xA;<p>In the first scenario, a browser, you mentioned ""tabs"". There is no easy, cross-platform method that I know of for building a tabbed applications using multiple BrowserWindows because the windows are created by the native OS. You could, however, achieve this by creating a tabbed application within a single webpage, each tab containing a webview. In this case you would want to ensure Node integration is disabled on the webview (it should be by default), since loading content from the web is generally untrusted.</p>&#xA;&#xA;<p>The second scenario, an editor with rendered HTML, is not as clear cut. You could use a webview, an iframe, or render the content directly to a div. Rendering directly to a div may be the best option for something like Markdown or small snippets of HTML so long as you do not need custom css or want to execute JavaScript. It otherwise makes sense to use a webview or an iframe. The difference being that a webview starts in a separate process and may have Node integration or flexed security whereas an iframe is loaded within the same process as the BrowserWindow and, I think, has locked down security. Regardless, to get a side-by-side look without another window you need to use a HTML element like a webview and not a BrowserWindow.</p>&#xA;",3399439,"",3399439,"",2016-06-07T01:41:07,2016-06-07T01:41:07,"","",,5,,,
37721711,2,,37696350,2016-06-09T09:17:47,,21,,"<p>You can call <a href=""http://electron.atom.io/docs/api/app/#appexitexitcode"" rel=""noreferrer""><code>minimize()</code></a> on the respective <code>BrowserWindow</code> instance. The question is how to best get access to this instance and this, in turn, depends on how you open the windows and where your minimize button is. From your example, I take it that the minimize button is actually in the window you want to close, in that case you can just minimize the focused window, because to when a user clicks the button inside it, the window should currently have the focus:</p>&#xA;&#xA;<pre><code>const { remote } = require('electron')&#xA;remote.BrowserWindow.getFocusedWindow().minimize();&#xA;</code></pre>&#xA;&#xA;<p>Alternatively you can use <code>BrowserWindow.fromId()</code> to get access to the window in question if, for example, you want to minimize the task window from the other window.</p>&#xA;",2493332,"",,"",,2016-06-09T09:17:47,"","",,2,,,
37669894,2,,37669727,2016-06-07T03:11:46,,38,,"<p>The main/renderer process distinction isn't actually an Electron concept per se -- it's inherited from Chromium (here's an <a href=""https://www.chromium.org/developers/design-documents/multi-process-architecture"" rel=""nofollow noreferrer"">article</a> on Chromium's architecture and the reasoning behind it). This is the architecture that Chrome uses for performance and stability reasons. Each webContents instance runs in it's own process (a ""renderer"" process). The main process (there can only be one of these) manages webContents instances, among other things. </p>&#xA;&#xA;<p>There's a <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md#differences-between-main-process-and-renderer-process"" rel=""nofollow noreferrer"">good discussion here</a> on the differences between the two. </p>&#xA;&#xA;<p>Some APIs are only available in one process or the other, which can help you get a sense of what logic goes where. For example, Notifications (uses the HTML5 interface but are implemented as native notifications) can only be created from a renderer process. The <a href=""https://github.com/electron/electron/blob/master/docs/api/menu.md"" rel=""nofollow noreferrer"">Menu class</a> can only be called from within the main process. Read through the Electron modules' API docs and see what goes where. You can use <a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md"" rel=""nofollow noreferrer"">IPC</a>, <a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md"" rel=""nofollow noreferrer"">remote</a> module, or <a href=""https://github.com/paulcbetts/electron-remote"" rel=""nofollow noreferrer"">electron-remote</a> to coordinate between the two processes (which one you use depends on your use case). </p>&#xA;&#xA;<p>I would say it is a ""hard"" separation. They're all separate processes and thus don't share any resources or state. This is a paradigm shift for most JS devs I think (at least it was for me). For example if I had a stateful module that I set some state in in the main process, and then I required that module in the renderer, that state won't be there. They're two entirely different instances of that module. Sharing state like that would probably be best in the main process and then either use one of the methods described above to share that state between renderer processes. </p>&#xA;&#xA;<p>Here is a list of <a href=""https://github.com/sindresorhus/awesome-electron#featured"" rel=""nofollow noreferrer"">real life apps</a> and <a href=""https://github.com/hokein/electron-sample-apps"" rel=""nofollow noreferrer"">some sample apps.</a></p>&#xA;&#xA;<p>Shawn Rakowski said it well (in comments below): ""It may be a good rule to put code dealing with the platform infrastructure code (i.e. creating windows, registering global shortcuts, etc) in the Main process and application specific code (what your app is actually doing) in the Renderer processes.""</p>&#xA;&#xA;<blockquote>&#xA;  <p>[My app's functionality is it] parses some files and then renders the info to the screen</p>&#xA;</blockquote>&#xA;&#xA;<p>There's lots of approaches you can take to this in Electron because the <code>fs</code> module (and all node.js modules) are available to you in the renderer process. </p>&#xA;&#xA;<p>If you're only dealing with one browser window instance and not doing CPU intensive parsing, I would say run all the <code>fs</code> related code in that renderer process instance. That's the simplest way. </p>&#xA;&#xA;<p>If you're doing CPU intensive work on these files, you don't want to lock up the UI, which means you can't do your processing browser window renderer, and you can't do it in the main (this will lock up all your renderers!). So I would look into something like <a href=""https://github.com/paulcbetts/electron-remote"" rel=""nofollow noreferrer"">electron-remote</a> or create an invisible browser window instance that runs the heavy lifting. </p>&#xA;&#xA;<p>This article about the <a href=""https://cameronnokes.com/blog/deep-dive-into-electron&#39;s-main-and-renderer-processes/"" rel=""nofollow noreferrer"">main and renderer processes</a> talks about these topics more in-depth (disclosure: I wrote that). </p>&#xA;",1397311,"",1397311,"",2019-12-12T17:50:22,2019-12-12T17:50:22,"","",,11,,,
37688701,2,,37688587,2016-06-07T20:26:59,,55,,"<p>By changing 'JavaScript language version' (<code>Settings/Languages &amp; Frameworks/JavaScript</code>) accordingly, to either '<code>ECMASCript 6</code>' or '<code>JSX Harmony</code>'. BTW, WebStorm can do it for you: hit <code>Alt+Enter</code> on the highlighted statement, choose 'Change JavaScript version to ECMASCript 6' from the popup</p>&#xA;",2274212,"",,"",,2016-06-07T20:26:59,"","",,1,,,
37614774,2,,37614054,2016-06-03T12:46:03,,72,,<p><code>loadUrl()</code> was renamed to <code>loadURL()</code> a while back.</p>&#xA;,1259938,"",,"",,2016-06-03T12:46:03,"","",,2,,,
25583604,2,,25577658,2014-08-30T14:47:01,,1,,"<p>Convert your XML data into an SQLite db. SQLite is NOT memory based by default. Query the db when you need the data, problem solved :)</p>&#xA;",3095643,"",,"",,2014-08-30T14:47:01,"","",,5,,,
25640766,2,,25609853,2014-09-03T09:27:03,,1,,"<p>I suggest that you try it without using an SVG first to rule out that. Rather use a simple HTML file at first and when that works, try the SVG. </p>&#xA;&#xA;<p>It's very likely that you have to provide the protocol as well, so try something like this:</p>&#xA;&#xA;<pre><code>wkhtmltopdf({input: ""file://path/to/file.html""}, { output: ""~/output.pdf"" })&#xA;</code></pre>&#xA;",694325,"",,"",,2014-09-03T09:27:03,"","",,0,,,
25686399,2,,25622310,2014-09-05T12:52:33,,1,,"<p>It looks like this is related to the Chromecast Chrome plugin. I'm assuming you have </p>&#xA;&#xA;<pre><code>""webkit"": {&#xA;    ""plugin"": true&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>in your manifest for flash, so the Chromecast plugin is also getting loaded. Then when it tries to interact with the YouTube player it fails. </p>&#xA;&#xA;<p>Try removing the Chromecast plugin to see if this resolves the issue. if so then your options are:</p>&#xA;&#xA;<ol>&#xA;<li><p>Remove the Chromecast plugin, there isn't a way to only load specific plugins in node-webkit that I'm aware of. This may not be the best solution especially if you are distributing your app. </p></li>&#xA;<li><p>Use another method to load the YouTube video. I use the JavaScript Player API and I don't have any issues. You can find my example here: </p>&#xA;&#xA;<p><a href=""https://gist.github.com/octalmage/03a054bb27d597a9f095"" rel=""nofollow"">https://gist.github.com/octalmage/03a054bb27d597a9f095</a></p>&#xA;&#xA;<p>And the API reference: </p>&#xA;&#xA;<p><a href=""https://developers.google.com/youtube/js_api_reference#Embedding"" rel=""nofollow"">https://developers.google.com/youtube/js_api_reference#Embedding</a></p></li>&#xA;<li><p>Load your HTML over a local webserver. This error seems to be caused by using the file:// protocol so loading your HTML using a local webserver might resolve the issue. I personally use this with method 2 to get past the restricted playback errors (<a href=""https://cloudup.com/cUXiDgrYBOm"" rel=""nofollow"">https://cloudup.com/cUXiDgrYBOm</a>) but I'm not sure if it will fix your issue alone.</p></li>&#xA;</ol>&#xA;&#xA;<p>Edit: I just realized I get this error with webkit plugin set to false, try setting it to true! The video works for me without any changes when webkit plugin is enabled. The error does flash before the video plays though.</p>&#xA;&#xA;<p><a href=""https://cloudup.com/c6VyHbIyyez"" rel=""nofollow"">https://cloudup.com/c6VyHbIyyez</a></p>&#xA;",2233771,"",2233771,"",2014-09-05T13:09:50,2014-09-05T13:09:50,"","",,1,,,
25711644,2,,25710977,2014-09-07T15:06:38,,1,,"<p>I do not belive it is possible to block <kbd>Alt + F4</kbd>, though I have not tried myself.</p>&#xA;&#xA;<p>They do have a <a href=""https://github.com/rogerwang/node-webkit/wiki/The-Kiosk-mode"" rel=""nofollow"">kiosk mode</a>, which sounds like it is what you are looking for, but even in kiosk mode you can exit with <kbd>Alt + F4</kbd>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>After entering Kiosk mode, node-webkit will become fullscreen, and&#xA;  there will be no ways to quit by clicking mouse.</p>&#xA;  &#xA;  <p>On Linux and Windows, users can still quit node-webkit by pressing&#xA;  keys like <kbd>Alt + F4</kbd> and <kbd>Control + Alt + Del</kbd>, currently node-webkit does&#xA;  not block those keys be because it would make node-webkit behave like&#xA;  virus and be blocked by AV software.</p>&#xA;</blockquote>&#xA;&#xA;<p>Quoted from <a href=""https://github.com/rogerwang/node-webkit/wiki/The-Kiosk-mode"" rel=""nofollow"">https://github.com/rogerwang/node-webkit/wiki/The-Kiosk-mode</a></p>&#xA;",502126,"",,"",,2014-09-07T15:06:38,"","",,0,,,
25758104,2,,25758043,2014-09-10T05:45:50,,1,,"<p>If you're new to Node.js, I would suggest <a href=""http://expressjs.com"" rel=""nofollow"">Express</a> because it's easy to get started, has tons of examples, and it's quite powerful. It's used by some heavily loaded API and Web servers. This doesn't mean it's the best or anything like that. It's just suitable for beginners and can be used in production apps with no doubt.</p>&#xA;",556678,"",,"",,2014-09-10T05:45:50,"","",,2,,,
25691697,2,,25678073,2014-09-05T18:14:23,,2,,"<p>Borrowing from the <a href=""https://github.com/rogerwang/node-webkit/wiki/Dragging-files-into-page"" rel=""nofollow"">wiki</a>: </p>&#xA;&#xA;<pre><code>// prevent default behavior from changing page on dropped file&#xA;window.ondragover = function(e) { e.preventDefault(); return false };&#xA;window.ondrop = function(e) { e.preventDefault(); return false };&#xA;&#xA;var holder = document.getElementById('holder');&#xA;holder.ondragover = function () { this.className = 'hover'; return false; };&#xA;holder.ondragend = function () { this.className = ''; return false; };&#xA;holder.ondrop = function (e) {&#xA;  e.preventDefault();&#xA;&#xA;  for (var i = 0; i &lt; e.dataTransfer.files.length; ++i) {&#xA;    console.log(e.dataTransfer.files[i].path);&#xA;  }&#xA;  return false;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>is one option, as well as the HTML5 file reader approach:</p>&#xA;&#xA;<pre><code>holder.ondrop = function (e) {&#xA;  e.preventDefault();&#xA;&#xA;  var file = e.dataTransfer.files[0],&#xA;      reader = new FileReader();&#xA;  reader.onload = function (event) {&#xA;    console.log(event.target);&#xA;  };&#xA;  console.log(file);&#xA;  reader.readAsDataURL(file);&#xA;&#xA;  return false;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>It's definitely important to note that the <code>path</code> field is included, as opposed to regular browsers where it is not available.</p>&#xA;",1807481,"",,"",,2014-09-05T18:14:23,"","",,0,,,
25604150,2,,25143532,2014-09-01T10:49:10,,3,,<p>The require cache is apparently only available on <code>global.require.cache</code>.</p>&#xA;&#xA;<p>Clearing that cache manually made it work for me.</p>&#xA;&#xA;<pre><code>for(module in global.require.cache){&#xA;    if(global.require.cache.hasOwnProperty(module)){&#xA;        delete global.require.cache[module];&#xA;    }&#xA;}&#xA;location.reload()&#xA;</code></pre>&#xA;&#xA;<p>Neither the <code>gui.APP.clearCache()</code> nor the <code>gui.Window.get().reloadIgnoringCache()</code> had any effect for me.</p>&#xA;,568683,"",,"",,2014-09-01T10:49:10,"","",,4,,,
25674898,2,,25672771,2014-09-04T20:59:35,,3,,"<p>There is no callback or event that I know of when sorting is complete in gridx.</p>&#xA;&#xA;<p>However, the whole grid is re-rendered when it is sorted or filtered. So you can use something like:</p>&#xA;&#xA;<pre><code>grid.connect(grid.body, 'onRender', function(){&#xA;    $(document).on(""click"", ""a.myBVlink"", function() {&#xA;      ...&#xA;    });&#xA;    $(document).on(""click"", ""a.myBlink"", function() {&#xA;      ...&#xA;    });&#xA;    $(document).on(""click"", ""a.myVlink"", function() {&#xA;      ...&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",1736297,"",,"",,2014-09-04T20:59:35,"","",,1,,,
25767904,2,,25764696,2014-09-10T14:21:47,,3,,"<p>This problem is unrelated to jquery-ui. I can reproduce it with</p>&#xA;&#xA;<pre><code>// index.html&#xA;&lt;script&gt;&#xA;require('./test.js');&#xA;&lt;/script&gt;&#xA;&#xA;// In test.js&#xA;console.log(navigator);&#xA;</code></pre>&#xA;&#xA;<p>This is a limitation of node's <code>require</code>, which <a href=""https://github.com/joyent/node/blob/a5778cdf01425ae39cea80b62f9ec6740aec724a/lib/module.js#L415"" rel=""nofollow"">only copies over the values of <code>global</code></a>, but navigator is not actually in <code>global</code>. Just specifying <code>navigator</code> works in the browser's context since the implicit globals are <em>not</em> provided by the <code>global</code>, but the <code>window</code> object (try <code>window.x = 2; global.x = 3; console.log(x);</code>).</p>&#xA;&#xA;<p>To fix this problem, you can simply initialize global with the required variables from <code>window</code>, or fix the code in question (i.e. jQuery UI) to prepend references to navigator with <code>window.</code>. This should do for jQuery UI:</p>&#xA;&#xA;<pre><code>global.document = window.document;&#xA;global.navigator = window.navigator;&#xA;require('jquery-ui');&#xA;</code></pre>&#xA;",35070,"",,"",,2014-09-10T14:21:47,"","",,0,,,
25798114,2,,25735127,2014-09-11T22:43:34,,4,,"<p>Hah, this is a bug(ish) that manifests only if the package.json file specifies <code>window.toolbar: true</code>. I had that set to <code>true</code> to access the dev tools.</p>&#xA;&#xA;<p>Solution is to set <code>window.toolbar: false</code>.</p>&#xA;",1218408,"",,"",,2014-09-11T22:43:34,"","",,0,,,
43784797,2,,43779985,2017-05-04T13:51:44,,2,,"<p>According to the <a href=""https://github.com/sindresorhus/electron-debug"" rel=""nofollow noreferrer"">documentation</a>, you can force it to appear in a production app by adding the <code>enabled</code> property.</p>&#xA;&#xA;<pre><code>require('electron-debug')({showDevTools: true, enabled: true});&#xA;</code></pre>&#xA;",31280,"",,"",,2017-05-04T13:51:44,"","",,0,,,
43799062,2,,43798726,2017-05-05T07:32:00,,2,,"<p>it looks like a problem of environment variables. The environmnet variables are set for your user but not for root.</p>&#xA;&#xA;<p>Try to ship your variables with the ""-E"" switch of the sudo command:</p>&#xA;&#xA;<p>sudo -E command</p>&#xA;&#xA;<p>Please try to see here for other similar questions</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/8633461/how-to-keep-environment-variables-when-using-sudo"">How to keep Environment Variables when Using SUDO</a></p>&#xA;",1129667,"",-1,"",2017-05-23T12:18:10,2017-05-05T07:32:00,"","",,0,,,
43803928,2,,43634913,2017-05-05T11:34:02,,0,,"<p><strong><em>Short Version:</em></strong></p>&#xA;&#xA;<ul>&#xA;<li><code>open</code> starts the application with the LaunchService (and  possible&#xA;added launch-parameters in info.plist) </li>&#xA;<li>whereas direct call of the&#xA;application just starts the application iself without any other&#xA;launch-options</li>&#xA;</ul>&#xA;&#xA;<p><strong>*Long Version *</strong></p>&#xA;&#xA;<p>I read through the open manual (<code>man open</code>; Source: <a href=""https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/open.1.html"" rel=""nofollow noreferrer"">https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/open.1.html</a>) and could figure out, that ""the default application as determined via LaunchServices is used to open the specified files"" if you click on an item.</p>&#xA;&#xA;<p>So I read through the LaunchService-documentation and could figure out following:</p>&#xA;&#xA;<blockquote>&#xA;  <p>""Opening Items by File-System Reference [...] default way:&#xA;      If the designated item is an application:     [...]&#xA;          If the application is already running, it is activated (brought to the front of the screen) and sent an 'rapp' (“reopen&#xA;  application”) Apple event.""</p>&#xA;</blockquote>&#xA;&#xA;<p>(Source: <a href=""https://developer.apple.com/library/content/documentation/Carbon/Conceptual/LaunchServicesConcepts/LSCTasks/LSCTasks.html#//apple_ref/doc/uid/TP30000999-CH203-TP9"" rel=""nofollow noreferrer"">https://developer.apple.com/library/content/documentation/Carbon/Conceptual/LaunchServicesConcepts/LSCTasks/LSCTasks.html#//apple_ref/doc/uid/TP30000999-CH203-TP9</a>)</p>&#xA;&#xA;<p>This reflects exactly my watching that if I click on the icon the second time, the app is just focussed/activated.</p>&#xA;&#xA;<p>Thus I need the possibility to tell the application to open a new instance (oapp-event) instead of activating the already opened application (rapp-event)</p>&#xA;&#xA;<p>Further reading lead me to following informations:</p>&#xA;&#xA;<blockquote>&#xA;  <p>""Launch Options When opening an application (whether by itself or to&#xA;  open one or more documents or URLs), you can specify various launch&#xA;  options to control the manner in which it is launched or activated.&#xA;  These can include: [...] Whether to launch a new instance of the&#xA;  application, even if another instance is already running""</p>&#xA;</blockquote>&#xA;&#xA;<p>(Source: <a href=""https://developer.apple.com/library/content/documentation/Carbon/Conceptual/LaunchServicesConcepts/LSCConcepts/LSCConcepts.html#//apple_ref/doc/uid/TP30000999-CH202-BABBJHID"" rel=""nofollow noreferrer"">https://developer.apple.com/library/content/documentation/Carbon/Conceptual/LaunchServicesConcepts/LSCConcepts/LSCConcepts.html#//apple_ref/doc/uid/TP30000999-CH202-BABBJHID</a>)</p>&#xA;&#xA;<p>Thus I only need to add the ""launch option"" to define, that a new instance should be created instead of activating the existing one. But there's not written what the launch-option for it is and how they will be applied to the application (I suggest it belongs into info.plist-file).</p>&#xA;&#xA;<p>So at least this is the answer to my original question, so I posted it here.</p>&#xA;&#xA;<p>open - starts the application with the Launch-Service (and the defined option-parameters in info.plist)&#xA;whereas direct call of the application just starts the application iself without any other launch-options</p>&#xA;",799872,"",,"",,2017-05-05T11:34:02,"","",,0,,,
43814083,2,,43813786,2017-05-05T21:36:22,,2,,"<p>The URL needs to be <a href=""http://localhost:9080/#/page2"" rel=""nofollow noreferrer"">http://localhost:9080/#/page2</a> in order to make this work.</p>&#xA;",1124308,"",,"",,2017-05-05T21:36:22,"","",,0,,,
43824291,2,,43713717,2017-05-06T18:59:21,,1,,"<p>I was able to get electron to work in tails by downloading the ""ia32"" version of the binary. For some reason the electron x64 binary does not work, even though I am using the 64-bit version of tails.</p>&#xA;",573541,"",,"",,2017-05-06T18:59:21,"","",,0,,,
43827456,2,,43824599,2017-05-07T03:16:06,,1,,"<p>It seems the jquery wasn't loading correctly.</p>&#xA;&#xA;<p>I did this and it worked:</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/32621988/electron-jquery-is-not-defined"">Electron: jQuery is not defined</a></p>&#xA;",5021929,"",-1,"",2017-05-23T12:10:37,2017-05-07T03:16:06,"","",,0,,,
43831256,2,,43825190,2017-05-07T12:04:58,,1,,<p>Use dev tools on your webpage. Go to the network tab and see how long each resource takes to load.</p>&#xA;,7737632,"",,"",,2017-05-07T12:04:58,"","",,0,,,
43833816,2,,43779004,2017-05-07T16:23:03,,0,,"<p>After some googling, it seems there are some problems using codesign on macOS 10.12,</p>&#xA;&#xA;<p>Please refer to <a href=""https://forums.developer.apple.com/thread/65055#thread-message-204823"" rel=""nofollow noreferrer"">this post</a>.</p>&#xA;&#xA;<p>I've also post the solution in <a href=""https://github.com/electron-userland/electron-osx-sign/issues/132#issuecomment-299716060"" rel=""nofollow noreferrer"">this link</a> on the electron-osx-sign GitHub issue page.</p>&#xA;",7767054,"",,"",,2017-05-07T16:23:03,"","",,0,,,
43839885,2,,43835600,2017-05-08T04:41:31,,1,,"<p>It is supported in NW.js. As DOM windows are in the same renderer process by default, and the Node.js context is shared between them: </p>&#xA;&#xA;<p><a href=""http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/"" rel=""nofollow noreferrer"">http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/</a></p>&#xA;&#xA;<p>This can be changed to be separate though.</p>&#xA;",180197,"",,"",,2017-05-08T04:41:31,"","",,0,,,
43871747,2,,42597716,2017-05-09T13:51:59,,0,,<p>This appears to work</p>&#xA;&#xA;<pre><code>// save some settings here&#xA;&#xA;await app.stop();&#xA;&#xA;app = new Application({ ... });&#xA;await app.start();&#xA;await app.client.waitUntilWindowLoaded();&#xA;&#xA;// do some more checking to ensure the app is fully loaded&#xA;// check the settings here&#xA;</code></pre>&#xA;,106623,"",,"",,2017-05-09T13:51:59,"","",,0,,,
43871983,2,,43858331,2017-05-09T14:02:46,,1,,"<p>Cordova has <code>deviceready</code> because it has both native code and JavaScript code, and potentially JavaScript might run before the native code has finished loading.</p>&#xA;&#xA;<p>You don't have the same problem in Electron. You have a main process (<code>main.js</code>) which creates your <code>BrowserWindow</code>, so by the time any client-side JavaScript is running, your main process has definitely already started because it was the thing that created your browser window in the first place!</p>&#xA;&#xA;<p>Inside the browser window the same events fire as they would on a normal webpage. So if you <em>wanted</em> to, you could use <code>DOMContentLoaded</code> or <code>load</code> (for the difference see <a href=""https://developer.mozilla.org/en/docs/Web/Events/DOMContentLoaded"" rel=""nofollow noreferrer"">this article on MDN</a>), just in the same way as you would for a regular web application. But you certainly don't need to before calling any of the Electron APIs.</p>&#xA;",31280,"",,"",,2017-05-09T14:02:46,"","",,0,,,
43944573,2,,43773745,2017-05-12T18:43:04,,4,,"<p>The code has no issue but my device has 2 interfaces , and my code checking the first interface when i change this line code :</p>&#xA;&#xA;<pre><code>var deviceINTF=device.interface(0);&#xA;</code></pre>&#xA;&#xA;<p>to :</p>&#xA;&#xA;<pre><code>var deviceINTF=device.interface(1);&#xA;</code></pre>&#xA;&#xA;<p>It works !</p>&#xA;&#xA;<p>Hope this help anybody.</p>&#xA;",1293141,"",,"",,2017-05-12T18:43:04,"","",,0,,,
43948131,2,,43920292,2017-05-13T00:37:09,,0,,"<p>Finally, this was a bug in NodeRT when used in combo with the most recent electron builds. It is now fixed.</p>&#xA;&#xA;<p>Props to @nadavbar for fixing this the same day that I reported it. :) NodeRT seems to play very nicely with electron now.</p>&#xA;",1072039,"",,"",,2017-05-13T00:37:09,"","",,0,,,
43954322,2,,43940803,2017-05-13T14:31:56,,0,,"<p>I got the solution.</p>&#xA;&#xA;<p>We are getting wrong build because we are using the 32bit version of nodejs in 64bit arch.</p>&#xA;&#xA;<p>You can verify the arch of your nodejs by using the process. </p>&#xA;&#xA;<pre><code>c:\&gt; node&#xA;&gt; process&#xA;</code></pre>&#xA;&#xA;<p>Search for target_arch</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/cFAih.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cFAih.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>If there written 32 than goto the nodejs.org and download the 64bit installer of the nodejs.</p>&#xA;&#xA;<p>Step to follow</p>&#xA;&#xA;<ol>&#xA;<li>Remove the node_modules folder</li>&#xA;<li>Open command prompt (run as admin) </li>&#xA;<li>Check the node process arch type is x64 shown in image.</li>&#xA;<li>run npm install</li>&#xA;</ol>&#xA;&#xA;<p>My package.json file</p>&#xA;&#xA;<pre><code>  {&#xA;  ""name"": ""sqlite"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""description"": ""This is the tutorial for the sqllite"",&#xA;  ""main"": ""index.js"",&#xA;  ""scripts"": {&#xA;    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1"",&#xA;    ""start"": ""electron ."",&#xA;    ""rebuild"": ""electron-rebuild  -f -w  sqlite3""&#xA;  },&#xA;  ""author"": """",&#xA;  ""license"": ""ISC"",&#xA;  ""dependencies"": {&#xA;    ""electron-prebuilt"": ""^1.4.13"",&#xA;    ""sqlite3"": ""^3.1.8""&#xA;  },&#xA;  ""devDependencies"": {&#xA;    ""electron-rebuild"": ""^1.5.10""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",6192935,"",6192935,"",2017-05-15T12:53:21,2017-05-15T12:53:21,"","",,0,,,
43955058,2,,43938335,2017-05-13T15:51:24,,0,,"<p>Further to my last comment, I don't have all the aswers but my case got a workaround ...</p>&#xA;",487313,"",,"",,2017-05-13T15:51:24,"","",,0,,,
43961361,2,,43958552,2017-05-14T07:19:17,,3,,"<p>While it is a good idea to separate a template like this into a separate file, you cannot  access the scope of the original file there. To solve this problem you have to bring your window from your mainfile (assumed to be called <code>main.js</code>) into your <code>menuTemplate.js</code>.</p>&#xA;&#xA;<p>You could do this for example by creating a method that builds the template on execution. It could look something like this:</p>&#xA;&#xA;<p><code>menuTemplate.js</code></p>&#xA;&#xA;<pre><code>module.exports = function(window){&#xA;    return [&#xA;      {&#xA;        label: 'Electron',&#xA;        submenu: [&#xA;          {label: 'Item 1'},&#xA;          {label: 'Item 2'}&#xA;        ]&#xA;      },&#xA;      {&#xA;        label: 'Actions',&#xA;        submenu: [&#xA;          {label: 'Action 1'},&#xA;          {label: 'Action 2'},&#xA;          {label: 'Action 3'},&#xA;          {role: 'toggledevtools'},&#xA;          {label: 'ClickMe', click () { window.open('url here'); } }&#xA;        ]&#xA;      }&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now when loading the template in <code>main.js</code> you do not do something like</p>&#xA;&#xA;<p><code>const template = require('menuTemplate')</code></p>&#xA;&#xA;<p>but something like </p>&#xA;&#xA;<p><code>const template = require('menuTemplate')(window)</code>,</p>&#xA;&#xA;<p>with ""window"" being the name of your window variable.</p>&#xA;",,user5733510,,"",,2017-05-14T07:19:17,"","",,0,,,
43983283,2,,43919019,2017-05-15T15:26:02,,1,,"<p>This is what I found. That the callback that electron is doing for the remote call to open the dialog, is binding the ""this"" to the global state. So all the context in the closure when remote.ShowOpenDialog() was called is being lost.</p>&#xA;&#xA;<p>The only way I have been able to capture those values, is to create a bind function and explicitly give a value to this, which contains the values I want to have available in the callback. This means I cannot use an Arrow function.</p>&#xA;&#xA;<p>The result is shown below, and you can see that getState is now coming from <strong>this</strong> and the debugger confirms that <strong>this.defaultPath</strong> is defined. </p>&#xA;&#xA;<pre><code>export const pickFolderFun = (defaultPath) =&gt; (dispatch, getState) =&gt; {&#xA;    let next = function(folders) {&#xA;        if (folders == undefined) return&#xA;        let fieldName = this.getState().UX.fieldName&#xA;        FormChanger(fieldName, folders[0])&#xA;    }.bind({defaultPath, dispatch, getState})&#xA;    dialog.showOpenDialog({&#xA;        title: 'Select Source Folder',&#xA;        defaultPath: defaultPath,&#xA;        properties: [""openDirectory""]&#xA;    }, next)&#xA;}&#xA;</code></pre>&#xA;",959460,"",,"",,2017-05-15T15:26:02,"","",,0,,,
43786511,2,,43779624,2017-05-04T15:01:41,,1,,"<p>I have had a similar problem before, I got around it by using the window close event and then preventing it from closing. Once my action had performed I then ran <code>app.quit()</code>.</p>&#xA;&#xA;<pre><code>window.on('close', function (event) {&#xA;    event.preventDefault();&#xA;&#xA;    let capturedPicFilePath = /* where you want it saved */&#xA;    window.capturePage((img) =&gt; {&#xA;        fs.writeFile(capturedPicFilePath, img.toPng(), () =&gt; &#xA;        console.log(`Saved ${capturedPicFilePath}`));&#xA;&#xA;        app.quit(); // quit once screenshot has saved.&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps!</p>&#xA;",7325243,"",,"",,2017-05-04T15:01:41,"","",,1,,,
43809182,2,,43808482,2017-05-05T15:55:04,,1,,"<p>This is maybe a start - but I'm using an extra element and it feels a bit hacky. The idea is to make the inverted border radius by having a large rectangle in the color you want, and you cover up the edges covered with shapes with <code>border-bottom-right-radius</code> and <code>border-bottom-left-radius</code> set. </p>&#xA;&#xA;<p>I didn't round the top of the arrow, but that would certainly be possible by using your border radius and rotation transform approach. </p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {&#xD;&#xA;  background: black;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.header {&#xD;&#xA;  background: rgba(235,238,243,1);&#xD;&#xA;  height: 40px;&#xD;&#xA;  width: 100%;&#xD;&#xA;  position: relative;&#xD;&#xA;  margin-top: 50px;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Left flange */&#xD;&#xA;.header:before {&#xD;&#xA;  content: """";&#xD;&#xA;  position: absolute;&#xD;&#xA;  background: none;&#xD;&#xA;  bottom: 100%;&#xD;&#xA;  left: 50%;&#xD;&#xA;  border: 25px solid black;&#xD;&#xA;  border-bottom-right-radius: 25px;&#xD;&#xA;  transform: translateX(-137%);&#xD;&#xA;  z-index: 2;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Right flange */&#xD;&#xA;.header:after {&#xD;&#xA;  content: """";&#xD;&#xA;  position: absolute;&#xD;&#xA;  background: none;&#xD;&#xA;  bottom: 100%;&#xD;&#xA;  left: 50%;&#xD;&#xA;  border: 25px solid black;&#xD;&#xA;  border-bottom-left-radius: 25px;&#xD;&#xA;  transform: translateX(37%);&#xD;&#xA;  z-index: 2;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Arrow base */&#xD;&#xA;.header-helper {&#xD;&#xA;  background: white;&#xD;&#xA;  z-index: 1;&#xD;&#xA;  content: """";&#xD;&#xA;  position: absolute;&#xD;&#xA;  bottom: 100%;&#xD;&#xA;  left: 50%;&#xD;&#xA;  width: 100px;&#xD;&#xA;  height: 100px;&#xD;&#xA;  transform: translateX(-50%);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Up arrow */&#xD;&#xA;.header-helper:before {&#xD;&#xA;  content: """";&#xD;&#xA;  position: absolute;&#xD;&#xA;  bottom: 0;&#xD;&#xA;  left: 50%;&#xD;&#xA;  border: 25px solid black;&#xD;&#xA;  border-bottom-color: transparent;&#xD;&#xA;  transform: translateX(-50%);&#xD;&#xA;  background: white;&#xD;&#xA;  margin-bottom: 8px;&#xD;&#xA;  z-index: 2;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""header""&gt;&lt;div class='header-helper'&gt;&lt;/div&gt;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",3012550,"",,"",,2017-05-05T15:55:04,"","",,1,,,
43825724,2,,43825595,2017-05-06T21:52:57,,3,,"<p>While not the most efficient solution, you can do something like this:</p>&#xA;&#xA;<pre><code>db.count({}, function (err, count) {&#xA;  if (!err &amp;&amp; count &gt; 0) {&#xA;    // count is the number of docs&#xA;&#xA;    // skip a random number between 0 to count-1&#xA;    var skipCount = Math.floor(Math.random() * count);&#xA;&#xA;    db.find({}).skip(skipCount).limit(1).exec(function (err2, docs) {&#xA;      if (!err2) {&#xA;        // docs[0] is your random doc&#xA;      }&#xA;    });&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Inspired by <a href=""https://stackoverflow.com/a/2824166/3149036"">a similar approach for MongoDB</a>.</p>&#xA;&#xA;<p>Note that this solution suffers some of the same issues as the above; namely that it's not very efficient, and that there's a race condition if the number of records have changed between the getting the response to <code>.count()</code> and getting the response to <code>.exec()</code>. However, until NeDB supports something like <a href=""https://docs.mongodb.org/master/reference/operator/aggregation/sample/#pipe._S_sample"" rel=""nofollow noreferrer""><code>$sample</code> aggregation</a>, I think this is the only option.</p>&#xA;",3149036,"",-1,"",2017-05-23T10:31:35,2017-05-07T16:43:31,"","",,1,,,
43851575,2,,43847980,2017-05-08T15:29:01,,1,,"<p>Are these files limited to a set you know of in advance? (i.e. not your entire drive). If so then <a href=""https://github.com/fergiemcdowall/search-index"" rel=""nofollow noreferrer"">search-index</a> sounds like it will do the job: <em>""A persistent, network resilient, full text search library for the browser and Node.js""</em>. </p>&#xA;&#xA;<p>If on the other hand you need dynamic search of your entire drive, that will be harder. There is <a href=""https://www.npmjs.com/package/node-spotlight"" rel=""nofollow noreferrer"">node-spotlight</a> for OSX, to hook into the native 'Spotlight' search engine. I don't know if there is a comparable lib for Windows. Perhaps <a href=""https://yarnpkg.com/en/package/windows.storage.search#readme"" rel=""nofollow noreferrer"">windows.storage.search</a></p>&#xA;",840992,"",,"",,2017-05-08T15:29:01,"","",,1,,,
43971252,2,,43966353,2017-05-15T03:41:02,,1,,"<p>Webpack brings its own <code>require</code> which clobbers node.js' <code>require</code>, so when you <code>require</code> a node.js core module that webpack can't resolve to one of your files or dependencies, it throws. (You can see in your stack trace that it includes <code>__webpack_require__</code>. That's because webpack rewrites all <code>require</code>s to <code>__webpack_require__</code> so that it uses it's own internal node.js-esque system). Webpack is built for the web/browsers so it doesn't play well with node out of the box. To get around it you can use this: <a href=""https://github.com/chentsulin/webpack-target-electron-renderer"" rel=""nofollow noreferrer"">https://github.com/chentsulin/webpack-target-electron-renderer</a>. </p>&#xA;&#xA;<p>But I'd also consider using webpack at all, see: <a href=""https://stackoverflow.com/questions/36614776/why-use-webpack-with-electron"">why use webpack with electron</a></p>&#xA;",1397311,"",-1,"",2017-05-23T12:26:08,2017-05-15T03:41:02,"","",,1,,,
43895550,2,,43723561,2017-05-10T14:34:42,,7,,"<p>Note: I don't have enough reputation to have a post with more than two links :/ All of the items below should be pretty easy to find via a web search. </p>&#xA;&#xA;<p><em>Does a better project exist for collecting breakpad crash reports?</em></p>&#xA;&#xA;<p>Mozilla's Socorro is an open-source project used by Mozilla to collect breakpad crash reports from applications like Firefox. You can see their instance of Socorro in action by searching for Mozilla crash stats.</p>&#xA;&#xA;<p><em>Are there any good hosted options?</em></p>&#xA;&#xA;<p>I only know of three companies that provide a hosted breakpad crash management option: Backtrace I/O, Bugsplat and Raygun I/O. &#xA;<strong>Full disclosure: I work for Backtrace I/O</strong></p>&#xA;&#xA;<p><strong>Backtrace I/O</strong> provides a hosted solution to manage breakpad crash reports generated from electron apps: <a href=""https://documentation.backtrace.io/product_integration_minidump_electron/index.html"" rel=""noreferrer"">https://documentation.backtrace.io/product_integration_minidump_electron/index.html</a>. This includes crash aggregation, symbol management, workflow integrations (Slack, JIRA, PagerDuty, etc), custom attributes w/ full reporting on all attributes (you can add custom attributes via <code>crashReporter.setExtraParameter()</code>) [edit: fixed spelling] in your Electron app. </p>&#xA;&#xA;<p><strong>Bugsplat</strong> provides crash aggregation, symbol server, and workflow integrations. AFAICT, it only supports static set of attributes/fields (search for bugsplat breakpad to find their documentation) This means they don't support all of the built-in attributes that Electron reports(<code>guid</code>, <code>process_type</code>, <code>platform</code>, etc) nor do they support extra attributes added via <code>crashReporter.setExtraParameter()</code>. Also be aware they have a strict limit on the size of the breakpad crash report (&lt;2MB). No word if they have any official support for Electron apps. </p>&#xA;&#xA;<p><strong>Raygun</strong>  only officially announced breakpad support via a blogpost mid-April. I can't find any documentation to suggest this is something they actively support. Ragyun's functionality + support for other languages is on-par with other crash-reporting solutions like Crashlytics, HockeyApp, etc. </p>&#xA;&#xA;<p><em>Is there any middleware that will collect breakpad reports and send them to a hosted service like Crashlytics, HockeyApp or Firebase?</em></p>&#xA;&#xA;<p>I'm not aware of any. </p>&#xA;",7988658,"",7988658,"",2017-05-11T19:26:42,2017-05-11T19:26:42,"","",,2,,,
43913505,2,,43912928,2017-05-11T11:00:55,,12,,"<p>It's stored in the AppData folder, which you can find by looking at the value of <code>require('app').getPath('userData')</code>.</p>&#xA;&#xA;<p>This means the data persists even if the app is deleted. If you're running two instances, you'll need to find some way of distinguishing between them so they don't trample on each other's data.</p>&#xA;",31280,"",,"",,2017-05-11T11:00:55,"","",,2,,,
43964146,2,,43962145,2017-05-14T12:57:57,,2,,"<p>When the window is loaded from local file and not Express server:</p>&#xA;&#xA;<pre><code>browserWindow.loadUrl('file:///index.html')&#xA;</code></pre>&#xA;&#xA;<p>it is expected that same base URL will be used for all XHR requests (including <code>Http</code>).</p>&#xA;&#xA;<p>Whether API is remote or local server, its base URL should be hard-coded:</p>&#xA;&#xA;<pre><code>export const API_BASE_URL = 'http://localhost:3456';&#xA;...&#xA;http.get(`${API_BASE_URL}/api/player/all`)...&#xA;</code></pre>&#xA;",3731501,"",,"",,2017-05-14T12:57:57,"","",,2,,,
43831305,2,,43821165,2017-05-07T12:09:14,,0,,"<p>Use kiosk mode. When initializing your <code>BrowserWindow</code>, add <code>kiosk: true</code>.</p>&#xA;",7737632,"",,"",,2017-05-07T12:09:14,"","",,3,,,
43944042,2,,43943842,2017-05-12T18:10:07,,2,,"<p>You are probably rendering the component before the callback is called, and so <code>state</code> is still empty. What you could do is add a temporary, <code>is_loading</code> state in the constructor that renders a loading message/spinner in the page until the callback is called.</p>&#xA;&#xA;<pre><code>constructor() {&#xA;    super();&#xA;&#xA;    this.state = { is_loading: true };&#xA;&#xA;    storage.get('auth', (error, data) =&gt; {&#xA;        if (error) throw error;&#xA;        this.setState({&#xA;            is_loading: false,&#xA;            api_key: data.user.api_key,&#xA;            is_loggedin: data.user.is_loggedin&#xA;        });&#xA;    });&#xA;&#xA;    this.handleTextChange = this.handleTextChange.bind(this);&#xA;    this.handleSaveClick = this.handleSaveClick.bind(this);&#xA;    this.handleLogoutClick = this.handleLogoutClick.bind(this);&#xA;}&#xA;&#xA;// ...&#xA;&#xA;render() {&#xA;    // ...&#xA;&#xA;    return (&#xA;        &lt;Popover&#xA;            content={this.state.is_loading? ""&lt;div&gt;Loading...&lt;/div&gt;"": loginContent[this.state.is_loggedin]}&#xA;            interactionKind={PopoverInteractionKind.CLICK}&#xA;            position={Position.BOTTOM_RIGHT}&#xA;            popoverClassName=""pt-popover-content-sizing""&#xA;        &gt;&#xA;            &lt;Button className=""pt-button pt-minimal pt-icon-user"" /&gt;&#xA;        &lt;/Popover&gt;&#xA;    );&#xA;}&#xA;</code></pre>&#xA;",1760083,"",,"",,2017-05-12T18:10:07,"","",,3,,,
43786260,2,,43785654,2017-05-04T14:52:00,,0,,"<p>From what I understand, you want to include the HTML from multiple files into one page.</p>&#xA;&#xA;<p>You can do this by using jQuery&#xA;<code>$('#elementToLoadHtmlInTo').load('url/pathToFile')</code></p>&#xA;&#xA;<p>you could also try using the fs module in nodejs to load the content from your files and then add it to your file.</p>&#xA;",7325243,"",,"",,2017-05-04T14:52:00,"","",,5,,,
43792392,2,,43792320,2017-05-04T20:39:53,,1,,"<p>You don't need to store individual values:</p>&#xA;&#xA;<pre><code>var hm = hm();&#xA;var date = hm.date;&#xA;var hour = hm.hour;&#xA;var minute = hm.minute;&#xA;</code></pre>&#xA;&#xA;<p>You have a function <code>hm()</code>: call it, and immediately get the value of a returned object:</p>&#xA;&#xA;<pre><code>document.getElementById('mytimer').innerHTML = 'Time: ' + hm().date;&#xA;</code></pre>&#xA;&#xA;<p>Why? Let's use Chrome DevTools to clarify this.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/nFASm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nFASm.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>So, you defined a function <code>hm()</code>.&#xA;When you call it, you get the returned object: <code>{a: 0000000000000, b: ""test""}</code>&#xA;You can access the <em>fields</em> of this object with <code>.</code></p>&#xA;&#xA;<pre><code>var object = hm(); // Assign the returned value of hm() to object&#xA;alert(object.a);   // Alerts value of the field a of object&#xA;</code></pre>&#xA;&#xA;<p>If you don't want to allocate new variables, use <code>hm().a</code>. You will conserve memory and time.</p>&#xA;",7401478,"",7401478,"",2017-05-04T20:47:35,2017-05-04T20:47:35,"","",,5,,,
43822634,2,,43822589,2017-05-06T16:11:28,,27,,"<p>You have to import it from the <a href=""https://github.com/ReactTraining/history"" rel=""nofollow noreferrer"">history</a> module now which provides 3 different methods to create different histories.</p>&#xA;&#xA;<ul>&#xA;<li><code>createBrowserHistory</code> is for use in modern web browsers that support the <a href=""https://caniuse.com/#feat=history"" rel=""nofollow noreferrer"">history API</a></li>&#xA;<li><code>createMemoryHistory</code> is used as a reference implementation and may also be used in non-DOM environments, like React Native or tests</li>&#xA;<li><code>createHashHistory</code> for legacy web browsers</li>&#xA;</ul>&#xA;&#xA;<p>You cannot use the browser history in an electron environment, use the hash or the memory one.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import { createHashHistory } from 'history'&#xA;&#xA;const history = createHashHistory()&#xA;</code></pre>&#xA;&#xA;<p>You can then use the <code>history</code> injected in the props</p>&#xA;&#xA;<pre><code>this.props.history.push('/')&#xA;</code></pre>&#xA;",2054072,"",2054072,"",2018-12-13T22:58:56,2018-12-13T22:58:56,"","",,13,,,
35182823,2,,35166892,2016-02-03T16:44:16,,0,,"<p>I would suggest just making your program support proxy configuration, whether as an HTTP proxy or SOCKS proxy.</p>&#xA;&#xA;<p>At the very least this is the simplest thing to do.  Then you can leave it up to your users to find proxy servers, whether ""free"" ones, Tor, or otherwise.</p>&#xA;&#xA;<p>You can also instruct users how to run your program through tunnels like proxychains, Polipo or other programs that will handle transparently proxying your program's network communication.</p>&#xA;&#xA;<p>These require minimal development and still accomplish what you're looking to do.</p>&#xA;&#xA;<p>Hope that helps.</p>&#xA;",892493,"",,"",,2016-02-03T16:44:16,"","",,0,,,
35226790,2,,35210957,2016-02-05T14:40:21,,0,,"<p>Still no idea why it doesn't work but I ended up just replacing the statement with a jQuery utility function like so:</p>&#xA;&#xA;<pre><code>if (!$.inArray(dw,dws)) {}&#xA;</code></pre>&#xA;&#xA;<p>This works fine in node-webkit and Chrome.</p>&#xA;",5066505,"",,"",,2016-02-05T14:40:21,"","",,0,,,
35237919,2,,35167173,2016-02-06T06:01:26,,0,,"<p>I don't believe it's possible to run a Chrome App in Electron at this time, you may want to try <a href=""http://nwjs.io/blog/v0.13.0-beta1/"" rel=""nofollow"">NW.js v0.13 Beta</a> instead.</p>&#xA;",1259938,"",,"",,2016-02-06T06:01:26,"","",,10,,,
35246100,2,,35240002,2016-02-06T20:28:57,,0,,"<p>It is hard to say anything without the hardware specification, but I think, it is easier than you think. The most barcode scanner is a simple keyboard input. Simpli just enter scanned bar code data into any application as if the data was being keyed in by the user. Just scan a bar code and the data will appear wherever the cursor is placed.</p>&#xA;&#xA;<p>So you don't need to worry about it, just handle keyboard events.</p>&#xA;",673665,"",,"",,2016-02-06T20:28:57,"","",,0,,,
35246480,2,,35092482,2016-02-06T21:07:53,,0,,"<p>I am afraid there won't be any platform independent solution and you do not specify a platform.</p>&#xA;&#xA;<p>Node.js API contains function <code>child_process.execSync</code> (look into <a href=""https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_child_process_execsync_command_options"" rel=""nofollow"">nodejs doc</a>) that allows you to call any system command. And for example on Windows you can establish VPN with <code>rasphone</code> command (<a href=""https://support.microsoft.com/en-us/kb/125393"" rel=""nofollow"">more here</a>), e.g.:</p>&#xA;&#xA;<pre><code>rasphone -d my_vpn_name&#xA;</code></pre>&#xA;",3144697,"",,"",,2016-02-06T21:07:53,"","",,0,,,
35257902,2,,33341744,2016-02-07T19:17:06,,0,,"<p>I figured that I will use the following approach:</p>&#xA;&#xA;<p>I've found where most browsers keep their cookies, so I will upload the cookies there. When the user accesses the browser, it will be automatically logged in.</p>&#xA;",4418208,"",,"",,2016-02-07T19:17:06,"","",,0,,,
35306814,2,,35161091,2016-02-10T04:23:08,,0,,"<p>Well after a week of searching I finally found the solution. Thanks to a pull request by magicae@github.</p>&#xA;&#xA;<p>You need to look create your custom function in </p>&#xA;&#xA;<pre><code>electron/atom/browser/api/lib/atom_api_web_contents.cc&#xA;</code></pre>&#xA;&#xA;<p>as say</p>&#xA;&#xA;<pre><code>bool WebContents::GetOkOk() {&#xA;  return true;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And define the same in it'h header file</p>&#xA;&#xA;<pre><code>electron/atom/browser/api/lib/atom_api_web_contents.h&#xA;</code></pre>&#xA;&#xA;<p>as</p>&#xA;&#xA;<pre><code>bool GetOkOk();&#xA;</code></pre>&#xA;&#xA;<p>Lastly you need to export the function through the webContents method located in </p>&#xA;&#xA;<pre><code>electron/atom/renderer/lib/web-view/web-view.js&#xA;</code></pre>&#xA;&#xA;<p>as</p>&#xA;&#xA;<pre><code>/* Public-facing API methods. - modified by Akshay Thakare */&#xA;  methods = ['getOk','getURL', ... ];&#xA;</code></pre>&#xA;&#xA;<p>And you are good to go.</p>&#xA;&#xA;<p>Finally after you compile your electron app,</p>&#xA;&#xA;<p>in the main.js file add,</p>&#xA;&#xA;<pre><code>console.log(mainWindow.webContents.getOk());&#xA;</code></pre>&#xA;&#xA;<p>and your done.</p>&#xA;",3761031,"",,"",,2016-02-10T04:23:08,"","",,0,,,
35187134,2,,35186677,2016-02-03T20:32:43,,1,,"<p>You need to run your app and change the <code>data-path</code>, if you don't want to access the running arguments, you can use child_process, for that, the main app will create new app that store the cookies in diferent folder.</p>&#xA;&#xA;<pre><code>var child_process = require('child_process')&#xA;var path = require('path');&#xA;var profilePath = path.join(gui.App.dataPath,Math.random());&#xA;var child = child_process.spawn(process.execPath, [""--data-path=""+profilePath,""],{detached: true});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/nwjs/nw.js/issues/3724"" rel=""nofollow"">https://github.com/nwjs/nw.js/issues/3724</a></p>&#xA;&#xA;<p>I recommend you to not use cookies for save app data. You can use files (fs module).&#xA;You can also try to encrypt your data.</p>&#xA;",1229624,"",,"",,2016-02-03T20:32:43,"","",,1,,,
35211855,2,,34668111,2016-02-04T21:21:08,,1,,"<p>I think this is a bug—you could listen for the Application <code>browser-window-focus</code> event if your app has one or more windows open, but <code>activate</code> should definitely fire. I'd file this as a ticket on the Electron project.</p>&#xA;",100363,"",,"",,2016-02-04T21:21:08,"","",,1,,,
35281544,2,,31823207,2016-02-08T23:53:32,,1,,<p>A packed node-webkit application can identify its starting folder this way:</p>&#xA;&#xA;<pre><code>var appDir = require('path').dirname(process.execPath);&#xA;</code></pre>&#xA;,3563147,"",,"",,2016-02-08T23:53:32,"","",,0,,,
35296754,2,,35281666,2016-02-09T16:10:55,,1,,"<p>I think the error occurs because you are running the require without window context. Where are you running the include from? notice that for code running from <code>node-main</code>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>window: ... is not available at the time the script is loaded, because&#xA;  the script is executed before the DOM window load. (<a href=""https://github.com/nwjs/nw.js/wiki/node-main"" rel=""nofollow"">source</a>)</p>&#xA;</blockquote>&#xA;&#xA;<p>Even when importing the JS using require, you still need to include the css files.I don't think there is a 'clean' or out-of-the-box solution yet. Although what you are doing will definitely work, it will generate weird and not natural script path. </p>&#xA;&#xA;<p>I would add a build <a href=""https://docs.npmjs.com/misc/scripts"" rel=""nofollow"">script</a>:</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;    ""build"": ""node build.js""&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>in package.json to copy bootstrap from node_modules into  '/dist/' to make the path cleaner. </p>&#xA;",1393862,"",,"",,2016-02-09T16:10:55,"","",,0,,,
35247274,2,,35232214,2016-02-06T22:28:06,,2,,"<p>First off, is the code in question in the main process or in a renderer process? If it is the latter, you don't need to use 'node-localstorage', because you can use the renderer's native LocalStorage. If you are in the main process, then you need to provide your own storage strategy so using 'node-localstorage' is a viable option.</p>&#xA;&#xA;<p>In any case, you need to carefully consider where to store the data; for starters, let's look at where Electron's renderer processes would store its LocalStorage data: this differs based on the OS, but you can <a href=""http://electron.atom.io/docs/v0.36.5/api/app/#appgetpathname"" rel=""nofollow"">get and set the paths using the <code>app</code> module</a> -- the path in question is <code>userData</code>, which on OS X would default to <code>~/Library/Application Support/&lt;App Name&gt;</code>. Electron uses that folder to persist cookies, caches, LocalStorage etc. so I would suggest using that folder as well. (Otherwise, refer to XDG defaults for good defaults)</p>&#xA;&#xA;<p>What your example above was trying to do is store your 'errorLogDb' in the current working directory, which might depend on your OS, where your App is installed, how you executed it, etc.</p>&#xA;&#xA;<p>Finally, it's a good idea to differentiate between your 'production' app and your app during development and testing, because you might not want to use the same storage folders for every environment. In any case, just writing to './errorLogDb' is likely to cause lots of headaches so I'd be thankful for the permission denied error.</p>&#xA;",2493332,"",,"",,2016-02-06T22:28:06,"","",,1,,,
35286467,2,,35203203,2016-02-09T07:45:05,,2,,"<p>We can enable the devtools by adding <strong>""showDevToolsOnStartup"":true</strong> under developer section in package.json and can open devtools automatically when application is started.</p>&#xA;&#xA;<pre><code>{&#xA;    ""main"": ""index.html"",&#xA;    ""name"": ""nw-demo"",&#xA;    ""description"": ""demo app of node-webkit"",&#xA;    ""version"": ""0.1.0"",&#xA;    ""keywords"": [ ""demo"", ""node-webkit"" ],&#xA;    ""window"": {&#xA;        ""title"": ""node-webkit demo"",&#xA;        ""icon"": ""link.png"",&#xA;        ""toolbar"": true,&#xA;        ""frame"": false,&#xA;        ""width"": 800,&#xA;        ""height"": 500,&#xA;        ""position"": ""mouse"",&#xA;        ""min_width"": 400,&#xA;        ""min_height"": 200,&#xA;        ""max_width"": 800,&#xA;        ""max_height"": 600&#xA;    },&#xA;    ""developer"": {&#xA;        ""showDevToolsOnStartup"": true&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",3274602,"",3274602,"",2016-02-10T07:12:38,2016-02-10T07:12:38,"","",,0,,,
35197287,2,,35197189,2016-02-04T09:34:12,,3,,"<p><code>fs.writeFileSync()</code> is synchronous.  It does not take a callback as an argument.  If there's an error, it throws an exception.  Otherwise, when it returns, it is done.</p>&#xA;&#xA;<p>The function signature from <a href=""https://nodejs.org/api/fs.html#fs_fs_writefilesync_file_data_options"" rel=""nofollow"">the node.js doc</a> is this:</p>&#xA;&#xA;<pre><code>fs.writeFileSync(file, data[, options])&#xA;</code></pre>&#xA;&#xA;<p>You can either switch your existing code to <code>fs.writeFile()</code> which is asynchronous and does take a callback or switch to use the right arguments and error handling for <code>fs.writeFileSync()</code>.</p>&#xA;",816620,"",,"",,2016-02-04T09:34:12,"","",,1,,,
35216127,2,,35215311,2016-02-05T04:07:26,,3,,"<p>Are you talking about a BrowserWindow losing focus? If so the <a href=""https://github.com/atom/electron/blob/v0.36.7/docs/api/browser-window.md#event-blur"" rel=""nofollow""><code>blur</code></a> event seems to be what you're looking for.</p>&#xA;",1259938,"",,"",,2016-02-05T04:07:26,"","",,2,,,
35372981,2,,35305358,2016-02-12T22:05:00,,5,,<p>There is a typo in your json. Change the parenthesis after the <code>$</code> in <code>$(workspaceRoot}</code> to a curly brace. This should at least fix the warning.</p>&#xA;,4860305,"",80428,"",2016-07-26T06:20:21,2016-07-26T06:20:21,"","",,0,,,
35256981,2,,31843539,2016-02-07T17:57:49,,6,,"<p><a href=""https://github.com/scottwrobinson/camo"" rel=""noreferrer"">Camo</a> is an ODM for nedb and MongoDB, on Node.js.</p>&#xA;",985414,"",,"",,2016-02-07T17:57:49,"","",,0,,,
35174516,2,,35047454,2016-02-03T10:31:22,,7,,"<p>This is an issue other people have reported too. Here in atom discussion <a href=""https://discuss.atom.io/t/webview-autosize/16915/6"" rel=""nofollow noreferrer"">webview autosize</a>.</p>&#xA;&#xA;<p>It seems that 'autosize' doesn't say the last word about the resulting window size; css parameters may interfere and change the result.</p>&#xA;&#xA;<p>There are some css workarounds proposed for this issue that may help:</p>&#xA;&#xA;<p>Set html and body width to 100%:</p>&#xA;&#xA;<pre><code>html, body {&#xA;   width: 100%;&#xA;   height: 100%;&#xA;   margin: 0;&#xA;   padding: 0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Set viewport relative units in webview css:</p>&#xA;&#xA;<pre><code>webview {&#xA;  display: block;   /* iframes are inline by default */&#xA;  border: none;     /* Reset default border */&#xA;  height: 80vh;     /* Viewport-relative units */&#xA;  width: 95vw;&#xA;}&#xA;</code></pre>&#xA;",5260086,"",1142113,"",2019-02-26T20:49:12,2019-02-26T20:49:12,"","",,1,,,
35181897,2,,35168144,2016-02-03T16:05:04,,9,,"<p>I don't really know much about nightmare specifically but it seems like you may have a problem simply with asynchrony, which is a hard problem in js in general.</p>&#xA;&#xA;<p>The good news is that you can just restructure your code and rely on generators to make it work fairly simply. </p>&#xA;&#xA;<p>The key to realize is that when you use the <code>*</code> before a function name then that function becomes a generator function, which allows you to use the <code>yield</code> keyword. Whenever you <code>yield</code> that line of code will wait for the returned promise to finish before going to the next line of code and it will return that yielded value as a result. You can use the <a href=""https://www.npmjs.com/package/vo"" rel=""nofollow noreferrer"">vo</a> library to convert the generator function into a callback, which returns an array of all yielded results.</p>&#xA;&#xA;<pre><code>var Nightmare = require('../nightmare')&#xA;var vo = require('vo')&#xA;&#xA;vo(run)(function(err, result) {&#xA;  if (err) throw err&#xA;  console.log('#result &gt; h3: ', result)&#xA;})&#xA;&#xA;function *run() {&#xA;  var nightmare = Nightmare();&#xA;  yield nightmare&#xA;    .goto('https://www.example.com/signin')&#xA;    .type('#login', 'username')&#xA;    .type('#password', 'password')&#xA;    .click('#btn')&#xA;&#xA;  for (var i = 0; i &lt; 4; i++) {&#xA;    yield nightmare&#xA;      .goto('https://www.example.com/page'+i)&#xA;      .wait(1000)&#xA;      .evaluate(function(){&#xA;        return $('#result &gt; h3').text()&#xA;      })&#xA;  }&#xA;&#xA;  yield nightmare.end()&#xA;}&#xA;</code></pre>&#xA;",12958,"",12958,"",2017-07-25T21:24:16,2017-07-25T21:24:16,"","",,2,,,
35192573,2,,35189475,2016-02-04T04:34:23,,13,,"<blockquote>&#xA;  <p>Apache Cordova is a platform for building native mobile applications using HTML, CSS and JavaScript.</p>&#xA;</blockquote>&#xA;&#xA;<p>It seems like the main difference is that Cordova targets mobile platforms and apps first and foremost, while Electron is primarily focused on desktop platforms and apps. Cordova does appear to support Windows, Ubuntu, and <a href=""https://github.com/apache/cordova-osx"">OS X</a> desktops to some extent, however they do mention the following in the OS X repository:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Note that the current focus of this cordova platform is to provide kiosk-like applications for OSX, that usually run fullscreen and have little desktop interaction. So there is no direct support for menus, dock integration, finder integration, documents, etc. Think of it as a mobile app running on a very big screen.</p>&#xA;</blockquote>&#xA;&#xA;<p>It also appears that Cordova's plugin system is not directly compatible with regular NPM packages and native NodeJS addons, so you will probably have to create some sort of plugin wrapper for <code>node-serialport</code> before you could use it in a Cordova app, or perhaps use <a href=""https://cordova.apache.org/plugins/?q=serial"">an existing plugin</a>.</p>&#xA;",1259938,"",,"",,2016-02-04T04:34:23,"","",,1,,,
53007696,2,,52987653,2018-10-26T11:25:19,,2,,"<p>You may want to have a look at <code>React Native</code> which is used to build cross-platform mobile applications. It is developed by Facebook.</p>&#xA;&#xA;<p><a href=""https://facebook.github.io/react-native/"" rel=""nofollow noreferrer"">https://facebook.github.io/react-native/</a></p>&#xA;",5265621,"",,"",,2018-10-26T11:25:19,"","",,0,,,
53010704,2,,52717864,2018-10-26T14:17:11,,0,,"<p>I solved this problem in this way</p>&#xA;&#xA;<pre><code>setTextLeft() {&#xA; const cm = this.novelEditor.instance;&#xA; const num = cm.getCursor().line;&#xA; cm.removeLineClass(num,'text');&#xA; cm.addLineClass(num, 'text', 'lineTextLeft');&#xA; this.refreshCodemirror();&#xA;}&#xA;setTextCenter() {&#xA; const cm = this.novelEditor.instance;&#xA; const num = cm.getCursor().line;&#xA; cm.removeLineClass(num,'text');&#xA; cm.addLineClass(num, 'text', 'lineTextCenter');&#xA; this.refreshCodemirror();&#xA;}&#xA;setTextRight() {&#xA; const cm = this.novelEditor.instance;&#xA; const num = cm.getCursor().line;&#xA; cm.removeLineClass(num,'text');&#xA; cm.addLineClass(num, 'text', 'lineTextRight');    &#xA; this.refreshCodemirror();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And scss:</p>&#xA;&#xA;<pre><code>.CodeMirror-line {&#xA;  &amp;.lineTextLeft {&#xA;    text-align: left;&#xA;  }&#xA;  &amp;.lineTextCenter {&#xA;    text-align: center;&#xA;  }&#xA;  &amp;.lineTextRight {&#xA;    text-align: right;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",7551481,"",,"",,2018-10-26T14:17:11,"","",,0,,,
53016838,2,,53011778,2018-10-26T22:06:23,,0,,"<p>I'm not familiar with Windows software development, but the property <a href=""https://electronjs.org/docs/api/process#processwindowsstore"" rel=""nofollow noreferrer"">process.windowsStore</a> could be what you're looking for, hopefully... </p>&#xA;&#xA;<blockquote>&#xA;  <p><code>process.windowsStore</code></p>&#xA;  &#xA;  <p>A <code>Boolean</code>. If the app is running as a Windows&#xA;  Store app (appx), this property is <code>true</code>, for otherwise it is&#xA;  <code>undefined</code>.</p>&#xA;</blockquote>&#xA;",,user8022331,,"",,2018-10-26T22:06:23,"","",,0,,,
53021894,2,,53021183,2018-10-27T12:27:41,,2,,"<p>If you mean window size of your electron application you can set <code>minHeight</code>,  <code>minWidth</code> and <code>maxHeight</code>, <code>maxWidth</code> of your window </p>&#xA;&#xA;<pre><code>new BrowserWindow({&#xA;  width: 300, &#xA;  height: 400, &#xA;  minWidth: 300, &#xA;  minHeight: 400,&#xA;  maxHeight: 300, &#xA;  maxWidth: 400&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>or alternative way is to set <code>resizable</code> to <code>false</code>, which by default is <code>true</code> </p>&#xA;",7312280,"",7312280,"",2018-10-27T15:21:01,2018-10-27T15:21:01,"","",,0,,,
53025937,2,,53025936,2018-10-27T20:19:25,,0,,"<p>Try <a href=""https://github.com/jbreckmckye/electron-auth0-login"" rel=""nofollow noreferrer"">electron-auth0-login</a>.</p>&#xA;&#xA;<p>You can download the package from NPM:</p>&#xA;&#xA;<pre><code># Installing electron-auth0-login&#xA;npm install electron-auth0-login --save&#xA;&#xA;# Installing peer dependencies&#xA;npm install request request-promise-native --save&#xA;</code></pre>&#xA;&#xA;<p>Initialising is simple. Just add the following to main process code:</p>&#xA;&#xA;<pre><code>import ElectronAuth0Login from 'electron-auth0-login';&#xA;&#xA;const auth = new ElectronAuth0Login({&#xA;    // Get these from your Auth0 application console&#xA;    auth0Audience: 'https://api.mydomain.com',&#xA;    auth0ClientId: 'abc123ghiMyApp',&#xA;    auth0Domain: 'my-domain.eu.auth0.com',&#xA;    auth0Scopes: 'given_name profile'&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Have a redirect URL whitelisted for <em>https://{your-auth0-domain}/mobile</em>.</p>&#xA;&#xA;<p>Now, when you want a token, call auth.getToken and electron-auth0-login will either return a token in memory (if valid), use a refresh token (if enabled) or kick off a new Auth0 login flow.</p>&#xA;&#xA;<p>Full details can be found on the project’s readme: <a href=""https://github.com/jbreckmckye/electron-auth0-login"" rel=""nofollow noreferrer"">https://github.com/jbreckmckye/electron-auth0-login</a></p>&#xA;",845505,"",,"",,2018-10-27T20:19:25,"","",,0,,,
53089025,2,,53060634,2018-10-31T17:28:08,,1,,<p>I was using the latest version of nodejs 11 that's why that was not working when I install the 10.11 version it worked thanks for @pushkin.</p>&#xA;,5179304,"",,"",,2018-10-31T17:28:08,"","",,0,,,
53097803,2,,53059713,2018-11-01T08:47:06,,1,,"<pre><code>$(""#Save"").click(() =&gt; {&#xA;    dialog.showSaveDialog({&#xA;        title: ""Save Data"", &#xA;        defaultPath: ""C:\Users\username"", // Default Path &#xA;        filters: [{ name: 'Data File', extensions: ['json'] }],&#xA;    },&#xA;        (jsonFileName) =&gt; { // callback function&#xA;            // Save Here&#xA;        });&#xA;});&#xA;$(""#Load_HITS"").click(() =&gt; {&#xA;    dialog.showOpenDialog(&#xA;        {&#xA;            title: ""Choose a HITS Data File to load"",&#xA;            defaultPath: HITSDataPath,&#xA;            filters: [{ name: 'HITS Data File', extensions: ['json'] }],&#xA;            properties: ['openFile']&#xA;        },&#xA;        (jsonFileName) =&gt; {&#xA;            // load file&#xA;        }&#xA;    )&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>With the help of pergy's comment, I was able to find how to use and here is my code. </p>&#xA;",9628022,"",,"",,2018-11-01T08:47:06,"","",,0,,,
53107402,2,,52510558,2018-11-01T18:38:05,,0,,"<p>I fixed this via one having the script load in the header and then have the JS file load up with in the .onLoad() function as I was working with canvas, i.e. the anime JS.</p>&#xA;",9613506,"",,"",,2018-11-01T18:38:05,"","",,0,,,
53116173,2,,53102100,2018-11-02T09:47:46,,0,,"<p>I found the solution, I needed to downgrade npm request package to 2.8.7 make it work. </p>&#xA;",7320785,"",,"",,2018-11-02T09:47:46,"","",,0,,,
53116763,2,,52949682,2018-11-02T10:25:57,,0,,"<p>As I couldn't come up with an alternative I implemented this solution:</p>&#xA;&#xA;<pre><code>checkForLoad = setInterval(function () {&#xA;                if (!didLoad) {&#xA;                    win.webContents.reload();&#xA;                }&#xA;                else {&#xA;                    clearInterval(checkForLoad);&#xA;                    win.show();&#xA;                }&#xA;            }, 2000);&#xA;</code></pre>&#xA;&#xA;<p>I reload the page every few seconds. In Angular, I just send and IPC Message to change ""didLoad"" to true once the Angular App is actually running. Works nicely, but obviously it would be better to have an event to act upon. In the meantime, it's close enough.</p>&#xA;",10046739,"",,"",,2018-11-02T10:25:57,"","",,0,,,
53119910,2,,45743261,2018-11-02T13:56:11,,0,,"<p>As per comment, this was a bug in <code>featherjs</code> that got patched</p>&#xA;",2335799,"",,"",,2018-11-02T13:56:11,"","",,0,,,2018-11-02T13:56:11
53120598,2,,52968292,2018-11-02T14:38:10,,1,,"<p>I also asked on GitHub. The answer was:</p>&#xA;&#xA;<blockquote>&#xA;  <p>For AppImage not possible. For mac DMG not possible.</p>&#xA;  &#xA;  <p>You can use alternative formats, but I just recommend you to install&#xA;  required software on first run.</p>&#xA;</blockquote>&#xA;&#xA;<p>Here is the answer: <a href=""https://github.com/electron-userland/electron-builder/issues/3436"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-builder/issues/3436</a></p>&#xA;",9211189,"",,"",,2018-11-02T14:38:10,"","",,0,,,
53121190,2,,51682307,2018-11-02T15:11:11,,1,,"<p>A strict answer to your question would be: no it's not possible to do this with <code>fs</code> alone. </p>&#xA;&#xA;<p>However I would recommend you to use <a href=""https://github.com/jprichardson/node-fs-extra"" rel=""nofollow noreferrer"">fs-extra</a>, which has the <a href=""https://github.com/jprichardson/node-fs-extra/blob/master/docs/move.md"" rel=""nofollow noreferrer"">move</a> and <a href=""https://github.com/jprichardson/node-fs-extra/blob/master/docs/move-sync.md"" rel=""nofollow noreferrer"">moveSync</a> methods. Note that they don't support wildcards like <code>*.txt</code>, so you might need to iterate over the <code>txt</code> files using <code>fs.readdir</code></p>&#xA;",865038,"",,"",,2018-11-02T15:11:11,"","",,0,,,
53122847,2,,53116932,2018-11-02T16:54:49,,1,,"<p>As the docs go, you enable or disable window frame at the time of creation of browser window. After that, there are no methods you can call to enable or disable frame. However, if you <strong>really really</strong> want that option, there may be a workaround. And a workaround, is well, a workaround.</p>&#xA;&#xA;<ol>&#xA;<li><p>Create 2 browser windows, one over the other. The first one being transparent window(with frame and click-through) and the second one being your content window(without frame). </p></li>&#xA;<li><p>Implement your custom solution to keep size and position of both the windows in sync. Use ipc to share data between the windows. </p></li>&#xA;<li><p>Toggle the visibility of the transparent browser window to show/hide frame. </p></li>&#xA;</ol>&#xA;&#xA;<p><em><strong>Some relevant resources:</strong></em></p>&#xA;&#xA;<p>Creating frameless window : <a href=""https://electronjs.org/docs/api/frameless-window#create-a-frameless-window"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/frameless-window#create-a-frameless-window</a></p>&#xA;&#xA;<p>Creating transparent window : <a href=""https://electronjs.org/docs/api/frameless-window#transparent-window"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/frameless-window#transparent-window</a></p>&#xA;",9639020,"",,"",,2018-11-02T16:54:49,"","",,0,,,
53143708,2,,53143646,2018-11-04T17:51:55,,1,,"<p>You should use IPC (Internal Process Communication). In the electron framework, there are two processes: </p>&#xA;&#xA;<ul>&#xA;<li>Main (The main process creates web pages by creating BrowserWindow instances.)</li>&#xA;<li>Renderer (The main process manages all web pages and their corresponding renderer processes)</li>&#xA;</ul>&#xA;&#xA;<p>These two can communicate together using IPC. For more details see <a href=""https://electronjs.org/docs/api/ipc-renderer"" rel=""nofollow noreferrer"">docs</a></p>&#xA;",3325115,"",,"",,2018-11-04T17:51:55,"","",,0,,,
53156443,2,,53123325,2018-11-05T14:33:22,,0,,<p>Add this CSS to your window.html page:</p>&#xA;&#xA;<pre><code>/* make sure that the body fills the entire window */&#xA;body {&#xA;    width:100vw;&#xA;    height:100vh;&#xA;    margin:0px;&#xA;}&#xA;&#xA;/* make sure that the webview element fills the entire body*/&#xA;webview {&#xA;    height:100%;&#xA;    width:100%;&#xA;}&#xA;</code></pre>&#xA;,3479456,"",,"",,2018-11-05T14:33:22,"","",,0,,,
53188815,2,,53065535,2018-11-07T11:44:18,,2,,"<p>Thanks to <strong>@miadz</strong> for pointing me in the right direction.</p>&#xA;&#xA;<p>Here's what you need to do to run your Electron app fully sandboxed (as it will appear to the Apple Review Team, with all entitlements applied):</p>&#xA;&#xA;<p>1) Firstly, you need a 2nd Mac on which to test your app</p>&#xA;&#xA;<p>2) Add your 2nd Mac as a listed device on the Apple Developer site (<strong>Account</strong> > <strong>Certificates, IDs and Profiles</strong> > <strong>macOS</strong> > <strong>Devices</strong> > <strong>all</strong>). You will need your Mac's UUID which you can find from your menu bar in <strong>Apple</strong> > <strong>About This Mac</strong> > <strong>Overview</strong> > <strong>System Report...</strong></p>&#xA;&#xA;<p>3) Generate a Mac Development Provisioning profile for your app on the Apple Developer site (<strong>Account</strong> > <strong>Certificates, IDs and Profiles</strong> > <strong>macOS</strong> > <strong>Provisioning Profiles</strong> > <strong>Development</strong>) and make sure you select your 2nd Mac as a device. If you already have a development provisioning profile, then edit it and select your 2nd Mac under <strong>Devices</strong>.</p>&#xA;&#xA;<p>4) Download your provisioning profile and place it in the root of your Quasar / Electron project</p>&#xA;&#xA;<p>5) On your development Mac, build your app for the <strong>mas</strong> platform <strong>without</strong> signing, e.g.</p>&#xA;&#xA;<pre><code>electron: {&#xA;    packager: {&#xA;        asar: false,&#xA;        appBundleId: '[app id]',&#xA;        platform: 'mas', &#xA;        version: '1.0.0',&#xA;        buildVersion: '4'&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>then...</p>&#xA;&#xA;<pre><code>quasar build -m electron&#xA;</code></pre>&#xA;&#xA;<p>6) Sign your generated app for development with <strong>electron-osx-sign</strong> (you may need to <code>npm install electron-osx-sign -g</code> first):</p>&#xA;&#xA;<pre><code>electron-osx-sign ""dist/electron-mat/[app name]-mas-x64/[app name].app"" --platform=mas --type=development --entitlements=""src-electron/default.entitlements.mas.plist"" --provisioning-profile=""[app name]_Mac_Development.provisionprofile""&#xA;</code></pre>&#xA;&#xA;<p>7) Send the generated .app file to your 2nd Mac and run</p>&#xA;",1496114,"",,"",,2018-11-07T11:44:18,"","",,0,,,
53192318,2,,52985960,2018-11-07T15:14:28,,0,,"<p>Found out that this is not possible. Also its not a an Electron issue, rather a chromium one - Electron just wraps the chromium API.</p>&#xA;&#xA;<p>Finally I managed to inject a javascript (inside the api service) which forwards me all data received from the server via ipc&#xA;<a href=""https://electronjs.org/docs/api/ipc-main"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/ipc-main</a> </p>&#xA;",4278064,"",,"",,2018-11-07T15:14:28,"","",,0,,,
53007463,2,,52984937,2018-10-26T11:10:58,,0,,"<p><a href=""https://www.npmjs.com/package/pouchdb-adapter-memory"" rel=""nofollow noreferrer"">In-Memory adapter for PouchDB maybe?</a></p>&#xA;&#xA;<p>Or another idea: Create a random string when the app starts, create the PouchDB database with the string as suffix, for example <code>home-MjlhOGFlYmEy</code>, dump the data in there. A new instance of the app will use a different suffix and has a separate database. This, of course, doesn't clean old data. You could then think of strategies how to clean the old data, for example by keeping a list of all suffixes and have some garbage collector running that cleans old databases that are not in use anymore.</p>&#xA;",3328883,"",,"",,2018-10-26T11:10:58,"","",,1,,,
53012673,2,,53012311,2018-10-26T16:14:26,,1,,<p>The module does not return anything in a browser.</p>&#xA;&#xA;<p>A bit of its code</p>&#xA;&#xA;<pre><code>var forEachBatch = function() { .... };&#xA;window.forEachBatch = forEachBatch;&#xA;</code></pre>&#xA;&#xA;<p>So when you do this</p>&#xA;&#xA;<pre><code>var forEachBatch = require('foreach-batch')&#xA;</code></pre>&#xA;&#xA;<p>then since the require function does not return anything you overwrite window.forEachBatch and it becomes undefined.</p>&#xA;&#xA;<p>So try this instead</p>&#xA;&#xA;<pre><code>require('foreach-batch')&#xA;forEachBatch(...);&#xA;</code></pre>&#xA;&#xA;<p>I haven't try it thou.</p>&#xA;,3284355,"",,"",,2018-10-26T16:14:26,"","",,1,,,
53069884,2,,53025339,2018-10-30T17:34:48,,1,,"<p>It seems that the issue was due the use of ""zip"" utility. This does not preserve the extra file attributes generated by codesign. I'm using <code>ditto</code> and the signature is successfully validated after download.</p>&#xA;",7623709,"",,"",,2018-10-30T17:34:48,"","",,1,,,
53076127,2,,52943583,2018-10-31T04:05:24,,2,,"<p>You can run Express server inside Electron. <a href=""https://github.com/frankhale/electron-with-express"" rel=""nofollow noreferrer"">Here is a sample repo</a> for running express inside Electron.</p>&#xA;&#xA;<p>You can fork a child process to run express app as follows</p>&#xA;&#xA;<pre><code>app = require(""electron"").remote.app),&#xA;node = require(""child_process"").fork(&#xA;         `${app.getAppPath()}/express-app/bin/www`,&#xA;         [],&#xA;         {&#xA;             stdio: [""pipe"", ""pipe"", ""pipe"", ""ipc""]&#xA;         });&#xA;</code></pre>&#xA;&#xA;<p>The express app used here is a generated one using express-generator.</p>&#xA;&#xA;<p>The problem with your approach is that you are maintaining a single package.json file for both Electron and Express. Checkout <a href=""https://github.com/bharathvaj1995/electron-react-boilerplate"" rel=""nofollow noreferrer"">Electron-React-Boilerplate</a>, here i have two separate npm installation locations one is for Electron alone and other is for React stuffs. Electron-packager and Electron-builder works using this pattern. This is the reason why your process on main thread throws </p>&#xA;&#xA;<blockquote>&#xA;  <p>Error: Cannot find module 'express'</p>&#xA;</blockquote>&#xA;",6906028,"",,"",,2018-10-31T04:05:24,"","",,1,,,
53085974,2,,53054209,2018-10-31T14:40:42,,5,,"<p>Electron doesn't support the current release of nodejs yet (v11), so people trying to use this unfortunately need to downgrade to the LTS version and it should work. I also spent almost a whole day wondering what's wrong, but this is the only thing that worked for me.</p>&#xA;",1289283,"",,"",,2018-10-31T14:40:42,"","",,1,,,
53105064,2,,53090888,2018-11-01T16:08:19,,2,,"<p>The only straightforward solution I have come up with is to use <code>setTimeout</code> to delay the dialog display (as noted in comments, <code>nextTick</code> did not solve the problem). I made a demo snippet where you can vary the timeout interval. Somewhere around 10ms works on my browser. I would recommend using something like 50 to be pretty safe everywhere.</p>&#xA;&#xA;<p>I would use <code>v-show</code> rather than <code>v-if</code> for something that is going to be hidden and displayed again.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>new Vue({&#xD;&#xA;  el: '#app',&#xD;&#xA;  data: {&#xD;&#xA;    showMenu: true,&#xD;&#xA;    delay: 10&#xD;&#xA;  },&#xD;&#xA;  methods: {&#xD;&#xA;    showDialog() {&#xD;&#xA;      this.showMenu = false;&#xD;&#xA;      setTimeout(() =&gt; {&#xD;&#xA;        alert('this is a dialog');&#xD;&#xA;        this.showMenu = true;&#xD;&#xA;      }, this.delay);&#xD;&#xA;    }&#xD;&#xA;  },&#xD;&#xA;  components: {&#xD;&#xA;    threeDotMenu: {&#xD;&#xA;      template: '#three-dot-menu-template',&#xD;&#xA;      props: ['show'],&#xD;&#xA;      methods: {&#xD;&#xA;        openDialog() {&#xD;&#xA;          this.$emit('save-screens');&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;});</code></pre>&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>.menu {&#xD;&#xA;  background-color: #fee;&#xD;&#xA;  padding: 2em;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://unpkg.com/vue@latest/dist/vue.js""&gt;&lt;/script&gt;&#xD;&#xA;&lt;div id=""app""&gt;&#xD;&#xA;  &lt;label&gt;Delay: &lt;input type=""number"" v-model=""delay""&gt;&lt;/label&gt;&#xD;&#xA;  &lt;three-dot-menu :show=""showMenu"" @save-screens=""showDialog""&gt;&lt;/three-dot-menu&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;template id=""three-dot-menu-template""&gt;&#xD;&#xA;  &lt;div class=""menu"" v-show=""show""&gt;&#xD;&#xA;    this is the menu&#xD;&#xA;    &lt;button @click=""openDialog""&gt;Open dialog&lt;/button&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;/template&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",392102,"",392102,"",2018-11-02T16:36:24,2018-11-02T16:36:24,"","",,1,,,
53111312,2,,53105491,2018-11-02T00:49:51,,2,,"<p>This may have something to do with yarn. When I do a yarn install, it adds the symlinked .bin folder to the esprima package. An npm install doesn't. I deleted the node_modules folder, ran <code>npm i</code>, and then <code>yarn dist</code>, and all seemed well.</p>&#xA;&#xA;<p>Let me know how this works for you!</p>&#xA;",4044539,"",,"",,2018-11-02T00:49:51,"","",,1,,,
53133574,2,,53132278,2018-11-03T17:04:07,,1,,"<p>You can use Inno Setup to make an executable that will install your electron app. Using this tool you can install any dependency you need to run the app. Take a look at <a href=""https://stackoverflow.com/questions/13537071/inno-setup-how-to-copy-a-file-before-setup-start"">this answer</a> for more detailed info about or this question if you have an installer that want to run <a href=""https://stackoverflow.com/questions/19589309/inno-setup-install-other-installer-and-run-it-before-continuing-my-install"">After/Before</a> the setup is complete.</p>&#xA;",,user9741470,,"",,2018-11-03T17:04:07,"","",,1,,,
53150895,2,,53112448,2018-11-05T08:39:30,,1,,"<p>You can achieve this using <a href=""https://babeljs.io/docs/en/plugins"" rel=""nofollow noreferrer"">Babel plugins</a>.</p>&#xA;&#xA;<p><a href=""https://babeljs.io/"" rel=""nofollow noreferrer"">Babel</a> is a javascript transpiler that can perform code transformations and has an API that can be easily used in node, but writing a plugin for it is not a trivial task. </p>&#xA;&#xA;<p>I found this article to be a good starting point: <a href=""https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md"" rel=""nofollow noreferrer"">Babel Plugin Handbook</a><br>&#xA;Also an aditional article here: <a href=""https://www.sitepoint.com/understanding-asts-building-babel-plugin/"" rel=""nofollow noreferrer"">Understanding ASTs by Building Your Own Babel Plugin</a></p>&#xA;&#xA;<p>There are also some plugins out there which are not quite what you're looking for, but fairly similar. Perpahs you can inspect their source code to see how they're implemented:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/wssgcg1213/babel-plugin-inline-replace-variables"" rel=""nofollow noreferrer"">babel-plugin-inline-replace-variables</a></li>&#xA;<li><a href=""https://www.npmjs.com/package/babel-plugin-undeclared-variables-check"" rel=""nofollow noreferrer"">babel-plugin-undeclared-variables-check</a></li>&#xA;<li><a href=""https://github.com/systemjs/babel-plugin-transform-global-system-wrapper"" rel=""nofollow noreferrer"">babel-plugin-transform-global-system-wrapper</a></li>&#xA;</ul>&#xA;",865038,"",865038,"",2018-11-05T08:52:37,2018-11-05T08:52:37,"","",,1,,,
53163167,2,,53162875,2018-11-05T22:28:11,,1,,"<p>Your JSON is not formatted correctly. There should be a comma separating your sets.</p>&#xA;&#xA;<pre><code>{&#xA;  ""myArray"": [&#xA;    {&#xA;      ""pink"": 3,&#xA;      ""long"": 2&#xA;    },&#xA;    {&#xA;      ""pink"": 4,&#xA;      ""long"": 7&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;",10610353,"",,"",,2018-11-05T22:28:11,"","",,1,,,
53179451,2,,53179367,2018-11-06T20:23:02,,1,,"<p>To print to dev tools in electron, your console.log needs to be inside the JavaScript running as your client, not the server part that you run from the console.</p>&#xA;&#xA;<p>Say this is your electron app (snippet)</p>&#xA;&#xA;<pre><code>app.on('ready', () =&gt; {&#xA;    // load the local HTML file&#xA;    let url = require('url').format({&#xA;        protocol: 'file',&#xA;        slashes: true,&#xA;        pathname: require('path').join(__dirname, '/build/index.html')&#xA;    })&#xA;    mainWindow.loadURL(url);&#xA;    mainWindow.webContents.openDevTools();&#xA;    console.log('this will go to the terminal');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>index.html:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    console.log('this will go to electron dev tools');&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",8346513,"",,"",,2018-11-06T20:23:02,"","",,1,,,
53204074,2,,53201795,2018-11-08T08:38:01,,1,,"<p>Yes it is. </p>&#xA;&#xA;<h3>1. In the main process</h3>&#xA;&#xA;<pre><code>global.ProgressBar = require('electron-progressbar');&#xA;</code></pre>&#xA;&#xA;<h3>2. In the renderer process</h3>&#xA;&#xA;<pre><code>const { getGlobal, app } = require('electron').remote;&#xA;const ProgressBar = getGlobal('ProgressBar');&#xA;&#xA;app.on('ready', function() {&#xA;  var progressBar = new ProgressBar({&#xA;  text: 'Preparing data...',&#xA;  detail: 'Wait...'&#xA;});&#xA;</code></pre>&#xA;",9639020,"",9639020,"",2018-11-08T13:21:26,2018-11-08T13:21:26,"","",,2,,,
53208697,2,,52874507,2018-11-08T13:25:44,,0,,"<p>So i figured it out. The problem ended up being very simple, but the error just threw me (way) off.</p>&#xA;&#xA;<p>It turns out i had the <code>on-click</code> on a lower level than the <code>href=""#""</code>. This caused my <code>&lt;body&gt;&lt;/body&gt;</code> to be rendered empty.  </p>&#xA;&#xA;<pre><code>&lt;li&gt;&#xA;  &lt;router-link href=""#"" to=""/""&gt;&#xA;    &lt;span class=""label"" v-on:click=""turnOffSidebar()""&gt;Dashboard&lt;/span&gt;&#xA;    &lt;font-awesome-icon icon=""tachometer-alt"" /&gt;&#xA;  &lt;/router-link &gt;&#xA;&lt;/li&gt;&#xA;</code></pre>&#xA;&#xA;<p>Ofcourse the correct solution was simply this: </p>&#xA;&#xA;<pre><code>&lt;li&gt;&#xA;  &lt;router-link href=""#"" to=""/"" v-on:click=""turnOffSidebar()""&gt;&#xA;    &lt;span class=""label""&gt;Dashboard&lt;/span&gt;&#xA;    &lt;font-awesome-icon icon=""tachometer-alt"" /&gt;&#xA;  &lt;/router-link &gt;&#xA;&lt;/li&gt;&#xA;</code></pre>&#xA;",1692823,"",,"",,2018-11-08T13:25:44,"","",,2,,,
53047779,2,,53047014,2018-10-29T14:35:20,,1,,"<p>You cannot override the association like that.</p>&#xA;&#xA;<p>The <code>UserChoice</code> (and <code>FileExts</code>) keys are undocumented and you should not write to them.</p>&#xA;&#xA;<p>Because people <a href=""https://blogs.msdn.microsoft.com/oldnewthing/20061101-03/?p=29153"" rel=""nofollow noreferrer"">force themselves</a> and ignore the issue of ""<a href=""https://blogs.msdn.microsoft.com/oldnewthing/20050607-00/?p=35413/"" rel=""nofollow noreferrer"">What if two programs did this?</a>"" Microsoft has made it increasingly difficult to programmatically set the default association for types/applications.</p>&#xA;&#xA;<p>If you look inside a <code>UserChoice</code> key on recent versions of Windows you will also see a <code>Hash</code> value. If the <code>ProgId</code> value does not match the hash Windows will ignore your attempt to take over the association. Only the ControlPanel/Settings UI can successfully change the association on these systems.</p>&#xA;&#xA;<p>In enterprise environments you can use <a href=""https://blogs.msdn.microsoft.com/hewagen/making-file-type-associations-enterprise-ready/"" rel=""nofollow noreferrer"">DISM/GPO</a>. Applications installed by normal users cannot do this, your only option is to follow the <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ee872123(v=vs.85).aspx"" rel=""nofollow noreferrer"">Microsoft guidelines</a>:</p>&#xA;&#xA;<p>Register your association the normal documented way in HKEY_CLASSES_ROOT.</p>&#xA;&#xA;<p>Additionally you can:</p>&#xA;&#xA;<ul>&#xA;<li><p><strong>WinVista &amp; Win7</strong>: You can force yourself by using the <code>IApplicationAssociationRegistration</code> interface (Not recommended).</p></li>&#xA;<li><p><strong>Win8</strong>: Ask the user if they want to change their associations and if they confirm you can call <a href=""https://docs.microsoft.com/en-us/windows/desktop/api/Shobjidl/nf-shobjidl-iapplicationassociationregistrationui-launchadvancedassociationui"" rel=""nofollow noreferrer""><code>IApplicationAssociationRegistrationUI::LaunchAdvancedAssociationUI</code></a>.</p></li>&#xA;<li><p><strong>Win10</strong>: Call <code>IApplicationAssociationRegistrationUI::LaunchAdvancedAssociationUI</code> to <a href=""https://blogs.windows.com/windowsexperience/2015/05/20/announcing-windows-10-insider-preview-build-10122-for-pcs/#"" rel=""nofollow noreferrer"">display a help-popup</a> instructing the user how they can change their associations.</p></li>&#xA;</ul>&#xA;&#xA;<p><code>LaunchAdvancedAssociationUI</code> can be used in NSIS v3+ like this:</p>&#xA;&#xA;<pre><code>!include LogicLib.nsh&#xA;!include Win\COM.nsh&#xA;Section&#xA;!insertmacro ComHlpr_CreateInProcInstance ${CLSID_ApplicationAssociationRegistrationUI} ${IID_IApplicationAssociationRegistrationUI} r0 """"&#xA;${If} $0 P&lt;&gt; 0&#xA;    ${IApplicationAssociationRegistrationUI::LaunchAdvancedAssociationUI} $0 '(""Internet Explorer"")' ; Replace with your registered application name&#xA;    ${IUnknown::Release} $0 """"&#xA;${EndIf}&#xA;SectionEnd&#xA;</code></pre>&#xA;",3501,"",,"",,2018-10-29T14:35:20,"","",,3,,,
53113300,2,,52844870,2018-11-02T05:53:31,,3,,"<p>I had that problem too. It appears, it takes time for Chrome Debugger to attach to the Renderer process. By the time it is connected the scripts inside Renderer have already been executed. </p>&#xA;&#xA;<p>I've solved this issue by delaying the script execution inside <code>renderer.js</code>, like this:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>async function main() {&#xA;  const { ipcRenderer, remote } = require('electron');&#xA;  const isDevelopment = require('electron-is-dev');&#xA;&#xA;  console.log(process.env);&#xA;&#xA;  if (isDevelopment) {&#xA;    // this is to give Chrome Debugger time to attach to the new window &#xA;    await new Promise(r =&gt; setTimeout(r, 1000));&#xA;  }&#xA;&#xA;  // breakpoints should work from here on,&#xA;  // toggle them with F9 or just use 'debugger'&#xA;  debugger;&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;main().catch(function (error) {&#xA;  console.log(error);&#xA;  alert(error);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I have <a href=""https://github.com/noseratio/electron-quick-start"" rel=""nofollow noreferrer"">a customized version</a>  of <strong>Minimal Electron Application</strong> which solves this and a few other problems I faced when I started developing with Electron.</p>&#xA;",1768303,"",,"",,2018-11-02T05:53:31,"","",,3,,,
53171186,2,,53080716,2018-11-06T11:41:00,,0,,"<p>You can define that scripts into your <code>package.json</code> file as a script and you can define it to run with command line script when <code>npm</code> triggered. Npm will perform that commands.</p>&#xA;&#xA;<p>For example script parameters in package.json, when you call <code>npm test</code> from terminal, your code execute firstly <code>locate-directory</code> script and after that will run <code>run-test</code> script: </p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;   ""locate-directory"": ""cd C:\Program Files\Project""&#xA;   ""run-test: ""C:\Program Files\Project&gt;Launcher.exe test.json""&#xA;   ""test"": ""npm-run-all --serial locate-directory run-test""&#xA;}&#xA;</code></pre>&#xA;",7819964,"",,"",,2018-11-06T11:41:00,"","",,3,,,
36441364,2,,36437717,2016-04-06T04:12:29,,0,,"<p>Interesting question.  There is no correct answer to your question without understanding all the details of your app, but here is some information.</p>&#xA;&#xA;<p><strong>Question:</strong>  Is it possible to do this without a local database?</p>&#xA;&#xA;<p><strong>Answer:</strong> Yes, it is possible but understand the consequences.  </p>&#xA;&#xA;<p>First, consider your goal.  You want the user to have access to the image/file in your application.  There are two main ways this can be done.</p>&#xA;&#xA;<ul>&#xA;<li>The user uploads the image/file to your server (or a binary representation of the image/file)</li>&#xA;<li>The user uploads the path to the image/file on their local machine to your server.  Whenever your app requests this image it will know where to find it on their local machines (assuming the path didn't change)</li>&#xA;</ul>&#xA;&#xA;<p>As you can imagine there are a number of consequences with either, but that is a bit off topic for this question.   </p>&#xA;&#xA;<p><strong>Question:</strong> How do I persist uploads even if I close the app?</p>&#xA;&#xA;<p><strong>Answer:</strong>  This will be dependent on how you handle the first part, but overall this is a much easier task.  This could be easily accomplished using a front-end framework like jQuery, Angular, or many others.  What you will want to do is query your database for the users current collection of images/files, and then for each image/file render it in a particular way on the page.  The actual code for this will vary greatly depending on the framework your choose, but overall the idea of how to do this will be the same.  </p>&#xA;&#xA;<p><strong>Other Considerations:</strong> If you choose to store all the image/file data on your servers, this could turn into a scaling issue in the future.  What is the benefit of doing it that way instead of using one of the many local storage options built for nwjs (<a href=""https://github.com/nwjs/nw.js/wiki/Save-persistent-data-in-app"" rel=""nofollow"">storage options</a>)?  </p>&#xA;&#xA;<p>Also, not sure what OS you are running but definitely take a look in your nwjs projects folder.  If you have a mac it will most likely be located at the following path:</p>&#xA;&#xA;<ul>&#xA;<li>Users/YourName/Library/Application Support/Your_Project_Name (matches package.json name)</li>&#xA;</ul>&#xA;&#xA;<p>Many people are unaware of the built in functionality already included with nwjs and that is always a good place to start searching around.</p>&#xA;",2263572,"",,"",,2016-04-06T04:12:29,"","",,2,,,
36457633,2,,36452426,2016-04-06T16:59:18,,0,,"<p>When Web Audio API is rendering the audio is raw PCM (uncompressed) which is available in a memory buffer which gets emptied/reloaded based on buffer allocated size - You can intercept and copy this buffer into a process for downstream publication to clients</p>&#xA;&#xA;<p>save below code as an html file then in same dir serve it using</p>&#xA;&#xA;<pre><code>python -m SimpleHTTPServer&#xA;</code></pre>&#xA;&#xA;<p>point a browser at <a href=""http://localhost:8000/"" rel=""nofollow"">http://localhost:8000/</a>&#xA;and pick your new html file ... the browser must prompt to ack use of microphone ... then view your javascript console ( ctrl-shift-i ) ... here you see the 1st three elements of FFT and time domain audio array buffers ... in code search on</p>&#xA;&#xA;<p>array_time_domain</p>&#xA;&#xA;<p>which is your raw PCM audio (to be copied and sent to subscribed clients (left as an exercise for the reader ;-))  ... comment out the FFT related code if not needed to lower CPU/battery drain</p>&#xA;&#xA;<p>NOTE - the onaudioprocess callback is called repeatedly as audio is pumped through so assure your above mentioned copy process is very efficient so it completes quicker than the cycle period between audio buffer refreshes (hint Web Worker) </p>&#xA;&#xA;<p>Here I use input source audio coming from the microphone.  This inner callback rendering event loop is the same irrespective of source audio</p>&#xA;&#xA;<pre><code>&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=""Content-Type"" content=""text/html; charset=ISO-8859-1""&gt;&#xA;&lt;title&gt;capture microphone then show time &amp; frequency domain output&lt;/title&gt;&#xA;&#xA;&lt;script type=""text/javascript""&gt;&#xA;&#xA;var webaudio_tooling_obj = function () {&#xA;&#xA;    var audioContext = new AudioContext();&#xA;&#xA;    console.log(""audio is starting up ..."");&#xA;&#xA;    var BUFF_SIZE_RENDERER = 16384;&#xA;    var SIZE_SHOW = 3; // number of array elements to show in console output&#xA;&#xA;    var audioInput = null,&#xA;    microphone_stream = null,&#xA;    gain_node = null,&#xA;    script_processor_node = null,&#xA;    script_processor_analysis_node = null,&#xA;    analyser_node = null;&#xA;&#xA;    if (!navigator.getUserMedia)&#xA;        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia ||&#xA;    navigator.mozGetUserMedia || navigator.msGetUserMedia;&#xA;&#xA;    if (navigator.getUserMedia){&#xA;&#xA;        navigator.getUserMedia({audio:true}, &#xA;            function(stream) {&#xA;                start_microphone(stream);&#xA;            },&#xA;            function(e) {&#xA;                alert('Error capturing audio.');&#xA;            }&#xA;            );&#xA;&#xA;    } else { alert('getUserMedia not supported in this browser.'); }&#xA;&#xA;    // ---&#xA;&#xA;    function show_some_data(given_typed_array, num_row_to_display, label) {&#xA;&#xA;        var size_buffer = given_typed_array.length;&#xA;        var index = 0;&#xA;&#xA;        console.log(""__________ "" + label);&#xA;&#xA;        if (label === ""time"") {&#xA;&#xA;            for (; index &lt; num_row_to_display &amp;&amp; index &lt; size_buffer; index += 1) {&#xA;&#xA;                var curr_value_time = (given_typed_array[index] / 128) - 1.0;&#xA;&#xA;                console.log(curr_value_time);&#xA;            }&#xA;&#xA;        } else if (label === ""frequency"") {&#xA;&#xA;            for (; index &lt; num_row_to_display &amp;&amp; index &lt; size_buffer; index += 1) {&#xA;&#xA;                console.log(given_typed_array[index]);&#xA;            }&#xA;&#xA;        } else {&#xA;&#xA;            throw new Error(""ERROR - must pass time or frequency"");&#xA;        }&#xA;    }&#xA;&#xA;    function process_microphone_buffer(event) {&#xA;&#xA;        var i, N, inp, microphone_output_buffer;&#xA;&#xA;        microphone_output_buffer = event.inputBuffer.getChannelData(0); // just mono - 1 channel for now&#xA;    }&#xA;&#xA;    function start_microphone(stream){&#xA;&#xA;        gain_node = audioContext.createGain();&#xA;        gain_node.connect( audioContext.destination );&#xA;&#xA;        microphone_stream = audioContext.createMediaStreamSource(stream);&#xA;        microphone_stream.connect(gain_node); &#xA;&#xA;        script_processor_node = audioContext.createScriptProcessor(BUFF_SIZE_RENDERER, 1, 1);&#xA;        script_processor_node.onaudioprocess = process_microphone_buffer;&#xA;&#xA;        microphone_stream.connect(script_processor_node);&#xA;&#xA;        // --- enable volume control for output speakers&#xA;&#xA;        document.getElementById('volume').addEventListener('change', function() {&#xA;&#xA;            var curr_volume = this.value;&#xA;            gain_node.gain.value = curr_volume;&#xA;&#xA;            console.log(""curr_volume "", curr_volume);&#xA;        });&#xA;&#xA;        // --- setup FFT&#xA;&#xA;        script_processor_analysis_node = audioContext.createScriptProcessor(2048, 1, 1);&#xA;        script_processor_analysis_node.connect(gain_node);&#xA;&#xA;        analyser_node = audioContext.createAnalyser();&#xA;        analyser_node.smoothingTimeConstant = 0;&#xA;        analyser_node.fftSize = 2048;&#xA;&#xA;        microphone_stream.connect(analyser_node);&#xA;&#xA;        analyser_node.connect(script_processor_analysis_node);&#xA;&#xA;        var buffer_length = analyser_node.frequencyBinCount;&#xA;&#xA;        var array_freq_domain = new Uint8Array(buffer_length);&#xA;        var array_time_domain = new Uint8Array(buffer_length);&#xA;&#xA;        console.log(""buffer_length "" + buffer_length);&#xA;&#xA;        script_processor_analysis_node.onaudioprocess = function() {&#xA;&#xA;            // get the average for the first channel&#xA;            analyser_node.getByteFrequencyData(array_freq_domain);&#xA;            analyser_node.getByteTimeDomainData(array_time_domain);&#xA;&#xA;            // draw the spectrogram&#xA;            if (microphone_stream.playbackState == microphone_stream.PLAYING_STATE) {&#xA;&#xA;                show_some_data(array_freq_domain, SIZE_SHOW, ""frequency"");&#xA;                show_some_data(array_time_domain, SIZE_SHOW, ""time""); // store this to record to aggregate buffer/file&#xA;            }&#xA;        };&#xA;    }&#xA;&#xA;}(); //  webaudio_tooling_obj = function()&#xA;&#xA;&lt;/script&gt;&#xA;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;    &lt;p&gt;Volume&lt;/p&gt;&#xA;    &lt;input id=""volume"" type=""range"" min=""0"" max=""1"" step=""0.1"" value=""0.0""/&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",147175,"",147175,"",2016-04-06T17:51:54,2016-04-06T17:51:54,"","",,8,,,
36544219,2,,36477778,2016-04-11T09:02:21,,0,,"<p>I managed to track down a pre-compiled version of ffmpeg-sumo which fixed all the videoplayers, so that seems to be the issue for sure. Thanks, google!</p>&#xA;",906805,"",,"",,2016-04-11T09:02:21,"","",,0,,,
36354392,2,,35810586,2016-04-01T10:49:13,,1,,"<p>This is a known problem. It is because JQuery auto-senses the presence of node.js - Electron adds a node.js context to the browser so JQuery gets confused.</p>&#xA;&#xA;<p>The best approach is to install JQuery via npm, use <a href=""http://electron.atom.io/docs/v0.37.3/tutorial/using-native-node-modules/#how-to-install-native-modules"" rel=""nofollow""><code>electron-rebuild</code></a> then change your html file to look like:</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=""en""&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=""utf-8""&gt;&#xA;  &lt;meta http-equiv=""X-UA-Compatible"" content=""IE=edge""&gt;&#xA;  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;&#xA;  &lt;title&gt;My Electron App&lt;/title&gt;&#xA;&#xA;  &lt;link href=""stylesheets/main.css"" rel=""stylesheet"" type=""text/css""&gt;&#xA;    &lt;link href=""./node_modules/bootstrap/dist/css/bootstrap.css"" rel=""stylesheet"" type=""text/css""&gt;&#xA;&#xA;  &lt;script src=""helpers/context_menu.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""helpers/external_links.js""&gt;&lt;/script&gt;&#xA;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;  &lt;div class=""container""&gt;&#xA;    &lt;h1 id=""greet""&gt;&lt;/h1&gt;&#xA;    &lt;p class=""subtitle""&gt;&#xA;      Welcome to &lt;a href=""http://electron.atom.io"" class=""js-external-link""&gt;Electron&lt;/a&gt; app running on this magnificent &lt;strong id=""platform-info""&gt;&lt;/strong&gt; machine.&#xA;    &lt;/p&gt;&#xA;    &lt;p class=""subtitle""&gt;&#xA;      You are in &lt;strong id=""env-name""&gt;&lt;/strong&gt; environment.&#xA;    &lt;/p&gt;&#xA;        &lt;div class=""jumbotron""&gt;&#xA;            &lt;h1&gt;Bootstrap Test&lt;/h1&gt;&#xA;            &lt;p&gt;&#xA;                Some content that should be in a Bootstrap ""jumotron"" box.&#xA;                If it isn't, check your html code to make sure that the Bootstrap css is loaded.&#xA;                Also check the dev console in the app to look for errors.&#xA;            &lt;/p&gt;&#xA;        &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;script&gt;window.$ = window.jQuery = require('jquery');&lt;/script&gt;&#xA;    &lt;script src=""app.js""&gt;&lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>This is a standard boilerplate but with the special JQuery loader script and app.js loader moved to after that in case you are doing anything in your normal app script that requires jquery - for example, loading Twitter Bootstrap can now be done by using npm to install bootstrap, doing <code>electron-rebuild</code>, then using this in your app.js:</p>&#xA;&#xA;<p><code>import bootstrap from 'bootstrap';</code></p>&#xA;",1309986,"",,"",,2016-04-01T10:49:13,"","",,0,,,
36369496,2,,36369462,2016-04-02T05:18:02,,1,,<p>im guessing that the <code>this</code> in your function <code>init</code> is not what you are looking for. <code>this</code> point to the function but not the polymer object.&#xA;try passing the original <code>this</code> variable into <code>init</code> or just rewrite <code>init</code> into es6 arrows function.</p>&#xA;,4699228,"",,"",,2016-04-02T05:18:02,"","",,1,,,
36434319,2,,36424763,2016-04-05T18:33:10,,1,,"<p>It doesn't look like there is a clean way to do this using the target attribute of the anchor tag. With some JavaScript you could capture the anchor's click event and use loadURL on the webview to change the page. There are definitely more elegant ways of doing this, but this works:</p>&#xA;&#xA;<pre><code>var webview = document.getElementsByName('content_frame')[0];&#xA;var bound = false;&#xA;webview.addEventListener(""dom-ready"", function() {&#xA;    if (bound) return;&#xA;    bound = true;               &#xA;    var anchors = document.getElementsByTagName(""a"");&#xA;    for (var a = 0; a &lt; anchors.length; a++) {&#xA;        var anchor = anchors[a];&#xA;        if (anchor.getAttribute('target') == 'content_frame') {&#xA;            anchor.addEventListener('click', function (e) {&#xA;                e.preventDefault();&#xA;                webview.loadURL(e.srcElement.href);                &#xA;            });&#xA;        }&#xA;    }                                &#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You will, however, have to provide the protocol according to the documentation here: <a href=""http://electron.atom.io/docs/v0.37.4/api/web-view-tag/#webviewloadurlurl-options"" rel=""nofollow"">http://electron.atom.io/docs/v0.37.4/api/web-view-tag/#webviewloadurlurl-options</a>: </p>&#xA;&#xA;<blockquote>&#xA;  <p>Loads the url in the webview, the url must contain the protocol prefix, e.g. the http:// or file://.</p>&#xA;</blockquote>&#xA;",3399439,"",3399439,"",2016-04-05T18:39:50,2016-04-05T18:39:50,"","",,1,,,
36440739,2,,32290967,2016-04-06T03:03:43,,1,,"<p>This is currently not possible, since there is no decent <code>ffmpeg</code> library for node.js. Meaning, there are only such that abstract the CLI. However it is possible to compile and link <code>ffmpeg</code> as node native addon, which simply no-one seems to have done yet. So the advice, unfortunately, would be to write this kind of abstraction and include the lib into your electron build</p>&#xA;",3580261,"",,"",,2016-04-06T03:03:43,"","",,1,,,
36464232,2,,36315668,2016-04-06T23:44:05,,1,,"<p>Not certain what the root of the issue was however I was able to get everything to work by moving the file to Dropbox. I still had to set <code>NODE_TLS_REJECT_UNAUTHORIZED=0</code> and <code>CSC_LINK</code> needed to be set without quotes:</p>&#xA;&#xA;<p>Success:&#xA;<code>SET CSC_LINK=https://www.dropbox.com/s/path/to/file.p12?dl=1</code></p>&#xA;&#xA;<p>Failed:&#xA;<code>SET CSC_LINK=""https://www.dropbox.com/s/path/to/file.p12?dl=1""</code></p>&#xA;&#xA;<p>A link to the issue discussion on electron-builder GitHub can be found here: <a href=""https://github.com/electron-userland/electron-builder/issues/291"" rel=""nofollow"">https://github.com/electron-userland/electron-builder/issues/291</a></p>&#xA;",113474,"",,"",,2016-04-06T23:44:05,"","",,0,,,
36511096,2,,36379295,2016-04-08T23:51:44,,1,,"<p>I was using <a href=""http://photonkit.com/"" rel=""nofollow"">PhotonKit</a> as my CSS framework. This framework uses a flexbox for layout. </p>&#xA;&#xA;<p>After replacing PhotonKit with Bootstrap the issue with the text breaking in between table cells was resolved. I believe that this was directly caused by chromium not dealing with the flexbox layout for printing properly.</p>&#xA;",364174,"",,"",,2016-04-08T23:51:44,"","",,0,,,
36380187,2,,36377614,2016-04-03T00:16:36,,3,,"<p>According to the electron docs, the require collision can be overridden using this code before the angular and systemjs polyfills:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    window.nodeRequire = require;&#xA;    delete window.require;&#xA;    delete window.exports;&#xA;    delete window.module;&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>More info here: <a href=""http://electron.atom.io/docs/v0.37.3/faq/electron-faq/"" rel=""nofollow"">http://electron.atom.io/docs/v0.37.3/faq/electron-faq/</a></p>&#xA;",2182142,"",,"",,2016-04-03T00:16:36,"","",,0,,,
36394455,2,,36324748,2016-04-04T04:11:55,,3,,"<p>Figured it out. Pretty simple actually. I replaced the <code>&lt;script&gt;</code> tag in the HTML file with this:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    require(""../scripts/ApplicationView"");&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Works like a charm! Now I just need to figure out why JQuery isn't working properly...</p>&#xA;",4364461,"",,"",,2016-04-04T04:11:55,"","",,0,,,
36527758,2,,36527253,2016-04-10T08:52:30,,4,,"<p>You can't use fat-arrow functions just because they are ""cool and convenient""-- they have different semantics than normal functions. Specifically, they share a lexical <code>this</code> with their containing scope, instead of creating a new <code>this</code>-- and in a React component which will be in a module, <a href=""https://github.com/babel/babelify/issues/37"" rel=""nofollow"">the outer <code>this</code> will be <code>undefined</code></a>.</p>&#xA;",938516,"",,"",,2016-04-10T08:52:30,"","",,2,,,
36337552,2,,32637368,2016-03-31T15:22:38,,6,,"<p>I got same problem here with my electron app</p>&#xA;&#xA;<p>I tried <code>mainWindow.setMenu(null);</code> but it didn't work</p>&#xA;&#xA;<p>but I noticed that when app is running, there was an electron icon show in the dock which is your app</p>&#xA;&#xA;<p>I think maybe this is the point to cause the problem here</p>&#xA;&#xA;<p>just give it a try</p>&#xA;&#xA;<pre><code>app.dock.hide();&#xA;</code></pre>&#xA;&#xA;<p><strong>Notice: it's an os x only method (<a href=""https://electronjs.org/docs/api/app#appdockhide-macos"" rel=""nofollow noreferrer"">documentation</a>)</strong></p>&#xA;&#xA;<p>there you go</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/pSfMH.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pSfMH.jpg"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>after hide dock icon, you app no longer have default functions of ApplicationMenu or dockMenu, such as Quit, About, Hide etc...</p>&#xA;&#xA;<p>so you can consider about give your app a <a href=""http://electron.atom.io/docs/v0.37.3/api/tray/#tray"" rel=""nofollow noreferrer"">Tray</a></p>&#xA;",5762091,"",5589126,"",2018-10-09T08:20:47,2018-10-09T08:20:47,"","",,0,,,
36434558,2,,36423183,2016-04-05T18:43:55,,6,,"<p>You can use data urls to accomplish this:</p>&#xA;&#xA;<pre><code>mainWindow.loadURL(""data:text/html,&lt;p&gt;Hello, World!&lt;/p&gt;"");&#xA;</code></pre>&#xA;",3399439,"",,"",,2016-04-05T18:43:55,"","",,1,,,
36549645,2,,36546860,2016-04-11T13:08:28,,24,,"<p><em>Ok, after some research <a href=""https://github.com/systemjs/systemjs/blob/8703bf0f93c20a6e6a7ad976a5a49a0c4cedc2ec/lib/core.js#L138"" rel=""noreferrer"">#L138</a> I have found the solution</em></p>&#xA;&#xA;<p>You can use <code>import</code> as before</p>&#xA;&#xA;<pre><code>import * as child from 'child_process';&#xA;&#xA;var foo: child.ChildProcess = child.exec('foo.sh');&#xA;console.log(typeof foo.on);&#xA;</code></pre>&#xA;&#xA;<p>But you should configure <code>SystemJS</code> to map the module to <code>NodeJS</code>.</p>&#xA;&#xA;<pre><code>System.config({&#xA;  map: {&#xA;    'child_process': '@node/child_process'&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><em>That's it!</em></p>&#xA;",2436109,"",734289,"",2019-02-08T03:20:45,2019-02-08T03:20:45,"","",,19,,,
36555868,2,,36548228,2016-04-11T17:58:06,,77,,"<p>From the <a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md"">remote</a> docs:</p>&#xA;&#xA;<blockquote>&#xA;  <p>In Electron, GUI-related modules (such as dialog, menu etc.) are only available in the main process, not in the renderer process. In order to use them from the renderer process, the ipc module is necessary to send inter-process messages to the main process.With the remote module, you can invoke methods of the main process&#xA;  object without explicitly sending inter-process messages, similar to&#xA;  Java's RMI. An example of creating a browser window from a renderer&#xA;  process:</p>&#xA;&#xA;<pre><code>const remote = require('electron').remote;&#xA;const BrowserWindow = remote.BrowserWindow;&#xA;&#xA;var win = new BrowserWindow({ width: 800, height: 600 });&#xA;win.loadURL('https://github.com');&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<p>Basically the <code>remote</code> module makes it easy to do stuff normally restricted to the main process in a render process without lots of manual ipc messages back and forth. </p>&#xA;&#xA;<p>So, in a renderer process, instead of:</p>&#xA;&#xA;<pre><code>const ipc = require('electron').ipcRenderer;&#xA;ipc.send('show-dialog', { msg: 'my message' });&#xA;ipc.on('dialog-shown', () =&gt; { /*do stuff*/ });&#xA;</code></pre>&#xA;&#xA;<p>(And then code in the main to do stuff in response to those messages).</p>&#xA;&#xA;<p>You can just do this all in the renderer: </p>&#xA;&#xA;<pre><code>const remote = require('electron').remote;&#xA;const dialog = remote.require('dialog')&#xA;&#xA;dialog.showErrorBox('My message', 'hi.');&#xA;</code></pre>&#xA;&#xA;<p>The ipc module is not explicitly required (although it's happening for you behind the scenes). Not to say the two are mutually exclusive. </p>&#xA;&#xA;<blockquote>&#xA;  <p>One further question when using remote. Is it possible to access a&#xA;  function that exists in the main process rather than a module ?</p>&#xA;</blockquote>&#xA;&#xA;<p>I think what you're really asking is: how can I share code between main/renderer processes and how do I require a module in the renderer? </p>&#xA;&#xA;<p>EDIT: You can just require it like normal. An edge case of this is if your renderer window's current URL isn't pointed to a local file (not loaded using file://). If you're loading a remote URL, your require path needs to be absolute or you can use remote like I said below.</p>&#xA;&#xA;<p>OLD:</p>&#xA;&#xA;<p>This is another use case for <code>remote</code>. For example:</p>&#xA;&#xA;<pre><code>remote.require('./services/PowerMonitor.js')&#xA;</code></pre>&#xA;&#xA;<p>Note that using remote like that causes your code to be run in the context of the main process. That might have it's uses but I would be careful.</p>&#xA;&#xA;<p>Built-in node modules or <code>electron</code> be required like normal:</p>&#xA;&#xA;<pre><code>require('electron')&#xA;require('fs')&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>Can I access global variables from the renderer?</p>&#xA;</blockquote>&#xA;&#xA;<p>Yes.</p>&#xA;&#xA;<pre><code>//in main&#xA;global.test = 123;&#xA;//in renderer&#xA;remote.getGlobal('test') //=&gt; 123&#xA;</code></pre>&#xA;",1397311,"",1397311,"",2016-05-16T17:59:10,2016-05-16T17:59:10,"","",,10,,,
36528413,2,,36515099,2016-04-10T10:11:23,,-2,,"<p>Not really, but that's OK.</p>&#xA;&#xA;<p>I doubt that there are many desktop apps which consist solely of an executable. Typically you will have lots of resource files. Electron is just the same: it comes with a 'single executable' file that starts Electron and many additional files. When you use electron-packager you get a single executable that starts your app but it is bundled with lots of resource files (like your Javascript code). I suppose you could try and use some kind of bin packer to bundle everything into a single binary, but why do you want to do that? Most apps consist of many files and folders and have no issue with it.</p>&#xA;",2493332,"",,"",,2016-04-10T10:11:23,"","",,4,,,
37318227,2,,37317818,2016-05-19T08:46:53,,0,,"<p>After a quick experiment... it would appear if the script explicitly loads up with System, it magically works:</p>&#xA;&#xA;<p>typescript: </p>&#xA;&#xA;<pre><code>export class AppWindow&#xA;{  &#xA;  constructor()&#xA;  {&#xA;    var remote = require('electron').remote;&#xA;&#xA;    document.getElementById(""close-btn"").addEventListener(""click"", function (e) {&#xA;      var window: Electron.BrowserWindow = remote.getCurrentWindow();&#xA;      window.close();&#xA;    });&#xA;  }&#xA;}&#xA;var appWindow:AppWindow = new AppWindow()&#xA;</code></pre>&#xA;&#xA;<p>which when compiled to [es6, System]: </p>&#xA;&#xA;<pre><code>System.register([], function(exports_1, context_1) {&#xA;    ""use strict"";&#xA;    var __moduleName = context_1 &amp;&amp; context_1.id;&#xA;    var AppWindow, appWindow;&#xA;    return {&#xA;        setters:[],&#xA;        execute: function() {&#xA;            class AppWindow {&#xA;                constructor() {&#xA;                    var remote = require('electron').remote;&#xA;    ...&#xA;</code></pre>&#xA;&#xA;<p>...works perfectly fine. </p>&#xA;",1657476,"",1657476,"",2016-05-19T08:53:35,2016-05-19T08:53:35,"","",,0,,,
37411568,2,,37403439,2016-05-24T10:57:12,,0,,"<p>Finally, I reached my expectation. Firstly, I imported my module at main.js by using require() method. Secondly, I used ipcMain and ipcRender to create communication channel between main process and render process. </p>&#xA;&#xA;<p>My modules is independent of main.js so I still need to import Electron module normally.</p>&#xA;",219205,"",,"",,2016-05-24T10:57:12,"","",,0,,,
37476690,2,,37132006,2016-05-27T06:52:30,,0,,"<p>this is bug and a workaround is provided on github : <a href=""https://github.com/electron-userland/electron-prebuilt/issues/69#issuecomment-164636460"" rel=""nofollow"">Source</a></p>&#xA;&#xA;<p>Here is the workaround:</p>&#xA;&#xA;<pre><code>rm -rf ~/.electron/&#xA;rm -rf ~/.atom/&#xA;npm cache clear&#xA;npm install&#xA;</code></pre>&#xA;",4221433,"",,"",,2016-05-27T06:52:30,"","",,0,,,
37479939,2,,37475555,2016-05-27T09:33:51,,0,,"<p>If you wish to access symbols defined in one Node module from another you have to export them via <a href=""https://nodejs.org/dist/latest-v6.x/docs/api/modules.html#modules_module_exports"" rel=""nofollow""><code>module.exports</code></a>:</p>&#xA;&#xA;<pre><code>// renderer.js&#xA;function doit() {&#xA;  // ...&#xA;}&#xA;module.exports.doit = doit;&#xA;</code></pre>&#xA;&#xA;<p>And load the module via <code>require</code>:</p>&#xA;&#xA;<pre><code>// menu.js&#xA;const { doit } = require('./renderer');&#xA;// OR: const doit = require('./renderer').doit;&#xA;&#xA;var template = [&#xA;    {&#xA;        label: 'Test',&#xA;        submenu: [&#xA;            {&#xA;                label: 'Something',&#xA;                click() {&#xA;                    doit();&#xA;                }&#xA;            }&#xA;        ]   &#xA;    }&#xA;];&#xA;</code></pre>&#xA;&#xA;<p>This and much more is covered in the <a href=""https://nodejs.org/dist/latest-v6.x/docs/api/modules.html"" rel=""nofollow"">Node API docs</a>.</p>&#xA;",1259938,"",,"",,2016-05-27T09:33:51,"","",,1,,,
37282245,2,,37282202,2016-05-17T16:58:10,,1,,"<p>Try modifying your ""start"" script to look like this:</p>&#xA;&#xA;<pre><code>scripts: { &#xA; ""start"": ""start npm run electron &amp;&amp; npm run watch"",&#xA; ""watch"": ""webpack --watch --config config/webpack.prod.js --progress --profile --bail"",&#xA; ""electron"": ""electron ./src/app""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In windows command console, you can use the start command to bring up a new console window automatically. Anything following the start command will be executed in the new window. </p>&#xA;",3658148,"",,"",,2016-05-17T16:58:10,"","",,0,,,
37309527,2,,37292292,2016-05-18T20:29:12,,1,,"<p>Debugging doesn't work for NW 0.13+. Please follow <a href=""https://youtrack.jetbrains.com/issue/WEB-18588"" rel=""nofollow"">WEB-18588</a> for updates</p>&#xA;",2274212,"",,"",,2016-05-18T20:29:12,"","",,0,,,
37311254,2,,37310666,2016-05-18T22:44:25,,1,,"<p>The <a href=""https://github.com/louischatriot/nedb/"" rel=""nofollow"">doc</a> says</p>&#xA;&#xA;<blockquote>&#xA;  <p>If you specify a filename, the database will be persistent, and automatically select the best storage method available (IndexedDB, WebSQL or localStorage) depending on the browser. </p>&#xA;</blockquote>&#xA;",4483102,"",,"",,2016-05-18T22:44:25,"","",,0,,,
37319050,2,,37316414,2016-05-19T09:25:09,,1,,"<p>If you're using Electron 1.1.0 and don't have VS2015 installed then you might be missing the <a href=""https://www.microsoft.com/en-us/download/details.aspx?id=48145"" rel=""nofollow"">VC++2015 runtime</a>.</p>&#xA;",1259938,"",,"",,2016-05-19T09:25:09,"","",,2,,,
37320855,2,,37319456,2016-05-19T10:42:42,,1,,"<p>Its a bug in <code>electron 1.1.0</code></p>&#xA;&#xA;<p>Hope they will resolve it asap.</p>&#xA;&#xA;<p><strong>Workaround</strong></p>&#xA;&#xA;<ol>&#xA;<li><p>Go to this link <a href=""https://www.microsoft.com/en-in/download/details.aspx?id=48145"" rel=""nofollow"">Visual C++ Redistributable for Visual Studio 2015&#xA;</a></p></li>&#xA;<li><p>Download it and install it (x86/x64) accordingly</p></li>&#xA;<li><p>Go to c:\windows\system32</p></li>&#xA;<li><p>Find <code>VCRUNTIME140.dll MSVCP140.dll</code> and paste in the root of your distribution app</p></li>&#xA;</ol>&#xA;&#xA;<p>Now your applicaiton will run.</p>&#xA;",4221433,"",,"",,2016-05-19T10:42:42,"","",,0,,,
37412190,2,,37109041,2016-05-24T11:25:07,,1,,"<p>The following format worked (as @user861594 specified):</p>&#xA;&#xA;<pre><code>options.addArguments(""&lt;Key&gt;=&lt;value&gt;"");&#xA;</code></pre>&#xA;&#xA;<p>However, the issue is that the chromedriver cannot take arguments in camelCase format. After the developers modified the syntax of the cli args from camelCase to hyphens, the above solution worked.</p>&#xA;&#xA;<p>e.g. </p>&#xA;&#xA;<pre><code>options.addArguments(""electron-port=5000"");&#xA;options.addArguments(""webpack-port=3000"");&#xA;options.addArguments(""access-token=12345‌​6789"");&#xA;</code></pre>&#xA;",1960423,"",,"",,2016-05-24T11:25:07,"","",,0,,,
37435265,2,,37416172,2016-05-25T11:06:23,,1,,"<p>I got it to work with the following <code>package.json</code>:</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""app4"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""description"": """",&#xA;  ""main"": ""index.html"",&#xA;  ""scripts"": {&#xA;    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1""&#xA;  },&#xA;  ""single-instance"": true,&#xA;  ""package"": "".json"",&#xA;  ""window"": {&#xA;    ""title"": ""app4"",&#xA;    ""toolbar"": false&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I'm actually not sure what specific property which I removed/added to made it to work. Then I zipped it to <code>package.nw</code> and put in the same folder as <code>nw.exe</code> to run it.</p>&#xA;",1267304,"",,"",,2016-05-25T11:06:23,"","",,0,,,
37327949,2,,37327673,2016-05-19T15:35:28,,2,,"<p>The following makes the variable ""electron"" reference what is returned from the require function:</p>&#xA;&#xA;<pre><code>const electron = require(""electron"")&#xA;</code></pre>&#xA;&#xA;<p>The following is called a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"" rel=""nofollow"">Destructuring assignment</a> and makes the variable ""app"" reference whatever the property ""app"" of electron is referencing:</p>&#xA;&#xA;<pre><code>const {app} = electron;&#xA;</code></pre>&#xA;&#xA;<p>It is the equivalent of writing:</p>&#xA;&#xA;<pre><code>const app = electron.app;&#xA;</code></pre>&#xA;",4245061,"",,"",,2016-05-19T15:35:28,"","",,0,,,
37475731,2,,37397195,2016-05-27T05:47:30,,2,,"<p>Cookies are not persistent if you do not give them <code>expirationDate</code></p>&#xA;&#xA;<pre><code>let cookie = {&#xA;            url: 'http://www.drutas.com',&#xA;            name: 'userDetailsGoogle',&#xA;            value: JSON.stringify(userDetailsGoogle),&#xA;            expirationDate: 2093792393999&#xA;        };&#xA;</code></pre>&#xA;&#xA;<p>If you give them <code>expirationDate</code> then cookies will persist</p>&#xA;",4221433,"",,"",,2016-05-27T05:47:30,"","",,0,,,
37456516,2,,37455368,2016-05-26T09:15:47,,3,,"<p>Built-in modules that are not directly available in the renderer process (such as <code>session</code>) can be accessed via IPC, the <a href=""https://github.com/electron/electron/blob/v1.1.3/docs/api/remote.md"" rel=""nofollow""><code>remote</code></a> module provides a simple way to do that (but you should be aware of its limitations). So you should be able to get your code working in the renderer process by simply changing the first line to:</p>&#xA;&#xA;<pre><code>const session = require('electron').remote.session;&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-05-26T09:15:47,"","",,1,,,
37350944,2,,37348821,2016-05-20T15:58:18,,4,,<p>Update Electron to <code>v1.1.1</code> (<code>npm install electron-prebuilt@latest --save-dev</code>) and that should hopefully solve your issue (which is probably that you're missing the VC++2015 runtime). Installing <code>electron-prebuilt</code> globally isn't going to fix anything.</p>&#xA;,1259938,"",,"",,2016-05-20T15:58:18,"","",,1,,,
37355170,2,,37327045,2016-05-20T20:17:06,,4,,"<p>You're very, very close.  One of the more recent updates is using Nightmare in a more promise-y way.  This means you don't have to handle the <code>.evaluate()</code> callback yourself, the results are passed down the chain.  Your second example, slightly tweaked:</p>&#xA;&#xA;<pre><code>nightmare = require('nightmare')();&#xA;nightmare.goto('http://example.com');&#xA;&#xA;var p1=1,&#xA;    p2=2;&#xA;&#xA;nightmare&#xA;  .evaluate( function(param1, param2){&#xA;        return param1 + param2;&#xA;     }, p1, p2)&#xA;  .then(function(result){&#xA;    console.log(result); //prints 3&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>It's recommended you use <code>.then()</code>, but if you <em>really</em> want to use <code>.run()</code>, you can:</p>&#xA;&#xA;<pre><code>nightmare = require('nightmare')();&#xA;nightmare.goto('http://example.com');&#xA;var p1=1,&#xA;    p2=2;&#xA;&#xA;nightmare&#xA;  .evaluate( function(param1, param2){&#xA;        return param1 + param2;&#xA;     }, p1, p2)&#xA;  .run(function(err, result){&#xA;    console.log(result);&#xA;  });&#xA;</code></pre>&#xA;",1139700,"",,"",,2016-05-20T20:17:06,"","",,6,,,
37451257,2,,37396157,2016-05-26T03:50:56,,4,,"<p>I wasn't able to locate a out-of-the-box solution for you, but you hint at the answer to your problem in your question. user32.dll is accessible from node.js/electron using the node-ffi.</p>&#xA;&#xA;<p>To install node-ffi you need node-gyp and all of its dependencies on Windows. See <a href=""https://github.com/nodejs/node-gyp#installation"" rel=""nofollow"">https://github.com/nodejs/node-gyp#installation</a></p>&#xA;&#xA;<p>Next you need to do the following:</p>&#xA;&#xA;<pre><code>npm install ffi&#xA;npm install electron-rebuild&#xA;.\node_modules\.bin\electron-rebuild.cmd&#xA;</code></pre>&#xA;&#xA;<p>That last one is to rebuild the native binaries for Electron.</p>&#xA;&#xA;<p>Put the following chunk of code in your Electron application:</p>&#xA;&#xA;<pre><code>var FFI = require('ffi');&#xA;&#xA;function TEXT(text){&#xA;  return new Buffer(text, 'ucs2').toString('binary');&#xA;}&#xA;&#xA;var user32 = new FFI.Library('user32', {&#xA;  'FindWindowW': ['int', ['string', 'string']],&#xA;  'ShowWindow': ['int', ['int', 'int']]&#xA;});&#xA;&#xA;var handle = user32.FindWindowW(null, TEXT('Untitled - Notepad'));&#xA;console.log(handle);&#xA;user32.ShowWindow(handle, 0);&#xA;</code></pre>&#xA;&#xA;<p>Launch notepad and make sure the window title is 'Untitled - Notepad'. If you launch your Electron app the window should hide, but the process remains. I've posted a video that demonstrates that this does work: <a href=""https://youtu.be/4thydneqtyQ"" rel=""nofollow"">https://youtu.be/4thydneqtyQ</a></p>&#xA;&#xA;<p>As for the second half of your question...</p>&#xA;&#xA;<p>You'll need some way to identify which Window you want to hide. If you can use the Window title then the above method will work. </p>&#xA;&#xA;<p>If you cannot then you'll need to have some other way to evaluate the Window via the Win32 API and make the determination. You could use EnumWindows (<a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms633497(v=vs.85).aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/windows/desktop/ms633497(v=vs.85).aspx</a>) via FFI to get every window and then use other functions to inspect it and make the determination.</p>&#xA;&#xA;<p>If you provide exactly how you plan to differentiate I'll see if I can find a specific solution for it. Otherwise my suggestion is to research how to do it via user32.dll using C# or C++ and then translate the result to Electron using FFI.</p>&#xA;",3399439,"",,"",,2016-05-26T03:50:56,"","",,9,,,
37460955,2,,36004694,2016-05-26T12:31:47,,4,,"<p>You don't need to package a webserver, PHP has its standalone internal webserver since PHP 5.4. Also, you can migrate your database to sqlite, then you don't need a database. The only thing you need is a standalone version of PHP, that you can download on php.net website.&#xA;For a working example of PHP application inside electron, see <a href=""https://github.com/garak/electron-symfony"" rel=""nofollow"">https://github.com/garak/electron-symfony</a></p>&#xA;",369194,"",,"",,2016-05-26T12:31:47,"","",,1,,,
37349344,2,,37339866,2016-05-20T14:27:34,,5,,"<p>As suggested in a comment to my question by @jantimon, the solution is to use <code>global.require</code>:</p>&#xA;&#xA;<pre><code>require(""fs"").readdirSync(this.path).forEach(file =&gt; {&#xA;  let myModule = global.require(path.join(this.path, file));&#xA;  // do stuff with myModule&#xA;});&#xA;</code></pre>&#xA;",772859,"",,"",,2016-05-20T14:27:34,"","",,0,,,
37395273,2,,37392737,2016-05-23T15:45:44,,6,,"<p>You can use <a href=""https://github.com/electron/electron/blob/v1.1.1/docs/api/shell.md#shellopenitemfullpath"" rel=""noreferrer""><code>shell.openItem()</code></a> to open a Word file in Word (assuming Word is the default application for that file extension). Failing that you can always fall back to launching any application you want via Node's <a href=""https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html"" rel=""noreferrer"">child process API</a>.</p>&#xA;",1259938,"",,"",,2016-05-23T15:45:44,"","",,6,,,
37467587,2,,37466917,2016-05-26T17:34:37,,6,,"<p>I'm assuming you're using some form of <code>*NIX</code>.</p>&#xA;&#xA;<p><code>./</code> is your current directory. So, for example, using <code>cd ./examplefolder</code> is perfectly valid.</p>&#xA;&#xA;<p><code>../</code> is the parent directory. So, for example, you can use <code>cd ../</code> to go up a level in the directory hierarchy.</p>&#xA;&#xA;<p><code>~</code> is your home directory. So, if you're at <code>~/example/example2/example3</code>, you can use <code>cd ~/</code> to return to home quickly.</p>&#xA;&#xA;<p>If you're using nodejs, simply using the command <code>node yourfilehere.js</code> will execute it, if your current directory is the one you're launching the file from. Using <code>node ../yourfilehere.js</code> works just as well... but then again, so does <code>cd ../</code> and <code>node yourfilehere.js</code>.</p>&#xA;",6377071,"",1241334,"",2016-05-26T19:30:07,2016-05-26T19:30:07,"","",,2,,,
37356385,2,,37343150,2016-05-20T21:51:44,,9,,"<p>At first I was creating an executable for the purpose of testing, but that's actually not necessary.</p>&#xA;&#xA;<p>You can see that Spectron has an <a href=""https://github.com/electron/spectron/blob/master/test/example-test.js"" rel=""noreferrer"">example test</a> and a <a href=""https://github.com/electron/spectron/blob/master/test/global-setup.js"" rel=""noreferrer"">global setup</a>.</p>&#xA;&#xA;<p>The example passes an option called <a href=""https://github.com/electron/spectron/blob/master/test/example-test.js#L17"" rel=""noreferrer"">args</a>, and that’s exactly what you are missing. This is what I am doing:</p>&#xA;&#xA;<pre><code>  var appPath = path.resolve(__dirname, '../'); //require the whole thing&#xA;  var electronPath = path.resolve(__dirname, '../node_modules/.bin/electron');&#xA;&#xA;  beforeEach(function() {&#xA;    myApp = new Application({&#xA;      path: electronPath,&#xA;      args: [appPath], // pass args along with path&#xA;    });&#xA;&#xA;   return myApp.start().then(function() {&#xA;     assert.equal(myApp.isRunning(), true);&#xA;     chaiAsPromised.transferPromiseness = myApp.transferPromiseness;&#xA;     return myApp;&#xA;   });&#xA; });&#xA;</code></pre>&#xA;&#xA;<p>My test sits in ./tests/app-test.js. The above works for me.</p>&#xA;",5114498,"",,"",,2016-05-20T21:51:44,"","",,2,,,
37327006,2,,36286592,2016-05-19T14:57:04,,18,,"<blockquote>&#xA;  <p>There is conflict, because <em>Electron</em> use <strong>commonjs</strong> module resolving, but your code already compiled with <strong>systemjs</strong> rules.</p>&#xA;</blockquote>&#xA;&#xA;<h2>Two solutions:</h2>&#xA;&#xA;<p><strong>Robust way</strong>. Register object <code>require</code> returned:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    System.set('electron', System.newModule(require('electron')));&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>This is the best, because <code>renderer/init.js</code> script loads that module on start. SystemJS have to take it only, not loads.</p>&#xA;&#xA;<p><strong>Alternative way</strong>. Use dirty trick with declaration.</p>&#xA;&#xA;<p>Get electron instance inside <code>index.html</code>:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    var electron = require('electron');&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Declare it inside your <code>typescript</code> file this way:</p>&#xA;&#xA;<pre><code>declare var electron: any;&#xA;</code></pre>&#xA;&#xA;<p>Use it with freedom )</p>&#xA;&#xA;<pre><code>electron.ipcRenderer.send(...)&#xA;</code></pre>&#xA;",311655,"",311655,"",2016-05-21T08:44:29,2016-05-21T08:44:29,"","",,5,,,
37480521,2,,32621988,2016-05-27T10:01:06,,730,,"<p><strong>A better and more generic solution IMO:</strong>          </p>&#xA;&#xA;<pre><code>&lt;!-- Insert this line above script imports  --&gt;&#xA;&lt;script&gt;if (typeof module === 'object') {window.module = module; module = undefined;}&lt;/script&gt;&#xA;&#xA;&lt;!-- normal script imports etc  --&gt;&#xA;&lt;script src=""scripts/jquery.min.js""&gt;&lt;/script&gt;    &#xA;&lt;script src=""scripts/vendor.js""&gt;&lt;/script&gt;    &#xA;&#xA;&lt;!-- Insert this line after script imports --&gt;&#xA;&lt;script&gt;if (window.module) module = window.module;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>Benefits</strong></p>&#xA;&#xA;<ul>&#xA;<li>Works for both browser and electron with the same code</li>&#xA;<li>Fixes issues for ALL 3rd-party libraries (not just jQuery) without having to specify each one</li>&#xA;<li>Script Build / Pack Friendly (i.e. Grunt / Gulp all scripts into vendor.js)</li>&#xA;<li>Does NOT require <code>node-integration</code> to be false</li>&#xA;</ul>&#xA;&#xA;<p>source <a href=""https://github.com/electron/electron/issues/254#issuecomment-183483641"" rel=""noreferrer"">here</a></p>&#xA;",3097649,"",2664160,"",2018-11-26T11:04:41,2018-11-26T11:04:41,"","",,9,,,
44508374,2,,44508080,2017-06-12T20:41:02,,1,,"<p>I found a similar question here: <a href=""https://stackoverflow.com/questions/38258655/angular-2-how-to-use-settimeout"">Angular 2, how to use setTimeout?</a></p>&#xA;&#xA;<p>Tried it out in a simple <a href=""http://plnkr.co/edit/Mebrb8JS2lk318nHSCJF"" rel=""nofollow noreferrer"">plnkr</a> and the solution is to change <code>function() { /* ... */ }</code> to an arrow function <code>() =&gt; { /* ... */ }</code>. These arrow functions will properly set the context of your block.</p>&#xA;&#xA;<p>Your problem was that <code>this</code> inside the <code>function()</code> is an isolated scope and not your class as you were expecting. For change detection angular2 and above is very intuitive compared to angularjs : it does not work with a digest cycle anymore and will rarely require your input.</p>&#xA;&#xA;<p>If you have prior JS experience you can imagine <code>() =&gt; {}</code> as</p>&#xA;&#xA;<pre><code>var _this = this;&#xA;function () {&#xA;  var this = _this;&#xA;  /* code */&#xA;}&#xA;</code></pre>&#xA;",557552,"",,"",,2017-06-12T20:41:02,"","",,0,,,
44549307,2,,44548388,2017-06-14T15:47:17,,1,,"<p>Could possibly be with a browser compatiablity issue make sure whatever browser your using is up to date. </p>&#xA;&#xA;<p>Another way of doing this would be to state the file types of what you are willing to accept. </p>&#xA;&#xA;<p>Some links that could be useful: </p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/19107685/safari-input-type-file-accept-video-ignores-mp4-files"">Safari &lt;input type=&quot;file&quot; accept=&quot;video/*&quot;&gt; ignores mp4 files</a></p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/17293861/how-to-make-input-type-file-accept-only-these-types"">How to make &lt;input type=&quot;file&quot;/&gt; accept only these types?</a></p>&#xA;",7500779,"",,"",,2017-06-14T15:47:17,"","",,0,,,
44576998,2,,44555243,2017-06-15T21:04:42,,1,,"<p>Please use <a href=""https://github.com/electron-userland/electron-builder/wiki/Options#Config-extraResources."" rel=""nofollow noreferrer"">extraResources</a></p>&#xA;&#xA;<pre><code> ..........&#xA;</code></pre>&#xA;",1910191,"",,"",,2017-06-15T21:04:42,"","",,0,,,
44577247,2,,43788193,2017-06-15T21:23:10,,5,,"<p>You need to <code>return</code> the results of your callback functions.</p>&#xA;&#xA;<pre><code>it('should minimize the application', () =&gt; {&#xA;  return this.app.client.click('.minimize').then(() =&gt; {&#xA;    return this.app.client.browserWindow.isVisible().then((isVisible) =&gt; {&#xA;      return expect(isVisible).to.be.equal(true);&#xA;    });&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Alternatively, drop the wrapping curly braces, and the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"" rel=""noreferrer"">arrow function</a> will return the result automatically.</p>&#xA;&#xA;<pre><code>it('should minimize the application', () =&gt;&#xA;  this.app.client.click('.minimize').then(() =&gt; &#xA;    this.app.client.browserWindow.isVisible().then((isVisible) =&gt; &#xA;      expect(isVisible).to.be.equal(true);&#xA;    );&#xA;  );&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>I don't think that's quite as readable, but that might just be me.</p>&#xA;",32139,"",32139,"",2018-01-21T19:11:28,2018-01-21T19:11:28,"","",,0,,,
44584028,2,,44543664,2017-06-16T08:04:43,,1,,"<p>What you see on the picture is that Chrome opens a popup for handle authentication event.</p>&#xA;&#xA;<p>However, Electron doesn't make such popup by default, as it stated in the documentation of <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#event-login"" rel=""nofollow noreferrer""><code>'login'</code> event</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>The default behavior is to cancel all authentications, to override this you should prevent the default behavior with <code>event.preventDefault()</code> and call <code>callback(username, password)</code> with the credentials.</p>&#xA;</blockquote>&#xA;&#xA;<p>This means, you should handle <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#event-login"" rel=""nofollow noreferrer""><code>'login'</code> event of your webContents</a> manually and open a popup window by yourself or do whatever you want.</p>&#xA;",2550156,"",,"",,2017-06-16T08:04:43,"","",,0,,,
44584274,2,,44288990,2017-06-16T08:18:45,,0,,"<p>For some reason the child_process <code>spawn</code> didn't run the command so I swapped it out for <code>exec</code> like this: </p>&#xA;&#xA;<pre><code>exec(updateExe + ' ' + args[0], function (err, stdout, stderr) {&#xA;    done();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>But I needed to put double quotes around the target as well because it has two words:</p>&#xA;&#xA;<pre><code>run(['--createShortcut=""' + target + '"" --process-start-args=showSplash'], app.quit);&#xA;</code></pre>&#xA;",6577664,"",,"",,2017-06-16T08:18:45,"","",,0,,,
44587901,2,,44402454,2017-06-16T11:14:38,,0,,"<p>Configuring Nginx and SSL with Node.js for HTTPS</p>&#xA;&#xA;<p>Please go through the below link and follow all steps</p>&#xA;&#xA;<p><a href=""https://www.sitepoint.com/configuring-nginx-ssl-node-js/"" rel=""nofollow noreferrer"">Link</a></p>&#xA;&#xA;<p>Note: It is mandatory to have Domain Name forwarding request to your working Node IP Address</p>&#xA;",6633337,"",,"",,2017-06-16T11:14:38,"","",,0,,,
44610488,2,,44589478,2017-06-17T23:54:18,,1,,<pre><code>electron-rebuild&#xA;</code></pre>&#xA;&#xA;<p>is needed for native modules.</p>&#xA;,6770669,"",,"",,2017-06-17T23:54:18,"","",,0,,,
44618764,2,,44617713,2017-06-18T19:32:25,,2,,"<p>You should have a look at <a href=""https://www.sqlite.org/"" rel=""nofollow noreferrer"">sqlite</a>. Similarly to ms access it will store all your data in file + has all the power of SQL. </p>&#xA;&#xA;<p>Here is a sample <a href=""https://github.com/sjmelia/electron-boilerplate-sqlite"" rel=""nofollow noreferrer"">boilerplate</a>.</p>&#xA;",1035889,"",1035889,"",2017-06-18T19:46:50,2017-06-18T19:46:50,"","",,0,,,
44627997,2,,42148183,2017-06-19T10:21:34,,2,,"<p>I solve this by first getting the target of the click using e.target. Then, depending on that, I call the corresponding contextmenu. If target hit is not in the list of targets for my app, I use a default contextmenu.</p>&#xA;&#xA;<pre><code>window.addEventListener(&#xA;    ""contextmenu"",&#xA;    e =&gt; {&#xA;        e.preventDefault();&#xA;        if (e.target.id === 'fullscr'){&#xA;&#xA;        console.log(e &amp;&amp; e.target);&#xA;&#xA;       // e.preventDefault();&#xA;        mymenu.popup(remote.getCurrentWindow());&#xA;        }else{&#xA;            editmenu.popup(remote.getCurrentWindow());&#xA;        }&#xA;        console.log(e.which);&#xA;    },&#xA;    false&#xA;);  &#xA;</code></pre>&#xA;",5071978,"",6499716,"",2017-06-19T10:41:23,2017-06-19T10:41:23,"","",,0,,,
44661067,2,,44641426,2017-06-20T19:00:54,,1,,<p>To get this to work I just had to point my global Buffer value to the node buffer module as so: <code>const Buffer = window.require('buffer').Buffer</code></p>&#xA;,8185526,"",,"",,2017-06-20T19:00:54,"","",,0,,,
44682589,2,,44674349,2017-06-21T17:27:46,,0,,<p>You can get the instance of the current BrowserWindow pretty easy:</p>&#xA;&#xA;<pre><code>const remote = require('electron').remote    &#xA;const win = remote.getCurrentWindow()&#xA;</code></pre>&#xA;&#xA;<p>Use <code>win.focus()</code> to bring that window the front.</p>&#xA;,2016129,"",,"",,2017-06-21T17:27:46,"","",,0,,,
44684808,2,,44683536,2017-06-21T19:32:38,,1,,"<p>You need to use single quote string and put double quotes around your file path.</p>&#xA;&#xA;<p>One exemple of this taken from node js documentation :</p>&#xA;&#xA;<p><a href=""https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"" rel=""nofollow noreferrer"">https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback</a></p>&#xA;&#xA;<pre><code>exec('""/path/to/test file/test.sh"" arg1 arg2');&#xA;//Double quotes are used so that the space in the path is not interpreted as&#xA;//multiple arguments&#xA;</code></pre>&#xA;&#xA;<p>EDIT: </p>&#xA;&#xA;<p>if you can, avoid requiring module in function call, it can slow down your application and it's a bad practice most of the time.</p>&#xA;&#xA;<pre><code>// put all required modules on top of your page&#xA;var childProcess = require('child_process');&#xA;&#xA;function cpSixHundred() {&#xA;   childProcess.exec('""file:\\\\LSC-SA-NAS1\\Departments\\Information Technology\\Software\\Zebra Label Printer Reset Counters""', function(err, stdout, stderr) {&#xA;      if (err) {&#xA;         // Ooops.&#xA;         // console.log(stderr);&#xA;         return console.log(err);&#xA;      }&#xA;&#xA;      // Done.&#xA;      console.log(stdout);&#xA;   });&#xA;}&#xA;</code></pre>&#xA;",3595813,"",3595813,"",2017-06-21T19:39:03,2017-06-21T19:39:03,"","",,0,,,
44466566,2,,44465964,2017-06-09T20:55:34,,1,,"<p>The easiest way to start with API requests is to use <a href=""https://github.com/mzabriskie/axios"" rel=""nofollow noreferrer"">axios</a>.</p>&#xA;&#xA;<p>After setting up the project (you can follow <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md"" rel=""nofollow noreferrer"">Getting Started</a>), follow these steps:</p>&#xA;&#xA;<ol>&#xA;<li>Install Axios <code>npm install --save axios</code></li>&#xA;<li>Create <code>main.js</code> in your project's folder.</li>&#xA;<li>Load <code>main.js</code> inside <code>index.html</code> somewhere before <code>&lt;/body&gt;</code>.</li>&#xA;<li><p>Put the JavaScript code inside <code>main.js</code></p>&#xA;&#xA;<pre><code>const axios = require('axios');&#xA;&#xA;function fetchData() {&#xA;  // you might need the next line, depending on your API provider.&#xA;  axios.defaults.headers.post['Content-Type'] = 'application/json';&#xA;  axios.post('api.example.com', {/* here you can pass any parameters you want */})&#xA;  .then((response) =&gt; {&#xA;    // Here you can handle the API response&#xA;    // Maybe you want to add to your HTML via JavaScript?&#xA;    console.log(response);&#xA;  })&#xA;  .catch((error) =&gt; {&#xA;    console.error(error);&#xA;  });&#xA;}&#xA;&#xA;&#xA;// call the function to start executing it when the page loads inside Electron.&#xA;fetchData();&#xA;</code></pre></li>&#xA;</ol>&#xA;",408271,"",,"",,2017-06-09T20:55:34,"","",,1,,,
44509983,2,,44350702,2017-06-12T23:09:56,,0,,"<p>You are on the right track. Another way you could do it is set nodeIntegration to false and preload a js file, which will get run in the BrowserWindow context and be able to access the window object once the process loaded event fires. The preload javascript file has full node integration just for itself. </p>&#xA;&#xA;<p>I used it to make a TiddlyFox handler so I could use the TiddlyFox saver that comes in TiddlyWiki in my Electron app. Here is the code for it. It is actually very simple.</p>&#xA;&#xA;<p><a href=""https://github.com/Arlen22/TiddlyWiki-Electron"" rel=""nofollow noreferrer"">https://github.com/Arlen22/TiddlyWiki-Electron</a></p>&#xA;&#xA;<p>If you want to load a TiddlyWiki datafolder directly into Electron, you can try loading this HTML file. Node Integration needs to be set to true in <code>new BrowserWindow(...)</code></p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;!doctype html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&lt;/head&gt;&#xA;&lt;body class=""tc-body""&gt;&#xA;&lt;script&gt;&#xA;global.$tw = global.require(""./boot/bootprefix.js"").bootprefix();&#xA;global.$tw.boot.argv = ['./editions/server'];&#xA;global.$tw = require(""./boot/boot.js"").TiddlyWiki(global.$tw);&#xA;&lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",258482,"",,"",,2017-06-12T23:09:56,"","",,1,,,
44517278,2,,44505506,2017-06-13T09:19:35,,0,,"<p>For now i am using a cheap dirty hack , sending the id of the webview to the main process and then using <code>webContents.executeJavascript</code> to execute the following script <code>document.getElementById(""'+id+'"").print(silent: true)</code> . Now atleast what to print is under the control of mainProcess . &#xA;If anybody has a cleaner way to do this , please do let me know . &#xA;Thanks in advance.</p>&#xA;",5445754,"",,"",,2017-06-13T09:19:35,"","",,1,,,
44597014,2,,44594630,2017-06-16T19:54:34,,1,,"<p>The right answer is to follow this tutorial: <code>https://competenepal.com/lets-make-a-facebook-login-system-in-electron-that-actually-works/</code></p>&#xA;&#xA;<p>I only had to implement this part:</p>&#xA;&#xA;<pre><code>var options = {&#xA;  client_id: '',&#xA;  scopes: ""public_profile"",&#xA;  redirect_uri: ""https://www.facebook.com/connect/login_success.html""&#xA;};&#xA;var authWindow = new BrowserWindow({ width: 450, height: 300, show: false,&#xA;  parent: mainWindow, modal: true, webPreferences: {nodeIntegration:false} });&#xA;var facebookAuthURL = ""https://www.facebook.com/v2.8/dialog/oauth?client_id="" + options.client_id + ""&amp;redirect_uri="" + options.redirect_uri + ""&amp;response_type=token,granted_scopes&amp;scope="" + options.scopes + ""&amp;display=popup"";&#xA;authWindow.loadURL(facebookAuthURL);&#xA;authWindow.show();&#xA;authWindow.webContents.on('did-get-redirect-request', function (event, oldUrl, newUrl) {&#xA;  var raw_code = /access_token=([^&amp;]*)/.exec(newUrl) || null;&#xA;  var access_token = (raw_code &amp;&amp; raw_code.length &gt; 1) ? raw_code[1] : null;&#xA;  var error = /\?error=(.+)$/.exec(newUrl);&#xA;&#xA;  if(access_token) {&#xA;    FB.setAccessToken(access_token);&#xA;    FB.api('/me', { fields: ['id', 'name', 'picture.width(800).height(800)'] }, function (res) {&#xA;      console.log('response is:', res);&#xA;    });&#xA;    authWindow.close();&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",1303826,"",,"",,2017-06-16T19:54:34,"","",,1,,,
44619153,2,,44589278,2017-06-18T20:17:12,,8,,"<p><code>app.quit()</code> is the correct function for doing this. </p>&#xA;&#xA;<p>Quote from the documentation (<a href=""https://github.com/electron/electron/blob/master/docs/api/app.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/app.md</a>)</p>&#xA;&#xA;<blockquote>&#xA;  <p>Try to close all windows. The <code>before-quit</code> event will be emitted first. If all windows are successfully closed, the <code>will-quit</code> event will be emitted and by default the application will terminate.</p>&#xA;  &#xA;  <p>This method guarantees that all <code>beforeunload</code> and unload event handlers&#xA;  are correctly executed. It is possible that a window cancels the&#xA;  quitting by returning <code>false</code> in the <code>beforeunload</code> event handler.</p>&#xA;</blockquote>&#xA;&#xA;<p>You could correct the behavior in Windows if you close the app directly on button click, instead of closing the window -> listening to the event -> and quitting the app</p>&#xA;&#xA;<pre><code>const app = require('electron').remote.app;&#xA;const close = document.getElementById('myCloseButton');&#xA;close.on('click',function(){&#xA;  app.quit();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Note: <code>app.exit()</code> also exists but it does not send the events mentioned above, so it should only be used if necessary.</p>&#xA;",5115009,"",5115009,"",2018-10-02T13:55:38,2018-10-02T13:55:38,"","",,1,,,
44467648,2,,44465669,2017-06-09T22:48:50,,4,,"<p>Try</p>&#xA;&#xA;<pre><code>data: JSON.stringify({name: ""John""})&#xA;</code></pre>&#xA;&#xA;<p>instead.</p>&#xA;",5580267,"",,"",,2017-06-09T22:48:50,"","",,2,,,
44607166,2,,44589328,2017-06-17T16:59:13,,6,,"<p>Change <code>Menu.setApplicationMenu(mainMenu);</code> to <code>mainWindow.setMenu(mainMenu)</code>.</p>&#xA;&#xA;<p>The <code>Menu.setApplicationMenu</code> sets the Menu for <strong>all</strong> BrowserWindows, while <code>win.setMenu</code> sets it only for the window it is called on.</p>&#xA;",2016129,"",,"",,2017-06-17T16:59:13,"","",,2,,,
44683176,2,,44681880,2017-06-21T18:01:42,,2,,"<p>Window you create trought react, must stay in browser window.</p>&#xA;&#xA;<p>Call new child window so you get new window that can be dragged across &#xA;desktop.</p>&#xA;&#xA;<pre><code>Window.open(url, [options], [callback])&#xA;</code></pre>&#xA;&#xA;<p><a href=""http://docs.nwjs.io/en/latest/References/Window/#windowopenurl-options-callback"" rel=""nofollow noreferrer"">See documentation</a></p>&#xA;",8195700,"",,"",,2017-06-21T18:01:42,"","",,2,,,
44607365,2,,44575316,2017-06-17T17:20:03,,0,,<p>Something like this could work:</p>&#xA;&#xA;<pre><code>const {app} = (process.type === 'renderer' ? require('electron').remote : require('electron'))&#xA;</code></pre>&#xA;&#xA;<p>I think that should help to make your code main and renderer proof. Of course you have to change the rest of your code accordingly. <code>const appname = electron.remote.app.getName()</code> would just become <code>const appname = app.getName()</code></p>&#xA;,2016129,"",,"",,2017-06-17T17:20:03,"","",,3,,,
44639152,2,,44639102,2017-06-19T20:13:31,,0,,"<p>The correct way would be to render your navigation page and then inside your navigation page, render out your tab panes.  Ideally you would only call <code>ReactDOM.render</code> once. Something like this:</p>&#xA;&#xA;<pre><code>import React from 'react';&#xA;import ReactDOM from 'react-dom';&#xA;&#xA;import NavigationLeft from '../Components/Layout/Navigation.jsx';&#xA;&#xA;window.onload = function(){&#xA;  // ideally you pick a div and render your whole application rather than bits and pieces of it. &#xA;  ReactDOM.render(&lt;NavigationLeft /&gt;, document.getElementById('left'));&#xA;}&#xA;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;...yada yada&#xA;&lt;script&gt;&#xA;        // install babel hooks in the renderer process&#xA;        require('babel-register');&#xA;    &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;script&gt;&#xA;        require('./Containers/MainApp');&#xA;    &lt;/script&gt;&#xA;&#xA;    &lt;div class=""wrapper"" id=""left""&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;&#xA;<p><code>NavigationLeft.jsx</code></p>&#xA;&#xA;<pre><code>import React from 'react';&#xA;import-your-tabs from 'wherever';&#xA;&#xA;export default class NavigationLeft extends React.Component {&#xA;  render() {&#xA;    return (&#xA;        &lt;div class=""wrapper""&gt;&#xA;        &lt;div id=""viewNavigationLeft"" class=""sidebar"" data-color=""blue"" &gt;&lt;/div&gt;&#xA;        &lt;div id=""viewMainPanel"" class=""main-panel""&gt;&#xA;            &lt;div id=""viewTabPagesTest"" class=""tab-content""&gt;&#xA;                &lt;TabPane1 /&gt;&#xA;                &lt;TabPane2 /&gt;&#xA;                .&#xA;                .&#xA;                .&#xA;                &lt;TabPane7 /&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;    )&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><code>TabPane1.jsx</code></p>&#xA;&#xA;<pre><code>'use babel';&#xA;&#xA;import React from 'react';&#xA;&#xA;export default class TabPane1 extends React.Component {&#xA; render(){&#xA;    return(&#xA;        &lt;div className=""tab-pane"" id=""tabPanel1""&gt;&#xA;            yada yada blah blah tab content for tabPane1&#xA;        &lt;/div&gt;&#xA;    )&#xA;  }&#xA;}&#xA;</code></pre>&#xA;",7637814,"",7637814,"",2017-06-19T20:26:05,2017-06-19T20:26:05,"","",,3,,,
44589386,2,,44578022,2017-06-16T12:34:34,,4,,"<p>You've got to use <code>auxclick</code> (<a href=""https://developer.mozilla.org/en-US/docs/Web/Events/auxclick"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/Events/auxclick</a>) it handles all non-left clicks and is the key event for creating the electron window via middle mouse. This code is for the <strong>render</strong> process within a preload script or enabled <code>nodeIntegration</code></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { shell } = require('electron')&#xA;&#xA;function auxclickHandler(event) {&#xA;    if (e.target.localName == 'a') {&#xA;        event.preventDefault();&#xA;        shell.openExternal(url);&#xA;    }&#xA;}&#xA;&#xA;document.addEventListener('auxclick', callback, false)&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>An <em>alternative</em> if you want to redirect <strong>any</strong> type of link to the internal browser. This code is for the <strong>main process</strong></p>&#xA;&#xA;<p>Here a fiddle for Electron Fiddle <a href=""https://gist.github.com/Hammster/ce4fac29deaf3600665d9534e3a32317"" rel=""nofollow noreferrer"">https://gist.github.com/Hammster/ce4fac29deaf3600665d9534e3a32317</a></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { shell } = require('electron')&#xA;&#xA;mainWindow.webContents.on('new-window', function (event, url) {&#xA;    event.preventDefault()&#xA;    shell.openExternal(url)&#xA;})&#xA;</code></pre>&#xA;",5115009,"",5115009,"",2019-09-25T14:18:19,2019-09-25T14:18:19,"","",,5,,,
44533162,2,,44532621,2017-06-13T23:35:43,,3,,"<p>Your primary issue is that single file components are compiled and the compiled script is very unlikely to reside in the same directory as the current location as your image. Your second issue is that you are not assigning the background image to your <code>div</code> correctly. You should use CSS.</p>&#xA;&#xA;<p>I would suggest that you make an <code>images</code> directory in the root of your electron application (or assets or static or whatever you want to call it). Then, you can reference files in that directory using the <code>file://</code> protocol.</p>&#xA;&#xA;<p>Second, I would recommend you define a CSS class and use that. So, in your single file component, define this style section:</p>&#xA;&#xA;<pre><code>&lt;style&gt;&#xA;  .background {&#xA;    background: url('file:///images/benjamin-child-17946.jpg') no-repeat center center fixed; &#xA;    background-size: cover&#xA;  }&#xA;&lt;/style&gt;&#xA;</code></pre>&#xA;&#xA;<p>And on your div just use the class.</p>&#xA;&#xA;<pre><code>&lt;div class=""login background""&gt;&#xA;</code></pre>&#xA;&#xA;<p>Finally, you could also use webpack's <code>url-loader</code> to load the file as a <code>dataUrl</code> but I would recommend that as a more advance exercise and just stick with the simple for now.</p>&#xA;&#xA;<p><strong>Edit</strong></p>&#xA;&#xA;<p>I created a project from scratch using <a href=""https://github.com/SimulatedGREG/electron-vue"" rel=""nofollow noreferrer"">electron-vue</a> which uses webpack and I did run into an error with the above using the <code>file://</code> protocol, that I don't run into when not using webpack. With the above template, instead of using &#xA;<code>file:///images/benjamin-child-17946.jpg</code>, put the file in the <code>static</code> directory and use <code>/static/benjamin-child-17946.jpg</code>. That allows <code>vue-loader</code> to work properly. </p>&#xA;&#xA;<p>If you are not using <code>electron-vue</code>, then your webpack configuration may be different.</p>&#xA;",38065,"",38065,"",2017-06-14T01:48:19,2017-06-14T01:48:19,"","",,8,,,
44504957,2,,44498907,2017-06-12T17:02:31,,1,,"<p>The path to the script is not valid <code>//platform.twitter.com/widgets.js</code> is not explicit in electron even though it is valid browsers simply add <code>https:</code> to it.</p>&#xA;&#xA;<pre><code>&lt;blockquote class=""twitter-tweet"" data-lang=""en""&gt;&lt;p lang=""en"" dir=""ltr""&gt;Members of the UK Parliament openly condemn US &lt;a href=""//twitter.com/hashtag/Trump?src=hash""&gt;#Trump&lt;/a&gt; regime. &lt;a href=""//twitter.com/hashtag/BDStheUS?src=hash""&gt;#BDStheUS&lt;/a&gt; &lt;a href=""t.co/yY5lr3k8tl""&gt;pic.twitter.com/yY5lr3k8tl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Anonymous  (@YourAnonCentral) &lt;a href=""//twitter.com/YourAnonCentral/status/826556764753625088""&gt;January 31, 2017&lt;/a&gt;&lt;/blockquote&gt;&#xA;&lt;script async src=""https://platform.twitter.com/widgets.js"" charset=""utf-8""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Also in case of React you probably need to load the script function once the component is mounted</p>&#xA;&#xA;<pre><code>componentDidMount: function() {&#xA;  twttr.widgets.load()&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Answer</strong></p>&#xA;&#xA;<p>If you inject an embed script on flow, it won't be able to load it. Because the react load content based on render(), so you can load embed in componentDidMount(). </p>&#xA;",5115009,"",4595674,"",2017-06-14T08:02:48,2017-06-14T08:02:48,"","",,9,,,
54129961,2,,54030043,2019-01-10T13:39:16,,0,,"<p>The best solution I tried to your problem is the following code based upon <a href=""https://stackoverflow.com/a/54129628/4706711"">answer</a>:</p>&#xA;&#xA;<pre><code>const crypto = require('crypto');&#xA;const spawn = require('threads').spawn;&#xA;&#xA;/**&#xA; * Generate the keys and the diffie hellman key agreement object.&#xA; * @param {Integer} p The prime for Diffie Hellman Key Generation&#xA; * @param {Integer} g The generator for Diffie Hellman Key Exchange&#xA; * @param {Function} callback The callback in order to provide the keys and the diffie-hellman Object.&#xA; */&#xA;const createSelfKey = (p, g, callback) =&gt; {&#xA;&#xA;  const thread = spawn(function(input, done) {&#xA;    const cryptot = require('crypto');&#xA;    console.log(input);&#xA;    const pVal = input.p;&#xA;    const gVal = input.g;&#xA;    let dh = null;&#xA;&#xA;    if (pVal &amp;&amp; gVal) {&#xA;      dh = cryptot.createDiffieHellman(pVal, gVal);&#xA;    } else {&#xA;      dh = cryptot.createDiffieHellman(2048);&#xA;    }&#xA;&#xA;    const pubKey = dh.generateKeys();&#xA;    const signaturePubKey = dh.generateKeys();&#xA;    done({ prime: dh.getPrime().toString('hex'), generator: dh.getGenerator().toString('hex'), pubKey, signaturePubKey});&#xA;  });&#xA;&#xA;  return thread.send({p,g}).on('message', (response) =&gt; {&#xA;    callback( crypto.createDiffieHellman(response.prime, response.generator), response.pubKey, response.signaturePubKey);&#xA;    thread.kill();&#xA;  }).on('error', (err)=&gt;{&#xA;    console.error(err);&#xA;  }).on('exit', function() {&#xA;    console.log('Worker has been terminated.');&#xA;  });&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>As you can see using the <a href=""https://www.npmjs.com/package/threads"" rel=""nofollow noreferrer""><code>threads</code></a> library from npm will provide you what you need. The only negative on this approach is that you cannot pass the in-thread generated objects outside the thread's scope. Also the code that is inside the function executing the thread is an some sort of an isolated one thus you may need to re-include any library you need as you can see above.</p>&#xA;",4706711,"",,"",,2019-01-10T13:39:16,"","",,0,,,
54155508,2,,54155507,2019-01-11T23:49:56,,6,,"<p>The basic solution I went with for communicating between a main process and inside of a <code>&lt;webview&gt;</code>, is to use Webview's <a href=""https://developer.chrome.com/apps/tags/webview#type-ContentWindow"" rel=""nofollow noreferrer""><code>ContentWindow.postMessage()</code></a> method. This is very similar to <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"" rel=""nofollow noreferrer""><code>window.postMessage()</code></a>. By using <code>postMessage()</code>—specifically tracking the <code>event.source</code>—we create a communication bridge between the main process and the <code>&lt;webview&gt;</code>.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const webview = document.getElementById('your-webview-element');&#xA;&#xA;// &lt;webview&gt; Content is loaded&#xA;function contentload() {&#xA;  // The following will be injected in the webview&#xA;  const webviewInjectScript = `&#xA;      var data = {&#xA;        title: document.title,&#xA;        url: window.location.href&#xA;      };&#xA;&#xA;      function respond(event) {&#xA;        event.source.postMessage(data, '*');&#xA;      }&#xA;&#xA;      window.addEventListener(""message"", respond, false);&#xA;  `;&#xA;&#xA;  webview.executeScript({&#xA;    code: webviewInjectScript&#xA;  });&#xA;}&#xA;&#xA;// &lt;webview&gt; Loading has finished&#xA;function loadstop() {&#xA;  webview.contentWindow.postMessage(""Send me your data!"", ""*""); // Send a request to the webview&#xA;}&#xA;&#xA;// Bind events&#xA;webview.addEventListener(""contentload"", contentload);&#xA;webview.addEventListener(""loadstop"", loadstop);&#xA;window.addEventListener(""message"", receiveHandshake, false); // Listen for response&#xA;&#xA;function receiveHandshake(event) {&#xA;  // Data is accessible as event.data.*&#xA;  // This is the custom object that was injected during contentload()&#xA;  // i.e. event.data.title, event.data.url&#xA;  console.log(event.data)&#xA;&#xA;  // Unbind EventListeners&#xA;  removeListeners();&#xA;}&#xA;&#xA;// Remove all event listeners&#xA;function removeListeners() {&#xA;  webview.removeEventListener(""contentload"", contentload);&#xA;  webview.removeEventListener(""loadstop"", loadstop);&#xA;  window.removeEventListener(""message"", receiveHandshake);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>How it works (at least one way I've found):</p>&#xA;&#xA;<ol>&#xA;<li>Firstly, bind EventListeners from the main process to the <code>&lt;webview&gt;</code> and the window (to listen later on for a message coming from within the <code>&lt;webview&gt;</code>)</li>&#xA;<li>When the <code>&lt;webview&gt;</code> element loads a URL, it triggers <code>contentload()</code> </li>&#xA;<li><code>contentload()</code> will inject an EventListener into the <code>&lt;webview&gt;</code> and setup the data/DOM elements we want to get from inside of the <code>&lt;webview&gt;</code>.</li>&#xA;<li>Once the <code>&lt;webview&gt;</code> finishes loading, it triggers <code>loadstop()</code></li>&#xA;<li><code>loadstop()</code> will send a message to the <code>&lt;webview&gt;</code> to establish a bridge. It's important to note that here I use <code>webview.contentWindow.postMessage()</code> instead of <code>window.postMessage()</code>.</li>&#xA;<li>The <code>&lt;webview&gt;</code> responds with the data we setup on step 1</li>&#xA;<li>When the main process receives the response back (via EventListener ""message"") from the <code>&lt;webview&gt;</code>, it triggers <code>receiveHandshake()</code></li>&#xA;<li>Inside of <code>receiveHandshake()</code> you now have access the data that came from inside of the <code>&lt;webview&gt;</code>. This can be the page title—or whatever you configured in the <code>webviewInjectScript</code>.</li>&#xA;<li>Finally, I call <code>removeListeners()</code> to remove all the EventListeners we setup, but you could keep sending messages back-and-forth.</li>&#xA;</ol>&#xA;&#xA;<hr>&#xA;&#xA;<p>FYI—in the context of Electron and NWJS, the <code>&lt;webview&gt;</code> tag allows you to render websites (like an iframe), with the benefit that it runs in a separate process. This is much better for performance than a bunch of iframes. A <code>&lt;webview&gt;</code> contains a standard HTML document, the complication over say an iframe is because it runs in a separate process.</p>&#xA;&#xA;<p>There's also <a href=""https://stackoverflow.com/questions/33523171/how-can-i-access-the-dom-of-a-webview-in-electron"">another thread</a> with some other solutions, such as using IPC messages, and using the <code>preload</code> tag.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h2>UPDATED: Using a front-end framework (i.e. Vue)</h2>&#xA;&#xA;<p>There's another way to do this that's more proper for Electron. In the code below, I'm using Vue (2) and Webpack, but the key differences from the above implementation are:</p>&#xA;&#xA;<ul>&#xA;<li>Use the Electron <code>ipcRenderer</code> and <code>ipcMain</code> to send messages, instead of <code>postMessage</code></li>&#xA;<li>Load the injection script using the <code>preload</code> property of Webview, instead of using <code>executeScript()</code>. I've binded the <code>:preload</code> value to the Vue computed property (<code>injectScript</code>), which returns the path of the external <code>injectWebPageScript.js</code> file.</li>&#xA;</ul>&#xA;&#xA;<p>components/myComponent.vue</p>&#xA;&#xA;<pre><code>&lt;template&gt;&#xA;  &lt;webview ref=""frame"" class=""frame"" :preload=""injectScript""/&gt;&#xA;&lt;/template&gt;&#xA;&#xA;&lt;script&gt;&#xA;export default {&#xA;  computed: {&#xA;    injectScript() {&#xA;      const appPath = require(""electron"").remote.app.getAppPath();&#xA;      return `file://${require(""path"").resolve(&#xA;        __dirname,&#xA;        ""../../mixins/injectWebPageScript.js""&#xA;      )}`;&#xA;    }&#xA;  },&#xA;  methods: {&#xA;    mySiteLoaderScript(url) {&#xA;      const frame = this.$refs.frame;&#xA;&#xA;      // Initialize event listeners on the Webview&#xA;      addListeners();&#xA;&#xA;      // Set the URL, start loading&#xA;      frame.setAttribute(""src"", url);&#xA;&#xA;      // Bind events&#xA;      function addListeners() {&#xA;        frame.addEventListener(""dom-ready"", contentloaded);&#xA;        frame.addEventListener(""ipc-message"", receiveHandshake);&#xA;      }&#xA;&#xA;      // Remove all event listeners&#xA;      function removeListeners() {&#xA;        frame.removeEventListener(""dom-ready"", contentloaded);&#xA;        frame.removeEventListener(""ipc-message"", receiveHandshake);&#xA;      }&#xA;&#xA;      // Once webview content is loaded, request its data&#xA;      function contentloaded() {&#xA;        frame.send(""requestData"");&#xA;      }&#xA;&#xA;      // Triggered when we receive a response from the Webview&#xA;      // This is the `ipc-message` event&#xA;      function receiveHandshake(event) {&#xA;        // Only listen to replyData messages&#xA;        if (event.channel !== ""replyData"") return false;&#xA;&#xA;        const data = event.args[0];&#xA;        const title = data.title;&#xA;        const favicon = data.favicon;&#xA;&#xA;        // Remove listeners once data has been received&#xA;        removeListeners();&#xA;      }&#xA;    }&#xA;  },&#xA;  mounted() {&#xA;    this.mySiteLoaderScript(""https://stackoverflow.com"");&#xA;  }&#xA;};&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>mixins/injectWebPageScript.js</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { ipcRenderer } = require(""electron"");&#xA;&#xA;// Once the Webview's document has been loaded, notify the ipcRenderer&#xA;document.addEventListener(""DOMContentLoaded"", () =&gt; {&#xA;  ipcRenderer.on(""requestData"", () =&gt; {&#xA;    ipcRenderer.sendToHost(""replyData"", {&#xA;      title: document.title,&#xA;      url: window.location.href&#xA;    });&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",1114901,"",1114901,"",2020-01-26T11:13:34,2020-01-26T11:13:34,"","",,0,,,
54187857,2,,54185293,2019-01-14T19:21:12,,6,,"<p>Getting the window's URL is possible by using the <a href=""https://electronjs.org/docs/api/web-contents#contentsgeturl"" rel=""noreferrer"">getURL()</a> instance method of the window's <a href=""https://electronjs.org/docs/api/browser-window#winwebcontents"" rel=""noreferrer"">webContents</a> instance property:</p>&#xA;&#xA;<pre><code>let currentURL = win.webContents.getURL();&#xA;</code></pre>&#xA;",,user8022331,,user8022331,2019-01-14T21:39:52,2019-01-14T21:39:52,"","",,0,,,
54190027,2,,54189515,2019-01-14T22:17:34,,1,,<p>We were able to resolve this internally and now I feel dumb.</p>&#xA;&#xA;<p>The trick was to wrap the routing request inside <code>ngZone.run()</code>.</p>&#xA;,6775271,"",,"",,2019-01-14T22:17:34,"","",,0,,,
54191900,2,,54170269,2019-01-15T02:23:08,,1,,"<p>This is not nearly as pretty as what you want, but if you just want to customize the simple built-in About Panel for macOS, Electron does let you customize the text.</p>&#xA;&#xA;<p>You simply call <a href=""https://electronjs.org/docs/api/app#appsetaboutpaneloptionsoptions-macos"" rel=""nofollow noreferrer"">app.setAboutPanelOptions</a></p>&#xA;&#xA;<pre><code>  /*&#xA;    Here's how the ""About"" dialog is displayed: (applies to macOS only)&#xA;&#xA;    &lt;app icon&gt;&#xA;    &lt;applicationName&gt;&#xA;    &lt;applicationVersion&gt; (&lt;version&gt;)&#xA;    &lt;credits&gt;&#xA;    &lt;copyright&gt;&#xA;   */&#xA;  app.setAboutPanelOptions({&#xA;    applicationName: ""Name"", &#xA;    applicationVersion: ""App Version"",&#xA;    version: ""Version"",&#xA;    credits: ""Credits"",&#xA;    copyright: ""Copyright""&#xA;  });&#xA;</code></pre>&#xA;",272072,"",,"",,2019-01-15T02:23:08,"","",,0,,,
54196734,2,,52166377,2019-01-15T10:12:09,,0,,"<p>Wow, totally forgot about this question.&#xA;The solution was following:</p>&#xA;&#xA;<p>Update all dependencies.&#xA;Make sure, that the path to the .html / .js file is absolute and correct.</p>&#xA;&#xA;<p>An absolute path start with a <code>/</code>&#xA;For example <code>/files/index.html</code></p>&#xA;&#xA;<p>That's how it works!</p>&#xA;",,user3119231,,"",,2019-01-15T10:12:09,"","",,0,,,
54203736,2,,54018400,2019-01-15T17:10:54,,0,,"<p>After much Googling I figured out I was simply missing dependencies in my package.json. Even though they were required in node_modules folder they were not listed as a dependency in my program. </p>&#xA;&#xA;<p>Working on my Production build of Electron + Vue + Axios + Sync/Await</p>&#xA;&#xA;<pre><code>npm install --save @babel/runtime &#xA;npm install --save-dev @babel/plugin-transform-runtime&#xA;</code></pre>&#xA;&#xA;<p>And, in .babelrc, add:</p>&#xA;&#xA;<pre><code>{&#xA;    ""presets"": [""@babel/preset-env""],&#xA;    ""plugins"": [&#xA;        [""@babel/transform-runtime""]&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Got this code from this answer from <a href=""https://stackoverflow.com/questions/33527653/babel-6-regeneratorruntime-is-not-defined/53736090#53736090"">here</a></p>&#xA;",6353597,"",,"",,2019-01-15T17:10:54,"","",,0,,,
54223071,2,,54222514,2019-01-16T18:18:53,,1,,"<p>Of course I find the solution almost immediately after this.</p>&#xA;&#xA;<pre><code>var http = require('http');&#xA;  http.createServer(function (req, res) {&#xA;    res.writeHead(200, {'Content-Type': 'text/plain'});&#xA;    res.write('Hello World!');&#xA;    res.end();&#xA;  }).listen(8181);&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Just replace <code>Hello World!</code> with a JSON string showing the application is running.</p>&#xA;",2360118,"",,"",,2019-01-16T18:18:53,"","",,0,,,
54256628,2,,54255252,2019-01-18T15:06:38,,0,,"<p>I've finally found the problem. When you build your app, you need to use relative paths. Like <code>path.join(xxx)</code>. The app doesn't understand the <code>./your_path</code>.&#xA;And next problem that I've solved, if you use json file and write data inside of it, you need to have a unpacked app w/ .asar file.</p>&#xA;",9560404,"",,"",,2019-01-18T15:06:38,"","",,0,,,
54263737,2,,54263100,2019-01-19T03:08:56,,3,,"<p>The path may be relative to the html file, try doing ../../game/properties, and if that works, consider putting your main html entry point on the same level as your game directory –  </p>&#xA;&#xA;<p>Electron doesn’t require files to be structured in any special way, but organizationally might be simpler to reason about it that way so you don’t have to write long backtracking paths. </p>&#xA;&#xA;<p>It’s also how most of their examples are done, they try to make it so you can pretty much keep a typical website structure.</p>&#xA;",3546817,"",,"",,2019-01-19T03:08:56,"","",,0,,,
54284152,2,,54132634,2019-01-21T05:53:48,,0,,"<p>File filter object won't work without both: name and extensions property. So, the first call from your question should work without any issue:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>dialog.showOpenDialog({ properties: ['openFile'], filters: [{name: 'Foo&#xA;Files', extensions: ['foo']}] })&#xA;</code></pre>&#xA;&#xA;<p>Because, to select directories, you need to have <code>openDirectory</code> in <code>properties</code> array. Without that property, it shouldn't allow you to select any directory.</p>&#xA;&#xA;<p>Did you check by selecting any directory? When you try to select any directory (double click it or click on 'Open' button form system dialog), it won't select it, it will open that directory.</p>&#xA;",3339907,"",,"",,2019-01-21T05:53:48,"","",,0,,,
54287498,2,,54205638,2019-01-21T10:02:44,,4,,"<p>It should work the same way, but looks like there's a bug in Electron (<a href=""https://github.com/electron/electron/issues/15901"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/15901</a>). <s>A workaround is suggested in the comments: Set <code>autoHideMenuBar</code>-option to true when creating the BrowserWindow-object. Unfortunately that will still show the menu when alt key is pressed.</s></p>&#xA;&#xA;<p>Edit: There's a better workaround. Use <a href=""https://electronjs.org/docs/api/browser-window#winsetmenubarvisibilityvisible-windows-linux"" rel=""nofollow noreferrer""><code>BrowserWindow.setMenuBarVisibility(false)</code></a>.</p>&#xA;&#xA;<p>Alternatively, you can try Electron version 3.</p>&#xA;",10495387,"",10495387,"",2019-05-05T12:21:24,2019-05-05T12:21:24,"","",,0,,,
54291363,2,,54286828,2019-01-21T13:47:07,,0,,"<p>This computer has some problems with native popup boxes. Alert, prompt and confirm does not displayed properly. I ended up replacing it with third party pop up boxes (alertify) and it worked fine. I don't know why this happens, This is just a bypass and not a full solution, but it works. </p>&#xA;",4870919,"",,"",,2019-01-21T13:47:07,"","",,0,,,
54292007,2,,54255723,2019-01-21T14:25:28,,1,,"<p>I was able to reproduce this error with the bindings module.</p>&#xA;&#xA;<p>It seems to have alot of problems with the electron framework which can cause such behaviour.</p>&#xA;&#xA;<h1>The 'root directory' Problem</h1>&#xA;&#xA;<p>You answered this yourself with your edit of the original question, but for the sake of delivering a complete answer, I am including this too</p>&#xA;&#xA;<blockquote>&#xA;  <p>I simply start the setup.exe in my win-unpacked folder and everything goes down smoothly. Now when I move the win-unpacked folder to a different directory my app runs fine but when it starts the unzipping process it throws an error.</p>&#xA;</blockquote>&#xA;&#xA;<p>This has an interesting reason. Since your <strong>dist</strong> directory (the build destination of your project) is inside your working project, the bindings module assumes your <strong>working directory</strong> is the <strong>root directory</strong> of your <strong>built app</strong>. Thus it is able to resolve the path to your module and everything works fine. Once your built app is placed somewhere else, the bindings module isn't able to find the root directory of your app and throws the error you linked.</p>&#xA;&#xA;<h1>The 'file://' Problem</h1>&#xA;&#xA;<p>Another problem of the bindings module is handling paths with the 'file' protocol.</p>&#xA;&#xA;<p>Someone already went ahead and <a href=""https://github.com/TooTallNate/node-bindings/issues/29"" rel=""nofollow noreferrer"">created an issue</a> (+ a pull request) for this problem, so you <em>could</em> modify your local installation of this module, even though I would discourage taking such actions.</p>&#xA;&#xA;<h1>My personal advice:</h1>&#xA;&#xA;<p>The current state of the bindings module makes it unattractive for use together with the Electron framework. I heard it even has problems handling umlauts properly, so your best bet in your specific situation is to get rid of it. You could make a small local module which wraps your .node binary and makes it as easy to require as all your other node modules.</p>&#xA;&#xA;<p><a href=""https://medium.com/@arnaudrinquin/build-modular-application-with-npm-local-modules-dfc5ff047bcc"" rel=""nofollow noreferrer"">This is an amazing article about creating your own module.</a></p>&#xA;",8655257,"",,"",,2019-01-21T14:25:28,"","",,0,,,
54336917,2,,54324222,2019-01-23T22:52:25,,1,,"<p>AFIAK <code>mainWindow.setSize(width, height[, animate])</code> doesn't know about the window state (i.e. maximized or minimzed). Therefore changing the size parameters with <code>mainWindow.setSize()</code> won't effect the state of the window.</p>&#xA;&#xA;<p>As OliverRadini points out you can use <code>mainWindow.restore()</code>. The <a href=""https://electronjs.org/docs/api/browser-window#winrestore"" rel=""nofollow noreferrer"">docs</a> are pretty simple...</p>&#xA;&#xA;<blockquote>&#xA;  <p>win.restore()</p>&#xA;  &#xA;  <p>Restores the window from minimized state to its previous state.</p>&#xA;</blockquote>&#xA;&#xA;<p>So, using your code you should be able to do...</p>&#xA;&#xA;<pre><code>if (mainWindow.isMinimized()) {&#xA;    mainWindow.restore()&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Hope that helps!</p>&#xA;",1846224,"",1846224,"",2019-01-24T00:53:06,2019-01-24T00:53:06,"","",,0,,,
54180196,2,,53682719,2019-01-14T10:59:56,,2,,"<p>I was also having this same  issue, but I finally fixed it, it was actually very very easy, first of all make sure you are using auto-py-to-exe to package your app.</p>&#xA;&#xA;<p>After inserting necessary  details (script file,, extra files etc), you would see an advanced options tab probably below, click on it to expand it, look for the hidden imports label and insert ""bottle-websocket"" in the input field representing the hidden imports, that's basically all you need to do</p>&#xA;&#xA;<p>I HOPE THIS HELPS</p>&#xA;",9198885,"",,"",,2019-01-14T10:59:56,"","",,1,,,
54221579,2,,54221470,2019-01-16T16:41:02,,1,,"<p>Here is what I found:</p>&#xA;&#xA;<p>Javascript:</p>&#xA;&#xA;<pre><code>function AutoRefresh( t ) {&#xA;           setTimeout(""location.reload(true);"", t);&#xA;        }&#xA;</code></pre>&#xA;&#xA;<p>HTML:</p>&#xA;&#xA;<pre><code>&lt;body onload = ""JavaScript:AutoRefresh(5000);""&gt;&#xA;&lt;p&gt;This page will refresh every 5 seconds.&lt;/p&gt; &#xA;</code></pre>&#xA;",8667073,"",,"",,2019-01-16T16:41:02,"","",,1,,,
54241395,2,,53254089,2019-01-17T17:37:26,,1,,"<p>Quoting the relevant comments... </p>&#xA;&#xA;<blockquote>&#xA;  <blockquote>&#xA;    <p>""Well with QZ my problem was <code>RSVP is not defined</code> and with node-thermal-printer, the printer just never printed.""</p>&#xA;  </blockquote>&#xA;  &#xA;  <p>""for QZ it took all of 20secs to find this: <a href=""https://qz.io/wiki/2.0-api-override"" rel=""nofollow noreferrer"">https://qz.io/wiki/2.0-api-override</a>""</p>&#xA;</blockquote>&#xA;&#xA;<p>Posting as asolution as the comments suggest it worked.  Credits to @gilbert-gabriel for the help.</p>&#xA;&#xA;<p>The RSVP promises are enabled by default, but native JS promises are supported via:</p>&#xA;&#xA;<pre><code>qz.api.setPromiseType(resolver =&gt; new Promise(resolver));&#xA;</code></pre>&#xA;&#xA;<p>A more comprehensive example:</p>&#xA;&#xA;<pre><code>// Install dependencies:&#xA;/*&#xA;   npm install qz-tray js-sha256&#xA;*/&#xA;&#xA;// Provide API overrides and start talking to QZ Tray:    &#xA;import * as qz from 'qz-tray';&#xA;import { sha256 } from 'js-sha256';&#xA;&#xA;qz.api.setSha256Type(data =&gt; sha256(data));&#xA;qz.api.setPromiseType(resolver =&gt; new Promise(resolver));&#xA;&#xA;qz.websocket.connect()&#xA; .then(qz.printers.getDefault)&#xA; .then(printer =&gt; console.log(""The default printer is: "" + printer))&#xA; .then(qz.websocket.disconnect)&#xA; .catch(err =&gt; console.error(err));&#xA;</code></pre>&#xA;",3196753,"",,"",,2019-01-17T17:37:26,"","",,1,,,
54262989,2,,54262852,2019-01-19T00:16:59,,1,,"<p>Maybe you should try use <code>require('./js/my-module/my-module-one')</code> instead of <code>&lt;script src=""js/my-module/my-module-one.js""&gt;&lt;/script&gt;</code></p>&#xA;",8514574,"",8514574,"",2019-01-19T01:24:56,2019-01-19T01:24:56,"","",,1,,,
54279858,2,,54275760,2019-01-20T18:55:40,,0,,"<p>You can use classic Mysql with an ORM like <a href=""https://github.com/dresende/node-orm2"" rel=""nofollow noreferrer"">node-orm2</a>.If you want to use local databases, I advise you to use <strong>sqlite</strong>. It's very easy to manage and to be distributed.&#xA;<br><b>Some useful links :</b></p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://www.sqlitetutorial.net/sqlite-nodejs/"" rel=""nofollow noreferrer"">Sqlite for NodeJS with example</a></li>&#xA;<li><a href=""https://www.techiediaries.com/electron-data-persistence/"" rel=""nofollow noreferrer"">Data persitence / SQL for Electron app</a></li>&#xA;</ul>&#xA;",10230961,"",,"",,2019-01-20T18:55:40,"","",,1,,,
54331622,2,,54331433,2019-01-23T16:26:26,,1,,"<p>The line <code>document.querySelector('p').remove()</code> works, because <code>querySelector</code> returns a single <code>&lt;p&gt;</code> element which has a <code>.remove</code> method.</p>&#xA;&#xA;<p>The second line <code>document.createElement('h2')</code> creates a new <code>&lt;h2&gt;</code> element, but apparently you don't <em>add it to the DOM</em>, so the GC removes it. Try:</p>&#xA;&#xA;<pre><code>const h2 = document.createElement('h2');&#xA;h2.textContent = 'Test createElement';&#xA;document.body.appendChild(h2);&#xA;</code></pre>&#xA;&#xA;<p>See if that works (hint: It should!).</p>&#xA;",9870107,"",9870107,"",2019-01-23T16:33:57,2019-01-23T16:33:57,"","",,1,,,
54332625,2,,54323531,2019-01-23T17:29:03,,2,,"<p>There is not. Electron's main process is node.js, which doesn't support reload modules from its cache out of the box. Unless node.js have support for it, Electron will inherit same behavior.</p>&#xA;",2742189,"",,"",,2019-01-23T17:29:03,"","",,1,,,
54339492,2,,54338901,2019-01-24T04:42:43,,1,,"<blockquote>&#xA;  <p>I checked the distributable file and found the whole source code inside it, so I guess it's because it has to compile typescript every time?</p>&#xA;</blockquote>&#xA;&#xA;<p>This is not true. Current stable uses <code>electron-prebuilt-compile</code> (<a href=""https://github.com/electron-userland/electron-forge/blob/1709af0bc53bd962466dd2025672b95f2e9399cc/packages/api/core/src/util/electron-version.ts#L6"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-forge/blob/1709af0bc53bd962466dd2025672b95f2e9399cc/packages/api/core/src/util/electron-version.ts#L6</a>) which creates precompiled cache for typescript files for packaging time. Typescript source is only needed for module resolution in actual filesystem.</p>&#xA;&#xA;<blockquote>&#xA;  <p>there will be a blank screen for a while before the app actually load especially the first time</p>&#xA;</blockquote>&#xA;&#xA;<p>This requires profiling application itself to find out what is happening in meanwhile. It is possible module resolution takes long or either any js execution time's blocking, but can't tell without profiling it.</p>&#xA;",2742189,"",,"",,2019-01-24T04:42:43,"","",,1,,,
54292909,2,,51365852,2019-01-21T15:18:20,,0,,"<p>I found a practical solution that could work on all platforms:</p>&#xA;&#xA;<pre><code>    const basePath = app.getAppPath()&#xA;&#xA;    setInterval(() =&gt; {&#xA;        const path = basePath.split('/')&#xA;        const baseDir = path.slice(0, -1).join('/')&#xA;&#xA;        fs.writeFile(baseDir + '/portable.txt', '1', err =&gt; {&#xA;            if(err) {&#xA;                app.quit()&#xA;            }&#xA;        })&#xA;    }, 1000)&#xA;</code></pre>&#xA;&#xA;<p>The script above try to save a TXT file every second. If <code>fs.writeFile</code> returns an error, <code>app.quit()</code> is called closing the application.</p>&#xA;",5987361,"",,"",,2019-01-21T15:18:20,"","",,2,,,
54204116,2,,46480682,2019-01-15T17:35:17,,2,,"<h2>Use <code>electronPackagerConfig</code> key in your <code>package.json</code>.</h2>&#xA;&#xA;<p>Electron Forge uses Electron Packager under the hood and allows you to set the Electron Packager configuration in your <code>package.json</code>. </p>&#xA;&#xA;<p>Here's an extract of what mine looks like in order to sign our packaged application file: </p>&#xA;&#xA;<p><strong>package.json</strong></p>&#xA;&#xA;<pre><code>{ &#xA;  ""config"": {&#xA;    ""forge"": {&#xA;      ""electronPackagerConfig"": {&#xA;        ""osxSign"": {&#xA;          ""identity"": ""Developer ID Application: Joshua Pinter (&lt;your_key_code&gt;)""&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can see that all the Electron Packager configurations can be put under the <code>electronPackagerConfig</code> key. </p>&#xA;",293280,"",,"",,2019-01-15T17:35:17,"","",,3,,,
54215867,2,,54214340,2019-01-16T11:15:57,,2,,"<p>If you want an environment variable to be set on runtime you can either set them manually or use other tools like <code>dotenv</code> <a href=""https://www.npmjs.com/package/dotenv"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/dotenv</a></p>&#xA;&#xA;<p>But the easiest way is to set them at runtime when running the binaries. You can use either a batch script (If windows) for example:</p>&#xA;&#xA;<pre><code>setlocal&#xA;set NODE_ENV=production&#xA;.\your-binaries.exe&#xA;endlocal&#xA;</code></pre>&#xA;&#xA;<p><em>Note</em>: setlocal prevents the variable leaking any further.</p>&#xA;&#xA;<p>The one-liner version could be <code>set NODE_ENV=production &amp;&amp; .\binaries.exe</code></p>&#xA;&#xA;<p>Under linux works the same way: set variable then run.</p>&#xA;",1842548,"",1842548,"",2019-01-17T08:31:50,2019-01-17T08:31:50,"","",,9,,,
51181998,2,,46926506,2018-07-05T00:21:01,,6,,"<p>Yes. I have used this method in the past.  It brings in mongod.exe and launches it.</p>&#xA;&#xA;<p>Take a look here to see how it is done.</p>&#xA;&#xA;<p><a href=""https://github.com/nosqlclient/nosqlclient-electron/blob/master/index.js"" rel=""noreferrer"">https://github.com/nosqlclient/nosqlclient-electron/blob/master/index.js</a></p>&#xA;",7711935,"",,"",,2018-07-05T00:21:01,"","",,0,,,
51186740,2,,51136304,2018-07-05T08:34:47,,4,,"<p>Spectron with mocha is supposed to be faster.</p>&#xA;&#xA;<p>But still here is what you need.This is Java &amp; Selenium.</p>&#xA;&#xA;<pre><code>System.setProperty(""webdriver.chrome.driver"",""C:\\electron-chromedriver\\bin\\chromedriver.exe"");&#xA;ChromeOptions chromeOptions = new ChromeOptions();&#xA;chromeOptions.setBinary(""C:\\Users\\app.exe"");&#xA;chromeOptions.addArguments(""start-maximized"");&#xA;DesiredCapabilities capability = new DesiredCapabilities();&#xA;capability.setCapability(CapabilityType.BROWSER_NAME, ""Chrome"");&#xA;capability.setCapability(""chromeOptions"", chromeOptions);       &#xA;driver = new ChromeDriver(chromeOptions);  &#xA;</code></pre>&#xA;&#xA;<p>I have used the packaged electron app for binary (i.e) <strong>app.exe</strong> . </p>&#xA;&#xA;<p>I think this is what you need.    </p>&#xA;",8903949,"",8903949,"",2018-07-05T08:40:26,2018-07-05T08:40:26,"","",,0,,,
51196913,2,,51179413,2018-07-05T17:22:42,,2,,"<p>On Docker Hub, there's a whole list of <a href=""https://hub.docker.com/u/selenium/"" rel=""nofollow noreferrer"">Selenium containers</a> that are combined with browsers that you can quickly get running locally. I typically use the <a href=""https://hub.docker.com/r/selenium/standalone-chrome/"" rel=""nofollow noreferrer"">Standalone Chrome container</a> which is a version of chrome in a Docker Container with Selenium installed (not a grid just a single instance). </p>&#xA;&#xA;<p>To get it running simply make sure Docker is running and type:</p>&#xA;&#xA;<p><code>docker pull selenium/standalone-chrome</code></p>&#xA;&#xA;<p>Depending on how your local configuration is set-up you may or may not need to reference the docker container in your wdio.conf.js file as <code>http://0.0.0.0:&lt;portnumber&gt;/wd/hub</code></p>&#xA;",1302131,"",,"",,2018-07-05T17:22:42,"","",,0,,,
51215159,2,,46676170,2018-07-06T17:22:39,,1,,"<p>A much cleaner way is this</p>&#xA;&#xA;<pre><code> return app.client.waitForVisible('#test')&#xA;        .waitForEnabled('#test')&#xA;        .clearElement('#test')&#xA;        .setValue('#test', ""TEST"")&#xA;        .getValue('#test')&#xA;        .should.eventually.equal(""TEST"")&#xA;</code></pre>&#xA;",8903949,"",,"",,2018-07-06T17:22:39,"","",,0,,,
51229953,2,,51224896,2018-07-08T07:59:43,,0,,<p><code>process._debugProcess</code> now works for me with Electron 5.</p>&#xA;,2715716,"",2715716,"",2019-05-19T06:40:00,2019-05-19T06:40:00,"","",,0,,,
51232879,2,,51198735,2018-07-08T14:20:54,,1,,"<p>After studied a lot I found the solution, I don't know if it's the best way, but works.&#xA;When I was executing the build for my application, in my file ""angular.json"" had the property outputPath with this way: ""outputPath"": ""dist/my-electron-app"", but to generate my windows packge I needed only ""dist"".&#xA;In this way when I execute de command:</p>&#xA;&#xA;<pre><code>""package:win"": ""npm run build &amp;&amp; cross-var electron-packager dist $npm_package_name-$npm_package_version --out=packages --platform=win32 --arch=all --overwrite ""&#xA;</code></pre>&#xA;&#xA;<p>it will generate only the folder ""app"" over my ""electron\resources\"" with the correct files, before that it generated the folder ""app/my-app""</p>&#xA;&#xA;<p>Thanks</p>&#xA;",3767352,"",,"",,2018-07-08T14:20:54,"","",,0,,,
51250352,2,,51249816,2018-07-09T16:43:31,,0,,"<p>The required params need to be sent as POST data, but you're sending them as URL query-string params.</p>&#xA;&#xA;<p>This works:</p>&#xA;&#xA;<pre><code>const url = 'https://api.steampowered.com/ISteamRemoteStorage/GetPublishedFileDetails/v1/';&#xA;&#xA;let postData = {&#xA;    itemcount: 1,&#xA;    publishedfileids: {&#xA;        0: 33&#xA;    }&#xA;};&#xA;&#xA;jQuery.post(url, postData, function() {&#xA;    console.log(arguments);&#xA;});&#xA;</code></pre>&#xA;",1898532,"",,"",,2018-07-09T16:43:31,"","",,0,,,
51268920,2,,51224587,2018-07-10T15:19:21,,0,,"<p>So, just for the record:</p>&#xA;&#xA;<p>I fixed it by changing the changedetectionstrategy to onPush and then including this.ref.detectChanges() to the subscription of my eventEmitter.</p>&#xA;&#xA;<p>But as it still didn't work on one Dom element, namely bs-sortable, I found this comment:&#xA;<a href=""https://github.com/valor-software/ngx-bootstrap/issues/1716"" rel=""nofollow noreferrer"">https://github.com/valor-software/ngx-bootstrap/issues/1716</a>&#xA;In a nutshell: Don't just change the data for sortable, but manually write the change:</p>&#xA;&#xA;<p>this.sortableComponent.writeValue(myList);</p>&#xA;&#xA;<p>Now everything works fine.</p>&#xA;",10046739,"",,"",,2018-07-10T15:19:21,"","",,0,,,
51281434,2,,51269434,2018-07-11T09:05:01,,0,,<p>The issue came from the webview. I modified my app to load the url directly from a BrowserWindow instead of a webview and it is working perfectly.</p>&#xA;,3235467,"",,"",,2018-07-11T09:05:01,"","",,0,,,
51288511,2,,51280091,2018-07-11T14:48:26,,0,,"<p>You need to use Modal - <a href=""https://getbootstrap.com/docs/4.0/components/modal/"" rel=""nofollow noreferrer"">https://getbootstrap.com/docs/4.0/components/modal/</a></p>&#xA;&#xA;<p>And to disable background click or force user to click button on popup yo need to use <strong>static</strong> keyword.</p>&#xA;&#xA;<p>If you opening the modal by js use:</p>&#xA;&#xA;<pre><code>$('#myModal').modal({backdrop: 'static', keyboard: false})  &#xA;</code></pre>&#xA;&#xA;<p>Or though HTML</p>&#xA;&#xA;<pre><code>&lt;button data-target=""#myModal"" data-toggle=""modal"" data-backdrop=""static"" data-keyboard=""false""&gt;&#xA;Launch demo modal &lt;/button&gt;&#xA;</code></pre>&#xA;",6444123,"",,"",,2018-07-11T14:48:26,"","",,0,,,
51291252,2,,45225798,2018-07-11T17:29:33,,1,,"<p>First, we should note that according to the <a href=""https://electronjs.org/docs/api/browser-window#event-move"" rel=""nofollow noreferrer"">official documentation</a>, there are two events, <code>move</code> and <code>moved</code>. The latter is labeled as MacOS only.</p>&#xA;&#xA;<p>In order to listen to the event need to fetch the current window. On the client side this can be done like this</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const currentWindow = electron.remote.getCurrentWindow();&#xA;&#xA;currentWindow.on('move', function() {&#xA;    // Do move event action&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>On the application side there is no remote, so the window is fetched this way</p>&#xA;&#xA;<pre><code>const { BrowserWindow } = require('electron');&#xA;const currentWindow = BrowserWindow.getFocusedWindow();&#xA;&#xA;currentWindow.on('move', function() {&#xA;    // Do move event action&#xA;});&#xA;</code></pre>&#xA;",3654061,"",,"",,2018-07-11T17:29:33,"","",,0,,,
51302611,2,,51298705,2018-07-12T09:58:54,,1,,"<p>So this is what i did </p>&#xA;&#xA;<p><strong>In Auth action</strong></p>&#xA;&#xA;<pre><code>            localStorage.setItem('user', response.data.auth_token);&#xA;            localStorage.setItem('name', response.data.user.name);&#xA;            localStorage.setItem('email', response.data.user.email);&#xA;            axios.defaults.headers.common['Authorization'] = response.data.auth_token;&#xA;            dispatch({ type: AUTHENTICATED });&#xA;</code></pre>&#xA;",9563947,"",,"",,2018-07-12T09:58:54,"","",,0,,,
51304295,2,,51303927,2018-07-12T11:19:01,,1,,"<p>Based on the comments,</p>&#xA;&#xA;<p>Your <code>.env</code> already contains <code>REACT_APP_CSC_LINK</code>.<br>&#xA;All you need to do is define a variable in the <code>.env</code><br>&#xA;For example, </p>&#xA;&#xA;<pre><code>REACT_APP_CSC_LINK=some_value&#xA;CSC_LINK=some_value&#xA;</code></pre>&#xA;&#xA;<p><code>Electron</code> will be able to access the environment variables using <code>process.env.CSC_LINK</code></p>&#xA;",5403618,"",,"",,2018-07-12T11:19:01,"","",,0,,,
51309687,2,,51291325,2018-07-12T15:39:39,,2,,"<p>The <code>onbeforeunload</code> event is triggered (In the renderer)  when a window is closed or reloaded. You can use this to close the individual window. </p>&#xA;&#xA;<p>Otherwise you can inform electron via a IPC message to close all your windows for you.</p>&#xA;&#xA;<p>Something like this should do the job.</p>&#xA;&#xA;<pre><code>// renderer/index.js&#xA;const {ipcRenderer} = require('electron')&#xA;ipcRenderer.send('my-closeallwindowsasap-channel') // can have arguments&#xA;&#xA;// -------------------------------------------------------&#xA;&#xA;// main/index.js&#xA;ipcMain.on('my-closeallwindowsasap-channel', (event, arg) =&gt; {&#xA;  BrowserWindow.getAllWindows().forEach(window =&gt; {&#xA;    window.close()&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",5115009,"",,"",,2018-07-12T15:39:39,"","",,0,,,
51309786,2,,50762227,2018-07-12T15:44:29,,1,,"<p>I found a way. There must be a more elegant one but <a href=""https://nodejs.org/api/child_process.html"" rel=""nofollow noreferrer"">spawning a child process</a> for the backend in the <a href=""https://electronjs.org/docs/tutorial/application-architecture#main-and-renderer-processes"" rel=""nofollow noreferrer"">main process</a> of electron did work great.</p>&#xA;",6393311,"",,"",,2018-07-12T15:44:29,"","",,0,,,
51310452,2,,51285758,2018-07-12T16:22:35,,1,,"<p>Dear Ahmed</p>&#xA;&#xA;<p>you can use <code>codeigniter</code> for your <code>Backend</code> and use <code>electron</code> for <code>Frontend</code> </p>&#xA;&#xA;<p>on <code>Frontend</code> you need use ajax or similar technology for connect and sync data from <code>Backend</code> and not problem to use <code>Codeigniter</code></p>&#xA;&#xA;<p>you can see this tutorial for Codeigniter Restful Api</p>&#xA;&#xA;<p><a href=""https://www.youtube.com/watch?v=X2i-rt0yxDQ"" rel=""nofollow noreferrer"">Codeigniter Restful API in 15 minutes</a></p>&#xA;",2879912,"",,"",,2018-07-12T16:22:35,"","",,0,,,
51311071,2,,51310035,2018-07-12T17:04:18,,0,,"<p>Thanks to Rory's comment above, I found a solution. I installed express and added the an <code>express.js</code> file to the project root, with the contents:</p>&#xA;&#xA;<pre><code>const express = require('express')&#xA;const app = express()&#xA;&#xA;app.use(express.static('.'))&#xA;app.listen(3000)&#xA;</code></pre>&#xA;&#xA;<p>Using <a href=""https://gist.github.com/maximilian-lindsey/a446a7ee87838a62099d"" rel=""nofollow noreferrer"">this gist</a>, I added the following to various places in my <code>main.js</code> file:</p>&#xA;&#xA;<pre><code>const express = require('./express.js'); //&lt;&#xA;&#xA;function createWindow () {&#xA;    mainWindow.loadURL('http://localhost:3000/index.html'); //&lt;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The service worker still gets the request, and it replaces the <code>http://localhost:3000/test</code> with <code>http://localhost</code></p>&#xA;&#xA;<p>ajax:<br>&#xA;<a href=""https://i.stack.imgur.com/xq17g.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xq17g.png"" alt=""ajax""></a></p>&#xA;&#xA;<p>service worker:<br>&#xA;<a href=""https://i.stack.imgur.com/6Fviu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6Fviu.png"" alt=""sw""></a></p>&#xA;&#xA;<p>The service worker also sends an OPTIONS request to make sure cross domain is allowed, while the fetch's request doesn't. This seems to be because the ajax request has an X-Requested-With header, while the fetch doesn't.</p>&#xA;",3903479,"",,"",,2018-07-12T17:04:18,"","",,0,,,
51315607,2,,51315547,2018-07-12T23:04:58,,3,,"<p><a href=""https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendchannel-arg1-arg2-"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendchannel-arg1-arg2-</a> </p>&#xA;&#xA;<blockquote>&#xA;  <p>Arguments will be serialized in JSON internally and hence no functions or prototype chain will be included.</p>&#xA;</blockquote>&#xA;&#xA;<p>IPC only accepts serializable object. There is no easy, out of box way to compare instance between <em>processes</em>, since it already crossed boundary of runtime context it doesn't have lot meaning to compare instance. You may need design in other way doesn't rely on instance types.</p>&#xA;",2742189,"",,"",,2018-07-12T23:04:58,"","",,0,,,
51320201,2,,51261976,2018-07-13T07:50:44,,1,,"<p>The error you get means that ffplay cannot find libSDL.</p>&#xA;&#xA;<p>First, make sure the library is installed by opening a terminal window and typing:</p>&#xA;&#xA;<pre><code>sudo apt install libsdl2-dev&#xA;</code></pre>&#xA;&#xA;<p>If it wasn't installed, try to run your program again after it was installed.</p>&#xA;&#xA;<p>If you still have the problem, type the following in your terminal window:</p>&#xA;&#xA;<pre><code>export LD_LIBRARY_PATH=""/usr/local/lib""&#xA;</code></pre>&#xA;&#xA;<p>Try again to run your program. If the problem is now solved, edit the file etc/environment and add the setting there to make it permanent:</p>&#xA;&#xA;<pre><code>sudo nano /etc/environment&#xA;</code></pre>&#xA;&#xA;<p>Add this <code>LD_LIBRARY_PATH=""/usr/local/lib""</code> at the end, exit and save.</p>&#xA;&#xA;<p>Hope it helps.</p>&#xA;",2673029,"",,"",,2018-07-13T07:50:44,"","",,0,,,
51327108,2,,51327053,2018-07-13T14:10:23,,2,,"<p>As <code>storage</code> seems to be a third party plugin, so any change in the <code>$scope</code> does not execute the digest cycle. Use <code>$timeout</code> to force a digest cycle so as the changes gets rendered in UI.</p>&#xA;&#xA;<pre><code>portal.controller('portalViewController', function($scope, $timeout) {&#xA;    storage.get('portal_url', (err, data) =&gt; {&#xA;        console.log(data.url); //prints out data as it should&#xA;        $timeout(function(){&#xA;            $scope.url = data.url;&#xA;        });&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",1132354,"",,"",,2018-07-13T14:10:23,"","",,0,,,
51340405,2,,51312679,2018-07-14T14:26:31,,0,,"<p>I solved this by creating a second <code>BrowserWindow</code> but keeping it invisible to have it run as a background worker/agent for tasks and downloads. In order to circumvent writing custom IPC to fetch states I have integrated Redux. Combined with <a href=""https://github.com/hardchor/electron-redux"" rel=""nofollow noreferrer"" title=""electron-redux""><code>electron-redux</code></a> I was able to create one store in the main process and have one store in each renderer process, that is in sync with the others. This allows me to issue actions in the background worker without the need to IPC it to the main window.</p>&#xA;",796036,"",,"",,2018-07-14T14:26:31,"","",,0,,,
51353651,2,,51351555,2018-07-16T01:55:08,,0,,<p>The user agent by default applied the outset value to the border style causing me to have this issue.</p>&#xA;,8492486,"",,"",,2018-07-16T01:55:08,"","",,0,,,
51353963,2,,51353178,2018-07-16T02:49:12,,2,,"<p>The loader configuration for HTML files will allow <code>require</code> calls with HTML files to work inside javascript files. With the file loader you'll get a file path and with the HTML loader you'll get the HTML content as a result of the call.</p>&#xA;&#xA;<p>If you want your HTML files to be copied alongside with your compiled sources you'll have to use a plugin like <a href=""https://github.com/webpack-contrib/copy-webpack-plugin"" rel=""nofollow noreferrer"">copy-webpack-plugin</a> or <a href=""https://github.com/jantimon/html-webpack-plugin"" rel=""nofollow noreferrer"">html-webpack-plugin</a>.</p>&#xA;",1570054,"",,"",,2018-07-16T02:49:12,"","",,0,,,
51357857,2,,51357448,2018-07-16T08:45:25,,3,,"<p>Short answer: <strong>no</strong>. You cannot use C/C++ code directly in Electron.</p>&#xA;&#xA;<p>Longer answer: <strong>perhaps</strong>, by compiling your Qt/C++ code to WebAssembly. But this may be overkill, depending on what you want to do in the end.</p>&#xA;&#xA;<p><strong>alternative</strong>: As @xmojmr mentioned, you could try if pure WebGL or a WebGL library serves your needs. I recommend to take a look <a href=""http://threejs.org"" rel=""nofollow noreferrer"">three.js</a>, which is a popular choice for 3D graphics programming in JS.</p>&#xA;&#xA;<p>relevant resources:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://wiki.qt.io/Qt_for_WebAssembly"" rel=""nofollow noreferrer"">https://wiki.qt.io/Qt_for_WebAssembly</a></li>&#xA;<li><a href=""https://webassembly.org"" rel=""nofollow noreferrer"">https://webassembly.org</a></li>&#xA;<li><a href=""https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm</a></li>&#xA;</ul>&#xA;",2921415,"",2921415,"",2018-07-16T15:58:05,2018-07-16T15:58:05,"","",,0,,,
51365918,2,,50661717,2018-07-16T16:01:26,,1,,"<h3>You can override the PORT even without passing <code>env</code>, using <code>/usr/bin/env</code></h3>&#xA;&#xA;<pre><code>const child = childProcess.spawn('env', ['PORT=4545', 'npm', 'run', taskName], {&#xA;  cwd: `${parentPath}/${projectId}`,&#xA;});&#xA;</code></pre>&#xA;&#xA;<h3>If you haven't checked <code>process.env</code>, make sure you override <code>PATH</code> with a known-good value.</h3>&#xA;&#xA;<pre><code>const child = childProcess.spawn('npm', ['run', taskName], {&#xA;  cwd: `${parentPath}/${projectId}`,&#xA;  env: {&#xA;    PATH: '/bin:/usr/bin:/usr/local/bin',&#xA;    PORT: 4545,&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",14122,"",14122,"",2018-07-17T12:32:09,2018-07-17T12:32:09,"","",,0,,,
51252877,2,,51141081,2018-07-09T19:36:30,,0,,<p>The answer to my question was that I was using the wrong cli command and was building and then immediately running the app and that would cause a time out since the app was still running in the background. I changed to a command that would only build the app and that has worked ever since. </p>&#xA;,7763720,"",,"",,2018-07-09T19:36:30,"","",,1,,,
51256562,2,,50991453,2018-07-10T02:46:36,,4,,"<p>After going through some Q&amp;A of <code>electron-packager</code> and <code>electron-builder</code>. I found one solution to make <code>sqlite3</code> to work with <code>webpack</code>.</p>&#xA;&#xA;<p>In <code>webpack.config.js</code>, I added : </p>&#xA;&#xA;<pre><code>externals: {&#xA;    sqlite3: 'commonjs sqlite3'&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Instead of <code>electron-packager</code>, I used <code>electron-builder</code> to build my application. In <code>build</code> configuration, I copied <code>sqlite3</code> module to <code>dist</code> folder. </p>&#xA;",3301076,"",,"",,2018-07-10T02:46:36,"","",,1,,,
51360971,2,,51343894,2018-07-16T11:39:36,,2,,"<p>The <a href=""https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendsyncchannel-arg1-arg2-"" rel=""nofollow noreferrer"">docs</a> is pretty clear on this one:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Sending a synchronous message will block the whole renderer process, unless you know what you are doing you should never use it.</p>&#xA;</blockquote>&#xA;&#xA;<p>Since you don't provide a return value in your <code>fmail</code> callback, no wonder it blocks your app.</p>&#xA;&#xA;<p>Also, I guess you wanted to register both listeners individually. What you currently have is ""add listener to 'fpass' every time 'fmail' is called back""</p>&#xA;&#xA;<p>Your code should probably look like this (but cannot tell exactly really)</p>&#xA;&#xA;<pre><code>ipcMain.on('fmail', (event, arg) =&gt; {&#xA;  console.log(arg)&#xA;  event.returnValue = ""info""&#xA;})&#xA;ipcMain.on('fpass', (event, arg) =&gt; {&#xA;  console.log(arg)&#xA;  event.returnValue = ""info""&#xA;})&#xA;console.log(&#xA;  ipcRenderer.sendSync('fmail', ""fmail""),&#xA;  ipcRenderer.sendSync('fpass', ""fpass"")&#xA;)&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2019-05-23T09:44:18,2019-05-23T09:44:18,"","",,1,,,
51186875,2,,51184213,2018-07-05T08:41:21,,4,,"<p>I think your code is OK - except as what is said in comments, maybe you should not catch the error in <code>promises.push</code> but instead just do it in <code>Promise.all</code>.</p>&#xA;&#xA;<p>I ran the app from your zip, and it worked and downloaded the 2 files correctly.</p>&#xA;&#xA;<p>But then I tried to change some URL and put one that does not exist : well here's the problem. In this case <code>download</code> function does not resolve the promise (which is normal) neither rejects it (which it should).</p>&#xA;&#xA;<p>Try it yourself running this simple code :</p>&#xA;&#xA;<pre><code>download(mainWindow, 'https://nothing.wrong-url.org', {&#xA;  directory: os.tmpdir() // Default is User's downloads directory&#xA;}).then(function (dl) {&#xA;  console.log(dl.getSavePath());&#xA;}).catch(console.error)&#xA;</code></pre>&#xA;&#xA;<p>The promise is just hanging here and does not resolve nor rejects. You might open an issue on electron-dl Github.</p>&#xA;",10031622,"",,"",,2018-07-05T08:41:21,"","",,2,,,
51271614,2,,51269588,2018-07-10T18:04:46,,0,,"<p>On the 5th line, you do exactly what you complain about:</p>&#xA;&#xA;<pre><code>    createNoteWin.on('close', function() {mainWin = null});&#xA;</code></pre>&#xA;&#xA;<p>This sets <code>mainWin</code> to <code>null</code> (""the reference to my main window suddenly becomes null""). Perhaps you meant this instead?</p>&#xA;&#xA;<pre><code>    createNoteWin.on('close', function() {createNoteWin = null});&#xA;</code></pre>&#xA;",906444,"",,"",,2018-07-10T18:04:46,"","",,2,,,
51363123,2,,51216548,2018-07-16T13:34:19,,2,,"<p>See if doing the following works:</p>&#xA;&#xA;<p>1) Load the content into the webview that you are trying to manipulate. </p>&#xA;&#xA;<p>2) Use the <a href=""http://%20https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture-callback"" rel=""nofollow noreferrer"">webcontents.executejavascript</a> to run the javascript you need to prevent access to top </p>&#xA;",5319145,"",,"",,2018-07-16T13:34:19,"","",,2,,,
51252876,2,,48703005,2018-07-09T19:36:22,,13,,"<p>electron-builder defaults to building for the current platform. To build both, you need to do something like this in the ""script"", to build the mac and the window:</p>&#xA;&#xA;<p>""dist-all"": ""electron-builder -mw""</p>&#xA;",10055587,"",,"",,2018-07-09T19:36:22,"","",,3,,,
51349874,2,,51340641,2018-07-15T15:47:24,,0,,"<p>After calling <code>close()</code>, also set the value to null. It can then be destroyed and garbage-collected.</p>&#xA;&#xA;<pre><code> var source = new EventSource(""http://localhost/hyperion_datasource/events/powerup_events.php"");&#xA;    var data=[];&#xA;    source.onmessage = function (event) { &#xA;         data = event.data.split(""$"");&#xA;         console.log(data[0]);    &#xA;        if (data[0] &gt; 99) {  &#xA;            console.log('closing stream'); &#xA;            source.close();&#xA;            source = null;&#xA;        }&#xA;&#xA;    };&#xA;</code></pre>&#xA;&#xA;<p>I suspect you should be doing this for it to work reliably across all browsers, too. The difference in behaviour could also be due to different scope when running it in an Electron front-end, perhaps.</p>&#xA;",841830,"",,"",,2018-07-15T15:47:24,"","",,3,,,
51201734,2,,51200831,2018-07-06T00:59:42,,1,,"<p>Wouldn't drawing it onto another canvas do the bilinear interpolation for you?</p>&#xA;&#xA;<pre><code>var canvas2 = document.createElement('canvas');&#xA;var ctx2 = canvas2.getContext('2d');&#xA;canvas2.width = canvas2.height = 1024;&#xA;ctx2.drawImage( canvas, 0, 0, 1024, 1024 );&#xA;</code></pre>&#xA;",1193622,"",,"",,2018-07-06T00:59:42,"","",,5,,,
56046333,2,,56045673,2019-05-08T17:41:11,,1,,"<p>There's no first and second but only one hook object. CommonJS modules are evaluated once, so <code>ioHook === ioHook2</code>.</p>&#xA;&#xA;<p><code>start</code> starts listening registered hooks and <code>stop</code> stops listening them.</p>&#xA;&#xA;<p>Since <code>iohook</code> is event emitter, a listener can be unsubscribed as with any other event emitter when needed:</p>&#xA;&#xA;<pre><code>ioHook.on('mouseclick', onMouseActivity);&#xA;&#xA;...&#xA;&#xA;ioHook.off('mouseclick', onMouseActivity);&#xA;</code></pre>&#xA;",3731501,"",3731501,"",2019-05-08T17:54:02,2019-05-08T17:54:02,"","",,0,,,
56051458,2,,56033095,2019-05-09T02:39:12,,0,,"<p>I figured out my error. I was essentially following a guide from <a href=""https://www.youtube.com/watch?v=u_vMChpZMCk"" rel=""nofollow noreferrer"">this</a> outdated YouTube video which lost support after Angular 4. I read and followed the instructions from <a href=""https://malcoded.com/posts/angular-desktop-electron/"" rel=""nofollow noreferrer"">this</a> article and was finally able to open a window.</p>&#xA;",10788726,"",,"",,2019-05-09T02:39:12,"","",,0,,,
56054158,2,,56053495,2019-05-09T07:22:08,,0,,"<p>Decided to change the approach to something simpler such as a select.</p>&#xA;&#xA;<pre><code>&lt;div class=""selectArea""&gt;&#xA;&#xA;            &lt;form id=""myForm""&gt;&#xA;                &lt;div class=""form-group""&gt;&#xA;                    &lt;select class=""form-control"" id=""selectNumber""&gt;&#xA;                        &lt;option&gt;Choose a node&lt;/option&gt;&#xA;                    &lt;/select&gt;&#xA;                &lt;/div&gt;&#xA;            &lt;/form&gt;&#xA;        &lt;/div&gt;&#xA;        &lt;div class=""nodesArea"" id=""nodes""&gt;&#xA;            &lt;label id=""labelListen""&gt;&lt;/label&gt;&#xA;&#xA;&#xA;        &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;script id=""entry-template"" type=""text/x-handlebars-template""&gt;&#xA;        &lt;div class=""col-xs-4 p-2""&gt;&#xA;            &lt;div class=""card text-center""&gt;&#xA;                &lt;div class=""card-header""&gt;&#xA;                    &lt;h5 class=""card-title""&gt;Node: {{counter}}&lt;/h5&gt;&#xA;                &lt;/div&gt;&#xA;                &lt;div class=""card-body""&gt;&#xA;                    &lt;label id=""labelIP""&gt;&#xA;                 {{nodo}}&lt;/label&gt;&#xA;                    &lt;hr&gt;&#xA;                &lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;    &lt;/script&gt;&#xA;&#xA;&#xA;</code></pre>&#xA;&#xA;<pre><code>var select = document.querySelector('#selectNumber');&#xA;select.addEventListener('change', (event) =&gt; {&#xA;&#xA;    console.log(event.target.value);&#xA;    /*const result = document.querySelector('.result');&#xA;    result.textContent = `You like ${event.target.value}`;*/&#xA;});&#xA;&#xA;&#xA;var addNode = async function() {&#xA;&#xA;    const nodes = document.querySelector('#nodes');&#xA;&#xA;    var opt = ipNodes.slice(-1).pop();&#xA;    var el = document.createElement(""option"");&#xA;    el.textContent = opt;&#xA;    el.value = opt;&#xA;    select.appendChild(el);&#xA;&#xA;&#xA;&#xA;&#xA;    var source = document.getElementById(""entry-template"").innerHTML;&#xA;&#xA;    var template = handlebars.compile(source);&#xA;&#xA;    var context = { nodo: opt, counter: counterList };&#xA;&#xA;    nodes.innerHTML += template(context);&#xA;&#xA;    counterList++;&#xA;&#xA;}&#xA;</code></pre>&#xA;",4597930,"",4597930,"",2019-05-09T08:22:03,2019-05-09T08:22:03,"","",,0,,,
56069016,2,,56066519,2019-05-09T23:57:10,,1,,"<p>The <a href=""https://electronjs.org/docs/api/cookies#cookiesgetfilter-callback"" rel=""nofollow noreferrer""><code>cookies.get</code> API</a> isn't very intuitive, try:</p>&#xA;&#xA;<pre><code>webContents.session.cookies.get({}, (err, cookies) =&gt; console.log(cookies))&#xA;</code></pre>&#xA;",39013,"",,"",,2019-05-09T23:57:10,"","",,0,,,
56081541,2,,55912941,2019-05-10T16:29:22,,0,,"<p>As far as I can tell, after a bunch of research, Angular 5 and above do not allow access to fs (or other node modules), so it is impossible to write an Edge app with an Angular version > 5.</p>&#xA;",3821496,"",,"",,2019-05-10T16:29:22,"","",,0,,,
56087798,2,,55983687,2019-05-11T06:23:52,,0,,"<p>I solved this problem as follows. The point is the resolve function in the close event.<br>&#xA;src/main/index.js</p>&#xA;&#xA;<pre><code>import fs from 'fs'&#xA;import readline from 'readline'&#xA;import iconv from 'iconv-lite'&#xA;&#xA;ipcMain.on('readfile', async (event, arg) =&gt; {&#xA;    await readLines()&#xA;    event.sender.send('readfile-reply', 'complete')&#xA;})&#xA;&#xA;function readLines() {&#xA;    return new Promise((resolve, reject) =&gt; {&#xA;        stream = fs.createReadStream(filePath).pipe(iconv.decodeStream('shift-jis'))&#xA;        let reader = readline.createInterface(stream, {})&#xA;        reader&#xA;            .on('line', line =&gt; {&#xA;                insertLine(line)&#xA;            })&#xA;            .on('close', () =&gt; {&#xA;                resolve() // ""Resolve"" in the close event.&#xA;            })&#xA;            .on('error', function(err) {&#xA;                reject(err)&#xA;            })&#xA;    })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then the function can be used asynchronously:<br>&#xA;src/renderer/components/Import.vue</p>&#xA;&#xA;<pre><code>const dialog = require('electron').remote.dialog&#xA;export default {&#xA;    name: 'import',&#xA;    data() {&#xA;        return {&#xA;            loading: false&#xA;        }&#xA;    },&#xA;    methods: {&#xA;        mounted() {&#xA;            this.$refs.search.focus()&#xA;        },&#xA;        openDialog() {&#xA;            let filePath = dialog.showOpenDialog({&#xA;                properties: ['openFile'],&#xA;            })&#xA;            this.loading = true&#xA;            let that = this&#xA;            // Use the async function.&#xA;            this.asyncReadFile(that, filePath[0]).then(function(res) {&#xA;                // When the async function is completed, remove the loading icon.&#xA;                that.loading = false&#xA;                console.log(res)&#xA;                that.$electron.ipcRenderer.removeAllListeners('readfile-reply')&#xA;            })&#xA;        },&#xA;        asyncReadFile(that, path) {&#xA;            return new Promise(resolve =&gt; {&#xA;                this.$electron.ipcRenderer.send('readfile', path)&#xA;                this.$electron.ipcRenderer.on('readfile-reply', (event, result) =&gt; {&#xA;                    resolve(result)&#xA;                })&#xA;            })&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",6180050,"",6180050,"",2019-06-15T10:05:02,2019-06-15T10:05:02,"","",,0,,,
56095505,2,,56089535,2019-05-12T01:17:25,,1,,"<p>If you are using <code>Electron</code> 5.0, then <a href=""https://electronjs.org/blog/electron-5-0#security-improvements"" rel=""nofollow noreferrer"">nodeIntegration is false by default</a> in <code>BrowserWindows</code> so you need to specify it explicitly when you create your window:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;  width: 800,&#xA;  height: 600,&#xA;  webPreferences: {&#xA;    nodeIntegration: true&#xA;  }&#xA;})&#xA;</code></pre>&#xA;",840992,"",,"",,2019-05-12T01:17:25,"","",,0,,,
56103187,2,,56102876,2019-05-12T20:25:18,,0,,"<p>While I don't know why the original post I made above gives the error, I have found a solution that works for me by using an event from the node-7zip library:</p>&#xA;&#xA;<pre><code>function processArchive(pdscQueue, archiveFilename, repoPath) {&#xA;    let tempFolder = tmp.dirSync() ;&#xA;    let devicePackFile = path.join(repoPath,archiveFilename) ;   // Create a temp folder for the extacted data&#xA;    let theStream = sevenZip.extractFull(devicePackFile, tempFolder.name, { $bin: pathTo7zip}) ;&#xA;&#xA;    theStream.on('end', () =&gt; {&#xA;        //&#xA;        // Process the file here ...&#xA;        //&#xA;        tempFolder.removeCallback() ;   // Clean up&#xA;        //&#xA;        // Check if there are more to process&#xA;        //&#xA;        if ( pdscQueue.isEmpty()) {&#xA;            return ;&#xA;        } else {&#xA;            processArchive(pdscQueue, pdscQueue.dequeue(), repoPath ) ;&#xA;        }&#xA;    }) ;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Maybe this approach will also be useful for someone else.</p>&#xA;",2178154,"",,"",,2019-05-12T20:25:18,"","",,0,,,
56111557,2,,55032227,2019-05-13T11:40:00,,8,,"<p>A good bit of time has passed since I originally posted this question. I'll answer it myself in case my mistake can assist anyone.</p>&#xA;&#xA;<p>I never got a ""solution"" to the original problem. At a much later date I switched across to the npm release of the sdk and it worked.</p>&#xA;&#xA;<p>But before that time I'd hit this issue again. Luckily, by then, I'd added a logger that also wrote console to file. With it I noticed that a JavaScript syntax error caused the crash. e.g. Missing closing bracket, etc.</p>&#xA;&#xA;<p>I suspect that's what caused my original problem. But the Chrome dev tools do the worst thing by blanking the console rather than preserve it when the tools crash.</p>&#xA;&#xA;<p>Code I used to setup a logger</p>&#xA;&#xA;<pre><code>/*global window */&#xA;const winston = require('winston');&#xA;const prettyMs = require('pretty-ms');&#xA;&#xA;/**&#xA; * Proxy the standard 'console' object and redirect it toward a logger.&#xA; */&#xA;class Logger {&#xA;  constructor() {&#xA;    // Retain a reference to the original console&#xA;    this.originalConsole = window.console;&#xA;    this.timers = new Map([]);&#xA;&#xA;    // Configure a logger&#xA;    this.logger = winston.createLogger({&#xA;      level: 'info',&#xA;      format: winston.format.combine(&#xA;        winston.format.timestamp(),&#xA;        winston.format.printf(({ level, message, timestamp }) =&gt; {&#xA;          return `${timestamp} ${level}: ${message}`;&#xA;        })&#xA;      ),&#xA;      transports: [&#xA;        new winston.transports.File(&#xA;          {&#xA;            filename: `${require('electron').remote.app.getPath('userData')}/logs/downloader.log`, // Note: require('electron').remote is undefined when I include it in the normal imports&#xA;            handleExceptions: true, // Log unhandled exceptions&#xA;            maxsize: 1048576, // 10 MB&#xA;            maxFiles: 10&#xA;          }&#xA;        )&#xA;      ]&#xA;    });&#xA;&#xA;    const _this = this;&#xA;&#xA;    // Switch out the console with a proxied version&#xA;    window.console = new Proxy(this.originalConsole, {&#xA;      // Override the console functions&#xA;      get(target, property) {&#xA;        // Leverage the identical logger functions&#xA;        if (['debug', 'info', 'warn', 'error'].includes(property)) return (...parameters) =&gt; {&#xA;          _this.logger[property](parameters);&#xA;          // Simple approach to logging to console. Initially considered&#xA;          // using a custom logger. But this is much easier to implement.&#xA;          // Downside is that the format differs but I can live with that&#xA;          _this.originalConsole[property](...parameters);&#xA;        }&#xA;        // The log function differs in logger so map it to info&#xA;        if ('log' === property) return (...parameters) =&gt; {&#xA;          _this.logger.info(parameters);&#xA;          _this.originalConsole.info(...parameters);&#xA;        }&#xA;        // Re-implement the time and timeEnd functions&#xA;        if ('time' === property) return (label) =&gt; _this.timers.set(label, window.performance.now());&#xA;        if ('timeEnd' === property) return (label) =&gt; {&#xA;          const now = window.performance.now();&#xA;          if (!_this.timers.has(label)) {&#xA;            _this.logger.warn(`console.timeEnd('${label}') called without preceding console.time('${label}')! Or console.timeEnd('${label}') has been called more than once.`)&#xA;          }&#xA;          const timeTaken = prettyMs(now - _this.timers.get(label));&#xA;          _this.timers.delete(label);&#xA;          const message = `${label} ${timeTaken}`;&#xA;          _this.logger.info(message);&#xA;          _this.originalConsole.info(message);&#xA;        }&#xA;&#xA;        // Any non-overriden functions are passed to console&#xA;        return target[property];&#xA;      }&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;/**&#xA; * Calling this function switches the window.console for a proxied version.&#xA; * The proxy allows us to redirect the call to a logger.&#xA; */&#xA;function switchConsoleToLogger() { new Logger(); } // eslint-disable-line no-unused-vars&#xA;</code></pre>&#xA;&#xA;<p>Then in index.html I load this script first</p>&#xA;&#xA;<pre><code>&lt;script src=""js/logger.js""&gt;&lt;/script&gt;&#xA;&lt;script&gt;switchConsoleToLogger()&lt;/script&gt;&#xA;</code></pre>&#xA;",765076,"",765076,"",2019-05-25T23:43:25,2019-05-25T23:43:25,"","",,0,,,
56113894,2,,56113318,2019-05-13T13:55:02,,1,,"<p>nedb supports sort by date out of the box, just sort it and limit 1</p>&#xA;&#xA;<pre><code>db.find({}).sort({postedAt: -1}).limit(1).exec((err, docs)=&gt;{&#xA;    console.log(docs[0]);&#xA;})&#xA;</code></pre>&#xA;",2304204,"",,"",,2019-05-13T13:55:02,"","",,0,,,
56115825,2,,55749460,2019-05-13T15:48:58,,0,,"<p>The bug is because of Electron-DB : <a href=""https://github.com/alexiusacademia/electron-db/issues/18"" rel=""nofollow noreferrer"">here</a></p>&#xA;",5388821,"",,"",,2019-05-13T15:48:58,"","",,0,,,
56122482,2,,56112384,2019-05-14T03:10:15,,0,,"<p><a href=""https://github.com/electron/electron/issues/18278"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/18278</a></p>&#xA;&#xA;<p>It is just electron.lib renamed to node.lib</p>&#xA;",7653313,"",,"",,2019-05-14T03:10:15,"","",,0,,,
56123861,2,,55951045,2019-05-14T05:57:50,,0,,"<p>Two things i tried to make it work:</p>&#xA;&#xA;<p>1)Added property in package.json inside build property as below:</p>&#xA;&#xA;<pre><code>{ &#xA;   ""build""{&#xA;    ""appx"": {&#xA;          ""identityName"": ""****"",&#xA;          ""publisher"": ""CN=********************"",&#xA;          ""publisherDisplayName"": ""********"",&#xA;          ""applicationId"": ""***"",&#xA;          ""displayName"": ""***""&#xA;        }&#xA;      }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Due to which while creating the build with electron-builder, it started taking these configuration.</p>&#xA;&#xA;<p>2)Also opened the cordova project from platfrom windows in <strong>visual studio</strong> and signed in with store user and <strong>associated the app with store</strong>, which changed the appmanifest.xml file.</p>&#xA;",6453158,"",,"",,2019-05-14T05:57:50,"","",,0,,,
56124353,2,,54360447,2019-05-14T06:38:58,,1,,"<p>After trying multiple options what worked for me is as below:</p>&#xA;&#xA;<ol>&#xA;<li><p>I had to delete the <strong>existing</strong> <strong>Db file</strong> manually, because the file was corrupted.</p></li>&#xA;<li><p>Also used Database.Delete method after checking the existence of db</p></li>&#xA;<li><p>Created new Db with encryption.</p></li>&#xA;</ol>&#xA;",6453158,"",,"",,2019-05-14T06:38:58,"","",,0,,,
56139560,2,,56093261,2019-05-14T22:43:43,,1,,"<p>I believe you found the answer after opening this issue. Wanted to go ahead and answer this question for others struggling. </p>&#xA;&#xA;<p>Issue Opened:&#xA;<a href=""https://github.com/mapbox/node-sqlite3/issues/1163"" rel=""nofollow noreferrer"">https://github.com/mapbox/node-sqlite3/issues/1163</a></p>&#xA;&#xA;<p>Actual binding:&#xA;<a href=""https://mapbox-node-binary.s3.amazonaws.com/sqlite3/v4.0.0/electron-v4.0-win32-x64.tar.gz"" rel=""nofollow noreferrer"">https://mapbox-node-binary.s3.amazonaws.com/sqlite3/v4.0.0/electron-v4.0-win32-x64.tar.gz</a></p>&#xA;",2058216,"",,"",,2019-05-14T22:43:43,"","",,0,,,
56140860,2,,56015284,2019-05-15T02:04:47,,0,,"<p>Well, if you check the actual dev tools instead of the console, the issue isn't present there. Best I found.</p>&#xA;",1029146,"",,"",,2019-05-15T02:04:47,"","",,0,,,
56148623,2,,56110302,2019-05-15T11:46:55,,0,,"<p>You might first need to perform a <code>click</code> on that element and then perform a <code>setValue</code> or <code>keys</code> </p>&#xA;&#xA;<pre><code>await this.app.client.click(//*[@id=""p-at-tt-time-input""]/div/div/div1/input);&#xA;await this.app.client.setValue(//*[@id=""p-at-tt-time-input""]/div/div/div1/input, '12:30');&#xA;&#xA;OR&#xA;&#xA;await this.app.client.click(//*[@id=""p-at-tt-time-input""]/div/div/div1/input);&#xA;await this.app.client.keys(//*[@id=""p-at-tt-time-input""]/div/div/div1/input, '12:30');&#xA;</code></pre>&#xA;",3553424,"",,"",,2019-05-15T11:46:55,"","",,0,,,
56155319,2,,56148977,2019-05-15T18:10:16,,0,,"<p>It turns out to be a reference 'error' (more of a quirk) caused by Javascript itself.</p>&#xA;&#xA;<p>The reference of <code>this</code> changes when a function is invoked by an Eventlistener, causing <code>this</code> to point to the HTML element instead of the script. Therefore, obviously, it cannot find the reference to the previously saved variable, causing all of these calls to be <code>undefined</code> as there simply IS no variable like that on the HTML-Element.</p>&#xA;&#xA;<p>Two Solutions: </p>&#xA;&#xA;<p>1) And my preferred one: use arrow functions on the Eventlistener, that sets a strict context for <code>this</code>, solving the issue</p>&#xA;&#xA;<pre><code> toAddTo.addEventListener('click', () =&gt; { this.showTheText(); });&#xA;</code></pre>&#xA;&#xA;<p>2) Bind the context to the function. Not sure how that works, but there it is if you wanna google it</p>&#xA;",9955295,"",,"",,2019-05-15T18:10:16,"","",,0,,,
56161394,2,,56159460,2019-05-16T05:27:05,,0,,"<blockquote>&#xA;  <p>I'm really stuck here. Don't know what to do. I'm not even sure if AudioContext() really holds data from all the audio files before causing this performance problem.</p>&#xA;</blockquote>&#xA;&#xA;<p>No, it's really unlikely this is the case.  The AudioContext sets up things like the sample rate, output destination, and the graph.  That's all.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The close() method of the AudioContext Interface closes the audio context, releasing any system audio resources that it uses.</p>&#xA;</blockquote>&#xA;&#xA;<p>You're misunderstanding what this means.  Those ""system audio resources"" are the sound devices.  While the AudioContext is running, there is an audio device requested.  This is particularly meaningful in low power environments, like mobile.  Another example would be Bluetooth.  If the AudioContext is kept running, your Bluetooth headset may just stay on.  If the AudioContext is allowed to close, then the Bluetooth headset may go to sleep.</p>&#xA;&#xA;<blockquote>&#xA;  <p>And if so, how could I recconect the HTMLMediaElement to a new node audio.createAudioContext() creates?</p>&#xA;</blockquote>&#xA;&#xA;<p>You don't.  While it would be nice if the API supported this, it seems it doesn't.  Simply create a new HTMLMediaElement.</p>&#xA;&#xA;<p>What you should do is properly profile your application to figure out where the slowdown is occurring.  Use your developer tools.  Might be faster though just to start commenting out sections of things that are running.  We certainly can't tell you where the problem is, specifically, from the code you've shown.</p>&#xA;",362536,"",,"",,2019-05-16T05:27:05,"","",,0,,,
56182584,2,,56115718,2019-05-17T08:32:03,,0,,"<p>As I did not found a way to keep windows open, I decided to hide the windows instead of closing them. This is what I did:</p>&#xA;&#xA;<pre><code>  win.on(""close"", (event) =&gt; {&#xA;    if (win.hideInsteadOfClose == true) {&#xA;      event.preventDefault();&#xA;      win.hide();&#xA;    }&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>Where <code>hideInsteadOfClose</code> is a property I give to new windows created. This is not the proper way of doing it, but it gets the work done. </p>&#xA;&#xA;<p>Please feel free to answer with the correct way.</p>&#xA;",1732308,"",,"",,2019-05-17T08:32:03,"","",,0,,,
56198643,2,,56182168,2019-05-18T11:49:06,,0,,"<p>A gentleman in the Electron repository helped me out in <a href=""https://github.com/electron/electron/issues/18334"" rel=""nofollow noreferrer"">a GitHub issue</a> I posted.</p>&#xA;&#xA;<p>Indeed <code>require</code> not being available at the global level seems to be by design, but there is a way to obtain a reference to the <code>require</code> function:</p>&#xA;&#xA;<pre><code>process.mainModule.require&#xA;</code></pre>&#xA;&#xA;<p>This worked perfectly well for me both in <code>npx electron --inspect</code> and when running built Electron with the <code>--inspect</code> flag.</p>&#xA;",2715716,"",2715716,"",2019-05-21T08:53:18,2019-05-21T08:53:18,"","",,0,,,
56206776,2,,56205485,2019-05-19T10:09:18,,0,,"<p><strong>The fact is although NodeJs is spawning the electron process but once new process (electron window process in this case) spawned it's become completely stranger to parent process (NodeJs in this case) until it finishes (success or error) and return something to parent process. So don't relay on IPC.</strong></p>&#xA;&#xA;<p><em>I'm assuming the fact that as NodeJs is not good for CPU intensive tasks so you want to spawn some CPU intensive task (right now on same server but later on some server less architecture).</em></p>&#xA;&#xA;<p>Simply just communicate through API end points.</p>&#xA;&#xA;<p>Develop required REST end points in NodeJs and call same in electron window process, if both are on same server, request at localhost:port from child process.</p>&#xA;&#xA;<p><strong><em>If, above not help, Please share your problem statement on UX level (what/ how you want to show).</em></strong></p>&#xA;",7527346,"",,"",,2019-05-19T10:09:18,"","",,0,,,
56213810,2,,52244659,2019-05-20T02:57:44,,1,,"<p>After doing a lot of research I found an awesome solution provided by sequalize.js. I found a library <a href=""https://github.com/sequelize/umzug"" rel=""nofollow noreferrer"">Umzug Github</a>. Let's look at the implementation...</p>&#xA;&#xA;<pre><code>&#xA;    /**&#xA;     * Created by Ashraful Islam&#xA;     */&#xA;&#xA;    const path = require('path');&#xA;    const Umzug = require('umzug');&#xA;    const database = /* Imported my database config here */;&#xA;&#xA;    const umzug = new Umzug({&#xA;        storage: 'sequelize',&#xA;        storageOptions: {&#xA;            sequelize: database&#xA;        },&#xA;&#xA;        // see: https://github.com/sequelize/umzug/issues/17&#xA;        migrations: {&#xA;            params: [&#xA;                database.getQueryInterface(), // queryInterface&#xA;                database.constructor, // DataTypes&#xA;                function () {&#xA;                    throw new Error('Migration tried to use old style ""done"" callback. Please upgrade to ""umzug"" and return a promise instead.');&#xA;                }&#xA;            ],&#xA;            path: './migrations',&#xA;            pattern: /\.js$/&#xA;        },&#xA;&#xA;        logging: function () {&#xA;            console.log.apply(null, arguments);&#xA;        }&#xA;    });&#xA;&#xA;    function logUmzugEvent(eventName) {&#xA;        return function (name, migration) {&#xA;            console.log(`${name} ${eventName}`);&#xA;        }&#xA;    }&#xA;    function runMigrations() {&#xA;        return umzug.up();&#xA;    }&#xA;&#xA;    umzug.on('migrating', logUmzugEvent('migrating'));&#xA;    umzug.on('migrated', logUmzugEvent('migrated'));&#xA;    umzug.on('reverting', logUmzugEvent('reverting'));&#xA;    umzug.on('reverted', logUmzugEvent('reverted'));&#xA;&#xA;    module.exports = {&#xA;        migrate: runMigrations&#xA;    };&#xA;&#xA;</code></pre>&#xA;&#xA;<p><strong>Idea behind the scene</strong><br>&#xA;I clearly declare the migration directory. Also, define the file matching pattern. Umzug just read files from there and run the DB migration. An example migration file is following...</p>&#xA;&#xA;<pre><code>// 000_Initial.js&#xA;&#xA;""use strict"";&#xA;&#xA;module.exports = {&#xA;&#xA;    up: function(migration, DataTypes) {&#xA;&#xA;        return migration.createTable('Sessions', {&#xA;&#xA;            sid: {&#xA;                type: DataTypes.STRING,&#xA;                allowNull: false&#xA;            },&#xA;&#xA;            data: {&#xA;                type: DataTypes.STRING,&#xA;                allowNull: false&#xA;            },&#xA;&#xA;            createdAt: {&#xA;                type: DataTypes.DATE&#xA;            },&#xA;&#xA;            updatedAt: {&#xA;                type: DataTypes.DATE&#xA;            }&#xA;&#xA;        }).then(function() {&#xA;            return migration.addIndex('Sessions', ['sid']);&#xA;&#xA;        });&#xA;&#xA;    },&#xA;&#xA;    down: function(migration, DataTypes) {&#xA;        return migration.dropTable('Sessions');&#xA;    }&#xA;&#xA;};&#xA;</code></pre>&#xA;",5527679,"",,"",,2019-05-20T02:57:44,"","",,0,,,
56218686,2,,56202191,2019-05-20T10:09:16,,1,,"<p>You can register custom protocol and intercept it via electron so that you dont require a web server. you may set the urn of the native desktop/mobile application instead of redirect uri of the web app. </p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/protocol"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/protocol</a></p>&#xA;&#xA;<pre><code>protocol.registerFileProtocol('yourprotocolname', (request, callback) =&gt; {&#xA;&#xA;      //parse authorization code from request &#xA;&#xA;  }, (error) =&gt; {&#xA;    if (error) console.error('Failed to register protocol')&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>Set the urn of the application in the oauth configuration as yourprotocolname://example</p>&#xA;",3502805,"",,"",,2019-05-20T10:09:16,"","",,0,,,
56222508,2,,56161358,2019-05-20T13:59:01,,0,,"<p>I solved the issue by doing below changes:</p>&#xA;&#xA;<p>1) Added the assets mentioned in the appx link: <a href=""https://www.electron.build/configuration/appx"" rel=""nofollow noreferrer"">https://www.electron.build/configuration/appx</a></p>&#xA;&#xA;<p>2) created appx folder in the build directory, keep the package.json as mentioned above.</p>&#xA;&#xA;<p>3)Make sure the app logos named should be specific as metioned in the link .PNG format.</p>&#xA;&#xA;<p>4)Earlier I had icon names as <strong>e.g:</strong> Square44x44Logo.png format .PNG then after changing the name to Square44x44Logo kept format .PNG as it is I was able to solve installed app issue.</p>&#xA;&#xA;<p>What i realized by this is naming convention does matter a lot in case of applying icons. So the main issue caused due to <strong>pont 4</strong>.</p>&#xA;",6453158,"",,"",,2019-05-20T13:59:01,"","",,0,,,
56225755,2,,56210986,2019-05-20T17:39:40,,1,,"<p>Your function</p>&#xA;&#xA;<pre><code>function getPatients(){&#xA;    const jsonfile = require('jsonfile')&#xA;    const file = 'src/resources/patients.json'&#xA;    jsonfile.readFile(file, function(err, obj){&#xA;        if(err) console.error(err)&#xA;        console.dir(obj)&#xA;        return obj&#xA;    })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>works asynchronous (see <a href=""https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback"" rel=""nofollow noreferrer"">docs</a>).</p>&#xA;&#xA;<p>You have two options. The first one is to handle the file-reading asynchronously:</p>&#xA;&#xA;<pre><code>function getPatients(){&#xA;    const jsonfile = require('jsonfile')&#xA;    const file = 'src/resources/patients.json';&#xA;    // Create a new promise&#xA;    return new Promise((resolve, reject) =&gt; {&#xA;        jsonfile.readFile(file, function(err, obj){&#xA;            if(err){&#xA;                console.error(err)&#xA;                return reject(err);&#xA;            }&#xA;            console.dir(obj)&#xA;            return resolve(obj);&#xA;        });&#xA;    });&#xA;}&#xA;&#xA;...&#xA;&#xA;// Prints the read object in the console, after the file reading is done&#xA;getPatients().then((obj) =&gt; {&#xA;    console.dir(obj);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The second options, and in my opinion the best solution for you is using the synchronous way to read a file:</p>&#xA;&#xA;<pre><code>function getPatients(){&#xA;    const jsonfile = require('jsonfile')&#xA;    const file = 'src/resources/patients.json'&#xA;    try {&#xA;        const obj = jsonfile.readFileSync(file);&#xA;        console.dir(obj);&#xA;        return obj;&#xA;    } catch(e) {&#xA;        console.error(e);&#xA;    });&#xA;}&#xA;</code></pre>&#xA;",4661771,"",4661771,"",2019-05-20T17:45:05,2019-05-20T17:45:05,"","",,0,,,
56226268,2,,56217655,2019-05-20T18:23:04,,0,,"<p>Updater.app is a macOS App Bundle. App Bundles are Apple's way of packaging a program - each one is basically just a folder containing an executable program and all the configuration files, helper executables, images, shipped libraries, and other resources the program needs to run. </p>&#xA;&#xA;<p>In your case, <code>Updater.app/Contents/MacOS/Electron</code> is probably the main executable of the app - <code>&lt;App&gt;/Contents/MacOS/</code> is usually the location of an App Bundle's main executable.</p>&#xA;&#xA;<p>For further reading, look over <a href=""https://stackoverflow.com/a/2119262/3776548"">this answer</a> which further explains the general concept of a macOS App Bundle. </p>&#xA;",3776548,"",,"",,2019-05-20T18:23:04,"","",,0,,,
56229114,2,,56227490,2019-05-20T22:51:58,,0,,"<pre><code>crypto.createCipher&#xA;</code></pre>&#xA;&#xA;<p>Your block mode (CBC) requires an IV, but you're using <code>createCipher</code> instead of <code>createCipheriv</code>.  I assume this is a typo since you're using <code>createDecipheriv</code>.</p>&#xA;",1718554,"",,"",,2019-05-20T22:51:58,"","",,0,,,
56231545,2,,56230197,2019-05-21T05:20:47,,0,,"<p>Reading cookies in electron is an asynchronous function. So its better to call the the function with a callback to return value. or else promisify the function.</p>&#xA;&#xA;<pre><code>    function getCookie(cname,callback) {&#xA;      var value = {&#xA;        name: cname&#xA;      };&#xA;      session.defaultSession.cookies.get(value, function (error, cookies) {&#xA;        let cookieStr = ''&#xA;        for (var i = 0; i &lt; cookies.length; i++) {&#xA;          let info = cookies[i];&#xA;          cookieStr += `${info.name}=${info.value};`;&#xA;          console.log(info.value, info.name);&#xA;          let somevalue = info.value;&#xA;        }&#xA;        callback(cookieStr);&#xA;      });&#xA;      //alert(somevalue); //alert 2&#xA;    }&#xA;&#xA;getCookie('test',function(returnValue){&#xA;//use the return value here&#xA;})&#xA;</code></pre>&#xA;",3502805,"",,"",,2019-05-21T05:20:47,"","",,0,,,
56241273,2,,56134605,2019-05-21T15:06:41,,0,,"<p>Without the specific size setting the page prints at the moment correct. So I removed these lines:</p>&#xA;&#xA;<pre class=""lang-css prettyprint-override""><code>@page {&#xA;  size: 210mm 297mm;&#xA;  margin: 15mm;&#xA;}&#xA;</code></pre>&#xA;",7866722,"",,"",,2019-05-21T15:06:41,"","",,0,,,
56048902,2,,56048594,2019-05-08T20:53:14,,2,,"<p>The truncation happens with CSS. You can override that CSS like this: </p>&#xA;&#xA;<pre><code>.example-tooltip-red1 {&#xA;  word-break: break-all !important;&#xA;  white-space: normal !important;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here is <a href=""https://stackblitz.com/edit/truncatedtooltips-pmkpdf?file=styles.css"" rel=""nofollow noreferrer"">your original example with the updated CSS</a>. </p>&#xA;&#xA;<p><strong>Note:</strong> I put the CSS into <code>style.css</code> and used the <code>!important</code> keyword, because I am not sure how the cascade works in Angular apps. You might want to avoid the <code>!important</code> keyword and put the CSS somewhere more appropriate.</p>&#xA;",1108891,"",1108891,"",2019-05-08T20:58:55,2019-05-08T20:58:55,"","",,1,,,
56101358,2,,56101185,2019-05-12T16:44:18,,0,,"<p>Onload application, you can save the <code>path</code> in <code>localstorage</code>, provided by <code>JavaScript</code></p>&#xA;&#xA;<p>this can help you!</p>&#xA;&#xA;<pre><code>  localStorage.setItem(""lastname"", ""Smith"");&#xA;  // Retrieve&#xA;  document.getElementById(""result"").innerHTML = localStorage.getItem(""lastname"");&#xA;</code></pre>&#xA;",5108695,"",,"",,2019-05-12T16:44:18,"","",,1,,,
56139305,2,,56139255,2019-05-14T22:11:41,,0,,"<p>First of <code>id</code> should be unique in the <code>DOM</code> so you need to fix that.</p>&#xA;&#xA;<p>Maybe switch to using <code>class</code> that will work.</p>&#xA;&#xA;<p>Then use <code>css</code> selector syntax.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const hello = document.querySelector('.thisisme[data-order=""1""]');&#xD;&#xA;hello.innerText = ""blabla""; </code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""thisisme"" data-order=""1""&gt;1&lt;/div&gt;&#xD;&#xA;&lt;div class=""thisisme"" data-order=""2""&gt;2&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",10787900,"",,"",,2019-05-14T22:11:41,"","",,1,,,
56172488,2,,56135600,2019-05-16T15:59:26,,1,,"<p>I think the way you have defined your column definitions are wrong.</p>&#xA;&#xA;<p>Structure of the data object</p>&#xA;&#xA;<pre><code>{&#xA;    time:element.Time,&#xA;    level:element.Level,&#xA;    desc:element.Description,&#xA;    logger:element.Logger,&#xA;    device:element.ExternalDevice &#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Structure of ColumnDefs</p>&#xA;&#xA;<pre><code>columnDefs = [&#xA;    {&#xA;        headerName: ""Description"", &#xA;        field: ""desc"",&#xA;        width: 500,&#xA;        minwidth: 200, &#xA;        filter: true&#xA;    },&#xA;    {&#xA;        headerName: ""ExternalDevice"", &#xA;        field: ""device"",&#xA;    },&#xA;    {&#xA;        headerName: ""Level"", &#xA;        field: ""level"",&#xA;        filter: true&#xA;    },&#xA;    {&#xA;        headerName: ""Logger"", &#xA;        field: ""logger"", &#xA;        filter:true&#xA;    },&#xA;    {&#xA;        headerName: ""Time"", &#xA;        field: ""time""&#xA;    },&#xA;];&#xA;</code></pre>&#xA;&#xA;<p>Here the field in column def should be matched with the property name in your data object</p>&#xA;",1783157,"",,"",,2019-05-16T15:59:26,"","",,1,,,
56045282,2,,55891290,2019-05-08T16:34:43,,2,,"<p>nodeIntegration is now disabled by default in 5.0.0 as per breaking changes document.</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/breaking-changes.md#planned-breaking-api-changes-50"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/breaking-changes.md#planned-breaking-api-changes-50</a></p>&#xA;&#xA;<p>and the release notes</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/releases/tag/v5.0.0"" rel=""nofollow noreferrer"">https://github.com/electron/electron/releases/tag/v5.0.0</a></p>&#xA;&#xA;<p>So you need to enable it :</p>&#xA;&#xA;<pre><code>const mainWindow = new BrowserWindow({&#xA;    webPreferences: { nodeIntegration: true }&#xA;  });&#xA;</code></pre>&#xA;",2727006,"",,"",,2019-05-08T16:34:43,"","",,2,,,
56215131,2,,56203693,2019-05-20T06:07:09,,1,,"<p>you have to pass the click event to the click handler function &#xA;like </p>&#xA;&#xA;<pre><code>&lt;button (click)=""saveProfile($event)"" id=""save-profile"" class=""profiles-save-btn-color""&gt;Save&#xA;                Profile&lt;/button&gt;&#xA;</code></pre>&#xA;&#xA;<p>and inside the script receive the event and prevent the default form submission using preventDefault()</p>&#xA;&#xA;<pre><code>  saveProfile(ev){&#xA;    ev.preventDefault();&#xA;&#xA;    let profile  = {&#xA;      fname : this.fname,&#xA;      lname : this.lname,&#xA;      shipping1 : this.shipping1,&#xA;      shipping2 : this.shipping2,&#xA;      city : this.city,&#xA;      zip : this.zip,&#xA;      country : this.country,&#xA;      state : this.state,&#xA;      cardholder : this.cardholder,&#xA;      cardnumber : this.cardnumber,&#xA;      expiry : this.expiry,&#xA;      cvv : this.cvv,&#xA;      profilename : this.profilename,&#xA;      email : this.email,&#xA;      phonenumber : this.phonenumber&#xA;    };&#xA;    this._electronService.ipcRenderer.send('profileCreated', JSON.stringify(profile));&#xA;    console.log('Success!')&#xA;  }&#xA;&#xA;</code></pre>&#xA;",3502805,"",3502805,"",2019-05-21T18:04:54,2019-05-21T18:04:54,"","",,2,,,
56221882,2,,56221771,2019-05-20T13:22:42,,1,,"<p>It is possible, but better to do function with mouse coordinates in the renderer side. because sending ipc messages like a stream may slow down the application.</p>&#xA;&#xA;<p>Following is an example how you can use ipc messages for this purpose.</p>&#xA;&#xA;<pre><code>(function() {&#xA;&#xA;&#xA;    const ipcRenderer = require('electron').ipcRenderer;&#xA;    document.onmousemove = handleMouseMove;&#xA;    function handleMouseMove(event) {&#xA;        var eventDoc, doc, body;&#xA;&#xA;        event = event || window.event; // IE-ism&#xA;&#xA;        // If pageX/Y aren't available and clientX/Y are,&#xA;        // calculate pageX/Y - logic taken from jQuery.&#xA;        // (This is to support old IE)&#xA;        if (event.pageX == null &amp;&amp; event.clientX != null) {&#xA;            eventDoc = (event.target &amp;&amp; event.target.ownerDocument) || document;&#xA;            doc = eventDoc.documentElement;&#xA;            body = eventDoc.body;&#xA;&#xA;            event.pageX = event.clientX +&#xA;              (doc &amp;&amp; doc.scrollLeft || body &amp;&amp; body.scrollLeft || 0) -&#xA;              (doc &amp;&amp; doc.clientLeft || body &amp;&amp; body.clientLeft || 0);&#xA;            event.pageY = event.clientY +&#xA;              (doc &amp;&amp; doc.scrollTop  || body &amp;&amp; body.scrollTop  || 0) -&#xA;              (doc &amp;&amp; doc.clientTop  || body &amp;&amp; body.clientTop  || 0 );&#xA;        }&#xA;&#xA;        // Use event.pageX / event.pageY here&#xA;        ipcRenderer.send('mouse-move',{ x : event.pageX , y : event.pageY });&#xA;    }&#xA;})();&#xA;</code></pre>&#xA;&#xA;<p>and in the main.js</p>&#xA;&#xA;<pre><code>const ipcMain= require('electron').ipcMain;&#xA;ipcMain.on('mouse-move', (event, arg) =&gt; {&#xA;  console.log(arg) // prints eg :""{ x: 0 , y : 0 }""&#xA;  event.sender.send('return-value', arg.x + arg.y);//for eg : adds x and y&#xA;})&#xA;&#xA;</code></pre>&#xA;&#xA;<p>and catch the return value in the renderer script</p>&#xA;&#xA;<pre><code>ipcRenderer.on('return-value', (event, arg) =&gt; {&#xA;  console.log(arg) // prints 0 ; x + y &#xA;  // Do what you want to do with the value&#xA;})&#xA;</code></pre>&#xA;",3502805,"",3502805,"",2019-05-21T07:01:19,2019-05-21T07:01:19,"","",,2,,,
56095485,2,,56091343,2019-05-12T01:13:54,,30,,"<p>It is unclear what version of <code>Electron</code> you are using. The syntax you are using is non-standard.</p>&#xA;&#xA;<p>First – if you are using <code>Electron</code> 5.0, <a href=""https://electronjs.org/blog/electron-5-0#security-improvements"" rel=""noreferrer"">nodeIntegration is false by default</a> in <code>BrowserWindows</code> so you need to specify it explicitly when you create your window:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;  width: 800,&#xA;  height: 600,&#xA;  webPreferences: {&#xA;    nodeIntegration: true&#xA;  }&#xA;})&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Given the above, the syntax below works fine (i.e. no 'window' reference needed):</p>&#xA;&#xA;<pre><code>const { ipcRenderer, remote } = require('electron');&#xA;</code></pre>&#xA;",840992,"",,"",,2019-05-12T01:13:54,"","",,3,,,
56152687,2,,56134297,2019-05-15T15:16:07,,1,,"<p><strong>TL;DR:</strong> <code>webContents.capturePage ()</code> won't include the cursor because the screenshot is not made on an OS-level.</p>&#xA;&#xA;<p>Electron takes the screenshot directly after Chromium has rendered it, which is also why the <code>rect</code> property to the function cannot be bigger than the window's inner width and height, i.e. the window decoration, such as titlebars, etc., cannot be included in the screenshot.</p>&#xA;&#xA;<p>What Electron does is to take the binary image data which is output to the graphics processor of your computer (and thus to your monitor), and writes it to a PNG or JPEG file.</p>&#xA;&#xA;<p>Including OS-specific elements such as cursors or window decorations would involve a platform-specific approach (as there is no unified API to take screenshots throughout Linux, Windows and Mac OS), which creates (possibly) more dependencies and more noise. The rendering done by the Chromium engine is platform-agnostic and thus the way easier approach.</p>&#xA;",6786876,"",,"",,2019-05-15T15:16:07,"","",,3,,,
47260078,2,,47259168,2017-11-13T08:43:01,,1,,"<p>now finally figure out the answer</p>&#xA;&#xA;<pre><code>const contextMenu = Menu.buildFromTemplate([&#xA;    { label: 'Active', type:'normal',role: 'front', click:function(){&#xA;                                                            win.show()&#xA;                                                      } &#xA;    },&#xA;    { label: 'Preferences', type: 'normal',click: try_click()},&#xA;    { label: 'Reload', type: 'normal', role: 'reload'},&#xA;    { label: 'Reload new', type: 'normal', role: 'reload'},&#xA;    { label: 'Quit', type: 'normal', role: 'quit' }&#xA;  ])&#xA;</code></pre>&#xA;",7261317,"",,"",,2017-11-13T08:43:01,"","",,0,,,
47271365,2,,47271240,2017-11-13T18:42:35,,2,,"<p>Two links and a google later I found the answer on this <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">github doc page</a> </p>&#xA;&#xA;<p>Since the offscreencanvas is a canvas related feature it is under a different flag called <code>experimentalCanvasFeatures</code></p>&#xA;&#xA;<p>In order to enable it I had to instantiate my browser window like so:</p>&#xA;&#xA;<pre><code>win = new BrowserWindow({&#xA;    width: 1200,&#xA;    height: 700,&#xA;    webPreferences: { experimentalCanvasFeatures: true }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>With <code>experimentalCanvasFeatures</code> instead of <code>experimentalFeatures</code>.</p>&#xA;&#xA;<p>This resulted in the following console output:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/AWfDO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AWfDO.png"" alt=""enter image description here""></a></p>&#xA;",665791,"",,"",,2017-11-13T18:42:35,"","",,0,,,
47313475,2,,47313197,2017-11-15T17:13:49,,0,,"<p>I worked it out through trial and error... making the assumption from all my other requires that 'it' starts by looking in the node_modules folder, the following ended up working:</p>&#xA;&#xA;<pre><code>require('../src/js/dropbox-content-hasher.js');&#xA;</code></pre>&#xA;&#xA;<p>Just thought I'd update this for anyone in my situation who doesn't quite know enough before embarking on a project!!</p>&#xA;",1170039,"",,"",,2017-11-15T17:13:49,"","",,0,,,
47320588,2,,47238688,2017-11-16T02:32:03,,0,,<p>If you develop for the desktop app only. You shouldn't worry about the compatibility issue and can use all the new features in new Chrome.</p>&#xA;,180197,"",,"",,2017-11-16T02:32:03,"","",,0,,,
47329707,2,,47316787,2017-11-16T12:29:54,,8,,"<p>First of all i followed this tutorial on the official Website of Typescript: <a href=""https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html"" rel=""noreferrer"">https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html</a></p>&#xA;&#xA;<p>If you follow every step you will end up with a dist folder that contains a bundle.js (with the bundled code that Webpack receives from Typescript) and a src folder that containes the .tsx files. Typescript supports React out of the box, just add <code>""jsx"": ""react""</code> to the tsconfig.json and renane your file <code>.tsx</code> instead of <code>.ts</code>. After that add index.js to the root folder(copied from here: <a href=""https://github.com/electron/electron-quick-start/blob/master/main.js"" rel=""noreferrer"">https://github.com/electron/electron-quick-start/blob/master/main.js</a>).</p>&#xA;&#xA;<p>Install electron locally <code>npm install electron --save-dev</code> or globally <code>npm install -g electron</code></p>&#xA;&#xA;<p>Run webpack with <code>webpack</code> while in the app folder (to generate the ./dist/bundle.js file)</p>&#xA;&#xA;<p>Run electron with <code>electron .</code> while in the app folder</p>&#xA;&#xA;<p>The important thing to notice is the entry point of webpack: its ./src/index.tsx while electron entry point is ./index.js. Electron load index.js that loads index.html that loads ./dist/bundle.js. We can transtale index.js to index.ts but then we would have to change the entry point of webpack.</p>&#xA;",8303828,"",,"",,2017-11-16T12:29:54,"","",,0,,,
47346525,2,,47244264,2017-11-17T08:47:55,,3,,"<p>I ended up using the ipcMain and ipcRenderer approach. In index.html </p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>&lt;script&gt;&#xD;&#xA;   document.querySelector('#submit').addEventListener('click', function() {&#xD;&#xA;&#xD;&#xA;    let username = document.getElementById(""username"").value;&#xD;&#xA;&#xD;&#xA;    const {ipcRenderer} = require('electron')&#xD;&#xA;&#xD;&#xA;    // send username to main.js &#xD;&#xA;    ipcRenderer.send('asynchronous-message', username )&#xD;&#xA;&#xD;&#xA;    // receive message from main.js&#xD;&#xA;    ipcRenderer.on('asynchronous-reply', (event, arg) =&gt; {&#xD;&#xA;      console.log(arg) &#xD;&#xA;&#xD;&#xA;    })&#xD;&#xA;&#xD;&#xA;    });&#xD;&#xA;&lt;/script&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>In main.js</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const {ipcMain} = require('electron')&#xD;&#xA;&#xD;&#xA;// receive message from index.html &#xD;&#xA;ipcMain.on('asynchronous-message', (event, arg) =&gt; {&#xD;&#xA;  console.log( arg );&#xD;&#xA;  &#xD;&#xA;  // send message to index.html&#xD;&#xA;  event.sender.send('asynchronous-reply', 'hello' );&#xD;&#xA;  });</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",6674414,"",,"",,2017-11-17T08:47:55,"","",,0,,,
47364865,2,,47364597,2017-11-18T10:13:25,,1,,"<p>The best way I know of to do this would be to use Node's <a href=""https://nodejs.org/api/child_process.html"" rel=""nofollow noreferrer"">Child Process</a> feature to execute it like you would from the command line.</p>&#xA;",6302461,"",,"",,2017-11-18T10:13:25,"","",,0,,,
47391340,2,,47274378,2017-11-20T11:49:25,,0,,"<p>In case anyone ever stumbles upon this, I ""solved"" the issue using MemoryRouter instead.</p>&#xA;",4240446,"",,"",,2017-11-20T11:49:25,"","",,0,,,
47400234,2,,47397078,2017-11-20T20:10:56,,1,,"<p>After another round of updating all the related builder packages (and adding a new dependency that popped up), I had to move the iconUrl out of the build key and into a squirrelWindows key and remove NSIS completely.  All good with this new config!</p>&#xA;",15689,"",,"",,2017-11-20T20:10:56,"","",,0,,,
47417803,2,,47417487,2017-11-21T16:19:15,,0,,"<p>Because <code>getAsObject()</code> returns an object with key and value fields, you can use the <code>Object.keys()</code> function to get an array of keys in your row, and then you can iterate over these keys using <code>forEach</code> like so:</p>&#xA;&#xA;<pre><code>var row = query.getAsObject();&#xA;&#xA;Object.keys(row).forEach(function(column) {&#xA;&#xA;    console.log(column); // Column Name&#xA;    console.log(row[column]); // Column Value&#xA;});&#xA;</code></pre>&#xA;",5006588,"",,"",,2017-11-21T16:19:15,"","",,0,,,
47437441,2,,47436194,2017-11-22T14:42:25,,2,,"<p>You have to use <strong>ipc</strong> communication.</p>&#xA;&#xA;<p>In the Main process:</p>&#xA;&#xA;<pre><code>ipcMain.on('asynchronous-message', (event, arg) =&gt; {&#xA;   //manage data&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>And in your modalWindow:</p>&#xA;&#xA;<pre><code>ipcRenderer.send('asynchronous-message', message)&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-main.md"" rel=""nofollow noreferrer"">ipcMain doc</a></p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md"" rel=""nofollow noreferrer"">ipcRenderer doc</a></p>&#xA;",6081475,"",6081475,"",2018-09-16T08:33:20,2018-09-16T08:33:20,"","",,0,,,
47451772,2,,47440798,2017-11-23T09:23:49,,2,,"<p>Your <code>this</code> points to the different context than component really is. You need to change your code to </p>&#xA;&#xA;<pre class=""lang-javascript prettyprint-override""><code>componentDidMount() {&#xA;    // When the document is rendered.&#xA;    const self = this;&#xA;    ipc.on('message', function (event, data) {&#xA;        // When the message is received...&#xA;        console.log('Message received');&#xA;        // ... change the state of this React component.&#xA;        self.setState({testValue: 'It worked!'});&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Or you may replace <code>function()</code> callback by <code>() =&gt; {}</code> because the first option changes the context of the execution.</p>&#xA;",8995391,"",70157,"",2018-10-20T22:14:46,2018-10-20T22:14:46,"","",,0,,,
47465064,2,,47464781,2017-11-24T01:03:58,,1,,"<p>I don't know about gulp in particular, but as it seems to be an npm module, you'll be able to install it locally with your electron app. In the terminal <code>cd</code> to your <code>electron/resources/app</code> folder and run</p>&#xA;&#xA;<pre><code>npm install gulp-cli -g&#xA;npm install gulp -D&#xA;</code></pre>&#xA;&#xA;<p>(as shown on <a href=""https://gulpjs.com/"" rel=""nofollow noreferrer"">https://gulpjs.com/</a>)</p>&#xA;&#xA;<p>You then should see a <code>node_modules</code> folder in the same directory, which contains the install of gulp. This can then be packaged in the same way as any other electron app.</p>&#xA;",3108477,"",,"",,2017-11-24T01:03:58,"","",,0,,,
47470650,2,,47196076,2017-11-24T09:55:54,,3,,"<p>My <em>stoned</em> cousin put   <code>clipboardWindow.setSize(config.WIDTH, Math.ceil(height), false);</code> at the last line of <code>ipc.on('dom-ready-command')</code> event.  </p>&#xA;&#xA;<p>Strangely enough, it fixed the issue with the incorrect height. Now it's pixel perfect </p>&#xA;",3073272,"",,"",,2017-11-24T09:55:54,"","",,0,,,
47476825,2,,47452645,2017-11-24T16:11:03,,3,,"<p>I've found the solution. It's possible to take proxy-settings inside the main process.</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({})&#xA;const ses = mainWindow.webContents.session;&#xA;ses.resolveProxy('url_you_need_to_achieve', (proxy) =&gt; {&#xA;    // do whatever you want with proxy string, that contains proxy-setting&#xA;});&#xA;</code></pre>&#xA;",8995391,"",,"",,2017-11-24T16:11:03,"","",,0,,,
47271705,2,,47271077,2017-11-13T19:06:03,,3,,"<p>Yes, you would try to write small classes/modules with typescript with each in their own file.</p>&#xA;&#xA;<p>But when you serve your app, you don't want the browser to load every file. So you need something to bundle your files and put them in one javascript file. Build tools help you with these (they also remove blank lines/unnecessary spacing and comments).</p>&#xA;&#xA;<p>Popular build tools are </p>&#xA;&#xA;<p><a href=""https://gruntjs.com/"" rel=""nofollow noreferrer"">https://gruntjs.com/</a></p>&#xA;&#xA;<p><a href=""https://github.com/webpack/webpack"" rel=""nofollow noreferrer"">https://github.com/webpack/webpack</a></p>&#xA;&#xA;<p>When you come from a c# background, grunt might seem more familiar than webpack to you.</p>&#xA;&#xA;<p>I use webpack.</p>&#xA;",2379376,"",,"",,2017-11-13T19:06:03,"","",,1,,,
47443763,2,,45885520,2017-11-22T20:57:05,,0,,"<p>I ended up having a flag which governs the ""closing"" behaviour</p>&#xA;&#xA;<pre><code>let allowQuitting = false;&#xA;</code></pre>&#xA;&#xA;<p>and handling the closing like this</p>&#xA;&#xA;<pre><code>function quitApp() {&#xA;  if (app) {&#xA;    allowQuitting = true;&#xA;    app.quit();&#xA;  }&#xA;}&#xA;function closeApp() {&#xA;  if (mainWindow &amp;&amp; !mainWindow.isDestroyed()) {&#xA;    mainWindow.hide();&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>On closing, I listen on closing events</p>&#xA;&#xA;<pre><code>function createWindow() {&#xA;  mainWindow.on('closed', function () {&#xA;    closeApp();&#xA;  });&#xA;&#xA;  mainWindow.on('close', event =&gt; {&#xA;    if (allowQuitting === false) {&#xA;      event.preventDefault();&#xA;      closeApp();&#xA;    }&#xA;  });&#xA;  ...&#xA;}&#xA;app.on('ready', createWindow);&#xA;</code></pre>&#xA;&#xA;<p>On activating, I first check if the window exists</p>&#xA;&#xA;<pre><code>app.on('activate', function () {&#xA;  if (mainWindow === null) {&#xA;    createWindow();&#xA;  } else {&#xA;    mainWindow.show();&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>The app can be closed using Cmd+Q due to the accelerator:</p>&#xA;&#xA;<pre><code>const template = [{&#xA;  label: 'Application',&#xA;  submenu: [&#xA;    ...&#xA;    {&#xA;      label: 'Quit', accelerator: 'Command+Q', click: () =&gt; quitApp()&#xA;    }&#xA;  ]&#xA;},&#xA;...&#xA;];&#xA;Menu.setApplicationMenu(Menu.buildFromTemplate(template));&#xA;</code></pre>&#xA;&#xA;<p>This gives me the desired result, albeit with a side-effect. The app can be closed with Cmd+Q, <strong>but can't be closed from the dock</strong> (by selecting Quit) or when shutting the system down (says it interrupted the shutdown).</p>&#xA;",2023525,"",,"",,2017-11-22T20:57:05,"","",,1,,,
47370824,2,,47370635,2017-11-18T20:42:44,,0,,"<p>I believe you actually shouldn't use a Squirrel events to handle this, as documentation stated:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Squirrel will spawn your app with command line flags on first run, updates, and uninstalls. it is very important that your app handle these events as early as possible, and quit immediately after handling them. &#xA;  Squirrel will give your app a short amount of time (~15sec) to apply these operations and quit.</p>&#xA;</blockquote>&#xA;&#xA;<p>Which isn't suitable for showing terms of use so I'd suggest having a boolean flag in the filesystem indicating if the user has accepted terms of use. Moreover, by storing a flag in filesystem you can avoid situations when your applications were restarted without reading terms of use.</p>&#xA;&#xA;<p><strong>UPDATE:</strong> You might want to use <a href=""https://github.com/electron-userland/electron-builder"" rel=""nofollow noreferrer"">electron-builder</a> instead, it supports license dialog for <a href=""https://www.electron.build/configuration/dmg#dmg-license"" rel=""nofollow noreferrer"">macOS</a> and <a href=""https://www.electron.build/configuration/nsis"" rel=""nofollow noreferrer"">Windows</a>.</p>&#xA;",6475535,"",6475535,"",2017-11-18T21:02:11,2017-11-18T21:02:11,"","",,2,,,
47430755,2,,47378160,2017-11-22T09:15:36,,1,,"<p>Additionally to the event order you found out, you can use the <code>modifiers</code> property of <code>sendInputEvents</code> argument to send shift/ctrl/alt etc. modifiers with the key input. <em>See <a href=""https://electronjs.org/docs/api/web-contents#contentssendinputeventevent"" rel=""nofollow noreferrer"">docs</a> for further details</em></p>&#xA;&#xA;<p>With the following code HTML can detect the shortcut you want:</p>&#xA;&#xA;<p><em>main.js</em></p>&#xA;&#xA;<pre><code>const {app, BrowserWindow, Menu} = require('electron')&#xA;const path = require('path')&#xA;&#xA;function sendKeybinding (win, keyCode) {&#xA;  let modifiers = []&#xA;  modifiers.push('shift') // 'control', 'meta', etc.&#xA;  win.webContents.sendInputEvent({ type: 'keyDown', modifiers, keyCode })&#xA;  win.webContents.sendInputEvent({ type: 'char', modifiers, keyCode })&#xA;  win.webContents.sendInputEvent({ type: 'keyUp', modifiers, keyCode })&#xA;}&#xA;&#xA;app.on('ready', function () {&#xA;  let win = new BrowserWindow()&#xA;  win.loadURL(path.resolve(__dirname, 'keybind.html'))&#xA;  const menuTemplate = [&#xA;    {&#xA;      label: 'Show Keymap',&#xA;      click (menuItem, browserWindow) {&#xA;        sendKeybinding(browserWindow, '?')&#xA;      }&#xA;    }&#xA;  ]&#xA;  const menu = Menu.buildFromTemplate(menuTemplate)&#xA;  Menu.setApplicationMenu(menu)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>keybind.html</em>&#xA;</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;&lt;body&gt;&#xA;&lt;p id=""demo""&gt;Pressed Key: &lt;/p&gt;&#xA;&lt;script&gt;&#xA;document.onkeypress = function (event) {&#xA;  var elem = document.getElementById(""demo"")&#xA;  elem.innerHTML = 'Pressed Key: ' + event.key&#xA;  if (event.shiftKey) elem.innerHTML += ' + Shift '&#xA;  if (event.ctrlKey) elem.innerHTML += ' + Ctrl '&#xA;  if (event.metaKey) elem.innerHTML += ' + Win/Cmd '&#xA;}&#xA;&lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2017-12-05T09:57:14,2017-12-05T09:57:14,"","",,2,,,
47436388,2,,45827709,2017-11-22T13:49:50,,8,,"<p>Instead of <code>onbeforeunload</code> prefer working with the event <code>close</code>. From this event, you'll be able to catch the closing event before the whole closure process is completed (event <code>closed</code>). With <code>close</code>, you'll be able to take the control and stop whenever you need the completion of the closure.</p>&#xA;&#xA;<p>This is possible when you create your BrowserWindow, preferably in the main process:</p>&#xA;&#xA;<pre><code>// Create the browser window.&#xA;window = new BrowserWindow({});&#xA;&#xA;// Event 'close'&#xA;window.on('close', (e) =&gt; {&#xA;    // Do your control here&#xA;    if (bToStop) {&#xA;        e.preventDefault();&#xA;    }&#xA;}&#xA;&#xA;// Event 'closed'&#xA;window.on('closed', (e) =&gt; {&#xA;    // Fired only if you didn't run the line e.preventDefault(); above!&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In addition, be aware that the function <code>e.preventDefault()</code> is spreading in the whole code. If you need to be back to the natural behaviour of Electron, you need to toggle the variable <code>e.defaultPrevented</code> to <code>false</code>.</p>&#xA;&#xA;<p>Actually, it seems <code>e.preventDefault()</code> function is handling the variable <code>e.defaultPrevented</code> to <code>true</code> until any change on it.</p>&#xA;",7991036,"",,"",,2017-11-22T13:49:50,"","",,3,,,
47329880,2,,47328926,2017-11-16T12:40:12,,0,,"<p>In the menuItem click there is a argument for the current <code>browserWindow</code>.</p>&#xA;&#xA;<p>To set the x and y position you can use <code>window.setPosition(x, y)</code>.</p>&#xA;&#xA;<p>So your menuItem code would be something like this:</p>&#xA;&#xA;<pre><code>{&#xA;    label:   'right',&#xA;    role:    '25%',&#xA;    type:    'checkbox',&#xA;    checked: true,&#xA;    click:   function (item, focusedWindow) {&#xA;        console.log('25%');&#xA;        focusedWindow.setPosition(10, 10);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/browser-window/#winsetpositionx-y-animate"" rel=""nofollow noreferrer"">window.setPosition</a></p>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/menu-item/#new-menuitemoptions"" rel=""nofollow noreferrer"">menuItem arguments</a></p>&#xA;",6577664,"",,"",,2017-11-16T12:40:12,"","",,5,,,
47312066,2,,47308873,2017-11-15T16:04:06,,0,,"<p>You could instead of letting electron make the window make the window yourself like what it says further down in the documentation.</p>&#xA;&#xA;<p>Then you could store a reference to the window variable and do things with it like this:</p>&#xA;&#xA;<pre><code>var newWindow;&#xA;&#xA;myBrowserWindow.webContents.on('new-window', (event, url) =&gt; {&#xA;  event.preventDefault()&#xA;  const win = new BrowserWindow({show: false})&#xA;  win.once('ready-to-show', () =&gt; win.show())&#xA;  win.loadURL(url)&#xA;  event.newGuest = win&#xA;  newWindow      = win;&#xA;})&#xA;&#xA;// Do something with the window.&#xA;newWindow.hide();&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/web-contents/#event-new-window"" rel=""nofollow noreferrer"">Documentation</a></p>&#xA;",6577664,"",,"",,2017-11-15T16:04:06,"","",,9,,,
42184077,2,,42168027,2017-02-12T04:00:18,,0,,"<p>I found out whats wrong. In my package.json file its mentioned as <strong>""main"": ""index.js""</strong> but im my app the actual main file is called main.js.</p>&#xA;",3276292,"",,"",,2017-02-12T04:00:18,"","",,0,,,
42185484,2,,42185240,2017-02-12T08:11:03,,0,,"<p>HTML:</p>&#xA;&#xA;<pre><code>&lt;button onclick=""open_txt()""&gt;Show file&lt;/button&gt;&#xA;</code></pre>&#xA;&#xA;<p>JS:</p>&#xA;&#xA;<pre><code>var app = require('electron').remote; &#xA;function open_txt(){&#xA;  app.shell.openExternal('yourfile.txt');&#xA;}&#xA;</code></pre>&#xA;",4566898,"",,"",,2017-02-12T08:11:03,"","",,1,,,
42380695,2,,42369547,2017-02-22T00:42:50,,0,,"<p><a href=""https://github.com/electron-userland/electron-builder"" rel=""nofollow noreferrer"">Electron-builder</a> is supposed to be able to do that through specifying the <a href=""https://github.com/electron-userland/electron-builder/wiki/Options#FileAssociation"" rel=""nofollow noreferrer"">FileAssociation</a>.  I've read of various issues with this but haven't needed it myself yet– if it works for you, please report back.</p>&#xA;&#xA;<p>There is also the Windows only <a href=""https://github.com/Tympanix/electron-regedit"" rel=""nofollow noreferrer"">electron-regedit</a> node module:</p>&#xA;&#xA;<blockquote>&#xA;  <p>""File associations, file icons &amp; open with... for electron apps</p>&#xA;  &#xA;  <p>This module allows you to register your app in the windows registry,&#xA;  manipulate context menus &amp; handle native open, edit, print, preview&#xA;  actions ect.""</p>&#xA;</blockquote>&#xA;&#xA;<p>However for Google drive you might be looking at registering a protocol and url scheme. There is support for that <a href=""https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#protocol"" rel=""nofollow noreferrer"">electron-packager</a></p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>protocol</strong></p>&#xA;  &#xA;  <p><em>Array of Strings</em></p>&#xA;  &#xA;  <p>The URL protocol scheme(s) to associate the app with. For example,&#xA;  specifying myapp would cause URLs such as myapp://path to be opened&#xA;  with the app. Maps to the CFBundleURLSchemes metadata property. This&#xA;  option requires a corresponding protocol-name option to be specified.</p>&#xA;  &#xA;  <p><strong>protocol-name</strong></p>&#xA;  &#xA;  <p><em>Array of Strings</em></p>&#xA;  &#xA;  <p>The descriptive name(s) of the URL protocol scheme(s) specified via&#xA;  the protocol option. Maps to the CFBundleURLName metadata property.</p>&#xA;</blockquote>&#xA;",840992,"",840992,"",2017-02-22T00:49:17,2017-02-22T00:49:17,"","",,0,,,
42189500,2,,42189421,2017-02-12T15:35:16,,1,,"<p>You should use <code>testDatabase.all</code> function to get all your rows at once. For example:</p>&#xA;&#xA;<pre><code>testDatabase.all('SELECT * from test_accounts',callback)&#xA;</code></pre>&#xA;&#xA;<p><em>Please see the documentation:</em></p>&#xA;&#xA;<blockquote>&#xA;  <p>Runs the SQL query with the specified parameters and calls the callback with all result rows afterwards.&#xA;  <a href=""https://github.com/mapbox/node-sqlite3/wiki/API#databaseallsql-param--callback"" rel=""nofollow noreferrer"">https://github.com/mapbox/node-sqlite3/wiki/API#databaseallsql-param--callback</a></p>&#xA;</blockquote>&#xA;&#xA;<p><em>One more note:</em> In NodeJS, when you call to callback functions it's recommended to use the first returned value as <code>null</code> or the <code>error</code> value.</p>&#xA;&#xA;<pre><code>function useTable(err,table){&#xA;  if (err){&#xA;     throw Err&#xA;  }&#xA;  else {&#xA;     // Do something with the data&#xA;  }&#xA;}&#xA;&#xA;getTable(useTable)&#xA;</code></pre>&#xA;",1229624,"",,"",,2017-02-12T15:35:16,"","",,0,,,
42245491,2,,37832649,2017-02-15T09:33:48,,1,,"<p>I solve it with <a href=""https://www.npmjs.com/package/form-data"" rel=""nofollow noreferrer"">form-data</a> library:</p>&#xA;&#xA;<pre><code>var FormData = require('form-data');&#xA;var form = new FormData();&#xA;var fs = require('fs');&#xA;form.append( 'email', email );&#xA;form.append( 'foo', 'bar' );&#xA;form.append('logo', fs.createReadStream(fileOnDisk)); // attach file&#xA;form.submit(url, function(err, res) { ... }&#xA;</code></pre>&#xA;",6012070,"",,"",,2017-02-15T09:33:48,"","",,0,,,
42277155,2,,42267968,2017-02-16T14:45:24,,1,,"<p>Install <a href=""https://www.npmjs.com/package/asar"" rel=""nofollow noreferrer"">asar</a> locally as a project dependency, <code>cd</code> to your project directory and run:</p>&#xA;&#xA;<p><code>$ npm install asar --save-dev</code></p>&#xA;&#xA;<p>Change your <a href=""https://docs.npmjs.com/misc/scripts"" rel=""nofollow noreferrer"">npm-script</a> to the following:</p>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>""scripts"": {&#xA;  ""create-asar"": ""node_modules/.bin/asar pack app app.asar""&#xA;},&#xA;</code></pre>&#xA;&#xA;<p><strong>Note:</strong> <code>asar</code> is being executed via the local <code>node_modules/.bin</code> folder.</p>&#xA;&#xA;<p>Then run <code>$ npm run create-asar</code> and subsequently check whether it unpacks successfully.</p>&#xA;",1611459,"",1611459,"",2017-02-16T15:00:30,2017-02-16T15:00:30,"","",,1,,,
42288890,2,,42285345,2017-02-17T03:31:00,,1,,"<p>To initialize the WSL subsystem, you must launch a (hidden) Bash <em>console window</em> <em>in the background</em>, which doesn't work if you execute <code>bash.exe</code> <em>directly</em> - it works with neither <code>exec</code> nor <code>execFile</code>.</p>&#xA;&#xA;<p>The trick is to get the shell (<code>cmd</code>) process that Node.js spawns to launch <code>bash.exe</code> <em>without blocking</em>, which, unfortunately, isn't easy to do: <code>start</code> cannot be used, because <code>bash.exe</code> is a <em>console</em> application and therefore makes <code>start</code> act <em>synchronously</em>.</p>&#xA;&#xA;<p>The solution is to create an aux. VBScript file that launches <code>bash.exe</code>, which itself can be invoked asynchronously via <code>wscript.exe</code>. Note that the Bash console window is launched <em>hidden</em>:</p>&#xA;&#xA;<pre><code>var os = require('os')&#xA;var exec = require('child_process').exec&#xA;if (os.platform() === 'win32') {&#xA;  var cmd_win = '\&#xA;    echo  WScript.CreateObject(""Shell.Application"").\&#xA;      ShellExecute ""bash"", """", """", ""open"", 0 &gt; %temp%\launchBashHidden.vbs \&#xA;    &amp; wscript %temp%\launchBashHidden.vbs'&#xA;  exec(cmd_win, function(error, stdout, stderr){&#xA;      if (error) console.error(error)&#xA;  });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Note that the aux. VBScript file <code>%temp%\launchBashHidden.vbs</code> lingers between invocations. Cleaning it up after every run would require more work (you can't just delete it right away, because <code>wscript</code>, due to running asynchronously, may not have loaded it yet).</p>&#xA;",45375,"",45375,"",2017-02-17T03:57:22,2017-02-17T03:57:22,"","",,0,,,
42310097,2,,42239827,2017-02-18T01:33:39,,1,,"<p>I had a similar requirement for my current project and i've noticed that when you use this api , you can customize how the pdf will be rendered by adding a css file to your main html with the media query set to print <code>media=""print""</code>.</p>&#xA;&#xA;<p>this css stylesheet will be applied only if you print something or export it to pdf via the api method <code>printToPdf()</code>.</p>&#xA;&#xA;<p>if you are using some ui kit like photon or bootstrap , try to disable it and see if it helps.</p>&#xA;&#xA;<p>last tip: try to use the css property <code>page-break-before: always;</code> </p>&#xA;&#xA;<p>Hope this helps</p>&#xA;",4778342,"",,"",,2017-02-18T01:33:39,"","",,0,,,
42317610,2,,42317252,2017-02-18T16:20:35,,1,,"<p>Okay @adelphus gave me the correct hint. I outputted the path with <code>console.log(__dirname)</code> and it was not what I expected: Yes, I have been in the wrong path, because I thought the relative path <code>require()</code> takes is the one relative to the file I am currently working in (which was the tournament.js) and this is not the case.</p>&#xA;&#xA;<p>Instead <code>require()</code> takes the path relative from the app root which in this case was <code>./app/models/model.js</code></p>&#xA;",1055925,"",,"",,2017-02-18T16:20:35,"","",,2,,,
42320205,2,,42320121,2017-02-18T20:16:01,,1,,<p>Simply export in renderTemplates.js</p>&#xA;&#xA;<pre><code>var render = function(json) {&#xA;  console.log(json);&#xA;   ...&#xA;}&#xA;module.exports = {&#xA;    render: render&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then you can use <code>renderer.render()</code> as you do in your main script.</p>&#xA;,3993662,"",,"",,2017-02-18T20:16:01,"","",,0,,,
42320653,2,,42315091,2017-02-18T21:01:06,,1,,<p>I simply use <code>var d3 = require('d3');</code> at the top of any jsx file that requires d3. This works for both of the electron + d3 based apps that I am currently working on.</p>&#xA;,1999103,"",,"",,2017-02-18T21:01:06,"","",,2,,,
42377922,2,,42374989,2017-02-21T21:03:00,,1,,<p>Try adding something like this to main.js:</p>&#xA;&#xA;<pre><code>const server = require('./scripts/server');&#xA;</code></pre>&#xA;,5693223,"",,"",,2017-02-21T21:03:00,"","",,0,,,
42366304,2,,42357096,2017-02-21T11:40:21,,2,,"<p>You should be able to start an express server in your Electron startup script. Just have it listen on some random port number and have your Angular2 app hit <a href=""http://localhost:port"" rel=""nofollow noreferrer"">http://localhost:port</a> URL for all of its http requests.</p>&#xA;&#xA;<p>My advice would be to split the original Angular2 app into two separate apps:</p>&#xA;&#xA;<ol>&#xA;<li><p>Keep your express routes the way they are, and move them into their own dedicated API. Host the API somewhere and give it its own URL.</p></li>&#xA;<li><p>Have the Electron app hit the API URL for all database related calls.</p></li>&#xA;</ol>&#xA;&#xA;<p>This would give you separation of concerns and make the system easier to manage. In addition, your API would be available for other apps to use in the future. For instance, let's say you have to do a mobile app next, the mobile app could take advantage of the existing API and you save yourself a lot of work. </p>&#xA;",5693223,"",5693223,"",2017-02-21T11:45:28,2017-02-21T11:45:28,"","",,1,,,
42161291,2,,42157554,2017-02-10T14:03:38,,3,,"<p>After trying full installation process on a different computer I found an issue causing this problem. In install instructions it is stated that <strong>""VS 2015 Express for Windows Desktop""</strong> is needed. However, Visual Studio itself is not enough and when installing a person has to install <strong>Windows 10 SDK</strong> as well.</p>&#xA;&#xA;<p>Retrospectively it seems obvious but for someone new to JS-native-related technologies, it might be useful to explicitly declare this in README. :)</p>&#xA;",3237372,"",,"",,2017-02-10T14:03:38,"","",,0,,,
42259393,2,,42102086,2017-02-15T20:28:42,,3,,"<p>It appears that I can achieve what I'm looking for using <a href=""https://www.npmjs.com/package/bonjour"" rel=""nofollow noreferrer"">bonjour</a> and <a href=""http://socket.io"" rel=""nofollow noreferrer"">socket.io</a>.  I will use bonjour to publish http services and to browse these services.  I will use socket.io and socket.io-client to emit and listen for events from local clients and external servers.</p>&#xA;",5178406,"",,"",,2017-02-15T20:28:42,"","",,2,,,
42279905,2,,42277191,2017-02-16T16:43:59,,3,,"<p>Well, it was pretty obvious. I just had to combine the two:</p>&#xA;&#xA;<pre><code>!macro customInstall&#xA;  ExecWait '""$INSTDIR\resources\DPInst.exe"" /sw'&#xA;!macroend&#xA;</code></pre>&#xA;",106623,"",106623,"",2017-02-16T16:50:11,2017-02-16T16:50:11,"","",,1,,,
42344488,2,,42319964,2017-02-20T12:21:48,,3,,"<p>As a summary of my comment, <code>ipc</code> channel can be used only after <code>webContents</code> are setup successfully. Therefore, you should place your <code>send</code> call in a callback which ensures that <code>ipc</code> channel is in service.</p>&#xA;&#xA;<p>In <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentssendchannel-arg1-arg2-"" rel=""nofollow noreferrer"">documentation</a> of <code>send</code> example code is doing the same thing:&#xA;</p>&#xA;&#xA;<pre><code>// In the main process.&#xA;const {app, BrowserWindow} = require('electron')&#xA;let win = null&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  win = new BrowserWindow({width: 800, height: 600})&#xA;  win.loadURL(`file://${__dirname}/index.html`)&#xA;  win.webContents.on('did-finish-load', () =&gt; {&#xA;    win.webContents.send('ping', 'whoooooooh!')&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",2550156,"",,"",,2017-02-20T12:21:48,"","",,0,,,
42239212,2,,42238984,2017-02-15T01:24:42,,7,,"<p>You are losing the bind of <code>this</code> to your method.</p>&#xA;&#xA;<p>Change from this:</p>&#xA;&#xA;<pre><code>setTimeout(this.talk, 5000, 'hello again');&#xA;</code></pre>&#xA;&#xA;<p>to this:</p>&#xA;&#xA;<pre><code>setTimeout(this.talk.bind(this), 5000, 'hello again');&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>When you pass <code>this.talk</code> as a function argument, it takes <code>this</code> and looks up the method <code>talk</code> and passes a reference to that function.  But, it only passes a reference to that function.  There is no longer any association with the object you had in <code>this</code>.  <code>.bind()</code> allows you to pass a reference to a tiny stub function that will keep track of <code>this</code> and call your method as <code>this.say()</code>, not just as <code>say()</code>.</p>&#xA;&#xA;<p>You can see the same thing if you just did this:</p>&#xA;&#xA;<pre><code>const talker = new Talker();'&#xA;&#xA;const fn = talker.say;&#xA;fn();&#xA;</code></pre>&#xA;&#xA;<p>This would generate the same issue because assigning the method to <code>fn</code> takes no associate to <code>talker</code> with it at all.  It's just a function reference without any association with an object.  In fact:</p>&#xA;&#xA;<pre><code>talker.say === Talker.prototype.say&#xA;</code></pre>&#xA;&#xA;<p>What <code>.bind()</code> does is create a small stub function that will save the object value and will then call your method using that object.</p>&#xA;",816620,"",816620,"",2017-02-15T01:29:37,2017-02-15T01:29:37,"","",,1,,,
42228314,2,,37927929,2017-02-14T14:08:34,,9,,"<p>Here is a Solution for Electron &lt;= 1.2.1 version</p>&#xA;&#xA;<p>1- In your app folder</p>&#xA;&#xA;<pre><code>npm install --save-dev electron-react-devtools&#xA;</code></pre>&#xA;&#xA;<p>2- Open your electron app, click on (view/toggle developer tools). In the <strong>console</strong> tab insert the following code and <strong>hit enter</strong>:</p>&#xA;&#xA;<pre><code> require('electron-react-devtools').install()&#xA;</code></pre>&#xA;&#xA;<p>3- Reload/refresh your electron app page and you'll see the react dev tools appear.</p>&#xA;&#xA;<p>4- Done!</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>See screen shots bellow</strong></p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/RWPL3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RWPL3.png"" alt=""Paste/type code on console tab""></a></p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/WBuNa.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WBuNa.png"" alt=""hit enter""></a></p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/3UPIu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3UPIu.png"" alt=""react dev tools enabled""></a></p>&#xA;",5701672,"",5701672,"",2019-08-22T14:19:24,2019-08-22T14:19:24,"","",,2,,,
42304645,2,,36941605,2017-02-17T18:03:57,,9,,"<p><strong>Solution:</strong></p>&#xA;&#xA;<p>I had to install wine on my OSX. Otherwise it is not possible to build the windows exe with the --icon tag. Why? Because electron-packager uses node-rcedit for that, which requires wine.</p>&#xA;&#xA;<p>in my package.json:</p>&#xA;&#xA;<pre><code>""pack:osx"": ""electron-packager . $npm_package_productName --out=dist/osx --platform=darwin --arch=x64 --icon=assets/build/osx/icon.icns &amp;&amp; npm run codesign"",&#xA;""pack:win32"": ""electron-packager . $npm_package_productName --out=dist/win --platform=win32 --arch=ia32"",&#xA;""pack:win64"": ""electron-packager . $npm_package_productName --out=dist/win --platform=win32 --arch=x64 --version=0.36.2 app-version=1.0 --icon=assets/build/win/icon.ico"",&#xA;""build"": ""npm run pack:osx &amp;&amp; npm run pack:win32 &amp;&amp; npm run pack:win64""&#xA;</code></pre>&#xA;&#xA;<p><code>npm run build</code> to start the process..</p>&#xA;",2866757,"",,"",,2017-02-17T18:03:57,"","",,4,,,
42345695,2,,42342048,2017-02-20T13:21:42,,10,,"<p>There are a few ""non-futureproof"" ways to check if an app was built on Electron and they vary depending of the OS.</p>&#xA;&#xA;<p>You will need to go in your application folder (for example <code>Applications</code> for macOS, <code>Program Files</code> for Windows or <code>/usr/share</code> for Linux...</p>&#xA;&#xA;<p>Here are some examples of the files/directory you may find in your application folder:</p>&#xA;&#xA;<h3> Linux / Win32</h3>&#xA;&#xA;<p>These two OS have basically the same structure, so it's pretty easy to check what you want</p>&#xA;&#xA;<ul>&#xA;<li><code>locales/</code></li>&#xA;<li><code>resources/</code></li>&#xA;<li><code>content_resources_200_percent.pak</code></li>&#xA;<li><code>content_shell.pak</code></li>&#xA;<li><code>blink_image_resources_200_percent.pak</code></li>&#xA;<li><code>icudtl.dat</code></li>&#xA;</ul>&#xA;&#xA;<p>There are also some files like </p>&#xA;&#xA;<ul>&#xA;<li><code>libffmpeg.so</code> / <code>ffmpeg.dll</code></li>&#xA;<li><code>libnode.so</code> / <code>node.dll</code></li>&#xA;</ul>&#xA;&#xA;<p>depending of the OS you're on.</p>&#xA;&#xA;<h3> macOS</h3>&#xA;&#xA;<p>It's a bit more complicated here. You might need to check the <code>Info.plist</code> file to see if there is any reference to Electron.</p>&#xA;&#xA;<p>As unseen_damage said, you can also check in <code>[app folder]/Contents/Resources</code> if there is an <code>app.asar</code> as .asar files are specifically created for Electron.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Anyway, all those files may see their names changes someday, <strong>so don't consider them as a reliable way to check if ""any"" app is built on Electron</strong>, it's more of a manual way to check it.</p>&#xA;",3766528,"",3766528,"",2017-02-21T11:23:00,2017-02-21T11:23:00,"","",,1,,,
42260582,2,,42260524,2017-02-15T21:39:38,,17,,"<p><code>readdir</code> is asynchronous. It won't get the result right away. You should log the <code>filePaths</code> inside the callback. The only reason why the console show the value is because the console evaluate the array when you unfold it.</p>&#xA;&#xA;<p>When you press the little arrow on the left, put the mouse on the <code>i</code> box on the right. What happen is that the console keeps a reference to the array, so when the user unfold the array it then show what its current value is. But when you log <code>filePaths.length</code> the array is empty because <code>readdir</code> didn't finish reading yet that's why you get 0. But by the time you open the console and press that arrow, <code>readdir</code> will already be done reading and the console will print the current value of the array (after it been filled).</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/f6WTT.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/f6WTT.jpg"" alt=""enter image description here""></a></p>&#xA;&#xA;<p><strong>Example to demonstrate the problem: (not a solution, it's just to understand what is really happening)</strong></p>&#xA;&#xA;<p>Try and run this code and see what happen:</p>&#xA;&#xA;<pre><code>var arr = [];&#xA;setTimeout(function() {&#xA;  arr.push(1, 2, 3);&#xA;}, 5000);&#xA;console.log(arr.length);&#xA;console.log(arr);&#xA;</code></pre>&#xA;&#xA;<p>Here the array and it's length are both logged before the array is filled. The array will be filled after 5 seconds. So the output will be <code>0</code> and a string <code>array[]</code>. Now because arrays could have tons of data, the console won't show that data untill the user unfold the array. So what the console does is keep a reference to the array untill the user press unfold arrow. If you unfold the array before 5 seconds you see that the array is empty (not filled yet). If you wait untill the 5 seconds pass then unfold it, then you'll see that it's filled.</p>&#xA;&#xA;<p><strong>Note:</strong> Also, the line that get logged to the console (something like <code>&gt; Array(0)</code>) is just a string representation of the object/array at the moment the log happens. It won't get updated if the object/array changes. So that also may seem <a href=""https://stackoverflow.com/q/49806535/6647153""><strong>confusing</strong></a> sometimes.</p>&#xA;&#xA;<p>I hope it's clear now.</p>&#xA;",9867451,"",9867451,"",2018-05-07T14:38:23,2018-05-07T14:38:23,"","",,7,,,
42294262,2,,42292608,2017-02-17T09:33:36,,20,,"<p>As far as I know there is no event emitted from <code>app</code> before <code>ready</code> (only exception is <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#event-will-finish-launching"" rel=""noreferrer""><code>will-finish-launching</code></a> available only on macOS).</p>&#xA;&#xA;<p>Furthermore, you cannot open any <code>BrowserWindow</code> before <code>app</code> is <code>ready</code>, so you should really wait it.</p>&#xA;&#xA;<p>However, if your main application window loading very slow, you can still open a ""loading window"" before that and switch them when your main window is ready.</p>&#xA;&#xA;&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow } = require('electron')&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  let main = null&#xA;  let loading = new BrowserWindow({show: false, frame: false})&#xA;&#xA;  loading.once('show', () =&gt; {&#xA;    main = new BrowserWindow({show: false})&#xA;    main.webContents.once('dom-ready', () =&gt; {&#xA;      console.log('main loaded')&#xA;      main.show()&#xA;      loading.hide()&#xA;      loading.close()&#xA;    })&#xA;    // long loading html&#xA;    main.loadURL('http://spacecrafts3d.org')&#xA;  })&#xA;  loading.loadURL('loding.html')&#xA;  loading.show()&#xA;})&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><sup><em>You can use <code>win.on('ready-to-show')</code> instead of <code>win.webContents.on('dom-ready')</code> everywhere if you want to eliminate visual flash (but losing some speed)</em></sup></p>&#xA;&#xA;<hr>&#xA;&#xA;<p><code>window.open()</code></p>&#xA;&#xA;<p>If you want to do the same for <code>BrowserWindow</code> opened in renderer process by <code>window.open()</code>, you can use <code>new-window</code> event of <code>webContents</code> if <code>nativeWindowOpen</code> is <code>true</code></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>main = new BrowserWindow({&#xA;  webPreferences: {&#xA;    nativeWindowOpen: true&#xA;  }&#xA;})&#xA;main.webContents.on('new-window', (event, url) =&gt; {&#xA;  // there are more args not used here&#xA;  event.preventDefault()&#xA;  const win = new BrowserWindow({show: false})&#xA;  win.webContents.once('dom-ready', () =&gt; {&#xA;    win.show()&#xA;    loading.hide() // don't destroy in this case&#xA;  })&#xA;  win.loadURL(url)&#xA;  loading.show()&#xA;  event.newGuest = win&#xA;})&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2018-10-09T12:49:24,2018-10-09T12:49:24,"","",,2,,,
44935051,2,,44920786,2017-07-05T20:04:39,,0,,"<p>If you launch your Electron app with <code>--remote-debugging-port=9222</code> then you will enable remote debugging via Chrome DevTools protocol. You can use a Chrome developer tools instance as a client, or use one of the clients here: <a href=""https://github.com/ChromeDevTools/awesome-chrome-devtools#chrome-devtools-protocol"" rel=""nofollow noreferrer"">https://github.com/ChromeDevTools/awesome-chrome-devtools#chrome-devtools-protocol</a></p>&#xA;&#xA;<p>The debuggable Chrome instance will be running on <code>localhost:9222</code>. Which means as long as you are trying to debug from the same machine you are fine. However if you want to debug from a remote machine you need some additional setup.</p>&#xA;&#xA;<p>Setup an SSH tunnel on the source machine:</p>&#xA;&#xA;<p><code>ssh -L 0.0.0.0:9223:localhost:9222 localhost -N</code></p>&#xA;&#xA;<p>This will accept incoming traffic on the <code>9223</code> port and route it to Chrome remote debugging.</p>&#xA;&#xA;<p>Then on your client machine use the address: <code>source-machine-ip:9223</code> to access the remote debugging.</p>&#xA;&#xA;<p>Note: This may not work on Windows without additional SSH setup as SSH is not prepackaged with Windows.</p>&#xA;",1974829,"",,"",,2017-07-05T20:04:39,"","",,0,,,
44935282,2,,44880926,2017-07-05T20:19:02,,0,,"<p>By referencing the directory as <code>./folder_name</code> you are essentially telling the application to download to the <a href=""https://en.wikipedia.org/wiki/Working_directory"" rel=""nofollow noreferrer"">working directory</a>. In this case, the working directory is the folder that the program is contained in. While developing and using the <code>electron</code> command, the working directory is the root of your application. However once installed and running as a <code>.exe</code>, the working directory changes to the location of the executable.</p>&#xA;&#xA;<p>To solve this problem, do not use the current working directory. Instead use the user / application data folder to store this information. It is not only a consistent location across development and deployment, but it is also the semantically correct place to store application data.</p>&#xA;&#xA;<p>In Electron you can get the path to the application data folder for your app with:</p>&#xA;&#xA;<pre><code>const {app} = require('electron');&#xA;app.getPath('userData')&#xA;</code></pre>&#xA;&#xA;<p>So your code should look something like this:</p>&#xA;&#xA;<pre><code>var userData = app.getPath('userData');&#xA;fs.createReadStream(`${userData}/Report.zip`).pipe(unzip.Extract({ path: `${userData}/${folderName}` }));&#xA;LoginWindow.loadURL(`file://${userData}/${folderName}/t01s01q01.html`);&#xA;</code></pre>&#xA;",1974829,"",,"",,2017-07-05T20:19:02,"","",,5,,,
45023970,2,,45007998,2017-07-11T01:31:20,,0,,"<p><strong>Yes, a child_process can also be a ""parent"" and fork another child_process</strong>. OP's problem must be elsewhere. Consider these three files:</p>&#xA;&#xA;<p><strong>1.js</strong></p>&#xA;&#xA;<pre><code>const cp = require(""child_process"");&#xA;const path = require(""path"");&#xA;&#xA;console.log(`[f1] 1 has started; now forking 2...`);&#xA;&#xA;let f2 = cp.fork(path.normalize(`${__dirname}\\2`));&#xA;&#xA;f2.on(""message"", (message) =&gt; {&#xA;  console.log(`[f2] ${message}`);&#xA;});&#xA;&#xA;f2.on(""exit"", () =&gt; {&#xA;  console.log(`[f1] f2 just exited, so 1 is too.`);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>2.js</strong></p>&#xA;&#xA;<pre><code>const cp = require(""child_process"");&#xA;const path = require(""path"");&#xA;&#xA;process.send(`This is 2 starting up; now forking 3`);&#xA;&#xA;let f3 = cp.fork(path.normalize(`${__dirname}\\3`));&#xA;&#xA;f3.on(""message"", (message) =&gt; {&#xA;  console.log(`[f3] ${message}`);&#xA;});&#xA;&#xA;f3.on(""exit"", () =&gt; {&#xA;  console.log(`[f2] f3 just exited, so I am too.`);&#xA;  process.exit();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>3.js</strong></p>&#xA;&#xA;<pre><code>process.send(`This is 3 starting up, and now shutting down`);&#xA;process.exit();&#xA;</code></pre>&#xA;&#xA;<p>Running ""node 1.js"" produces the following output, which proves that 2.js can be both a child process of 1.js as well as the parent of 3.js</p>&#xA;&#xA;<pre><code>[f1] 1 has started; now forking 2...&#xA;[f2] This is 2 starting up; now forking 3&#xA;[f3] This is 3 starting up, and now shutting down&#xA;[f2] f3 just exited, so I am too.&#xA;[f1] f2 just exited, so 1 is too.&#xA;</code></pre>&#xA;",1884386,"",,"",,2017-07-11T01:31:20,"","",,1,,,
45039022,2,,45037313,2017-07-11T15:40:04,,0,,"<p><strong>RESOLVED</strong></p>&#xA;&#xA;<p>My button was labeled as ""type='submit'"" and switching it to ""type='button'"" solved the problem.</p>&#xA;",8290044,"",,"",,2017-07-11T15:40:04,"","",,0,,,
45056627,2,,45053130,2017-07-12T11:37:45,,0,,"<p>I discovered the problem. It's unlikely anybody else would have the same issue, but if you do, take a look at the userAgent value in your <code>browserWindow.loadURL</code> in Electron. </p>&#xA;&#xA;<p>Mine was set to an Android mobile device &amp; Firebase was not setting/updating due to this reason. I presume the Firebase server reacts differently when it sees a mobile userAgent and I was using the Firebase JS SDK and not the Android SDK which caused the issue.</p>&#xA;",761350,"",,"",,2017-07-12T11:37:45,"","",,0,,,
45119138,2,,45113784,2017-07-15T14:13:14,,0,,"<p>It appears that the problem is bigger than I first thought and that it is an issue with all data binding which isn't completely resolved until the user changes routes. Just clicking on the screen solves some of the data binding problems like the one with the spinner but other variables with two way binding still won't work. </p>&#xA;&#xA;<p>However the solution for this question worked for me: <a href=""https://stackoverflow.com/questions/42743990/angular-2s-two-way-binding-not-working-on-initial-load-of-electron-app"">Angular 2's two-way binding not working on initial load of electron app</a>. If I place the route change which occurs immediately after the window is created within a run call to NgZone the problem is avoided:</p>&#xA;&#xA;<pre><code>this._ngzone.run(()=&gt;{&#xA;     this.router.navigate([args]);&#xA;  });&#xA;</code></pre>&#xA;",6405183,"",,"",,2017-07-15T14:13:14,"","",,0,,,
44927888,2,,44876767,2017-07-05T13:38:23,,1,,"<p><a href=""https://nodejs.org/api/fs.html#fs_whatwg_url_object_support"" rel=""nofollow noreferrer"">Documentation</a> states that URL support was introduced in v7.6.0 and is experimental. Electron uses v7.4.0, thus you can not use URL with fs yet.</p>&#xA;&#xA;<pre><code>fs.readFileSync('C:/tmp/hello')&#xA;</code></pre>&#xA;&#xA;<p>Should work just fine.</p>&#xA;",2016129,"",,"",,2017-07-05T13:38:23,"","",,1,,,
44942025,2,,44932030,2017-07-06T07:10:06,,1,,"<blockquote>&#xA;  <p>I saw the docs but it seems that addPassword does not exist.</p>&#xA;</blockquote>&#xA;&#xA;<p>Yes, that's right. The function addPassword does not <strong>exist</strong> and that's why you're getting this TypeError.</p>&#xA;&#xA;<p>In general, this has nothing to do with Electron, because the keytar package just does not provide the function you were trying to call.</p>&#xA;&#xA;<p>If a function is not mentioned in the docs, it's most likely to not exist.</p>&#xA;",6786876,"",,"",,2017-07-06T07:10:06,"","",,0,,,
44957302,2,,44952845,2017-07-06T19:25:46,,1,,"<p>From the documentation for <a href=""https://electron.atom.io/docs/tutorial/application-packaging/"" rel=""nofollow noreferrer"">Application Packaging</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>An asar archive is a simple tar-like format that concatenates files into a single file. Electron can read arbitrary files from it without unpacking the whole file.</p>&#xA;</blockquote>&#xA;&#xA;<p>Only Electron can access those files, Excel and other applications simply can not deal with asar archives.</p>&#xA;&#xA;<p>You could copy the file from the asar archive to the system's temp folder and open it from there. Like this:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const fs = require('fs')&#xA;const path = require('path')&#xA;const {shell, app} = require('electron')&#xA;&#xA;let xlsx = path.join(__dirname,'/path/to/app.asar/path/to/file')&#xA;let xlsxtmp = üath.join(app.getPath('temp', 'file')&#xA;let ws = fs.createWriteStream(xlsxtmp)&#xA;&#xA;fs.createReadStream(xlsx).pipe(ws)&#xA;&#xA;ws.on('finish', () =&gt; {&#xA;    shell.openItem(xlsxtmp);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Another option would be to not pack that xlsx into the archive and instead download it into the <code>userData</code> path.</p>&#xA;",2016129,"",2016129,"",2017-07-13T21:37:57,2017-07-13T21:37:57,"","",,1,,,
44984185,2,,44983994,2017-07-08T08:30:21,,1,,<p>If you are on a Unix type machine then you can install <code>rlwrap</code>. Then instead of starting the REPL from the command line like so:</p>&#xA;&#xA;<pre><code>lein figwheel&#xA;</code></pre>&#xA;&#xA;<p>Start it like this:</p>&#xA;&#xA;<pre><code>rlwrap lein figwheel&#xA;</code></pre>&#xA;&#xA;<p>Then you will get history (using up and down arrows) and basic editing. </p>&#xA;,1492584,"",,"",,2017-07-08T08:30:21,"","",,1,,,
45013466,2,,45012554,2017-07-10T13:34:09,,1,,"<p>The object returned by new Date () is the same in both contexts, but it is automatically converted into a string in two different ways. </p>&#xA;&#xA;<p>In the main process, console.log () probably makes use of <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString"" rel=""nofollow noreferrer"">toISOString ()</a>.</p>&#xA;&#xA;<p>In the renderer process, an implicit call to <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString"" rel=""nofollow noreferrer"">toString ()</a> occurs:</p>&#xA;&#xA;<blockquote>&#xA;  <p>The toString() method always returns a string representation of the&#xA;  date in American English. JavaScript calls the toString() method&#xA;  automatically when a date is to be represented as a text value or when&#xA;  a date is referred to in a string concatenation.</p>&#xA;</blockquote>&#xA;",,user8022331,,"",,2017-07-10T13:34:09,"","",,3,,,
45051040,2,,44919000,2017-07-12T07:24:54,,1,,<p>So i have found a solution for my problem.</p>&#xA;&#xA;<p>I found that in the JS(UWP) applications manifest it was starting some main.js file. I changed this file to start the wanted index.html file and it resolved my problems. Sorry for having so little information to go on. Also enabling the KIOSK mode was really simple so everything is working out as wanted.</p>&#xA;,8257338,"",,"",,2017-07-12T07:24:54,"","",,1,,,
45017282,2,,45016761,2017-07-10T16:29:28,,2,,"<p><code>import</code> and <code>export</code> is not a part of es6 spec right now. See this <a href=""https://github.com/nodejs/help/issues/53"" rel=""nofollow noreferrer"">issue</a> for details. Thats why node doesnot support it. Even at <a href=""http://node.green"" rel=""nofollow noreferrer"">http://node.green</a> there is no this feature.</p>&#xA;",2044355,"",,"",,2017-07-10T16:29:28,"","",,2,,,
45036090,2,,45035992,2017-07-11T13:34:38,,2,,"<p>Within <code>mitm.js</code>, add the function <code>start(param)</code>, place the logic within and then export it. </p>&#xA;&#xA;<pre><code>// mitm.js&#xA;var HttpProxyAgent = require('http-proxy-agent');&#xA;var HttpsProxyAgent = require('https-proxy-agent');&#xA;&#xA;var Proxy = require('http-mitm-proxy');&#xA;var proxy = Proxy();&#xA;&#xA;function start (param) {&#xA;    proxy.listen({&#xA;        port: 8080,&#xA;        httpAgent: new HttpProxyAgent(param), &#xA;        httpsAgent: new HttpsProxyAgent(param)&#xA;    });&#xA;&#xA;    proxy.onRequest(function(ctx, callback) {&#xA;        console.log('-------- onRequest-------- ')    &#xA;        return callback();&#xA;    });&#xA;&#xA;    proxy.onResponse(function(ctx, callback) {&#xA;        console.log('-------- onResponse-------- ')&#xA;        return callback();&#xA;    });&#xA;}&#xA;&#xA;// Return an object with the start function&#xA;module.exports = {start}&#xA;</code></pre>&#xA;&#xA;<p>Now you can require <code>mitm.js</code> and then invoke the function <code>start()</code></p>&#xA;&#xA;<pre><code>var mitm = require('./mitm')&#xA;mitm.start('http://proxy')&#xA;</code></pre>&#xA;",2980607,"",2980607,"",2017-07-11T13:42:44,2017-07-11T13:42:44,"","",,6,,,
45064369,2,,45051296,2017-07-12T17:43:31,,2,,"<p>All your arguments are inside the <code>process.argv</code> array. So if you are trying to access the arguments from the main process you can just use the following:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>//the command you called is always argv[0]&#xA;process.argv[0] == ""C:\Program Files\MyApp.exe""&#xA;&#xA;//every other argument, separated by spaces, is in the array in order&#xA;process.argv[1] == ""-debug""&#xA;</code></pre>&#xA;&#xA;<p>If you are trying to access them from a renderer process however, you need to use <a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md"" rel=""nofollow noreferrer"">electron remote</a>.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const remote = require('electron').remote&#xA;&#xA;//the command you called is always argv[0]&#xA;remote.process.argv[0] == ""C:\Program Files\MyApp.exe""&#xA;&#xA;//every other argument, separated by spaces, is in the array in order&#xA;remote.process.argv[1] == ""-debug""&#xA;</code></pre>&#xA;",1974829,"",1974829,"",2017-07-13T18:33:40,2017-07-13T18:33:40,"","",,2,,,
45072941,2,,45067391,2017-07-13T06:28:31,,2,,"<p>You can always check if it's minimized and restore it as a workaround. I don't think this is such a big deal.</p>&#xA;&#xA;<p>To check and restore it you can use this:</p>&#xA;&#xA;<pre><code>if (window.isMinimized()) {&#xA;    window.restore();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The whole thing would be like this:</p>&#xA;&#xA;<pre><code>{&#xA;    label: 'Maximize',&#xA;    click:(_,window)=&gt;{&#xA;        if (window.isMinimized()) {&#xA;            window.restore();&#xA;        }&#xA;        window.maximize();&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",6577664,"",,"",,2017-07-13T06:28:31,"","",,0,,,
45111071,2,,45110174,2017-07-14T20:22:16,,2,,"<p>You could put the window icons within the mdl header like <a href=""https://codepen.io/ksiabani/pen/eRXrOR?editors=1100"" rel=""nofollow noreferrer"">this</a></p>&#xA;&#xA;<pre><code>  &lt;header class=""mdl-layout__header mdl-color--blue-500""&gt;&#xA;    &lt;div class=""mdl-layout__header-row""&gt;&#xA;      &lt;span class=""mdl-layout-title""&gt;Title&lt;/span&gt;&#xA;      &lt;div class=""mdl-layout-spacer""&gt;&lt;/div&gt;&#xA;      &lt;div id=""title-bar-btns""&gt;&#xA;        &lt;a id=""min-btn"" onclick=""minimize()""&gt;&#xA;          &lt;svg style=""width:24px;height:24px"" viewBox=""0 0 24 24""&gt;&#xA;                    &lt;path fill=""#FFF"" d=""M20,14H4V10H20"" /&gt;&#xA;                &lt;/svg&gt;&#xA;        &lt;/a&gt;&#xA;&#xA;        &lt;a id=""max-btn""&gt;&#xA;          &lt;svg style=""width:24px;height:24px"" viewBox=""0 0 24 24""&gt;&#xA;                    &lt;path fill=""#FFF"" d=""M4,4H20V20H4V4M6,8V18H18V8H6Z"" /&gt;&#xA;                &lt;/svg&gt;&#xA;        &lt;/a&gt;&#xA;&#xA;        &lt;a id=""close-btn"" onclick=""closeWindow()""&gt;&#xA;          &lt;svg style=""width:24px;height:24px"" viewBox=""0 0 24 24""&gt;&#xA;                    &lt;path fill=""#FFF"" d=""M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z"" /&gt;&#xA;                &lt;/svg&gt;&#xA;        &lt;/a&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/header&gt;&#xA;  &lt;div class=""mdl-layout__drawer""&gt;&#xA;    &lt;span class=""mdl-layout-title""&gt;Title&lt;/span&gt;&#xA;    &lt;nav class=""mdl-navigation""&gt;&#xA;      &lt;a class=""mdl-navigation__link"" href=""""&gt;Link&lt;/a&gt;&#xA;      &lt;a class=""mdl-navigation__link"" href=""""&gt;Link&lt;/a&gt;&#xA;      &lt;a class=""mdl-navigation__link"" href=""""&gt;Link&lt;/a&gt;&#xA;      &lt;a class=""mdl-navigation__link"" href=""""&gt;Link&lt;/a&gt;&#xA;    &lt;/nav&gt;&#xA;  &lt;/div&gt;&#xA;</code></pre>&#xA;",4964370,"",,"",,2017-07-14T20:22:16,"","",,0,,,
45140694,2,,45133892,2017-07-17T09:37:05,,2,,"<h2>Hey finally found the root cause of the problem</h2>&#xA;&#xA;<p>The problem lies on how I started my electron app. `</p>&#xA;&#xA;<p>I use <code>sudo electron .</code> to start my app since it requires root access to perform some system tasks.Hence files created by <code>sudo</code> or <code>root</code> are read only to other users.To fix that I used <code>chmod()</code> to change permissions of file after it was created.</p>&#xA;&#xA;<p>Here is my solution:</p>&#xA;&#xA;<pre><code>var exportSettings = (event, settings) =&gt; {&#xA;        dialog.showSaveDialog({&#xA;            title: 'Export settings as theme',&#xA;            filters: [{&#xA;                name: 'UGSM theme(CSS)',&#xA;                extensions: ['css']&#xA;            }]&#xA;        }, (fileName) =&gt; {&#xA;            if (fileName) {&#xA;                fs.writeFile(fileName, settings, (error) =&gt; {&#xA;                    //Since this code executes as root the file being created is read only.&#xA;                    //chmod() it&#xA;                    fs.chmod(fileName, 0666, (error) =&gt; {&#xA;                        console.log('Changed file permissions');&#xA;                    });&#xA;                });&#xA;            }&#xA;        });&#xA;    };&#xA;</code></pre>&#xA;",7180331,"",,"",,2017-07-17T09:37:05,"","",,6,,,
45152755,2,,45149031,2017-07-17T20:04:11,,2,,"<p>In case anyone else is running into this problem, the answer is to correct the $PATH. There is a package on npm that does this for you.</p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/fix-path"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/fix-path</a></p>&#xA;",5995140,"",,"",,2017-07-17T20:04:11,"","",,0,,,
44967181,2,,44966809,2017-07-07T09:23:49,,4,,"<p>The <code>find</code> method is asynchronous and the callback function is not immediately executed, you can use promises like below:</p>&#xA;&#xA;<pre><code>getData() {&#xA;    var db = new Datastore({&#xA;        filename: path.resolve('src/assets/db.json'),&#xA;        autoload: true,&#xA;    });&#xA;    return new Promise((resolve, reject) =&gt; {&#xA;        db.find({}, function(err, docs) {&#xA;            if(err) reject(err);&#xA;            resolve(docs);&#xA;        });&#xA;    })&#xA;}&#xA;&#xA;someOtherFunc() {&#xA;  this.getData()&#xA;  .then((docs) =&gt; console.log(docs)) // here you will get it&#xA;  .catch((err) =&gt; console.error(err));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can learn more about promises <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"" rel=""nofollow noreferrer"">here</a></p>&#xA;&#xA;<p>In case you want to use Observables, you can do it like this:</p>&#xA;&#xA;<pre><code>getData() {&#xA;    return new Rx.Observable(subscriber =&gt; {&#xA;        var db = new Datastore({&#xA;            filename: path.resolve('src/assets/db.json'),&#xA;            autoload: true,&#xA;        });&#xA;        db.find({}, function(err, docs) {&#xA;            if (err) subscriber.error(err);&#xA;            subscriber.next(docs);&#xA;        });&#xA;    })&#xA;&#xA;}&#xA;&#xA;someOtherFunc() {&#xA;    this.getData().subscribe(&#xA;        data =&gt; console.log(""success"", data),&#xA;        err =&gt; console.error(""error"", err)&#xA;    )&#xA;}&#xA;</code></pre>&#xA;",4512411,"",4512411,"",2017-07-07T10:51:00,2017-07-07T10:51:00,"","",,2,,,
45101700,2,,45089348,2017-07-14T11:18:44,,5,,"<p>Ok finally I managed to solve it. Problem was with ""webpack-dev-server"", this command creates app.js bundle file but doesnt actually place it in your directory. It serves from memory, that's the reason it wasn't getting generated and my electron app wasn't able to find it. I am posting solution here in case any beginner faces the same.</p>&#xA;&#xA;<p>Just go to package.json and replace webpack-dev-server with webpack with <code>--watch</code> param, they work almost the same. Difference is that <code>webpack --watch</code> will create a actual bundled file and will place it in directory you specified in config.</p>&#xA;&#xA;<p>This doesnt work </p>&#xA;&#xA;<pre><code>  ""scripts"": {&#xA;    ""build"": ""webpack-dev-server --hot --history-api-fallback --open"",&#xA;    ""app"": "" ./node_modules/electron/dist/Electron.app/Contents/MacOS/Electron .""&#xA;  },&#xA;</code></pre>&#xA;&#xA;<p>Below works</p>&#xA;&#xA;<pre><code>  ""scripts"": {&#xA;    ""build"": ""webpack --watch"",&#xA;    ""app"": "" ./node_modules/electron/dist/Electron.app/Contents/MacOS/Electron .""&#xA;  },&#xA;</code></pre>&#xA;",929265,"",938783,"",2018-07-28T01:56:45,2018-07-28T01:56:45,"","",,0,,,
45032717,2,,45022112,2017-07-11T11:03:08,,6,,"<p>Solved by adding ""files"" in package.json</p>&#xA;&#xA;<pre><code>""files"": [&#xA;  ""*.js"",&#xA;  ""build"",&#xA;  ""node_modules""&#xA;],&#xA;</code></pre>&#xA;",3787583,"",,"",,2017-07-11T11:03:08,"","",,2,,,
45064740,2,,45039779,2017-07-12T18:05:08,,6,,"<p>If using <a href=""https://www.npmjs.com/package/electron-builder"" rel=""noreferrer"">electron-builder</a> (which I recommend) you can simply add a <code>postinstall</code> script to your package.json to install Imagemagick</p>&#xA;&#xA;<p>In package.json</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;    ""postinstall"": ""brew install imagemagick""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Alternatively if you don't want to install it, or brew might not already be available on target machines, you can install imagemagick into a folder within the app then add that to the <code>extraResources</code> key of package.json</p>&#xA;&#xA;<p><code>""extraResources"": [""imagemagick/""]</code></p>&#xA;&#xA;<p>This will tell electron-builder to bundle this folder into the archive. Then just reference imagmagick from that folder.</p>&#xA;",1974829,"",,"",,2017-07-12T18:05:08,"","",,0,,,
45016752,2,,44998401,2017-07-10T16:02:53,,8,,"<p>The gRPC package is distributed with precompiled binaries for Electron, including on Windows, but you have to specify that you're using Electron when you do the installation. The following should work:</p>&#xA;&#xA;<pre><code>npm install grpc --runtime=electron --target=&lt;electron version&gt;&#xA;</code></pre>&#xA;",159388,"",,"",,2017-07-10T16:02:53,"","",,0,,,
44933048,2,,44708242,2017-07-05T17:59:52,,9,,"<p>For your first question, <em>yes</em>, you can definitely implement product keys for licensing an Electron app (I've done it a few times myself). And for your second question, I would encourage you to have user accounts with associated licenses e.g. user 2 can do X and Y, while user 2 can only do X.</p>&#xA;&#xA;<p>So why—what advantage does offering user accounts have?</p>&#xA;&#xA;<p>Firstly, it gets rid of the need for you and your customers to keep track of license keys (a huge annoyance, especially when they lose them), since it can all be handled behind-the-scenes inside of their user account. All they have to do is login (like they're used to doing!) and you can then query all of the licenses that are associated with their user account.</p>&#xA;&#xA;<p>And maybe most importantly, by implementing user accounts, you can offer your customers self-serve license activation! i.e. since all of their licenses (notice the plurality i.e. potential for multiple licenses per-user) are now associated with a single user account, you could potentially prompt them to e.g. purchase a new license when they fire up your application on an unrecognized machine, or easily offer product ""add-ons"" for additional features.</p>&#xA;&#xA;<p>And just in case you weren't particularly keen on writing your own licensing system, I’m the founder of a software licensing API called <a href=""https://keygen.sh"" rel=""noreferrer"">Keygen</a>, which can help you get up and running quickly without having to host and write your own licensing server. I built Keygen with indie developers in mind, especially developers who build desktop apps. I originally created the service after writing my first Electron app and coming to the realization that (surprisingly) no such service existed at the time, which was rather frustrating to me. So I wrote one for myself and other devs.</p>&#xA;&#xA;<p>Since Keygen is just an API (i.e. there’s no software that you need to package with your app), Keygen can be used in any programming language (so we're not just limited to JavaScript here). In its simplest form e.g. no user accounts, only license keys, validating a license key with Keygen is as easy as hitting a single API endpoint,</p>&#xA;&#xA;<pre><code>curl -X POST https://api.keygen.sh/v1/accounts/dc7ac1f74ce0/licenses/actions/validate-key \&#xA;  -H 'Content-Type: application/vnd.api+json' \&#xA;  -H 'Accept: application/vnd.api+json' \&#xA;  -d '{&#xA;        ""meta"": {&#xA;          ""key"": ""B8A5-91D7-CB9A-DAE4-4F6E-1128""&#xA;        }&#xA;      }'&#xA;</code></pre>&#xA;&#xA;<p>And like I mentioned above, in addition to license management, Keygen also offers API endpoints to manage user accounts (which again, I recommend as it's a much better UX), allowing you to associate licenses with your users, as well as track the machines they use your app on, which is very useful if you want to implement multiple licenses per-user (e.g. feature licenses), machine-locked licenses or if you just want to know how many machines each user has.</p>&#xA;&#xA;<p>I hope that answers your question and gives you a few insights. Happy to answer any other questions you have, as I've implemented licensing a few times now for Electron apps. :)</p>&#xA;",3247081,"",,"",,2017-07-05T17:59:52,"","",,7,,,
45156004,2,,42988166,2017-07-18T01:25:04,,15,,"<p>My solution is this:</p>&#xA;&#xA;<pre><code>import { app, BrowserWindow } from 'electron'&#xA;&#xA;let win = null&#xA;&#xA;function createWindow () {&#xA;  win = new BrowserWindow({width: 1024, height: 768})&#xA;  win.loadURL('...')&#xA;  win.webContents.openDevTools()&#xA;  win.on('close', (event) =&gt; {&#xA;    if (app.quitting) {&#xA;      win = null&#xA;    } else {&#xA;      event.preventDefault()&#xA;      win.hide()&#xA;    }&#xA;  })&#xA;}&#xA;&#xA;app.on('ready', createWindow)&#xA;&#xA;app.on('window-all-closed', () =&gt; {&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;&#xA;app.on('activate', () =&gt; { win.show() })&#xA;&#xA;app.on('before-quit', () =&gt; app.quitting = true)&#xA;</code></pre>&#xA;&#xA;<p>In this way on OSX if you close the window, the window simply hide, if you close the app with cmd+Q the app terminate.</p>&#xA;",302005,"",,"",,2017-07-18T01:25:04,"","",,1,,,
45111622,2,,45097871,2017-07-14T21:08:47,,27,,"<p>Perform a global package install:</p>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code>npm install -g electron-packager&#xA;</code></pre>&#xA;&#xA;<p>The <code>-g</code> flag tells NPM to install the package globally which makes the command <code>electron-packager</code> available in your PATH. </p>&#xA;&#xA;<hr>&#xA;&#xA;<p>If you don't want to do a global install you can install it locally and run with <code>npx</code>.</p>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code>npm install -D electron-packager &#xA;&#xA;npx electron-packager .&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Alternatively, you can reference it straight from the node_modules folder (not recommended).</p>&#xA;&#xA;<pre class=""lang-sh prettyprint-override""><code>./node_modules/electron-packager/cli.js&#xA;</code></pre>&#xA;",1974829,"",1974829,"",2019-06-12T18:16:05,2019-06-12T18:16:05,"","",,1,,,
45124291,2,,43991267,2017-07-16T02:04:19,,31,,"<p>You can open a file or folder through shell commands from the electron module. The commands work on both main and renderer process.</p>&#xA;&#xA;<pre><code>const {shell} = require('electron') // deconstructing assignment&#xA;&#xA;shell.openItem('filepath')&#xA;shell.openItem('folderpath')&#xA;</code></pre>&#xA;&#xA;<p>More info on <a href=""https://github.com/electron/electron/blob/master/docs/api/shell.md"" rel=""noreferrer"">https://github.com/electron/electron/blob/master/docs/api/shell.md</a></p>&#xA;",5270924,"",,"",,2017-07-16T02:04:19,"","",,1,,,
41713893,2,,41701059,2017-01-18T07:49:31,,0,,"<p>The Electron main process can create new windows (with Browser Window) and each of those windows has a renderer process. You can use ipc to send messages between the renderer process and the main process. To send a message from one renderer process to another, there are plugins for that, or you just have to relay the message through the main process. </p>&#xA;&#xA;<p>The format/appearance of each window is controlled via html and css. Part of creating a window is specifying the html file to load. </p>&#xA;&#xA;<p>More info can be found in <a href=""https://stackoverflow.com/questions/37669727/distinction-between-the-renderer-and-main-processes-in-electron"">this other SO</a> question. The other question referenced <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md#differences-between-main-process-and-renderer-process"" rel=""nofollow noreferrer"">this repo</a> which has more info. </p>&#xA;&#xA;<p>Lastly, the consensus seems to be to put as much in the renderer as possible.</p>&#xA;&#xA;<p>For more clarification, by </p>&#xA;&#xA;<blockquote>&#xA;  <p>Code in the renderer scripts run under Node.js and as such any code&#xA;  written in these scripts cannot communicate with script code in the&#xA;  browser's web page.</p>&#xA;</blockquote>&#xA;&#xA;<p>are you asking if an Electron app can interact with a separate web browser?</p>&#xA;",2714526,"",-1,"",2017-05-23T12:33:57,2017-01-18T07:49:31,"","",,0,,,
41722598,2,,38736637,2017-01-18T14:57:59,,0,,"<p>Currently I'm using the following way to integrate the Monaco editor with AngularJS in my Electron application:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    var nodeRequire = global.require;&#xA;&lt;/script&gt;&#xA;&#xA;&lt;script src=""node_modules/monaco-editor/min/vs/loader.js""&gt;&lt;/script&gt;&#xA;&#xA;&lt;script&gt;&#xA;&#xA;    var amdRequire = global.require;&#xA;    global.require = nodeRequire;&#xA;&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>With those lines in my HTML file I'm loading the amdRequire for Monaco and saving/restoring the Node.js require.</p>&#xA;&#xA;<p>Within my AngularJS controller I can load the Monaco editor with the following lines:</p>&#xA;&#xA;<pre><code>amdRequire.config({&#xA;    baseUrl: 'node_modules/monaco-editor/min'&#xA;});&#xA;self.module = undefined;&#xA;// workaround monaco-typescript not understanding the environment&#xA;self.process.browser = true;&#xA;amdRequire(['vs/editor/editor.main'], function() {&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>That's working fine right now.</p>&#xA;&#xA;<p>Nevertheless the integration of Monaco in various projects with different languages is a pain in the ass process. The Monaco team has ""confirmed"" that and is working on the integration process.</p>&#xA;",2056168,"",,"",,2017-01-18T14:57:59,"","",,0,,,
41759303,2,,41616663,2017-01-20T08:39:57,,0,,"<p>The problem is solved: <a href=""https://github.com/electron/electron/issues/254"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/254</a></p>&#xA;&#xA;<p>Thank you @kumkanillam for your help. :)</p>&#xA;",7221199,"",,"",,2017-01-20T08:39:57,"","",,0,,,
41773328,2,,41764854,2017-01-20T22:24:18,,0,,"<p>Found a way to do it myself, so I'll post it here to help future readers. This is not done using only javascript and rely on third part tools that you should find online. If someone has a better answer I'll be glad to read it!</p>&#xA;&#xA;<p>You should find a tool that is able to extract the chapters from videos that works as standalone from the console. Then you can start the standalone as a child process and get the output. I used ffprobe in my test.</p>&#xA;&#xA;<h2>Example code</h2>&#xA;&#xA;<pre><code>const child_process = require(""child_process"");&#xA;&#xA;var output = child_process.execSync(""./tools/ffprobe -show_chapters path_to_video.mp4"");&#xA;var string = Utf8ArrayToStr(output);&#xA;</code></pre>&#xA;&#xA;<p>Here i downloaded a standalone of the ffprobe program and put it in the tools folder inside my project directory. Then i start that program as a child process and get the output. The output is in utf8 array, so i had to convert it. A function to translate utf8 array to string can be found in <a href=""https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript"">this stack overflow question</a>. After that, you should just parse the output as your program requires.</p>&#xA;",2824100,"",-1,"",2017-05-23T10:29:17,2017-01-20T22:24:18,"","",,0,,,
41774733,2,,39445612,2017-01-21T01:09:16,,0,,<p>My issue was the I was using webpack to build the electron renderers but not using webpack to build the electron main-thread.</p>&#xA;&#xA;<p>I added a new webpack.config specifically for the main thread - now I can use webpack.root (but all the code must compile now which is a bit of a shame...)</p>&#xA;,3526023,"",,"",,2017-01-21T01:09:16,"","",,0,,,
41811031,2,,41688503,2017-01-23T16:27:53,,0,,"<p>It is better to file issue to electron-builder project. </p>&#xA;&#xA;<p>It seems, you are trying to use auto-update not for packed app (after installation), but directly from unpacked (e.g. from <code>win-ia32-unpacked</code>).</p>&#xA;",1910191,"",,"",,2017-01-23T16:27:53,"","",,1,,,
41870417,2,,41870248,2017-01-26T09:33:15,,0,,"<p><strong>Shortly - on server with database.</strong></p>&#xA;&#xA;<p>I used this approach&#xA;I have made web application with API endpoint, that was called by clients application. API received from clients application the <code>AppID</code> - unique  string (there was 1 to 1 relations between application users and AppIDs), and than, based on this <code>AppID</code> and some proprientary code i never shared, it received a unique API connection string, that can be used in application.&#xA;And, this connection string was generated each time user tried to receive access to database.</p>&#xA;&#xA;<p>This approach have this downsides - you need server running with API of your application. Since, you have mentioned, that you use electron, it is likely that you have some nodejs skills and can make the API server. </p>&#xA;&#xA;<p>UPD: we are reinventing <a href=""https://en.wikipedia.org/wiki/OAuth"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/OAuth</a> Protocol. I think it will be better to use it for receiving one time passwords for electron app to access api</p>&#xA;",1885921,"",1885921,"",2017-01-26T17:24:22,2017-01-26T17:24:22,"","",,3,,,
41903125,2,,38104883,2017-01-27T21:15:42,,0,,<p>The error means your are passing a non-string (e.g. an object) where a string is expected.  I cannot see where that might be offhand but since it works in the Browser but not Electron it might be that the underlying Javascript engines have a different tolerance for the issue.  Can you run the same in a node debugger?  Does one of the streams complain or break oddly?  Can you narrow down which line this is coming from?</p>&#xA;,432373,"",,"",,2017-01-27T21:15:42,"","",,0,,,
41906287,2,,41906218,2017-01-28T04:19:22,,0,,"<p>Since your <code>readFile(filepath)</code> is performing the async file read operation you cannot use the simple return here. However you can pass a callback to your <code>readFile</code> function and call it later whenever your read operation is completed with the data. Like this.  </p>&#xA;&#xA;<p>Create a callback</p>&#xA;&#xA;<pre><code>function fileReadComplete(data) {&#xA;    myData = data;&#xA;    // Do whatever you want&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and And call it as . </p>&#xA;&#xA;<pre><code>readFile(fileNames[0], fileReadComplete);&#xA;</code></pre>&#xA;&#xA;<p>Change your readfile function:</p>&#xA;&#xA;<pre><code>function readFile(filepath, callback) {&#xA;        fs.readFile(filepath, 'utf-8', function (err, data) {&#xA;            if(err){&#xA;                alert(""An error ocurred reading the file :"" + err.message);&#xA;                return;&#xA;            }&#xA;            callback(data);&#xA;            document.getElementById(""content-editor"").value = data;&#xA;        });&#xA;    }&#xA;</code></pre>&#xA;",2386736,"",,"",,2017-01-28T04:19:22,"","",,1,,,
41694861,2,,41693413,2017-01-17T10:37:26,,1,,"<p>Here is the problem - <strong>no one understands JSX except a transpiler</strong>.</p>&#xA;&#xA;<p>Two ways, you can get JSX work -</p>&#xA;&#xA;<ol>&#xA;<li><p>use a browser based/client side transpiler (use only for development&#xA;purpose)</p>&#xA;&#xA;<ul>&#xA;<li><p>include this file as a script tag </p>&#xA;&#xA;<p><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js""&gt;&lt;/script&gt;</code></p></li>&#xA;<li><p>use <code>type=""text/babel""</code> on your script tag which loads your JSX</p>&#xA;&#xA;<p><code>&lt;script type=""text/babel"" src=""index.js""&gt;&lt;/script&gt;</code>        </p></li>&#xA;</ul></li>&#xA;</ol>&#xA;&#xA;<p>checkout the sample here - <a href=""https://github.com/rabibiswal/reactdemo/tree/master/hello-world-jsx"" rel=""nofollow noreferrer"">https://github.com/rabibiswal/reactdemo/tree/master/hello-world-jsx</a></p>&#xA;&#xA;<ol start=""2"">&#xA;<li>user a server based transpiler - e.g. Babel</li>&#xA;</ol>&#xA;&#xA;<p>You can use different tools like webpack etc.</p>&#xA;&#xA;<p>checkout the sample here - &#xA;<a href=""https://github.com/rabibiswal/reactdemo/tree/master/hello-world-react-es5"" rel=""nofollow noreferrer"">https://github.com/rabibiswal/reactdemo/tree/master/hello-world-react-es5</a></p>&#xA;&#xA;<p>You need to install node and use <code>npm install</code> and <code>npm run build</code> to get this code working</p>&#xA;",2745538,"",,"",,2017-01-17T10:37:26,"","",,0,,,
41699503,2,,41691071,2017-01-17T14:19:39,,1,,"<p><strong>Electron's Certificate Transparency Issue</strong></p>&#xA;&#xA;<p>Depending on your version of Electron, this could be related to <a href=""http://electron.atom.io/blog/2016/12/09/certificate-transparency-fix"" rel=""nofollow noreferrer"">the recent Certificate Transparency issues that affected Electron's underlying Chrome library</a>. </p>&#xA;&#xA;<p>The issue itself could cause certain certificates such as Symantec, GeoTrust, and Thawte to be incorrectly rejected, and thus resulting in Electron not serving your expected content after a given period of time.</p>&#xA;&#xA;<p>You may want to ensure that you are running at least Electron 1.4.12, which is expected to have resolved the issue.  </p>&#xA;",557445,"",,"",,2017-01-17T14:19:39,"","",,0,,,
41758816,2,,41758738,2017-01-20T08:07:24,,1,,"<pre><code>win.capturePage([rect, ]callback)&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li><code>rect</code> Rectangle (optional), the bounds to capture</li>&#xA;<li><code>callback</code> Function which return an <code>image</code> (NativeImage)</li>&#xA;</ul>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#wincapturepagerect-callback"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/browser-window.md#wincapturepagerect-callback</a></p>&#xA;",2226315,"",2226315,"",2017-01-20T08:15:57,2017-01-20T08:15:57,"","",,0,,,
41767347,2,,41766116,2017-01-20T15:39:53,,1,,"<pre><code>value: function drawRotatedImage(canvas, image, angle, mirrorImage) {&#xA;    var context = canvas.getContext('2d');&#xA;    if (angle &gt; 0) {&#xA;        context.rotate(angle * (Math.PI / 180));&#xA;    }&#xA;    if (mirrorImage === true) {&#xA;        if (angle &gt; 0) {&#xA;            context.scale(-1, 1);&#xA;            context.drawImage(image, -image.width, -image.height, image.width, image.height);&#xA;        }&#xA;    } &#xA;&#xA;    if (mirrorImage === true) {&#xA;        if (angle &lt; 1) {&#xA;            context.scale(-1, 1);&#xA;            context.drawImage(image, -image.width, 0, image.width, image.height);&#xA;        }&#xA;    } else {&#xA;        context.drawImage(image, 0, angle === 0 ? 0 : -image.height);&#xA;    }&#xA;    return canvas;&#xA;}&#xA;</code></pre>&#xA;",7446765,"",4298200,"",2019-03-29T09:13:45,2019-03-29T09:13:45,"","",,0,,,
41775666,2,,41772180,2017-01-21T04:16:18,,1,,"<p>Electron's <code>ipcMain</code> and <code>ipcRenderer</code> modules serialize the message to JSON before sending it, so if you want to get a better idea of what actually gets sent between processes put the message through <code>JSON.stringify()</code>. Functions/methods and prototype chains won't make it across the process boundry, if you want that to work you'll have to implement your own serialization/deserialization scheme.</p>&#xA;",1259938,"",,"",,2017-01-21T04:16:18,"","",,1,,,
41775987,2,,41775790,2017-01-21T05:17:06,,1,,<p>Try to </p>&#xA;&#xA;<pre><code>console.log(__dirname)&#xA;</code></pre>&#xA;&#xA;<p>you will see that it is not index.html you are starting with but main.js. You have to start with the path of the server or main script of your program. In your case it is main.js. So the following should work:</p>&#xA;&#xA;<pre><code>./app/assets/house.jpg&#xA;</code></pre>&#xA;&#xA;<p>But using __dirname is a good solution and even better it would be using path.join.</p>&#xA;,7177611,"",,"",,2017-01-21T05:17:06,"","",,1,,,
41783951,2,,41783073,2017-01-21T20:09:29,,1,,"<p>Your build is failing on the minification step. Possibly because of the size of one of the packages you're pulling in or because it's already been minified. Minification only happens when you're building for production or packaging which is why you're not seeing the issue when you run locally. &#xA;From the <a href=""https://ember-cli.com/asset-compilation#minifying"" rel=""nofollow noreferrer"">EmberCLI docs on minification</a>, where you'll find more on the minifaction step: </p>&#xA;&#xA;<blockquote>&#xA;  <p>the js-files are minified with broccoli-uglify-js in the production-env by default. You can pass custom options to the minifier via the minifyJS:options object in your ember-cli-build</p>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://ember-cli.com/asset-compilation#exclude-from-minification"" rel=""nofollow noreferrer"">You can exclude specific files/resources</a> that are causing problems:</p>&#xA;&#xA;<blockquote>&#xA;  <p>To exclude assets from dist/assets from being minificated, one can pass options for broccoli-uglify-sourcemap </p>&#xA;</blockquote>&#xA;",2529475,"",,"",,2017-01-21T20:09:29,"","",,0,,,
41794009,2,,41791698,2017-01-22T17:30:39,,1,,"<p>Relative paths cease to work after packaging for distribution, you'll have to create your paths using <code>__dirname</code>.</p>&#xA;",1792564,"",,"",,2017-01-22T17:30:39,"","",,0,,,
41807661,2,,41801144,2017-01-23T13:35:24,,1,,"<p>The <code>'did-finish-load'</code> event is triggered 2 times : when you load the about:blank, and when you use <code>loadURL()</code>.</p>&#xA;&#xA;<p>To convince you, try this:</p>&#xA;&#xA;<p>main.js :  </p>&#xA;&#xA;<pre><code>const { BrowserWindow} = require('electron')&#xA;let win = new BrowserWindow({width: 1450, height: 1200})&#xA;win.webContents.on('did-finish-load', () =&gt; {&#xA;    console.log('finished to load ');&#xA;})&#xA;win.loadURL(`about:blank`)&#xA;</code></pre>&#xA;&#xA;<p>Then you will notice that <code>did-finish-load</code> has been triggered!</p>&#xA;&#xA;<p>That's why the event is triggered two times in your code.</p>&#xA;&#xA;<p>Note that the important part here is the <code>webContents</code> EventEmitter, that is an attribute of both BrowserWindows and webviews. I used a BrowserWindow to keep the example minimal. </p>&#xA;",5035800,"",3479456,"",2019-01-22T17:29:37,2019-01-22T17:29:37,"","",,0,,,
41845886,2,,41845258,2017-01-25T07:37:02,,1,,"<p>No, this will not happen with Electron.</p>&#xA;",106623,"",,"",,2017-01-25T07:37:02,"","",,3,,,
41853249,2,,41799041,2017-01-25T13:46:15,,1,,"<p>After further research (and a lot of compromise in the initial design), I decided to use Lovefield by Google. It is the closest to what I have been looking for since 1. it is embedded in the browser and 2. structured query is how you get data. Still hoping there would be a solution to an embedded MySQL database in an Electron app.</p>&#xA;",2511541,"",,"",,2017-01-25T13:46:15,"","",,4,,,
41874883,2,,41874833,2017-01-26T13:44:56,,1,,"<p>It's because you're confusing function reference and function call.</p>&#xA;&#xA;<p>Note that the function <code>onReady</code> returns nothing. By default this means it returns undefined.</p>&#xA;&#xA;<p>So doing this:</p>&#xA;&#xA;<pre><code>app.on('ready', onReady());&#xA;</code></pre>&#xA;&#xA;<p>Leads to this:</p>&#xA;&#xA;<pre><code>app.on('ready', undefined);&#xA;</code></pre>&#xA;&#xA;<p>That is, the <code>onReady</code> function is called and it's result is passed to <code>app.on()</code>.</p>&#xA;&#xA;<p>Basically what you've done is this:</p>&#xA;&#xA;<pre><code>app.on('ready', (function() {&#xA;    mainWindow = new BrowserWindow({&#xA;        width: 800,&#xA;        height: 480&#xA;    });&#xA;})());&#xA;</code></pre>&#xA;&#xA;<p>What you want instead is:</p>&#xA;&#xA;<pre><code>app.on('ready', onReady);&#xA;</code></pre>&#xA;",167735,"",167735,"",2017-01-26T13:45:52,2017-01-26T13:45:52,"","",,2,,,
41899687,2,,41898431,2017-01-27T17:26:40,,1,,"<p>Please set <a href=""https://github.com/electron-userland/electron-builder/wiki/Options#WinBuildOptions-target"" rel=""nofollow noreferrer"">target</a> to <code>squirrel</code>. To use Squirrel.Windows please install electron-builder-squirrel-windows dependency.</p>&#xA;",1910191,"",,"",,2017-01-27T17:26:40,"","",,1,,,
41913717,2,,41906986,2017-01-28T19:08:09,,1,,"<p>I figured out the problem.</p>&#xA;&#xA;<p>I had to load zone.js and reflect-metadata in index.html instead of bootstrap.ts. So when I did this</p>&#xA;&#xA;<pre><code>  &lt;script src=""../node_modules/zone.js/dist/zone.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""../node_modules/reflect-metadata/Reflect.js""&gt;&lt;/script&gt;&#xA;  &lt;script src=""bootstrap.ts""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>This worked. I had to remove this</p>&#xA;&#xA;<pre><code>import 'zone.js';&#xA;import 'reflect-metadata';&#xA;</code></pre>&#xA;&#xA;<p>From bootstrap.ts</p>&#xA;",3335,"",,"",,2017-01-28T19:08:09,"","",,1,,,
41914385,2,,41913098,2017-01-28T20:15:58,,1,,"<p>Using @5minutes2start suggestion I could fix my code.</p>&#xA;&#xA;<p>So, the changes were made on file <strong>systemjs.config.js</strong></p>&#xA;&#xA;<p>I've added these 2 lines on map:</p>&#xA;&#xA;<blockquote>&#xA;  <p>'angularfire2': 'npm:angularfire2', &#xA;  'firebase': 'npm:firebase',</p>&#xA;</blockquote>&#xA;&#xA;<p>and added these to packages:</p>&#xA;&#xA;<blockquote>&#xA;  <p>angularfire2: {&#xA;     main: './bundles/angularFire2.umd.js',&#xA;     defaultExtension: 'js'&#xA;  },&#xA;  firebase: {&#xA;     main: './firebase.js',&#xA;     defaultExtension: 'js'&#xA;  }</p>&#xA;</blockquote>&#xA;&#xA;<p>My full <strong>systemjs.config.js</strong>:</p>&#xA;&#xA;<pre><code>(function (global) {&#xA;  System.config({&#xA;    paths: {&#xA;      'npm:': 'node_modules/'&#xA;    },&#xA;    map: {&#xA;      app: 'app',&#xA;      '@angular/core': 'npm:@angular/core/bundles/core.umd.js',&#xA;      ...&#xA;&#xA;      'angularfire2': 'npm:angularfire2',&#xA;      'firebase': 'npm:firebase',&#xA;    },&#xA;    packages: {&#xA;      app: {&#xA;        main: './main.js',&#xA;        defaultExtension: 'js'&#xA;      },&#xA;      rxjs: {&#xA;        defaultExtension: 'js'&#xA;      },&#xA;      angularfire2: {&#xA;        main: './bundles/angularFire2.umd.js',&#xA;        defaultExtension: 'js'&#xA;      },&#xA;      firebase: {&#xA;        main: './firebase.js',&#xA;        defaultExtension: 'js'&#xA;      }      &#xA;    }&#xA;  });&#xA;})(this);&#xA;</code></pre>&#xA;&#xA;<p>After these changes another error appeared: <em>""Cannot read property 'FacebookAuthProvider' of undefined""</em>, I could fix it using the solution discussed here: <a href=""https://github.com/angular/angularfire2/issues/576"" rel=""nofollow noreferrer"">https://github.com/angular/angularfire2/issues/576</a></p>&#xA;&#xA;<p>Add ""firebase = firebase.firebase;"" before ""var _a = firebase.auth;"" on <strong>angularfire2.umd.js</strong></p>&#xA;&#xA;<pre><code>firebase = firebase.firebase; &#xA;var _a = firebase.auth;&#xA;</code></pre>&#xA;",1919316,"",,"",,2017-01-28T20:15:58,"","",,0,,,
41919505,2,,41869469,2017-01-29T09:43:30,,1,,"<p>Create a new method that accepts an object as a parameter,  which analyses the object and decides whether to proxy to the original function or perform your new requirement.</p>&#xA;&#xA;<p>Mark the original method as deprecated and document to use your new method, and when the time is right, calls to the original method can be replaced. When they are all replaced, refactor your new function to remove the proxy and, when confident, remove the old method.</p>&#xA;&#xA;<p>Try and abstract as much functionality as makes sense from the original method to keep the code DRY.</p>&#xA;&#xA;<p>If possible, write a test that both original and new methods can pass.</p>&#xA;",3320365,"",3320365,"",2017-02-07T11:25:11,2017-02-07T11:25:11,"","",,0,,,
41689471,2,,41423800,2017-01-17T05:13:36,,2,,"<p>I have gotten my answer:</p>&#xA;&#xA;<p><strong>First,</strong> reason was DiskDB database, it was not compatible with the node webkit so that is why I was getting error of native modules. </p>&#xA;&#xA;<p>Now I am using <a href=""https://www.npmjs.com/package/sqlite3"" rel=""nofollow noreferrer"">sqlite3</a> module for local database. It is better than DiskDB.</p>&#xA;&#xA;<p><strong>Second,</strong> One reason was free version of enclose, Paid version of Enclose JS module ignores the timeout issue which I was getting.</p>&#xA;&#xA;<p>This way I have resolved my question.</p>&#xA;",4478280,"",,"",,2017-01-17T05:13:36,"","",,0,,,
41708733,2,,41705243,2017-01-17T23:16:18,,2,,"<p>Unfortunately this isn't possible at the moment.</p>&#xA;&#xA;<p>Web Push requires the browser vendor to maintain a server that keeps a connection open to each user to deliver notifications, and to store notifications while a device is offline. Electron has no such system set up for it.</p>&#xA;&#xA;<p>It may be possible to extend Electron to use the operating system's built-in notification system. For example, Apple does have OS X notifications (currently supported by OneSignal), and Windows has a notification system built into it too (which OneSignal will support soon). Using this would require writing native extensions that bridge Electron to the operating system. This would have the added benefit of supporting notification delivery while your Electron app was not open.</p>&#xA;&#xA;<p>Edit: This is now possible with <a href=""https://pushy.me"" rel=""nofollow noreferrer"">Pushy</a>, a paid notification product that &#xA;now supports Electron.</p>&#xA;",83491,"",1123355,"",2020-02-07T01:22:24,2020-02-07T01:22:24,"","",,3,,,
41826074,2,,41825948,2017-01-24T10:42:19,,2,,"<p><a href=""http://docs.nwjs.io/en/latest/For%20Developers/Enable%20Proprietary%20Codecs/"" rel=""nofollow noreferrer"">Node Webkit does not support MP4 out of the box</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Using MP3 and H.264 codecs requires you to pay attention to the patent royalties and the license of the source code. Consult a lawyer if you do not understand the licensing constraints and using patented media formats in your application. </p>&#xA;</blockquote>&#xA;&#xA;<p>The above link points at the official documentation for adding support which boil down to :</p>&#xA;&#xA;<ol>&#xA;<li>Download the binaries you need to decode mp4s</li>&#xA;<li>Download the dependencies</li>&#xA;<li>Modify the build instruction file for Node Webkit</li>&#xA;<li>Compile FFMPEG</li>&#xA;<li>Overwrite the default version of FFMPEG with the one you just compiled</li>&#xA;</ol>&#xA;",19068,"",,"",,2017-01-24T10:42:19,"","",,0,,,
41852454,2,,41810368,2017-01-25T13:08:27,,2,,"<p>It isn't clear. </p>&#xA;&#xA;<p>Electron <a href=""http://electron.atom.io/docs/api/web-contents/#contentsgoback"" rel=""nofollow noreferrer"">documentation</a> doesn't explicitly state whether Electron implements what is called BFCache or HistoryLists. &#xA;It isn't clear from Electron source code either. I created relevant <a href=""https://github.com/electron/electron/issues/8504"" rel=""nofollow noreferrer"">issue</a> on Github.</p>&#xA;&#xA;<p>Electron uses Chromium to implement <code>BrowserWindow</code>. Situation with BFCache and Chromium itself isn't very clear. There are multiple issues that state&#xA;that BFCache isn't implemented in Chromium (<a href=""https://bugs.chromium.org/p/chromium/issues/detail?id=455226"" rel=""nofollow noreferrer"">455226 Chrome reinitializes all fields to the value they had on their initial presentation when history back is used</a>, <a href=""https://bugs.chromium.org/p/chromium/issues/detail?id=511340"" rel=""nofollow noreferrer"">510340 Investigate faster back/forward page navigation</a>). Although I've seen in practice that BFCache works in Chrome.</p>&#xA;&#xA;<p>You can save and restore form state using JavaScript, <code>sessionStorage</code> and window load and unload events. But in this case you also need a mechanism to clearly identify <code>input</code> nodes and store serialized files in case if form contains file inputs.</p>&#xA;&#xA;<p>For more information check:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://madhatted.com/2013/6/16/you-do-not-understand-browser-history"" rel=""nofollow noreferrer"">You Do Not Understand Browser History article</a> by Matthew Beale</li>&#xA;<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"" rel=""nofollow noreferrer""><code>Window.sessionStorage</code> MDN page</a></li>&#xA;<li><a href=""https://developer.mozilla.org/en-US/Firefox/Releases/1.5/Using_Firefox_1.5_caching"" rel=""nofollow noreferrer"">MDN page about BFCache</a></li>&#xA;</ul>&#xA;",2594597,"",,"",,2017-01-25T13:08:27,"","",,1,,,
41892763,2,,33483363,2017-01-27T11:18:22,,2,,"<p>You have not specified the protocol you want to use for the request, http:// or https://.</p>&#xA;&#xA;<pre><code>$.get( ""http://127.0.0.1:3215/ping"", function( data ) {&#xA;    console.log( data );&#xA;});&#xA;</code></pre>&#xA;",7035731,"",,"",,2017-01-27T11:18:22,"","",,0,,,
41776135,2,,41776026,2017-01-21T05:44:53,,3,,"<p>you need to use webview.removeEventListener, you can do it like this </p>&#xA;&#xA;<pre><code>const webview = document.getElementById('foo')&#xA;const loadPage = () =&gt; {&#xA;  webview.loadURL('http://google.com');&#xA;  webview.removeEventListener('dom-ready', loadPage);&#xA;};&#xA;webview.addEventListener('dom-ready', loadPage)&#xA;</code></pre>&#xA;",1530987,"",1530987,"",2017-01-21T05:52:33,2017-01-21T05:52:33,"","",,1,,,
41825634,2,,41818689,2017-01-24T10:22:40,,3,,"<p>If you run <code>.\App.exe &gt; log.txt</code> and you can see the output string in the console it means that the string is not being written to STDOUT (the Success output stream in PowerShell terms) in the first place.</p>&#xA;&#xA;<p>Apparently the Electron developers decided to attach <code>stdout</code> directly to the console instead of actual STDOUT (see <a href=""https://github.com/electron/electron/issues/4552"" rel=""nofollow noreferrer"">issue #4552</a>). If I understand the discussion there correctly you can set the <a href=""http://electron.atom.io/docs/api/environment-variables/"" rel=""nofollow noreferrer"">environment variable</a> <code>ELECTRON_NO_ATTACH_CONSOLE</code> to avoid this behavior.</p>&#xA;",1630171,"",1630171,"",2017-01-25T01:07:24,2017-01-25T01:07:24,"","",,3,,,
41864527,2,,41864471,2017-01-26T01:19:34,,3,,<p>Not sure if you've setup the right reference on the window object but shouldn't your code read:</p>&#xA;&#xA;<pre><code>timelineOptions.order = window[timelineOptions.order];&#xA;</code></pre>&#xA;&#xA;<p>You've referenced the string value <em>orderByID</em> instead of the property name you used to set the object up.</p>&#xA;,7459189,"",7459189,"",2017-01-27T00:27:34,2017-01-27T00:27:34,"","",,1,,,
41879657,2,,41879594,2017-01-26T17:42:54,,4,,"<p>There are event listeners available that fire when there is a change to that variable</p>&#xA;&#xA;<pre><code>window.addEventListener(""offline"", function(e) {&#xA;    $("".net-status"").html(""&lt;i class=\""fa fa-globe fa-2x\""&gt;&lt;/i&gt; Not Connected"");&#xA;});&#xA;&#xA;window.addEventListener(""online"", function(e) {&#xA;    $("".net-status"").html(""&lt;i class=\""fa fa-globe fa-2x\""&gt;&lt;/i&gt; Connected"");&#xA;});&#xA;</code></pre>&#xA;",3308055,"",,"",,2017-01-26T17:42:54,"","",,0,,,
41725899,2,,39250387,2017-01-18T17:34:39,,5,,"<p>The best tool (and easiest) I've found is <a href=""https://github.com/yan-foto/electron-reload"" rel=""noreferrer"">electron-reload</a>:</p>&#xA;&#xA;<pre><code>// main.js&#xA;const electron = require('electron');&#xA;const { app, BrowserWindow } = electron;&#xA;const path = require('path');&#xA;&#xA;// the first argument can be: a file, directory or glob pattern&#xA;require('electron-reload')(__dirname + '/app/index.html', {&#xA;  electron: path.join(__dirname, 'node_modules', '.bin', 'electron')&#xA;});&#xA;&#xA;let mainWindow;&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  mainWindow = new BrowserWindow({&#xA;    // ...&#xA;  });&#xA;  mainWindow.setMenu(null);&#xA;&#xA;  mainWindow.loadURL(`file://${__dirname}/app/index.html`);&#xA;  process.env.NODE_ENV !== 'production' &amp;&amp; mainWindow.openDevTools();&#xA;});&#xA;</code></pre>&#xA;",4640499,"",,"",,2017-01-18T17:34:39,"","",,0,,,
41907180,2,,41811008,2017-01-28T06:54:37,,5,,"<p>Nightmare is thenable, so if you want to use the return value of an <code>exists()</code> function as logic, you can use <code>.then()</code> for method chaining. This also goes for <code>visible()</code> or <code>evaluate()</code> or any function returning a value.</p>&#xA;&#xA;<p>The example I provided searches Stackoverflow if the searchbox selector exists, goes to Google, returns the title and then conditionally logs the result. You can continue chaining logic as necessary. </p>&#xA;&#xA;<pre><code>var Nightmare = require('nightmare');&#xA;var nightmare = Nightmare({ show: true });  &#xA;&#xA;nightmare&#xA;    .goto(""http://stackoverflow.com"")&#xA;    .exists(""#search input[type=text]"")&#xA;    .then(function (result) {&#xA;        if (result) {&#xA;            return nightmare.type(""#search input[type=text]"", ""javascript\u000d"")&#xA;        } else {&#xA;            console.log(""Could not find selector"")&#xA;        }&#xA;    })&#xA;    .then(function() {&#xA;        return nightmare&#xA;            .goto(""http://www.google.com"")&#xA;            .wait(1000)&#xA;            .title()&#xA;    })&#xA;    .then(function (title) {&#xA;        if (title == ""Google"") {&#xA;            console.log(""title is Google"")&#xA;        } else {&#xA;            console.log(""title is not Google"")&#xA;        }&#xA;&#xA;        return nightmare.end()&#xA;    })&#xA;    .catch(function (error) {&#xA;        console.log(error)&#xA;    })&#xA;</code></pre>&#xA;",5365597,"",5365597,"",2017-01-28T07:19:35,2017-01-28T07:19:35,"","",,1,,,
41790040,2,,41723045,2017-01-22T10:57:00,,6,,"<p>Thanks for all the answers. I figured out that the hardware I tried to connect with (LEGO Mindstorms Education EV3) is a <em>HIDClass</em> device. Therefore it doesn't exposed itself as a COM interface. Libraries like <code>node-serialport</code> can't work with it.</p>&#xA;&#xA;<p>I managed to compile <code>node-serialport</code> for Electron. That's working fine (if the USB device exposes itself as a COM device).</p>&#xA;&#xA;<p>Others connection methods like WIFI (<code>node-net</code>) and Bluetooth (<code>node-bluetooth</code>) are working fine, too.</p>&#xA;&#xA;<p>Maybe this information helps other.</p>&#xA;",2056168,"",,"",,2017-01-22T10:57:00,"","",,0,,,
41895022,2,,41140960,2017-01-27T13:24:51,,6,,"<p>If you mean console from within the webapp, then this applies :)</p>&#xA;&#xA;<p>You need to make a callback for this to work. Read more about them here: <a href=""http://electron.atom.io/docs/api/remote/"" rel=""noreferrer"">http://electron.atom.io/docs/api/remote/</a></p>&#xA;&#xA;<p>Here is a short example:</p>&#xA;&#xA;<p>In a file next to your electron <code>main.js</code>, named <code>logger.js</code>, add this code:</p>&#xA;&#xA;<pre><code>exports.log = (entry) =&gt; {&#xA;    console.log(entry);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And then in your webapp, use this to call this log method callback:</p>&#xA;&#xA;<pre><code>// This line gets the code from the newly created file logger.js&#xA;const logger = require('electron').remote.require('./logger');&#xA;&#xA;// This line calls the function exports.log from the logger.js file, but&#xA;// this happens in the context of the electron app, so from here you can &#xA;// see it in the console when running the electron app or write to disk.&#xA;logger.log('Woohoo!');&#xA;</code></pre>&#xA;&#xA;<p>You might also want to have a look at <a href=""https://www.npmjs.com/package/electron-log"" rel=""noreferrer"">https://www.npmjs.com/package/electron-log</a> for ""better"" logging and writing to disk. But you always need to use callbacks.</p>&#xA;",399342,"",,"",,2017-01-27T13:24:51,"","",,4,,,
41748923,2,,41737784,2017-01-19T18:17:01,,9,,"<p>Got it. I found the answer in <a href=""https://stackoverflow.com/questions/17798047/streams-with-percentage-complete"">streams with percentage complete</a></p>&#xA;&#xA;<p>With my code changed to</p>&#xA;&#xA;<pre><code>var ftp = new Client();&#xA;let uploadfile = fs.createReadStream(f.path);&#xA;let newname = uuid(); //some function I use for renaming&#xA;&#xA;ftp.on('ready', function() {&#xA;    uploadfile.on('data', function(buffer) {&#xA;        var segmentLength = buffer.length;&#xA;        uploadedSize += segmentLength;&#xA;        console.log(""Progress:\t"" + ((uploadedSize/f.size*100).toFixed(2) + ""%""));&#xA;    });&#xA;&#xA;    ftp.put(uploadfile, newname, function(err) {&#xA;        if (err) throw err;&#xA;            ftp.end();&#xA;    });&#xA;});&#xA;c.connect({user: 'test', password: 'test'});&#xA;</code></pre>&#xA;&#xA;<p>I get the percentage uploaded in console. From here it's only a small step to a graphical output.</p>&#xA;",7356942,"",6877027,"",2019-04-16T14:01:51,2019-04-16T14:01:51,"","",,1,,,
41819808,2,,41819632,2017-01-24T04:02:40,,17,,"<p>There are two main ways to communicate between the renderer process and the main process.</p>&#xA;&#xA;<p><strong>1.</strong> One way would be to use the <a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md"" rel=""noreferrer"">remote</a> module to require the code you want to take from the main process. This object will contain anything you export from your main process code.</p>&#xA;&#xA;<pre><code>// main process, for example app/main.js&#xA;exports.test = () =&gt; console.log('Yay');&#xA;&#xA;// renderer process, for example app/renderer.js&#xA;const { remote } = require('electron');&#xA;const mainProcess = remote.require('./main.js');&#xA;&#xA;mainProcess.test(); // 'Yay'&#xA;</code></pre>&#xA;&#xA;<p><strong>2.</strong> Another way would be to use <a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md"" rel=""noreferrer"">Inter Process Communication</a> to send/receive events between the main process and the renderer process:</p>&#xA;&#xA;<pre><code>// main process, for example app/main.js&#xA;myWindow.webContents.send('my-cool-log-event', 'Yay');&#xA;&#xA;// renderer process, for example app/renderer.js&#xA;const { ipcRenderer } = require('electron');&#xA;ipcRenderer.on('my-cool-log-event', (evt, msg) =&gt; console.log(msg)); // 'Yay'&#xA;</code></pre>&#xA;&#xA;<hr />&#xA;&#xA;<p>If you want to call a function from the main process when a click event fires in a renderer process, you can use either approach.</p>&#xA;&#xA;<p><em>1.</em></p>&#xA;&#xA;<pre><code>// main process, for example app/main.js&#xA;exports.onClick = () =&gt; console.log('Yay');&#xA;&#xA;// renderer process, for example app/renderer.js&#xA;const { remote } = require('electron');&#xA;const mainProcess = remote.require('./main.js');&#xA;&#xA;document&#xA;  .querySelector('#elem')&#xA;  .addEventListener('click', () =&gt; {&#xA;    mainProcess.onClick();&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p><em>2.</em></p>&#xA;&#xA;<pre><code>// main process, for example app/main.js&#xA;const { ipcMain } = require('electron')&#xA;ipcMain.on('click', () =&gt; console.log('do something'));&#xA;&#xA;// renderer process, for example app/renderer.js&#xA;const { ipcRenderer } = require('electron');&#xA;&#xA;document&#xA;  .querySelector('#elem')&#xA;  .addEventListener('click', () =&gt; {&#xA;    ipcRenderer.send('click');&#xA;  });&#xA;</code></pre>&#xA;",3928341,"",3928341,"",2017-01-24T04:10:10,2017-01-24T04:10:10,"","",,2,,,
40331175,2,,40330244,2016-10-30T16:30:47,,0,,"<p>I did this where my menu was defined</p>&#xA;&#xA;<pre><code>$(document).on(""contextmenu"", function (e) {&#xA;    e.preventDefault();&#xA;    var clipboard = gui.Clipboard.get();&#xA;    if (clipboard &amp;&amp; clipboard.get('text').length &gt; 0) {&#xA;        menu.paste.enabled = true;&#xA;    } else {&#xA;        menu.paste.enabled = false;&#xA;    }&#xA;    menu.popup(e.originalEvent.x, e.originalEvent.y);&#xA;});&#xA;</code></pre>&#xA;",1085660,"",,"",,2016-10-30T16:30:47,"","",,0,,,
40398363,2,,39791049,2016-11-03T09:49:59,,0,,"<p>I found two solutions:</p>&#xA;&#xA;<p>1) Remove all import/export from *.ts (<a href=""https://stackoverflow.com/a/39793404/2051938"">You can read about this here</a>)</p>&#xA;&#xA;<p>2) Create new file *.d.ts (example test.extend.d.ts),&#xA;write all cnanges into *.d.ts file,&#xA;import this file: <code>/// &lt;reference path=""*.d.ts"" /&gt;</code></p>&#xA;&#xA;<p><strong>Example:</strong></p>&#xA;&#xA;<p>File: <strong>test.d.ts</strong></p>&#xA;&#xA;<pre><code>declare namespace Electron {&#xA;    interface App extends NodeJS.EventEmitter {&#xA;        isQuiting?: boolean;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>File: <strong>test.ts</strong></p>&#xA;&#xA;<pre><code>/// &lt;reference path=""test.d.ts"" /&gt;&#xA;import {...} from ""...""; // Any import/export&#xA;app.isQuiting = false; // IT WORKS!!!&#xA;app.quit(); // types of electron work too!&#xA;</code></pre>&#xA;",2051938,"",-1,"",2017-05-23T11:46:48,2016-11-03T09:49:59,"","",,0,,,
40412606,2,,40118340,2016-11-03T22:56:38,,0,,"<p>This was not an Electron problem. This was my app trying to access a path relative to <code>process.cwd()</code>, which, when double-clicking the .exe file in the output folder, was not the expected one.</p>&#xA;&#xA;<p>I was able to debug this by running the .exe from the command line, instead of double-clicking the .exe:&#xA;<code>my_app-win32-x64\my_app.exe</code></p>&#xA;&#xA;<p>This causes <code>console.log()</code> output to be visible in the command prompt, which allowed me to finally see the exception that was occurring.</p>&#xA;",3842872,"",,"",,2016-11-03T22:56:38,"","",,0,,,
40429221,2,,39993691,2016-11-04T18:07:06,,0,,"<p>Try running your .exe from the command line. Maybe you'll be able to figure out what's causing your app to crash. I had the same problem, double-clicking the .exe would do nothing. When I ran the .exe from the command line (i.e. <code>out\myApp-win32-x64\myApp.exe</code>), I was able to see my app's <code>console.log()</code> and <code>console.err()</code>, and I realized what my problem was.</p>&#xA;&#xA;<p>In my case, my app was using paths relative to <code>process.cwd()</code>, which were messed up when running the app directly from the .exe. That caused the app to crash even before showing the window, hence why nothing seemed to be running.</p>&#xA;",3842872,"",,"",,2016-11-04T18:07:06,"","",,0,,,
40476023,2,,40473768,2016-11-07T22:44:01,,0,,"<p>I figured out the error which I still don't know why it did freeze electron. </p>&#xA;&#xA;<p>Basically I was doing </p>&#xA;&#xA;<p><code>ipcRenderer.send(""updateSelectedStatsMain"", event, selectedStatsCopy);</code> </p>&#xA;&#xA;<p>This make absolutely no sense since I'm passing the event as a parameter. I don't even have an event variable to pass. </p>&#xA;&#xA;<p>Updating this: </p>&#xA;&#xA;<p><code>ipcRenderer.send(""updateSelectedStatsMain"",event, selectedStatsCopy);</code> </p>&#xA;&#xA;<p>to  this: </p>&#xA;&#xA;<p><code>ipcRenderer.send(""updateSelectedStatsMain"", selectedStatsCopy);</code> </p>&#xA;&#xA;<p>and this: </p>&#xA;&#xA;<p><code>workerWindow.webContents.send('updateSelectedStatsRen', event, selectedStatsCopy);</code> </p>&#xA;&#xA;<p>to this: </p>&#xA;&#xA;<p><code>workerWindow.webContents.send('updateSelectedStatsRen', selectedStatsCopy);</code> </p>&#xA;&#xA;<p>fxied the issue for me. </p>&#xA;",6710925,"",,"",,2016-11-07T22:44:01,"","",,0,,,
40531765,2,,40523221,2016-11-10T15:55:13,,0,,"<p>As it turned out, I built only 64-bit version, but I had to build and install 32-bit version as well. Even though compilation and installation went with warning that some 32-bit stuff is missing, the electron builds seem to be OK and work OK.</p>&#xA;&#xA;<p>The tutorial I finally followed <a href=""http://www.systutorials.com/239913/install-32-bit-wine-1-8-centos-7/"" rel=""nofollow noreferrer"">is here</a>. </p>&#xA;",3807504,"",,"",,2016-11-10T15:55:13,"","",,0,,,
40309343,2,,40292929,2016-10-28T16:29:00,,1,,"<p>As mentioned in <a href=""https://stackoverflow.com/questions/36091164/avoid-app-throttling-when-electron-is-in-background"">Avoid app throttling when Electron is in background</a>, the solution is simple. I just needed to add</p>&#xA;&#xA;<pre><code>electron.powerSaveBlocker.start('prevent-app-suspension');&#xA;</code></pre>&#xA;&#xA;<p>and OSX won't throttle my app after 30 seconds.</p>&#xA;",2216621,"",-1,"",2017-05-23T12:33:54,2016-10-28T16:29:00,"","",,0,,,
40345807,2,,40342086,2016-10-31T15:52:11,,1,,"<p>you need to use in server A : <code>socket.io</code>&#xA;in server B: <code>socket.io-client</code></p>&#xA;&#xA;<p>Like this:</p>&#xA;&#xA;<blockquote>&#xA;  <p>server A</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>// Load requirements&#xA;var http = require('http'),&#xA;io = require('socket.io');&#xA;&#xA;// Create server &amp; socket&#xA;var server = http.createServer(function(req, res)&#xA;{&#xA;  // Send HTML headers and message&#xA;  res.writeHead(404, {'Content-Type': 'text/html'});&#xA;  res.end('&lt;h1&gt;404&lt;/h1&gt;');&#xA;});&#xA;server.listen(8080);&#xA;io = io.listen(server);&#xA;&#xA;// Add a connect listener&#xA;io.sockets.on('connection', function(socket)&#xA;{&#xA;  console.log('Client connected.');&#xA;&#xA;  // Disconnect listener&#xA;  socket.on('disconnect', function() {&#xA;  console.log('Client disconnected.');&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>server B</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>// Connect to server&#xA;var io = require('socket.io-client');&#xA;var socket = io.connect('http://localhost:8080', {reconnect: true});&#xA;&#xA;// Add a connect listener&#xA;socket.on('connect', function(socket) { &#xA;  console.log('Connected!');&#xA;});&#xA;</code></pre>&#xA;",6503739,"",,"",,2016-10-31T15:52:11,"","",,0,,,
40409338,2,,40409070,2016-11-03T19:02:30,,1,,"<p>You can create file let's call it db.js with bellow code:</p>&#xA;&#xA;<pre><code>var Datastore = require('nedb'); &#xA;module.exports = new Datastore({filename: './foo.db', autoload: true}); &#xA;</code></pre>&#xA;&#xA;<p>now require this file wherever you want to use it</p>&#xA;&#xA;<pre><code>var db = require('./db.js');&#xA;&#xA;db.insert(....);&#xA;</code></pre>&#xA;",3284355,"",,"",,2016-11-03T19:02:30,"","",,0,,,
40456362,2,,40453301,2016-11-07T00:58:55,,1,,"<p>The main issue here is that you're adding a listener for the <code>create-new-instance</code> event inside <code>createWindow()</code>, so every time <code>createWindow()</code> runs it adds another event listener, and when <code>create-new-instance</code> is emitted each of those listeners creates a new window. To avoid this you'll need to move the event subscription outside <code>createWindow()</code> so that there's only one listener for the event no matter how many times <code>createWindow()</code> is called.</p>&#xA;",1259938,"",,"",,2016-11-07T00:58:55,"","",,1,,,
40468197,2,,40133687,2016-11-07T14:58:14,,1,,"<p>My problem was that one of the files contained reference to 'q-io/fs' npm. As soon as I removed this usage, angular started working. Very strange..</p>&#xA;",2610314,"",,"",,2016-11-07T14:58:14,"","",,0,,,
40470245,2,,40208204,2016-11-07T16:44:45,,1,,"<p>Thanks everybody for comments and help. The problem was that in other file I had dependency to 'q-io/fs' package. Removing that, angular started without any additional manipulations.</p>&#xA;",2610314,"",,"",,2016-11-07T16:44:45,"","",,1,,,
40522275,2,,40410927,2016-11-10T07:41:31,,1,,"<p>Here is a shot in the dark. I am not positive this will solve your issue but here it goes:</p>&#xA;&#xA;<p><strong>GYP and miss-matched binaries</strong></p>&#xA;&#xA;<p>Phantom and many other node modules use binaries built for the specific OS that it will be running on. Sometimes in your npm log files you will see references to node-gyp. Node-gyp simply helps to build native add-on's in node modules. When the binaries are built they are usually built against, among others, three main parameters, the operating system, cpu architecture and version of node that is doing the installation.</p>&#xA;&#xA;<p>I think you need to rebuild phantomjs to the version of node Electron is using. Most of the time the node version you have installed on your machine and the node version running in Electron are not the same. Electron does its best to keep up, but there is always a little lag because of the amount of work and testing required to keep up-to-date.</p>&#xA;&#xA;<p>When you install phantom by running <code>npm install phantom</code> it will assume it needs to install or build the binaries for the node version <em>your machine</em> is using. Then when your Electron app tries to run phantom it tries to call the binary of the <em>Electron's</em> node version. When it isn't there the child process immediately exits with an error.</p>&#xA;&#xA;<p><strong>How to fix</strong></p>&#xA;&#xA;<p>Luckily, there are other people out there that have figured out how to fix this issue and have created a great tool to help generate the correct binaries.</p>&#xA;&#xA;<p>Enter <code>electron-rebuild</code>:</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron-rebuild"" rel=""nofollow noreferrer"">https://github.com/electron/electron-rebuild</a></p>&#xA;&#xA;<p>Electron-rebuild can be run in the command line, and it will rebuild all of your native modules to the version of Electron your project is using.</p>&#xA;&#xA;<p>To install:</p>&#xA;&#xA;<p><code>npm install electron-prebuilt</code></p>&#xA;&#xA;<p>To use (in Windows):</p>&#xA;&#xA;<p><code>.\node_modules\.bin\electron-rebuild.cmd</code></p>&#xA;&#xA;<p>This should be enough to put the correct binaries in the right place.</p>&#xA;&#xA;<p><strong>Other thoughts</strong></p>&#xA;&#xA;<p>Sometimes you can use a package that uses a dependency called node-pre-gyp. E.g. sqlite3. There is a known issue I ended up running into when trying to rebuild my packages for Electron. Basically, in order to avoid this issue (if you run into it) just append <code>--pre-gyp-fix</code> to the above command.</p>&#xA;&#xA;<p><strong>Tangent for those who run into the pre-gyp-fix issue</strong></p>&#xA;&#xA;<p>One more thing on the pre-gyp-fix: If one or more of your dependencies depends on one of the modules that need the pre-gyp-fix then they will be looking for the binary in the wrong place even if they are running in Electron. All of the pre-gyp binaries are stored in a folder similar to this:</p>&#xA;&#xA;<p><code>.\node_modules\sqlite3\lib\binding</code></p>&#xA;&#xA;<p>In my current project I have three folders here, one for Electron-v1.4, and two for node-v46 and node-v50. (<strong>hack alert</strong>) In order to have sqlite3 work with my other dependencies I copy the binary found in the Electron-v1.4 folder and put it in both node-v* folders. That way when running in Electron, all dependencies are running the correct binaries even though they are looking for them in the wrong place. (<strong>end hack alert</strong>)</p>&#xA;&#xA;<p><strong>Conclusion</strong></p>&#xA;&#xA;<p>There is no way I can be sure this has anything to do with the issue you are seeing. But it is worth a shot to see if it fixes your problem. If not then at least I hope I can help someone else experiencing the same issues I ran into.</p>&#xA;",1486472,"",,"",,2016-11-10T07:41:31,"","",,0,,,
40321828,2,,39150240,2016-10-29T17:39:54,,2,,"<p>I'm sorry - this is not a scenario suitable for Azure Functions.&#xA;The only way to include ""binaries"" in a Functions is by referencing assemblies you uploaded upfront. You do not have access to other binaries like VC++ build tools.</p>&#xA;&#xA;<p>If you do not want to pay for a full fledged VM, may be think about using <a href=""https://www.visualstudio.com"" rel=""nofollow"">VSTS</a> with its build and release features. With these you basically utilize MS VC++ etc. build tools in a shared and I assume cheaper way. You then are able to trigger those builds from outside with REST / service hooks.</p>&#xA;",4947644,"",,"",,2016-10-29T17:39:54,"","",,0,,,
40322418,2,,40320976,2016-10-29T18:41:52,,2,,"<p>You can get notified of the completion of a client connection with the <code>connect</code> event:</p>&#xA;&#xA;<pre><code>socket.on('connect', function() {&#xA;    // client socket is now connected to the server&#xA;});&#xA;&#xA;socket.on('disconnect', function() {&#xA;    // client socket is now disconnected from the server&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Documentation for client events here: <a href=""http://socket.io/docs/client-api/#manager(url:string,-opts:object)"" rel=""nofollow"">http://socket.io/docs/client-api/#manager(url:string,-opts:object)</a>.  There are other events in that doc if you also want to see other things like a reconnect.</p>&#xA;",816620,"",816620,"",2016-10-29T20:09:10,2016-10-29T20:09:10,"","",,0,,,
40325306,2,,40318054,2016-10-30T01:39:45,,2,,"<p>I'm an idiot.</p>&#xA;&#xA;<p>Instead of storing the file internally in the packaged app like this…</p>&#xA;&#xA;<pre><code>const dbPath = path.resolve(__dirname, 'data.db')&#xA;</code></pre>&#xA;&#xA;<p>…I'm just storing it in the filesystem like this…</p>&#xA;&#xA;<pre><code>const {app} = require('electron').remote;&#xA;const dbPath = path.resolve(app.getPath('userData'), 'data.db');&#xA;</code></pre>&#xA;&#xA;<p>…so that it's accessible from the start.</p>&#xA;&#xA;<p>I'm leaving this question up because I'd be interested if there is a way to have a save file dialogue for an extant file in the packaged app, but in the mean time this is my answer.</p>&#xA;",1039917,"",,"",,2016-10-30T01:39:45,"","",,0,,,
40352361,2,,40340542,2016-11-01T00:08:31,,2,,"<p>The Electron team has taken a look at possible implementations of this feature and have rejected <a href=""https://github.com/electron/electron/issues/1338"" rel=""nofollow noreferrer"">a related github issue</a> as <em>won't fix</em> due to security and usability concerns. </p>&#xA;",1792564,"",1792564,"",2016-11-01T16:14:39,2016-11-01T16:14:39,"","",,2,,,
40361890,2,,40361889,2016-11-01T14:15:25,,2,,"<h2>List</h2>&#xA;&#xA;<p>First of all let's fetch list of devices available to communicate with:</p>&#xA;&#xA;<pre><code>chrome.serial.getDevices(function(ports) {&#xA;    for (let port of ports) {&#xA;        if (port.vendorId) {&#xA;            console.log(port);&#xA;        }&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You will get list of all ports with <code>vendorId</code> specified, i.e. existing devices.</p>&#xA;&#xA;<p>Example result:</p>&#xA;&#xA;<pre><code>{&#xA;    displayName: 'Arduino Uno'&#xA;    path: 'COM7',&#xA;    productId: 67,&#xA;    vendorId: 9025&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Property <code>path</code> then used for connection.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h2>Connect</h2>&#xA;&#xA;<p>To connect with default settings:</p>&#xA;&#xA;<pre><code>var path = 'COM7';&#xA;&#xA;chrome.serial.connect(path, {}, function(CI) {&#xA;    console.log('Connection ID: '+ CI.connecionId);&#xA;    console.log(CI);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Now you're ready!</p>&#xA;",2396907,"",,"",,2016-11-01T14:15:25,"","",,0,,,
40374118,2,,40360020,2016-11-02T07:01:48,,2,,<p>As long as your main use of Electron is to create a 'native browser wrapper' for a web-app this is entirely possible.</p>&#xA;&#xA;<p>You will have to implement a check if your application is running inside a browser or inside Electron and wrap your electron specific code in it:</p>&#xA;&#xA;<pre><code>if (window &amp;&amp; window.process &amp;&amp; process.versions['electron']) {&#xA;  const {BrowserWindow} = require('electron').remote&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You'll probably have to step through your application and disable Electron specific functionality at multiple places.</p>&#xA;,1792564,"",,"",,2016-11-02T07:01:48,"","",,0,,,
40383434,2,,40283508,2016-11-02T15:12:13,,2,,<p>I found the solution. I had to add the following option in js code when I create fileinput:</p>&#xA;&#xA;<pre><code>layoutTemplates: {progress: ''}&#xA;</code></pre>&#xA;,1447498,"",,"",,2016-11-02T15:12:13,"","",,0,,,
40501501,2,,40501424,2016-11-09T06:56:57,,2,,"<p>You can create a <code>File</code> or <code>Blob</code> object of <code>document</code></p>&#xA;&#xA;<pre><code>let file = new File([document.documentElement.outerHTML]&#xA;           , ""file-"" + new Date().getTime() + "".html""&#xA;           , {type:""text/html"", lastModified:new Date().getTime()});&#xA;</code></pre>&#xA;",2801559,"",,"",,2016-11-09T06:56:57,"","",,0,,,
40522599,2,,40476315,2016-11-10T08:04:33,,2,,<p>It looks like the relevant Javascript you are referencing is running in the main process rather than the renderer processes. If you move the code that references <code>window</code> into a script tag in the html you shouldn't see the same issue.</p>&#xA;&#xA;<p>As far as requiring the files from the html page I would expect it to work as if it were in a script tag also. I could be mistaken though.</p>&#xA;,1486472,"",,"",,2016-11-10T08:04:33,"","",,0,,,
40386685,2,,40386529,2016-11-02T17:57:55,,3,,"<p>Check out <a href=""https://sqlite.org/"" rel=""nofollow noreferrer"">SQLite</a> Might be what you are looking for - basically, SQLite is, according to the project site, an in-process library that implements a <strong>self-contained, serverless, zero-configuration</strong> (here I read portable as well), transactional SQL database engine.</p>&#xA;&#xA;<p>As an aside, please note the following in terms of your question (requesting recommendations of a tool from the community):  Questions that request the community to recommend or find a book, tool, software library, tutorial or other off-site resource are off-topic for Stack Overflow as they tend to attract opinionated answers and spam. </p>&#xA;",3193249,"",,"",,2016-11-02T17:57:55,"","",,0,,,
40392584,2,,40376193,2016-11-03T01:50:12,,3,,"<p>Electron always creates a separate process for each BrowserWindow and WebView, unless you specifically change the Chromium process model via a flag (but that's not advisable as it'll break things).</p>&#xA;",1259938,"",,"",,2016-11-03T01:50:12,"","",,0,,,
40443358,2,,40383137,2016-11-05T21:24:18,,3,,"<p>Here is the answer: <a href=""https://github.com/rwaldron/johnny-five/issues/1101#issuecomment-213581938"" rel=""nofollow noreferrer"">github issue comment on the Johnny-Five repo</a></p>&#xA;&#xA;<p>Quoting from brodo's answer, this is what you do to stop webpack getting snarled up with ""bindings"" and similar:</p>&#xA;&#xA;<pre><code>... the webpack config looks like this:&#xA;&#xA;module.exports = {&#xA;  plugins: [&#xA;    new webpack.ContextReplacementPlugin(/bindings$/, /^$/)&#xA;  ],&#xA;  externals: [""bindings""]&#xA;}&#xA;</code></pre>&#xA;",4040737,"",,"",,2016-11-05T21:24:18,"","",,2,,,
40486096,2,,36321498,2016-11-08T11:45:15,,3,,"<p>The dimensions you specify in <code>BrowserWindow</code> options are not the dimensions of the body but the dimensions of the window, including the frame.</p>&#xA;&#xA;<p>If you want the inside of your window to match what you specify as options, you should use <code>useContentSize: true</code></p>&#xA;&#xA;<p>From <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#class-browserwindow"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/browser-window.md#class-browserwindow</a></p>&#xA;",3771483,"",,"",,2016-11-08T11:45:15,"","",,0,,,
40317339,2,,40306837,2016-10-29T08:23:03,,4,,"<p>With Electron, node.js is not acting as a webserver with routes like it would be in a typical web application scenario. Instead of sending requests to routes, you would create a single page application using a javascript framework like Angular, React, Knockout, etc. At that point, you no longer need to handle routing. You would tie your 'Submit' click event to a javascript function directly within the page, and process the input from there.</p>&#xA;&#xA;<p>You can do everything from the page's javascript context that you can do from the node.js main process context. For instance, if you needed to access the file system from your page, you would use the <a href=""https://github.com/electron/electron/blob/master/docs/api/remote.md"" rel=""nofollow"">Remote</a> module to gain access to the node.js native APIs.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>// Gain access to the node.js file system api&#xA;function useNodeApi() {&#xA;  const remote = require('electron').remote;&#xA;  const fs = remote.require('fs');&#xA;  fs.writeFile('test.txt', 'Hello, I was written by the renderer process!');&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I've rarely come across a situation where I needed to pass control back to the main process to accomplish something. Once the BrowserWindow launches, anything you could ever need to do could be done from the renderer process. This pretty much eliminates the need to do things like submit form posts via http.</p>&#xA;",5693223,"",5693223,"",2016-10-29T08:29:09,2016-10-29T08:29:09,"","",,0,,,
40371146,2,,40370828,2016-11-02T01:30:16,,5,,"<p>You've got the right idea, you need to listen to the <a href=""https://github.com/electron/electron/blob/da3dbdcb9bb98471cede64ddd311dc8b4c378e62/docs/api/web-contents.md#event-new-window"" rel=""noreferrer""><code>new-window</code> event</a> and forward the URL to the default browser. You'd implement it in the main process like so:</p>&#xA;&#xA;<pre><code>import { shell } from 'electron'&#xA;&#xA;mainWindow.webContents.on('new-window', (event, url) =&gt; {&#xA;  // stop Electron from opening another BrowserWindow&#xA;  event.preventDefault()&#xA;  // open the url in the default system browser&#xA;  shell.openExternal(url)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Note that the <code>new-window</code> event actually provides some additional information about the window to be opened (not just the URL), it may make sense for you to take some of that info into account to figure out if the URL should be forwarded to the default browser or not.</p>&#xA;",1259938,"",,"",,2016-11-02T01:30:16,"","",,1,,,
40375237,2,,40364181,2016-11-02T08:18:12,,5,,"<p>It's not in the Electron documentation because its not an Electron issue in the first place. </p>&#xA;&#xA;<p>Use the library '<a href=""https://github.com/sindresorhus/wallpaper"" rel=""noreferrer"">wallpaper</a>' which can be found on <a href=""https://www.npmjs.com/package/wallpaper"" rel=""noreferrer"">NPMjs</a> and installed via </p>&#xA;&#xA;<pre><code>npm install --save wallpaper&#xA;</code></pre>&#xA;",1792564,"",,"",,2016-11-02T08:18:12,"","",,2,,,
40445522,2,,40440666,2016-11-06T02:48:22,,5,,"<p>The issue here is that <code>BrowserWindow.setMenu()</code> is only available on Windows and Linux. On macOS you should use <a href=""http://electron.atom.io/docs/api/menu/#menusetapplicationmenumenu"" rel=""noreferrer""><code>Menu.setApplicationMenu()</code></a>.</p>&#xA;",1259938,"",,"",,2016-11-06T02:48:22,"","",,1,,,
40334741,2,,40331285,2016-10-30T23:23:54,,6,,"<p><code>this.status</code> is set on wrong object, and <code>markForCheck</code> doesn't work because of this too. Event handler should be an arrow in order for proper context to be provided.</p>&#xA;&#xA;<p>With proper <code>this</code> context any known way to trigger change detection should work.</p>&#xA;&#xA;<p>For example</p>&#xA;&#xA;<pre><code>ipc.on('...', (evt, status) =&gt; {&#xA;  ...&#xA;  this.changeDetectorRef.detectChanges();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Or</p>&#xA;&#xA;<pre><code>ipc.on('...', (evt, status) =&gt; {&#xA;  setTimeout(() =&gt; {&#xA;    ...&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",3731501,"",,"",,2016-10-30T23:23:54,"","",,2,,,
40491764,2,,40390779,2016-11-08T16:20:14,,11,,<p>The problem was hardware acceleration. The members of the Electron devteam told me that hardware acceleration may cause input lag.</p>&#xA;&#xA;<pre><code>app.disableHardwareAcceleration(); &#xA;</code></pre>&#xA;&#xA;<p>Lag disappeared after writing that command in <code>main.js</code>.</p>&#xA;,5484153,"",5484153,"",2019-02-26T08:13:22,2019-02-26T08:13:22,"","",,0,,,
40486036,2,,40485102,2016-11-08T11:42:15,,12,,"<p>This can be done in electron quite easily, I've actually created a few tray apps myself in the below images:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/V9Ozf.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/V9Ozf.png"" alt=""Tray app""></a> <a href=""https://i.stack.imgur.com/aTVys.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/aTVys.png"" alt=""Trap app 2""></a></p>&#xA;&#xA;<p>Here is a post that outlines exactly what to do: <a href=""http://www.bytcode.com/articles/1"" rel=""noreferrer"">http://www.bytcode.com/articles/1</a></p>&#xA;&#xA;<p>The rudimentary files you need are:</p>&#xA;&#xA;<ul>&#xA;<li>index.html</li>&#xA;<li>main.js</li>&#xA;<li>package.json</li>&#xA;</ul>&#xA;&#xA;<p>In the <code>index.html</code> you would design your app the way you wanted it to look. In my example above I just used a couple of input boxes and styled it with CSS. </p>&#xA;&#xA;<p>In the <code>main.js</code> file is where your would put your main code to power the app.</p>&#xA;&#xA;<p>In the <code>package.json</code> file is where you put the details about your app, dev dependencies etc.</p>&#xA;&#xA;<p>The main file you should be concerned with is the <code>main.js</code> file. Below is an example of the <code>main.js</code> file for the app above. I've added comments to help you understand:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// Sets variables (const)&#xA;const {app, BrowserWindow, ipcMain, Tray} = require('electron')&#xA;const path = require('path')&#xA;&#xA;const assetsDirectory = path.join(__dirname, 'img')&#xA;&#xA;let tray = undefined&#xA;let window = undefined&#xA;&#xA;// Don't show the app in the doc&#xA;app.dock.hide()&#xA;&#xA;// Creates tray &amp; window&#xA;app.on('ready', () =&gt; {&#xA;  createTray()&#xA;  createWindow()&#xA;})&#xA;&#xA;// Quit the app when the window is closed&#xA;app.on('window-all-closed', () =&gt; {&#xA;  app.quit()&#xA;})&#xA;&#xA;// Creates tray image &amp; toggles window on click&#xA;const createTray = () =&gt; {&#xA;  tray = new Tray(path.join(assetsDirectory, 'icon.png'))&#xA;  tray.on('click', function (event) {&#xA;    toggleWindow()&#xA;  })&#xA;}&#xA;&#xA;  const getWindowPosition = () =&gt; {&#xA;  const windowBounds = window.getBounds()&#xA;  const trayBounds = tray.getBounds()&#xA;&#xA;  // Center window horizontally below the tray icon&#xA;  const x = Math.round(trayBounds.x + (trayBounds.width / 2) - (windowBounds.width / 2))&#xA;&#xA;  // Position window 4 pixels vertically below the tray icon&#xA;  const y = Math.round(trayBounds.y + trayBounds.height + 3)&#xA;&#xA;  return {x: x, y: y}&#xA;}&#xA;&#xA;// Creates window &amp; specifies its values&#xA;const createWindow = () =&gt; {&#xA;  window = new BrowserWindow({&#xA;        width: 250,&#xA;        height: 310,&#xA;        show: false,&#xA;        frame: false,&#xA;        fullscreenable: false,&#xA;        resizable: false,&#xA;        transparent: true,&#xA;        'node-integration': false&#xA;    })&#xA;    // This is where the index.html file is loaded into the window&#xA;    window.loadURL('file://' + __dirname + '/index.html');&#xA;&#xA;  // Hide the window when it loses focus&#xA;  window.on('blur', () =&gt; {&#xA;    if (!window.webContents.isDevToolsOpened()) {&#xA;      window.hide()&#xA;    }&#xA;  })&#xA;}&#xA;&#xA;const toggleWindow = () =&gt; {&#xA;  if (window.isVisible()) {&#xA;    window.hide()&#xA;  } else {&#xA;    showWindow()&#xA;  }&#xA;}&#xA;&#xA;const showWindow = () =&gt; {&#xA;  const position = getWindowPosition()&#xA;  window.setPosition(position.x, position.y, false)&#xA;  window.show()&#xA;  window.focus()&#xA;}&#xA;&#xA;ipcMain.on('show-window', () =&gt; {&#xA;  showWindow()&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Below is an example of the <code>package.json</code> file:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>{&#xA;  ""name"": ""NAMEOFAPP"",&#xA;  ""description"": ""DESCRIPTION OF APP"",&#xA;  ""version"": ""0.1.0"",&#xA;  ""main"": ""main.js"",&#xA;  ""license"": ""MIT"",&#xA;  ""author"": ""NAME OF AUTHOR"",&#xA;  ""scripts"": {&#xA;    ""start"": ""electron .""&#xA;  },&#xA;  ""devDependencies"": {&#xA;    ""electron-packager"": ""^8.2.0""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So, If you create a simple <code>index.html</code> file saying Hello World, place the above codes into the <code>main.js</code> file and <code>package.json</code> file respectively and run the app it will run from the tray.</p>&#xA;&#xA;<p>If you have no idea how to use electron, you need to figure that out first (its not that hard to grasp). It will then become clear where to place what files and how to run the app</p>&#xA;&#xA;<p>This may seem a bit complicated, and for more details you can read the <a href=""http://electron.atom.io/docs/"" rel=""noreferrer"">docs</a></p>&#xA;",6523193,"",6523193,"",2017-03-13T06:16:48,2017-03-13T06:16:48,"","",,7,,,
40456229,2,,40445068,2016-11-07T00:38:22,,34,,<p>Call <code>mainWindow.maximize()</code> to maximize the window after you create it.</p>&#xA;,1259938,"",,"",,2016-11-07T00:38:22,"","",,1,,,
40424568,2,,40424298,2016-11-04T13:58:28,,60,,"<p>I am not sure why, but someone added an answer and then deleted it quickly after... I was fast enough to catch it though, and after checking, it is the shortest and most effective way of doing what I asked before:</p>&#xA;&#xA;<p><code>require(""os"").userInfo().username</code></p>&#xA;&#xA;<p>The only problem is, in Windows 10, it returns the first name of the owner account that has been used (just a heads up).&#xA;Everything else works completely fine!</p>&#xA;",4025162,"",72668,"",2017-06-27T23:56:40,2017-06-27T23:56:40,"","",,6,,,
41499056,2,,41459814,2017-01-06T04:42:03,,0,,"<p>I solved it by myself just changed <code>import { UniversalModule, isBrowser, isNode, REQUEST_URL, ORIGIN_URL } from 'angular2-universal';</code> to <code>import { UniversalModule, isBrowser, isNode } from 'angular2-universal/browser';</code> and add base href in my index page that is   <code>&lt;base href=""./""&gt;</code></p>&#xA;",4690173,"",,"",,2017-01-06T04:42:03,"","",,0,,,
41500370,2,,41499872,2017-01-06T06:43:44,,0,,"<pre><code>bitmap.image.toString('base64')&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_buf_tostring_encoding_start_end"" rel=""nofollow noreferrer"">https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_buf_tostring_encoding_start_end</a></p>&#xA;",6215735,"",,"",,2017-01-06T06:43:44,"","",,1,,,
41553305,2,,41499163,2017-01-09T17:12:02,,0,,<p>I sorted it out by myself its saying in this command <code>electron-packager bin/desktopBuild --version 1.4.3 --platform linux --out ./MyApp</code>  ..... <code>bin/desktopBuild</code> is not a valid directory ...</p>&#xA;,4690173,"",,"",,2017-01-09T17:12:02,"","",,0,,,
41561159,2,,41560528,2017-01-10T04:29:24,,0,,<p>Electron doesn't have a <code>ChildProcess</code> method or property.</p>&#xA;&#xA;<p>If you want to <code>exec</code> a command then use;</p>&#xA;&#xA;<pre><code>const childProcess = require('child_process')&#xA;&#xA;childProcess.exec('')&#xA;</code></pre>&#xA;,1924979,"",,"",,2017-01-10T04:29:24,"","",,1,,,
41671676,2,,41664874,2017-01-16T07:50:41,,0,,"<p>I found solution:</p>&#xA;&#xA;<ol>&#xA;<li><p>In Electron app start ExpressJS server (from mainProcess)</p></li>&#xA;<li><p>In ExpressJS request handler add </p>&#xA;&#xA;<pre><code>win.webContents.send('superEvent', 'ping');&#xA;</code></pre></li>&#xA;<li><p>In rendererProcess add </p>&#xA;&#xA;<pre><code>ipcRenderer.on('superEvent', (event, arg) =&gt; {alert('pong')});&#xA;</code></pre></li>&#xA;<li><p>Start Electon app, open ExpressJS page in Browser and you will see alert in Electron window. Profit! :)</p></li>&#xA;</ol>&#xA;",2893636,"",,"",,2017-01-16T07:50:41,"","",,0,,,
41531874,2,,41531619,2017-01-08T10:49:58,,1,,"<p>According to me you should use LinvoDB because they are best with large objects also they are not effected by large db size and uses mongodb queries for CRUD operation.</p>&#xA;&#xA;<p>I think its best for your application as you were looking for a kind of db that does not persist in the memory.It also does not scan whole db whenever query is fired.</p>&#xA;&#xA;<p>There is also one more db option realm which is the best db according to me and it is released few days back.</p>&#xA;&#xA;<p>please refer: <a href=""https://github.com/realm/realm-js/issues/262"" rel=""nofollow noreferrer"">https://github.com/realm/realm-js/issues/262</a> </p>&#xA;&#xA;<p>Cheers :)</p>&#xA;",7310960,"",,"",,2017-01-08T10:49:58,"","",,1,,,
41543157,2,,41503873,2017-01-09T07:42:49,,1,,"<p>It is not possible, because processes opening the browser window is a renderer process, it is invoked via electron.remote, and therefore processed async. Because of this, the window is closed before the close event is processed.&#xA;In case the process opening the browserwindow was the main process, then it would be fine.</p>&#xA;&#xA;<p>This shows the case: <a href=""https://github.com/CThuleHansen/windowHide"" rel=""nofollow noreferrer"">https://github.com/CThuleHansen/windowHide</a>&#xA;And here is a longer discussion of the issue: <a href=""https://discuss.atom.io/t/close-event-for-window-being-fired-after-window-has-been-closed/37863/4"" rel=""nofollow noreferrer"">https://discuss.atom.io/t/close-event-for-window-being-fired-after-window-has-been-closed/37863/4</a></p>&#xA;",1308616,"",,"",,2017-01-09T07:42:49,"","",,0,,,
41561267,2,,41487488,2017-01-10T04:43:45,,1,,"<p>You can require node modules using <code>require</code> in <code>electron</code> because it is a combination of Chromium, Node.js, and other libraries.</p>&#xA;&#xA;<pre><code>const myPackage = require('some-node-package')&#xA;</code></pre>&#xA;&#xA;<p>So, if you do <code>process.versions</code> in electron interactive mode or in a script, you will get this;</p>&#xA;&#xA;<pre><code>&gt; process.versions&#xA;{ http_parser: '2.7.0',&#xA;  node: '6.5.0',&#xA;  v8: '5.3.332.47',&#xA;  uv: '1.9.1',&#xA;  zlib: '1.2.8',&#xA;  ares: '1.10.1-DEV',&#xA;  modules: '50',&#xA;  openssl: '1.0.2h',&#xA;  electron: '1.4.12',&#xA;  chrome: '53.0.2785.143',&#xA;  'atom-shell': '1.4.12' }&#xA;</code></pre>&#xA;&#xA;<p>Which means, Electron has <code>Node v6.5.0</code>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>However, for native modules, you may require rebuilding your application. See this for more details: <a href=""https://github.com/electron/electron-rebuild"" rel=""nofollow noreferrer"">https://github.com/electron/electron-rebuild</a></p>&#xA;</blockquote>&#xA;",1924979,"",,"",,2017-01-10T04:43:45,"","",,0,,,
41578199,2,,41578002,2017-01-10T20:53:24,,1,,"<p>In javascript backslash is interpreted as an escape for the next character.</p>&#xA;&#xA;<pre><code>`console.log('\a\b\c');` &#xA;             //==&gt;  ac   ( escaped a is a, escaped b is backspace ,  escaped c is c'&#xA;</code></pre>&#xA;&#xA;<p>If you want backslashes in your string you have to escape those too</p>&#xA;&#xA;<pre><code>`console.log('\\a\\b\\c');` &#xA;            //==&gt; \a\b\c&#xA;</code></pre>&#xA;&#xA;<p>In other words the first backslash in \ gets eaten as an escape indicator :)</p>&#xA;",5531898,"",,"",,2017-01-10T20:53:24,"","",,0,,,
41598862,2,,41529379,2017-01-11T19:09:35,,1,,"<p>Main issue with your code is that you are registering maximize event on window object after that you are reloading using window.location, so your javascript code will be removed and garbage collected.</p>&#xA;&#xA;<p>You need to inject your js code after every reload, you can use &#xA;<strong>inject_js_start</strong> or <strong>inject_js_end</strong> config of package.json to make sure you script is preserved on every reload</p>&#xA;&#xA;<p>Below is the full working code as per your requirement</p>&#xA;&#xA;<p><strong>home.html</strong></p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=""utf-8"" /&gt; &#xA;    &lt;title&gt;Tray Demo&lt;/title&gt;&#xA;&#xA;    &lt;script type=""text/javascript""&gt;&#xA;    console.log('redirecting the page');&#xA;        window.location.href = 'http://www.microsoft.com';&#xA;    &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;p&gt;redirecting the page...&lt;/p&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>package.json</strong></p>&#xA;&#xA;<pre><code>{&#xA;  ""main"": ""home.html"",&#xA;  ""name"": ""tray-demo"",&#xA;  ""description"": ""tray demo for windows"",&#xA;  ""version"": ""1.0"",&#xA;  ""inject_js_start"": ""NWInit.js"",&#xA;  ""window"": {&#xA;    ""title"": ""Tray Demo"",&#xA;    ""resizable"": true,&#xA;    ""show_in_taskbar"": true&#xA;  },&#xA;  ""webkit"": {&#xA;    ""plugin"": true&#xA;  },&#xA;  ""node-remote"": ""*://*""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>NWInit.js</strong></p>&#xA;&#xA;<pre><code>if(typeof nw != 'undefined') {&#xA;    NWInit = {&#xA;        initApp: function() {&#xA;            console.log('init app called');&#xA;&#xA;            var win = nw.Window.get();&#xA;            win.showDevTools();&#xA;&#xA;            win.on('minimize', function() {&#xA;                console.log('minimize called');&#xA;&#xA;                if(typeof nw.Tray == 'undefined') {&#xA;                    return;&#xA;                }&#xA;&#xA;                win.hide();&#xA;&#xA;                var tray = new nw.Tray({&#xA;                    title: 'Web Music Player',&#xA;                    icon: 'img/music.png'&#xA;                });&#xA;&#xA;                tray.on('click', function() {&#xA;                    console.log('tray clicked');&#xA;&#xA;                    win.show();&#xA;&#xA;                    tray.remove();&#xA;                    tray = null;&#xA;                });&#xA;            });&#xA;        }&#xA;    };&#xA;&#xA;    NWInit.initApp();&#xA;}&#xA;</code></pre>&#xA;",1237812,"",,"",,2017-01-11T19:09:35,"","",,11,,,
41628707,2,,41622063,2017-01-13T06:35:11,,1,,"<p>Electron exposes a (partly experimental) <a href=""http://electron.atom.io/docs/api/clipboard/#clipboard"" rel=""nofollow noreferrer"">clipboard API</a> that should serve your needs. </p>&#xA;&#xA;<p>Strangely, there seems to be no callback method available to react on new content, you may have to keep polling <a href=""https://electronjs.org/docs/api/clipboard#clipboardreadformat-experimental"" rel=""nofollow noreferrer""><code>clipboard.read</code></a> and diff its content.</p>&#xA;",1792564,"",7103969,"",2019-12-10T07:45:55,2019-12-10T07:45:55,"","",,0,,,
41658974,2,,41488348,2017-01-15T07:51:58,,1,,"<p>When opening new window you are using same html file which contains code to create menu bar, so it is obviously going to create menu bar for popup window also, you need to use different html file for popup window.</p>&#xA;&#xA;<p>Below is the full version of code, let me know if it is not working for you</p>&#xA;&#xA;<p><strong>index.html</strong></p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=""utf-8"" /&gt; &#xA;    &lt;title&gt;Demo&lt;/title&gt;&#xA;&#xA;    &lt;script type=""text/javascript""&gt;&#xA;        //var win = nw.Window.get();&#xA;        //win.showDevTools();&#xA;&#xA;        var menu = new nw.Menu({ type: 'menubar' });&#xA;&#xA;        var submenu = new nw.Menu();&#xA;        submenu.append(new nw.MenuItem({&#xA;            label: 'Exit',&#xA;            click: function(){&#xA;                nw.App.quit();&#xA;            }&#xA;        }));&#xA;&#xA;        menu.append(new nw.MenuItem({&#xA;            label: 'File',&#xA;            submenu: submenu&#xA;        }));&#xA;        menu.append(new nw.MenuItem({&#xA;            label: 'New Page',&#xA;            click: function(){&#xA;                console.log('open new page');&#xA;                var parentWin = window;&#xA;&#xA;                if(parentWin.localStorage.getItem('child_open')) {&#xA;                    console.log('child window is already open');&#xA;                    return;&#xA;                }&#xA;&#xA;                nw.Window.open('home.html#new_page', {}, function(win) {&#xA;                    parentWin.localStorage.setItem('child_open', true);&#xA;&#xA;                    win.on('closed', function() {&#xA;                        parentWin.localStorage.removeItem('child_open');&#xA;                    });&#xA;                });&#xA;            }&#xA;        }));&#xA;&#xA;        nw.Window.get().menu = menu;&#xA;    &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>home.html</strong></p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=""utf-8"" /&gt; &#xA;    &lt;title&gt;Inner Window&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&#xA;    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&#xA;    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&#xA;    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&#xA;    &lt;p id=""new_page""&gt; New page section &lt;/p&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",1237812,"",1237812,"",2017-01-17T19:18:48,2017-01-17T19:18:48,"","",,4,,,
41674522,2,,41674033,2017-01-16T10:43:34,,1,,"<p>You can intercept <code>require</code> calls by overriding <code>module._load</code> : </p>&#xA;&#xA;<pre><code>const m = require('module');&#xA;const originalLoader = m._load;&#xA;const stubs = { electron : {} };&#xA;&#xA;m._load = function hookedLoader(request, parent, isMain) {&#xA;  const stub = stubs[request];&#xA;  return stub || originalLoader(request, parent, isMain);&#xA;};&#xA;</code></pre>&#xA;",4712818,"",,"",,2017-01-16T10:43:34,"","",,1,,,
41468251,2,,41459776,2017-01-04T16:04:38,,2,,"<p>One way to have python find different libraries is to use the environment  variable <code>PYTHONPATH</code>.  You can set this in node.js using <code>process.env.PYTHONPATH</code></p>&#xA;&#xA;<p>(<a href=""https://nodejs.org/api/process.html#process_process_env"" rel=""nofollow noreferrer"">DOCS</a>) (<a href=""https://stackoverflow.com/questions/15058954/node-js-is-there-any-documentation-about-the-process-env-variable"">SOURCE</a>)</p>&#xA;&#xA;<p>For the specific case of wanting to run the <code>homebrew</code> installed python, the python executable should be available at:</p>&#xA;&#xA;<pre><code>let ls = spawn(process.env.HOMEBREW_PREFIX + '/bin/python', ['runserver.py','--help'], {&#xA;    ...&#xA;</code></pre>&#xA;&#xA;<p>If <code>HOMEBREW_PREFIX</code> is not available in<code>process.env</code>, and the path to the desired python is known, it can be hard-coded into the spawn:</p>&#xA;&#xA;<pre><code>let ls = spawn(/*&lt;Where my python lives&gt;*/ + '/bin/python', ['runserver.py','--help'], {&#xA;    ...&#xA;</code></pre>&#xA;",7311767,"",-1,"",2017-05-23T12:09:10,2017-01-04T17:21:58,"","",,2,,,
41545563,2,,41510472,2017-01-09T10:13:01,,2,,"<p>Basically the thing is very simple. Electron acts just like a desktop chromium wrapper, that displays your any (any) type of web page inside desktop chromium.</p>&#xA;&#xA;<p>So for example, we want to display <a href=""http://www.google.com"" rel=""nofollow noreferrer"">http://www.google.com</a> then you simply pass this URL to your <code>loadURL()</code> function.</p>&#xA;&#xA;<p>Here is the working copy of code (asked in the question):</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;  // Module to control application life.&#xA;const app = electron.app;&#xA;  // Module to create native browser window.&#xA;const BrowserWindow = electron.BrowserWindow;&#xA;&#xA;app.on('ready', function(){&#xA;    var mainWindow = new BrowserWindow({width: 800, height: 600});&#xA;&#xA;    mainWindow.loadURL(""http://localhost:8080/"");  // option1: (loading a local app running on a local server)&#xA;&#xA;    //mainWindow.loadURL(""https://iaya-664f3.firebaseapp.com"");  // option2: (loading external hosted app)&#xA;&#xA;    // loading developer tool for debugging&#xA;    mainWindow.webContents.openDevTools();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I hope this will clarify the confusion for many people, who are new to <code>Electron</code>. So the final words are that <code>Electron</code> only loads existing and running web application. It does not compile, does not act as a server. It is just a box in which you can put anything and give it a desktop sort of look e.g. menues, desktop notification, local file system access, etc.</p>&#xA;",2101576,"",,"",,2017-01-09T10:13:01,"","",,0,,,
41576001,2,,41553381,2017-01-10T18:38:45,,2,,<p>I just removed that runner and started fresh one. New Runner downloaded Spectron and ChromeDriver on start and Chrome worked.</p>&#xA;,7096189,"",,"",,2017-01-10T18:38:45,"","",,0,,,
41613675,2,,41608513,2017-01-12T12:49:01,,2,,"<p>From the menubar docs (<a href=""https://github.com/maxogden/menubar"" rel=""nofollow noreferrer"">https://github.com/maxogden/menubar</a>) the menubar instance exposes the following methods:</p>&#xA;&#xA;<pre><code>{&#xA;  app: the electron require('app') instance,&#xA;  window: the electron require('browser-window') instance,&#xA;  tray: the electron require('tray') instance,&#xA;  positioner: the electron-positioner instance,&#xA;  setOption(option, value): change an option after menubar is created,&#xA;  getOption(option): get an menubar option,&#xA;  showWindow(): show the menubar window,&#xA;  hideWindow(): hide the menubar window&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Using <code>menu.showWindow()</code> &amp; <code>menu.hideWindow()</code> instead of <code>menu.window.show()</code> &amp; <code>menu.window.hide()</code> will work.</p>&#xA;&#xA;<p>I would further suggest that you use the built in events to manage your state, simplifying your code and implementation:</p>&#xA;&#xA;<pre><code>const { globalShortcut } = require('electron');&#xA;&#xA;let isShown = false;&#xA;menu&#xA;  .on('after-show', () =&gt; { isShown = true })&#xA;  .on('after-hide', () =&gt; { isShown = false })&#xA;  .on('focus-lost', () =&gt; { isShown = false });&#xA;&#xA;globalShortcut.register('CommandOrControl+Shift+g', () =&gt; {&#xA;  isShown ? menu.hideWindow() : menu.showWindow()&#xA;});&#xA;</code></pre>&#xA;",2780750,"",,"",,2017-01-12T12:49:01,"","",,0,,,
41646004,2,,41629822,2017-01-14T01:52:38,,2,,"<p>You can't set the <code>BrowserWindow</code> id, it's generated by Electron.</p>&#xA;",1259938,"",,"",,2017-01-14T01:52:38,"","",,0,,,
41662179,2,,41594687,2017-01-15T14:21:53,,2,,"<p>We started using NWJS for that reason and also because it had support for <code>chrome.serial</code>. Lately I converted the project to electron for a few reasons:</p>&#xA;&#xA;<ul>&#xA;<li>More large companies on board&#xA;&#xA;<ul>&#xA;<li>more commits, testing and maintenance</li>&#xA;</ul></li>&#xA;<li>More built-in functionality&#xA;&#xA;<ul>&#xA;<li>eg, <a href=""http://electron.atom.io/docs/api/power-save-blocker/"" rel=""nofollow noreferrer"">block power save</a></li>&#xA;</ul></li>&#xA;<li><a href=""https://github.com/electron-userland/electron-builder/"" rel=""nofollow noreferrer"">Better packaging tooling</a></li>&#xA;<li><a href=""http://electron.atom.io/spectron/"" rel=""nofollow noreferrer"">Better test tooling</a></li>&#xA;</ul>&#xA;&#xA;<p>You're right that NWJS doesn't have the complication of the main/render processes but I've found very few reasons to have to deal with IPC.</p>&#xA;&#xA;<p>Many of the APIs are only available in the <strong>main</strong> process but can be accessed via the <a href=""http://electron.atom.io/docs/api/remote/"" rel=""nofollow noreferrer"">remote</a> API. So for example to get access to the <strong>main</strong> <code>process.argv</code> from the <strong>render</strong> process I use:</p>&#xA;&#xA;<pre><code>{process} = require('electron').remote&#xA;process.argv ...&#xA;</code></pre>&#xA;&#xA;<p>In my index.js I've had to do a few IPC things but electron has libraries to simplify this:</p>&#xA;&#xA;<pre><code>// ensure we only have a single instance, but pass args to renderer to open any files passed by explorer&#xA;const shouldQuit = app.makeSingleInstance((argv, workingDir) =&gt; {&#xA;  win.webContents.send('open-instance', argv);&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Then in my renderer code somewhere I have the following:</p>&#xA;&#xA;<pre><code>ipcRenderer.on('open-instance', (event, arg) =&gt; {&#xA;  this.restoreAndFocus();&#xA;  // TODO - handle another instance opening a file from explorer&#xA;});&#xA;</code></pre>&#xA;",106623,"",,"",,2017-01-15T14:21:53,"","",,3,,,
41463541,2,,41462152,2017-01-04T12:11:40,,3,,"<p>After a bit more reading, I just found out that <code>BrowserWindow.getFocusedWindow()</code> is exactly what I was looking for.</p>&#xA;&#xA;<p>So in my app menu, I juste call <code>BrowserWindow.getFocusedWindow().webContents.openDevTools()</code>, and it works as I expected.</p>&#xA;",5206797,"",,"",,2017-01-04T12:11:40,"","",,0,,,
41505550,2,,41505214,2017-01-06T12:16:41,,3,,"<p><em>You know that feeling when you ask a question and than immediately find the answer?</em></p>&#xA;&#xA;<p>The solution is to call <a href=""https://github.com/electron/spectron#clientwindowbyindexindex"" rel=""nofollow noreferrer""><code>windowByindex()</code></a> from the Spectron API. You need to call the API functions from the Spectron for this, not the functions from the <a href=""http://webdriver.io/api.html"" rel=""nofollow noreferrer"">Webdriver</a>.</p>&#xA;&#xA;<p>So solution to our problem is:</p>&#xA;&#xA;<pre><code>app.start().then(function(){&#xA;    app.client.windowByIndex(1);    &#xA;});&#xA;</code></pre>&#xA;",1768843,"",,"",,2017-01-06T12:16:41,"","",,2,,,
41577365,2,,41577319,2017-01-10T20:01:34,,3,,<p>Try adding this to your constructor at the bottom:</p>&#xA;&#xA;<pre><code>this.getNextSentence = this.getNextSentence.bind(this);&#xA;</code></pre>&#xA;,708728,"",,"",,2017-01-10T20:01:34,"","",,2,,,
41511535,2,,41511079,2017-01-06T17:59:15,,9,,"<p><code>npm start</code> runs the script in the package.json. To get an electron app running with it just add <code>electron .</code> to the start script : </p>&#xA;&#xA;<p><strong>package.json</strong></p>&#xA;&#xA;<pre><code>{&#xA; ""name"": ""angular2electron"",&#xA;  ""version"": ""1.0.1"",&#xA;  ""description"": ""my first angularjs"",&#xA;  ""main"": ""main.js"",&#xA;  ""dependencies"": {&#xA;    ""electron"": ""^1.4.13""&#xA;  },&#xA;  ""devDependencies"": {},&#xA;  ""scripts"": {&#xA;    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1"", &#xA;    ""start"" : ""electron .""&#xA;  },&#xA;  ""author"": ""LAIDANI Youcef"",&#xA;  ""license"": ""MIT""&#xA;}&#xA;</code></pre>&#xA;",130453,"",,"",,2017-01-06T17:59:15,"","",,0,,,
41581623,2,,41199981,2017-01-11T02:10:24,,9,,"<p>You can include the script in <a href=""https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-extraResources"" rel=""noreferrer"">extraResources</a>:</p>&#xA;&#xA;<pre><code>""build"": {&#xA;    ""extraResources"": ""python_scripts"",&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>And then the dir will be at the app root:</p>&#xA;&#xA;<pre><code>let python = spawn('python', [path.join(app.getAppPath(), '..', 'python_scripts/my_script.py'])&#xA;</code></pre>&#xA;",453656,"",,"",,2017-01-11T02:10:24,"","",,0,,,
41561132,2,,41551110,2017-01-10T04:25:38,,29,,"<p>When you run your application in development environment using;</p>&#xA;&#xA;<pre><code>./node_modules/.bin/electron main.js&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>electron main.js&#xA;</code></pre>&#xA;&#xA;<p>You are actually running a <em>prebuilt</em> <code>electron</code> executable that runs file specified by you. So in this case, the OS will display the name under which the application was built and packaged.</p>&#xA;&#xA;<p>If you wish to change it, you need to package it. i.e. build your own distributable package. And to do this, there is an awesome package <a href=""https://github.com/electron-userland/electron-builder"" rel=""noreferrer""><code>electron-builder</code></a></p>&#xA;&#xA;<p>So install it;</p>&#xA;&#xA;<pre><code>npm install --save-dev electron-builder&#xA;</code></pre>&#xA;&#xA;<p>And then build the package;</p>&#xA;&#xA;<pre><code>./node_modules/.bin/build -m&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>Don't forget to set <code>productName</code> in <code>package.json</code>. It will be displyed in the menu on macOS, for example.</p>&#xA;  &#xA;  <p><code>-m</code> is for macOS.</p>&#xA;</blockquote>&#xA;&#xA;<p>And you'll see packages in <code>/dist</code> directory. However, If you have a custom application format, it may fail to build, so refer to <a href=""https://github.com/electron-userland/electron-builder#README"" rel=""noreferrer"">README</a> or <a href=""https://github.com/electron-userland/electron-builder/wiki"" rel=""noreferrer"">wiki</a> for details about application structure.</p>&#xA;",1924979,"",,"",,2017-01-10T04:25:38,"","",,0,,,
41582152,2,,41574586,2017-01-11T03:21:53,,44,,"<p>The short answer is if you want to write an Electron app today you should forget <code>electron-prebuilt</code> ever existed and always install the <code>electron</code> package instead.</p>&#xA;&#xA;<p>The long answer is that there used to be an NPM package called <code>electron</code> that was completely unrelated to Electron, so the Electron team had to use another name to distribute Electron on NPM, hence <code>electron-prebuilt</code>. Later on the author of the <code>electron</code> package kindly transferred the name to the Electron team so that they could publish Electron under that name, and put an end to people accidentally installing the wrong package.</p>&#xA;",1259938,"",7201943,"",2017-03-28T04:40:56,2017-03-28T04:40:56,"","",,2,,,
50262876,2,,50261152,2018-05-09T22:21:02,,3,,"<p>With Electron sqlite3 has to be built with electron-builder.</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/32504307/how-to-use-sqlite3-module-with-electron?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa"">How to use sqlite3 module with electron?</a>&#xA;and <a href=""https://github.com/electron-userland/electron-builder"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-builder</a>&#xA;both recommend adding this to your <code>package.json</code></p>&#xA;&#xA;<pre><code>""postinstall"": ""electron-builder install-app-deps""&#xA;</code></pre>&#xA;&#xA;<p>This will rebuild all native binaries everytime you install a new package.</p>&#xA;",9762440,"",,"",,2018-05-09T22:21:02,"","",,0,,,
50279067,2,,50200158,2018-05-10T18:12:19,,0,,"<p>Finally I found the solution.</p>&#xA;&#xA;<p>It seems that webpack overwrites some node modules.</p>&#xA;&#xA;<p>To prevent this you just have to add this to your webpack config :</p>&#xA;&#xA;<pre><code>target: 'node-webkit',&#xA;</code></pre>&#xA;&#xA;<p>I read that there were other types of availble targets like ""node"".</p>&#xA;&#xA;<p>This is most of the webpack file to help you place the above line correctly.</p>&#xA;&#xA;<pre><code>module.exports = {&#xA;  context: path.resolve(__dirname, '../'),&#xA;  entry: {&#xA;    app: './src/main.js'&#xA;  },&#xA;  output: {&#xA;    path: config.build.assetsRoot,&#xA;    filename: '[name].js',&#xA;     publicPath: process.env.NODE_ENV === 'production'&#xA;      ? config.build.assetsPublicPath&#xA;      : config.dev.assetsPublicPath&#xA;  },&#xA;  resolve: {&#xA;    extensions: ['.js', '.vue', '.json'],&#xA;    alias: {&#xA;      'vue$': 'vue/dist/vue.esm.js',&#xA;      '@': resolve('src'),&#xA;    }&#xA;  },&#xA;  module: {&#xA;    rules: [&#xA;      ...(config.dev.useEslint ? [createLintingRule()] : []),&#xA;      {&#xA;        test: /\.vue$/,&#xA;        loader: 'vue-loader',&#xA;        options: vueLoaderConfig&#xA;      },&#xA;      {&#xA;        test: /\.js$/,&#xA;        loader: 'babel-loader',&#xA;        include: [resolve('src'), resolve('test'), &#xA;resolve('node_modules/webpack-dev-server/client')]&#xA;       },&#xA;      {&#xA;        test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,&#xA;        loader: 'url-loader',&#xA;        options: {&#xA;          limit: 10000,&#xA;          name: utils.assetsPath('img/[name].[hash:7].[ext]')&#xA;        }&#xA;      },&#xA;      {&#xA;        test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,&#xA;        loader: 'url-loader',&#xA;        options: {&#xA;          limit: 10000,&#xA;          name: utils.assetsPath('media/[name].[hash:7].[ext]')&#xA;        }&#xA;      },&#xA;      {&#xA;        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,&#xA;        loader: 'url-loader',&#xA;        options: {&#xA;          limit: 10000,&#xA;          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')&#xA;        }&#xA;      }&#xA;    ]&#xA;  },&#xA;  target: 'node-webkit'&#xA;}&#xA;</code></pre>&#xA;",5512455,"",,"",,2018-05-10T18:12:19,"","",,0,,,
50307380,2,,50300874,2018-05-12T14:37:22,,0,,"<p>I found the next answer: use async-await.</p>&#xA;&#xA;<pre><code>async function isEmailExist(email) {&#xA;    let count = await new Promise((resolve, reject) =&gt; {&#xA;        db.count({email: email}, (err, count) =&gt; {&#xA;            if (err) reject(err);&#xA;            resolve(count);&#xA;        });&#xA;    });&#xA;    return count &gt; 0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And on the call use again await:</p>&#xA;&#xA;<pre><code>async function isAccessData(req) {&#xA;    let errors = [];&#xA;&#xA;    if (await users.isEmailExist(req.body.email) === true) {&#xA;    // doing&#xA;    }&#xA; }&#xA;</code></pre>&#xA;",6953119,"",,"",,2018-05-12T14:37:22,"","",,0,,,
50324877,2,,50092546,2018-05-14T07:16:45,,0,,"<p>So I think the issue was that since I'm using VSCode, I had to first set debugging launch options so that it recognized the debug session not as a node session but as an electron session, which will cause VScode to recognize electron's sub methods (such as app, BrowserWindow, etc.) in the debugger.  Without doing that, it wasn't looking for those and was throwing an undefined error.</p>&#xA;",1623804,"",1623804,"",2018-05-19T18:17:45,2018-05-19T18:17:45,"","",,0,,,
50326419,2,,50320233,2018-05-14T08:53:50,,2,,"<p>Turning off web security in my main process did the trick.</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;    height: 563,&#xA;    useContentSize: true,&#xA;    width: 1000,&#xA;    webPreferences: {&#xA;        webSecurity: false&#xA;    }&#xA;});&#xA;</code></pre>&#xA;",1130036,"",,"",,2018-05-14T08:53:50,"","",,0,,,
50331274,2,,50330153,2018-05-14T13:17:11,,6,,"<p>You can use Electron's <a href=""https://electronjs.org/docs/api/remote"" rel=""noreferrer""><code>remote</code></a> module to get your current <code>BrowserWindow</code> from the script included (loaded) in that window:</p>&#xA;&#xA;<pre><code>const remote = require (""electron"").remote;&#xA;&#xA;dialog.showMessageBox (remote.getCurrentWindow (), {&#xA;  type: ""warning"",&#xA;  message: ""You have been warned."",&#xA;  buttons: [""OK""]&#xA;});&#xA;</code></pre>&#xA;",6786876,"",,"",,2018-05-14T13:17:11,"","",,0,,,
50336418,2,,50029304,2018-05-14T18:01:58,,1,,<p>I fixed by changing <code>path.join</code> to <code>path.resolve</code> and changing this:</p>&#xA;&#xA;<pre><code>Object.keys(db).forEach(modelName =&gt; {&#xA;  if (db[modelName].associate) {&#xA;    db[modelName].associate(db);&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>to</p>&#xA;&#xA;<pre><code>for (var modelName in db) {&#xA;  if (db[modelName].associate) {&#xA;    db[modelName].associate(db);&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>in models/index.js file.</p>&#xA;,3252465,"",,"",,2018-05-14T18:01:58,"","",,0,,,
50355145,2,,50335622,2018-05-15T16:29:27,,0,,"<p>i finally get the solution&#xA;I read my file and create a blob which i use to recreate my file</p>&#xA;&#xA;<pre><code>  const fs = require('fs');&#xA;  let buffer = fs.readFileSync(`${app.getAppPath()}/test.txt`);&#xA;  let fileY = new File([new Uint8Array(buffer)], 'test.txt', {&#xA;    type: 'text/plain'&#xA;  });&#xA;&#xA;  form.append(""file"", fileY);&#xA;</code></pre>&#xA;&#xA;<p>and here is ajax settings</p>&#xA;&#xA;<pre><code>  let settings = {&#xA;    ""url"": `${Constante.URL}/documents`,&#xA;    ""type"": ""POST"",&#xA;    ""headers"": {&#xA;      ""Authorization"": sessionStorage.getItem('authorization')&#xA;    },&#xA;    ""processData"": false,&#xA;    ""contentType"": false,&#xA;    ""data"": form&#xA;  };&#xA;</code></pre>&#xA;",4575973,"",,"",,2018-05-15T16:29:27,"","",,0,,,
50377526,2,,50349157,2018-05-16T18:12:44,,1,,"<p>I found the solution in the docs&#xA;<a href=""https://github.com/electron/electron/blob/master/docs/api/dialog.md#dialogshowopendialogbrowserwindow-options-callback"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/dialog.md#dialogshowopendialogbrowserwindow-options-callback</a></p>&#xA;&#xA;<p>The dialog should be set to modal. If the window is modal it disables the parent window. It can be set to modal with passing browserWindow parameter as first argument when calling showSaveDialog function. </p>&#xA;&#xA;<p>Excepted format:</p>&#xA;&#xA;<pre><code>dialog.showOpenDialog([browserWindow, ]options[, callback])&#xA;</code></pre>&#xA;",6134136,"",,"",,2018-05-16T18:12:44,"","",,0,,,
50389597,2,,50345873,2018-05-17T10:50:11,,0,,"<p>I did some more research and solved it myself by using Enigma Virtual Box. </p>&#xA;&#xA;<p><a href=""http://enigmaprotector.com/en/downloads.html"" rel=""nofollow noreferrer"">http://enigmaprotector.com/en/downloads.html</a></p>&#xA;",8095364,"",,"",,2018-05-17T10:50:11,"","",,0,,,
50395421,2,,50394484,2018-05-17T15:36:30,,0,,"<p>You can't. It's not cause of Electron, underlying toastnotification api doesn't accept non local source images. MSDN documentation is bit hard to track this information as most cases ToastNotification is used in UWP apps. If you are publishing app as UWP and uses UWP api, it'll work to point remote image resources.</p>&#xA;",2742189,"",,"",,2018-05-17T15:36:30,"","",,0,,,
50421349,2,,50421061,2018-05-19T02:54:17,,2,,"<p>File-based databases aren't a good fit for Heroku due to its <a href=""https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem"" rel=""nofollow noreferrer"">ephemeral filesystem</a> (bold added):</p>&#xA;&#xA;<blockquote>&#xA;  <p>Each dyno gets its own ephemeral filesystem, with a fresh copy of the most recently deployed code. During the dyno’s lifetime its running processes can use the filesystem as a temporary scratchpad, but no files that are written are visible to processes in any other dyno and <strong>any files written will be discarded the moment the dyno is stopped or restarted. For example, this occurs any time a dyno is replaced due to application deployment and approximately once a day as part of normal dyno management.</strong></p>&#xA;</blockquote>&#xA;&#xA;<p>Depending on your use case I recommend using a client-server database (this looks like a good fit here) or something like <a href=""https://devcenter.heroku.com/articles/s3"" rel=""nofollow noreferrer"">Amazon S3 for file storage</a>.</p>&#xA;",354577,"",,"",,2018-05-19T02:54:17,"","",,0,,,
50319258,2,,50272451,2018-05-13T18:22:14,,11,,"<p>Electron by default allows local resources to be accessed by render processes only when their html files are loaded from local sources with the <code>file://</code> protocol for security reasons.</p>&#xA;&#xA;<p>If you are loading the html from any <code>http://</code> or <code>https://</code> protocol even from a local server like webpack-dev-server, access to local resources is disabled.</p>&#xA;&#xA;<p>If you loading html pages from a local server only during development and switching to local html files in production, you can disable websecurity during development, taking care to enable it in production.</p>&#xA;&#xA;<p>If you are loading html from remote sources even in production, the best and secure way is to upload it somewhere on your server and load it.</p>&#xA;",2214588,"",,"",,2018-05-13T18:22:14,"","",,1,,,
50347129,2,,50346287,2018-05-15T09:49:14,,0,,"<p>The async nature of Javascript is a beast. This works as expected:</p>&#xA;&#xA;<pre><code>ipcMain.on('view-pdf', (event, url) =&gt; {&#xA;  mainWindow.webContents.printToPDF({}, (error, data) =&gt; {&#xA;    if (error) throw error&#xA;    const pdf = data.toString('base64')&#xA;    const pdfWindow = new BrowserWindow({&#xA;      width: 1024,&#xA;      height: 800,&#xA;      webPreferences: {&#xA;        plugins: true,&#xA;        webSecurity: false&#xA;      }&#xA;    })&#xA;  pdfWindow.loadURL('data:application/pdf;base64,' + pdf)&#xA;  })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>The code is not perfect but this is how it works.</p>&#xA;",492969,"",,"",,2018-05-15T09:49:14,"","",,1,,,
50368278,2,,50358643,2018-05-16T10:20:38,,0,,"<p>I think this is a scope issue. Please ensure the window variable is reachable by your code. Something like this should work:</p>&#xA;&#xA;<pre><code>var mywindow = null; //global def&#xA;&#xA;app.once(""ready"", function() {&#xA;  mywindow = new BrowserWindow({...});&#xA;  mywindow.loadURL(...);&#xA;});&#xA;&#xA;ipc.on('something_refresh', function(evt) {&#xA; mywindow.reload(); //this works for me&#xA;});&#xA;</code></pre>&#xA;",9734548,"",,"",,2018-05-16T10:20:38,"","",,1,,,
50439688,2,,50172632,2018-05-20T21:49:09,,5,,"<p>I've been testing PouchDB, RxDB (which relies on PouchDB with RxJS streams for queries), Realm-JS (native database like sqlite3), FireStore. NeDB doesn't support remote sync.</p>&#xA;&#xA;<p>I won't go into performance metrics details on each database, but PouchDB has been very slow and heavy on memory when querying more than 20.000 items (tried with indexeddb/websql adapter). </p>&#xA;&#xA;<p>RxDB was generally much faster with that many items, especially when subscribing to query changes (tried with indexeddb/websql adapter too). Also schema and migrations are very handy.</p>&#xA;&#xA;<p>FireStore is a good choice and comes with very easy setup of server and client components, but you'll need to be comfortable to run on a google platform. There is some flexibility with firebase functions if you want some control over server logic and there is customizable ACLs for your collections. Speed has been good and on par with RxDB. Comes with a very good auth module if you want it.</p>&#xA;&#xA;<p>If you want to be able to scale much much more on the client side, which you probably don't, or if you want to make complex queries, I'd really recommend using something like realm. You'll need to compile for each platform like you've experienced with sqlite3, but there is sync, offline persistence, rich queries and great performance. There is just no way that javascript based solutions like PouchDB, RxDB or FireStore can compete, even with sqlite backends, since much of the computation will still happen in your precious JS thread. realm is doing much of its heavy lifting on the native library. I've been able to do LIKE ""<em>abc</em>"" queries on 100.000 items, returning hundreds of results, within less than hundred milliseconds and without noticeably freezing my UI or pumping up memory usage heavily. Supports client migrations too, which is nice.</p>&#xA;&#xA;<p>In the end, there are multiple answers:&#xA;1. Want to host everything yourself and don't need massive scale client side (you can sync against subsets of your server data with filters), RxDB ist very good and comes with nice set of features. &#xA;2. Want very easy setup, nice modules like auth, server functions etc, and don't need massive scale on the client (can also sync against server data subsets with filters), FireStore is great.&#xA;3. Need lots of lots of data on the client, realm is my preference. I personally really dislike the realm sync platform for its pricing model (though technically it's cool), but the database itself is free and maybe you could try and implement a custom sync.</p>&#xA;&#xA;<p>Take my results with a grain of salt, I've had some very specific challenges like large, non-relational collections and fulltext-search, your use-case will probably differ a lot.</p>&#xA;",4388296,"",6682995,"",2019-05-29T12:43:50,2019-05-29T12:43:50,"","",,1,,,
50455817,2,,50453515,2018-05-21T19:59:40,,2,,"<p>TL;DR - You can't without help of bundler like webpack as long as you're using npm modules.</p>&#xA;&#xA;<p>Most of node.js package ecosystem is not ready for native module yet. About 99% of published package in npm currently using node.js's CommonJS module system, while there are very few module written to support esm (ES module syntax as well). </p>&#xA;&#xA;<p>esm shim is intended to help latter - if module's written in esm and to be imported in current node.js version doesn't support it helps to resolve those modules. Opposite case doesn't work. Chromium can import your code directly which is written in native syntax, then try to resolve dependency module you specified and failed to resolve as 1. it doesn't know where to resolve (as it doesn't follow node.js's module resolution rules) 2. when it's available to resolve, actual import will fail cause module'll be cjs export instead of native.</p>&#xA;&#xA;<p>Get back to TL;DR above - if the intention is achieving isomorphic code to run on both processes, use bundler accordingly.</p>&#xA;",2742189,"",,"",,2018-05-21T19:59:40,"","",,1,,,
50253534,2,,50252910,2018-05-09T12:32:32,,1,,"<p>You can check the total <code>content-length</code> from the <code>response</code> to get total download size and when it returns <code>data</code> to <code>data</code> event. Finally you can get its length and can calculate the download percentage as follows: </p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;var https = require('https');&#xA;&#xA;var file = fs.createWriteStream(filepath);&#xA;&#xA;var contentLength;&#xA;var length;&#xA;var responseData = '';&#xA;var request = https.get(fileurl, function (response) {&#xA;    contentLength = parseInt(response.headers['content-length']); // in bytes&#xA;    length = [];&#xA;&#xA;    // Grab the data buffer of the request&#xA;    response.on('data', (d) =&gt; {&#xA;        responseData += d;&#xA;        length.push(d.length);&#xA;        let sum = length.reduce((a, b) =&gt; a + b, 0);&#xA;        let completedParcentage = (sum / contentLength) * 100;&#xA;        console.log(`completed reading ${sum} bytes out of ${contentLength} bytes`);&#xA;        console.log(`${completedParcentage} percentage of download complete`);&#xA;&#xA;        // Modify this to alter the width of progress-bar using percentageCompleted&#xA;        $('#progressbar_upload').addClass('bg-success');&#xA;    });&#xA;&#xA;    response.on('end', () =&gt; {&#xA;        file.write(responseData);&#xA;        uploadDone();&#xA;    })&#xA;&#xA;});&#xA;</code></pre>&#xA;",6414102,"",6414102,"",2018-05-10T07:06:27,2018-05-10T07:06:27,"","",,2,,,
50283903,2,,50283667,2018-05-11T01:58:09,,1,,"<p>In the constructor, you're calling <code>this.find();</code> before you've assigned to <code>this.port</code>, so the line <code>this.port.open</code> inside <code>find</code> results in an error. Change it so that <code>this.find</code> runs <em>after</em> the <code>port</code> property has been populated.</p>&#xA;&#xA;<pre><code>function Sensors(com) {&#xA;  this.address = com;&#xA;  this.port = new sp(com, {&#xA;    baudrate: 9600,&#xA;    autoOpen: false&#xA;  });&#xA;  this.find();&#xA;}&#xA;</code></pre>&#xA;",9515207,"",,"",,2018-05-11T01:58:09,"","",,2,,,
50333600,2,,50324479,2018-05-14T15:07:01,,1,,"<p>Set fullscreen to false worked as expected. You can not set window to fullscreen anymore, but it is still maximizable. I think what you need is set maximizable to false.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/9oY1t.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/9oY1t.png"" alt=""enter image description here""></a></p>&#xA;",1042753,"",1042753,"",2019-02-28T02:22:44,2019-02-28T02:22:44,"","",,2,,,
50444013,2,,50436594,2018-05-21T07:34:57,,1,,<p>I had something similar happen to me. The challenge was that if you use fork() the application path changes. So I would recommend that you check <code>__dirname</code> in all of your files especially the ones in your forked process (e. g. app.js). I wouldn't be surprised if some of them don't make sense anymore.</p>&#xA;,9734548,"",,"",,2018-05-21T07:34:57,"","",,2,,,
50476432,2,,50473560,2018-05-22T21:03:58,,1,,"<p>The RxDB source code can be found <a href=""https://github.com/pubkey/rxdb/tree/master/src"" rel=""nofollow noreferrer"">here</a>.&#xA;When you use RxSchema.create({...}) function it actually  creates instance of the class RxSchema, so type will definitely match.&#xA;Otherwise interface for collection creator is the following:</p>&#xA;&#xA;<pre><code>export interface RxCollectionCreator {&#xA;name: string;&#xA;schema: RxJsonSchema | RxSchema;&#xA;pouchSettings?: PouchSettings;&#xA;migrationStrategies?: {&#xA;    [key: number]: Function&#xA;};&#xA;autoMigrate?: boolean;&#xA;statics?: {&#xA;    [key: string]: Function&#xA;};&#xA;methods?: {&#xA;    [key: string]: Function&#xA;};&#xA;attachments?: {&#xA;    [key: string]: Function&#xA;};&#xA;options?: any;&#xA;</code></pre>&#xA;&#xA;<p>}</p>&#xA;&#xA;<p>And the schema interface is either RxJsonSchema or RxSchema.&#xA;See also examples in the source code.&#xA;You object seems to mach RxJsonSchema type definition, however either some literal from the interface is missing or there is some extra that TypeScript complains about.</p>&#xA;&#xA;<pre><code>export declare class RxJsonSchema {&#xA;title?: string;&#xA;description?: string;&#xA;version: number;&#xA;type: 'object';&#xA;properties: { [key: string]: RxJsonSchemaTopLevel };&#xA;required?: Array&lt;string&gt;;&#xA;compoundIndexes?: Array&lt;string | Array&lt;string&gt;&gt;;&#xA;disableKeyCompression?: boolean;&#xA;additionalProperties?: true;&#xA;attachments?: {&#xA;        encrypted?: boolean&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>}</p>&#xA;",4095194,"",,"",,2018-05-22T21:03:58,"","",,2,,,
50284033,2,,50283710,2018-05-11T02:14:02,,1,,"<p>I've also done <code>npm install jquery --save</code> on my Electron project.</p>&#xA;&#xA;<p>The way I have gotten jQuery to work is by requiring it in the <code>&lt;head&gt;</code> tag of my HTML <strong>before</strong> any of the other <code>&lt;script&gt;</code> tags.</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=""en""&gt;&#xA;  &lt;head&gt;&#xA;    ...&#xA;    &lt;!-- jQuery (Should be declared before other JS imports) --&gt;&#xA;    &lt;script&gt;&#xA;      var $ = jQuery = require(""jquery"")&#xA;    &lt;/script&gt;&#xA;    ...&#xA;    &lt;script src=""../node_modules/jquery/dist/jquery.slim.min.js""&gt;&lt;/script&gt;&#xA;    &lt;script src=""../node_modules/popper.js/dist/umd/popper.min.js""&gt;&lt;/script&gt;&#xA;    &lt;script src=""../node_modules/bootstrap/dist/js/bootstrap.min.js""&gt;&lt;/script&gt;&#xA;    ...&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    ....&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>I needed to install jQuery for Bootstrap so I require it before declaring the script source import for jQuery, followed by other JS that I need.</p>&#xA;&#xA;<p><strong>EDIT</strong> After integrating <a href=""https://github.com/electron-userland/electron-forge"" rel=""nofollow noreferrer"">electron-forge </a>, the above solution no longer works for me. What does work is the solution mentioned here: <a href=""https://stackoverflow.com/a/37480521/1392578"">https://stackoverflow.com/a/37480521/1392578</a></p>&#xA;",1392578,"",1392578,"",2018-05-14T20:59:14,2018-05-14T20:59:14,"","",,7,,,
50383157,2,,50383055,2018-05-17T04:02:12,,1,,"<p>You need to create an iframe which takes up the whole page and show it and set it's src attribute to the url you want to go to.</p>&#xA;&#xA;<p><strong>EDIT:</strong> you need to use a webview instead of an iframe</p>&#xA;&#xA;<p>HTML:</p>&#xA;&#xA;<pre><code>&lt;webview style=""display:none; position:fixed; width: 100%; height:100%; bottom:0; right:0; top:0; left:0;"" id=""view_iframe""&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;&#xA;<p>JS:</p>&#xA;&#xA;<pre><code>var menu = new nw.Menu({&#xA;  type: 'menubar'&#xA;});&#xA;var menuItems = new nw.Menu();&#xA;&#xA;menuItems.append(&#xA;  new nw.MenuItem({&#xA;    label: 'Surf Google',&#xA;    click: function() {&#xA;      document.getElementById(""view_iframe"").style.display = ""block"";&#xA;      document.getElementById(""view_iframe"").src = ""https://google.com"";&#xA;    }&#xA;  })&#xA;);&#xA;&#xA;menuItems.append(&#xA;  new nw.MenuItem({&#xA;    label: 'Surf Github',&#xA;    click: function() {&#xA;      document.getElementById(""view_iframe"").style.display = ""block"";&#xA;      document.getElementById(""view_iframe"").src = ""https://github.com"";&#xA;    }&#xA;  })&#xA;);&#xA;&#xA;menu.append(&#xA;  new nw.MenuItem({&#xA;    label: ""The Menu"",&#xA;    submenu: menuItems&#xA;  })&#xA;);&#xA;&#xA;var w = nw.Window.get();&#xA;&#xA;w.menu = menu&#xA;</code></pre>&#xA;",8095364,"",8095364,"",2018-05-17T05:13:22,2018-05-17T05:13:22,"","",,7,,,
50276404,2,,50254386,2018-05-10T15:26:51,,1,,"<p><strong>UPDATE::</strong></p>&#xA;&#xA;<p>Ok, I think I have fixed it. To try it out:</p>&#xA;&#xA;<ol>&#xA;<li>Download my fork at: <a href=""https://github.com/11AND2/win-audio"" rel=""nofollow noreferrer"">https://github.com/11AND2/win-audio</a> </li>&#xA;<li>In your terminal change dir (cd) into the directory e.g. ""cd C:\...\win-audio""</li>&#xA;<li>run command ""npm run install"" - this rebuilds the module</li>&#xA;<li>To test it run ""node sample.js"" and activate/disable your audio devices</li>&#xA;</ol>&#xA;&#xA;<p>If at any point you want to check if the device is alive just run</p>&#xA;&#xA;<pre><code>var audio = require('win-audio').speaker;&#xA;var _vol_alive = audio.get();&#xA;if (_vol_alive === -999) {&#xA;   console.log(""this device is dead :-("");&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>in your application. Please note that I have not changed the API at all so there should be no need to change your application code.</p>&#xA;&#xA;<p>Please give me a heads up if the fix works for you so I can create a pull request for the fix. I am not the creator of this plugin, all my changes are public domain.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>DEPRECATED::</strong></p>&#xA;&#xA;<p>Ok, I have found a fix for you. Would it be ok if:</p>&#xA;&#xA;<pre><code>var audio = require('win-audio').speaker;&#xA;</code></pre>&#xA;&#xA;<p>returns -1 if no device is found? </p>&#xA;&#xA;<p>So you could do:</p>&#xA;&#xA;<pre><code>if (audio !== -1) {&#xA;   audio.set(30);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Please give me a short heads up and I will post the implementation route.</p>&#xA;",9734548,"",9734548,"",2018-05-11T08:58:10,2018-05-11T08:58:10,"","",,8,,,
42854540,2,,42818220,2017-03-17T10:05:10,,0,,"<p>I was facing the same problem and had put a post on atom discussion group. Fortunately, I figured out a way to do so. You can find the solution here: </p>&#xA;&#xA;<p><a href=""https://discuss.atom.io/t/debugging-electron-api-demo-using-visual-studio-code/40661"" rel=""nofollow noreferrer"">https://discuss.atom.io/t/debugging-electron-api-demo-using-visual-studio-code/40661</a></p>&#xA;&#xA;<p>Hope it helps! </p>&#xA;",1926081,"",,"",,2017-03-17T10:05:10,"","",,2,,,
42858193,2,,42857500,2017-03-17T12:57:31,,0,,"<p>I think you can do something like this instead or for-loop:</p>&#xA;&#xA;<pre><code>(function iteration(i) {&#xA;  if (i &lt; 10) {&#xA;    DoIt(i).then(() =&gt; iteration(i + 1))&#xA;  }&#xA;})(0)&#xA;</code></pre>&#xA;&#xA;<p>For this make sure <code>DoIt</code> returns Promise:</p>&#xA;&#xA;<pre><code>function DoIt(index) {&#xA;  var nightmare = Nightmare({&#xA;    electronPath: require('./node_modules/electron'),&#xA;    openDevTools: {&#xA;      mode: 'detach'&#xA;    },&#xA;    show: true&#xA;  });&#xA;&#xA;  return nightmare&#xA;    .goto('http://google.com')&#xA;    .end(() =&gt; {&#xA;      return true;&#xA;    })&#xA;}&#xA;</code></pre>&#xA;",949476,"",949476,"",2017-03-17T13:02:41,2017-03-17T13:02:41,"","",,5,,,
42938677,2,,42938345,2017-03-21T21:43:54,,0,,"<p>window.onload doesn't seem to work well with webviews. The event listener waits for the dom-ready event to inject the scroll instructions into the webview. This has to be done for every webview. A JS file could be injected with the preload attribute. </p>&#xA;&#xA;<pre><code>const webview = document.querySelector('#webviewId')&#xA;webview.addEventListener('dom-ready', () =&gt; {&#xA;  webview.executeJavaScript(&#xA;    'document.documentElement.scrollTop = document.body.scrollTop = 200;');&#xA;})&#xA;</code></pre>&#xA;",4040776,"",4040776,"",2017-03-21T22:59:57,2017-03-21T22:59:57,"","",,2,,,
42952501,2,,42916226,2017-03-22T13:05:33,,0,,"<p>Thanks to @kevingelion and @revln9 from the <a href=""https://atomio.slack.com"" rel=""nofollow noreferrer"">Slack Electron discussion</a>, i was able to solve my issue.&#xA;All i need to use is getAppPath() and from there go to the parent folder where the data file is located:</p>&#xA;&#xA;<pre><code>var app = require('electron').remote.app;&#xA;resourcePath = path.join(app.getAppPath(), '../../../db/'); //shared folder&#xA;</code></pre>&#xA;",1880662,"",,"",,2017-03-22T13:05:33,"","",,0,,,
43057854,2,,43024078,2017-03-27T23:03:16,,0,,"<p>So essentially Electron doesn't play nice with cookies by default, so the cookie was being passed to the FrontEnd, but electron wouldn't see it. </p>&#xA;&#xA;<p>There are two ways to solve, one for more up to date versions of Electron and one for other versions. </p>&#xA;&#xA;<p>For newer versions, include this in your main render path. (Not in the one with the browser info).</p>&#xA;&#xA;<pre><code>const {session} = require('electron')&#xA;</code></pre>&#xA;&#xA;<p>It should allow from there. Otherwise refer to &#xA;<a href=""https://stackoverflow.com/questions/35431750/where-to-place-electron-cookies"">Where to place electron-cookies?</a></p>&#xA;&#xA;<p>Have a hack is not and can post later if someone can't get either to work. Thought I would comment so others know. </p>&#xA;",4084156,"",-1,"",2017-05-23T11:46:20,2017-03-27T23:03:16,"","",,0,,,
42881496,2,,42820135,2017-03-19T00:25:40,,1,,<p>I found the answer to my problem. </p>&#xA;&#xA;<p>I can use <code>window.require</code> to import the <code>BrowserWindow</code> inside my component files. </p>&#xA;&#xA;<p>For example: </p>&#xA;&#xA;<pre><code>const { BrowserWindow } = window.require('electron').remote;&#xA;</code></pre>&#xA;,6496010,"",,"",,2017-03-19T00:25:40,"","",,1,,,
42883711,2,,42882035,2017-03-19T06:44:01,,1,,"<p>I know what the mistake I was making was, I added this line in my index.html file.</p>&#xA;&#xA;<pre><code>&lt;script type=""text/javascript"" src=""main.js""&gt;  &lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>That causes the error.</p>&#xA;",5640408,"",,"",,2017-03-19T06:44:01,"","",,0,,,
42961557,2,,42939611,2017-03-22T20:00:45,,1,,"<p>I was finally able to achieve this by using the <a href=""https://router.vuejs.org/en/advanced/navigation-guards.html#per-route-guard"" rel=""nofollow noreferrer"">Vue-Router Per-Route Guard</a> <code>beforeEnter</code> method. Here's my draft:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>let auth = true&#xA;&#xA;export default [&#xA;  {&#xA;    path: '/',&#xA;    name: 'login-page',&#xA;    component: require('components/LoginPageView'),&#xA;    meta: {&#xA;      auth: false&#xA;    },&#xA;    beforeEnter: (to, from, next) =&gt; {&#xA;      if (auth) {&#xA;        next('/tracker')&#xA;      } else {&#xA;        next()&#xA;      }&#xA;    }&#xA;  },&#xA;  {&#xA;    path: '/tracker',&#xA;    name: 'tracker-page',&#xA;    component: require('components/TrackerPageView'),&#xA;    meta: {&#xA;      auth: true&#xA;    }&#xA;  },&#xA;  {&#xA;    path: '*',&#xA;    redirect: '/'&#xA;  }&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>Any feedbacks are most welcome to improve this even better :)</p>&#xA;",3313563,"",,"",,2017-03-22T20:00:45,"","",,0,,,
42987974,2,,42871831,2017-03-23T22:14:18,,1,,"<p>Your question and especially the code are quite hard to read, so the error was not so easy to spot: You didn't wait for the promise to be resolved. When you update a document with revision 1, you have to wait for the results, read the revision from there, and only then write the second attachment. This would be my (untested) take on your code:</p>&#xA;&#xA;<pre><code>pdb.putAttachment(id, name, rev, file, type)&#xA;.then(function (result) {&#xA;  // Use the new revision here:&#xA;  return putAttachment(id, newFileName, result.rev, file, type);&#xA;}).then(function (result) {&#xA;  console.log(result);&#xA;}).catch(function (err) {&#xA;  console.log(err);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Adding two attachments at once is possible if you encode them correctly, but you're on your own with it. I'd recommend that you shouldn't do that – better use the abstractions that PouchDB provides.</p>&#xA;&#xA;<p>Also don't analyze the underlying data structures too much, because depending on the storage adapter used the data storage might differ drastically. It's quite interesting how different adapters store their data, but never rely on anything you find out – data formats might change.</p>&#xA;",930301,"",,"",,2017-03-23T22:14:18,"","",,2,,,
43065740,2,,43061427,2017-03-28T09:28:13,,1,,"<pre><code>const { app, BrowserWindow, TouchBar } = require('electron');&#xA;const path = require('path')&#xA;const url = require('url')&#xA;&#xA;const {TouchBarButton, TouchBarLabel, TouchBarSlider} = TouchBar&#xA;&#xA;const result = new TouchBarLabel();&#xA;result.label = '30' + ' deg';&#xA;&#xA;const slider = new TouchBarSlider({&#xA;                               label: 'angle',&#xA;                               minValue: 0,&#xA;                               maxValue: 360,&#xA;                               change: (val) =&gt; result.label = val.toString() + ' deg' // register event handler here!&#xA;                              });&#xA;&#xA;const touchBar = new TouchBar([&#xA;  slider, // add slider&#xA;  result // add display for slider value&#xA;]);&#xA;&#xA;let window;&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  window = new BrowserWindow({&#xA;  width: 300,&#xA;  height: 200&#xA; });&#xA;  window.loadURL('about:blank');&#xA;  window.setTouchBar(touchBar);&#xA;});&#xA;&#xA;// Quit when all windows are closed and no other one is listening to this.&#xA;app.on('window-all-closed', () =&gt; {&#xA;  app.quit();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Working code. Hope this helps! ;)</p>&#xA;",3912620,"",,"",,2017-03-28T09:28:13,"","",,1,,,
43071308,2,,42865702,2017-03-28T13:45:50,,1,,"<p>For those in the future, the <code>electron-packager</code> module is written for both Windows and Unix systems. During the .exe compilation process, Windows generates <code>.obj</code> files. Since this is the case, <code>electron-packager</code> has added <code>.obj</code> files to the file <code>ignore.js</code>, which thereby prevents <code>.obj</code> 3d models from being included in resulting binaries.</p>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-packager/pull/491"" rel=""nofollow noreferrer"">See this issue on GitHub conversation here</a>  </p>&#xA;&#xA;<p>Here is the relevant code from the <code>ignore.js</code> file in the <code>electron-packager</code> module:</p>&#xA;&#xA;<pre><code>const DEFAULT_IGNORES = [&#xA;  '/node_modules/electron($|/)',&#xA;  '/node_modules/electron-prebuilt($|/)',&#xA;  '/node_modules/electron-packager($|/)',&#xA;  '/\\.git($|/)',&#xA;  '/node_modules/\\.bin($|/)',&#xA;  '\\.o(bj)?$'&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>If you're using .obj files, comment out this the .obj line from the array and you're good to go. I've been doing this for two weeks without consequence on both Windows and Linux machines.</p>&#xA;",4518057,"",,"",,2017-03-28T13:45:50,"","",,0,,,
42848424,2,,42838008,2017-03-17T02:57:19,,2,,"<blockquote>&#xA;  <p>So the question is, what check can I do which will return true if I am in a Universal Windows App written in javascript, but will return false when I am on an online web page or a NW.JS app?</p>&#xA;</blockquote>&#xA;&#xA;<p>The <code>Windows</code> and <code>MSApp</code> object only exists in UWP app, so you can use following codes to check if you are currently running an UWP app:</p>&#xA;&#xA;<pre><code>if (typeof Windows!=""undefined"" &amp;&amp; typeof MSApp !=""undefined"")&#xA;{&#xA;    //currently you are running a UWP app not a web app or NW.js app&#xA;}&#xA;</code></pre>&#xA;",5610850,"",,"",,2017-03-17T02:57:19,"","",,0,,,
42904996,2,,42902550,2017-03-20T13:34:09,,2,,"<p>Packaging <strong>any</strong> app on <strong>any</strong> platform needs some libraries, wether static or dynamically linked. Packaging into one single executable file will never work, at least with Electron.</p>&#xA;&#xA;<p>Packaging your Node.js Electron source files into an executable (also known as compiling) is easy - if you use <a href=""https://github.com/electron-userland/electron-packager"" rel=""nofollow noreferrer""><code>electron-packager</code></a>. That's a Node.js ""plugin"" you can install (and save as dev-dependency) via NPM with the following command:</p>&#xA;&#xA;<p><code>npm install --save-dev electron-packager</code></p>&#xA;&#xA;<p>Next, you can create a ""build"" script inside your <code>package.json</code> like that:</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ""build-linux64"": ""electron-packager . ProjectName --platform=linux --arch=x64""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This script will compile your project for a 64-bit Linux system. For other switches, please refer to the electron-packager documentation, as available <a href=""https://github.com/electron-userland/electron-packager/blob/master/readme.md"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;&#xA;<p>After that, there should be a folder called <code>ProjectName-platform-arch</code> in your project's main directory, which you can zip up and distribute. This executable (<code>ProjectName</code> in the output folder) will then be executable on any 64-bit Linux OS <strong>without</strong> Node.js installed.</p>&#xA;&#xA;<p>But, to mention it at least, this is <strong><em>not</em></strong> an installer. For Linux you can build a ""package"", like <code>*.deb</code> for Debian/Ubuntu and derivates, <code>*.rpm</code> for RedHat, OpenSuSE, SLES, SLED, Fedora and derivates or <code>*.tar.gz</code> for plain source code packages (like <code>apt</code> uses). This can't be achieved with <code>electron-packager</code> but with the on-board tools of your Linux OS. There are some great tutorials on how to build Linux packages in the net out there, but this certainly goes far out of the boundaries of this answer.</p>&#xA;",6786876,"",,"",,2017-03-20T13:34:09,"","",,1,,,
42914749,2,,42913268,2017-03-20T21:59:22,,2,,"<p>First of all you need to detect platform which runs Node app:</p>&#xA;&#xA;<p><code>os.platform()</code> - <a href=""https://nodejs.org/dist/latest-v5.x/docs/api/os.html#os_os_platform"" rel=""nofollow noreferrer"">https://nodejs.org/dist/latest-v5.x/docs/api/os.html#os_os_platform</a></p>&#xA;&#xA;<p>Then you need to run platform specific command for getting process info with <code>child_process.exec()</code>.</p>&#xA;&#xA;<p><a href=""https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"" rel=""nofollow noreferrer"">https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback</a></p>&#xA;",1814524,"",,"",,2017-03-20T21:59:22,"","",,1,,,
43019072,2,,42737885,2017-03-25T16:43:01,,2,,"<p>I just hit the same error when I tried it, and it had a closer look at the statement&#xA;Error: Cannot find module '../dist/build;' </p>&#xA;&#xA;<p>notice the semicolon ?</p>&#xA;&#xA;<p>Change the line in package.json to</p>&#xA;&#xA;<p>""electron"": ""ionic-app-scripts build electron .""</p>&#xA;&#xA;<p>Then it can find the task in @ionic and will perform the build</p>&#xA;",7766972,"",,"",,2017-03-25T16:43:01,"","",,0,,,
43067312,2,,43062747,2017-03-28T10:37:41,,2,,"<p>Remember that in Electron applications you can use all Node modules.</p>&#xA;&#xA;<p>In this example you can use one of the following modules from npm:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://www.npmjs.com/package/face-detect"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/face-detect</a></li>&#xA;<li><a href=""https://www.npmjs.com/package/faced"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/faced</a></li>&#xA;<li><a href=""https://www.npmjs.com/package/face-analytics"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/face-analytics</a></li>&#xA;</ul>&#xA;&#xA;<p>Or you can use an external service like Watson Visual Recognition, see:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://www.ibm.com/watson/developercloud/visual-recognition.html"" rel=""nofollow noreferrer"">https://www.ibm.com/watson/developercloud/visual-recognition.html</a></li>&#xA;</ul>&#xA;&#xA;<p>To easily use the Watson API in Electron app you can use the <code>watson-developer-cloud</code> module:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://www.npmjs.com/package/watson-developer-cloud"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/watson-developer-cloud</a></li>&#xA;</ul>&#xA;&#xA;<p>For more info see:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://developer.ibm.com/watson/"" rel=""nofollow noreferrer"">https://developer.ibm.com/watson/</a></li>&#xA;<li><a href=""https://www.ibm.com/watson/developercloud/"" rel=""nofollow noreferrer"">https://www.ibm.com/watson/developercloud/</a></li>&#xA;<li><a href=""https://watson-api-explorer.mybluemix.net/"" rel=""nofollow noreferrer"">https://watson-api-explorer.mybluemix.net/</a></li>&#xA;</ul>&#xA;",613198,"",,"",,2017-03-28T10:37:41,"","",,0,,,
43070753,2,,43057924,2017-03-28T13:20:54,,2,,"<p>This is how it should be:</p>&#xA;&#xA;<pre><code>const {Menu} = require('electron');&#xA;&#xA;let menu = new Menu([&#xA;   'label': 'menu item',&#xA;     'submenu': [{&#xA;       'label': 'aLabel'        &#xA;    }]&#xA;}]);&#xA;&#xA;&#xA;console.log(menu[0].submenu);&#xA;</code></pre>&#xA;&#xA;<p>If you can't get this to work on your app it means you have some problems in your filter or somewhere else.</p>&#xA;",895174,"",,"",,2017-03-28T13:20:54,"","",,0,,,
42851719,2,,42851198,2017-03-17T07:33:54,,3,,"<p>Electron allows developers to push notifications using the HTML5 Notification API. </p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre><code>let myNotification = new Notification('Foo', {&#xA;  body: 'Lorem Ipsum Dolor Sit Amet'&#xA;})&#xA;&#xA;myNotification.onclick = () =&gt; {&#xA;  console.log('Notification clicked')&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Since Windows 7 does not support notifications, take a look at the the <a href=""https://electron.atom.io/docs/api/tray/"" rel=""nofollow noreferrer"">tray</a> object documentation instead.</p>&#xA;&#xA;<p>You can find more information on this <a href=""https://electron.atom.io/docs/tutorial/desktop-environment-integration/"" rel=""nofollow noreferrer"">here</a></p>&#xA;&#xA;<p><strong>Also:</strong></p>&#xA;&#xA;<p>Take a look at <a href=""https://www.npmjs.com/package/node-notifier"" rel=""nofollow noreferrer"">node-notifier</a> plugin which is easier to use and also is cross platform.</p>&#xA;",3284463,"",3284463,"",2017-03-17T07:39:49,2017-03-17T07:39:49,"","",,0,,,
42874395,2,,42866775,2017-03-18T12:27:06,,3,,"<p>Actually, the Electron version 1.6 satisfies <code>""^1.4""</code> because the caret tells NPM the minimal version of the package to install.</p>&#xA;&#xA;<p>As also written in an answer to the <a href=""https://github.com/Microsoft/vscode/issues/22015"" rel=""nofollow noreferrer"">Microsoft issue on GitHub</a>, you might use <code>""1.4""</code> or <code>""~1.4.0""</code> in order to get Electron 1.4 or any other 1.4.x version (the tilde is for minimal minor releases as shown in the <a href=""https://docs.npmjs.com/cli/update"" rel=""nofollow noreferrer"">NPM documentation for the cli-based update</a> of packages).</p>&#xA;",6786876,"",,"",,2017-03-18T12:27:06,"","",,0,,,
42929720,2,,42900015,2017-03-21T14:19:00,,3,,"<p>When running the <code>.exe</code>, the current directory might be different so the relative path will not be correct. As you figured out you need to put together a full path, but rather than <code>process.resourcesPath</code> you should use <code>app.getAppPath()</code>.</p>&#xA;&#xA;<pre><code>let dbFile = path.join(app.getAppPath(), 'app', 'db', 'example.db')&#xA;</code></pre>&#xA;&#xA;<p>This should be give the correct path to the database file. An additional problem you may face is that the <code>.exe</code> will typically be packaged with the <a href=""https://github.com/electron/asar"" rel=""nofollow noreferrer"">Asar</a> format, which gives read access but not write access. So if you need to write to the database, it may be better to place it elsewhere. There are a number of paths provided by the <a href=""https://electron.atom.io/docs/api/app/#appgetpathname"" rel=""nofollow noreferrer"">electron.app.getPath(name)</a> API, so for example you could use <code>app.getPath(""userData"")</code> to get the path provided for per-user application data. In this case your application would have to create the database file at that location.</p>&#xA;",174979,"",174979,"",2017-03-21T19:48:30,2017-03-21T19:48:30,"","",,3,,,
42931151,2,,42930572,2017-03-21T15:17:30,,3,,"<p>It works for me using the following setup, basically just the electron <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md"" rel=""nofollow noreferrer"">quick start</a></p>&#xA;&#xA;<p>Run as <code>electron index.js</code></p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/DiAiV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/DiAiV.png"" alt=""Result""></a></p>&#xA;&#xA;<h1>index.js</h1>&#xA;&#xA;<pre><code>const { app, BrowserWindow } = require('electron')&#xA;const path = require('path')&#xA;const url = require('url')&#xA;&#xA;let win&#xA;&#xA;function createWindow() {&#xA;    win = new BrowserWindow({ width: 800, height: 600 })&#xA;&#xA;    win.loadURL(url.format({&#xA;        pathname: path.join(__dirname, 'index.html'),&#xA;        protocol: 'file:',&#xA;        slashes: true&#xA;    }))&#xA;&#xA;    win.webContents.openDevTools()&#xA;&#xA;    win.on('closed', () =&gt; {&#xA;        win = null&#xA;    })&#xA;}&#xA;&#xA;app.on('ready', createWindow)&#xA;&#xA;app.on('window-all-closed', () =&gt; {&#xA;    if (process.platform !== 'darwin') {&#xA;        app.quit()&#xA;    }&#xA;})&#xA;&#xA;app.on('activate', () =&gt; {&#xA;    if (win === null) {&#xA;        createWindow()&#xA;    }&#xA;})&#xA;</code></pre>&#xA;&#xA;<h1>index.html</h1>&#xA;&#xA;<pre><code>&lt;webview id=""wv1"" src=""https://www.github.com/"" style=""display:inline-flex; width:100%; height:140px"" nodeintegration&gt;&lt;/webview&gt;&#xA;&#xA;&lt;script&gt;&#xA;    var webview = document.getElementById('wv1');&#xA;    webview.addEventListener('dom-ready', function () {&#xA;        webview.insertCSS('html,body{ background-color: #FF0000 !important;}')&#xA;    });&#xA;&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",3951400,"",,"",,2017-03-21T15:17:30,"","",,0,,,
42973337,2,,40280011,2017-03-23T10:25:34,,3,,"<p>Based on <a href=""https://stackoverflow.com/questions/34568942/how-can-i-include-partial-html-in-githubs-electron-framework"">a similar question</a> and what I've seen, there's no built in html template language in Electron, which is actually great because it allows you to use any other template language.</p>&#xA;&#xA;<p>I'm currently playing with <a href=""https://github.com/mde/ejs"" rel=""nofollow noreferrer"">ejs</a> in Electron.&#xA;Below is my <code>index.ejs</code> template file:</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;html lang=""en""&gt;&#xA;&lt;head&gt;&#xA;  &lt;title&gt;The Index Page&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;  &lt;h1&gt;Welcome, this is the Index page.&lt;/h1&gt;&#xA;  &lt;% if (user) { %&gt;&#xA;    &lt;h3&gt;Hello there &lt;%= user.name %&gt;&lt;/h3&gt;&#xA;  &lt;% } %&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>And below is a section of my <code>main.js</code> file where the above template is rendered and loaded onto the <code>BrowserWindow</code>. Note that I've left out most of the boilerplate code:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const ejs = require('ejs');&#xA;//... Other code&#xA;let win = new BrowserWindow({width: 800, height: 600});&#xA;//... Other code&#xA;// send the data and options to the ejs template&#xA;let data = {user: {name: ""Jeff""}};&#xA;let options = {root: __dirname};&#xA;ejs.renderFile('index.ejs', data, options, function (err, str) {&#xA;  if (err) {&#xA;    console.log(err);&#xA;  }&#xA;  // Load the rendered HTML to the BrowserWindow.&#xA;  win.loadURL('data:text/html;charset=utf-8,' + encodeURI(str));&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I'll give some credit to <a href=""https://gist.github.com/dannvix/dc0efdbb75bf79a79d1c"" rel=""nofollow noreferrer"">this gist</a> for helping me find the <code>data:text/html;charset=utf-8</code> part of the url that can be used to load dynamic content.</p>&#xA;&#xA;<p><strong>UPDATE</strong></p>&#xA;&#xA;<p>I'm actually not using this anymore. It's faster to just load the default html and use the native DOM methods. The <a href=""https://github.com/electron/electron-quick-start"" rel=""nofollow noreferrer"">Electron Quickstart</a> program shows how to do this nicely.</p>&#xA;",923275,"",-1,"",2017-05-23T12:02:41,2017-05-05T06:56:30,"","",,1,,,
43016481,2,,43015044,2017-03-25T12:44:22,,5,,"<p>renderer.js</p>&#xA;&#xA;<pre><code>const ipc = require('electron').ipcRenderer&#xA;&#xA;const printPDFBtn = document.getElementById('pdfME')&#xA;&#xA;printPDFBtn.addEventListener('click', function (event) {&#xA;  ipc.send('print-to-pdf')&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>main.js</p>&#xA;&#xA;<pre><code>const electron = require('electron')&#xA;const fs = require('fs')&#xA;const app = electron.app&#xA;const BrowserWindow = electron.BrowserWindow&#xA;const Menu = electron.Menu&#xA;const Tray = electron.Tray&#xA;const ipc = electron.ipcMain&#xA;&#xA;const path = require('path')&#xA;const url = require('url')&#xA;const shell = electron.shell&#xA;&#xA;let mainWindow&#xA;&#xA;ipc.on('print-to-pdf', function (event) {&#xA;  const pdfPath = path.join(__dirname, '/reports/print.pdf')&#xA;  const win = BrowserWindow.fromWebContents(event.sender)&#xA;  win.webContents.printToPDF({printBackground: true, landscape: true}, function (error, data) {&#xA;    if (error) throw error&#xA;    fs.writeFile(pdfPath, data, function (error) {&#xA;      if (error) {&#xA;        throw error&#xA;      }&#xA;      shell.openExternal('file://' + pdfPath)&#xA;      event.sender.send('wrote-pdf', pdfPath)&#xA;    })&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",1597648,"",,"",,2017-03-25T12:44:22,"","",,1,,,
42954024,2,,42932129,2017-03-22T14:07:28,,6,,"<p>You wouldn't configure Angular-CLI to use the NodeJS fs module. </p>&#xA;&#xA;<p>In electron you have 2 processes; main and renderer. The main process controls items such as the browserWindow, which is essentially the 'window' the user sees when they open their app, and in turn this loads the html file for the view. Here, in the main process, you import the fs module.</p>&#xA;&#xA;<p>In the render process, you would handle actions from the view, and send them to the main process. This is where you would use IPC to communicate via events to do something with the main process. Once that event is triggered, the render process takes the event and sends it to main. Main would do something with it, and open a file for example on the desktop.</p>&#xA;&#xA;<p>I would recommend using the electron API <a href=""https://github.com/electron/electron-api-demos"" rel=""noreferrer"">demo application</a> to see clear examples of this. Here is an example of print to pdf using FS (from the demo app). </p>&#xA;&#xA;<p>Also, here is an electron <a href=""https://github.com/planetoftheweb/electron"" rel=""noreferrer"">application</a> github example written by Ray Villalobos using React, which has some similar concepts that will show you how to integrate components in your app. </p>&#xA;&#xA;<p>Render process:</p>&#xA;&#xA;<pre><code>const ipc = require('electron').ipcRenderer&#xA;&#xA;const printPDFBtn = document.getElementById('print-pdf')&#xA;&#xA;printPDFBtn.addEventListener('click', function (event) {&#xA;  ipc.send('print-to-pdf')&#xA;})&#xA;&#xA;ipc.on('wrote-pdf', function (event, path) {&#xA;  const message = `Wrote PDF to: ${path}`&#xA;  document.getElementById('pdf-path').innerHTML = message&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Main Process:</p>&#xA;&#xA;<pre><code>const fs = require('fs')&#xA;const os = require('os')&#xA;const path = require('path')&#xA;const electron = require('electron')&#xA;const BrowserWindow = electron.BrowserWindow&#xA;const ipc = electron.ipcMain&#xA;const shell = electron.shell&#xA;&#xA;ipc.on('print-to-pdf', function (event) {&#xA;  const pdfPath = path.join(os.tmpdir(), 'print.pdf')&#xA;  const win = BrowserWindow.fromWebContents(event.sender)&#xA;  // Use default printing options&#xA;  win.webContents.printToPDF({}, function (error, data) {&#xA;    if (error) throw error&#xA;    fs.writeFile(pdfPath, data, function (error) {&#xA;      if (error) {&#xA;        throw error&#xA;      }&#xA;      shell.openExternal('file://' + pdfPath)&#xA;      event.sender.send('wrote-pdf', pdfPath)&#xA;    })&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",5847412,"",5847412,"",2017-03-22T14:23:21,2017-03-22T14:23:21,"","",,2,,,
42938559,2,,42938236,2017-03-21T21:37:05,,7,,"<p>Maybe you should add <code>angular</code> types to <code>tsconfig.json</code> as following:</p>&#xA;&#xA;<pre><code>{&#xA;    ...&#xA;    ""compilerOptions"":&#xA;        ...&#xA;        ""types"": [&#xA;            ""angular""&#xA;        ],&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If that won't work, since <code>typings</code> are deprecated, I suggest you to install <code>@types/angular</code> with npm:</p>&#xA;&#xA;<p><code>npm install --save-dev @types/angular</code></p>&#xA;&#xA;<p>and include it as above.</p>&#xA;&#xA;<p>Cheers.</p>&#xA;",5498823,"",,"",,2017-03-21T21:37:05,"","",,1,,,
42867900,2,,42867688,2017-03-17T22:14:39,,30,,"<p>Add the <code>allowJs</code> option in your <code>tsconfig.json</code> like this:<br>&#xA;as <a href=""https://stackoverflow.com/users/3861083/fabian-lauer"">fabian lauer</a> said  also add <code>outDir</code> option to specify where your compiled files will be:</p>&#xA;&#xA;<pre><code>{&#xA;    ""compilerOptions"": {&#xA;        ""outDir"": ""./built"", &lt;--- add this&#xA;        ""allowJs"": true,  &lt;--- and this&#xA;        ""target"": ""es5""&#xA;    },&#xA;    ""include"": [&#xA;        ""./src/**/*""&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;",7273246,"",-1,"",2017-05-23T11:46:48,2017-03-18T11:23:15,"","",,6,,,
52072172,2,,52067879,2018-08-29T07:46:29,,2,,"<p>You are using <code>forEach</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Parameters"" rel=""nofollow noreferrer"">which is not returning anything</a>.<br>&#xA;Try it with <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""nofollow noreferrer""><code>.map</code></a> and you will get a new array of your items.<br>&#xA;<strong>Don't forget the <code>return</code> keyword</strong></p>&#xA;&#xA;<pre><code>this.state.value.map(element =&gt; {&#xA;  console.log(element.ID) //this works&#xA;  return this.renderItem(element.ID, ""some content"")&#xA;})&#xA;</code></pre>&#xA;",3148807,"",3148807,"",2018-08-29T07:52:22,2018-08-29T07:52:22,"","",,0,,,
52079987,2,,51904649,2018-08-29T14:30:32,,2,,"<p>This ended up being a mashup of a bunch of different issues on my end. I'll start with the simplest and go from there.</p>&#xA;&#xA;<h3>Platform</h3>&#xA;&#xA;<p>Your error there indicates that it wants <code>node-v57-win32-x64</code>, but if you are running from Electron it should be <code>electron-v2.0-win32-x64</code> (or <code>electron-v1.7-win32-x64</code> if you are using an older version). I ran into this as well because I am running <code>sqlite3</code> in a child process. Child processes in Electron are in a full node context and not an Electron (browser or node+browser) context. I fixed this by passing the Electron version from the main browser process (<code>process.versions.electron</code>) to the child process via an environment variable and setting it on <code>process.versions.electron</code> in the child process.</p>&#xA;&#xA;<p>WARNING: that is a HACK and works because I'm not using anything that expects a full Electron environment in that process. It is literally only to make it find the correct native bindings. A more correct fix would be to look into making <code>electron-builder</code> build <code>node-v57-win32-x64</code> instead.</p>&#xA;&#xA;<p>Speaking of which, let's create those next.</p>&#xA;&#xA;<h3>postinstall</h3>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ...&#xA;  ""postinstall"": ""electron-builder install-app-deps""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This should attempt to rebuild your native dependencies when running <code>npm install</code> or <code>yarn install</code>. If you have a <code>project/app</code> directory, they will be placed in <code>project/app/node_modules/</code>. Otherwise they'll go in <code>project/node_modules</code>.</p>&#xA;&#xA;<h3>Transitive Dependency</h3>&#xA;&#xA;<p>In my case, <code>sqlite3</code> is actually a transitive dependency of another package in my dependency set. While <code>electron-builder</code> on Linux/OS X picked these up correctly and showed this during installer creation:</p>&#xA;&#xA;<pre><code>• rebuilding native production dependencies platform=linux arch=x64&#xA;• rebuilding native dependency name=sqlite3&#xA;</code></pre>&#xA;&#xA;<p>the Windows build showed:</p>&#xA;&#xA;<pre><code>• no native production dependencies&#xA;</code></pre>&#xA;&#xA;<p>This was fixed by adding the transitive dependency as a direct dependency. After I did this, the package started to be picked up by electron-builder for compilation and was spitting out errors.</p>&#xA;&#xA;<h3>Windows Build</h3>&#xA;&#xA;<p>To fix those errors:</p>&#xA;&#xA;<ul>&#xA;<li>Install python (I used the latest 2.7)</li>&#xA;<li>Install <a href=""http://www.microsoft.com/en-us/download/details.aspx?id=40760"" rel=""nofollow noreferrer"">Microsoft Build Tools 2013</a> and restart</li>&#xA;<li>run your <code>postinstall</code> script again</li>&#xA;</ul>&#xA;&#xA;<p>This is the point where I said it was ""half-solved"" on my end. This <em>should</em> be the full solution for basic electron project setups.</p>&#xA;&#xA;<h3>yarn workspaces</h3>&#xA;&#xA;<p>I use the yarn workspaces feature and my project setup is something like this:</p>&#xA;&#xA;<pre><code>yarn-workspace-project/&#xA;  workspace/&#xA;    project/&#xA;      web-app/&#xA;    project-electron/&#xA;      app/&#xA;</code></pre>&#xA;&#xA;<p>For this kind of setup, <code>yarn install</code> is generally run in the <code>yarn-workspace-project</code> or <code>yarn-workspace-project/workspace</code> directory, rather than in each project. This produces a hoisted <code>node_modules/</code> directory at <code>yarn-workspace-project/node_modules</code>. When creating the packaged version, <code>electron-builder</code> grabs the dependencies from that hoisted location and everything runs.</p>&#xA;&#xA;<p>When running my start script in <code>project-electron</code>, however, <code>electron .</code> had some issues finding the native binding. The package using sqlite3 was installed under <code>yarn-workspace-project/node_modules</code>, and was therefore resolving <code>sqlite3</code> to <code>yarn-workspace-project/node_modules/sqlite3</code>. This definitely exists per the <code>yarn install</code>, but the electron bindings got put in <code>yarn-workspace-project/workspace/project-electron/app/node_modules/sqlite3</code>.</p>&#xA;&#xA;<p>There are multiple obvious solutions to that, so I'll leave that as an exercise to the reader. The key problem here is that the default bindings that get downloaded (I think? I don't recall them being built) for <code>node-v57-win32-x64</code> do not work out of the box for Windows 10 like they do for Linux / OS X, even though the error indicates that they don't exist (which they do).</p>&#xA;",3772079,"",,"",,2018-08-29T14:30:32,"","",,0,,,
52083949,2,,52082162,2018-08-29T18:25:40,,4,,"<p>If I'm hearing you right, you're wondering if you can put a whole OS into a JS VM running in Electron - and then run your app on top of that.</p>&#xA;&#xA;<p>Please don't do that. Electron is a fantastic cross-platform solution, but my project <code>windows95</code> was mostly an educational experiment showcasing how powerful modern JavaScript and Electron can be.</p>&#xA;",4593017,"",,"",,2018-08-29T18:25:40,"","",,0,,,
52083995,2,,52083994,2018-08-29T18:28:48,,3,,"<p>Install <code>electron</code> as <code>dev-dependency</code> to resolve this issue</p>&#xA;&#xA;<pre><code>npm install --save-dev electron&#xA;</code></pre>&#xA;&#xA;<p>Resources&#xA;<a href=""https://github.com/electron-userland/electron-packager/issues/617"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-packager/issues/617</a></p>&#xA;",4574281,"",4574281,"",2019-01-21T08:20:59,2019-01-21T08:20:59,"","",,0,,,
52112283,2,,52111151,2018-08-31T09:18:43,,1,,"<p>You are subscribing to <code>ipcRenderer.on</code> after every button click which is causing multiple subscriptions. Try to define the <code>ipcRenderer.on</code> event handler outside click event and it should work fine.</p>&#xA;&#xA;<p>Something like this - </p>&#xA;&#xA;<pre><code>button.addEventListener('click', function(){ showDialogue( this ); }, false );&#xA;&#xA;&#xA;ipcRenderer.on( 'list-directory-reply', function( event, contents ) {&#xA;    // ipcRenderer event handler&#xA;});&#xA;&#xA;showDialogue(select) {&#xA;    ipcRenderer.send( 'list-directory', './files/documents/' );&#xA;}&#xA;</code></pre>&#xA;",2332159,"",,"",,2018-08-31T09:18:43,"","",,0,,,
52122432,2,,52120324,2018-08-31T20:49:28,,4,,"<p>For anyone else facing a similiar issue. Actually my program was built correctly and there was no error in the code.</p>&#xA;&#xA;<p>What had happened was that the file paths were not correctly configured. When I manually copied the necessary files for the ""sweetalert"" to run, it showed up the message. Thus no errors specific to sweetalert.</p>&#xA;&#xA;<p>I'll have to find a way to solve the 'path' issue anyways.</p>&#xA;&#xA;<p><strong>UPDATE:</strong></p>&#xA;&#xA;<p>Adding the code</p>&#xA;&#xA;<pre><code>""extraFiles"": [&#xA;    ""folder_to_be_included_in_build""&#xA;  ],&#xA;</code></pre>&#xA;&#xA;<p>into the <strong>package.json</strong> file now copies the needed folder during ""building"" the app. Now no need to copy the folder manually to the build.</p>&#xA;",8995555,"",8995555,"",2018-09-01T09:19:17,2018-09-01T09:19:17,"","",,0,,,
52126793,2,,51928985,2018-09-01T09:29:39,,2,,"<p><strong>The Challenge:</strong></p>&#xA;&#xA;<p>We want to execute our heavy lifting code in a separate worker thread while also sending results (stream data chunks) back to the main thread during execution.</p>&#xA;&#xA;<p>NAN (Native Abstractions for Node.js) already provides an approach to do this with (AsyncProgressWorker).</p>&#xA;&#xA;<p>However, we can not know if the HandleProgressCallback is actually invoked during the execution to send back our results. This can happen when our run time is simply to fast and therefore the callback is never executed.</p>&#xA;&#xA;<p><strong>Proposed Solution:</strong></p>&#xA;&#xA;<p>We simply collect our stream output in a stack (StackCollect). We attempt to clear this stack immediately and send the stream results back to the main thread (if possible) - (StackDrain). If we don't have the time to clear the stack immediately we drain (whats left) at the end of the execution run (HandleOKCallback).</p>&#xA;&#xA;<p><strong>Implementation Example:</strong></p>&#xA;&#xA;<p>demo.cpp (our C++ node/electron addon):</p>&#xA;&#xA;<pre><code>#include &lt;nan.h&gt;&#xA;#include &lt;node.h&gt;&#xA;#include &lt;v8.h&gt;&#xA;&#xA;#include &lt;iostream&gt;&#xA;#include &lt;string&gt;&#xA;#include &lt;vector&gt;&#xA;&#xA;#include &lt;mutex&gt;&#xA;&#xA;#include &lt;chrono&gt;&#xA;#include &lt;thread&gt;&#xA;&#xA;class vSync_File : public Nan::AsyncProgressWorker {&#xA;public:&#xA;    ~vSync_File();&#xA;    vSync_File(Nan::Callback * result, Nan::Callback * chunk);&#xA;&#xA;    void Execute(const Nan::AsyncProgressWorker::ExecutionProgress&amp; chunk);&#xA;&#xA;    void HandleOKCallback();&#xA;&#xA;    void HandleProgressCallback(const char *tout, size_t tout_size);&#xA;&#xA;    //needed for stream data collection&#xA;    void StackCollect(std::string &amp; str_chunk, const Nan::AsyncProgressWorker::ExecutionProgress&amp; tchunk);&#xA;    //drain stack&#xA;    void StackDrain();&#xA;private:&#xA;    Nan::Callback * chunk;&#xA;    //stores stream data - use other data types for different output&#xA;    std::vector&lt;std::string&gt; stack;&#xA;    //mutex&#xA;    std::mutex m;&#xA;};&#xA;&#xA;vSync_File::vSync_File(Nan::Callback * result, Nan::Callback * chunk)&#xA;: Nan::AsyncProgressWorker(result), chunk(chunk) {}&#xA;&#xA;vSync_File::~vSync_File() {&#xA;    delete chunk;&#xA;}&#xA;&#xA;void vSync_File::StackCollect(std::string &amp; str_chunk, const Nan::AsyncProgressWorker::ExecutionProgress&amp; tchunk) { &#xA;    std::lock_guard&lt;std::mutex&gt; guardme(m);&#xA;&#xA;    stack.push_back(str_chunk);&#xA;&#xA;    //attempt drain&#xA;    std::string dummy = ""NA"";&#xA;    tchunk.Send(dummy.c_str(), dummy.length());&#xA;}&#xA;&#xA;//Dump out stream data&#xA;void vSync_File::StackDrain() {&#xA;  std::lock_guard&lt;std::mutex&gt; guardme(m);&#xA;&#xA;  for (uint i = 0; i &lt; stack.size(); i++) {&#xA;    std::string th_chunk = stack[i];&#xA;    v8::Local&lt;v8::String&gt; chk = Nan::New&lt;v8::String&gt;(th_chunk).ToLocalChecked();&#xA;    v8::Local&lt;v8::Value&gt; argv[] = { chk };&#xA;&#xA;    chunk-&gt;Call(1, argv, this-&gt;async_resource);&#xA;  }&#xA;  stack.clear();&#xA;}&#xA;&#xA;//Our main job in a nice worker thread&#xA;void vSync_File::Execute(const Nan::AsyncProgressWorker::ExecutionProgress&amp; tchunk) {&#xA;    //simulate some stream output&#xA;    for (unsigned int i = 0; i &lt; 20; i++) {&#xA;        std::string out_chunk;&#xA;        out_chunk = ""Simulated stream data "" + std::to_string(i);   &#xA;&#xA;        std::this_thread::sleep_for(std::chrono::milliseconds(300)); //so our HandleProgressCallback is invoked, otherwise we are too fast in our example here&#xA;&#xA;        this-&gt;StackCollect(out_chunk, tchunk);&#xA;    }   &#xA;}&#xA;&#xA;//Back at the main thread - if we have time stream back the output &#xA;void vSync_File::HandleProgressCallback(const char *tout, size_t tout_size) {&#xA;  Nan::HandleScope scope;&#xA;&#xA;  this-&gt;StackDrain();&#xA;}&#xA;&#xA;//Back at the main thread - we are done&#xA;void vSync_File::HandleOKCallback () {&#xA;&#xA;  this-&gt;StackDrain(); //drain leftovers from stream stack&#xA;&#xA;  v8::Local&lt;v8::String&gt; result_mess = Nan::New&lt;v8::String&gt;(""done reading"").ToLocalChecked();&#xA;  v8::Local&lt;v8::Value&gt; argv[] = { result_mess };&#xA;  callback-&gt;Call(1, argv, this-&gt;async_resource);&#xA;}&#xA;&#xA;&#xA;NAN_METHOD(get_stream_data) {&#xA;  Nan::Callback *result = new Nan::Callback(info[0].As&lt;v8::Function&gt;());&#xA;  Nan::Callback *chunk = new Nan::Callback(info[1].As&lt;v8::Function&gt;());&#xA;&#xA;  AsyncQueueWorker(new vSync_File(result, chunk));&#xA;}&#xA;&#xA;&#xA;NAN_MODULE_INIT(Init) {&#xA;   //we want stream data&#xA;   Nan::Set(target, Nan::New&lt;v8::String&gt;(""get_stream_data"").ToLocalChecked(),&#xA;   Nan::GetFunction(Nan::New&lt;v8::FunctionTemplate&gt;(get_stream_data)).ToLocalChecked());&#xA;}&#xA;&#xA;NODE_MODULE(stream_c_electron, Init)&#xA;</code></pre>&#xA;&#xA;<p>index.js (electron implementation example):</p>&#xA;&#xA;<pre><code>const stream_c_electron = require('./build/linux_x64/stream_c_electron.node');&#xA;&#xA;stream_c_electron.get_stream_data(function(res) {&#xA;    //we are done&#xA;    console.log(res);&#xA;}, function(chk) {&#xA;    console.log(""a line streamed"");&#xA;    console.log(chk);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>package.json:</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""stream_c_electron"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""description"": ""stream from c++ node addon demo"",&#xA;  ""main"": ""index.js"",&#xA;  ""scripts"": {&#xA;    ""start"": ""electron ."",&#xA;    ""build_this"": ""HOME=~/.electron-gyp node-gyp rebuild --target=2.0.8 --arch=x64 --dist-url=https://atom.io/download/electron"",&#xA;    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1""&#xA;  },&#xA;  ""author"": ""11AND2"",&#xA;  ""license"": ""MIT"",&#xA;  ""dependencies"": {&#xA;    ""nan"": ""2.11.0""&#xA;  },&#xA;  ""devDependencies"": {&#xA;    ""electron"": ""2.0.8""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>binding.gyp:</p>&#xA;&#xA;<pre><code>{&#xA;  ""targets"": [&#xA;    {&#xA;      ""target_name"": ""stream_c_electron"",&#xA;      ""sources"": [  ""c_src/demo.cpp""  ],&#xA;      ""conditions"": [&#xA;        [&#xA;        'OS==""linux""',&#xA;        {&#xA;            ""cflags"": [""-Wall"", ""-std=c++11""],&#xA;            'product_dir' : 'linux_x64',&#xA;            ""include_dirs"": [&#xA;                ""&lt;!(node -e \""require('nan')\"")""&#xA;            ]&#xA;        }&#xA;        ]&#xA;      ]&#xA;    }&#xA;   ]&#xA;}&#xA;</code></pre>&#xA;",9734548,"",,"",,2018-09-01T09:29:39,"","",,0,,,
52132488,2,,52050255,2018-09-01T21:59:25,,3,,"<p>The answer is 'paexec'.  psexec works exactly the same, but paexec is open-source, freely distributable, and usable in your apps for both personal and commercial applications.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Requirements: </p>&#xA;&#xA;<p>Download paexec.exe .</p>&#xA;&#xA;<p>Place it where you can execute it, OR cd to the folder you put it in, OR place it in the command path, OR add the folder you put it in to the command path, OR reference it by pathname (i.e. c:\folder\subfolder\paexec -your_options).</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Recommended:</p>&#xA;&#xA;<p>Execute this from a Windows Service (in my case an npm node-windows service).  This allows you to run it as SYSTEM.  There are other ways, but this one seems to work the best.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Example use:</p>&#xA;&#xA;<pre><code>paexec -d -s -x -w c:\path\to\your\app_folder cmd /c app.exe -your_options&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>How this works:</p>&#xA;&#xA;<p>-d prevent paexec from waiting for app to exit, therefore allows non-blocking.</p>&#xA;&#xA;<p>-s executes as SYSTEM user.</p>&#xA;&#xA;<p>-x causes it to run on the logon screen</p>&#xA;&#xA;<p>-w sets the current working directory</p>&#xA;&#xA;<p>cmd /c yourappname.exe allows you to run a GUI interactive app with the previous options (it doesn't seem to work without opening the prompt first).</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Addition considerations:</p>&#xA;&#xA;<p>Using 'cmd /c', you can call a .bat or .cmd script and use 'start /b your_app.exe' to make the cmd.exe window go away (otherwise you are stuck with it on your logon screen until you close it or your app).</p>&#xA;&#xA;<p>Your app will continue running after logging in, however it won't be running in the users login session, so if you want your app to do both, I recommend using 'taskkill /f /im your_app.exe' or other means to stop in and then running on the users login session.</p>&#xA;&#xA;<p>You can run it on the user's desktop session via:</p>&#xA;&#xA;<pre><code>paexec -d -s -i 1 -w... (the rest is the same as above).&#xA;</code></pre>&#xA;&#xA;<p>...assuming there is only one user logged in, they will be on Session 1.  This is what the '-i 1' option does, is run it on session 1.  If there is more than one user logged in (i.e. via Switch User etc.) they may have a different Session number, so just replace '-i 1' with '-i x' where 'x' is the users Session ID.</p>&#xA;&#xA;<p>You can lookup the Session id via Windows command 'tasklist /v'.</p>&#xA;&#xA;<p>If you're trying run this from a node.js service, you will need to use process_child built-in module and <em>spawn</em> a cmd prompt to run it from.  There are lots of examples for this, so not tackling that here.  The nice thing about running it from a Windows Service is it won't open a visible window, and you can provide i/o via the standard child_process.spawn() methods and events.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Security:</p>&#xA;&#xA;<p>Running this from a Windows Service (i.e. via node-windows and child_process.spawn) allows you to run your GUI app not only on the logon screen, <em>but at boot-time before login, GUI or not</em>-- without any of the typical insecure hacks, like autologon to a special user account then locking the screen or logging out, etc.  It is actually using a tool that mirrors MicroSoft/SysInternals own tool for doing this under MS's officially prescribed methods.</p>&#xA;&#xA;<p><em>The weak-point here is only your app</em>, so button it up and be safe!</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Note:  Obvi this is a complicated issue, which is probably why there don't seem to be any good answers-- and likely the few who have figured it out don't want to share.  So here you go.</p>&#xA;&#xA;<p>Enjoy!</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>PS:  You could be <em>really Evil</em> with this.  <em>Please don't use it for nefarious purposes.</em>  That's exactly why they have made it so difficult.  Be good, so we can all benefit from it's power.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Aside Regarding task names:</p>&#xA;&#xA;<p>If you wish to refer to your node or nw.js app, and see it as yourappname.exe in tasklist and task manager, you can simply rename the node.exe and nw.exe executables to whatever you want them to show as (i.e. rename nw.exe to myapp.exe and it will show and be referred to as myapp.exe in Windows).  This is assuming you have a local copy of node.exe etc. in your app folder... <em>Don't do this with the globally installed executable!</em></p>&#xA;&#xA;<hr>&#xA;&#xA;<p>One more thing:</p>&#xA;&#xA;<p>If anyone has a better, tried and tested method, <em>please add it as an answer!</em></p>&#xA;&#xA;<p>If it works for me, I will gladly unaccept my answer and accept yours!!</p>&#xA;",6151112,"",6151112,"",2018-09-02T08:51:01,2018-09-02T08:51:01,"","",,0,,,
52145394,2,,52113996,2018-09-03T07:53:28,,1,,"<p>According to the Google Maps JavaScript API documentation:</p>&#xA;&#xA;<blockquote>&#xA;  <p>file:// referers need a special representation to be added to the Key restriction. The ""file:/"" part should be replaced with ""__file_url__"" before being added to the Key restriction. For example, ""file:///path/to/"" should be formatted as ""__file_url__//path/to/*"". After enabling file:// referers, it is recommended you regularly check your usage, to make sure it matches your expectations.</p>&#xA;</blockquote>&#xA;&#xA;<p>source: <a href=""https://developers.google.com/maps/documentation/javascript/get-api-key#key-restrictions"" rel=""nofollow noreferrer"">https://developers.google.com/maps/documentation/javascript/get-api-key#key-restrictions</a></p>&#xA;&#xA;<p>So, in your case for <code>file:///web/#/</code> path you should define HTTP referrer restriction as </p>&#xA;&#xA;<p><code>__file_url__//web/*</code></p>&#xA;&#xA;<p>I hope this helps!</p>&#xA;",5140781,"",,"",,2018-09-03T07:53:28,"","",,0,,,
52146471,2,,52146298,2018-09-03T09:03:04,,0,,"<p>The syntax for sending and receiving messages is:</p>&#xA;&#xA;<p>To send from the window to the renderer:</p>&#xA;&#xA;<pre><code>win.webContents.send('asynchronous-message', 'message');&#xA;</code></pre>&#xA;&#xA;<p>To receive the message in renderer:</p>&#xA;&#xA;<pre><code>ipcRenderer.on('asynchronous-message', function (event, message) {&#xA;    // Do your background color changing here.&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>So your code would become something like this:</p>&#xA;&#xA;<p>Main:</p>&#xA;&#xA;<pre><code>window.on('close', function () {&#xA;    window = null&#xA;    writePreferences(inputs)&#xA;    win.webContents.send('asynchronous-message', ""PREFERENCE_SAVED"");&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Renderer:</p>&#xA;&#xA;<pre><code>ipcRenderer.on('asynchronous-message', function (event, message) {&#xA;    if (message == 'PREFERENCE_SAVED') {&#xA;        document.querySelector('html').style.setProperty(""--background"", ""orange"");&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/ipc-renderer#ipcrendereronchannel-listener"" rel=""nofollow noreferrer""><code>ipcRenderer.on</code> Docs</a></p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/web-contents#contentssendchannel-arg1-arg2-"" rel=""nofollow noreferrer""><code>win.webContents.send</code> Docs</a></p>&#xA;",6577664,"",13302,"",2018-11-25T19:11:26,2018-11-25T19:11:26,"","",,0,,,
52149204,2,,52061758,2018-09-03T11:47:06,,1,,"<p>The config file should be renamed electron.exe.config and placed in the same directory as electron.exe - i.e. <code>node_modules\electron\dist</code>.</p>&#xA;&#xA;<p>I just ran into this when needing to add a bindingRedirect. Putting it in the above file solved it.</p>&#xA;&#xA;<p>Also, if you're using electron-builder for packaging the app, you can easily include the config file in the packaged application by adding it to the extraFiles collection in the build configuration, for instance:</p>&#xA;&#xA;<pre><code>""extraFiles"": [&#xA;  {&#xA;    ""from"": ""app.config"",&#xA;    ""to"": ""my-electron-app-name.exe.config""&#xA;  }&#xA;]&#xA;</code></pre>&#xA;",991,"",991,"",2018-10-11T15:57:59,2018-10-11T15:57:59,"","",,0,,,
52154612,2,,51917957,2018-09-03T18:17:22,,1,,"<p>Please try this in your html file to include your js:</p>&#xA;&#xA;<pre><code>...my html...&#xA;&lt;script src=""./render.js""&gt;&lt;/script&gt;&#xA;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>In your render.js file include your example e.g. ""var foo = 3;"". Should work.</p>&#xA;",9734548,"",9734548,"",2018-09-03T18:22:35,2018-09-03T18:22:35,"","",,0,,,
52160589,2,,52116289,2018-09-04T07:03:22,,0,,"<p>In the end I had to run <code>react-scripts eject</code>, as it seemed to be the only solution to get to the configuration properly.</p>&#xA;",565185,"",,"",,2018-09-04T07:03:22,"","",,0,,,
52168383,2,,52164358,2018-09-04T14:17:59,,1,,"<p>Its working now. The problem was I used the Http- Loader for ngx-translate which was not working in electron.</p>&#xA;&#xA;<p>So I implemented the <strong>TranslateUniversalLoader</strong> like the last post of this thread mentioned: <a href=""https://github.com/ngx-translate/core/issues/754"" rel=""nofollow noreferrer"">https://github.com/ngx-translate/core/issues/754</a></p>&#xA;",9963032,"",,"",,2018-09-04T14:17:59,"","",,0,,,
52173656,2,,51804259,2018-09-04T20:35:46,,1,,"<p><strong>Simple solution:</strong>&#xA;</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import { app, powerMonitor } from 'electron';&#xA;&#xA;powerMonitor.on('shutdown', () =&gt; {&#xA;  app.quit();&#xA;});&#xA;</code></pre>&#xA;&#xA;&#xA;",6025788,"",,"",,2018-09-04T20:35:46,"","",,0,,,
52179649,2,,52178592,2018-09-05T07:40:18,,1,,"<p>Once you've called <code>setDevToolsWebContents</code> then you can move the devtools window around just by calling <code>devtools.setPosition(x, y)</code>.</p>&#xA;&#xA;<p>Here is a example of moving the devtools next to the window by setting it's position whenever it's moved:</p>&#xA;&#xA;<pre><code>app.on('ready', function () {&#xA;    var devtools = new BrowserWindow();&#xA;    var window   = new BrowserWindow({width: 800, height: 600});&#xA;    window.loadURL('https://stackoverflow.com/questions/52178592/how-to-set-the-devtools-window-position-in-electron');&#xA;&#xA;    window.webContents.setDevToolsWebContents(devtools.webContents);&#xA;    window.webContents.openDevTools({mode: 'detach'});&#xA;&#xA;    // Set the devtools position when the parent window has finished loading.&#xA;    window.webContents.once('did-finish-load', function () {&#xA;        var windowBounds = window.getBounds();&#xA;        devtools.setPosition(windowBounds.x + windowBounds.width, windowBounds.y);&#xA;    });&#xA;&#xA;    // Set the devtools position when the parent window is moved.&#xA;    window.on('move', function () {&#xA;        var windowBounds = window.getBounds();&#xA;        devtools.setPosition(windowBounds.x + windowBounds.width, windowBounds.y);&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",6577664,"",6577664,"",2018-09-05T09:07:07,2018-09-05T09:07:07,"","",,0,,,
52200145,2,,52145218,2018-09-06T08:50:51,,0,,"<p>Ok so I put together a quick example. You will have to modify that, because it only works for moving files on the same drive.</p>&#xA;&#xA;<p>Here is my index.html with two divs to test the drag control:</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;link rel=""stylesheet"" href=""style.css""&gt;&#xA;    &lt;script src=""app.js""&gt;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;div id=""sourceDrive"" class=""drive"" ondrop=""dropOnSource(event)"" ondragover=""allowDrop(event)""&gt;&lt;/div&gt;&#xA;    &lt;div id=""destinationDrive"" class=""drive"" ondrop=""dropOnDestination(event)"" ondragover=""allowDrop(event)""&gt;&lt;/div&gt;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;&#xA;<p></p>&#xA;&#xA;<p>And the respective app.js:</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const ipc = electron.ipcRenderer;&#xA;&#xA;function loadFiles(){&#xA;    ipc.send(""loadFiles"");&#xA;}&#xA;loadFiles();&#xA;&#xA;ipc.on('sourceFiles', (ev, args) =&gt; {&#xA;    document.querySelector(""#sourceDrive"").innerHTML = """";&#xA;    args.forEach(file =&gt; { &#xA;        document.querySelector(""#sourceDrive"").innerHTML += '&lt;div id=""'+file+'"" draggable=""true"" ondragstart=""drag(event)""&gt;'+file+'&lt;/div&gt;';&#xA;    });&#xA;})&#xA;ipc.on('destinationFiles', (ev, args) =&gt; {&#xA;    document.querySelector(""#destinationDrive"").innerHTML = """";&#xA;    args.forEach(file =&gt; { &#xA;        document.querySelector(""#destinationDrive"").innerHTML += '&lt;div id=""'+file+'"" draggable=""true"" ondragstart=""drag(event)""&gt;'+file+'&lt;/div&gt;';&#xA;    });&#xA;})&#xA;&#xA;function allowDrop(ev) {&#xA;    ev.preventDefault();&#xA;}&#xA;function drag(ev) {&#xA;    ev.dataTransfer.setData(""text"", ev.target.id);&#xA;}&#xA;function dropOnSource(ev) {&#xA;    ev.preventDefault();&#xA;    var data = ev.dataTransfer.getData(""text"");&#xA;    ipc.send('moveToSource', data);&#xA;    loadFiles();&#xA;}&#xA;function dropOnDestination(ev) {&#xA;    ev.preventDefault();&#xA;    var data = ev.dataTransfer.getData(""text"");&#xA;    ipc.send('moveToDestination', data);&#xA;    loadFiles();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And here is the main.js:</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const app = electron.app;&#xA;const BrowserWindow = electron.BrowserWindow;&#xA;const ipc = electron.ipcMain;&#xA;const fs = require(""fs"");&#xA;&#xA;let mainWindow;&#xA;&#xA;const sourcePath = ""fileSource"";&#xA;const destinationPath = ""fileDestination"";&#xA;&#xA;app.on('ready', _ =&gt; {&#xA;    console.log(""App running"");&#xA;&#xA;    mainWindow = new BrowserWindow({&#xA;        width: 600,&#xA;        height: 400&#xA;    });&#xA;    mainWindow.loadURL('file://' + __dirname + '/ui/index.html');&#xA;&#xA;    ipc.on(""loadFiles"", (event, arg) =&gt; {&#xA;        var fileStackSource = [];&#xA;        fs.readdirSync(sourcePath).forEach(file =&gt; {&#xA;            fileStackSource.push(file);&#xA;        });&#xA;        var fileStackDestination = [];&#xA;        fs.readdirSync(destinationPath).forEach(file =&gt; {&#xA;            fileStackDestination.push(file);&#xA;        });&#xA;        mainWindow.webContents.send('sourceFiles', fileStackSource);&#xA;        mainWindow.webContents.send('destinationFiles', fileStackDestination);&#xA;    });&#xA;&#xA;    ipc.on('moveToSource', (event, arg) =&gt; {&#xA;        console.log(""moving "" + arg + "" from "" + destinationPath + "" to "" + sourcePath);&#xA;        fs.renameSync(destinationPath + ""/"" + arg, sourcePath + ""/"" + arg);&#xA;    });&#xA;    ipc.on('moveToDestination', (event, arg) =&gt; {&#xA;        console.log(""moving "" + arg + "" from "" + sourcePath + "" to "" + destinationPath);&#xA;        fs.renameSync(sourcePath + ""/"" + arg, destinationPath + ""/"" + arg);&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>My directory looks as follows:&#xA;- main.js</p>&#xA;&#xA;<ul>&#xA;<li>ui</li>&#xA;</ul>&#xA;&#xA;<p>-- index.html</p>&#xA;&#xA;<p>-- app.js</p>&#xA;&#xA;<ul>&#xA;<li><p>fileSource</p></li>&#xA;<li><p>fileDestination</p></li>&#xA;</ul>&#xA;&#xA;<p>This should help you to understand the basics of what you are planning to do. If you are still uncertain about the basics of electron, I'd recommend you start with that.</p>&#xA;",7856535,"",,"",,2018-09-06T08:50:51,"","",,0,,,
52202175,2,,52142088,2018-09-06T10:37:02,,0,,"<p>Make sure to close the app when closing your last window.</p>&#xA;&#xA;<p>In your main.js, add something like that:</p>&#xA;&#xA;<pre><code>mainWindow.on(""closed"", function () {&#xA;    mainWindow = null;&#xA;    app.quit();&#xA;})&#xA;</code></pre>&#xA;",7856535,"",,"",,2018-09-06T10:37:02,"","",,0,,,
52226590,2,,52130941,2018-09-07T16:41:13,,3,,"<p>Following the philosophy given by <a href=""https://stackoverflow.com/a/52173276/6909980"">Tim answer</a>, instead of using BrowserWindow, we can use WebDriverIO to focus the desired window: </p>&#xA;&#xA;<pre><code>test.(async t =&gt; {&#xA;    // here, t.context.app.client handles the first window&#xA;    await t.context.app.client.windowByIndex(1).then(() =&gt; {&#xA;        // here, t.context.app.client handles the second window&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",6909980,"",,"",,2018-09-07T16:41:13,"","",,0,,,
52250860,2,,52203930,2018-09-10T03:52:34,,0,,"<p>Find the Spectron documentation at <a href=""https://electronjs.org/spectron"" rel=""nofollow noreferrer"">https://electronjs.org/spectron</a></p>&#xA;&#xA;<p>Installation</p>&#xA;&#xA;<pre><code>npm install --save-dev spectron&#xA;</code></pre>&#xA;&#xA;<p>Sample test file looks like this</p>&#xA;&#xA;<pre><code>const Application = require('spectron').Application&#xA;const assert = require('assert')&#xA;const electronPath = require('electron')&#xA;const path = require('path')&#xA;&#xA;describe('Application launch', function () {&#xA;  this.timeout(10000)&#xA;&#xA;  beforeEach(function () {&#xA;    this.app = new Application({&#xA;&#xA;      path: electronPath,&#xA;&#xA;&#xA;      args: [path.join(__dirname, '..')]&#xA;    })&#xA;    return this.app.start()&#xA;  })&#xA;&#xA;  afterEach(function () {&#xA;    if (this.app &amp;&amp; this.app.isRunning()) {&#xA;      return this.app.stop()&#xA;    }&#xA;  })&#xA;&#xA;  it('shows an initial window', function () {&#xA;    return this.app.client.getWindowCount().then(function (count) {&#xA;      assert.equal(count, 1)&#xA;&#xA;    })&#xA;  })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Spectron can work with any test framework. I prefer using mocha.</p>&#xA;&#xA;<p>Clone this project for more info <a href=""https://github.com/electron/spectron"" rel=""nofollow noreferrer"">https://github.com/electron/spectron</a> </p>&#xA;",8903949,"",,"",,2018-09-10T03:52:34,"","",,0,,,
52265645,2,,52265415,2018-09-10T21:21:26,,3,,"<p>Consider using a CSS animation to achieve a loading sequence <a href=""https://www.phpied.com/css-animations-off-the-ui-thread/"" rel=""nofollow noreferrer"">that runs independently of the UI thread</a> (ie where your JS/script code is executed). </p>&#xA;&#xA;<p>A simple CSS-only spinner like this should continue to animate while your app is busy during startup:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>@keyframes spin {&#xD;&#xA;    0% {&#xD;&#xA;      transform: rotate(0deg);&#xD;&#xA;    }&#xD;&#xA;    100% {&#xD;&#xA;      transform: rotate(360deg);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.loading {&#xD;&#xA;  animation: spin 1s linear infinite;&#xD;&#xA;  width:1rem;&#xD;&#xA;  height:1rem;&#xD;&#xA;  display:block;&#xD;&#xA;  &#xD;&#xA;  border: 4px solid red;&#xD;&#xA;  border-top-color: transparent;&#xD;&#xA;  border-radius: 50%;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;i class=""loading""&gt;&lt;/i&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",8526705,"",,"",,2018-09-10T21:21:26,"","",,0,,,
52271104,2,,52271004,2018-09-11T07:47:51,,1,,<p>I think you should create a Writable stream first. Then write that stream to a PDF file which you will create too. I'm not sure if you can use a PDF file as a writable stream directly. Sorry if this doesn't really answer the question but take this as a nudge in the right direction. </p>&#xA;,3705619,"",,"",,2018-09-11T07:47:51,"","",,0,,,
52076408,2,,52067022,2018-08-29T11:29:54,,1,,"<p>Actually, you can't do this. </p>&#xA;&#xA;<p>Because they only support from version 10.11.6. I already tried this a lot of time.</p>&#xA;&#xA;<p>But, I can't find any solution for that thing.</p>&#xA;",6616874,"",,"",,2018-08-29T11:29:54,"","",,1,,,
52144675,2,,52143147,2018-09-03T07:04:51,,0,,"<p>Electron's <code>remote</code> is not normal javascript object, it constructs proxy object when it's being asked, and doesn't export all of proxy-able namespace in its module exports : check <a href=""https://github.com/electron/electron/blob/3a79eacb6f44eadb6c17d725755d4278f62993dc/lib/renderer/api/remote.js#L297-L339"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/3a79eacb6f44eadb6c17d725755d4278f62993dc/lib/renderer/api/remote.js#L297-L339</a> for internals. </p>&#xA;&#xA;<p>Means, deconstruction in static import is not guaranteed. Reason wrapped function may work is it's proxy object is being constructed after application init stage, while top level doesn't - can't say for sure still as can't see full code flows though. </p>&#xA;&#xA;<p>Any cases, may not try to deconstruct over proxy object.</p>&#xA;",2742189,"",,"",,2018-09-03T07:04:51,"","",,1,,,
52154275,2,,52147577,2018-09-03T17:42:08,,1,,"<p><strong>Update</strong></p>&#xA;&#xA;<p>This is likely due to your account access rights on windows. You can double check if you are able to create files in C:\ using the file explorer.</p>&#xA;&#xA;<p>For me (Standard Account - Non-Admin) - I can create folders under C:\ but I can not create files:</p>&#xA;&#xA;<pre><code>fs.writeFile('C:\\test.json'); //does not work for me - EPERM&#xA;fs.mkdir('C:\\test'); //works for me&#xA;</code></pre>&#xA;&#xA;<p>Your code should work when you execute it in an admin shell (Right Click->Run as Administrator).</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Can you try:</p>&#xA;&#xA;<pre><code>const fs = require(""fs"");&#xA;&#xA;fs.writeFile('C:\\Users\\MyAccount\\Downloads\\test.json');&#xA;</code></pre>&#xA;",9734548,"",9734548,"",2018-09-04T17:25:55,2018-09-04T17:25:55,"","",,1,,,
52174627,2,,52162205,2018-09-04T22:12:39,,1,,"<p>You can disable all pointer events by adding the following rule to your page's CSS:</p>&#xA;&#xA;<pre class=""lang-css prettyprint-override""><code>body {&#xA;  pointer-events:none;&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>or via JavaScript:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>document.body.style.pointerEvents = ""none"";&#xA;</code></pre>&#xA;&#xA;<p>to re-enable:</p>&#xA;&#xA;<pre class=""lang-css prettyprint-override""><code>body {&#xA;  pointer-events:auto;&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>document.body.style.pointerEvents = ""auto"";&#xA;</code></pre>&#xA;&#xA;<p>You can do this on more specific elements to gain more granular control.</p>&#xA;",,user1693593,,"",,2018-09-04T22:12:39,"","",,1,,,
52175047,2,,52174867,2018-09-04T23:06:26,,0,,"<p>Like a previous commenter mentioned, you should be able to follow <a href=""https://stackoverflow.com/questions/23450534/how-to-call-a-python-function-from-node-js"">this SO answer</a> in Node.js (which is what Electron uses).</p>&#xA;&#xA;<p>To expound upon that answer just a bit, I'd recommend using the <a href=""https://docs.python.org/3/library/json.html"" rel=""nofollow noreferrer"">built-in Python JSON utility</a> to dump JSON to the standard out (just printing out the JSON string), and the using the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"" rel=""nofollow noreferrer"">built-in Node.js JSON utility</a> to parse that JSON string into a javascript object for use in your application.</p>&#xA;",10315025,"",,"",,2018-09-04T23:06:26,"","",,1,,,
52238863,2,,52235804,2018-09-08T19:47:33,,1,,"<p>The ""Unexpected String,"" error message you get is not related to the filters, but to the fact that <a href=""https://electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options-callback"" rel=""nofollow noreferrer"">dialog.showOpenDialog</a> is not called properly...</p>&#xA;&#xA;<pre><code>dialog.showOpenDialog (filename, options =&gt; { ... });&#xA;</code></pre>&#xA;&#xA;<p>should be instead:</p>&#xA;&#xA;<pre><code>dialog.showOpenDialog (options, filename =&gt; { ... });&#xA;</code></pre>&#xA;",,user8022331,,"",,2018-09-08T19:47:33,"","",,1,,,
52126346,2,,52124675,2018-09-01T08:24:48,,6,,"<p>To send a message back to the renderer you would use:</p>&#xA;&#xA;<pre><code>win.webContents.send('asynchronous-message', {'SAVED': 'File Saved'});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/web-contents#contentssendchannel-args"" rel=""nofollow noreferrer""><code>webContents.send</code> Docs</a></p>&#xA;",6577664,"",6577664,"",2019-12-15T01:15:22,2019-12-15T01:15:22,"","",,2,,,
52136656,2,,52125026,2018-09-02T11:38:52,,1,,"<p>there was another package return system volume as dvd-rom.&#xA;<a href=""https://www.npmjs.com/package/diskinfo"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/diskinfo</a></p>&#xA;&#xA;<p>this code return the dvd drive name, but i'm not sure its good idea or not.</p>&#xA;&#xA;<pre><code>var d = require('diskinfo');&#xA;var cddisk;&#xA;d.getDrives(function (err, aDrives) {&#xA;  for (var i = 0; i &lt; aDrives.length; i++) {&#xA;    if (aDrives[i].available == 0) {&#xA;      cddisk = aDrives[i].mounted;&#xA;      console.log(cddisk);&#xA;    }&#xA;  }&#xA;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>also this package not supported in mac.</p>&#xA;",4353545,"",,"",,2018-09-02T11:38:52,"","",,2,,,
52173796,2,,52156883,2018-09-04T20:48:18,,6,,"<p>That error message indicates that gRPC was installed for Node, not for Electron. Electron has a different binary interface, so binary modules like gRPC need to be installed specifically for Electron. You can generally do this just by running <code>npm rebuild --runtime=electron --target=2.0.0</code> (modified to match the version of Electron you want to use).</p>&#xA;",159388,"",,"",,2018-09-04T20:48:18,"","",,2,,,
52189050,2,,52186956,2018-09-05T15:44:49,,0,,"<p>I've run into this error before and installing with <code>sudo npm install -g electron --unsafe-perm=true --allow-root</code> worked every time.</p>&#xA;&#xA;<p>I got the command from this comment: <a href=""https://github.com/electron/electron/issues/10604#issuecomment-333368230"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/10604#issuecomment-333368230</a></p>&#xA;",6577664,"",6577664,"",2018-09-06T05:57:44,2018-09-06T05:57:44,"","",,2,,,
52197589,2,,52196977,2018-09-06T06:14:56,,1,,"<p>In your <code>win.webContents.executeJavaScript</code> you could set the variable inside the execute javascript function like this:</p>&#xA;&#xA;<pre><code>win.webContents.executeJavaScript(""var creatorId = "" + currentWindow.webContents.id + "";"");&#xA;</code></pre>&#xA;&#xA;<p>That would mean you can delete the: <code>win.creatorId = currentWindow.id;</code>. And change the:</p>&#xA;&#xA;<pre><code>BrowserWindow.fromId(currentWindow.creatorId).webContents.send('coolMessage', {});&#xA;</code></pre>&#xA;&#xA;<p>To:</p>&#xA;&#xA;<pre><code>BrowserWindow.fromId(creatorId).webContents.send('coolMessage', {});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/web-contents#contentsid"" rel=""nofollow noreferrer""><code>webContents.id</code> Docs</a>    </p>&#xA;",6577664,"",6577664,"",2018-09-06T06:54:41,2018-09-06T06:54:41,"","",,2,,,
52233280,2,,52232111,2018-09-08T08:00:31,,0,,"<p>It depends.&#xA;If you only have small amounts of data to write into files, you can do it in the renderer.js.&#xA;If you have large amounts of data and don't want your UI to get blocked, you should move your fs operations to a different process. </p>&#xA;&#xA;<p>Electron is tricky here, even doing it in the main.js will still block the UI: <a href=""https://medium.com/actualbudget/the-horror-of-blocking-electrons-main-process-351bf11a763c"" rel=""nofollow noreferrer"">Horror of Electron Main Process</a>&#xA;Best practice here is to create a second BrowserWindow, make it invisible and do the heavy operations there, in your case fs.writeFile(). This will be a different process and won't block the UI.</p>&#xA;",7856535,"",,"",,2018-09-08T08:00:31,"","",,2,,,
52096982,2,,52096892,2018-08-30T12:22:40,,3,,"<p>Yes, you can use <code>win.setIcon('/path/to/icon.png');</code> to change the window icon.</p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/browser-window#winseticonicon-windows-linux"" rel=""nofollow noreferrer""><code>setIcon</code> Docs</a></p>&#xA;",6577664,"",,"",,2018-08-30T12:22:40,"","",,3,,,
52170036,2,,52169092,2018-09-04T15:51:53,,0,,"<p>You can use <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#event-close"" rel=""nofollow noreferrer""><code>'close'</code></a> event, which is called <em>before</em> <code>onbeforeunload</code> and doesn't collide with reloading</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow } = require('electron')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  let main = new BrowserWindow({title: 'main'})&#xA;  let settings = new BrowserWindow({title: 'settings'})&#xA;&#xA;  main.on('close', (event) =&gt; {&#xA;    if (settings) {&#xA;      event.preventDefault()&#xA;      event.returnValue = false&#xA;      settings.focus()&#xA;    } else {&#xA;      event.returnValue = true&#xA;    }&#xA;  })&#xA;  settings.on('closed', () =&gt; {&#xA;    settings = null&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2018-09-04T15:59:25,2018-09-04T15:59:25,"","",,3,,,
52202606,2,,52194506,2018-09-06T11:00:54,,0,,"<p>You can get a reference to the file using process.argv, example:</p>&#xA;&#xA;<pre><code>var ipc = require('ipc');&#xA;var fs = require('fs');&#xA;&#xA;// read the file and send data to the render process&#xA;ipc.on('get-file-data', function(event) {&#xA;    var data = null;&#xA;    if (process.platform == 'win32' &amp;&amp; process.argv.length &gt;= 2) {&#xA;        var openFilePath = process.argv[1];&#xA;        data = fs.readFileSync(openFilePath, 'utf-8');&#xA;    }&#xA;    event.returnValue = data;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>source: <a href=""https://blog.theodo.fr/2015/12/link-files-to-application-in-windows/"" rel=""nofollow noreferrer"">Source</a></p>&#xA;",7856535,"",,"",,2018-09-06T11:00:54,"","",,4,,,
52231598,2,,52231565,2018-09-08T02:57:27,,0,,"<p>Can you use the WebGLRenderer instead of the CanvasRenderer?&#xA;Canvas renderer is more like a webGL emulator rather than a renderer.&#xA;If I switch to WebGL renderer, the lines go away.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var world, mass, body, shape, timeStep = 1 / 60,&#xD;&#xA;  camera, scene, renderer, geometry, material, mesh,controls;&#xD;&#xA;initThree();&#xD;&#xA;initCannon();&#xD;&#xA;animate();&#xD;&#xA;&#xD;&#xA;function initCannon() {&#xD;&#xA;  world = new CANNON.World();&#xD;&#xA;  world.gravity.set(0, 0, 0);&#xD;&#xA;  world.broadphase = new CANNON.NaiveBroadphase();&#xD;&#xA;  world.solver.iterations = 10;&#xD;&#xA;  shape = new CANNON.Box(new CANNON.Vec3(1, 1, 1));&#xD;&#xA;  mass = 1;&#xD;&#xA;  body = new CANNON.Body({&#xD;&#xA;    mass: 1&#xD;&#xA;  });&#xD;&#xA;  body.addShape(shape);&#xD;&#xA;  body.angularVelocity.set(0, 100, 0);&#xD;&#xA;  body.angularDamping = 0.5;&#xD;&#xA;  world.addBody(body);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function initThree() {&#xD;&#xA;  renderer = new THREE.WebGLRenderer({&#xD;&#xA;    alpha: true&#xD;&#xA;  });&#xD;&#xA;  scene = new THREE.Scene();&#xD;&#xA;  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 100);&#xD;&#xA;  camera.position.z = 10;&#xD;&#xA;  camera.position.y = 1;&#xD;&#xA;&#xD;&#xA;  scene.add(camera);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  var light = dirLight = new THREE.DirectionalLight(0xFFFFFF);&#xD;&#xA;  scene.add(light);&#xD;&#xA;&#xD;&#xA;  //Shadowmapping&#xD;&#xA;  renderer.shadowMap.enabled = true;&#xD;&#xA;  renderer.shadowMap.type = THREE.PCFSoftShadowMap;&#xD;&#xA;  //renderer.shadowMap.bias = 0.1;&#xD;&#xA;  light.position.set(5, 5, 5);&#xD;&#xA;  light.userData.targetOffset = light.position.clone();&#xD;&#xA;  light.castShadow = true;&#xD;&#xA;  light.shadow.mapSize.width = 512;&#xD;&#xA;  light.shadow.mapSize.height = 512;&#xD;&#xA;  light.shadow.camera.near = 0.1;&#xD;&#xA;  light.shadow.camera.far = 100.0&#xD;&#xA;  var shadowAreaLength = 10&#xD;&#xA;  light.shadow.camera.left = light.shadow.camera.bottom = -shadowAreaLength;&#xD;&#xA;  light.shadow.camera.right = light.shadow.camera.top = shadowAreaLength;&#xD;&#xA;&#xD;&#xA;    controls = new THREE.OrbitControls(camera,renderer.domElement);&#xD;&#xA;    controls.enableDamping = true;&#xD;&#xA;    controls.dampingFactor = 0.5;&#xD;&#xA;    controls.autoRotate = true;&#xD;&#xA;    controls.maxPolarAngle *= 0.5;&#xD;&#xA;    controls.panSpeed *= 0.5;&#xD;&#xA;    controls.rotateSpeed *= 0.25;&#xD;&#xA;   // camera.position.set(0, 0.5, 1.7);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  geometry = new THREE.BoxGeometry(2, 2, 2);&#xD;&#xA;  material = new THREE.MeshPhongMaterial({&#xD;&#xA;    shininess: 0,&#xD;&#xA;    color: 0x808080&#xD;&#xA;&#xD;&#xA;  });&#xD;&#xA;  mesh = new THREE.Mesh(geometry, material);&#xD;&#xA;  mesh.castShadow = true;&#xD;&#xA;  geometry2 = new THREE.BoxGeometry(1, 1, 1);&#xD;&#xA;  material2 = new THREE.MeshPhongMaterial({&#xD;&#xA;    shininess: 0,&#xD;&#xA;    color: 0xff0000&#xD;&#xA;  });&#xD;&#xA;  mesh2 = new THREE.Mesh(geometry2, material2);&#xD;&#xA;  mesh2.position.y = 2;&#xD;&#xA;  scene.add(mesh);&#xD;&#xA;  scene.add(mesh2);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  var gplane =&#xD;&#xA;    new THREE.Mesh(new THREE.PlaneGeometry(100, 100, 10, 10), material);&#xD;&#xA;  scene.add(gplane);&#xD;&#xA;&#xD;&#xA;  gplane.recieveShadow = true;&#xD;&#xA;&#xD;&#xA;  gplane.rotation.x += Math.PI * -0.5;&#xD;&#xA;  gplane.position.y -= 2&#xD;&#xA;&#xD;&#xA;camera.lookAt(gplane.position);&#xD;&#xA;  renderer.setSize(window.innerWidth, window.innerHeight);&#xD;&#xA;  document.body.appendChild(renderer.domElement);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function animate() {&#xD;&#xA;  requestAnimationFrame(animate);&#xD;&#xA;        controls.update();&#xD;&#xA;  updatePhysics();&#xD;&#xA;  render();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function updatePhysics() {&#xD;&#xA;  // Step the physics world&#xD;&#xA;  world.step(timeStep);&#xD;&#xA;  // Copy coordinates from Cannon.js to Three.js&#xD;&#xA;  mesh.position.copy(body.position);&#xD;&#xA;  mesh.quaternion.copy(body.quaternion);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function render() {&#xD;&#xA;  renderer.render(scene, camera);&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/cannon.js/0.6.2/cannon.min.js""&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=""https://threejs.org/build/three.min.js""&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=""https://cdn.rawgit.com/mrdoob/three.js/master/examples/js/renderers/CanvasRenderer.js""&gt;&lt;/script&gt;&#xD;&#xA;&lt;script src=""https://cdn.rawgit.com/mrdoob/three.js/master/examples/js/controls/OrbitControls.js""&gt;&lt;/script&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",882264,"",882264,"",2018-09-08T03:16:16,2018-09-08T03:16:16,"","",,6,,,
52126768,2,,52126682,2018-09-01T09:26:18,,1,,"<p>I recently tried to do this as well and it was kinda tricky but I found something that worked:</p>&#xA;&#xA;<p>In electron when it tries to go to another page I stop it from going to it with:</p>&#xA;&#xA;<pre><code>win.webContents.on('will-navigate', function (evt, url) {&#xA;    evt.preventDefault();&#xA;    win.webContents.executeJavaScript('makeHiddenPageIframe(""' + url + '"");');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then it calls the <code>makeHiddenPageIframe</code> function defined on the page.</p>&#xA;&#xA;<p>Then in the page I define the <code>makeHiddenPageIframe</code> function:</p>&#xA;&#xA;<pre><code>function makeHiddenPageIframe (url) {&#xA;    var hiddenPage = document.createElement(""iframe"");&#xA;    hiddenPage.setAttribute(""src"", url);&#xA;    hiddenPage.style.display = 'none';&#xA;    document.body.appendChild(hiddenPage);&#xA;    hiddenPage.onload = function () {&#xA;        var frameDocument = hiddenPage.document;&#xA;        if (hiddenPage.contentDocument) {&#xA;            frameDocument = hiddenPage.contentDocument;&#xA;        } else if (hiddenPage.contentWindow) {&#xA;            frameDocument = hiddenPage.contentWindow.document;&#xA;        }&#xA;        document.open();&#xA;        document.write(frameDocument.documentElement.innerHTML);&#xA;        document.close();&#xA;        window.history.pushState("""", document.title, url.replace('https://' + window.location.hostname, ''));&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This then makes a iframe and loads the page in there then once it has loaded copy all the html from the iframe to the parent window so it seems like the switch happened instantly.</p>&#xA;&#xA;<p>Also the <code>window.history.pushState</code> thing at the bottom was when you overwrite the html the url stays the same so when you reload it goes back to the original page but the <code>window.history.pushState</code> changes the url without reloading the page.</p>&#xA;&#xA;<p>Any form of navigation will do the iframe load so you would keep your <code>win.loadURL(</code> to go to another markdown page.</p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/web-contents#event-will-navigate"" rel=""nofollow noreferrer"">The <code>'will-navigate'</code> event docs.</a></p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/a/3354511/6577664""><code>window.history.pushState</code> ref.</a></p>&#xA;&#xA;<p>I hope this helps :)</p>&#xA;",6577664,"",6577664,"",2018-09-01T09:32:56,2018-09-01T09:32:56,"","",,9,,,
36095759,2,,36035910,2016-03-18T23:10:08,,0,,"<p>You are running into a material-ui bug:</p>&#xA;&#xA;<p><a href=""https://github.com/callemall/material-ui/issues/2189"" rel=""nofollow"">https://github.com/callemall/material-ui/issues/2189</a></p>&#xA;&#xA;<p>The workaround is to add onChange handlers to your text inputs:</p>&#xA;&#xA;<pre><code>            &lt;TextField&#xA;                hintText=""username""&#xA;                floatingLabelText=""please enter username""&#xA;                type=""text""&#xA;                onChange={(e)=&gt;{e.stopPropagation();}}&#xA;            /&gt;&#xA;            &lt;TextField&#xA;                hintText=""password""&#xA;                floatingLabelText=""please enter password""&#xA;                type=""text""&#xA;                onChange={(e)=&gt;{e.stopPropagation();}}&#xA;</code></pre>&#xA;",1369363,"",,"",,2016-03-18T23:10:08,"","",,0,,,
36319004,2,,36231588,2016-03-30T20:24:15,,0,,<p>I worked around the solution by running ExpressJS from the main process to handle communication from the code running in the renderer process via XHR.  So now the renderer process never needs to access the electron module directly.</p>&#xA;,3284530,"",,"",,2016-03-30T20:24:15,"","",,0,,,
36100356,2,,33355170,2016-03-19T10:07:10,,1,,"<p>I have found out why it didn't work.</p>&#xA;&#xA;<p>Nightmare has a native dependency which is installed on the user's home folder.&#xA;When i moved the project, i copied only the node_modules folder, and nightmare couldn't find the reconfigured binary path.</p>&#xA;&#xA;<p>In order to solve this, i reinstalled nightmare using npm: <code>npm install nightmare</code>, or even better, i created a <code>package.json</code> file and stated my dependecies on it, and when i moved over the project (without node_modules), i reinstalled the dependencies using <code>npm install</code>.</p>&#xA;",4330003,"",4330003,"",2018-03-09T13:02:43,2018-03-09T13:02:43,"","",,0,,,
36110796,2,,36093215,2016-03-20T06:16:46,,1,,"<p><code>wcjs-player</code> is heavily reliant on being able to access <code>window.document</code>. <code>NW.js</code> v0.12.3 has a bug that leaks the parent's <code>window</code> object to the child window.</p>&#xA;&#xA;<p>I've seen this create numerous issues including pushing all errors and logs to the main window, and it always breaks all modules that are dependent on <code>window</code>.</p>&#xA;&#xA;<p>The fix for this is to do a node.js level reload of the child window after creating it.</p>&#xA;&#xA;<p><a href=""http://webchimera.org/samples/nw.js-0.12.3-new-window-poc.zip"" rel=""nofollow"">Proof of Concept</a></p>&#xA;&#xA;<p><a href=""https://github.com/jaruba/wcjs-player/issues/44"" rel=""nofollow"">Discussion</a></p>&#xA;&#xA;<p><strong>Example Usage:</strong></p>&#xA;&#xA;<pre><code>var new_win = require('nw.gui').Window.open('index.html');&#xA;new_win.on('document-start', function() {&#xA;    new_win.reload(3);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>Notes:</strong></p>&#xA;&#xA;<ul>&#xA;<li><p>It should also be mentioned that this is a <code>NW.js</code> specific issue, <code>Electron</code> does not have this issue with new windows.</p></li>&#xA;<li><p>As this is a high level page reload, the <code>global</code> object will also be cleared, an alternative solution to passing information to this new window is using <code>localStorage</code> (that is persistent), or for more complex needs websockets.</p></li>&#xA;</ul>&#xA;",2769366,"",2769366,"",2016-03-24T20:59:02,2016-03-24T20:59:02,"","",,1,,,
36125846,2,,36113254,2016-03-21T08:09:19,,1,,"<p>To communicate between the renderer process and the main process, you need to use the <code>Remote</code> API (<a href=""https://github.com/atom/electron/blob/master/docs/api/remote.md"" rel=""nofollow"">https://github.com/atom/electron/blob/master/docs/api/remote.md</a>).</p>&#xA;&#xA;<p>Something like this should work:</p>&#xA;&#xA;<pre><code>const remote = require('electron').remote;&#xA;const BrowserWindow = remote.BrowserWindow;&#xA;&#xA;this.authWindow = new BrowserWindow({ width: 800, height: 600, show: false});&#xA;</code></pre>&#xA;",555760,"",,"",,2016-03-21T08:09:19,"","",,1,,,
36152967,2,,36137339,2016-03-22T11:16:53,,1,,"<p>What you seem to be trying to do here is define <code>electron</code> as a global variable; for that to work you can set <code>window.electron = require('electron')</code> in your index.html in the first example. (It will be available in you bundle.js)</p>&#xA;&#xA;<p>However, using globals for this bad practice and not necessary. What you should do, is just use <code>require</code> in your code. You say this doesn't work: the reason why it doesn't is probably that you're using webpack or something similar to create <code>bundle.js</code>. Furthermore, you probably run the bundling process in Node and not in Electron, therefore <code>require('electron')</code> does not work as expected. Note that it works in your <code>index.html</code> which is not part of the bundle.</p>&#xA;&#xA;<p>If you want to continue to use this setup, you could rename Electron's require to distinguish between the <code>require</code> resolved during bundling and the <code>require</code> resolved at runtime. In other words, <code>window.electronRequire = require</code> in the script tag of <code>index.html</code> and then use <code>electronRequire('electron')</code> in your code.</p>&#xA;&#xA;<p>Having said that, why bundle everything in the first place? Electron has full Node integration so you can use regular Node modules; the files are not sent via HTTP either so there is little to gain from bundling everything into one file.</p>&#xA;",2493332,"",,"",,2016-03-22T11:16:53,"","",,1,,,
36182673,2,,36091760,2016-03-23T15:45:07,,1,,"<p>If you're trying to get data from the page, why not use <code>.evaluate()</code>?  Something like:</p>&#xA;&#xA;<pre><code>nightmare.goto('http://example.com')&#xA;    .evaluate(function(){&#xA;        var element = document.querySelector('some-element.query');&#xA;        return element.value;&#xA;    })&#xA;    .then(function(value){&#xA;        console.log(value);&#xA;    });&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>To your original example, you cannot send arbitrary events until plugins are allowed on Nightmare down to the Electron instance it wraps.  There was a discussion of adding arbitrary events to Nightmare's core in Nightmare <a href=""https://github.com/segmentio/nightmare/issues/354"" rel=""nofollow"">#354</a>, which  I tried to fix in Nightmare <a href=""https://github.com/segmentio/nightmare/pull/367"" rel=""nofollow"">#367</a>.  It was  determined that adding arbitrary events should be a plugin under <a href=""https://github.com/segmentio/nightmare/pull/425"" rel=""nofollow"">#425</a>.  The plugin PR has not been accepted, but the plugin for the plugin fork <a href=""https://github.com/rosshinkley/nightmare-custom-event"" rel=""nofollow"">is already completed</a>.</p>&#xA;",1139700,"",,"",,2016-03-23T15:45:07,"","",,0,,,
36216248,2,,36201481,2016-03-25T08:06:19,,1,,"<p>Try this, It might works</p>&#xA;&#xA;<pre><code>require(""nw.gui"").App.clearCache();&#xA;</code></pre>&#xA;",3428816,"",,"",,2016-03-25T08:06:19,"","",,0,,,
36258485,2,,36236595,2016-03-28T08:14:55,,1,,<p>Html5 cache size is 5mb. For media data is better to use simple disk data storage.</p>&#xA;,2771556,"",,"",,2016-03-28T08:14:55,"","",,1,,,
36280480,2,,36155502,2016-03-29T09:34:18,,1,,"<p>You can do it just like you would do it on the web..&#xA;you can use ajax and call a local file, AngularJS would be an easy solution to implement.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<p><strong>project structure:</strong></p>&#xA;&#xA;<blockquote>&#xA;  <ul>&#xA;  <li>package.json</li>&#xA;  <li>index.html</li>&#xA;  <li>page1.html</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p><strong>index.html</strong></p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;html ng-app&gt;&#xA;&lt;head&gt;&#xA;    &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.3/angular.min.js""&gt;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body ng-init=""page = 'page1.html'""&gt; &lt;!-- Default page --&gt;&#xA;    &lt;div id=""nav-header""&gt;&#xA;    &lt;nav&gt;&#xA;        &lt;a ng-click=""page = 'page1.html'""&gt;Link 1&lt;/a&gt;&#xA;        &lt;a ng-click=""page = 'page2.html'""&gt;Link 2&lt;/a&gt;&#xA;        &lt;a ng-click=""page = 'page3.html'""&gt;Link 3&lt;/a&gt;&#xA;    &lt;/nav&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div id=""content"" ng-include=""page""&gt;&lt;/div&gt;&#xA;    &lt;div id=""footer""&gt;&lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>page1.html</strong></p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;div&gt;Hello World&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>Of course if you're gonna go with angular I suggest you use a router like the <a href=""https://github.com/angular-ui/ui-router"" rel=""nofollow"">Angular UI Router</a>&#xA;But as you can see you can do this with just about any other technology you know that works on the web, NW.js is still chrome under the hood.</p>&#xA;",1952477,"",1952477,"",2016-03-29T09:51:31,2016-03-29T09:51:31,"","",,0,,,
36283977,2,,36048806,2016-03-29T12:14:08,,1,,"<p>Basically you want to calculate the difference between the window's inner height (i.e <code>window.innerHeight</code>) and the overall height of the window (i.e <code>win.height</code>) and then add to it the desired height.</p>&#xA;&#xA;<p>it'll look something like this:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>var gui = require('nw.gui');&#xA;var win = gui.Window.get();&#xA;// (Full window height - Document real height) + desired height&#xA;win.height = (win.height - window.innerHeight) + 480;&#xA;</code></pre>&#xA;",1952477,"",,"",,2016-03-29T12:14:08,"","",,1,,,
36284083,2,,36093026,2016-03-29T12:18:55,,1,,"<p>You can create different profiles on chrome and set them up to start up with the list of tabs you need for each profile.</p>&#xA;&#xA;<p>each profile is virtually a sandbox with it's own storage cookies sessions etc, so you can have different user logins for each profile.</p>&#xA;&#xA;<p>It'll look something like this:&#xA;Create a desktop shortcut that will point to chrome, stating the profile and the list of websites you want to open by default (separated with spaces):</p>&#xA;&#xA;<pre><code>""C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"" --profile-directory=""Default"" https://google.com https://gmail.com&#xA;&#xA;""C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"" --profile-directory=""Profile 1"" https://github.com https://twitter.com&#xA;</code></pre>&#xA;&#xA;<p>You can find your chrome profile directories in:</p>&#xA;&#xA;<pre><code>%localappdata%\Google\Chrome\User Data&#xA;</code></pre>&#xA;",1952477,"",1952477,"",2016-03-29T12:26:14,2016-03-29T12:26:14,"","",,2,,,
36318576,2,,36309068,2016-03-30T19:59:43,,1,,"<p>You can definitely combine Laravel as back-end technology with SAPUI5/OpenUI5 as front-end technology. As Laravel provides the front-end with restful services, you're probably best-off leveraging the <code>JSONModel</code> in your UI5 application.</p>&#xA;&#xA;<p>Laravel is a PHP framework, so you'll need to look for a PHP host. If a host is capable of running PHP, it is also able to serve the static UI5 content.</p>&#xA;&#xA;<p>If you want to package your app as a desktop application, NW.js will work, but Electron will do the job too. A very nice comparison between the two frameworks can be found here: <a href=""http://tangiblejs.com/posts/nw-js-electron-compared"" rel=""nofollow"">http://tangiblejs.com/posts/nw-js-electron-compared</a>. </p>&#xA;&#xA;<p>Please do note that both frameworks turn your application into a desktop application and will run on the desktop. You won't need to find a server that runs node.js. You do need a server that runs PHP for your back-end Laravel logic.</p>&#xA;",2493603,"",,"",,2016-03-30T19:59:43,"","",,0,,,
36095632,2,,36095560,2016-03-18T22:59:15,,2,,"<p>This option was ""deprecated"" in 0.13:</p>&#xA;&#xA;<blockquote>&#xA;  <p>toolbar is deprecated and it’s always false. The traditional &#xA;  toolbar will NOT be supported including the reload buttons, location&#xA;  bar and DevTools buttons. As a workaround, you can open / close&#xA;  DevTools with F12 (Windows &amp; Linux) or ⌘+⌥+i (Mac). And use&#xA;  win.reload() and win.reloadDev() to simulate the reload buttons.</p>&#xA;</blockquote>&#xA;&#xA;<p>See: <a href=""http://docs.nwjs.io/en/v0.13.0-rc2/For%20Users/Migration/From%200.12%20to%200.13/"" rel=""nofollow"">http://docs.nwjs.io/en/v0.13.0-rc2/For%20Users/Migration/From%200.12%20to%200.13/</a></p>&#xA;&#xA;<p>Although the language used is 'deprecated' the option is apparently unsupported entirely.  See: <a href=""https://github.com/nwjs/nw.js/issues/4274"" rel=""nofollow"">https://github.com/nwjs/nw.js/issues/4274</a></p>&#xA;",692065,"",,"",,2016-03-18T22:59:15,"","",,1,,,
36117956,2,,36116638,2016-03-20T18:44:50,,2,,"<p>Upon further investigation into electron-packager I found a more detailed explanation about the resource editing <a href=""https://github.com/electron-userland/electron-packager/blob/master/usage.txt"" rel=""nofollow"">here</a>.</p>&#xA;&#xA;<p>using the electron-packager command line I pass these arguments to update the embedded electron exe information:</p>&#xA;&#xA;<pre><code>electron-packager ... --version-string.CompanyName=""Company Inc."" --version-string.ProductName=""Product"" ...&#xA;</code></pre>&#xA;&#xA;<p>The grunt-electron-installer will look for this embedded application information to generate the name for the shortcut.</p>&#xA;",2313300,"",,"",,2016-03-20T18:44:50,"","",,0,,,
36210994,2,,36210513,2016-03-24T22:21:06,,2,,"<p>According to node-webkit's wiki, you can <a href=""https://github.com/nwjs/nw.js/wiki/file-dialogs#how-to-open-a-file-dialog"" rel=""nofollow"">open a dialog programmatically</a> by simulating a click on a <a href=""https://github.com/nwjs/nw.js/wiki/file-dialogs#save-file"" rel=""nofollow"">specially configured html input field</a>.</p>&#xA;&#xA;<p>So for example you would insert</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;input type=""file"" id=""fileDialog"" nwsaveas /&gt;&#xA;&lt;!-- or specify a default filename: --&gt;&#xA;&lt;input type=""file"" id=""fileDialog"" nwsaveas=""myfile.txt"" /&gt;&#xA;</code></pre>&#xA;&#xA;<p>and use something like this to optionally programmatically trigger the dialog and get the entered path:</p>&#xA;&#xA;<pre class=""lang-javascript prettyprint-override""><code>function chooseFile(name) {&#xA;  var chooser = document.querySelector(name);&#xA;  chooser.addEventListener(""change"", function(evt) {&#xA;    console.log(this.value);&#xA;  }, false);&#xA;&#xA;  chooser.click();  &#xA;}&#xA;chooseFile('#fileDialog');&#xA;</code></pre>&#xA;",2050455,"",,"",,2016-03-24T22:21:06,"","",,0,,,
36226399,2,,36068678,2016-03-25T19:13:00,,2,,"<p><code>clipboard.availableFormats()</code> actually returns the assumed mime-type of the clipboard contents.  So, to test for plain text, it's simply <code>plain/text</code>, for images, something along the lines of <code>image/png</code> or <code>image/jpeg</code> is expected.</p>&#xA;",271271,"",,"",,2016-03-25T19:13:00,"","",,0,,,
36262324,2,,36189476,2016-03-28T12:29:05,,2,,"<p>Fixed this problem by initialising electron's <code>BrowserWindow</code> with <code>nodeIntegration: false</code></p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({width: 1024, height: 764, title: ""app"", webPreferences: {""nodeIntegration"":false}});&#xA;</code></pre>&#xA;",2828229,"",2828229,"",2016-11-13T13:02:35,2016-11-13T13:02:35,"","",,0,,,
36267696,2,,34478938,2016-03-28T17:42:20,,2,,"<p>Khanetor.</p>&#xA;&#xA;<p>What you need is to set webPreferences.webSecurity to false, please see snippet below:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;    width: 800,&#xA;    height: 600,&#xA;    frame: true,&#xA;    webPreferences: {&#xA;        webSecurity: false,&#xA;        plugins: true&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>I am doing Facebook auth within Electron myself now, after overcoming cookies issue there is another problem to deal - to login, facebook opens new window and once you logged in it sends postMessage to other windows and closes. But postMessages do not work the same in the Electron as it does in normal browser..</p>&#xA;",1092239,"",,"",,2016-03-28T17:42:20,"","",,2,,,
36280333,2,,36165000,2016-03-29T09:27:49,,2,,"<p>It's possible, but not as easy as you may think.&#xA;If you want to overlay games the problem is that the game engine ""takes control"" over the graphics card and renders ONLY the game.&#xA;that means that your application in the background is not rendered at all.</p>&#xA;&#xA;<p>that means you need to ""inject"" yourself into that process.&#xA;you do this by talking to the OpenGL or DirectX directly</p>&#xA;&#xA;<p>you can find more information on it&#xA;<a href=""https://stackoverflow.com/questions/925981/overlaying-on-a-3d-fullscreen-application"">Here</a>, <a href=""https://stackoverflow.com/questions/3266346/how-to-overlay-graphics-on-windows-games"">Here</a>, <a href=""http://overlay-api.net/"" rel=""nofollow noreferrer"">And Here</a></p>&#xA;",1952477,"",-1,"",2017-05-23T11:45:08,2016-03-29T09:27:49,"","",,1,,,
36125080,2,,36123964,2016-03-21T07:16:36,,3,,"<p><code>electron-prebuilt</code> that it's used on the <code>electron-quick-start</code> example has it's own app name (Electron).  </p>&#xA;&#xA;<p>To change this you need to rebuild/package your app and it will use the ""name"" or ""productName"" from your package.json. </p>&#xA;&#xA;<p>Also there is method to set/get the app name but you have to package your app to see that change on the main menu:</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const app = electron.app;&#xA;&#xA;app.setName('APPNAME');&#xA;</code></pre>&#xA;",555760,"",,"",,2016-03-21T07:16:36,"","",,2,,,
36211315,2,,36211148,2016-03-24T22:51:14,,3,,"<p>For sending files like this, it's better to stream them instead of buffer it all into memory and then sending it. (Also, you don't need the <code>'binary'</code> encoding argument since <code>fs.readFile()</code> gives you a Buffer by default)</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>var client = new net.Socket();&#xA;client.connect(user_port, user_ip, function() {&#xA;  fs.createReadStream(path).pipe(client);&#xA;});&#xA;&#xA;// ...&#xA;&#xA;net.createServer(function(socket){&#xA;  socket.pipe(fs.createWriteStream(utils.getUserDir() + '/my_file.doc'));&#xA;  socket.on('error', function(err){&#xA;    console.log(err.message);&#xA;  });&#xA;}).listen(utils.getPort(), utils.getExternalIp());&#xA;</code></pre>&#xA;",2050455,"",,"",,2016-03-24T22:51:14,"","",,0,,,
36249556,2,,36173584,2016-03-27T16:09:26,,3,,"<p>You need to run clipboard.js through rollup first. Rollup parses the import statements. You have to modify tasks/build/build.js to do that.</p>&#xA;&#xA;<pre><code>var bundleApplication = function () {&#xA;    return Q.all([&#xA;            bundle(srcDir.path('background.js'), destDir.path('background.js')),&#xA;            bundle(srcDir.path('clipboard.js'), destDir.path('clipboard.js')), // Add this line&#xA;            bundle(srcDir.path('app.js'), destDir.path('app.js')),&#xA;        ]);&#xA;};&#xA;</code></pre>&#xA;",,user6101582,,user6101582,2016-03-27T16:45:56,2016-03-27T16:45:56,"","",,4,,,
36115152,2,,36114717,2016-03-20T14:46:24,,5,,"<p>The only way to secure your API key for an application that does not require users to register or log in, is to place it behind a server proxy. So, when they start the app, the app reaches out to your server, the server then returns the API key so it only resides in the app in dynamic form, it is never visible to users. </p>&#xA;&#xA;<p>However, this is still insecure if they use a packet sniffer or local proxy they can grab your token. </p>&#xA;&#xA;<p>The most secure way to do this is to make all your API requests from a private server that your app has access to. So, the app makes no requests to Youtube, it only gets the data from your server.</p>&#xA;&#xA;<p>Then, you can secure your app by signing API requests to your private server with a private key. For example, you could have a config file in the app with a private key that is sent in the header of every API request. Then, they only way to get your key would be to decompile your app, and then access that config file, then make API requests to your private server using the same private information. Then, to prevent malicious users, you can monitor traffic and set up request limits, like 1 request per second per app. Any app exceeding that limit could be black-listed as a DDOS attack or a malicious user.   </p>&#xA;&#xA;<p>The data flow would look something like this.</p>&#xA;&#xA;<pre><code>    App -&gt; Server (with Api Key) -&gt; youtube (data) -&gt; Server (data) -&gt; App&#xA;</code></pre>&#xA;",216679,"",,"",,2016-03-20T14:46:24,"","",,0,,,
36280908,2,,36132278,2016-03-29T09:53:06,,5,,"<ol>&#xA;<li><p>Take a look at the NW.js Wiki under <a href=""https://github.com/nwjs/nw.js/wiki/How-to-run-node-webkit%27s-test-cases"" rel=""noreferrer"">How to run node webkit's test cases</a></p></li>&#xA;<li><p>You will need to <a href=""https://github.com/nwjs/nw.js/wiki/chromedriver"" rel=""noreferrer"">setup the chrome driver</a> in order to use selenium for example</p></li>&#xA;<li><p>Once you have those, check out Yaniv kessler's blog post on how to <a href=""http://blog.yanivkessler.com/2015/03/21/automate-nwjs-ui-testing/"" rel=""noreferrer"">Automate NW.js UI</a> testing using mocha. </p></li>&#xA;</ol>&#xA;",1952477,"",1952477,"",2016-03-29T09:58:07,2016-03-29T09:58:07,"","",,1,,,
36125380,2,,36123823,2016-03-21T07:37:09,,6,,"<p>I suppose you are using <code>electron-prebuild</code> and because it's a prebuild app (located on your <code>/node_modules/electron-prebuild/dist/Electron.app</code>) has it's own name (Electron).</p>&#xA;&#xA;<p>To change the app name you have to rebuild/package your app and it will use the ""name"" or ""productName"" from your <code>package.json</code>. </p>&#xA;&#xA;<p>To package your app you can use <code>electron-packager</code> here: <a href=""https://github.com/electron-userland/electron-packager"" rel=""noreferrer"">https://github.com/electron-userland/electron-packager</a></p>&#xA;",555760,"",,"",,2016-03-21T07:37:09,"","",,0,,,
36243066,2,,36238366,2016-03-27T01:59:35,,6,,"<p>Electron supports a webkit property intended for frameless windows, that I believe should work for you. The documentation is <a href=""https://github.com/atom/electron/blob/master/docs/api/frameless-window.md#draggable-region"" rel=""noreferrer"">here</a>. Basically just make a class and add it to any elements you want draggable:</p>&#xA;&#xA;<pre><code>.draggable {&#xA;    -webkit-app-region: drag;&#xA;}&#xA;</code></pre>&#xA;",418710,"",,"",,2016-03-27T01:59:35,"","",,1,,,
36227831,2,,36222161,2016-03-25T20:51:17,,7,,"<p>There is an NPM module made for Atom editor (the app Electron was made for) called Keytar. It uses the native OS APIs for secure storage. eg. The keychain on OS X.</p>&#xA;&#xA;<p><a href=""https://github.com/atom/node-keytar"" rel=""noreferrer"">https://github.com/atom/node-keytar</a></p>&#xA;",418710,"",,"",,2016-03-25T20:51:17,"","",,1,,,
36308759,2,,36306450,2016-03-30T12:22:29,,9,,"<p>based on <a href=""https://electronjs.org/docs/tutorial/support"" rel=""nofollow noreferrer"">Electron supported platforms</a> and <a href=""https://support.google.com/chrome/answer/95346?hl=en"" rel=""nofollow noreferrer"">Chrome minimum requirements</a></p>&#xA;&#xA;<h2>OS requirements</h2>&#xA;&#xA;<p><strong>Windows</strong></p>&#xA;&#xA;<ul>&#xA;<li>Windows 7 and later are supported, older operating systems are not supported (and do not work).</li>&#xA;<li>Both x86 and amd64 (x64) binaries are provided for Windows. Please note, the ARM version of Windows is not supported for now.</li>&#xA;</ul>&#xA;&#xA;<p><strong>Mac</strong></p>&#xA;&#xA;<ul>&#xA;<li>Only 64bit binaries are provided for macOS, and the minimum macOS version supported is macOS 10.10 (Yosemite).</li>&#xA;</ul>&#xA;&#xA;<p><strong>Linux</strong></p>&#xA;&#xA;<ul>&#xA;<li>The prebuilt ia32(i686) and x64(amd64) binaries of Electron are built on Ubuntu 12.04, the arm binary is built against ARM v7 with hard-float ABI and NEON for Debian Wheezy.</li>&#xA;</ul>&#xA;&#xA;<p>Whether the prebuilt binary can run on a distribution depends on whether the distribution includes the libraries that Electron is linked to on the building platform, so only Ubuntu 12.04 is guaranteed to work, but following platforms are also verified to be able to run the prebuilt binaries of Electron:</p>&#xA;&#xA;<ul>&#xA;<li>Ubuntu 12.04 and later </li>&#xA;<li>Fedora 21 </li>&#xA;<li>Debian 8</li>&#xA;</ul>&#xA;&#xA;<hr>&#xA;&#xA;<h2>Hardware</h2>&#xA;&#xA;<p>About RAM and CPU, there are no information about that in Electron's docs, but Electron is based on Chromium, so it should need nearly the same requirements:</p>&#xA;&#xA;<p><strong>Windows</strong></p>&#xA;&#xA;<ul>&#xA;<li>An Intel Pentium 4 processor or later that's&#xA;SSE2 capable </li>&#xA;<li>512 MB of RAM</li>&#xA;</ul>&#xA;&#xA;<p><strong>Mac</strong></p>&#xA;&#xA;<ul>&#xA;<li>An Intel processor that's 64-bit</li>&#xA;<li>512 MB of RAM</li>&#xA;</ul>&#xA;&#xA;<p><strong>Linux</strong></p>&#xA;&#xA;<ul>&#xA;<li>An Intel Pentium 4 processor or later that's SSE2 capable </li>&#xA;</ul>&#xA;",3766528,"",3619440,"",2019-07-25T08:18:19,2019-07-25T08:18:19,"","",,2,,,
36174237,2,,36152857,2016-03-23T09:27:05,,38,,"<p>As @phuongle pointed out in the comments you want to use <code>showOpenDialog()</code>. Something like this:</p>&#xA;&#xA;<pre><code>var remote = require('remote');&#xA;var dialog = remote.require('electron').dialog;&#xA;&#xA;var path = dialog.showOpenDialog({&#xA;    properties: ['openDirectory']&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>UPDATE: the above isn't working for the current version, you must use ES6 imports..  </p>&#xA;&#xA;<pre><code>const {dialog} = require('electron').remote;&#xA;</code></pre>&#xA;",418710,"",418710,"",2017-09-07T00:58:35,2017-09-07T00:58:35,"","",,1,,,
44700373,2,,44699019,2017-06-22T13:09:45,,3,,"<p><a href=""https://github.com/electron/electron/blob/master/docs/api/window-open.md"" rel=""nofollow noreferrer"">The documentation for <code>window.open</code></a> states that, by default, it uses a different implementation of window.open, where it returns a BrowserWindowProxy instance. You can change it to use the native chrome one by passing <code>nativeWindowOpen: true</code> as an option when creating the parent BrowserWindow.</p>&#xA;",2016129,"",6786876,"",2017-06-22T13:22:42,2017-06-22T13:22:42,"","",,0,,,
44709255,2,,44249472,2017-06-22T20:56:09,,0,,"<p>Problem is that HTMLElements or Nodes are valid in the context of the page. Anything that needs to be passed from evaluate() to then(), is internally sent using nightmare.ipc module. This means that returned value is converted to string (JSON.stringify) and then created back.</p>&#xA;&#xA;<p>If you check Developer console logs then you would see conversion errors.</p>&#xA;&#xA;<p>You can evaluate length in the evaluate function itself and pass it.</p>&#xA;&#xA;<pre><code>nightmare&#xA;  .goto(url)&#xA;  .evaluate(function(selector) {&#xA;    var links = document.querySelectorAll(selector)&#xA;    return links.length;&#xA;  }, selector)&#xA;  .then(function(result) {&#xA;    console.log(result); // Outputs length.&#xA;  })&#xA;  .catch(function(error) {&#xA;    console.error('Failed', error);&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p>In case you need to pass elements in different evaluate() steps then you can have workaround for it, but that is different story</p>&#xA;",1510610,"",,"",,2017-06-22T20:56:09,"","",,0,,,
44710970,2,,44710687,2017-06-22T23:46:24,,0,,"<p>Already found the error, it was in my package JSON.&#xA;Instead of:</p>&#xA;&#xA;<pre><code>   --icon=favicon.ico&#xA;</code></pre>&#xA;&#xA;<p>It sould be:</p>&#xA;&#xA;<pre><code>    --icon=./favicon.ico&#xA;</code></pre>&#xA;&#xA;<p>Needs the ./ in the start to identify</p>&#xA;",8202360,"",,"",,2017-06-22T23:46:24,"","",,0,,,
44728196,2,,44726698,2017-06-23T18:52:39,,1,,"<p>Javascript is asynchronous. The jsPDF lines simply are executed before <code>$.getJSON()</code> finishes. At that point <code>source</code> is just an empty string. Thus <code>source.ReferenceId</code> is undefined.</p>&#xA;&#xA;<pre><code>$.getJSON(location, function(json){&#xA;    source = json;&#xA;    var doc = new jsPDF();&#xA;    doc.text(source.ReferenceId, 10, 10);&#xA;    doc.save('file.pdf');&#xA;});&#xA;</code></pre>&#xA;",2016129,"",,"",,2017-06-23T18:52:39,"","",,0,,,
44732074,2,,44731801,2017-06-24T02:09:01,,3,,"<p>Ok, that was really stupid. I had named the main js file for the project main.js when in actual fact it had to be named index.js&#xA;problem solved!</p>&#xA;",6274146,"",,"",,2017-06-24T02:09:01,"","",,0,,,
44744483,2,,44741658,2017-06-25T08:09:00,,0,,"<p>I assume you want to simulate mouse click on your <code>class=""send""</code> button. To simulate input events use the <code>webContents</code>and <code>sendInputEvent(event)</code> function.</p>&#xA;&#xA;<p>For mouse clicks simulation, use following example:</p>&#xA;&#xA;<pre><code>contents.sendInputEvent({type:'mouseDown', x:300, y: 250, button:'left', clickCount: 1});&#xA;contents.sendInputEvent({type:'mouseUp', x:300, y: 250, button:'left', clickCount: 1});&#xA;</code></pre>&#xA;&#xA;<p>Read more about it <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md"" rel=""nofollow noreferrer"">here</a>, you have other input types as well.</p>&#xA;",908624,"",,"",,2017-06-25T08:09:00,"","",,0,,,
44755593,2,,44750322,2017-06-26T08:22:08,,1,,"<p>To open a new window you need to get the main process to change show to <code>true</code> for the window you've created.</p>&#xA;&#xA;<p>In your renderer process (the main window) use <a href=""https://electron.atom.io/docs/api/ipc-renderer/"" rel=""nofollow noreferrer"">ipcRenderer</a> to send a message to the main process.</p>&#xA;&#xA;<p>In the Main process use <a href=""https://electron.atom.io/docs/api/ipc-main/"" rel=""nofollow noreferrer"">ipcMain</a> to listen for the event and in the attached handler update your second window to show <code>true</code>.</p>&#xA;&#xA;<p><strong>Renderer</strong></p>&#xA;&#xA;<pre><code>buttonClicked(e){&#xA;  e.preventDefault()&#xA;&#xA;  ipcRenderer.send('open-calc')&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Main</strong></p>&#xA;&#xA;<pre><code>ipcMain.on('open-calc', function(){&#xA;    calcWindow.show() // Assuming that your calculator window is the variable calcWindow&#xA;})&#xA;</code></pre>&#xA;",222018,"",,"",,2017-06-26T08:22:08,"","",,0,,,
44794505,2,,44732567,2017-06-28T05:47:45,,0,,"<p>First of all, there are many different ways of packaging/building electron apps (all of these are cross-platform as well):</p>&#xA;&#xA;<ul>&#xA;<li>Electron Packager- pretty basic and mostly from the command line</li>&#xA;<li>Electron Builder- a little more advanced but very customizable</li>&#xA;<li>Electron Forge- gives you a nice template to get started with packaging already implemented. I think that's your best bet</li>&#xA;</ul>&#xA;&#xA;<p>I would recommend looking at all of those and finding one that best fits your project.</p>&#xA;&#xA;<p>I would also recommend looking at other people's projects and looking at what they do. <a href=""https://github.com/sindresorhus/awesome-electron"" rel=""nofollow noreferrer"">Awesome Electron</a> Is a great resource for finding projects.</p>&#xA;&#xA;<p>But for your questions:</p>&#xA;&#xA;<ol>&#xA;<li>Putting a <code>package.json</code> in the src gives electron-builder metadata and dependency info, and what you have in your createInstaller.js is giving electron-winstaller metadata</li>&#xA;<li>This might be a problem with the version number. Try Updating the version number</li>&#xA;<li>Looking at this <a href=""https://www.christianengvall.se/electron-packager-tutorial/"" rel=""nofollow noreferrer"">blog post</a> might help with the icon problem</li>&#xA;</ol>&#xA;",4910911,"",4910911,"",2017-06-28T07:04:50,2017-06-28T07:04:50,"","",,0,,,
44798147,2,,44793906,2017-06-28T09:05:07,,1,,"<p><strong>No</strong> there is nothing wrong with it, and no I don't use it either. It is just that you can archive the same with webpack, which has more users brings no drawbacks and is probably more frequently maintained. It all depends on your own preferences which you want to use.</p>&#xA;",5115009,"",5115009,"",2017-06-28T09:12:29,2017-06-28T09:12:29,"","",,0,,,
44799243,2,,44777745,2017-06-28T09:55:04,,0,,"<p>This is a bug present in Electron v1.6.2.<br>&#xA;It is fixed in Electron v1.6.5, released at the end of March 2017.&#xA;I've now updated to the latest stable release, v1.6.11, and the issue is fixed.</p>&#xA;",8218738,"",,"",,2017-06-28T09:55:04,"","",,0,,,
44810780,2,,44731329,2017-06-28T19:14:12,,1,,"<p>as suggested by  <a href=""https://stackoverflow.com/users/1254208/greghnz"">GregHNZ</a> var dbPath = ""//192.168.5.15/sqlite/db.sqlite"" worked, so just used double slash.</p>&#xA;&#xA;<p>Thanks <a href=""https://stackoverflow.com/users/1254208/greghnz"">GregHNZ</a></p>&#xA;",7042627,"",,"",,2017-06-28T19:14:12,"","",,0,,,
44814753,2,,44814700,2017-06-29T00:59:32,,2,,"<p>As per the source code it looks like you should use <code>con.config.port</code>.</p>&#xA;&#xA;<p>References:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/index.js#L13"" rel=""nofollow noreferrer"">https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/index.js#L13</a></li>&#xA;<li><a href=""https://github.com/mysqljs/mysql/blob/master/lib/ConnectionConfig.js#L13"" rel=""nofollow noreferrer"">https://github.com/mysqljs/mysql/blob/master/lib/ConnectionConfig.js#L13</a></li>&#xA;</ul>&#xA;",251311,"",,"",,2017-06-29T00:59:32,"","",,0,,,
44853193,2,,44828843,2017-06-30T18:57:22,,3,,"<p>Assuming that you have the ""Open with"" portion working, Windows will pass the filename as a command line argument. So just get the file name/path from <code>process.argv</code></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>if(process.argv.length &gt;= 2) {&#xA;    let filePath = process.argv[1];&#xA;    //open, read, handle file&#xA;}&#xA;</code></pre>&#xA;",1974829,"",,"",,2017-06-30T18:57:22,"","",,0,,,
44861448,2,,44822621,2017-07-01T13:23:33,,1,,"<p>Ok so here's what I've done:</p>&#xA;&#xA;<pre><code>const settings = require('electron-settings');&#xA;&#xA;settings.set('neverAskMeAgain', {&#xA;    state: false&#xA;});&#xA;&#xA;        if (!settings.get('neverAskMeAgain.state')) {&#xA;            electron.dialog.showMessageBox({&#xA;                type: 'info',&#xA;                buttons: ['Yes', 'No'],&#xA;                message: 'Are you sure?',&#xA;                checkboxLabel: 'Never ask me again',&#xA;                checkboxChecked: false&#xA;            }, (resp, checkboxChecked) =&gt; {&#xA;                if (resp === 0) {&#xA;                    foo.bar();&#xA;                    settings.set('neverAskMeAgain.state', checkboxChecked);&#xA;                }&#xA;            });&#xA;        } else if (settings.get('neverAskMeAgain.state')) {&#xA;            foo.bar();&#xA;        }&#xA;    } else {&#xA;        foo.bar();&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>It works like a charm within an instance of the app when running <code>npm install &amp;&amp; npm start</code> but when I quit it and relaunch it, the dialog box is displayed again...</p>&#xA;",4949074,"",,"",,2017-07-01T13:23:33,"","",,0,,,
44862183,2,,44737143,2017-07-01T14:43:28,,0,,"<p>Alright, I found the problem. The code above works if you take out <code>new_instance: true</code>. If that variable is marked as <code>true</code>, then <code>this</code> is <code>undefined</code> initially and the code doesn't work.</p>&#xA;",99971,"",,"",,2017-07-01T14:43:28,"","",,0,,,
44864609,2,,44703814,2017-07-01T19:24:42,,0,,"<p>Unfortunately, there wasn't a very straightforward way to make this work. However, we managed to get a slightly hacky system setup that seems to do the job:</p>&#xA;&#xA;<ol>&#xA;<li>Convert all assets to base64 data URI's and save in a JSON file with the asset URL as the key.</li>&#xA;<li>From inside the iframe/webview, request those assets from the app using <code>postMessage</code> or <code>ipc</code>.</li>&#xA;<li>Receive that request and send the JSON object back to the webview/iframe.</li>&#xA;<li>When loading the assets, check if the URL is in the object and use the base64 data URI; otherwise, load as normal.</li>&#xA;</ol>&#xA;",115182,"",,"",,2017-07-01T19:24:42,"","",,0,,,
44915097,2,,44903265,2017-07-04T23:21:20,,1,,"<p>Credit goes to <a href=""https://stackoverflow.com/users/2016129/royalbingbong"">Royalbingbong</a> for his helpful comment and reference to pass-by-value.</p>&#xA;&#xA;<p>This was very helpful <a href=""https://stackoverflow.com/questions/13104494/does-javascript-pass-by-reference"">link</a> where the topic is explained in detail.</p>&#xA;&#xA;<p>Here is the updated (working) code sample.</p>&#xA;&#xA;<p><code>selectedNode</code> was declared as a string (primitive type), so it couldn't pass the updated value to the module. <code>selectedNode</code> was changed to an object and the variable value is stored with the <code>output</code> key. The <code>selected value</code> is passed to the <code>printValue</code> function, where we print the value of the <code>output</code> key.</p>&#xA;&#xA;<pre><code>// app.js&#xA;&#xA;// require the module&#xA;const printValue = require('./printValue.js')&#xA;&#xA;// global variable that I want to access&#xA;let selectedNode = {}&#xA;&#xA;// called when a user clicks on node on the graph&#xA;cytoscape.on('tap', 'node', selection =&gt; {&#xA;  // stores the node's data&#xA;  selectedNode.output = selection.target[0] // this is the important bit&#xA;})&#xA;&#xA;if (configuration === '1') {&#xA;  // now works&#xA;  printValue(selectedNode) // prints the updated variable&#xA;} else if (configuration === '2') {&#xA;  // loads different buttons with different functions&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The module was changed to</p>&#xA;&#xA;<pre><code>// module.js&#xA;&#xA;module.exports = function printValue (selectedNode) {&#xA;  const button = document.getElementById('button-id')&#xA;  button.addEventListener('click', () =&gt; {&#xA;   console.log(selectedNode.output) // the other important bit&#xA;  })&#xA;}&#xA;</code></pre>&#xA;",5252553,"",,"",,2017-07-04T23:21:20,"","",,0,,,
44695617,2,,44672942,2017-06-22T09:36:28,,8,,"<p>I got it working. I made a function which transforms the response into a readable stream.</p>&#xA;&#xA;<pre><code>const responseToReadable = response =&gt; {&#xA;    const reader = response.body.getReader();&#xA;    const rs = new Readable();&#xA;    rs._read = async () =&gt; {&#xA;        const result = await reader.read();&#xA;        if(!result.done){&#xA;            rs.push(Buffer.from(result.value));&#xA;        }else{&#xA;            rs.push(null);&#xA;            return;&#xA;        }&#xA;    };&#xA;    return rs;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>So with it, I can do</p>&#xA;&#xA;<pre><code>fetch('https://imageurl.jpg')&#xA;    .then(response =&gt; responseToReadable(response).pipe(fs.createWriteStream('image.jpg')));&#xA;</code></pre>&#xA;",4262228,"",,"",,2017-06-22T09:36:28,"","",,1,,,
44696368,2,,44605473,2017-06-22T10:09:41,,1,,"<p>You can refer to the issue (Problem running nightmare in loops)[<a href=""https://github.com/segmentio/nightmare/issues/522]"" rel=""nofollow noreferrer"">https://github.com/segmentio/nightmare/issues/522]</a></p>&#xA;&#xA;<p>I modified your code with given guidelines. It seem to work fine</p>&#xA;&#xA;<pre><code>const NIGHTMARE = require(""nightmare"");&#xA;const BETHESDA = NIGHTMARE({&#xA;  show: true&#xA;});&#xA;&#xA;BETHESDA&#xA;  // Open the bethesda web page. Web page will contain 20 mods to start.&#xA;  .goto(""https://bethesda.net/en/mods/skyrim?number_results=40&amp;order=desc&amp;page=1&amp;platform=XB1&amp;product=skyrim&amp;sort=published&amp;text="")&#xA;&#xA;  // Bethesda website serves all requested mods at once. Each mod has the class ""tile"". Wait for any tile class to appear, then proceed.&#xA;  .wait("".tile"");&#xA;&#xA;next();&#xA;&#xA;function next() {&#xA;  BETHESDA.wait('div[data-is=""main-mods-pager""] &gt; button')&#xA;    .click('div[data-is=""main-mods-pager""] &gt; button')&#xA;    .then(function() {&#xA;      console.log(""click done"");&#xA;      next();&#xA;    })&#xA;    .catch(function(err) {&#xA;      console.log(err);&#xA;      console.log(""All done."");&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Ultimately, it should timeout on wait() for button and then you can handle the error in catch() block. Beware it goes on and on :) I did not wait till the end (you might run out of memory).</p>&#xA;",1510610,"",,"",,2017-06-22T10:09:41,"","",,1,,,
44710226,2,,44512019,2017-06-22T22:22:38,,2,,"<p><a href=""https://github.com/electron/electron/issues/8848"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/8848</a> reports exactly the issue of a null GL_VERSION and blames Electron version 1.6.1.  The workaround was to roll back to version 1.4.15.</p>&#xA;",6818284,"",,"",,2017-06-22T22:22:38,"","",,1,,,
44786177,2,,44773029,2017-06-27T17:12:51,,5,,"<p>You can initiate a <code>file system open dialog</code> from a <code>Renderer Process</code> (a browser window).</p>&#xA;&#xA;<p>On your <code>Main Process</code>, you are listening to the <code>Renderer Process</code>, in case of <code>open-file-dialog</code> command is sent from the <code>Renderer Process</code>, the <code>Main Process</code> will display an <em>Open File Dialog</em> per the Operating System (As demonstrated below, an <code>['openFile']</code> property is being sent, and you can also use <code>['openDirectory']</code> for <em>Open Directory</em> dialog, or both of them) and will send back the selected file\path to the <code>Renderer Process</code>.</p>&#xA;&#xA;<p><strong>Renderer process</strong></p>&#xA;&#xA;<pre><code>//Adding an event listener to an html button which will send open-file-dialog to the main process&#xA;const ipc = require('electron').ipcRenderer&#xA;const selectDirBtn = document.getElementById('select-file')&#xA;&#xA;selectDirBtn.addEventListener('click', function (event) {&#xA;     ipc.send('open-file-dialog')&#xA;});&#xA;&#xA;//Getting back the information after selecting the file&#xA;ipc.on('selected-file', function (event, path) {&#xA;&#xA;//do what you want with the path/file selected, for example:&#xA;document.getElementById('selected-file').innerHTML = `You selected: ${path}`&#xA;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>Main Process</strong></p>&#xA;&#xA;<pre><code>//listen to an open-file-dialog command and sending back selected information&#xA;const ipc = require('electron').ipcMain&#xA;const dialog = require('electron').dialog&#xA;ipc.on('open-file-dialog', function (event) {&#xA;  dialog.showOpenDialog({&#xA;    properties: ['openFile']&#xA;  }, function (files) {&#xA;    if (files) event.sender.send('selected-file', files)&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",908624,"",,"",,2017-06-27T17:12:51,"","",,1,,,
44787440,2,,44786340,2017-06-27T18:30:07,,0,,"<p>I took a look at that repo, and in this case, if you just copy the image file into the dist directory and use </p>&#xA;&#xA;<pre><code>background: url('/benjamin-child-17946.jpg') no-repeat center center fixed;&#xA;</code></pre>&#xA;&#xA;<p>it should work. Presumably there is a webpack setup that will copy files from the <code>static</code> directory in the app to <code>dist</code> for you.</p>&#xA;",38065,"",,"",,2017-06-27T18:30:07,"","",,1,,,
44800813,2,,44797324,2017-06-28T11:10:55,,2,,"<p>There seems to be no way of doing it if you really want to hide these shortcuts from the menu.</p>&#xA;&#xA;<p>At the moment, the best workaround is to display the shortcuts menu on MacOS only:</p>&#xA;&#xA;<pre><code>const { Menu } = require('electron')&#xA;&#xA;const menuTemplate = [...];&#xA;&#xA;if (process.platform === 'darwin') {&#xA;  menuTemplate.push({&#xA;    label: 'Edit',&#xA;    submenu: [&#xA;      {role: 'undo'},&#xA;      {role: 'redo'},&#xA;      {type: 'separator'},&#xA;      {role: 'cut'},&#xA;      {role: 'copy'},&#xA;      {role: 'paste'},&#xA;      {role: 'pasteandmatchstyle'},&#xA;      {role: 'delete'},&#xA;      {role: 'selectall'}&#xA;    ]&#xA;  })&#xA;}&#xA;&#xA;const applicationMenu = Menu.buildFromTemplate(menuTemplate)&#xA;Menu.setApplicationMenu(applicationMenu)&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://blog.avocode.com/blog/4-must-know-tips-for-building-cross-platform-electron-apps"" rel=""nofollow noreferrer"">https://blog.avocode.com/blog/4-must-know-tips-for-building-cross-platform-electron-apps</a></p>&#xA;",3215167,"",,"",,2017-06-28T11:10:55,"","",,1,,,
44813765,2,,44807652,2017-06-28T22:52:36,,1,,"<p>It seems that Windows passes the file path as an argument to the application (your Electron app in this case). So you can use <code>process.argv</code> to get the file path.</p>&#xA;&#xA;<pre><code>var filePath = process.argv[1];&#xA;var data = fs.readFileSync(openFilePath, 'utf-8');&#xA;</code></pre>&#xA;&#xA;<p>Obviously you may want to add checks such as <code>process.argv.length &gt;= 2</code> to ensure the argument was passed (in case the application was opened manually, not invoked by windows). But this is generally how you could get the file contents.</p>&#xA;",1974829,"",,"",,2017-06-28T22:52:36,"","",,1,,,
44815585,2,,44815420,2017-06-29T02:49:26,,1,,"<p>You need to add <code>jquery</code> as a dependency to your <code>app/package.json</code>.</p>&#xA;&#xA;<p>Change directory to <code>app</code> and run </p>&#xA;&#xA;<pre><code>npm i jquery --save&#xA;</code></pre>&#xA;&#xA;<p>or if you are using yarn </p>&#xA;&#xA;<pre><code>yarn add jquery&#xA;</code></pre>&#xA;&#xA;<p>It should look something like this afterwards.</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""vueelectron"",&#xA;  ""version"": ""0.0.0"",&#xA;  ""description"": ""An electron-vue project"",&#xA;  ""main"": ""./dist/main.js"",&#xA;  ""dependencies"": {&#xA;    ""babel-runtime"": ""^6.23.0"",&#xA;    ""bootstrap"": ""^3.3.7"",&#xA;    ""jquery"": ""^3.2.1"",&#xA;    ""vue"": ""^2.1.10"",&#xA;    ""vue-electron"": ""^1.0.6"",&#xA;    ""vue-resource"": ""^1.0.3"",&#xA;    ""vue-router"": ""^2.1.2"",&#xA;    ""vuex"": ""^2.3.1""&#xA;  },&#xA;  ""devDependencies"": {},&#xA;  ""author"": """"&#xA;}&#xA;</code></pre>&#xA;",38065,"",,"",,2017-06-29T02:49:26,"","",,1,,,
44838469,2,,42022712,2017-06-30T04:11:28,,1,,"<p>Well, perhaps you cannot directly load whole html. As a workaround, you can open a new browser window with just contents as:</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;   &lt;head&gt;&lt;/head&gt;&#xA;   &lt;body&gt;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>After you open this you can use browserWindow.webContents.evaluate() to load actual HTML passed as String. If required you can use webContents.reload() for changes to take effect.</p>&#xA;",1510610,"",,"",,2017-06-30T04:11:28,"","",,1,,,
44845251,2,,44842265,2017-06-30T11:19:50,,1,,"<p>In the <code>makeSingleInstance</code> function it has a parameter <code>commandLine</code> that contains an array of the second instance’s command line arguments &#xA;which will include the protocol url.</p>&#xA;&#xA;<p>So you would write something like this:</p>&#xA;&#xA;<pre><code>var isSecondInstance = exports.app.makeSingleInstance(function (commandLine, workingDirectory) {&#xA;    if (mainWindow) {&#xA;        if (mainWindow.isMinimized()) mainWindow.restore();&#xA;        mainWindow.focus();&#xA;        var protocolLink = commandLine[1];&#xA;        // Run function to go to link.&#xA;    }&#xA;});&#xA;&#xA;if (isSecondInstance) {&#xA;    app.quit();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Where the <code>protocolLink</code> variable is the link that the user originally clicked on.</p>&#xA;",6577664,"",6577664,"",2017-06-30T12:19:25,2017-06-30T12:19:25,"","",,1,,,
44733043,2,,44732946,2017-06-24T05:20:23,,8,,"<p>This syntax is called 'object destructuring', and it is a feature of the latest version of JavaScript (JavaScript2015 aka ECMAScript 6/ES6) - <code>app</code> and <code>BrowserWindow</code> are just particular parts of <code>electron</code> that you want to use in this portion of your application.</p>&#xA;&#xA;<p>It's a way to simplify your code and to easily reference critical parts of a dependency.</p>&#xA;&#xA;<p>Here's a very basic example from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></p>&#xA;&#xA;<pre><code>var o = {p: 42, q: true};&#xA;var {p, q} = o;&#xA;&#xA;console.log(p); // 42&#xA;console.log(q); // true&#xA;</code></pre>&#xA;&#xA;<p>So in your case, <code>electron</code> is an imported module that would look something like (again, a gross oversimplification here):</p>&#xA;&#xA;<pre><code>var electron = {&#xA;    app: {&#xA;        greet: () =&gt; {&#xA;            console.log(""Hello, world!"")&#xA;        }&#xA;    },&#xA;    BrowserWindow: {/* some other stuff */},&#xA;    anotherMethod: {/* other stuff, which we will ignore in your app */}&#xA;}&#xA;&#xA;module.exports electron&#xA;</code></pre>&#xA;&#xA;<p>Then in your app, you import this module and you can reference the imported attributes directly:</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron')&#xA;&#xA;app.greet()&#xA;// ""Hello, world!""&#xA;</code></pre>&#xA;&#xA;<p>And similarly, you can reference <code>BrowserWindow</code>... however, you couldn't reference <code>anotherMethod</code> without including it in the destructuring assignment.</p>&#xA;&#xA;<p>Hope that's helpful.</p>&#xA;",5203069,"",5203069,"",2019-07-12T16:11:53,2019-07-12T16:11:53,"","",,2,,,
44790250,2,,44790249,2017-06-27T21:30:15,,3,,"<p>Ok I've found this solution:</p>&#xA;&#xA;<p>On macOS you can find this Folder &#xA;<code>&#xA;~/Library/Application Support/com.apple.sharedfilelist/&#xA;</code> &#xA;It contents some *.sfl files. You can edit them with this tool <code>/usr/bin/sfltool</code>. (It's installed on your mac <em>>= 10.11 El Capitan</em> automatically)</p>&#xA;&#xA;<p>Example to add a folder to your favorites: </p>&#xA;&#xA;<p><code>/usr/bin/sfltool add-item com.apple.LSSharedFileList.FavoriteItems file:///YOURPATH</code></p>&#xA;&#xA;<p>I can run this command via <code>require('child_process').exec</code> in my electron app and add a folder icon with the <code>fileicon</code> module. (<a href=""https://www.npmjs.com/package/fileicon"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/fileicon</a>)</p>&#xA;&#xA;<p>This is a little bit dirty, but I don't know an other solution.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>[UPDATE]</strong>: Read first comment</p>&#xA;",6429774,"",6429774,"",2018-07-25T22:27:26,2018-07-25T22:27:26,"","",,2,,,
44813697,2,,44813223,2017-06-28T22:44:56,,4,,"<p>As far as stability goes, Electron is very stable. In my experience I've had no stability issues or unanticipated behavior while developing some complex software on Electron.</p>&#xA;&#xA;<p>However a bigger concern for some is security. Allow me to explain.</p>&#xA;&#xA;<h2>How Electron Packages Applications</h2>&#xA;&#xA;<p>Electron packages applications by bundling all of their javascript components into an <a href=""https://github.com/electron/asar"" rel=""nofollow noreferrer"">asar</a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Asar is a simple extensive archive format, it works like tar that concatenates all files together without compression, while having random access support.</p>&#xA;</blockquote>&#xA;&#xA;<h2>Why This is a Security Concern</h2>&#xA;&#xA;<p>What this means is that all of your applications code is just put into an archive. This archive can be explored and extracted using the asar command quite trivially.</p>&#xA;&#xA;<pre><code>npm install asar&#xA;asar extract my-app.asar&#xA;</code></pre>&#xA;&#xA;<p>While this may not be an issue for open source projects or applications like Slack which rely on a backend paid service, license based or paid products could be easily stolen as there is no code security / obscurity that a traditional compiled application might offer. For some, this may be acceptable, for others it may not. Especially if business logic occurs in the application.</p>&#xA;&#xA;<h2>Can This Issue be Mitigated?</h2>&#xA;&#xA;<p>One potential solution to this issue would be the ability to encrypt the ASAR. This issue has been brought up to the Electron devs, but they have stated that <a href=""https://github.com/electron/electron/issues/4359"" rel=""nofollow noreferrer"">while they are open to a pull request they will likely not be implementing it themselves</a>.</p>&#xA;&#xA;<p>Another possible technique to mitigate this issue is code obfuscation using something such as <a href=""https://github.com/mishoo/UglifyJS2"" rel=""nofollow noreferrer"">UglifyJS</a>. However this is obviously not true protection, just a hiding technique.</p>&#xA;&#xA;<p>A third solution, one used by NW.js is to <a href=""https://github.com/nwjs/nw.js/wiki/protect-javascript-source-code-with-v8-snapshot"" rel=""nofollow noreferrer"">compile your JS to a V8 snapshot</a>. However the Electron devs have indicated that this has significant (50%) performance costs and they will likely not support such capability.</p>&#xA;&#xA;<p>All of this being said, it is possible to decompile / reverse engineer almost any application in any language. Electron just makes it a little easier to do so by ""putting your code out there."" However they have strong reasoning for doing so (performance gains) and unless you have a paid license product it probably doesn't make much difference to you anyways.</p>&#xA;&#xA;<p><strong>Further reading:</strong></p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://github.com/electron/electron/issues/3041"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/3041</a></li>&#xA;<li><a href=""https://github.com/electron/electron/issues/2570"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/2570</a></li>&#xA;</ul>&#xA;",1974829,"",1974829,"",2017-06-28T22:57:36,2017-06-28T22:57:36,"","",,2,,,
44851730,2,,44851690,2017-06-30T17:09:16,,1,,"<p>The directly appended html wouldn't work until you compile it. You should manually compile it before injecting it into DOM tree. </p>&#xA;&#xA;<pre><code>document.getElementById(""list"")&#xA;.appendChild($compile(`&#xA;  &lt;li draggable=""true"" ondragstart=""itemDrag(event)"" &#xA;     id=${theID} ng-dblclick=""openItem(this.id)""&gt;&#xA;        &lt;i class=""fa fa-folder-open""&gt;&lt;/i&gt; ${result}&#xA;  &lt;/li&gt;&#xA;&lt;hr&gt;`)($scope);&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Generally doing DOM manipulation from directly controller is anti-pattern as it makes your controller code to more tightly coupled with view/html.</p>&#xA;&#xA;<p>Rather I'd suggest you to use <code>ng-inlcude</code> directive and place custom template in <code>ng-template</code> script. So that it will available any time inside <code>$templateCache</code> of angular.</p>&#xA;&#xA;<pre><code>&lt;script id=""myCustom.html"" type=""text/ng-template""&gt;&#xA;  &lt;li draggable=""true"" ondragstart=""itemDrag(event)"" &#xA;     id=""{{theId}}"" ng-dblclick=""openItem(id)""&gt;&#xA;        &lt;i class=""fa fa-folder-open""&gt;&lt;/i&gt;&#xA;        &lt;div ng-include=""ENDPOINT""&gt;&lt;/div&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>and then your html will look like below.</p>&#xA;&#xA;<p><strong>Html</strong></p>&#xA;&#xA;<pre><code>&lt;div id=""list""&gt;&#xA;&#xA;   ... Your content .. &#xA;&#xA;&lt;/div&gt;&#xA;&lt;div ng-include=""'myCustom.html'""&gt;&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>If you noted, I directly used <code>ENDPOINT</code> directly inside <code>ng-include</code> for the same to work, you have to do some additional setting</p>&#xA;&#xA;<pre><code>angular.module('myApp').config(function($sceDelegateProvider) {&#xA;  $sceDelegateProvider.resourceUrlWhitelist([&#xA;    // Allow loading from outer templates domain.&#xA;    'http://somedomain.com/templates/**' //ENDPOINT domain should white listed here&#xA;  ]); &#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Also <code>ondragstart</code> wouldn't call your controllers method, until you patch it up with angular wrapper directive. There are third-party library available out there, you could use any one of them.</p>&#xA;",2435473,"",2435473,"",2017-06-30T17:26:45,2017-06-30T17:26:45,"","",,2,,,
44891307,2,,44887061,2017-07-03T17:37:55,,1,,"<p>I think you installed the newest version of <code>electron-packager</code> that now doesn't have an option for <code>version-string</code>, they changed it to <code>win32metadata</code>.</p>&#xA;&#xA;<p>From what I've seen <code>win32metadata</code> option is exactly like <code>version-string</code> except it's name is different.</p>&#xA;&#xA;<p>Your package script would become this:</p>&#xA;&#xA;<pre><code>""package"": ""electron-packager . MyApp --platform=win32 --arch=ia32 --overwrite --asar=true --force --icon=myApp.ico --win32metadata.ProductName=myApp --win32metadata.CompanyName=\""My Tech Solutions\"""",&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#win32metadata"" rel=""nofollow noreferrer""><code>win32metadata</code></a> in documentation</p>&#xA;",6577664,"",6577664,"",2017-07-03T18:29:21,2017-07-03T18:29:21,"","",,2,,,
44695399,2,,44694836,2017-06-22T09:26:14,,0,,"<p>If you use Electron framework you have access to more than just the basic html, js.</p>&#xA;&#xA;<p>Create a bat file with the command needed to shutdown</p>&#xA;&#xA;<pre><code>c:\windows\system32\shutdown -s -f -t 00 :: shutdown&#xA;:: c:\windows\system32\shutdown -r -t 00 :: restart&#xA;:: c:\windows\system32\shutdown /h :: hibernate&#xA;</code></pre>&#xA;&#xA;<p>And in the electron side:</p>&#xA;&#xA;<pre><code>var child = require('child_process').execFile;&#xA;var executablePath = ""path_to_bat_file"";&#xA;&#xA;child(executablePath, function(err, data) {&#xA;    if(err){&#xA;       console.error(err);&#xA;       return;&#xA;    }&#xA;&#xA;    console.log(data.toString());&#xA;});&#xA;</code></pre>&#xA;",7575536,"",7575536,"",2017-06-22T09:36:34,2017-06-22T09:36:34,"","",,3,,,
44813433,2,,44813162,2017-06-28T22:18:55,,1,,"<p>Your <code>start</code> script is wrong -- you're trying to use <code>electron-prebuilt</code> which is outdated, but you probably forgot to uninstall it from your computer so it still works. It's currently in your <code>devDependencies</code> but it's been deprecated and hasn't been supported since 2016. Remove it with:</p>&#xA;&#xA;<pre><code>npm uninstall --save-dev electron-prebuilt&#xA;</code></pre>&#xA;&#xA;<p><code>electron-prebuilt</code> does not come with <code>crashReporter</code> thus it is undefined when you try to import it. </p>&#xA;&#xA;<p>You should be using the latest <code>electron</code> you've installed which comes with <code>crashReporter</code>. To do this, change the script to (if you've installed it locally):</p>&#xA;&#xA;<pre><code>""start"": ""./node_modules/.bin/electron .""&#xA;</code></pre>&#xA;&#xA;<p>This will use <code>electron</code> instead of <code>electron-prebuilt</code> and it should work fine.</p>&#xA;",5647260,"",5647260,"",2017-06-28T22:22:09,2017-06-28T22:22:09,"","",,3,,,
44833465,2,,44725484,2017-06-29T19:28:00,,1,,"<p>It is called auto complete menu and there is no standard way of doing it.&#xA;I tried working with Google and came up with a method. I think, it will be tough to make generic solution, as it depends on how auto complete is implemented. Hope this helps!</p>&#xA;&#xA;<pre><code>var Nightmare = require('nightmare');&#xA;&#xA;var nightmare = Nightmare({&#xA;  show: true,&#xA;  webPreferences: {}&#xA;})&#xA;&#xA;nightmare&#xA;  .goto('http://www.google.co.in')&#xA;  .evaluate(function(searchTerm) {&#xA;    var elem = document.querySelector('#lst-ib');&#xA;    elem.value = searchTerm;&#xA;&#xA;    //Do mousedown to initiate auto complete window&#xA;    var event = document.createEvent('MouseEvent');&#xA;    event.initEvent('mousedown', true, true);&#xA;    elem.dispatchEvent(event);&#xA;  }, 'Leo')&#xA;  .then(function() {&#xA;    //Wait for results to appear&#xA;    nightmare.wait(1000)&#xA;    .evaluate(function() {&#xA;      //Click the first option of List&#xA;      var first = document.querySelector('#sbtc &gt; div.gstl_0.sbdd_a &gt; div:nth-child(2) &gt; div.sbdd_b &gt; div &gt; ul &gt; li:nth-child(1)');&#xA;      first.firstElementChild.click();&#xA;    }).then(function() {&#xA;      console.log('All Done');&#xA;    });&#xA;  });&#xA;</code></pre>&#xA;",1510610,"",1510610,"",2017-06-30T03:46:36,2017-06-30T03:46:36,"","",,3,,,
44749045,2,,44748900,2017-06-25T17:55:19,,1,,"<p>This error is occurring because of another process using the port. It is likely just a previous instance of this process, however it is possible that another application is using the port.</p>&#xA;&#xA;<p>You will be unable to stop this using Node, as it is a process remaining from another run and processes do not have the permissions to 'manage' one another.</p>&#xA;&#xA;<p>On Windows use task manager to kill the node process, on Mac you can use Activity Monitor, and on Unix/Linux you can use htop or similar.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Alternatively on Unix/Linux (incl. MacOS) you can use</p>&#xA;&#xA;<pre><code>sudo lsof -i :35729&#xA;</code></pre>&#xA;&#xA;<p>to find the process id of the process ID using that port, then kill it:</p>&#xA;&#xA;<pre><code>kill -9 {PID}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>To ensure your node server cleanly shuts down in future add event handlers:</p>&#xA;&#xA;<pre><code>process.on('SIGTERM', ..)&#xA;&#xA;process.on('uncaughtException', ..)&#xA;</code></pre>&#xA;&#xA;<p>and invoke code inside these to shut down your application.</p>&#xA;",2344348,"",2344348,"",2017-06-26T17:16:39,2017-06-26T17:16:39,"","",,4,,,
44873269,2,,44873158,2017-07-02T17:10:18,,2,,"<p>If you will send me project in next hour, I will investigate what's wrong. You don't need to use electron-rebuild — electron-builder rebuilds automatically. (I am electron-builder maintainer.)</p>&#xA;",1910191,"",,"",,2017-07-02T17:10:18,"","",,4,,,
44753678,2,,44738065,2017-06-26T05:43:55,,43,,"<p>I faced the same issue, then I looked into the url module and found a solution</p>&#xA;&#xA;<p><strong>For Node V6</strong> use, </p>&#xA;&#xA;<pre><code>const URL = require('url').Url;&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>const { Url } = require('url'); &#xA;</code></pre>&#xA;&#xA;<p>If you look into the module, it exports 5 methods one of which is Url, so if you need to access Url, you can use either of the two methods</p>&#xA;",6298867,"",6298867,"",2018-06-12T11:13:31,2018-06-12T11:13:31,"","",,5,,,
44837970,2,,44837892,2017-06-30T03:06:24,,0,,"<p>I am guessing that you need the old setInterval trick here. Rather than having an infinite loop which blocks the execution stack from continuing you do something like this:</p>&#xA;&#xA;<pre><code>var interval;&#xA;interval = setInterval(function () {&#xA;    if (/*Some condition*/) {&#xA;        clearInterval(interval);&#xA;        nextFunction();&#xA;    }&#xA;&#xA;}, 50) //check every 50 ms&#xA;</code></pre>&#xA;&#xA;<p>It would be much better to do this with promises, but that would take a bit more work.</p>&#xA;&#xA;<p>I think this is a working promise solution, although I did not study your code much, just kind of copy pasted and assumed it was the right idea.</p>&#xA;&#xA;<pre><code>this.addAtlas = function (name, root) {&#xA;    // Creating the path for the Atlas&#xA;    var path = root + '/Assets/Atlases/' + name + '/' + name;&#xA;     var that = this;&#xA;&#xA;    // JSON File&#xA;    var jpath = path + '.json';&#xA;&#xA;    // PNG File&#xA;    var ppath = path + '.png';&#xA;&#xA;    // Checking if both png and json files exist&#xA;    if (!fs.existsSync(jpath) || !fs.existsSync(ppath) ) throw new Error('Atlas | ""' + name + '"" is not a valid Atlas (Misssing .json or/and .png file)');&#xA;&#xA;    // Loading Atlas image syncrounously to Atlas.js&#xA;&#xA;    var myPromise = function (resolve, reject) {&#xA;        var img = new Image(),&#xA;        isDone = false;&#xA;&#xA;        // Initiating the Atlas&#xA;        img.onload = function () { resolve() };&#xA;        img.onerror = function () { reject('Atlas | Atlas image failed to load!'); };&#xA;        img.src = ppath;&#xA;    };&#xA;&#xA;    // Stopping the browser to continue executing ANY scripts untill the image has finished loading.&#xA;    console.log('Started');&#xA;&#xA;      ///////////////////////\\&#xA;     //    ATTENTION      //  \\&#xA;    ///////////////////////    \\&#xA;    // This is where my  \\    //&#xA;    // game is crashing   \\  //&#xA;    ///////////////////////////&#xA;    var count = 0;&#xA;    myPromise.then(function () {&#xA;&#xA;        console.log('Finished');&#xA;&#xA;        // Getting JSON file to an actual javascript object&#xA;        var obj = JSON.parse( fs.readFileSync(jpath).toString() );&#xA;&#xA;&#xA;        // Gathering all the information into an object&#xA;        var robj = {};&#xA;&#xA;        robj.atlas = obj.Atlas;&#xA;        robj.image = img;&#xA;        robj.name = name;&#xA;        robj.id = this.atlasas_successully_loaded + 1;&#xA;        robj.path = path;&#xA;&#xA;        // Injecting this.loaded with new Atlas&#xA;        that.loaded[robj.name] = robj;&#xA;&#xA;        // Increasing the ID count&#xA;        that.atlases_successully_loaded++;&#xA;    });&#xA;};&#xA;</code></pre>&#xA;",1618124,"",1618124,"",2017-06-30T03:11:59,2017-06-30T03:11:59,"","",,5,,,
44867796,2,,44867419,2017-07-02T05:38:50,,2,,"<p>The issue has to be with this line:</p>&#xA;&#xA;<pre><code>document.getElementById('news_icon').src=""img/news/"" + config['newsapi']['sources'][i] + "".png"";&#xA;</code></pre>&#xA;&#xA;<p>Add <code>console.log(config['newsapi']['sources'][i]);</code> before that line and check the output.</p>&#xA;&#xA;<p>Check the following:</p>&#xA;&#xA;<ul>&#xA;<li>Maybe <code>config['newsapi']['sources']</code> has no string or wrong path.</li>&#xA;<li>Or the string is something like this ""bbc.png"", which means the ""src"" attribute of the image gets the value of ""img/news/bbc.png.png"" (double .png)</li>&#xA;<li>Or the path returned has full path which results in ""img/news/img/news/bbc.png""</li>&#xA;<li>Or maybe the image link is correct, it's just that the image doesn't exist in that path ""img/news"".</li>&#xA;</ul>&#xA;&#xA;<p><strong>EDIT:</strong></p>&#xA;&#xA;<p>What you may would like to do is 1. do a request to the server, 2. then wait 10 seconds. </p>&#xA;&#xA;<p>Your code will not work as expected because request is an async function, meaning it will not wait for the sleep function.</p>&#xA;&#xA;<p>Here's how to do it with async functions. I put your iteration code inside a <code>setTimeout</code> function:</p>&#xA;&#xA;<pre><code>function newsAPI() {&#xA;    for(i = 0; i&lt;config['newsapi']['sources'].length; i++) {&#xA;        setTimeout(function() {&#xA;            document.getElementById('news_icon').src = ""img/news/"" + config['newsapi']['sources'][i] + "".png"";&#xA;            request({&#xA;                url: 'https://newsapi.org/v1/articles?source=' + config['newsapi']['sources'][i] + '&amp;sortBy=top&amp;apiKey=' + config['newsapi']['api_key'],&#xA;                method: 'get'&#xA;                }, function (err, res, body){&#xA;                    var parsedbody = JSON.parse(body)&#xA;                    parsedbody = parsedbody['articles'];&#xA;                    document.getElementById('news_1').innerHTML = parsedbody[0]['title'];&#xA;                    document.getElementById('news_2').innerHTML = parsedbody[1]['title'];&#xA;                    document.getElementById('news_3').innerHTML = parsedbody[2]['title'];&#xA;                    document.getElementById('news_4').innerHTML = parsedbody[3]['title'];&#xA;                    document.getElementById('news_5').innerHTML = parsedbody[4]['title'];&#xA;                });&#xA;        }, 10000 * i);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>EDIT 2:</strong></p>&#xA;&#xA;<pre><code>function newsAPI() {&#xA;    for(i = 0; i&lt;config['newsapi']['sources'].length; i++) {&#xA;        setTimeout(function() {&#xA;            document.getElementById('news_icon').src = ""img/news/"" + config['newsapi']['sources'][i] + "".png"";&#xA;            request({&#xA;                url: 'https://newsapi.org/v1/articles?source=' + config['newsapi']['sources'][i] + '&amp;sortBy=top&amp;apiKey=' + config['newsapi']['api_key'],&#xA;                method: 'get'&#xA;                }, function (err, res, body){&#xA;                    var parsedbody = JSON.parse(body)&#xA;                    parsedbody = parsedbody['articles'];&#xA;                    document.getElementById('news_1').innerHTML = parsedbody[0]['title'];&#xA;                    document.getElementById('news_2').innerHTML = parsedbody[1]['title'];&#xA;                    document.getElementById('news_3').innerHTML = parsedbody[2]['title'];&#xA;                    document.getElementById('news_4').innerHTML = parsedbody[3]['title'];&#xA;                    document.getElementById('news_5').innerHTML = parsedbody[4]['title'];&#xA;                    if(i+1 == config['newsapi']['sources'].length) {// if is last iteration, repeat again&#xA;                        setTimeout(newsAPI, 10000);&#xA;                    }&#xA;                });&#xA;        }, 10000 * i);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",134824,"",134824,"",2017-07-03T06:49:14,2017-07-03T06:49:14,"","",,7,,,
44725243,2,,44719196,2017-06-23T15:36:32,,2,,"<p>You'll need to <a href=""https://nodejs.org/api/child_process.html"" rel=""nofollow noreferrer"">create a child process</a> which executes a command to receive the currently installed applications. Luckely macOS offers the <a href=""https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man8/system_profiler.8.html"" rel=""nofollow noreferrer"">system_profiler</a> utility for doing so and even better it allows XML export via the <code>-xml</code> argument. But be aware it is by far not the fastest function.</p>&#xA;&#xA;<p>You'll need to get the buffer chunks from the subprocess callback, encode it as utf-8 and then parse the XML string through something like <code>xml2js</code>. After that it is a simple check of the property of the browser is checked or not.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Updated code by Will Stone</p>&#xA;</blockquote>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>import jp from 'jsonpath' // for easier json traversal&#xA;&#xA;import { spawn } from 'child_process'&#xA;import parser from 'xml2json'&#xA;&#xA;const sp = spawn('system_profiler', ['-xml', 'SPApplicationsDataType'])&#xA;&#xA;let profile = ''&#xA;&#xA;const browsers = [&#xA;  'Brave',&#xA;  'Chromium',&#xA;  'Firefox',&#xA;  'Google Chrome',&#xA;  'Maxthon',&#xA;  'Opera',&#xA;  'Safari',&#xA;  'SeaMonkey',&#xA;  'TorBrowser',&#xA;  'Vivaldi'&#xA;]&#xA;&#xA;sp.stdout.setEncoding('utf8')&#xA;sp.stdout.on('data', data =&gt; {&#xA;  profile += data // gather chunked data&#xA;})&#xA;&#xA;sp.stderr.on('data', data =&gt; {&#xA;  console.log(`stderr: ${data}`)&#xA;})&#xA;&#xA;sp.on('close', code =&gt; {&#xA;  console.log(`child process exited with code ${code}`)&#xA;})&#xA;&#xA;sp.stdout.on('end', function() {&#xA;  profile = parser.toJson(profile, { object: true })&#xA;  const installedBrowsers = jp&#xA;    .query(profile, 'plist.array.dict.array[1].dict[*].string[0]')&#xA;    .filter(item =&gt; browsers.indexOf(item) &gt; -1)&#xA;  console.log(installedBrowsers)&#xA;  console.log('Finished collecting data chunks.')&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Initial code:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""false"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const { spawn } = require('child_process');&#xD;&#xA;const parser = new xml2js.Parser();&#xD;&#xA;const sp = spawn('system_profiler', ['-xml', 'SPApplicationsDataType']);&#xD;&#xA;&#xD;&#xA;sp.stdout.on('data', (data) =&gt; {&#xD;&#xA;  parser.parseString(data, function(err, result){&#xD;&#xA;    console.log(result)&#xD;&#xA;  });&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;sp.stderr.on('data', (data) =&gt; {&#xD;&#xA;  console.log(`stderr: ${data}`);&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;sp.on('close', (code) =&gt; {&#xD;&#xA;  console.log(`child process exited with code ${code}`);&#xD;&#xA;});</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",5115009,"",5115009,"",2017-06-26T11:41:58,2017-06-26T11:41:58,"","",,13,,,
53216998,2,,53072263,2018-11-08T22:17:20,,0,,"<p>The best way to do this so as to use the IsDev is to add the ELECTRON_IS_DEV environment variable to the app kinda like @carlokid suggested. I used: <a href=""https://stackoverflow.com/a/34769146/3966009"">https://stackoverflow.com/a/34769146/3966009</a>. This is the target I used for my app:</p>&#xA;&#xA;<pre><code>C:\Windows\System32\cmd.exe /c ""SET ELECTRON_IS_DEV=1 &amp;&amp; START ^""^"" ^""C:\Program Files (x86)\My App\Fun Time.exe^""""&#xA;</code></pre>&#xA;",3966009,"",,"",,2018-11-08T22:17:20,"","",,0,,,
53223619,2,,53195250,2018-11-09T10:05:34,,1,,"<p>When sending manually from Electron we can emit the following events on the HTML page:</p>&#xA;&#xA;<ul>&#xA;<li><code>keydown</code>: Send <code>keyDown</code></li>&#xA;<li><code>keypress</code>: Send <code>keyDown + char</code></li>&#xA;<li><code>keyup</code>: Send <code>keyUp</code></li>&#xA;</ul>&#xA;&#xA;<p>The <code>char</code> event representing that the key pressed contains character value to match the <a href=""https://developer.mozilla.org/en-US/docs/Web/Events/keypress"" rel=""nofollow noreferrer"">description of <code>keypress</code> event</a> in general.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The keypress event is fired when a key that produces a character value&#xA;  is pressed down. Examples of keys that produce a character value are&#xA;  alphabetic, numeric, and punctuation keys. Examples of keys that don't&#xA;  produce a character value are modifier keys such as Alt, Shift, Ctrl,&#xA;  or Meta.</p>&#xA;</blockquote>&#xA;&#xA;<p>When pressing an alphabetic key on your keyboard it instantly produces <code>keydown</code> and <code>keypress</code> events, thus it's reasonable from a website to listen to <code>keypress</code> event (what Gmail seems to do)</p>&#xA;&#xA;<p>To manually activate those listeners you should send <code>keyDown + char</code> at least. Here's an example for your cases&#xA;</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow } = require('electron')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  const win = new BrowserWindow()&#xA;  win.loadURL('https://gmail.com')&#xA;&#xA;  win.webContents.once('did-finish-load', () =&gt; {&#xA;    // Compose&#xA;    setTimeout(() =&gt; {&#xA;      console.log('compose...')&#xA;      win.webContents.sendInputEvent({type: 'keyDown', keyCode: 'c'})&#xA;      win.webContents.sendInputEvent({type: 'char', keyCode: 'c'})&#xA;    }, 1000)&#xA;    // Cancel Compose&#xA;    setTimeout(() =&gt; {&#xA;      console.log('cancel...')&#xA;      win.webContents.sendInputEvent({type: 'keyDown', keyCode: 'escape'})&#xA;      win.webContents.sendInputEvent({type: 'char', keyCode: 'escape'})&#xA;    }, 2000)&#xA;    // Go to Tasks&#xA;    setTimeout(() =&gt; {&#xA;      console.log('go to tasks...')&#xA;      win.webContents.sendInputEvent({type: 'keyDown', keyCode: 'g'})&#xA;      win.webContents.sendInputEvent({type: 'char', keyCode: 'g'})&#xA;      win.webContents.sendInputEvent({type: 'keyDown', keyCode: 'k'})&#xA;      win.webContents.sendInputEvent({type: 'char', keyCode: 'k'})&#xA;    }, 3000)&#xA;  })&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>For the sake of completeness you should send <code>keyUp</code>s after every <code>keyDown + char</code> if you want to avoid emitting <code>keypress</code> for every subsequent <code>char</code>. But that's the minimum Gmail seems to be listening to.</em></p>&#xA;&#xA;<hr>&#xA;&#xA;<p>The relevant Chromium code if you're interested: <a href=""https://cs.chromium.org/chromium/src/third_party/blink/public/platform/web_input_event.h"" rel=""nofollow noreferrer"">https://cs.chromium.org/chromium/src/third_party/blink/public/platform/web_input_event.h</a></p>&#xA;",2550156,"",,"",,2018-11-09T10:05:34,"","",,0,,,
53228158,2,,53227152,2018-11-09T14:59:08,,0,,"<p>I found the problem.. I was referencing the <code>render.js</code> in the index.html file.  If I load it with <code>require(./app/js/render)</code> in the <code>app.js</code> file everything works fine, including intellisens.</p>&#xA;",6191910,"",,"",,2018-11-09T14:59:08,"","",,0,,,
53239812,2,,53204574,2018-11-10T14:13:34,,0,,<p>It seems to me that the files I had downloaded were in some way not functioning properly. Those worked in the browser but not in Electron. But that was fixed when I re-downloaded them....</p>&#xA;,10522618,"",,"",,2018-11-10T14:13:34,"","",,0,,,
53256400,2,,53248490,2018-11-12T05:33:16,,1,,<p>Here's how:</p>&#xA;&#xA;<p>1.<strong>In the main process</strong></p>&#xA;&#xA;<pre><code>const windowManager = require('electron-window-manager');&#xA;global.winMgr = windowManager;&#xA;</code></pre>&#xA;&#xA;<p>2.<strong>In The renderer process</strong></p>&#xA;&#xA;<pre><code>const {getGlobal} = require('electron').remote;&#xA;const winMgr = getGlobal('winMgr');&#xA;</code></pre>&#xA;,9639020,"",,"",,2018-11-12T05:33:16,"","",,0,,,
53267260,2,,53231159,2018-11-12T17:30:59,,1,,<p>Apart from the doubts about the installation paths I have solved the issue. I was requiring this file from different places in my application. Sometimes I call it from the main process and in other cases from the renderer process. So I had to do this to support both cases:</p>&#xA;&#xA;<pre><code>var app = null;&#xA;if (typeof(electron.remote) !== 'undefined') {&#xA;    app = electron.remote.app;&#xA;} else {&#xA;    app = electron.app&#xA;}&#xA;const __user_data = app.getPath('userData');&#xA;</code></pre>&#xA;,4891717,"",4891717,"",2018-11-16T09:57:34,2018-11-16T09:57:34,"","",,0,,,
53296485,2,,53295950,2018-11-14T09:08:53,,2,,"<p>According to the <a href=""https://www.electron.build/configuration/nsis"" rel=""nofollow noreferrer"">documentation</a> you can use the <code>uninstallDisplayName</code> option to define a different name for the uninstall menu: </p>&#xA;&#xA;<pre><code>""build"": {&#xA;  ""productName"": ""MyApp"",&#xA;  ""nsis"": {&#xA;    ""artifactName"": ""MyApp.setup.${version}.${ext}"",&#xA;    ""uninstallDisplayName"": ""MyApp""&#xA;  },&#xA;  ...&#xA;}&#xA;</code></pre>&#xA;",4287789,"",,"",,2018-11-14T09:08:53,"","",,0,,,
53297648,2,,29960717,2018-11-14T10:09:53,,1,,"<p>You can use <a href=""https://github.com/zeromq/zeromq.js"" rel=""nofollow noreferrer"">zeromq.js</a>.</p>&#xA;&#xA;<p>It has the same API as <code>zmq</code> but features prebuilt static binaries for Node and Electron. So there is no need for a proper C/C++ compiler toolchain:</p>&#xA;&#xA;<pre><code>npm install zeromq&#xA;</code></pre>&#xA;&#xA;<p>For Electron specific instructions checkout <a href=""https://github.com/zeromq/zeromq.js#rebuilding-for-electron"" rel=""nofollow noreferrer"">https://github.com/zeromq/zeromq.js#rebuilding-for-electron</a>.</p>&#xA;",7293726,"",,"",,2018-11-14T10:09:53,"","",,0,,,
53298110,2,,53297988,2018-11-14T10:33:09,,2,,"<p>You need to load <code>&lt;link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css""&gt;</code> in the <code>index.html</code> to be able to use font-awesome classes like 'fa fa-gear' like in your second example.</p>&#xA;",4587598,"",,"",,2018-11-14T10:33:09,"","",,0,,,
53346673,2,,53346562,2018-11-16T23:26:42,,8,,"<p>In the Electron <code>main.js</code> file, you should <code>require</code> your <code>app.js</code> file to start the Express application, then create a new instance of <code>BrowserWindow</code> and load the URL that your Express application is listening on.</p>&#xA;&#xA;<p>Note that you'll either have to hard code the IP and PORT in Electron, or export them from Express and import them into the Electron <code>main.js</code> script.</p>&#xA;&#xA;<p><sub><strong>./main.js</strong></sub></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { BrowserWindow, app } = require('electron')&#xA;require('./app.js')&#xA;&#xA;let mainWindow = null&#xA;&#xA;function main() {&#xA;  mainWindow = new BrowserWindow()&#xA;  mainWindow.loadURL(`http://localhost:3000/`)&#xA;  mainWindow.on('close', event =&gt; {&#xA;    mainWindow = null&#xA;  })&#xA;}&#xA;&#xA;app.on('ready', main)&#xA;</code></pre>&#xA;&#xA;<p><sub><strong>./package.json</strong></sub></p>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>{&#xA;  ""name"": ""your-app-name"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""description"": ""A description of your application"",&#xA;  ""main"": ""main.js"",&#xA;  ""scripts"": {&#xA;    ""start"": ""electron .""&#xA;  },&#xA;  ""repository"": ""https://github.com/link/to/repo"",&#xA;  ""keywords"": [ ""some"",""keywords"" ],&#xA;  ""author"": ""You"",&#xA;  ""license"": ""Your License"",&#xA;  ""dependencies"": {&#xA;    ""ejs"": ""^2.6.1"", // required for your specific example where `ejs` package is used&#xA;    ""electron"": ""^3.0.9"",&#xA;    ""express"": ""^4.16.4""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then you'll want to make sure that the <code>node_modules</code> directory is in the same directory as <code>main.js</code> and <code>package.json</code>.</p>&#xA;&#xA;<p>Finally, you can start your Express/Electron application using:</p>&#xA;&#xA;<pre class=""lang-none prettyprint-override""><code>&gt; npm start&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>If your Express application is not in the same directory as Electron, you will have to set the <code>views</code> directory for express accordingly:</p>&#xA;&#xA;<p><sub><strong>app.js</strong></sub></p>&#xA;&#xA;<pre><code>var path = require('path')&#xA;var request = require(""request"");&#xA;var express = require(""express"");&#xA;var app = express();&#xA;&#xA;app.set('views', path.join(__dirname, '/views'));&#xA;&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>Where <code>/views</code> is a directory relative to <code>app.js</code> that contains your views.</p>&#xA;",,user4639281,,user4639281,2018-11-17T16:12:16,2018-11-17T16:12:16,"","",,0,,,
53349003,2,,53333993,2018-11-17T07:00:12,,0,,"<p>As it turn out, it is rather straight forward.&#xA;I just have to replace <code>127.0.0.1</code> with whichever IP router provided.</p>&#xA;&#xA;<pre><code>///get the ip from the router&#xA;var os = require('os');&#xA;var addresses = [];&#xA;for (var k in interfaces) {&#xA;    for (var k2 in interfaces[k]) {&#xA;        var address = interfaces[k][k2];&#xA;        if (address.family === 'IPv4' &amp;&amp; !address.internal) {&#xA;            addresses.push(address.address);&#xA;        }&#xA;    }&#xA;}&#xA;console.log(addresses);///&lt;-- addresses is an array&#xA;&#xA; const http = require('http');&#xA;  var url = require('url');&#xA;  var fs = require('fs');&#xA;  const hostname = addresses[0];///&lt;-- first element of addresses&#xA;  const port = 3000;&#xA;  http.createServer(function (req, res) {&#xA;  var q = url.parse(req.url, true);&#xA;  var filename = ""example.html"";&#xA;  fs.readFile(filename, function(err, data) {&#xA;    res.writeHead(200, {'Content-Type': 'text/html'});&#xA;    res.write(data);&#xA;    return res.end();&#xA;  });&#xA;}).listen(port, hostname,()=&gt;{&#xA;    console.log(`Server running at http://${hostname}:${port}/`);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>then, you can do <code>192.168.0.200:3000/example.html</code> from any device.</p>&#xA;",100371,"",,"",,2018-11-17T07:00:12,"","",,0,,,
53357737,2,,53357428,2018-11-18T03:53:19,,1,,"<blockquote>&#xA;  <h3>Click-through window</h3>&#xA;  &#xA;  <p>To create a click-through window, i.e. making the window ignore all mouse events, you can call the <a href=""https://electronjs.org/docs/api/browser-window#winsetignoremouseeventsignore-options"" rel=""nofollow noreferrer""><code>win.setIgnoreMouseEvents(ignore)</code></a> API:</p>&#xA;&#xA;<pre><code>const {BrowserWindow} = require('electron')&#xA;let win = new BrowserWindow()&#xA;win.setIgnoreMouseEvents(true)&#xA;</code></pre>&#xA;  &#xA;  <p><sup>- <a href=""https://electronjs.org/docs/api/frameless-window#click-through-window"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/frameless-window#click-through-window</a></sup></p>&#xA;</blockquote>&#xA;&#xA;<p>I've expanded the example into a full Electron Application below. </p>&#xA;&#xA;<p>Some things you'll probably want to take into account:</p>&#xA;&#xA;<ul>&#xA;<li>Set the <code>x</code> and <code>y</code> coordinates</li>&#xA;<li>If you don't set the width and height the defaults are 800px and 600px accordingly,</li>&#xA;<li>If you don't want a background, you have to set <code>transparent: true</code></li>&#xA;</ul>&#xA;&#xA;<p>To make a window ""click-through"" you'll also want to:</p>&#xA;&#xA;<ul>&#xA;<li>Remove the frame using <code>frame: false</code></li>&#xA;<li>Disable focus using <code>focusable: false</code>, this implicitly sets <code>skipTaskbar:true</code></li>&#xA;</ul>&#xA;&#xA;<p>I haven't found a way within electron to send the window to the background, so if there is a window underneath it, the new window will be on top until you focus a window. After you've focussed a window, the click-through window can never be given focus so:</p>&#xA;&#xA;<ul>&#xA;<li>Minimizing the current window will focus the next window in the stack, meaning the click-through window will be underneath that next window.</li>&#xA;<li>Unmaximizing the current window will show that the click-through window is on top of any windows that may haven been underneath the current window before the click-through window was started.</li>&#xA;<li>Once the click-through window is at the bottom of the stack, it must stay there.</li>&#xA;</ul>&#xA;&#xA;<p>Such applications are probably going to be started on login anyways, so this shouldn't be an issue in most cases.</p>&#xA;&#xA;<h3>Enabling focus when <kbd>ctrl</kbd> is pressed</h3>&#xA;&#xA;<p>I don't think this is currently possible, as it would require listening to keyboard events globally when the window isn't focussed.</p>&#xA;&#xA;<p><sub><strong>./main.js</strong></sub></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { BrowserWindow, app } = require('electron')&#xA;&#xA;let mainWindow = null&#xA;&#xA;function main() {&#xA;    mainWindow = new BrowserWindow({&#xA;        x: 0, y: 0,&#xA;        transparent: true,&#xA;        focusable: false,&#xA;        frame: false&#xA;    })&#xA;    mainWindow.setIgnoreMouseEvents(true)&#xA;    mainWindow.loadFile(`./index.html`)&#xA;    mainWindow.on('close', event =&gt; {&#xA;        mainWindow = null&#xA;    })&#xA;}&#xA;&#xA;app.on('ready', main)&#xA;</code></pre>&#xA;&#xA;<p><sub><strong>./index.html</strong></sub></p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;h1 style=""color: #FFF""&gt;Hello World!&lt;/h1&gt;&#xA;</code></pre>&#xA;&#xA;<p><sub><strong>./package.json</strong></sub></p>&#xA;&#xA;<pre class=""lang-json prettyprint-override""><code>{&#xA;  ""name"": ""your-app-name"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""description"": ""A description of your application"",&#xA;  ""main"": ""main.js"",&#xA;  ""scripts"": {&#xA;    ""start"": ""electron .""&#xA;  },&#xA;  ""repository"": ""https://github.com/link/to/repo"",&#xA;  ""keywords"": [&#xA;    ""some"",&#xA;    ""keywords""&#xA;  ],&#xA;  ""author"": ""You"",&#xA;  ""license"": ""Your License"",&#xA;  ""dependencies"": {&#xA;    ""electron"": ""^3.0.9""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Install with:</p>&#xA;&#xA;<pre><code>&gt; npm install&#xA;</code></pre>&#xA;&#xA;<p>Run with:</p>&#xA;&#xA;<pre><code>&gt; npm start&#xA;</code></pre>&#xA;",,user4639281,,"",,2018-11-18T03:53:19,"","",,0,,,
53366715,2,,53312022,2018-11-19T00:02:35,,7,,"<p><em>NOTE</em></p>&#xA;&#xA;<p>I think the solution is to use <a href=""https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html"" rel=""noreferrer"">react error boundaries</a>, as suggested in the console.</p>&#xA;&#xA;<p>You already pointed out that you're using error boundaries, so after testing your scenarios <a href=""https://jsfiddle.net/gatsbimantico/c83zas9b/"" rel=""noreferrer"">in this fiddle</a> I believe your implementation might be incorrect.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Given a similar implementation for <code>ErrorBoundary</code> in the docs:</p>&#xA;&#xA;<pre><code>class ErrorBoundary extends React.Component {&#xA;  state = { hasError: '' };&#xA;  render() {&#xA;    return this.state.hasError ? (&#xA;      &lt;span&gt;Oops! Something went wrong:&lt;br /&gt;{this.state.hasError}&lt;/span&gt;&#xA;    ) : this.props.children;&#xA;  }&#xA;}&#xA;ErrorBoundary.getDerivedStateFromError = (error) =&gt; ({ hasError: error.toString() });&#xA;</code></pre>&#xA;&#xA;<p>This component will render the fallback when any of its <strong>children</strong> breaks.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI</p>&#xA;</blockquote>&#xA;&#xA;<p>It will look similar to:</p>&#xA;&#xA;<pre><code>&lt;MyReactApp&gt;&#xA;  &lt;ErrorBoundary&gt;&#xA;    &lt;ChatContent /&gt;&#xA;  &lt;/ErrorBoundary&gt;&#xA;&lt;/MyReactApp&gt;&#xA;</code></pre>&#xA;&#xA;<p>Now any error in <code>ChatContent</code> will be catch by <code>ErrorBoundary</code> giving you the opportunity to render the fallback like:</p>&#xA;&#xA;<pre><code>Oops! Something went wrong:&#xA;ReferenceError: test is not defined&#xA;</code></pre>&#xA;",2308745,"",2308745,"",2018-11-19T00:41:41,2018-11-19T00:41:41,"","",,0,,,
53383935,2,,51715452,2018-11-19T23:08:23,,0,,"<p>So now I know that the way Rocket Chat Electron application works, it loads the actual Rocket Chat frontend from the remote Rocket Chat web application, so in order to modify the way the front-end works one has to modify the original Rocket Chat web app installation but not the Rocket Chat Electron app.</p>&#xA;",5460023,"",,"",,2018-11-19T23:08:23,"","",,0,,,
53386362,2,,53372889,2018-11-20T04:42:18,,0,,"<p>Turned out it was the shared memory being too small. I assume when the images were all loaded it exceeded the memory limit and Electron crashed. After upping the shared memory from 64MB to 128MB, the issue is solved.</p>&#xA;",6543849,"",,"",,2018-11-20T04:42:18,"","",,0,,,
53392394,2,,53375565,2018-11-20T11:50:29,,11,,"<p>For your information, Webpack application will bundle the script files in the <code>dist</code> folder which is helpful to run the Electron application.</p>&#xA;&#xA;<p>To import the Syncfusion JavaScript dependencies files, you can use either of  these two ways:</p>&#xA;&#xA;<ul>&#xA;<li>Import the script in <code>main.ts</code> file </li>&#xA;<li>Create a custom JavaScript file for Syncfusion Dependencies</li>&#xA;</ul>&#xA;&#xA;<h3>Import the script in main.ts file</h3>&#xA;&#xA;<p>Import the script in main.ts file as like below code snippet. While importing the Syncfusion JavaScript dependencies as below, it will be bundled in the <code>dist</code> folder.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>...&#xA;import { PLATFORM } from 'aurelia-pal';&#xA;import * as Bluebird from 'bluebird';&#xA;import 'syncfusion-javascript/Scripts/ej/web/ej.grid.min';&#xA;&#xA;// remove out if you don't want a Promise polyfill (remove also from webpack.config.js)&#xA;Bluebird.config({ warnings: { wForgottenReturn: false } });&#xA;&#xA;export async function configure(aurelia: Aurelia) {&#xA;  aurelia.use&#xA;    .standardConfiguration()&#xA;    .developmentLogging()&#xA;    .plugin(PLATFORM.moduleName('aurelia-syncfusion-bridge'), (syncfusion) =&gt; syncfusion.ejGrid());&#xA;...&#xA;</code></pre>&#xA;&#xA;<h3>Create a custom JavaScript file for Syncfusion Dependencies</h3>&#xA;&#xA;<p>You have to create a custom JavaScript file for Syncfusion Dependencies (<code>ej.web.all.min.js</code>) and import the created JavaScript files using <code>require</code> in your <code>app.html</code> file.</p>&#xA;",2028389,"",8343610,"",2018-11-20T15:18:53,2018-11-20T15:18:53,"","",,0,,,
53394191,2,,53150313,2018-11-20T13:34:08,,0,,"<p>I thought I would share the solution I found around this.Basically ,you need to create a route for the page you want to load like this:</p>&#xA;&#xA;<pre><code>{&#xA;  path:'/example',&#xA;  name:'example',&#xA;  component: require('@/components/example').default&#xA;},&#xA;</code></pre>&#xA;&#xA;<p>If you are using electron-vue,make sure the page extension is "".vue"" and enclose the page content like this:</p>&#xA;&#xA;<pre><code>&lt;template&gt;&#xA;&lt;html&gt;&#xA;**Put the page content in here**&#xA;&lt;/html&gt; &#xA;&lt;/template&gt;&#xA;</code></pre>&#xA;&#xA;<p>In my case,I wanted to go to the page by clicking on a button,so i used Vue-router like this:</p>&#xA;&#xA;<pre><code>&lt;button type=""button"" class=""btn btn-light""&gt;&lt;a id=""home""&gt;&lt;router-link :to=""{ name: 'example' }""&gt; Button text &lt;/router-link&gt;&lt;/a&gt;&#xA;&lt;/button&gt;&#xA;</code></pre>&#xA;&#xA;<p>Et voila!</p>&#xA;",7756962,"",,"",,2018-11-20T13:34:08,"","",,0,,,
53400607,2,,53388829,2018-11-20T19:56:04,,1,,"<p>You're basically there. All that's left is loading your error page.</p>&#xA;&#xA;<p>Say you have an <code>error.html</code>:</p>&#xA;&#xA;<pre><code>&lt;body&gt;&#xA;  &lt;h1&gt;Error connecting&lt;/h1&gt;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;&#xA;<p>Your main code could look like this:</p>&#xA;&#xA;<pre><code>let mainWindow&#xA;function createWindow () {&#xA;  mainWindow = new BrowserWindow({width: 800, height: 600})&#xA;&#xA;  mainWindow.webContents.on(""did-fail-load"", () =&gt; {&#xA;      mainWindow.loadFile(""error.html"");&#xA;      setTimeout(connect, 3000);&#xA;  });&#xA;&#xA;  connect();&#xA;}&#xA;&#xA;function connect() {&#xA;    console.log(""trying to connect"");&#xA;    mainWindow.loadURL(""https://madeupsitexxxxxxxxxxx.com"");&#xA;}&#xA;&#xA;app.on('ready', createWindow);   &#xA;</code></pre>&#xA;",3479456,"",3479456,"",2018-11-20T20:01:52,2018-11-20T20:01:52,"","",,0,,,
53404957,2,,53401881,2018-11-21T03:42:37,,0,,"<p>As per the muon's <a href=""https://github.com/brave/muon"" rel=""nofollow noreferrer"">github repo</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Some of Muons goals include:</p>&#xA;  &#xA;  <ol>&#xA;  <li>Use the Chromium source directly (eliminating electron's copy of chrome_src) with minor patches&#xA;  &#xA;  <ul>&#xA;  <li>make integrating chrome components less painful</li>&#xA;  <li>faster and more streamlined end-to-end build process (see browser-laptop-bootstrap).</li>&#xA;  </ul></li>&#xA;  <li>add support for Chrome extensions</li>&#xA;  <li>add security focused features for the renderer:&#xA;  &#xA;  <ul>&#xA;  <li><strong>remove node completely (from the renderer process)</strong></li>&#xA;  <li>full sandbox</li>&#xA;  <li>scriptable window.opener support</li>&#xA;  </ul></li>&#xA;  </ol>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<p>As you can see there, muon does not supports node code in the rendered. It is by design for security purpose. Muon may be great for certain applications, but I recommend switching on to electron if you really need to use <em>require</em> in the renderer.</p>&#xA;",9639020,"",,"",,2018-11-21T03:42:37,"","",,0,,,
53430189,2,,53420830,2018-11-22T11:39:16,,1,,"<p>The <code>@xmpp/client</code> library seems that lacks the api calls when connection error happens as seen in the following example:</p>&#xA;&#xA;<pre><code>const {client, xml, jid} = require('@xmpp/client')&#xA;&#xA;const initXmpp=function(xmpp){&#xA;&#xA;  xmpp.on('error', err =&gt; {&#xA;    console.error(""Error occured"",err.toString())&#xA;    // dialog.showErrorBox('Internal Error',err.toString())&#xA;  })&#xA;&#xA;  xmpp.on('offline', () =&gt; {&#xA;    console.log('', 'offline')&#xA;  })&#xA;&#xA;  xmpp.on('online', async address =&gt; {&#xA;    dialog.showMessageBox({'type':'info','message':""Online as:""+address.toString()})&#xA;  })&#xA;&#xA;  xmpp.on('stanza', stanza =&gt; {&#xA;    console.log('⮈', stanza.toString())&#xA;    xmpp.stop()&#xA;  })&#xA;&#xA;  process.on('unhandledRejection', function (reason, p) {&#xA;    console.error('Possibly Unhandled Rejection at: Promise ', p, ' reason: ', reason)&#xA;  })&#xA;&#xA;  try{&#xA;    xmpp.start()&#xA;  } catch(e) {&#xA;    console.error(e.message)&#xA;  }&#xA;}&#xA;&#xA;try{&#xA;  clientInstance=new client({&#xA;    'service':""xmpp://0.0.0.0:5222"",&#xA;    'domain': ""example.com"",&#xA;    'username':""admin"",&#xA;    'password':""admin"",&#xA;  });&#xA;&#xA;  initXmpp(clientInstance);&#xA;} catch(e) {&#xA;  console.error(e);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>That I get the following error:</p>&#xA;&#xA;<pre><code> events.js:183&#xA;      throw er; // Unhandled 'error' event&#xA;      ^&#xA;Error: self signed certificate&#xA;    at TLSSocket.&lt;anonymous&gt; (_tls_wrap.js:1105:38)&#xA;    at emitNone (events.js:106:13)&#xA;    at TLSSocket.emit (events.js:208:7)&#xA;    at TLSSocket._finishInit (_tls_wrap.js:639:8)&#xA;    at TLSWrap.ssl.onhandshakedone (_tls_wrap.js:469:38)&#xA;</code></pre>&#xA;&#xA;<p>And offers no way to handle it, that is because the SSL/TLS connections are handled by the nodejs itself thus the only solution can be found on this gthub <a href=""https://github.com/xmppjs/xmpp.js/issues/598#issuecomment-441139677"" rel=""nofollow noreferrer"">answer</a>.</p>&#xA;&#xA;<p>Based on the solution mentioned above actually combined with <code>NODE_ENV</code> environmental variable I placed the following code snippet on <code>index.js</code>:</p>&#xA;&#xA;<pre><code>if(env==='dev' || env=='debug'){&#xA;  process.env.NODE_TLS_REJECT_UNAUTHORIZED=0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Also if using <a href=""https://github.com/sameersbn/docker-openfire"" rel=""nofollow noreferrer"">this</a> I would suggest to fork it and modify it to use latest version of ubuntu (or even a more stable docker image) and later version of openfire such as <a href=""https://github.com/pc-magas/docker-openfire"" rel=""nofollow noreferrer"">this</a> guy did.</p>&#xA;",4706711,"",4706711,"",2018-11-23T20:29:31,2018-11-23T20:29:31,"","",,0,,,
53244611,2,,53242891,2018-11-10T23:59:36,,1,,"<blockquote>&#xA;  <p>The same happens with other proyects</p>&#xA;</blockquote>&#xA;&#xA;<p>Just with <code>electron-forge</code> or other CLI tools too? My guess is this is a <code>path</code> issue- electron forge can't find your Node/Git installations.</p>&#xA;&#xA;<p>You can try <code>npx electron-forge init my-new-app</code> but that's a long shot.</p>&#xA;&#xA;<p>Also, make sure you're using the correct version of Electron forge. There's a new one that's kinda broken right now.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The master branch is a rewrite of Electron Forge that will eventually be the 6.x series. If you are looking for the 5.x series (the version currently published to NPM), please view the 5.x branch.</p>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-forge"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-forge</a></p>&#xA;",10326132,"",,"",,2018-11-10T23:59:36,"","",,1,,,
53378036,2,,53360169,2018-11-19T15:38:57,,1,,"<p>It looks like what's happening is your <code>mainWindow</code> <code>close</code> handler gets triggered which tells other windows to close, which then fires off the <code>window_closed</code> event (I guess that's a custom event that you added?), and by the time<code>mainWindow.webContents.send</code> is called, the <code>mainWindow</code>'s close handler finished and the window closed.</p>&#xA;&#xA;<p>Simply add an <code>isDestroyed</code> check before sending the message like so:</p>&#xA;&#xA;<pre><code>ipcMain.on('window_closed', (e, item)=&gt;{&#xA;    if (mainWindow &amp;&amp; !mainWindow.isDestroyed())&#xA;        mainWindow.webContents.send('button_enable', item);&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Your other options (though arguably less optimal) are:</p>&#xA;&#xA;<ol>&#xA;<li>Set a flag when the main window is closing and have the <code>window_closed</code> handler return out if it sees the flag (surely there's no reason to send a <code>button_enable</code> message if we're about to shut everything down):</li>&#xA;</ol>&#xA;&#xA;<p>&nbsp;</p>&#xA;&#xA;<pre><code>let mainWindowIsClosing = false;&#xA;mainWindow.on('close', (e)=&gt;{&#xA;    mainWindowIsClosing = true;&#xA;    ...&#xA;    wind.close();&#xA;    ...&#xA;});&#xA;&#xA;ipcMain.on('window_closed', (e, item)=&gt;{&#xA;    if (mainWindowIsClosing) return;&#xA;    mainWindow.webContents.send('button_enable', item);&#xA;});&#xA;</code></pre>&#xA;&#xA;<ol start=""2"">&#xA;<li>You can call the <code>destroy</code> method instead of <code>close</code> to avoid firing the <code>close</code> event for child windows. (though <code>window_closed</code> isn't an Electron event I believe, so it depends on how you've hooked everything up):</li>&#xA;</ol>&#xA;&#xA;<p>&nbsp;</p>&#xA;&#xA;<pre><code>mainWindow.on('close', (e)=&gt;{&#xA;    ...&#xA;    wind.destroy();&#xA;});&#xA;</code></pre>&#xA;",3479456,"",3479456,"",2018-11-19T15:46:50,2018-11-19T15:46:50,"","",,1,,,
53394045,2,,53393675,2018-11-20T13:27:34,,1,,"<p>Build instructions for electron on linux, macOS and windows are different. To build for linux, as per the electron docs, follow these steps:</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>1.</strong> Make sure you have python 2.7.x installed on your system. You can check the version of python running on your os by running the command <code>python -V</code>.</p>&#xA;&#xA;<p><strong>2.</strong> Install nodejs. You can download the installer from <a href=""https://nodejs.org/en/download/"" rel=""nofollow noreferrer"">here.</a></p>&#xA;&#xA;<p><strong>3.</strong> Since you've not mentioned the version of linux you're running, I'm assuming you're running Ubuntu. Install the following packages. </p>&#xA;&#xA;<pre><code>sudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \&#xA;                   libnotify-dev libgnome-keyring-dev libgconf2-dev \&#xA;                   libasound2-dev libcap-dev libcups2-dev libxtst-dev \&#xA;                   libxss1 libnss3-dev gcc-multilib g++-multilib curl \&#xA;                   gperf bison python-dbusmock &#xA;</code></pre>&#xA;&#xA;<p>These were the very basic required steps to build electron on linux. You may need to install several other packages depending your system architecture, project dependencies etc. </p>&#xA;&#xA;<hr>&#xA;&#xA;<p>For complete build instructions, follow the electron docs. Here I leave you with some links.</p>&#xA;&#xA;<p><strong>1.</strong> <a href=""https://electronjs.org/docs/development/build-instructions-linux"" rel=""nofollow noreferrer"">Build Instructions for linux</a></p>&#xA;&#xA;<p><strong>2.</strong> <a href=""https://electronjs.org/docs/development/build-instructions-macos"" rel=""nofollow noreferrer"">Build Instructions for macOS</a></p>&#xA;&#xA;<p><strong>3.</strong> <a href=""https://electronjs.org/docs/development/build-instructions-windows"" rel=""nofollow noreferrer"">Build Instructions for windows</a></p>&#xA;",9639020,"",,"",,2018-11-20T13:27:34,"","",,1,,,
53250605,2,,53247487,2018-11-11T16:10:09,,1,,"<p>I would add wrappers for you divs. Now your content should not overflow its wrapper. This should work.. :)</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""row""&gt;&#xD;&#xA;  &lt;div class=""div-wrap"" style=""overflow:hidden; height: 'your-height';""&gt;&#xD;&#xA;    &lt;div class=""col""&gt;&#xD;&#xA;      ...content&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",6643655,"",,"",,2018-11-11T16:10:09,"","",,2,,,
53287748,2,,53278681,2018-11-13T18:54:06,,0,,"<p>Electron is a very flexible combination of Node and Chromium, with some added secret sauce of its own API.</p>&#xA;&#xA;<p>You have a lot of options available to you.</p>&#xA;&#xA;<p>One of the biggest points to realize with Electron is that it's possible to develop offline apps that don't require an online back end like you're probably used to doing. This means you can choose to run Express inside of Electron, handling routing and doing its usual job. This would mean Express is running on the PC or Mac of your end user, instead of running on a hosted server somewhere on the Internet.</p>&#xA;&#xA;<p>As an Express developer, this might be a good way for you to initially get things done quickly. You can install Express into your Electron app (npm install express --save). </p>&#xA;&#xA;<p>This way you can run express within Electron, allowing you to continue to work in many of the same ways as what you're already used to. It won't be exactly the same. Like you already see, you'll need to learn to manage browser windows and other Electron concepts along the way. There are also some limitations and workarounds, since Express is normally running on the hosting provider back end server.</p>&#xA;&#xA;<p>There are pointers for how to get started here: <a href=""https://stackoverflow.com/questions/41161836/nodejs-electron-with-express"">NodeJS Electron with express</a> or you can Google for ""building apps with Electron and Express"".</p>&#xA;&#xA;<p>You'll need to start wrapping your head around Electron specific concepts though so plan to do some reading or courses on Electron.</p>&#xA;&#xA;<p>There's a really great list of Electron related learning and other resources here:&#xA;<a href=""https://github.com/sindresorhus/awesome-electron#videos"" rel=""nofollow noreferrer"">https://github.com/sindresorhus/awesome-electron#videos</a></p>&#xA;&#xA;<p>Update: I realised I didn't address some of your question specifically so,</p>&#xA;&#xA;<p>To validate the form, you can choose to do it the way you are used to (probably by posting the form to Express and having some logic run), or maybe using a script running on the actual page.</p>&#xA;&#xA;<p>To redirect to a specific path in Electron, you have many options but Express routing could still work for you, or you can load a specific file using loadFile on the Electron BrowserWindow webContents API object (you'll probably need to do some reading on Main and Renderer to nicely understand this).</p>&#xA;&#xA;<p>Enjoy developing with Electron and good luck!</p>&#xA;",45817,"",45817,"",2018-11-13T18:59:35,2018-11-13T18:59:35,"","",,2,,,
53329667,2,,53327874,2018-11-16T00:17:03,,1,,"<p>I've <a href=""https://stackoverflow.com/a/13960538/201952"">answered a similar question before</a> in the context of using regular nodejs as a client.</p>&#xA;&#xA;<p>Unfortunately, that same answer applies to the nodejs part of electron (ie using <code>require('http')</code> or any modules built on top of the node http plumbing).  node itself does not speak Windows auth and as of this writing, none of the available native modules implement a Windows integrated auth HTTP client.</p>&#xA;&#xA;<p>However, Chrome itself does support Windows integrated auth, so if you instead use the DOM HTTP APIs (XHR or <code>fetch</code>), you'll likely get the integrated auth for free.  (This is a guess; I've never tested it with electron).  I know you say you want to send the requests from the node side, but this is the only way to do it at the moment without rolling your own SSPI integration.</p>&#xA;",201952,"",,"",,2018-11-16T00:17:03,"","",,2,,,
53393655,2,,53390798,2018-11-20T13:05:28,,5,,"<p>Perhaps something like this:</p>&#xA;&#xA;<pre><code>const button = document.getElementById('&lt;your_button_id&gt;');&#xA;button.addEventListener('click', () =&gt; {&#xA;  createBrowserWindow();&#xA;});&#xA;&#xA;function createBrowserWindow() {&#xA;  const remote = require('electron').remote;&#xA;  const BrowserWindow = remote.BrowserWindow;&#xA;  const win = new BrowserWindow({&#xA;    height: 600,&#xA;    width: 800&#xA;  });&#xA;&#xA;  win.loadURL('&lt;url&gt;');&#xA;}&#xA;</code></pre>&#xA;",9639020,"",,"",,2018-11-20T13:05:28,"","",,2,,,
53432377,2,,45244649,2018-11-22T13:45:28,,0,,<p>See in the message that it is saying that there is a directory where the global npm package is installed. In your case it is inside:&#xA;**D:\Yididiya Master\Development\Electron\simple-samples-master\activity-monitor\node_modules**</p>&#xA;&#xA;<p>Now try to install that again.</p>&#xA;,1468404,"",,"",,2018-11-22T13:45:28,"","",,2,,,
53406948,2,,53392888,2018-11-21T07:13:18,,2,,"<p>I am sharing the solutions below. Please bear in mind that these might not be the best possible solutions and I am open to suggestions.</p>&#xA;&#xA;<h3>Solution to Point #1:</h3>&#xA;&#xA;<p><strong>Briefing</strong>: The user selects files from <code>Finder</code> to be shared via the <code>Share App Extension</code> of the application which is registered with the OS if the <code>extension context</code> of the selection matches to that of the <code>Share App Extension</code>. Upon doing so, the <code>Share App Extension</code> receives the <code>extension context</code> alongwith <code>NSExtensionItem</code>. The <code>NSExtensionItem</code> object contains the <code>NSItemProvider</code> object which is the object you'd get for all the files (attachments) shared via the <code>Share App Extension</code>.</p>&#xA;&#xA;<p>Now, for each item type that you receive via the <code>Share App Extension</code>, after looking for the data that your function recognizes via <code>hasItemConforminToTypeIdentifier(_:)</code>, you can use UTI (Uniform Type Identifier) to identify its data.</p>&#xA;&#xA;<p><strong>Remedy</strong>: Here, the crucial part is to understand that one should be treating their input files as firstly being of the type: <code>kUTTypeURL</code>. Then, in the <code>completionHandler</code> for the <code>loadItem</code> method of the <code>NSItemProvider</code> object one would get <code>NSURL</code> which is basically the file path I was looking for.</p>&#xA;&#xA;<h3>Solution to Point #2:</h3>&#xA;&#xA;<p><strong>Briefing</strong>: The <code>Share App Extension</code> has the luxury of being written in Swift but the main app in our project does not ! The main application is written in <code>ElectronJS</code> which is far far far far from being integratable with Swift ! Except for the fact that the application written in <code>ElectronJS</code> has the ability to be packaged in the form of a <code>dmg</code> application, there is very little integratability between ElectronJS and Swift as far as the language and framework intertwining is concerned.</p>&#xA;&#xA;<p><strong>Premise</strong>:&#xA;So, the premise is to be able to share the filepaths extracted earlier to be passed from the <code>Share App Extension</code> (written in Swift) to the main application (written in ElectronJS). Now, if the main application was a Cocoa application, things would have been much easier. If both of them belong to the same <code>App group</code>, then using the Swift APIs they could have read/written synchronously to the Shared Memory. However, the problem arises as those APIs are not available in <code>ElectronJS</code>. One remedy can be to run the Swift code in a sandboxed environment within the <code>ElectronJS</code> application using nodeJS libraries. However, a sandboxed environment presents its own nuances in data sharing. So, I have kept this approach on hold for now.</p>&#xA;&#xA;<p>So, the approach that I have chosen right now is to use <code>App Data Directory</code> to share this intermediary information. The <code>Share App Extension</code> would be writing the filepath information in the <code>App Data</code> directory of the application and the ElectronJS application would use nodeJs APIs to access this information. Keep in mind that this is a very primitive approach and requires menial efforts but the requirements for this particular case doesn't need stringent security measures anyhow.</p>&#xA;&#xA;<p>However, I am positively looking for a better way to solve Problem #2.</p>&#xA;",5265621,"",,"",,2018-11-21T07:13:18,"","",,3,,,
53375865,2,,53375715,2018-11-19T13:38:52,,1,,"<p>From what you gave, the translate operation won't work anywhere, not just in Electron.</p>&#xA;&#xA;<p><code>ctx.setTransform()</code> method sets the transformation matrix to <em>absolute</em> values, the current matrix is discarded and the passed values are the ones to which your matrix will get set.<br>&#xA;<code>1, 0, 0, 1, 0, 0</code> are the values of the native matrix transform (i.e untransformed).</p>&#xA;&#xA;<p>So calling <code>ctx.setTransform(1, 0, 0, 1, 0, 0)</code> will reset your tranform matrix to its default and make all calls to relative <em>translate()</em>, <em>rotate()</em> or <em>transform()</em> useless.</p>&#xA;&#xA;<p>These methods are meant to be relative because they add up to the current matrix values. For instance,</p>&#xA;&#xA;<pre><code>ctx.translate(10, 10);&#xA;// here next drawing will be offset by 10px in both x and y direction&#xA;ctx.translate(40, -10);&#xA;// this adds up to the current 10, 10, so we are now offset by 30, 0&#xA;</code></pre>&#xA;&#xA;<p>If you want your <em>translate</em> to work, don't call setTransform here, or even replace it with <code>setTransform(1, 0, 0, 1, 20, 20)</code></p>&#xA;&#xA;<p>Also, in your snippet, you are setting the transformation matrix <strong>after</strong> you did draw. The transformations will get applied only on next drawings, not on previous ones.</p>&#xA;&#xA;<p>Now, you might be in an animation loop, and need your matrix to get reset at every loop.&#xA;In this case, call <code>ctx.setTransform(1,0,0,1,0,0)</code> either at the beginning of your drawing loop, either as the last op, and call <em>translate()</em> before drawing.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const canvas = document.getElementById('main');&#xD;&#xA;const ctx = canvas.getContext('2d');&#xD;&#xA;let x = 0;&#xD;&#xA;ctx.fillStyle = 'red'&#xD;&#xA;anim();&#xD;&#xA;&#xD;&#xA;function draw() {&#xD;&#xA;  // reset the matrix so we can clear everything&#xD;&#xA;  ctx.setTransform(1, 0, 0, 1, 0, 0);&#xD;&#xA;  ctx.clearRect(0, 0, canvas.width, canvas.height);&#xD;&#xA;  //set the transform before drawing&#xD;&#xA;  ctx.translate(x - 30, 20)&#xD;&#xA;  //which is actually the same as &#xD;&#xA;  //ctx.setTransform(1, 0, 0, 1, x, 20);&#xD;&#xA;  ctx.fillRect(0, 0, 30, 30);&#xD;&#xA;}&#xD;&#xA;function anim() {&#xD;&#xA;  x = (x + 2) % (canvas.width + 60);&#xD;&#xA;  draw();&#xD;&#xA;  requestAnimationFrame(anim);&#xD;&#xA;}&#xD;&#xA;  </code></pre>&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>#main {&#xD;&#xA;  background-color: black;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;canvas id=""main""&gt;&lt;/canvas&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",3702797,"",3702797,"",2018-11-19T14:15:33,2018-11-19T14:15:33,"","",,4,,,
53314620,2,,53314165,2018-11-15T07:48:43,,0,,"<p>According to <a href=""https://github.com/electron/electron/issues/10780"" rel=""nofollow noreferrer"">issue #10780 on GitHub</a>, Electron upgraded back in 2017 to Chrome 61, which requires GTK+ 3. Therefore it is not possible to run Electron on a system with only GTK+ 2 installed.</p>&#xA;&#xA;<p><a href=""https://appimage.org/"" rel=""nofollow noreferrer"">The idea of AppImages</a> is that an application should contain all libraries it needs to run. However, libraries like GTK+ need to integrate deeply into the system (GTK+ requires <code>libXrandr.so</code>, <code>libglib.so</code>, etc. just to name a few) and have a ton of dependencies which would blow the package up. It is therefore pretty difficult to build an app which contains all different dependencies it has (and even imagine having three or more AppImages containing GTK+ and dependencies sitting on your hard drive).</p>&#xA;&#xA;<p>And in the case of GTK+, it is in most use-cases not enough to just install <code>libgtk</code> (any version), because you might want to profit from dependencies which are just ""recommended"".</p>&#xA;",6786876,"",6786876,"",2018-11-15T14:48:47,2018-11-15T14:48:47,"","",,6,,,
53215453,2,,53214738,2018-11-08T20:13:51,,0,,"<h2>UPDATE after your comment</h2>&#xA;&#xA;<p><strong><em>You have two errors</em></strong></p>&#xA;&#xA;<ol>&#xA;<li>Your  <code>get_stored_password</code>  function returns nothing when your callback function is called that's why <code>console.log(function_returning_nothing())</code> outputs <code>undefined</code></li>&#xA;</ol>&#xA;&#xA;<hr>&#xA;&#xA;<ol start=""2"">&#xA;<li><p>You forgot to pass <code>done</code> to your callback function in&#xA;    <code>get_stored_password</code>'s definition <code>callback(done)</code></p>&#xA;&#xA;<pre><code>const {&#xA;    ipcMain&#xA;} = require('electron');&#xA;const Password = require(""node-php-password"");&#xA;const connection = require(""./connection"");&#xA;&#xA;var hash;&#xA;var done;&#xA;var self = module.exports = {&#xA;    get_stored_password: function(name, pwd, callback) {&#xA;        connection.query(""SELECT * FROM `super_admin` WHERE ad_un = ?"", name, function(err, result, fildes) {&#xA;            if (err) throw err;&#xA;            let numbers_retuned = result.length;&#xA;            hash = result[0].desk;&#xA;&#xA;            if (numbers_retuned == 1) {&#xA;                var test = pwd;&#xA;                done = Password.verify(test, hash);&#xA;&#xA;&#xA;&#xA;            } else {&#xA;                console.log('no');&#xA;                return 0;&#xA;            }&#xA;&#xA;&#xA;            //you must pass an argument to your callback function&#xA;            // and return done var to get an output when you log this function&#xA;            callback(done);&#xA;            return done;&#xA;        });&#xA;&#xA;    },&#xA;    chek_if_true: function(done) {&#xA;        console.log(done);&#xA;        if (done) {&#xA;            return true;&#xA;&#xA;        } else {&#xA;            return false;&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<p>That's why when you log <code>done</code> to the console it's <code>undefined</code></p>&#xA;",3339316,"",3339316,"",2018-11-08T22:00:48,2018-11-08T22:00:48,"","",,8,,,
42483596,2,,42434305,2017-02-27T10:39:35,,0,,"<p>I have solved the issue of looping through a large number of lines by just eliminating the line that is already read.</p>&#xA;&#xA;<p>in my case, it was simply by doing this</p>&#xA;&#xA;<pre><code>for (let i=0; i&lt;lines.length; i++)&#xA; pieces = lines[i].split(""\t"");&#xA; lines[i] = ''; // &lt;- here&#xA;</code></pre>&#xA;&#xA;<p>By deleting each read line I have increased the performance I'd say very significantly.</p>&#xA;&#xA;<p>However, the next bottleneck is when constructing an object (after the lines are well parsed) since it becomes too large and it makes Chrome crash. What I conclude is that I am probably reaching the limit for javascript in Electron-Chrome in managing with complex and large objects.</p>&#xA;",826815,"",,"",,2017-02-27T10:39:35,"","",,0,,,
42506373,2,,42505164,2017-02-28T10:35:19,,0,,"<p>Ok, the solution was super easy for some strange reason.&#xA;However I've changed my CSS from this:</p>&#xA;&#xA;<pre><code>.docFooter{&#xA;    display: -webkit-box;&#xA;    display: -ms-flexbox;&#xA;    display: flex;&#xA;    -webkit-box-pack: justify;&#xA;    -ms-flex-pack: justify;&#xA;    justify-content: space-between;&#xA;    width: 100%;&#xA;    position: absolute;&#xA;    bottom: 0;&#xA;    padding-right: 2cm;&#xA;    padding-bottom: 1cm;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>to this:</p>&#xA;&#xA;<pre><code>display: -webkit-box;&#xA;    display: -ms-flexbox;&#xA;    display: flex;&#xA;    -webkit-box-pack: justify;&#xA;    -ms-flex-pack: justify;&#xA;    justify-content: space-between;&#xA;    width: 100%;&#xA;    position: absolute;&#xA;    top: 27.7cm !important;&#xA;    padding-right: 2cm !important;&#xA;</code></pre>&#xA;&#xA;<p>Since I know that a A4 page won't exceed 29.7cm it was easy to set the element to the bottom while making it absolute positioned coming from top with <code>top: 27.7cm</code></p>&#xA;",4457744,"",,"",,2017-02-28T10:35:19,"","",,0,,,
42607275,2,,42540776,2017-03-05T10:36:25,,0,,"<p>For mac there is a mac store support:&#xA;<a href=""http://docs.nwjs.io/en/latest/For%20Users/Advanced/Support%20for%20Mac%20App%20Store/"" rel=""nofollow noreferrer"">http://docs.nwjs.io/en/latest/For%20Users/Advanced/Support%20for%20Mac%20App%20Store/</a></p>&#xA;&#xA;<p>IndexedDb, localstorage, etc. will persists until the app name will not change. </p>&#xA;&#xA;<p>For automatic updates:<br>&#xA;There is an ongoing pull request going on for auto updater.&#xA;<a href=""https://github.com/nwjs/nw.js/pull/5722"" rel=""nofollow noreferrer"">https://github.com/nwjs/nw.js/pull/5722</a><br>&#xA;Till then, the easiest way for auto update Your application code is to host your app code on the web and open the web page with nw.js.&#xA;If You want to autoupdate the nw.js itself then you will have to provide an installer for that and tell the user to download and run the installer if there is a new update.</p>&#xA;",5653484,"",,"",,2017-03-05T10:36:25,"","",,1,,,
42608454,2,,42606428,2017-03-05T12:40:31,,0,,"<p>This might work for you:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>.main {&#xD;&#xA;  min-height: 100vh;&#xD;&#xA;  display: flex;&#xD;&#xA;}&#xD;&#xA;.blue {&#xD;&#xA;  background: blue;&#xD;&#xA;  flex: 1;&#xD;&#xA;}&#xD;&#xA;.sub {&#xD;&#xA;  margin-right:5px;&#xD;&#xA;  flex: 3;&#xD;&#xA;  display: flex;&#xD;&#xA;  flex-direction: column;&#xD;&#xA;}&#xD;&#xA;.red {&#xD;&#xA;  flex: 1;&#xD;&#xA;  background: red;&#xD;&#xA;  margin-bottom:5px;&#xD;&#xA;}&#xD;&#xA;.green {&#xD;&#xA;  background: green;&#xD;&#xA;  flex: 0 0 10%;&#xD;&#xA;  }</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""main""&gt;&#xD;&#xA;	&lt;div class=""sub""&gt;&#xD;&#xA;		&lt;div class=""red""&gt;&lt;/div&gt;&#xD;&#xA;		&lt;div class=""green""&gt;&lt;/div&gt;&#xD;&#xA;	&lt;/div&gt;&#xD;&#xA;  &lt;div class=""blue""&gt;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4027170,"",4027170,"",2017-03-05T16:04:46,2017-03-05T16:04:46,"","",,3,,,
42416281,2,,42400969,2017-02-23T12:51:23,,1,,"<p>This is possible with standard <a href=""http://electron.atom.io/docs/api/menu/"" rel=""nofollow noreferrer"">Electron Menu API</a> without additional modules, perhaps using <code>electron-context-menu</code> is just complicating things since that seems to be designed to simplify things for the specific use-case of a standard context menu. With the standard Menu API, you can create and pop-up a menu on each click, so there is no need to ""de-register"" a menu.</p>&#xA;&#xA;<p>Here's a simplified example, creating a different new context menu with each click:</p>&#xA;&#xA;<pre><code>let menuCount = 1;&#xA;window.addEventListener('contextmenu', (e) =&gt; {&#xA;  e.preventDefault();&#xA;  let menu = new electron.remote.Menu();&#xA;  menu.append(new electron.remote.MenuItem({label : ""Context Menu ""+menuCount++}))&#xA;  menu.popup(electron.remote.getCurrentWindow());&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>On the first right-click you will see a menu with an item ""Context Menu 1"", on the second right-click, ""Context Menu 2"", and so on. </p>&#xA;",174979,"",,"",,2017-02-23T12:51:23,"","",,5,,,
42446069,2,,42446067,2017-02-24T18:42:59,,1,,"<h2>tl;dr</h2>&#xA;&#xA;<p>Add <code>target: 'node-webkit',</code> to your <code>webpack.config.js</code>.</p>&#xA;&#xA;<h2>In details (behind the scenes)</h2>&#xA;&#xA;<p>As the <a href=""https://webpack.github.io/docs/configuration.html#target"" rel=""nofollow noreferrer"">Webpack 1</a> and <a href=""https://webpack.js.org/concepts/targets/"" rel=""nofollow noreferrer"">Webpack 2</a> documentation shows, you have to set a <code>target</code> config option because different environments work differently. For example, for the <code>node-webkit</code> option the documentation states: </p>&#xA;&#xA;<blockquote>&#xA;  <p>Compile for usage in webkit, uses jsonp chunk loading but also supports build in node.js modules plus require(“nw.gui”) (experimental)</p>&#xA;</blockquote>&#xA;&#xA;<p>Also, for <code>node</code> it states this:</p>&#xA;&#xA;<blockquote>&#xA;  <p>In the example above, using node webpack will compile for usage in a Node.js-like environment (uses Node.js require to load chunks and not touch any built in modules like fs or path).</p>&#xA;</blockquote>&#xA;&#xA;<h2>Multiple targets</h2>&#xA;&#xA;<p>Keep in mind that because of these differences, after you set <code>node-webkit</code> as your target, the web version isn't going to work in you browser. If you want to develop in both environment you have to create an isomorphic library by introducing multiple configurations with their own output. Just how the <a href=""https://webpack.js.org/concepts/targets/#multiple-targets"" rel=""nofollow noreferrer"">Webpack 2 Multiple Targets documentation</a> does it:</p>&#xA;&#xA;<pre><code>var path = require('path');&#xA;var serverConfig = {&#xA;  target: 'node',&#xA;  output: {&#xA;    path: path.resolve(__dirname, 'dist'),&#xA;    filename: 'lib.node.js'&#xA;  }&#xA;  //…&#xA;};&#xA;&#xA;var clientConfig = {&#xA;  target: 'web', // &lt;=== can be omitted as default is 'web'&#xA;  output: {&#xA;    path: path.resolve(__dirname, 'dist'),&#xA;    filename: 'lib.js'&#xA;  }&#xA;  //…&#xA;};&#xA;&#xA;module.exports = [ serverConfig, clientConfig ];&#xA;</code></pre>&#xA;",1494454,"",,"",,2017-02-24T18:42:59,"","",,0,,,
42492360,2,,42491686,2017-02-27T17:43:32,,1,,"<p>Streams can often be useful for high performance as they allow you to process one line at a time without loading the whole file into memory. </p>&#xA;&#xA;<p>In this case however, you are loading each line and then concatenating onto your existing string (<code>fileContents.innerHTML</code>) with <code>+=</code>. All that concatenating is likely to be slower than just loading the whole contents of the file as one string. Worse still, you are outputting HTML every time you read in a line. So with 20k lines you are asking the rendering engine to render HTML 20,000 times!</p>&#xA;&#xA;<p>Instead, try reading in the file as one string, and outputting the HTML just once.</p>&#xA;&#xA;<pre><code>fs.readFile(pathToFile, (err, data) =&gt; {&#xA;  if (err) throw err;&#xA;  fileContents.innerHTML = data;&#xA;});&#xA;</code></pre>&#xA;",174979,"",,"",,2017-02-27T17:43:32,"","",,1,,,
42519111,2,,42516420,2017-02-28T21:31:49,,1,,"<p>To access native resources on devices you'll need to be running an electron <code>BrowserWindow</code> with <code>nodeIntegration</code> enabled. This is the default but there are big <a href=""https://electron.atom.io/docs/tutorial/security/"" rel=""nofollow noreferrer"">security implications</a> when loading content from the web into a node enabled <code>BrowserWindow</code>. If you're site is compromised through XSS, all your clients PC's will be open to remote code execution. </p>&#xA;&#xA;<p>For that reason you should build a backend service with your API and then host a front end on a website and a distributed version in your app. You can still build the two from the same code.</p>&#xA;",106623,"",,"",,2017-02-28T21:31:49,"","",,2,,,
42583040,2,,42568238,2017-03-03T15:44:44,,1,,"<blockquote>&#xA;  <p>However, is this the best possible way to do that without resorting to a third-party library?</p>&#xA;</blockquote>&#xA;&#xA;<p>No.</p>&#xA;&#xA;<blockquote>&#xA;  <p>How have other people done it?</p>&#xA;</blockquote>&#xA;&#xA;<p>There are three kinds of other solutions:</p>&#xA;&#xA;<ul>&#xA;<li>just use that library. Being used is its entire purpose.</li>&#xA;<li>reinvent that library. Because then it's not third-party any more, whatever benefits that may have.</li>&#xA;<li><p>use promises! (And partial application)</p>&#xA;&#xA;<pre><code>function makeExec(command) {&#xA;    return function(/* ignore results */) {&#xA;        return new Promise(function(resolve, reject) {&#xA;            child_process.exec(command, function(err, stdout, stderr) {&#xA;                if (err != null) reject(Object.assign(err, {stderr}));&#xA;                else resolve(stdout);&#xA;            });&#xA;        });&#xA;    });&#xA;}&#xA;Promise.resolve()&#xA;.then(makeExec(""git pull""))&#xA;.then(makeExec(""git push -u origin branchname""))&#xA;.then(makeExec(""git pull origin develop""))&#xA;.then(makeExec(""git checkout develop""))&#xA;.then(makeExec(""git merge branchname""))&#xA;.then(makeExec(""git push""))&#xA;.catch(function(err) {&#xA;    //display an error message&#xA;})&#xA;</code></pre></li>&#xA;</ul>&#xA;",1048572,"",,"",,2017-03-03T15:44:44,"","",,1,,,
42587030,2,,42585573,2017-03-03T19:34:08,,1,,"<p>You can't write to the file system using HTTP, that's for the web only.</p>&#xA;&#xA;<p>Electron is built on Node.js. So take a look at the <a href=""https://nodejs.org/api/fs.html"" rel=""nofollow noreferrer"">Node.js File System module</a>. For example:</p>&#xA;&#xA;<pre><code>fs.writeFile('/src/db/db.json', data, (err) =&gt; {&#xA;  if (err) throw err;&#xA;  console.log('It\'s saved!');&#xA;});&#xA;</code></pre>&#xA;",174979,"",,"",,2017-03-03T19:34:08,"","",,3,,,
42602118,2,,42599041,2017-03-04T22:27:05,,1,,"<p>I suspect that the function serializeUpgradeData is called when there is no 'upgradeFrame' yet, so the solution would be to use callbacks or promises, your call</p>&#xA;&#xA;<pre><code>  function loadFileAsFrame(fileName ,callback){&#xA;    upgradeFrame.id ='upgradeFrame'&#xA;    upgradeFrame.style.display = 'none';&#xA;    document.body.appendChild(upgradeFrame);&#xA;    upgradeFrame.src = fileName;&#xA;   callback(upgradeFrame)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then use it ;</p>&#xA;&#xA;<pre><code>        function openFileDialog(){&#xA;        dialog.showOpenDialog({properties: ['openFile'], filters: [{name:'HTML', extensions:&#xA;                              ['html', 'htm']}]}, function (fileName) {&#xA;&#xA;            loadFileAsFrame(fileName , function(upgradeFrame){&#xA;            serializeUpgradeData(upgradeFrame);&#xA;         });       &#xA;     });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>finally </p>&#xA;&#xA;<pre><code>function serializeUpgradeData(upgradeFrame){&#xA;     var workingFrame = upgradeFrame&#xA;     var iframeWrapper = document.createElement('div');&#xA;     iframeWrapper.innerHTML = workingFrame.contentDocument.body.innerHTML;&#xA;     var tableData = iframeWrapper.querySelectorAll('div &gt; table:nth-child(2) &gt; tbody &gt; tr');&#xA;     return tableData;&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>Now there is another way much simpler to do what you want to do&#xA;If i understand correctly , you want to pick / choose an html file and display it in an electron window , for that you should use the browserWindow to create a new window and just give it the file url as an entry point . It will give more control , and less code to write.</p>&#xA;&#xA;<p>Hope this helps</p>&#xA;",4778342,"",4778342,"",2017-03-05T15:06:42,2017-03-05T15:06:42,"","",,1,,,
42607167,2,,42599764,2017-03-05T10:25:06,,1,,"<p>Officially the following way is suggested in the documentation:&#xA;<a href=""http://docs.nwjs.io/en/latest/For%20Users/FAQ/"" rel=""nofollow noreferrer"">http://docs.nwjs.io/en/latest/For%20Users/FAQ/</a></p>&#xA;&#xA;<p>You have to register a global hotkey:</p>&#xA;&#xA;<pre><code>nw.App.registerGlobalHotKey(new nw.Shortcut({&#xA;  key: ""Escape"",&#xA;  active: function () {&#xA;    // decide whether to leave fullscreen mode&#xA;    // then ...&#xA;    nw.Window.get().leaveFullscreen();&#xA;  }&#xA;}));&#xA;</code></pre>&#xA;&#xA;<p>You can put this snippet at the beginning of Your app.</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;  &lt;script&gt;&#xA;nw.App.registerGlobalHotKey(new nw.Shortcut({&#xA;  key: ""Escape"",&#xA;  active: function () {&#xA;    // decide whether to leave fullscreen mode&#xA;    // then ...&#xA;    nw.Window.get().leaveFullscreen();&#xA;  }&#xA;}));&#xA;  &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",5653484,"",,"",,2017-03-05T10:25:06,"","",,0,,,
42396548,2,,42396462,2017-02-22T16:04:50,,2,,"<p>Because there is a mismatch between the way you are importing and exporting, use either <code>named or default import/export</code>.</p>&#xA;&#xA;<p><strong>Default import/export:</strong></p>&#xA;&#xA;<pre><code>import routes from './routes';&#xA;</code></pre>&#xA;&#xA;<p>Define it like this in <code>routes.js</code>:</p>&#xA;&#xA;<pre><code>let routes = (&#xA;    &lt;Route path=""/"" component={Root} /&gt;&#xA;);&#xA;&#xA;export default routes;&#xA;</code></pre>&#xA;&#xA;<p><strong>named import/export:</strong></p>&#xA;&#xA;<pre><code>import {routes} from './routes';&#xA;</code></pre>&#xA;&#xA;<p>Define it like this in <code>routes.js</code>:</p>&#xA;&#xA;<pre><code>let routes = (&#xA;    &lt;Route path=""/"" component={Root} /&gt;&#xA;);&#xA;&#xA;export routes;&#xA;</code></pre>&#xA;&#xA;<p>Since your are returning all the routes by App component, so render that component by <code>ReactDOM.render</code>, like this:</p>&#xA;&#xA;<pre><code>ReactDOM.render(&#xA;    &lt;App/&gt;,&#xA;    document.getElementById('app')&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>Read the difference between these two: <a href=""https://danmartensen.svbtle.com/build-better-apps-with-es6-modules"" rel=""nofollow noreferrer"">https://danmartensen.svbtle.com/build-better-apps-with-es6-modules</a></p>&#xA;",5185595,"",5185595,"",2017-02-22T16:33:10,2017-02-22T16:33:10,"","",,0,,,
42519361,2,,42424174,2017-02-28T21:47:12,,2,,"<p>The easiest thing will be to use Google Analytics or a similar offering.</p>&#xA;&#xA;<p>For most you'll have two major issues to solve over hosting on a website:</p>&#xA;&#xA;<ol>&#xA;<li>Electron does not store cookies or state between runs. You have to store this manually</li>&#xA;<li>Most analytics libraries ignore <code>file:</code> urls so that they only get hits from the internet</li>&#xA;</ol>&#xA;&#xA;<p>Use <a href=""https://www.npmjs.com/package/electron-google-analytics"" rel=""nofollow noreferrer"">an existing library</a> and <a href=""https://github.com/jaystack/electron-ga"" rel=""nofollow noreferrer"">most</a> of these issues will already be solved for </p>&#xA;",106623,"",106623,"",2018-02-09T03:59:05,2018-02-09T03:59:05,"","",,0,,,
42530323,2,,42495365,2017-03-01T11:19:16,,2,,"<p>Ok, for the use case I've actually found a pretty ok way to debug the forked process. I will write it up for future reference of people with similar needs: </p>&#xA;&#xA;<p>I detached development of the child process from the main process. Both only communicate through <code>process.on('message', handler)</code> and <code>child.send(...)</code>. So basically I make my <code>process.on</code> call in the child process conditional on whether I set <code>process.env.NODE_ENV==='DEBUG'</code>. Then I made a launch configuration just for the child process, like this</p>&#xA;&#xA;<pre><code>{&#xA;    ""type"": ""node2"",&#xA;    ""request"": ""launch"",&#xA;    ""name"": ""Launch child process"",&#xA;    ""program"": ""${workspaceRoot}/src/main/child_process/Child.ts"",&#xA;    ""cwd"": ""${workspaceRoot}"",&#xA;    ""outFiles"": [&#xA;        ""${workspaceRoot}/dist/child.js""&#xA;    ],&#xA;    ""env"": {&#xA;        ""NODE_ENV"": ""DEBUG""&#xA;    },&#xA;    ""sourceMaps"": true&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then I can just mock the requests that would come in through <code>process.on</code> in a production environment by calling the handler manually with mock messages. </p>&#xA;",2256928,"",,"",,2017-03-01T11:19:16,"","",,0,,,
42602002,2,,42590852,2017-03-04T22:12:24,,2,,"<p>I am working on a project with  the same requirements about files manipulation and database records so let me give you some tips :</p>&#xA;&#xA;<ul>&#xA;<li><p>Use a small footprint database (leveldb , nedb , lovefield ) because you will need to pack it inside the app.</p></li>&#xA;<li><p>Do not call the fs module directly from the renderer process , always use ipc (for decoupling reasons).</p></li>&#xA;<li><p>structure your app by separating the main (electron-main , node modules etc) files and the renderer (the view , client side js , images...) files</p></li>&#xA;<li><p>You need a third party module for files and directories to make sure everything is running smoothly , i use mkdirp to ensure that the directory exists , you can use fs-extra too which is fine for handling both (fs doesn't like non-existing locations).</p></li>&#xA;<li><p>if the files  are big in size , use streams to move assets , <code>createReadStream</code> and <code>createWriteStream</code> should be the only methods used to read  &amp; write files.</p></li>&#xA;<li><p>If you need to watch some directories , use chokidar , it is far more efficient than the fs.watch method.</p></li>&#xA;<li><p>Use a framework for the viewpart , depends on what you are familiar with , but angluar , react , vuejs  will be a good choice.</p></li>&#xA;</ul>&#xA;&#xA;<p>Finally check this link , it will help you get an overview of the things you could use &#xA;<a href=""https://github.com/sindresorhus/awesome-electron"" rel=""nofollow noreferrer"">https://github.com/sindresorhus/awesome-electron</a></p>&#xA;&#xA;<p>Hope it helps</p>&#xA;",4778342,"",4778342,"",2017-03-05T00:46:32,2017-03-05T00:46:32,"","",,3,,,
42487031,2,,42468022,2017-02-27T13:29:41,,3,,"<p>Figured it out by looking at pages and pages of other people's code.</p>&#xA;&#xA;<p>Apparently my initial understanding of WebSockets was incorrect - I would not need a server-side change to use WebSockets in my situation. </p>&#xA;&#xA;<p>I had to transcode the stream into MPEG2 from within Electron using an <code>ffmpeg</code> Node.js wrapper, which sends the video to an Express server instance, which then serves the video within a static Web page rendered by <code>jsmpeg</code>. The static Web page is then displayed as an IFrame within the main Electron app page.</p>&#xA;&#xA;<p>The resulting stream has considerably more visual artifacts than what one would see when playing the raw UDP stream with <code>ffplay</code>, and this approach probably introduces a lot of latency, but it works well enough for my needs.</p>&#xA;",3350320,"",,"",,2017-02-27T13:29:41,"","",,0,,,
42508682,2,,42494701,2017-02-28T12:22:57,,3,,"<p>The built Electron app uses the <a href=""https://github.com/electron/asar"" rel=""nofollow noreferrer"">Asar</a> format. Asar is an archive format (it's really just one big file) though in Electron you are able to read from it as if it were a standard directory.</p>&#xA;&#xA;<p>I presume (though I have not seen it explicitly documented) that it is not possible to write to an Asar with the <code>fs</code> functions. In any case there are almost certainly more appropriate locations to write data.</p>&#xA;&#xA;<p>Try writing to a different path. Electron provides a number of useful paths using <a href=""https://electron.atom.io/docs/api/app/#appgetpathname"" rel=""nofollow noreferrer""><code>app.getPath(name)</code></a> so you could for example write to the <code>userData</code> directory which holds configuration files for your app.</p>&#xA;",174979,"",,"",,2017-02-28T12:22:57,"","",,0,,,
42579572,2,,42540071,2017-03-03T13:01:25,,3,,"<p>Now there are two ways you can consider going about this: one can be done in the main process, the other requires cross-process messaging.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h1>Main Process (alone)</h1>&#xA;&#xA;<p>Using the main process, we can import the <code>dialog</code> class during our require statement, and then use the method (as suggested by Arun in another answer):</p>&#xA;&#xA;<p><code>dialog.showMessageBox([browserWindow, ]options[, callback])</code></p>&#xA;&#xA;<p>This will display a dialog box native to the operating system.  You may even find you want to use this for some things people do in your renderer process, but I'll get on to that next.</p>&#xA;&#xA;<h1>Inter-process Communication</h1>&#xA;&#xA;<p>Your tray menu will have been instantiated in your main process, but the result of the event has to take place in the renderer process to show your modal.</p>&#xA;&#xA;<p>In the main process, we can import <code>ipcMain</code>, and in the renderer process - you guessed it, <code>ipcRenderer</code>.</p>&#xA;&#xA;<p>In your click event, you can do use the <code>BrowserWindow#webContents#send</code> method to send your render an event, let's call it 'ShowMyModal':</p>&#xA;&#xA;<p><code>myWindowInstance.webContents.send('ShowMyModal');</code></p>&#xA;&#xA;<p>Now, in the main process, we can listen for this event with the <code>ipcMain</code> object.</p>&#xA;&#xA;<pre><code>ipcMain.on('ShowMyModal', function () {&#xA;  // the modal event has fired!&#xA;&#xA;  $('#myModal').show();&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>You will probably find inter-process communication for this sort of stuff. Get used to throwing IPC events back and forth, it really shows the beauty of electron and its renderer process.</p>&#xA;",2420976,"",,"",,2017-03-03T13:01:25,"","",,1,,,
42497207,2,,42462072,2017-02-27T22:47:42,,4,,"<p>A couple of problems:</p>&#xA;&#xA;<ul>&#xA;<li><p>Use <code>sys.stdin.readline()</code> instead of <code>sys.stdin.readlines()</code>. Otherwise, Python will continue to wait for you to finish the input stream. You should be able to send a <code>^D</code> signal to terminate the end of the input, but that didn't work for me.</p></li>&#xA;<li><p>To keep the stream open, wrap the command line input in a loop (see Python code below)</p></li>&#xA;</ul>&#xA;&#xA;<p>Also important:</p>&#xA;&#xA;<ul>&#xA;<li><p>Input automatically appends <code>\n</code>, but output does not. For whatever reason, output needs both <code>\n</code> and <code>sys.stdout.flush()</code> to work; one or the other won't cut it.</p></li>&#xA;<li><p>Python-shell seems to cache your Python code. So if you make any changes to your Python file, you must restart the nwjs application for it to take effect.</p></li>&#xA;</ul>&#xA;&#xA;<p>Here is the full sample code that works:</p>&#xA;&#xA;<p>script.py</p>&#xA;&#xA;<pre><code>import sys&#xA;&#xA;def main():&#xA;    while True:&#xA;        command = sys.stdin.readline()&#xA;        command = command.split('\n')[0]&#xA;        if command == ""hello"":&#xA;            sys.stdout.write(""You said hello!\n"")&#xA;        elif command == ""goodbye"":&#xA;            sys.stdout.write(""You said goodbye!\n"")&#xA;        else:&#xA;            sys.stdout.write(""Sorry, I didn't understand that.\n"")&#xA;        sys.stdout.flush()&#xA;&#xA;if __name__ == '__main__':&#xA;    main()&#xA;</code></pre>&#xA;&#xA;<p>main.js</p>&#xA;&#xA;<pre><code>var PythonShell = require('python-shell');&#xA;var pyshell = new PythonShell('script.py');&#xA;&#xA;pyshell.on('message', function (message) {&#xA;  console.log(message);&#xA;});&#xA;&#xA;pyshell.send('hello');&#xA;</code></pre>&#xA;&#xA;<p>Now use <code>pyshell.send(""hello"")</code>, <code>pyshell.send(""goodbye"")</code>, or <code>pyshell.send(""garbage"")</code> and receive an immediate response in the JS console!</p>&#xA;",353278,"",,"",,2017-02-27T22:47:42,"","",,0,,,
42547398,2,,42547070,2017-03-02T05:17:23,,5,,"<p>Two things that will run sooner than that <code>setTimeout</code>:</p>&#xA;&#xA;<ul>&#xA;<li><p><a href=""https://nodejs.org/api/process.html#process_process_nexttick_callback_args"" rel=""nofollow noreferrer""><code>process.nextTick</code></a> callbacks (NodeJS-specific):</p>&#xA;&#xA;<blockquote>&#xA;  <p>The <code>process.nextTick()</code> method adds the callback to the ""next tick queue"". Once the current turn of the event loop turn runs to completion, all callbacks currently in the next tick queue will be called.</p>&#xA;  &#xA;  <p>This is not a simple alias to <code>setTimeout(fn, 0)</code>. It is much more efficient. It runs before any additional I/O events (including timers) fire in subsequent ticks of the event loop.</p>&#xA;</blockquote></li>&#xA;<li><p>Promise settlement notifications</p></li>&#xA;</ul>&#xA;&#xA;<p>So those might be a tools for your toolbelt, doing a mix of one or both of those with <code>setTimeout</code> to achieve the balance you want.</p>&#xA;&#xA;<p>Details:</p>&#xA;&#xA;<p>As you probably know, a given JavaScript thread runs on the basis of a task queue (the spec calls it a job queue); and as you probably know, there's one main default UI thread in browsers and NodeJS runs a single thread.</p>&#xA;&#xA;<p>But in fact, there are at least two task queues in modern implementations: The main one we all think of (where <code>setTimeout</code> and event handlers put their tasks), and the ""microtask"" queue where certain async operations are placed during the processing of a main task (or ""macrotask""). Those microtasks are processed as soon as the macrotask completes, <em>before</em> the next macrotask in the main queue&nbsp;&mdash; even if that next macrotask was queued before the microtasks were.</p>&#xA;&#xA;<p><code>nextTick</code> callbacks and promise settlement notifications are both microtasks. So scheduling either schedules an async callback, but one which will happen before the next main task.</p>&#xA;&#xA;<p>We can see that in the browser with <code>setInterval</code> and a promise resolution chain:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>let counter = 0;&#xD;&#xA;&#xD;&#xA;// setInterval schedules macrotasks&#xD;&#xA;let timer = setInterval(() =&gt; {&#xD;&#xA;  $(""#ticker"").text(++counter);&#xD;&#xA;}, 100);&#xD;&#xA;&#xD;&#xA;// Interrupt it&#xD;&#xA;$(""#hog"").on(""click"", function() {&#xD;&#xA;  let x = 300000;&#xD;&#xA;&#xD;&#xA;  // Queue a single microtask at the start&#xD;&#xA;  Promise.resolve().then(() =&gt; console.log(Date.now(), ""Begin""));&#xD;&#xA;&#xD;&#xA;  // `next` schedules a 300k microtasks (promise settlement&#xD;&#xA;  // notifications), which jump ahead of the next task in the main&#xD;&#xA;  // task queue; then we add one at the end to say we're done&#xD;&#xA;  next().then(() =&gt; console.log(Date.now(), ""End""));&#xD;&#xA;&#xD;&#xA;  function next() {&#xD;&#xA;    if (--x &gt; 0) {&#xD;&#xA;      if (x === 150000) {&#xD;&#xA;        // In the middle; queue one in the middle&#xD;&#xA;        Promise.resolve().then(function() {&#xD;&#xA;          console.log(Date.now(), ""Middle"");&#xD;&#xA;        });&#xD;&#xA;      }&#xD;&#xA;      return Promise.resolve().then(next);&#xD;&#xA;    } else {&#xD;&#xA;      return 0;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;$(""#stop"").on(""click"", function() {&#xD;&#xA;  clearInterval(timer);&#xD;&#xA;});</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""ticker""&gt;&amp;nbsp;&lt;/div&gt;&#xD;&#xA;&lt;div&gt;&lt;input id=""stop"" type=""button"" value=""Stop""&gt;&lt;/div&gt;&#xD;&#xA;&lt;div&gt;&lt;input id=""hog"" type=""button"" value=""Hog""&gt;&lt;/div&gt;&#xD;&#xA;&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""&gt;&lt;/script&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>When you run that and click the <strong>Hog</strong> button, note how the counter display freezes, then keeps going again. That's because of the 300,000 microtasks that get scheduled ahead of it. Also note the timestamps on the three log messages we write (they don't appear in the snippet console until a macrotask displays them, but the timestamps show us when they were logged).</p>&#xA;&#xA;<p>So basically, you could schedule a bunch of microtasks, and periodically let those run out and run the next macrotask.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Note</strong>: I've used <code>setInterval</code> for the browser example in the snippet, but <code>setInterval</code>, specifically, may not be a good choice for a similar experiment using NodeJS, as NodeJS's <code>setInterval</code> is a bit different from the one in browsers and has some surprising timing characteristics.</p>&#xA;",157247,"",157247,"",2017-03-02T05:22:45,2017-03-02T05:22:45,"","",,1,,,
42597818,2,,42597350,2017-03-04T15:37:17,,-2,,"<p>I think that I hava known how to.The reason why I can't track './assets/imports' is that I can't open the file in CDT.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/ul9Am.png"" rel=""nofollow noreferrer"">I can't find any js file below the 'assets' folder</a></p>&#xA;&#xA;<p>BUT,finally,<a href=""https://i.stack.imgur.com/jAAqW.png"" rel=""nofollow noreferrer"">I found I can search any js file I want</a></p>&#xA;&#xA;<p>So, I can track it and set a breakpoint in it.</p>&#xA;&#xA;<p>What a nood!!! ^_^</p>&#xA;",1890758,"",,"",,2017-03-04T15:37:17,"","",,0,,,
38235426,2,,38165339,2016-07-06T23:29:21,,0,,"<p>I spent many many hours the past few days looking into this and it looks as if it's not possible (at least currently).</p>&#xA;&#xA;<p>My best option is to use the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/FileReader"" rel=""nofollow"">FileReader API</a>. So when a text file is dropped, detect it's file type and if the app supports it say a text file I can save the file with the same name and type in the folder; If it's an image I can convert it to a dataurl/base64.</p>&#xA;&#xA;<p>Kind of sucks but best I can do for now.</p>&#xA;",710887,"",,"",,2016-07-06T23:29:21,"","",,0,,,
38381657,2,,37969042,2016-07-14T18:30:47,,0,,"<p>First off, Spectron (which is a wrapper for WebdriverIO) and WebdriverJS (which is part of Selenium-Webdriver) are two different frameworks, you only need to use one of them for your tests.</p>&#xA;&#xA;<p>If you are using WebdriverJS, then you need to run <code>./node_modules/.bin/chromedriver</code> in this step: <a href=""http://electron.atom.io/docs/tutorial/using-selenium-and-webdriver/#start-chromedriver"" rel=""nofollow"">http://electron.atom.io/docs/tutorial/using-selenium-and-webdriver/#start-chromedriver</a></p>&#xA;",89561,"",,"",,2016-07-14T18:30:47,"","",,0,,,
38424248,2,,38423067,2016-07-17T17:54:39,,0,,"<p>I found it.</p>&#xA;&#xA;<ol>&#xA;<li>Do a build for your app</li>&#xA;<li>Right click -> show package content</li>&#xA;<li>In info.plist add the following</li>&#xA;</ol>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/tXggW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tXggW.png"" alt=""Can&#39;t pase code. So in image""></a></p>&#xA;&#xA;<ol start=""4"">&#xA;<li>Open app once to register customURL into system.</li>&#xA;</ol>&#xA;&#xA;<p>In terminal enter <strong>/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -dump|egrep ""(bindings.*:$)""|sort</strong> to check wheather yours is in the list.</p>&#xA;",2338769,"",,"",,2016-07-17T17:54:39,"","",,2,,,
38253697,2,,38250503,2016-07-07T19:22:17,,1,,"<p>Create a Buffer from the image data and set its encoding to <code>binary</code>. Then pass that data into a <code>stream.PassThrough</code> and pipe that into a <code>stream.Writable</code>.</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;var stream = require('stream');&#xA;&#xA;var imgStream = new stream.PassThrough();&#xA;imgStream.end(Buffer.from(data, 'binary'));&#xA;&#xA;var wStream = fs.createWriteStream('./&lt;dest&gt;.&lt;ext&gt;');&#xA;&#xA;imgStream.once('end', () =&gt; {&#xA;    console.log('Image Written');&#xA;});&#xA;&#xA;imgStream.once('error', (err) =&gt; {&#xA;    console.log(err);&#xA;});&#xA;&#xA;imgStream.pipe(wStream);&#xA;</code></pre>&#xA;",2980607,"",2980607,"",2016-07-07T20:09:25,2016-07-07T20:09:25,"","",,2,,,
38355637,2,,38342094,2016-07-13T15:15:22,,1,,"<p>Looks like sourceforge has some issues according to this brew issue at github: </p>&#xA;&#xA;<p><a href=""https://github.com/Homebrew/homebrew-core/issues/2952"" rel=""nofollow"">https://github.com/Homebrew/homebrew-core/issues/2952</a> </p>&#xA;&#xA;<p>So I think the best is in this case to wait. As I'm having the same issue.</p>&#xA;",1071432,"",,"",,2016-07-13T15:15:22,"","",,0,,,
38217185,2,,38212956,2016-07-06T05:59:30,,2,,"<p>There is a an <a href=""https://github.com/electron/electron/issues/6122"" rel=""nofollow"">active issue at the Electron Github repository</a> concerning this problem that is being investigated. </p>&#xA;&#xA;<p>The current workaround seems to require a little time between both calls:</p>&#xA;&#xA;<pre><code>setTimeout(() =&gt; remote.getCurrentWindow().setMaximumSize(300, 300), 200);&#xA;remote.getCurrentWindow().setMinimumSize(50, 50);&#xA;</code></pre>&#xA;",1792564,"",,"",,2016-07-06T05:59:30,"","",,5,,,
38373229,2,,38361996,2016-07-14T11:40:22,,2,,"<p>If anyone happens to need an answer to this question: I do have a solution to this, but I have no idea if this is considered best practice. I couldn't find any good documentation for including 3rd party precompiled binaries, so I just fiddled with it until it finally worked. Here's what I did (starting with the electron quick start, node.js v6):</p>&#xA;&#xA;<p>From the app directory I ran the following commands to include the ffmpeg binary as a module:</p>&#xA;&#xA;<pre><code>mkdir node_modules/ffmpeg&#xA;cp /usr/local/bin/ffmpeg node_modules/ffmpeg/&#xA;ln -s ../ffmpeg/ffmpeg node_modules/.bin/ffmpeg&#xA;</code></pre>&#xA;&#xA;<p>(replace /usr/local/bin/ffmpeg with your current binary path, download it from here) Placing the link allowed electron-packager to include the binary I saved to node_modules/ffmpeg/.</p>&#xA;&#xA;<p>Then to get the bundled app path I installed the npm package app-root-dir by running the following command:</p>&#xA;&#xA;<pre><code>npm i -S app-root-dir&#xA;</code></pre>&#xA;&#xA;<p>Since I could then get the app path, I just appended the subfolder for my binary and spawned from there. This is the code that I placed in renderer.js:.</p>&#xA;&#xA;<pre><code>var appRootDir = require('app-root-dir').get();&#xA;var ffmpegpath=appRootDir+'/node_modules/ffmpeg/ffmpeg';&#xA;console.log(ffmpegpath);&#xA;&#xA;const&#xA;    spawn = require( 'child_process' ).spawn,&#xA;    ffmpeg = spawn( ffmpegpath, ['-i',clips_input[0]]);  //add whatever switches you need here&#xA;&#xA;ffmpeg.stdout.on( 'data', data =&gt; {&#xA;     console.log( `stdout: ${data}` );&#xA;    });&#xA;   ffmpeg.stderr.on( 'data', data =&gt; {&#xA;console.log( `stderr: ${data}` );&#xA;    });&#xA;</code></pre>&#xA;",3198281,"",,"",,2016-07-14T11:40:22,"","",,0,,,
38422387,2,,38420189,2016-07-17T14:36:51,,2,,"<p><strong>Update</strong>&#xA;So you gave me a clue that I disregarded and that led me down a rabbit hole that took a bit to get out of. I even built a <a href=""https://plnkr.co/edit/9NfnBSgnqP3gmOO9vwSW"" rel=""nofollow"">plunker</a>, to prove to myself that what you were trying to do was valid (even though it's obvious what you were doing would work). Sure enough I was able to use the Array.prototype.find() method without issue.</p>&#xA;&#xA;<pre><code>//excerpt from plunker src/video.service.ts&#xA;getVideo(id: number): Observable&lt;IVideo&gt; {&#xA;   return this.getVideos()&#xA;        .map((videos: IVideo[]) =&gt; videos.find(v =&gt; v.id === id));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The difference between the plunker and VS Code is that in the plunker SystemJS was actually performing the TypeScript transpile, where VS Code performs the transpile with the <a href=""https://www.typescriptlang.org/"" rel=""nofollow"">TypeScript</a> compiler itself.</p>&#xA;&#xA;<p>However, you point out in the comments that you're not getting this error when you are performing the transpile. You're seeing this error in the VS Code ""Problems"" window before you even attempt to transpile the .ts code.</p>&#xA;&#xA;<p>I found that very strange, so I went back to the basics. I created a new VS Code project and I created a simple interface and instantiated an Array. Then I attempted to perform a .find() on that Array. VS Code immediately notified me in the Problems window that this method did not exist. The VS Code Problem window isn't using TypeScript to identify problems.</p>&#xA;&#xA;<p>VS Code is actually using another package called <a href=""https://code.visualstudio.com/docs/runtimes/nodejs#_intellisense-and-typings"" rel=""nofollow"">Typings</a>, typings allow VS Code to extend it's own capability in parsing your code and providing intellisense. There are already hints in your package.json(devDependencies) file and in the tsconfig.json(exclude section) file as well that you have Typings.</p>&#xA;&#xA;<p>This means you have the tools installed but the project isn't configured. I am betting if you look in your ""typings.json"" file you should see an entry for ""es6-shim"". You should see something like this(if this doesn't exist create the file in your root and put that in it).</p>&#xA;&#xA;<pre><code>{&#xA;""globalDependencies"": {&#xA;    ""es6-shim"": ""github:DefinitelyTyped/DefinitelyTyped/es6-shim/es6-shim.d.ts#7de6c3dd94feaeb21f20054b9f30d5dabc5efabd""&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In order for VS Code to use ""es6-shim"" it needs to be installed. The typings package has already been installed but the typing itself hasn't been installed in the project. To do this in VS Code on the toolbar select ""View -> Integrated Terminal"" (ctrl + `). You will see a command prompt. If you have Typings installed globally you can type in this command.</p>&#xA;&#xA;<pre><code>typings install&#xA;</code></pre>&#xA;&#xA;<p>otherwise(it's installed locally)</p>&#xA;&#xA;<pre><code>node_modules\.bin\typings install&#xA;</code></pre>&#xA;&#xA;<p>if either of those give you an error then Typings is not installed and you need to ensure that your package.json still has the dependency ""typings"". If it does then do ""npm install"", then repeat the step above.</p>&#xA;&#xA;<p>After that, restart VS Code and the error shouldn't exist anymore!</p>&#xA;&#xA;<p>Also you should update your tsconfig.json files ""exclude"" section to</p>&#xA;&#xA;<pre><code>""exclude"": [&#xA;    ""node_modules"",&#xA;    ""typings/globals"",//&lt;----------&#xA;    ""typings/index.d.ts""&#xA;]&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>When is this error occurring? Is it at compile time or when you're running your Electron app? Also what version of TypeScript are you using? and what version of the Angular2 beta are you using? Your ""package.json"" file will tell you these things. </p>&#xA;&#xA;<p>If this is happening at compile time it means TypeScript doesn't know the ""find"" method for an array, which would be strange. TypeScript doesn't know about your webpack stuff, so upgrading your TypeScript version might do it (I am running '1.8.10' and it recognizes the 'find' method).</p>&#xA;&#xA;<p>If this is happening inside of Electron running, it could be a few things. </p>&#xA;&#xA;<p>It could be webpack is not loading the shim, you should be able to see if that is true by turning on the developer tool and looking under the Network tab and see if you see a request for the shim. If you don't see it, then you know it's a webpack issue.</p>&#xA;&#xA;<p>It could be that the es6-shim is missing the 'find' method inside of it. It might be best to use an alternative <a href=""https://www.npmjs.com/package/core-js"" rel=""nofollow"">shim</a>, in the link you would want to use the /client/shim.min.js file.</p>&#xA;&#xA;<p>It could be the version of the angular beta you're using didn't have that defined in the es6-shim. Which would be weird, but you could upgrade yourself the newest version of <a href=""https://angular.io/docs/ts/latest/quickstart.html"" rel=""nofollow"">Angular2</a>, in the example they use SystemJS to call bootstrap, so you might need to translate that to webpack. I am running @angular version '2.0.0-rc.4' without the shim and I can use the 'find' method at runtime.</p>&#xA;&#xA;<p>Also thinking it could be the version of Electron you're running (because I don't need the shim), I am running <a href=""https://www.npmjs.com/package/electron-prebuilt"" rel=""nofollow"">this</a> version of Electron.</p>&#xA;",617268,"",617268,"",2016-07-18T06:04:24,2016-07-18T06:04:24,"","",,6,,,
38357655,2,,35620764,2016-07-13T16:58:48,,3,,"<p>Someone has left the following on that discussion thread.</p>&#xA;&#xA;<p><a href=""https://discuss.atom.io/t/how-to-disable-alert-dialogs-when-errors-occur/20037/4"" rel=""nofollow"">Disable error dialogs by overriding</a></p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const dialog = electron.dialog;&#xA;&#xA;// Disable error dialogs by overriding&#xA;dialog.showErrorBox = function(title, content) {&#xA;    console.log(`${title}\n${content}`);&#xA;};&#xA;</code></pre>&#xA;",2923369,"",,"",,2016-07-13T16:58:48,"","",,2,,,
38342337,2,,38309240,2016-07-13T03:45:52,,4,,"<p>If you close a browser window it will be destroyed, so you can't hide or show it again after that. Since you want to hide it and show it again later your should add a listener for the <a href=""https://github.com/electron/electron/blob/v1.2.6/docs/api/browser-window.md#event-close"" rel=""nofollow""><code>close</code> event</a> that calls <code>preventDefault()</code> and hides the window instead of closing it.</p>&#xA;",1259938,"",,"",,2016-07-13T03:45:52,"","",,0,,,
38401579,2,,38335004,2016-07-15T17:01:43,,12,,"<p>According atom source code the query string method is a reliable way to do that very simply, especially when we only need to pass a unique string param:</p>&#xA;&#xA;<pre><code>// main process&#xA;win1.loadURL(`file://${__dirname}/app/app.html?id=${id}`);&#xA;&#xA;// rendered process&#xA;console.log(global.location.search);&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/6504"" rel=""noreferrer"">https://github.com/electron/electron/issues/6504</a></p>&#xA;",2028380,"",,"",,2016-07-15T17:01:43,"","",,2,,,
38407432,2,,38400604,2016-07-16T03:30:06,,12,,"<p>@morecchia808 is correct, the way built-in modules are accessed has changed in Electron v1.0. Your code can be fixed as follows:</p>&#xA;&#xA;<pre><code>const electron = require('electron')&#xA;const {app, BrowserWindow} = electron&#xA;</code></pre>&#xA;",1259938,"",,"",,2016-07-16T03:30:06,"","",,0,,,
38396112,2,,38391675,2016-07-15T12:27:18,,13,,"<p>Electron is the combination of Chromium, the web renderer used in Chrome, and Node.js. Adding Node.js to the mix gives Electron the ability to work with the native OS in ways normal web pages cannot. With Node.js at your disposal you have access to all the libraries that are currently available to Node, and so the answer to this question is the same as the answer to how to connect to MySQL from Node.js which you can find here: <a href=""https://stackoverflow.com/questions/5818312/mysql-with-node-js"">MySQL with Node.js</a>. The code in this answer should work in Electron.</p>&#xA;",3399439,"",-1,"",2017-05-23T11:54:55,2016-07-15T12:27:18,"","",,0,,,
38373289,2,,33152533,2016-07-14T11:43:29,,14,,"<p><em>See <strong>UPDATE</strong> below (this method isn't ideal now).</em></p>&#xA;&#xA;<p>I did find a solution to this, but I have no idea if this is considered best practice. I couldn't find any good documentation for including 3rd party precompiled binaries, so I just fiddled with it until it finally worked with my ffmpeg binary. Here's what I did (starting with the electron quick start, node.js v6):</p>&#xA;&#xA;<p><strong>Mac OS X method</strong></p>&#xA;&#xA;<p>From the app directory I ran the following commands in Terminal to include the ffmpeg binary as a module:</p>&#xA;&#xA;<pre><code>mkdir node_modules/ffmpeg&#xA;cp /usr/local/bin/ffmpeg node_modules/ffmpeg/&#xA;cd node_modules/.bin&#xA;ln -s ../ffmpeg/ffmpeg ffmpeg&#xA;</code></pre>&#xA;&#xA;<p>(replace <code>/usr/local/bin/ffmpeg</code> with your current binary path, download it from here) Placing the link allowed electron-packager to include the binary I saved to <code>node_modules/ffmpeg/</code>.</p>&#xA;&#xA;<p>Then to get the bundled app path (so that I could use an absolute path for my binary... relative paths didn't seem to work no matter what I did) I installed the npm package app-root-dir by running the following command:</p>&#xA;&#xA;<pre><code>npm i -S app-root-dir&#xA;</code></pre>&#xA;&#xA;<p>Now that I had the root app directory, I just append the subfolder for my binary and spawned from there. This is the code that I placed in renderer.js:.</p>&#xA;&#xA;<pre><code>var appRootDir = require('app-root-dir').get();&#xA;var ffmpegpath=appRootDir+'/node_modules/ffmpeg/ffmpeg';&#xA;console.log(ffmpegpath);&#xA;&#xA;const&#xA;    spawn = require( 'child_process' ).spawn,&#xA;    ffmpeg = spawn( ffmpegpath, ['-i',clips_input[0]]);  //add whatever switches you need here&#xA;&#xA;ffmpeg.stdout.on( 'data', data =&gt; {&#xA;     console.log( `stdout: ${data}` );&#xA;    });&#xA;   ffmpeg.stderr.on( 'data', data =&gt; {&#xA;console.log( `stderr: ${data}` );&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p><strong>Windows Method</strong></p>&#xA;&#xA;<ol>&#xA;<li>Open your electron base folder (electron-quick-start is the default name), then go into the node_modules folder.  Create a folder there called ffmpeg, and copy your static binary into this directory.  Note: it must be the static version of your binary, for ffmpeg I grabbed the latest Windows build <a href=""http://ffmpeg.zeranoe.com/builds/"" rel=""nofollow noreferrer"">here</a>.  </li>&#xA;<li><p>To get the bundled app path (so that I could use an absolute path for my binary... relative paths didn't seem to work no matter what I did) I installed the npm package app-root-dir by running the following command from a command prompt in my app directory:</p>&#xA;&#xA;<pre><code> npm i -S app-root-dir&#xA;</code></pre></li>&#xA;<li><p>Within your node_modules folder, navigate to the .bin subfolder.  You need to create a couple of text files here to tell node to include the binary exe file you just copied. Use your favorite text editor and create two files, one named <code>ffmpeg</code> with the following contents:</p>&#xA;&#xA;<pre><code>#!/bin/sh&#xA;basedir=$(dirname ""$(echo ""$0"" | sed -e 's,\\,/,g')"")&#xA;&#xA;case `uname` in&#xA;    *CYGWIN*) basedir=`cygpath -w ""$basedir""`;;&#xA;esac&#xA;&#xA;if [ -x ""$basedir/node"" ]; then&#xA;  ""$basedir/node""  ""$basedir/../ffmpeg/ffmpeg"" ""$@""&#xA;  ret=$?&#xA;else&#xA;  node  ""$basedir/../ffmpeg/ffmpeg"" ""$@""&#xA;  ret=$?&#xA;fi&#xA;exit $ret&#xA;</code></pre>&#xA;&#xA;<p>And the the second text file, named <code>ffmpeg.cmd</code>:</p>&#xA;&#xA;<pre><code>@IF EXIST ""%~dp0\node.exe"" (&#xA; ""%~dp0\node.exe""  ""%~dp0\..\ffmpeg\ffmpeg"" %*&#xA;) ELSE (&#xA;   @SETLOCAL&#xA; @SET PATHEXT=%PATHEXT:;.JS;=;%&#xA; node  ""%~dp0\..\ffmpeg\ffmpeg"" %*&#xA;)&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<p>Next you can run ffmpeg in your Windows electron distribution (in renderer.js) as follows (I'm using the app-root-dir node module as well).  Note the quotes added to the binary path, if your app is installed to a directory with spaces (eg <code>C:\Program Files\YourApp</code>) it won't work without these.</p>&#xA;&#xA;<pre><code>var appRootDir = require('app-root-dir').get();&#xA;var ffmpegpath = appRootDir + '\\node_modules\\ffmpeg\\ffmpeg';&#xA;&#xA;const&#xA;    spawn = require( 'child_process' ).spawn;&#xA;    var ffmpeg = spawn( 'cmd.exe', ['/c',  '""'+ffmpegpath+ '""', '-i', clips_input[0]]);  //add whatever switches you need here, test on command line first&#xA;ffmpeg.stdout.on( 'data', data =&gt; {&#xA;     console.log( `stdout: ${data}` );&#xA; });&#xA;ffmpeg.stderr.on( 'data', data =&gt; {&#xA;     console.log( `stderr: ${data}` );&#xA; });&#xA;</code></pre>&#xA;&#xA;<p><strong>UPDATE:  Unified Simple Method</strong></p>&#xA;&#xA;<p>Well, as time as rolled on and Node has updated, this method is no longer the easiest way to include precompiled binaries. It still works, but when <code>npm install</code> is run the binary folders under node_modules will be deleted and have to be replaced again. The below method works for Node v12.</p>&#xA;&#xA;<p>This new method obviates the need to symlink, and works similarly for Mac and Windows. Relative paths seem to work now.</p>&#xA;&#xA;<p>1) You will still need appRootDir: <code>npm i -S app-root-dir</code></p>&#xA;&#xA;<p>2) Create a folder under your app's root directory named <code>bin</code> and place your precompiled static binaries here, I'm using <code>ffmpeg</code> as an example.</p>&#xA;&#xA;<p>3) Use the following code in your renderer script:</p>&#xA;&#xA;<pre><code>var appRootDir = require('app-root-dir').get();&#xA;var ffmpegpath = appRootDir + '/bin/ffmpeg';&#xA;const spawn = require( 'child_process' ).spawn;&#xA;    var child = spawn( ffmpegpath, ['-i', inputfile, 'out.mp4']);  //add whatever switches you need here, test on command line first&#xA;child.stdout.on( 'data', data =&gt; {&#xA;     console.log( `stdout: ${data}` );&#xA; });&#xA;child.stderr.on( 'data', data =&gt; {&#xA;     console.log( `stderr: ${data}` );&#xA; });&#xA;</code></pre>&#xA;",3198281,"",3198281,"",2020-01-31T05:45:37,2020-01-31T05:45:37,"","",,6,,,
38341608,2,,37546656,2016-07-13T02:16:07,,19,,"<p>Electron JS runs a browser instance on your localhost. Therefore, you can handle an oauth2 redirect url by supplying a callback url of https:localhost/whatever/path/you/want. Just be sure to white list it on the oauth2 app registration page for whatever service you are using. </p>&#xA;&#xA;<p>Example: </p>&#xA;&#xA;<pre><code>var authWindow = new BrowserWindow({&#xA;    width: 800, &#xA;    height: 600, &#xA;    show: false, &#xA;    'node-integration': false,&#xA;    'web-security': false&#xA;});&#xA;// This is just an example url - follow the guide for whatever service you are using&#xA;var authUrl = 'https://SOMEAPI.com/authorize?{client_secret}....'&#xA;&#xA;authWindow.loadURL(authUrl);&#xA;authWindow.show();&#xA;// 'will-navigate' is an event emitted when the window.location changes&#xA;// newUrl should contain the tokens you need&#xA;authWindow.webContents.on('will-navigate', function (event, newUrl) {&#xA;    console.log(newUrl);&#xA;    // More complex code to handle tokens goes here&#xA;});&#xA;&#xA;authWindow.on('closed', function() {&#xA;    authWindow = null;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>A lot of inspiration taken from this page: <a href=""http://manos.im/blog/electron-oauth-with-github/"" rel=""noreferrer"">http://manos.im/blog/electron-oauth-with-github/</a></p>&#xA;",2379771,"",1460144,"",2016-08-29T01:26:45,2016-08-29T01:26:45,"","",,4,,,
37049215,2,,37048980,2016-05-05T11:17:13,,0,,"<p>I found 2 workarounds to run the application but I still do not know why the steps mentioned in documentation did not worked.</p>&#xA;&#xA;<p>So for others I am providing the both workarounds to run the application below:</p>&#xA;&#xA;<ol>&#xA;<li><p>Create a <code>.zip</code> of your application folder then rename it <code>abc.nw</code> then drag drop it on the <code>nw.exe</code> or run the following command in cmd <code>""path of the nw.exe"" ""your zip path.nw""</code></p></li>&#xA;<li><p>open command line install <code>nodewebkit</code> by using the following command <code>npm install -g nodewebkit</code> (<code>npm</code> must be installed beforehand)&#xA;then cd to your application folder and run the follwoing command <code>nodewebkit</code></p></li>&#xA;</ol>&#xA;",4221433,"",,"",,2016-05-05T11:17:13,"","",,0,,,
37138173,2,,37016208,2016-05-10T12:11:09,,0,,"<p>Apparently the <code>loading.show()</code> won't work until <code>function onDragDrop(evt)</code> is <strong>finished</strong>. So I looked at the code and isolated the part that takes the longest and does the most processing. I took that part and placed it in a separate function and called it asynchronously (someone correct me if I am wrong for calling it that) with <strong>setTimeOut</strong>.</p>&#xA;&#xA;<pre><code>function onDragDrop(evt){&#xA;   if( !isValidDragDrop(evt) )&#xA;       return;&#xA;&#xA;    loading.show(); &lt;----- THIS LINE is the problem&#xA;&#xA;    var validExtension = evt.data.extensionHandler;&#xA;    var fileListHandler = evt.data.dropHandler;&#xA;&#xA;    var filesDragged = evt.dataTransfer.files.length;&#xA;    ......&#xA;&#xA;    setTimeout(function(){ heavyLoad(filesDragged, fileListHandler); }, 10);    &#xA; };&#xA;</code></pre>&#xA;&#xA;<p>That's it. Now the <strong>loader spinning gif</strong> shows up since the <strong>onDragDrop</strong> event finishes completely. The <strong>heavyLoad(...)</strong> is obviously in charge of doing <code>loading.hide();</code> when it's done.</p>&#xA;",1812182,"",,"",,2016-05-10T12:11:09,"","",,0,,,
37145267,2,,37128313,2016-05-10T17:31:22,,0,,"<p>I have checked the code, using spectron and running webview inside simulating this behaviour, your code works fine. Re-written the codes. Hope this helps.</p>&#xA;&#xA;<pre><code>it('should assess webview', function() {&#xA;    var self = this;&#xA;    return this.app.client.waitUntilWindowLoaded()&#xA;        .windowHandles().then(function(session) {&#xA;            // Need to return the promise back, if promise is&#xA;            // it would wait for the state or else app will exit.&#xA;            return self.app.client.switchTab(session.value[1])&#xA;            .click(""#my-id"") // check whether selector is present in DOM&#xA;            .then(console.log.bind(console))&#xA;            .catch(console.log.bind(console));&#xA;        });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>it('should assess webview', function() {&#xA;    var self = this;&#xA;    return this.app.client.waitUntilWindowLoaded()&#xA;        .windowHandles()&#xA;        .then(function(session) {&#xA;            // switchTab &amp; window will both focus&#xA;            // window or tab which is active&#xA;            return this.window(session.value[1])&#xA;        })&#xA;        .click(""#my-id"") // check whether selector is present in DOM&#xA;        .then(console.log.bind(console))&#xA;        .catch(console.log.bind(console));;&#xA;});&#xA;</code></pre>&#xA;",6315792,"",1345455,"",2016-05-10T19:08:55,2016-05-10T19:08:55,"","",,1,,,
37183057,2,,37181560,2016-05-12T09:40:38,,0,,"<p>I think you should give this a try</p>&#xA;&#xA;<pre><code>child_process.execFile(file[, args][, options][, callback])&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code>file &lt;String&gt; The name or path of the executable file to run&#xA;args &lt;Array&gt; List of string arguments&#xA;options &lt;Object&gt;&#xA;&#xA;    cwd &lt;String&gt; Current working directory of the child process&#xA;    env &lt;Object&gt; Environment key-value pairs&#xA;    encoding &lt;String&gt; (Default: 'utf8')&#xA;    timeout &lt;Number&gt; (Default: 0)&#xA;    maxBuffer &lt;Number&gt; largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200\*1024)&#xA;    killSignal &lt;String&gt; (Default: 'SIGTERM')&#xA;    uid &lt;Number&gt; Sets the user identity of the process. (See setuid(2).)&#xA;    gid &lt;Number&gt; Sets the group identity of the process. (See setgid(2).)&#xA;&#xA;callback &lt;Function&gt; called with the output when process terminates&#xA;&#xA;    error &lt;Error&gt;&#xA;    stdout &lt;String&gt; | &lt;Buffer&gt;&#xA;    stderr &lt;String&gt; | &lt;Buffer&gt;&#xA;</code></pre>&#xA;",6289603,"",,"",,2016-05-12T09:40:38,"","",,0,,,
37186483,2,,37185354,2016-05-12T12:10:07,,0,,"<p>I could not find any documented solution for this however on the github I found a workaround</p>&#xA;&#xA;<p>Source: <a href=""https://github.com/nwjs/nw.js/issues/3274#issuecomment-154343737"" rel=""nofollow"">Git disussion thread</a></p>&#xA;&#xA;<p>Here is the workaround</p>&#xA;&#xA;<pre><code>$(document).ready(function () {&#xA;&#xA;    var wX = 0;&#xA;    var wY = 0;&#xA;    var dragging = false;&#xA;    $('#chatIcon').mousedown(function (e) {&#xA;        dragging = true;&#xA;        wX = e.pageX;&#xA;        wY = e.pageY;&#xA;    });&#xA;&#xA;    $(window).mousemove(function (e) {&#xA;        e.stopPropagation();&#xA;        e.preventDefault();&#xA;        if (dragging) {&#xA;            var xLoc = e.screenX - wX;&#xA;            var yLoc = e.screenY - wY;&#xA;&#xA;&#xA;            try {&#xA;                window.moveTo(xLoc, yLoc);&#xA;            } catch (err) {&#xA;                console.log(err);&#xA;            }&#xA;&#xA;        }&#xA;&#xA;    });&#xA;&#xA;    $(window).mouseup(function () {&#xA;        dragging = false;&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",4221433,"",,"",,2016-05-12T12:10:07,"","",,0,,,
37230128,2,,36901991,2016-05-14T18:02:44,,0,,"<p>I was able to discover how this could be done, first there needs to be a mediasource object with which you use URL.createObjectUrl to link to the video.src, and then you create a buffer on it. It is to that buffer that is appended the media which is loaded via XMLHttpRequest with the Content-type set as an arraybuffer.</p>&#xA;&#xA;<p>Careful with big files, if you don't segment them and load everything at once it will eat your ram and even crash your application.</p>&#xA;",524695,"",,"",,2016-05-14T18:02:44,"","",,0,,,
37060522,2,,37058985,2016-05-05T21:25:25,,1,,"<p>note 1, Array.forEach is synchronous. So to initialize flipster, you don t need to check the end of the <strong>last</strong> loop. You can just put it right after the loop.</p>&#xA;&#xA;<p>note 2, to read each album.json file, you have right about the method. Although, you may want to use an helper such <a href=""https://github.com/caolan/async"" rel=""nofollow"">async</a>. Which typically exists to deal with that sort of situations.</p>&#xA;&#xA;<p>Please check the code, i rewrote it using async. I don t guarantee it is bug free, but the final code should be very similar.</p>&#xA;&#xA;<p>note 3, the initial fs.readdir and the call for filterDirectories seems mergeable into one async function.</p>&#xA;&#xA;<p>note 4, it may worth to read <a href=""http://callbackhell.com/"" rel=""nofollow"">this</a></p>&#xA;&#xA;<p>code rewrite</p>&#xA;&#xA;<pre><code>var async = require('async')&#xA;&#xA;var musicFiles;&#xA;var musicDirs;&#xA;var lis = [];&#xA;&#xA;async.series([&#xA;  function (next) {&#xA;    fs.readdir(""./music"", function(err, files) {&#xA;      if (err) next(err);&#xA;      musicFiles = files;&#xA;      next();&#xA;    });&#xA;  },&#xA;  function (next) {&#xA;   filterDirectories(""./music"", files, function(dirs){&#xA;     musicDirs = dirs;&#xA;     next();&#xA;   });&#xA;  },&#xA;  function (next) {&#xA;    var todos = [];&#xA;    musicDirs.forEach(function(dir){&#xA;      todos.push(function (nextTodo) {&#xA;        fs.readFile('./music/' + dir + ""/album.json"", 'utf-8', function (err, data) {&#xA;          if (err) nextTodo(err);&#xA;          lis.push(createLi(JSON.parse(data)));&#xA;          nextTodo();&#xA;        });&#xA;      })&#xA;    });&#xA;    async.parallelLimit(todos, 4, next);&#xA;  },&#xA;  function (next) {&#xA;    lis.forEach(function(li){&#xA;      li.appendTo(ul);&#xA;    });&#xA;    $('.flipster').flipster({&#xA;      style: 'carousel'&#xA;    });&#xA;  }&#xA;], function () {&#xA;  console.log(""All done !"")&#xA;})&#xA;&#xA;function createLi (data) {&#xA;  var li = $('&lt;li&gt;&lt;img /&gt;&lt;a target=""_blank""&gt;&lt;/a&gt;&lt;/li&gt;');&#xA;  li.find('a')&#xA;      .attr('href', '#')&#xA;      .text(data.album_name);&#xA;  li.find('img').attr('src', './music/' + dir + '/' + data.album_art_loc).css('width:512px;height:512px;');&#xA;  return li&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>hth.</p>&#xA;",4466350,"",,"",,2016-05-05T21:25:25,"","",,1,,,
37064693,2,,36803123,2016-05-06T05:13:07,,1,,"<p>I just figure it out. You need to set your LocationStrategy by using HashLocationStrategy, basically just as same as html5mode in angular1. Because you are not hosting a node server, so in your electron app, all urls should be something like: file:///your-file. The following settings should simply solve your issues.</p>&#xA;&#xA;<p>bootstrap(AppComponent, [&#xA;  ROUTER_PROVIDERS,&#xA;  provide(LocationStrategy, {useClass: HashLocationStrategy})&#xA;]);</p>&#xA;",4855156,"",,"",,2016-05-06T05:13:07,"","",,0,,,
37137956,2,,36017000,2016-05-10T12:01:41,,1,,"<p>My approach was definitely <strong>not</strong> the best. @RSATom kindly exposed the function <code>libvlc_media_get_duration</code> in the <strong>WebChimera.js API</strong>. </p>&#xA;&#xA;<p>In order to get the duration all that is needed is:</p>&#xA;&#xA;<pre><code>... after adding playlist...&#xA;var vlcPlaylist = chimera_player.vlc.playlist;&#xA;for(var i=0, limit=chimera_player.itemCount(); i&lt;limit; ++i  ){&#xA;    var vlcMedia = vlcPlaylist.items[i];&#xA;    vlcMedia.parse(); // Metadata is not available if not parsed&#xA;    if(vlcMedia.parsed)&#xA;        // Access duration via --&gt; vlcMedia.duration&#xA;    else&#xA;        logger(""ERROR -- parsePlaylist -- "" + vlcMedia.mrl );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you are going to try to get duration from files with <strong>MPEG</strong> format then you are in for a headache. In order to have VLC return duration of MPEG file before playing the video, it is necessary that its <strong>Demuxer</strong> is set to <strong>Avformat demuxer</strong>. Problem is you can't do that via the libvlc api. If demuxer is not set, then <code>vlcMedia.duration</code> will always return <strong>0</strong>. </p>&#xA;&#xA;<p>There's two options here:</p>&#xA;&#xA;<ul>&#xA;<li>Use <code>ffprobe</code> to access video metadata and forget doing it via libvlc</li>&#xA;<li>Play with this posts' original way of getting duration via a combination of <code>play()</code> <code>pause()</code> events.</li>&#xA;</ul>&#xA;",1812182,"",,"",,2016-05-10T12:01:41,"","",,0,,,
37167712,2,,37161833,2016-05-11T15:55:00,,1,,"<p>You need to package your app into an archive by passing the <a href=""https://github.com/electron-userland/electron-packager/blob/v7.0.1/usage.txt#L20"" rel=""nofollow""><code>asar</code></a> option to <code>electron-packager</code>, that will allow you to avoid the path limit issues and speed up your app startup on Windows.</p>&#xA;",1259938,"",,"",,2016-05-11T15:55:00,"","",,0,,,
37261691,2,,37026659,2016-05-16T19:24:09,,1,,"<p>Electron has no problem running an AngularJs app.&#xA;I have built a few Electron apps using Angular with no CSRF problems.</p>&#xA;&#xA;<p>One way to get around this is to create a simple server running inside electron, like shown below:</p>&#xA;&#xA;<pre><code>// &lt;YOUR-ENTRY-FILE&gt;.js&#xA;&#xA;app.on('ready', function() {&#xA;    mainWindow = new BrowserWindow({&#xA;        width: 800,&#xA;        height: 600&#xA;    });&#xA;&#xA;    var server = http.createServer(requestHandler).listen(9527);&#xA;&#xA;    mainWindow.loadUrl('http://localhost:9527/index.html');&#xA;    mainWindow.webContents.on('did-finish-load', function() {&#xA;        mainWindow.setTitle(app.getName());&#xA;    });&#xA;    mainWindow.on('closed', function() {&#xA;        mainWindow = null;&#xA;        server.close();&#xA;    });&#xA;});&#xA;&#xA;function requestHandler(req, res) {&#xA;    var&#xA;        file    = req.url == '/' ? '/index.html' : req.url,&#xA;        root    = __dirname + '/www',&#xA;        page404 = root + '/404.html';&#xA;&#xA;    getFile((root + file), res, page404);&#xA;};&#xA;&#xA;function getFile(filePath, res, page404) {&#xA;&#xA;    fs.exists(filePath, function(exists) {&#xA;        if(exists) {&#xA;            fs.readFile(filePath, function(err, contents) {&#xA;                if(!err) {&#xA;                    res.end(contents);&#xA;                } else {&#xA;                    console.dir(err);&#xA;                }&#xA;            });&#xA;        } else {&#xA;            fs.readFile(page404, function(err, contents) {&#xA;                if(!err) {&#xA;                    res.writeHead(404, {'Content-Type': 'text/html'});&#xA;                    res.end(contents);&#xA;                } else {&#xA;                    console.dir(err);&#xA;                }&#xA;            });&#xA;        }&#xA;    });&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>There really should not be a need for you to do this, check your paths and have this as the last option.</p>&#xA;",3681572,"",,"",,2016-05-16T19:24:09,"","",,1,,,
37146176,2,,37146175,2016-05-10T18:22:26,,2,,"<p>No you cannot ""pre-decode"". However, you can pre-append the <code>img</code> in an effectively invisible way by applying the style <code>width: 1px; height: 1px; opacity: 0.01</code>, and webkit won't redo the work if you append again. </p>&#xA;&#xA;<p>You can even remove the image in the mean time, provided it has had time to fully decode, and webkit will hold on to the decoded data (although I'm not sure <a href=""https://stackoverflow.com/a/20868199/4682556"">for how long</a>).</p>&#xA;&#xA;<p>If you want to be absolutely certain it will load fast, you could do one of two things. Reveal the <code>img</code> tag by removing the styles above, or by loading the same <code>img</code> tag in a different part of the DOM, while leaving the 'pre-appended' one in place. This will take between 3ms and 20ms in my experience. </p>&#xA;&#xA;<p><strong>BE CAREFUL</strong> regarding cleanup if you are using a lot of user defined photo contents.</p>&#xA;&#xA;<p>In my experience, simply removing numerous <code>img</code> elements from the DOM <em>will</em> cause memory leaks (and electron windows to crash). I would advise that you either set the <code>img.src</code> to null <em>after</em> removing the image from the DOM, or set <a href=""https://stackoverflow.com/questions/13859041/how-can-i-prevent-memory-leaks-when-removing-images-in-the-dom#comment60772850_13859041"">the entire <code>img</code> to null</a> if you no longer need the Image instance. </p>&#xA;&#xA;<p>You could play with the following code (use images of your own) using the chrome devtools timeline to measure the render speeds of photos in different scenarios. </p>&#xA;&#xA;<pre><code>&lt;style&gt;&#xA;/*#preload img {&#xA;  width: 1px;&#xA;  height: 1px;&#xA;  opacity: 0.01;&#xA;}*/&#xA;&lt;/style&gt;&#xA;&#xA;&lt;button&gt;Toggle Image&lt;/button&gt;&#xA;&#xA;&lt;div id=""container""&gt;&lt;/div&gt;&#xA;&#xA;&lt;div id=""preload""&gt;&lt;/div&gt;&#xA;&#xA;&lt;script&gt;&#xA;  ""use strict""&#xA;&#xA;  const button = document.getElementsByTagName('button')[0]&#xA;      , container = document.getElementById('container')&#xA;      , preload = document.getElementById('preload')&#xA;      , img1 = new Image()&#xA;      , img2 = new Image()&#xA;  var current = img2&#xA;&#xA;  img1.src = './img1.JPG'&#xA;  img2.src = './img2.JPG'&#xA;&#xA;  preload.appendChild(img2)&#xA;  setTimeout(function(){&#xA;    preload.removeChild(preload.childNodes[0])&#xA;  }, 200)&#xA;&#xA;  button.addEventListener('click', function(e){&#xA;     toggleImg()&#xA;  })&#xA;&#xA;  function toggleImg(){&#xA;    if (current === img1) {&#xA;      setImg(img2);&#xA;    } else {&#xA;      setImg(img1)&#xA;    }&#xA;  }&#xA;&#xA;  function setImg(img){&#xA;    if (container.hasChildNodes()) container.removeChild(container.childNodes[0])&#xA;    container.appendChild(img)&#xA;    current = img&#xA;  }&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",4682556,"",-1,"",2017-05-23T10:28:36,2016-05-10T18:22:26,"","",,0,,,
37262839,2,,37249984,2016-05-16T20:35:54,,2,,"<p>I guess you are talking about <a href=""https://github.com/Aluxian/Whatsie"" rel=""nofollow"">Whatsie</a> and it's <a href=""https://github.com/Aluxian/Whatsie/blob/master/src/package.json"" rel=""nofollow"">package.json</a>.</p>&#xA;&#xA;<p>If you take a look at one of the Gulp tasks located in the file <a href=""https://github.com/Aluxian/Whatsie/blob/master/tasks/compile.coffee"" rel=""nofollow"">tasks/compile.coffee</a>, you'll be able to see the lines (in CoffeeScript):</p>&#xA;&#xA;<pre><code># Move package.json&#xA;gulp.task 'compile:' + dist + ':package', ['clean:build:' + dist], -&gt;&#xA;  gulp.src './src/package.json'&#xA;    .pipe mustache process.env&#xA;    .pipe gulp.dest dir&#xA;</code></pre>&#xA;&#xA;<p>Here the actual <a href=""https://github.com/Aluxian/Whatsie/blob/master/src/package.json"" rel=""nofollow"">package.json</a> is being passed to a <a href=""https://mustache.github.io/mustache.5.html"" rel=""nofollow"">mustache</a> template engine - it receives a template as a first argument (<a href=""https://github.com/Aluxian/Whatsie/blob/master/src/package.json"" rel=""nofollow"">package.json</a> here acts like a template)  and a data to be inserted in the template as a second argument - <code>process.env</code>. </p>&#xA;&#xA;<p>As <a href=""https://github.com/Aluxian/Whatsie/blob/master/src/package.json"" rel=""nofollow"">package.json</a> acts like a template for <a href=""https://mustache.github.io/mustache.5.html"" rel=""nofollow"">mustache</a>, you can use <a href=""https://mustache.github.io/mustache.5.html"" rel=""nofollow"">mustache</a> syntax in it.&#xA;Curly braces <code>{{}}</code> are the part of it, they are used as placeholders which will be replaced by the actual data, when templates are being compiled. In the <a href=""https://mustache.github.io/mustache.5.html"" rel=""nofollow"">mustache docs</a> you can also find a line:</p>&#xA;&#xA;<blockquote>&#xA;  <p>You can also use &amp; to unescape a variable: {{&amp; name}}</p>&#xA;</blockquote>&#xA;&#xA;<p>So <code>{{&amp; name}}</code> is to prevent values from being escaped. Otherwise, if you don't use <code>&amp;</code> and values for output have some dangerous characters , they will be replaced by more secure ones (originally to prevent XSS in templates), as a result it will transform initial value, which is not always what you want. In this case author wants to preserve original value.</p>&#xA;&#xA;<p>Going back to <code>process.env</code> - it is an object which gives access to <a href=""https://nodejs.org/api/process.html#process_process_env"" rel=""nofollow"">environment variables</a> in Node.JS. There is a file in repository <a href=""https://github.com/Aluxian/Whatsie/blob/master/.env-example"" rel=""nofollow"">.env-example</a> with an example of env variables developer has to set in order to have the application work differently in different environments (for example on local machine or CI server). Names of some of the variables in this file are the ones that are used in a <a href=""https://github.com/Aluxian/Whatsie/blob/master/src/package.json"" rel=""nofollow"">package.json</a> as template placeholders - I guess author of the app uses all of this to simplify a build process for different environments.</p>&#xA;",1573638,"",,"",,2016-05-16T20:35:54,"","",,0,,,
37083979,2,,37072496,2016-05-07T02:48:34,,3,,"<p>Try setting the <a href=""https://github.com/electron/electron/blob/v0.37.8/docs/api/environment-variables.md#electron_enable_logging"" rel=""nofollow""><code>ELECTRON_ENABLE_LOGGING</code></a> environment variable before running Electron.</p>&#xA;",1259938,"",,"",,2016-05-07T02:48:34,"","",,1,,,
37179702,2,,37179231,2016-05-12T07:09:07,,3,,"<p>There is no built-in address/tool bar in Electron, if you want one you have to create it yourself (using HTML, CSS, and JS). Here's an <a href=""https://github.com/steelbrain/Brauser"" rel=""nofollow"">example</a> of a custom address bar, and you may want to have a look at <a href=""https://github.com/electron/electron/issues/1862"" rel=""nofollow"">this issue</a> in the Electron repository too.</p>&#xA;",1259938,"",,"",,2016-05-12T07:09:07,"","",,2,,,
37237263,2,,33289110,2016-05-15T10:43:39,,3,,"<p>Electron lacks an easy way to persist and read user settings for your application. <a href=""https://github.com/jviotti/electron-json-storage"" rel=""nofollow"">electron-json-storage</a> implements an API somehow similar to <code>localStorage</code> to write and read JSON objects to/from the operating system application data directory, as defined by <code>app.getPath('userData')</code>.</p>&#xA;",1253735,"",,"",,2016-05-15T10:43:39,"","",,1,,,
37242226,2,,37235060,2016-05-15T18:39:34,,3,,"<p>You should install Electron as a dev reference in package.json, yes:</p>&#xA;&#xA;<p><code>&#xA;npm install --save-dev electron-prebuilt-compile&#xA;</code></p>&#xA;&#xA;<p>Don't install Electron as a global because then other people have to set stuff up to run your app (i.e. they now have to micromanage which version of Electron they have installed globally)</p>&#xA;",5728,"",,"",,2016-05-15T18:39:34,"","",,1,,,
37032188,2,,37031935,2016-05-04T15:32:55,,5,,"<p>You can call the WinAPI function <a href=""https://msdn.microsoft.com/en-us/library/aa373201(VS.85).aspx"" rel=""nofollow""><code>SetSuspendState</code></a> using the <a href=""https://github.com/node-ffi/node-ffi"" rel=""nofollow""><code>node-ffi</code></a> library.</p>&#xA;&#xA;<p>First, install the library:</p>&#xA;&#xA;<pre><code>npm install ffi --save&#xA;</code></pre>&#xA;&#xA;<p>Then, you can use this code:</p>&#xA;&#xA;<pre><code>var ffi = require('ffi');&#xA;var powrprof = ffi.Library('powrprof.dll', {&#xA;    SetSuspendState: ['int', ['int', 'int', 'int']]&#xA;});&#xA;&#xA;function invokeStandby() {&#xA;    powrprof.SetSuspendState(0, 0, 0);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Note that this does a normal standby and leaves wake events on. If you want to disable wake events, use <code>powrprof.SetSuspendState(0, 0, 1)</code> (third parameter 1 instead of 0). See the <a href=""https://msdn.microsoft.com/en-us/library/aa373201(VS.85).aspx"" rel=""nofollow"">docs</a> for details.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>UPDATE</strong>: Note that if you think a nice shortcut would be using <code>rundll32</code>, then you will get weird behavior depending on the computer settings and probably the weather and the day of week (as in - undefined behavior), because <code>rundll32</code> doesn't just run arbitrary DLL functions the way you think. See <a href=""https://blogs.msdn.microsoft.com/oldnewthing/20040115-00/?p=41043"" rel=""nofollow"">this article</a> and the <a href=""https://support.microsoft.com/en-us/kb/164787"" rel=""nofollow""><code>rundll32</code> docs</a>. Calling <code>rundll32 powrprof.dll,SetSuspendState 0,0,0</code> might put your computer to sleep, but it might do something else on another computer such as hibernating instead of invoking standby mode (or theoretically even crash). So, <strong>do not do this!</strong></p>&#xA;",1871033,"",1871033,"",2016-05-10T09:05:22,2016-05-10T09:05:22,"","",,0,,,
37224859,2,,37224398,2016-05-14T09:16:21,,5,,"<p>You could send a message from your main process to the renderer process using <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#webcontents"" rel=""noreferrer"">webContents</a>, upon page focus.</p>&#xA;&#xA;<p>The page (renderer process) can listen for that message and then focus the element itself.</p>&#xA;&#xA;<p><strong>Main process</strong></p>&#xA;&#xA;<pre><code>globalShortcut.register('Command+Control+Alt+G', function() {&#xA;&#xA;    win.restore();&#xA;    win.focus();&#xA;    win.webContents.send('focus-element', '.js-search');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>Renderer process (the page)</strong></p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    const {ipcRenderer} = require('electron');&#xA;&#xA;    ipcRenderer.on('focus-element', (event, selector) =&gt; {&#xA;        document.querySelector(selector).focus();&#xA;    });&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",1402929,"",,"",,2016-05-14T09:16:21,"","",,1,,,
37210121,2,,37209655,2016-05-13T12:30:09,,7,,"<p><strong>Google AdSense is not allowed in any desktop applications.</strong></p>&#xA;&#xA;<p>From <a href=""http://www.google.com/adsense/policies#pla"" rel=""nofollow noreferrer"">AdSense policy</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Google ads, search boxes or search results may not be:</p>&#xA;  &#xA;  <ul>&#xA;  <li><strong>Integrated into a software application of any kind, including toolbars.</strong></li>&#xA;  <li>Displayed in pop-ups or pop-unders.</li>&#xA;  <li>Placed in emails, email programs, or chat programs.</li>&#xA;  <li>Obscured by elements on a page.</li>&#xA;  <li>Placed on any non-content-based page. (Does not apply to AdSense for search or mobile AdSense for search.)</li>&#xA;  <li>Placed on pages published specifically for the purpose of showing ads.</li>&#xA;  <li>Placed on pages whose content or URL could confuse users into thinking it is associated with Google due to the misuse of logos,<br>&#xA;  trademarks or other brand features.</li>&#xA;  <li>Placed on, within or alongside other Google products or services in a manner that violates the policies of that product or service.</li>&#xA;  </ul>&#xA;</blockquote>&#xA;",4241030,"",2788872,"",2018-07-10T22:33:17,2018-07-10T22:33:17,"","",,1,,,
37151023,2,,37149178,2016-05-11T00:17:58,,9,,<blockquote>&#xA;  <p>var mainWindow:BrowserWindow </p>&#xA;</blockquote>&#xA;&#xA;<p>You probably want :</p>&#xA;&#xA;<pre><code>var mainWindow:Electron.BrowserWindow &#xA;</code></pre>&#xA;,390330,"",,"",,2016-05-11T00:17:58,"","",,0,,,
37203949,2,,36389923,2016-05-13T07:34:30,,9,,<p>I have to run <code>electron index.html</code> to resolve this issue.</p>&#xA;,2660342,"",,"",,2016-05-13T07:34:30,"","",,1,,,
37080891,2,,36505404,2016-05-06T20:27:46,,23,,"<p>Another option would be to use <strong>hashHistory</strong> instead. Actually, in your  referenced repo <a href=""https://github.com/chentsulin/electron-react-boilerplate/blob/b76f537bc784d1102b13675297d54bd28baff9d8/app/store/configureStore.dev.js#L10"" rel=""noreferrer"">you can see that they're using <strong>hashHistory</strong></a>, how about trying that and posting back?</p>&#xA;",1207404,"",173957,"",2017-08-24T19:57:40,2017-08-24T19:57:40,"","",,3,,,
37262095,2,,33911551,2016-05-16T19:48:36,,23,,"<p>You can totally compare electron and chrome packaged Apps. They are very similar. For both of them you get:</p>&#xA;&#xA;<ul>&#xA;<li>Develop your Desktop App using Web Technologies</li>&#xA;<li>App runs on top of Chrome</li>&#xA;<li>Automatic updates. Though in Chrome you get it for free, for Electron you need to do some work.</li>&#xA;<li>OS Integration - Both have better integrations with the OS than a normal website, but Electron supports a wider range of OS integration.</li>&#xA;<li>Work offline or online.</li>&#xA;<li>Both work on Linux, OSX and Windows. Chrome Web Apps also work on Chromebooks.</li>&#xA;</ul>&#xA;&#xA;<p>Here are the differences: </p>&#xA;&#xA;<ul>&#xA;<li>Electron uses node.js. So you can import many modules not easily available in Chrome Apps.</li>&#xA;<li>Distribution, with electron you package and distribute the app yourself. With Chrome Apps you distribute them through Chrome Webstore.</li>&#xA;<li>Environment. An Electron App is packaged with its full environment. Chrome Apps just use Chrome environment so they are lighter, but may behave differently for different users depending on the Chrome version they use.</li>&#xA;<li>Chrome Apps require the user to have Chrome installed, Electron doesn't.</li>&#xA;<li>Electron has better developer tools for testing and debugging.</li>&#xA;<li>Electron is an open source platform. Chrome Apps is also built on top of multiple open technologies but specially distribution is controlled by Google.</li>&#xA;<li>Electron documentation is much better even though it's a much younger platform. </li>&#xA;<li>Adoption: There are quite a lot of big and successful apps built on top of Electron such as Visual Studio Code, GitHub client, Slack. Chrome Apps just never picked up as much momentum.</li>&#xA;<li>Chrome Apps can be tightly integrated into Google Drive</li>&#xA;</ul>&#xA;&#xA;<h2>UPDATE 2016-08-19:</h2>&#xA;&#xA;<p>It seems Google recently deprecated Chrome Apps on any platform other than ChromeOS. So I'd say it's no longer a valid option.</p>&#xA;&#xA;<p><a href=""http://blog.chromium.org/2016/08/from-chrome-apps-to-web.html"" rel=""noreferrer"">http://blog.chromium.org/2016/08/from-chrome-apps-to-web.html</a></p>&#xA;",272031,"",272031,"",2016-08-19T20:33:58,2016-08-19T20:33:58,"","",,4,,,
37215237,2,,37213696,2016-05-13T16:39:37,,29,,"<p>Use <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#appgetapppath"" rel=""nofollow noreferrer"">app.getAppPath()</a></p>&#xA;&#xA;<p>Typescript is a superset of javascript so you could do it in the same way you would do it with javascript, though you may want to declare typings, or use other typescript features when you do so. </p>&#xA;&#xA;<p>Example: </p>&#xA;&#xA;<pre><code>const remote = require('remote'), &#xA;      app = remote.require('app');&#xA;&#xA;var basepath = app.getAppPath();&#xA;</code></pre>&#xA;&#xA;<p>Update - these days you should use:</p>&#xA;&#xA;<pre><code>const app = require('electron').remote.app&#xA;</code></pre>&#xA;&#xA;<p>To get the app handle for <code>app.getAppPath()</code>. </p>&#xA;",4682556,"",4682556,"",2019-11-20T22:51:28,2019-11-20T22:51:28,"","",,3,,,
37114325,2,,37113815,2016-05-09T11:12:35,,71,,"<p>electron-packager <a href=""https://github.com/electron-userland/electron-builder/commit/0022b8696c13fa9de7df5e378007ef9aa85cc7b5"" rel=""noreferrer"">was (update: changed in this commit: ""refactor: merge electron-packager"")</a> used by electron-builder. <a href=""https://medium.com/developers-writing/building-a-desktop-application-with-electron-204203eeb658#.q41xchdlz"" rel=""noreferrer"">This article</a> states</p>&#xA;&#xA;<blockquote>&#xA;  <p>If you really want to go to town, take a look at electron-builder&#xA;  which takes the packages produced by electron-packager and creates&#xA;  automated installers.</p>&#xA;</blockquote>&#xA;&#xA;<ul>&#xA;<li><p><a href=""https://github.com/develar/onshape-desktop-shell"" rel=""noreferrer"">electron-builder example</a></p></li>&#xA;<li><p><a href=""https://github.com/szwacz/electron-boilerplate"" rel=""noreferrer"">electron-builder React boilerplate project</a></p></li>&#xA;<li><p><a href=""https://github.com/chentsulin/electron-react-boilerplate/"" rel=""noreferrer"">electron-packager React boilerplate project</a>, although there is a <a href=""https://github.com/chentsulin/electron-react-boilerplate/issues/209"" rel=""noreferrer"">GitHub issue to use electron-builder</a>.</p></li>&#xA;</ul>&#xA;",2800482,"",2800482,"",2017-03-28T09:12:35,2017-03-28T09:12:35,"","",,2,,,
50034085,2,,50034055,2018-04-26T02:47:39,,0,,"<p>A button inside a form by default submits the form. Unless the <code>type</code> attribute has been set to <code>button</code>.</p>&#xA;&#xA;<pre><code>&lt;button onclick=""saveFile()"" type='button'&gt;Save&lt;/button&gt;&#xA;</code></pre>&#xA;&#xA;<p>I think in your case it's submitting the form and reloading the page, that's why you're not able to see <code>saveFile()</code> in actions.</p>&#xA;",1042201,"",1042201,"",2018-04-26T02:55:23,2018-04-26T02:55:23,"","",,0,,,
50044074,2,,50007748,2018-04-26T13:19:59,,0,,"<p>As @Neil suggested in the comments above, the problem was caused by a  <code>-webkit-app-region: drag;</code>  rule on a container div. &#xA;Thanks!</p>&#xA;",4156602,"",,"",,2018-04-26T13:19:59,"","",,0,,,
50061475,2,,50059880,2018-04-27T11:30:00,,0,,"<p>It doesn't look like you're using it <a href=""https://electronjs.org/docs/api/net"" rel=""nofollow noreferrer"">as per the docs</a>:</p>&#xA;&#xA;<pre><code>const {app} = require('electron')&#xA;app.on('ready', () =&gt; { &#xA;  const {net} = require('electron') &#xA;  const request = net.request('https://github.com')&#xA;  request.on('response', (response) =&gt; { &#xA;  console.log(`STATUS: ${response.statusCode}`)&#xA;  console.log(`HEADERS: ${JSON.stringify(response.headers)}`) &#xA;  response.on('data', (chunk) =&gt;&#xA;   { console.log(`BODY: ${chunk}`)&#xA;})&#xA;</code></pre>&#xA;",106623,"",,"",,2018-04-27T11:30:00,"","",,0,,,
50086875,2,,50081691,2018-04-29T13:05:21,,1,,"<p>If you want it to be ""live"" you need to implement WebRTC on your server.</p>&#xA;&#xA;<p>If a delay is acceptable, the MediaStreamRecorder API shown in <a href=""https://webrtc.github.io/samples/src/content/getusermedia/record/"" rel=""nofollow noreferrer"">https://webrtc.github.io/samples/src/content/getusermedia/record/</a> might solve the problem. You can send chunks of data in the ondataavailable handler.</p>&#xA;",4352772,"",,"",,2018-04-29T13:05:21,"","",,0,,,
50094480,2,,50089906,2018-04-30T05:34:26,,1,,"<p>I was able to resolve this issue by switching to a modified version of node-addon-loader. <a href=""https://github.com/smt116/node-native-ext-loader"" rel=""nofollow noreferrer"">https://github.com/smt116/node-native-ext-loader</a></p>&#xA;",905376,"",,"",,2018-04-30T05:34:26,"","",,0,,,
50117526,2,,47888220,2018-05-01T13:38:55,,4,,<p>After having this problem for quite some time i finally figured out how to solve it:</p>&#xA;&#xA;<p>you need to put this in script tags in your index.html</p>&#xA;&#xA;<pre><code>  var remote = require('electron').remote&#xA;  var fs = remote.require('fs');&#xA;</code></pre>&#xA;&#xA;<p>and in every component you want to use it you need to declare it globally</p>&#xA;&#xA;<pre><code>declare var fs: any;&#xA;</code></pre>&#xA;&#xA;<p>then you can use it!</p>&#xA;&#xA;<p>was quite a struggel to figure it out...</p>&#xA;,7941160,"",,"",,2018-05-01T13:38:55,"","",,0,,,
50127902,2,,50101423,2018-05-02T05:50:51,,0,,"<p>At last i found the solution to the above problem</p>&#xA;&#xA;<p>//file1.js</p>&#xA;&#xA;<pre><code>           var Excel = require('exceljs')&#xA;           var workbook = new Excel.Workbook()&#xA;           var arr=[]&#xA;           workbook.xlsx.readFile('./file4.xlsx')&#xA;           .then(function(){&#xA;            var worksheet = workbook.getWorksheet(1)&#xA;          var row =[&#xA;       [   55,""trading"",""sekar"",new Date(2017-02-12),""ashok leyaland"",arun"",    &#xA;          ""modeling"",""Y""],&#xA;       [99,""training"",new Date(2018-02-13),""tata motors"",""dhana"",""reference &#xA;           name"",""wheldding"",""Y""]&#xA;       ]&#xA;&#xA;&#xA;        worksheet.addRows(row)&#xA;             return       workbook.xlsx.writeFile('./file4.xlsx')&#xA;           })&#xA;</code></pre>&#xA;&#xA;<p>//&#xA;first you need to read the respective excel file and then you need to select the particular worksheet of the workbook(excel file) now you can readfile are write file using any of the form you can choose and update the value of the excel in the form of array or arrays&#xA;and return the output as file write function</p>&#xA;",8064287,"",,"",,2018-05-02T05:50:51,"","",,0,,,
50131505,2,,50130888,2018-05-02T09:41:45,,0,,"<p>You are not supposed to inherit from BrowserWindow. It is currently not supported.</p>&#xA;&#xA;<p>Checkout:</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/23"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/23</a></p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/8898"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/8898</a></p>&#xA;",6012281,"",,"",,2018-05-02T09:41:45,"","",,0,,,
50151912,2,,50142924,2018-05-03T09:46:22,,3,,"<p>I found answer to my question <a href=""https://github.com/electron/electron/issues/1335"" rel=""nofollow noreferrer"">here</a>. So what you need to browserWindow is:</p>&#xA;&#xA;<pre><code>addWindow.setIgnoreMouseEvents(true);&#xA;addWindow.setFocusable(false);&#xA;</code></pre>&#xA;&#xA;<p>and then you can click through.</p>&#xA;",8425145,"",,"",,2018-05-03T09:46:22,"","",,0,,,
50165307,2,,50164901,2018-05-03T23:57:30,,1,,"<p>By default, when a new <a href=""https://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer"">BrowserWindow</a> is created, the options <code>width</code> and <code>height</code> represent the dimensions of the window frame, which includes the window title (22 pixels high on my OS too). In order to set the dimensions to the contents of the window (body area), you need to add the <code>useContentSize</code> option:</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;    useContentSize: true,&#xA;    width: 1024,&#xA;    height: 702,&#xA;    title: ""Home""&#xA;});&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p><code>useContentSize</code> Boolean (optional) - The <code>width</code> and <code>height</code> would be used&#xA;  as web page's size, which means the actual window's size will include&#xA;  window frame's size and be slightly larger. Default is <code>false</code>.</p>&#xA;</blockquote>&#xA;&#xA;<p>HTH,</p>&#xA;",,user8022331,,"",,2018-05-03T23:57:30,"","",,0,,,
50176458,2,,46792566,2018-05-04T13:46:57,,0,,"<p>You didn't wait for value to come in stopReocoring. You need to change your stopRecording function to following:</p>&#xA;&#xA;<pre><code>function stopRecording() {&#xA;    var save = function() {&#xA;        console.log(blobs);&#xA;        toArrayBuffer(new Blob(blobs, {type: 'video/webm'}), function(ab) {&#xA;            console.log(ab);&#xA;            var buffer = toBuffer(ab);&#xA;            var file = `./videos/example.webm`;&#xA;            fs.writeFile(file, buffer, function(err) {&#xA;                if (err) {&#xA;                    console.error('Failed to save video ' + err);&#xA;                } else {&#xA;                    console.log('Saved video: ' + file);&#xA;                }&#xA;            });&#xA;        });&#xA;    };&#xA;    recorder.onstop = save;&#xA;    recorder.stop();&#xA;}&#xA;</code></pre>&#xA;",8425145,"",,"",,2018-05-04T13:46:57,"","",,0,,,
50184414,2,,50182294,2018-05-04T23:55:19,,0,,<p>It appears the problem was my original url. I didn't notice but the url i was using had backslashes instead of forward slashes.</p>&#xA;&#xA;<p>Using a replace to replace the backslashes with forward slashes has fixed it. </p>&#xA;&#xA;<p>Moral of the story: If you urls look crazy check your slashes.</p>&#xA;,4138281,"",,"",,2018-05-04T23:55:19,"","",,0,,,
50189648,2,,39761115,2018-05-05T12:49:52,,0,,"<p>It looks like this could be solved with a service worker, as shown here:</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/43813770/how-to-intercept-all-http-requests-including-form-submits"">How to intercept all http requests including form submits</a></p>&#xA;",2939415,"",,"",,2018-05-05T12:49:52,"","",,0,,,
50192065,2,,50189181,2018-05-05T17:12:40,,3,,"<p>you can't. <a href=""https://www.electron.build/multi-platform-build"" rel=""nofollow noreferrer"">https://www.electron.build/multi-platform-build</a></p>&#xA;&#xA;<pre><code>If your app has native dependency, &#xA;it can be compiled only on the target platform unless prebuild is not used.&#xA;&#xA;prebuild is a solution, but most node modules don't provide prebuilt binaries.&#xA;macOS Code Signing works only on macOS. Cannot be fixed.&#xA;</code></pre>&#xA;",2742189,"",,"",,2018-05-05T17:12:40,"","",,0,,,
50201589,2,,50201357,2018-05-06T15:46:49,,3,,"<p>It seems like you have a little confusion about <em>Electron</em>, even thou it is not the classical <code>client:server</code> model, ...</p>&#xA;&#xA;<h3>Lets understand Electron first:</h3>&#xA;&#xA;<hr>&#xA;&#xA;<h2>Main and Renderer Processes</h2>&#xA;&#xA;<blockquote>&#xA;  <p>The <strong>main</strong> process is for handling/creating BrowserWindows(Renderer) And&#xA;  for some communication from one renderer-Window to an other one.&#xA;  (maybe some other special stuff too)</p>&#xA;  &#xA;  <p>The <strong>renderer</strong> is where you really run the most of your app. With node,&#xA;  you have all you need there.</p>&#xA;</blockquote>&#xA;&#xA;<p>you then notice you will be needing a channel between the <strong>renderer process (web page) and the main process.</strong></p>&#xA;&#xA;<p>Don't worry, here is where <a href=""https://electronjs.org/docs/api/remote"" rel=""nofollow noreferrer""><code>remote</code></a> comes in handy : </p>&#xA;&#xA;<blockquote>&#xA;<pre><code>Use main process modules from the renderer process.&#xA;</code></pre>&#xA;  &#xA;  <p>The remote module provides a simple way to do <strong>inter-process communication</strong> (IPC) between the renderer process (web page) and the main process.</p>&#xA;</blockquote>&#xA;&#xA;<p>...even the other way round...</p>&#xA;&#xA;<blockquote>&#xA;  <p>Note: For the reverse (access the renderer process from the main&#xA;  process), you can use <a href=""https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture-callback"" rel=""nofollow noreferrer"">webContents.executeJavascript</a>.</p>&#xA;</blockquote>&#xA;&#xA;<p>So at the end you will be able of using all the magick in both sides.</p>&#xA;",2976093,"",,"",,2018-05-06T15:46:49,"","",,0,,,
50236667,2,,50229005,2018-05-08T14:59:54,,2,,"<p>Your code actually works. I tested on my windows and mac. Maybe it's shortcut key conflict, Alt+c may have been taken by some other software.</p>&#xA;&#xA;<p>Moreover I recommend you to register shortcut on windows focus instead of app ready, cause Electron will block other softwares, which using the same shortcut key to function.</p>&#xA;&#xA;<pre><code>const refreshCommand = process.platform === 'darwin' ? 'Cmd+R' : 'F5'&#xA;&#xA;app.on('browser-window-focus', () =&gt; {&#xA;globalShortcut.register(refreshCommand, () =&gt; {&#xA;    // do something&#xA;})&#xA;})&#xA;&#xA;app.on('browser-window-blur', () =&gt; {&#xA;globalShortcut.unregisterAll()&#xA;})&#xA;</code></pre>&#xA;",1042753,"",1042753,"",2018-05-11T01:44:14,2018-05-11T01:44:14,"","",,0,,,
50242270,2,,50242023,2018-05-08T21:07:13,,3,,"<p>According to what I've just read, you need to take the file path which you are capturing, and read it with <code>fs.readFile(path[, options], callback)</code> </p>&#xA;&#xA;<p>This returns a 'data' value, which you should then be able to use to write to where you want.</p>&#xA;&#xA;<pre><code>fs.readFile('/tmp/my.pdf', (err, data) =&gt; {&#xA;  if (err) throw err;&#xA;  fs.writeFileSync(path, data, 'binary');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback"" rel=""nofollow noreferrer"">https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback</a></p>&#xA;&#xA;<p>I got started here, have a look: <a href=""https://stackoverflow.com/questions/35654730/how-do-i-handle-local-file-uploads-in-electron"">How do I handle local file uploads in electron?</a></p>&#xA;&#xA;<p>The answer shows a slightly different way of capturing the file name (<code>dialog.showOpenDialog</code>) but I think what you're doing should be fine so long as you are getting the complete path.</p>&#xA;",399696,"",,"",,2018-05-08T21:07:13,"","",,0,,,
50248715,2,,50244784,2018-05-09T08:23:50,,1,,"<p>This seams like a good usecase for the <code>v-text</code> and <code>v-for</code> directive. Make <code>outputBuffer</code> an array where you append your content too. And do something like this. Be sure to remove key and index from the parameters if you don't need them.</p>&#xA;&#xA;<pre><code>&lt;pre&gt;&#xA;  &lt;template &#xA;    class=""scriptview-block-property""&#xA;    v-for=""(value, key, index) in outputBuffer""&#xA;    v-text=""value""&#xA;  /&gt;&#xA;&lt;/pre&gt;&#xA;</code></pre>&#xA;&#xA;<p><code>v-text</code> is meant for text that is not a composition of multiple strings. It prevents stuff like unwanted linebreaks and also escapes the inputed variable therefore a <code>&lt;/div&gt;</code> in your output will not break your app.&#xA;<a href=""https://vuejs.org/v2/api/#v-text"" rel=""nofollow noreferrer"">https://vuejs.org/v2/api/#v-text</a></p>&#xA;&#xA;<p><code>v-for</code> loops over that array and gives you each element to render. <a href=""https://vuejs.org/v2/api/#v-for"" rel=""nofollow noreferrer"">https://vuejs.org/v2/api/#v-for</a></p>&#xA;",5115009,"",,"",,2018-05-09T08:23:50,"","",,0,,,
50078927,2,,50070139,2018-04-28T16:53:36,,0,,"<p>Searching for that error led me <a href=""https://github.com/atom/fuzzy-finder/issues/324"" rel=""nofollow noreferrer"">here</a>, which suggests that it's a problem in <code>libuv</code>, an IO library used by Node. This issue is fixed in a later version of libuv, which is used by a later version of Node, which is used by a later version of Electron.</p>&#xA;&#xA;<p>Updating to Electron 2.0 solves this issue.</p>&#xA;",3479456,"",3479456,"",2018-05-27T15:59:12,2018-05-27T15:59:12,"","",,1,,,
50108633,2,,50107098,2018-04-30T21:43:46,,0,,<p>Found a way to do this by inspecting the jsbn oldest version. The whole code is wrapped in anonymous function with the following ending:</p>&#xA;&#xA;<pre><code>if (typeof exports !== 'undefined') {&#xA;    exports = module.exports = BigInteger;&#xA;} else {&#xA;   this.BigInteger = BigInteger;&#xA;}&#xA;}).call(this);&#xA;</code></pre>&#xA;&#xA;<p>I do not understand the <code>typeof exports !== 'undefined'</code> though.</p>&#xA;,2812237,"",,"",,2018-04-30T21:43:46,"","",,1,,,
50137021,2,,50134296,2018-05-02T14:22:59,,1,,"<p><a href=""https://electronjs.org/docs/api/client-request"" rel=""nofollow noreferrer"">ClientRequest</a> is a <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"" rel=""nofollow noreferrer"">Writable Stream</a>. The way to send body data to a Writable Stream is to use <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"" rel=""nofollow noreferrer""><code>.write()</code></a> and <a href=""https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback"" rel=""nofollow noreferrer""><code>.end()</code></a>. You can see these functions in the API documentation: <a href=""https://electronjs.org/docs/api/client-request#requestwritechunk-encoding-callback"" rel=""nofollow noreferrer""><code>ClientRequest.write()</code></a> and <a href=""https://electronjs.org/docs/api/client-request#requestendchunk-encoding-callback"" rel=""nofollow noreferrer""><code>ClientRequest.end()</code></a>. The argument <code>chunk</code> is where your data should go.</p>&#xA;&#xA;<p>In your example, that might look like this:</p>&#xA;&#xA;<pre><code>const requestApi = {&#xA;  method,&#xA;  headers,&#xA;  protocol: process.env.API_PROTOCOL,&#xA;  hostname: process.env.API_HOSTNAME,&#xA;  port: process.env.API_PORT,&#xA;  path: `${process.env.API_PATH}${slug}`,&#xA;};&#xA;&#xA;const request = new ClientRequest(requestApi);&#xA;&#xA;request.on('response', data =&gt; { /* ... */ });&#xA;&#xA;request.end(body);&#xA;</code></pre>&#xA;",5764553,"",,"",,2018-05-02T14:22:59,"","",,1,,,
50139771,2,,50138368,2018-05-02T16:50:44,,0,,"<p>Alright thanks to @Alexander Leithner and <a href=""https://stackoverflow.com/questions/24324231/an-error-happened-spawn-enoent-node-js-ffmpeg"">this question</a> I figured it out. So error was my environment variables which should be:</p>&#xA;&#xA;<ul>&#xA;<li>FFMPEG_PATH with value of path to ffmeg.exe</li>&#xA;<li>FFPROBE_PATH with value of path to ffprobe.exe</li>&#xA;<li>PATH with value of C:.......\ffmpeg\bin</li>&#xA;</ul>&#xA;",8425145,"",,"",,2018-05-02T16:50:44,"","",,1,,,
50227304,2,,50227149,2018-05-08T06:32:20,,2,,"<p>Node.js supports running shell functions:</p>&#xA;&#xA;<blockquote>&#xA;  <p>child_process.exec(command[, options][, callback]);</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>const exec = require('child_process').exec;&#xA;exec('some.exe', (err, stdout, stderr) =&gt; {&#xA;    if (err) {&#xA;        console.error(err);&#xA;        return;&#xA;}&#xA;console.log(stdout);&#xA;});&#xA;</code></pre>&#xA;",521364,"",,"",,2018-05-08T06:32:20,"","",,1,,,
50044320,2,,49927173,2018-04-26T13:30:20,,0,,"<p>It's a big chump of non constructive question which is normal. I've edited it and separated the questions to have a better understanding. </p>&#xA;&#xA;<p><strong>1. You have codeceptjs which is just a wrapper, which needs a framework like nightmarejs/selenium.</strong></p>&#xA;&#xA;<p>This is not a question but a statement which says he studied about it. Nothing much on it.</p>&#xA;&#xA;<p><strong>2. Now is nightmare a framework?</strong></p>&#xA;&#xA;<p>Nightmare is not a framework. The sub-title on the repo says it's a high-level browser automation library. The goal is to expose a few simple methods that mimic user actions (like goto, type and click), with an API. It was originally designed for automating tasks across sites that don't have APIs, but is most often used for UI testing and crawling.</p>&#xA;&#xA;<p>Really short version of the differences between Library and Framework would be that, a library is where you are in control, you pick and use what you want, and a framework is where the framework is in control, everything is already picked by them and you will just add some data on top of them. More on the differences on <a href=""https://stackoverflow.com/a/148759/6161265"">this answer</a>.</p>&#xA;&#xA;<p><strong>3. What is electronjs?</strong></p>&#xA;&#xA;<p>Electron is a framework that uses node and chromium under it's hood. It lets you write cross-platform desktop applications using JavaScript, HTML and CSS. It is based on Node.js and Chromium and is used by the Atom editor and many other apps.</p>&#xA;&#xA;<p><strong>4. How does electronjs differ from phantomjs? Which one is a headless browser?</strong></p>&#xA;&#xA;<p>PhantomJS is a headless browser scriptable with a JavaScript API. It's more comparable to chromium than electron. Electron is a framework that uses another headless browser called chromium while phantomjs itself is a headless browser.</p>&#xA;&#xA;<p><strong>5. Where do jasmine/mocha fit in? Are jasmine/mocha comparable to codeceptjs?</strong></p>&#xA;&#xA;<p>Jasemin/Mocha/Ava/Jest etc. are unit testing frameworks. Together with Nightmare/PhantomJS, you can create scripts which would test various ui/ux interactions for you. </p>&#xA;&#xA;<p>Codeceptjs is a testing framework for end-to-end testing with webdriver (or others). </p>&#xA;&#xA;<p>To understand the differences between unit and integration/end-to-end testing, check <a href=""https://stackoverflow.com/a/5357837/6161265"">this answer</a>.</p>&#xA;&#xA;<p>I hope that clears up many doubts. </p>&#xA;",6161265,"",,"",,2018-04-26T13:30:20,"","",,2,,,
50045001,2,,50043696,2018-04-26T14:00:49,,1,,"<p>I notice </p>&#xA;&#xA;<pre><code>integrity=""sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"" crossorigin=""anonymous""&#xA;</code></pre>&#xA;&#xA;<p>which to me isn't supposed to be there. this is maybe what's causing the issue.</p>&#xA;&#xA;<p><strong>ALSO</strong></p>&#xA;&#xA;<p>Why don't you add bootstrap locally instead? it has a lot of advantages and is how the majority of us do it.</p>&#xA;&#xA;<ol>&#xA;<li><p>in your Powershell or CMD or your IDE (coding program)'s console type either :</p>&#xA;&#xA;<p>(for Bootstrap 4 (in beta)):</p>&#xA;&#xA;<p><code>npm install bootstrap@next --save</code></p>&#xA;&#xA;<p><strong>OR</strong></p>&#xA;&#xA;<p>(for Bootstrap 3)</p>&#xA;&#xA;<p><code>npm install bootstrap --save</code></p></li>&#xA;<li><p>Configure <code>.angular-cli.json</code>:</p>&#xA;&#xA;<p><code>""styles"": [&#xA;""../node_modules/bootstrap/dist/css/bootstrap.min.css"",&#xA;""styles.scss""&#xA;]</code></p></li>&#xA;<li><p>configure <code>src/style.css</code> or <code>src/style.scss</code>:</p>&#xA;&#xA;<p><code>@import '~bootstrap/dist/css/bootstrap.min.css';</code></p></li>&#xA;</ol>&#xA;&#xA;<p>or you could use ngx-bootsrap wich is an angular wrapper for bootstrap.</p>&#xA;&#xA;<p>there's ups and downs to that. ngx-bootstrap is missing many components overall and doesn't have the latest and greatest in bootstrap but at least it's tailored for use in angular.</p>&#xA;&#xA;<p>sources : </p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://loiane.com/2017/08/how-to-add-bootstrap-to-an-angular-cli-project/"" rel=""nofollow noreferrer"">https://loiane.com/2017/08/how-to-add-bootstrap-to-an-angular-cli-project/</a></li>&#xA;<li><a href=""https://stackoverflow.com/questions/37649164/how-to-add-bootstrap-to-an-angular-cli-project"">How to add bootstrap to an angular-cli project</a></li>&#xA;</ul>&#xA;",4770754,"",4770754,"",2018-04-26T14:49:16,2018-04-26T14:49:16,"","",,2,,,
50051258,2,,50004257,2018-04-26T20:21:54,,0,,"<p>Using <code>window.require</code> instead of <code>require</code> is one way of avoiding the conflict between <code>require</code> since you're using <code>webpack</code> &amp; it brings it's own <code>require</code>. Try:</p>&#xA;&#xA;<pre><code>const shell = window.require('electron');&#xA;...      &#xA;onNavigate() {&#xA;   shell.openExternal(""http://www.google.com"");&#xA;}&#xA;...&#xA;</code></pre>&#xA;",1392578,"",,"",,2018-04-26T20:21:54,"","",,2,,,
50237500,2,,50102377,2018-05-08T15:41:27,,8,,"<pre><code>// main.js&#xA;const path = require('path')&#xA;const electron = require('electron')&#xA;const { app, BrowserWindow, ipcMain } = electron&#xA;&#xA;const window = new BrowserWindow({&#xA;    minWidth: 1200,&#xA;    minHeight: 700,&#xA;    autoHideMenuBar: true,&#xA;    resizable: true,&#xA;    show: false,&#xA;    scrollBounce: true,&#xA;    webPreferences: {&#xA;    preload: path.join(__dirname, 'preload.js'),&#xA;  }&#xA;})&#xA;window.webContents.loadURL('https://xxx.xxx.com') // load your web page&#xA;ipcMain.on('ping', (event, msg) =&gt; {&#xA;   console.log(msg) // msg from web page&#xA;   window.webContents.send('pong', 'hi') // send to web page&#xA;})&#xA;&#xA;&#xA;// preload.js&#xA;const { ipcRenderer } = require('electron');&#xA;function init() {&#xA;    // add global variables to your web page&#xA;    window.isElectron = true&#xA;    window.ipcRenderer = ipcRenderer&#xA;}&#xA;&#xA;init();&#xA;&#xA;&#xA;// your web page&#xA;&lt;script&gt;&#xA;  if (window.isElectron) {&#xA;      window.ipcRenderrer.send('ping', 'hello')&#xA;      window.ipcRenderrer.on('pong', (event, msg) =&gt; console.log(msg) )&#xA;  }&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",1042753,"",,"",,2018-05-08T15:41:27,"","",,2,,,
50157293,2,,49208343,2018-05-03T14:17:51,,3,,"<p>Your <code>recorder.stop()</code> will run as follows: (<a href=""https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stop"" rel=""nofollow noreferrer"">from MediaRecorder docs</a>)</p>&#xA;&#xA;<blockquote>&#xA;  <p>When the stop() method is invoked, the UA queues a task that runs the&#xA;  following steps:</p>&#xA;  &#xA;  <ol>&#xA;  <li>If <code>MediaRecorder.state</code> is ""inactive"", raise a DOM <code>InvalidState</code> error and terminate these steps. If the <code>MediaRecorder.state</code> is not ""inactive"", continue on to the next step. </li>&#xA;  <li>Set the <code>MediaRecorder.state</code> to ""inactive"" and stop capturing media.</li>&#xA;  <li>Raise a <code>dataavailable</code> event containing the Blob of data that has been gathered. </li>&#xA;  <li>Raise a <code>stop</code> event.</li>&#xA;  </ol>&#xA;</blockquote>&#xA;&#xA;<p>In your case you don't wait up the <code>stop</code> event, so <code>dataavailable</code> will fill <code>blobs</code> only after you started the file saving method.</p>&#xA;&#xA;<p>You have to restructure <code>stopRecording</code> to ensure recorded data is available. For example:&#xA;</p>&#xA;&#xA;<pre><code>function stopRecording () {&#xA;  const save = () =&gt; {&#xA;    ...&#xA;  }&#xA;  recorder.onstop = save&#xA;  recorder.stop()&#xA;}&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-05-03T14:17:51,"","",,4,,,
50166005,2,,50163652,2018-05-04T01:45:43,,1,,"<p>You're trying to call a function from a different module (every file in Node is its own module, which is different from the typical JS environment) <strong>without first importing the module.</strong></p>&#xA;&#xA;<p>It's not enough to just write a function in the main.js module:</p>&#xA;&#xA;<pre><code>function mainTestFileOpen() {&#xA;    console.log('File open test function in main.js');&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And expect to call it from the MainMenu.js module. You must first <code>export</code> it:</p>&#xA;&#xA;<pre><code>export function mainTestFileOpen() { ... }&#xA;</code></pre>&#xA;&#xA;<p>Then, in MainMenu.js, you can import it at the top:</p>&#xA;&#xA;<pre><code>import { mainTestFileOpen } from ""../main"";&#xA;</code></pre>&#xA;&#xA;<p>Same thing with <code>windowManager</code>. It doesn't look like you're doing anything with <code>WindowManager</code> from main.js, so just move the import and instantiation to MainMenu.js:</p>&#xA;&#xA;<pre><code>import { WindowManager } from ""./WindowManager"";&#xA;let windowManager = new WindowManager();&#xA;</code></pre>&#xA;&#xA;<p>And then you'll be able to do:</p>&#xA;&#xA;<pre><code>windowManager.doFileOpen();&#xA;</code></pre>&#xA;&#xA;<p><strong>Side Note:</strong></p>&#xA;&#xA;<p>You do stuff like this in your constructor: <code>this.doFileOpen = this.doFileOpen.bind(this);</code></p>&#xA;&#xA;<p>There is no need for this as the only way somebody could call <code>doFileOpen</code> is by calling it on the <code>windowManager</code> instance like so: <code>windowManager.doFileOpen(...)</code>.</p>&#xA;&#xA;<p>The same applies to:</p>&#xA;&#xA;<pre><code>this.init = this.init.bind(this);&#xA;this.getTemplate = this.getTemplate.bind(this);&#xA;</code></pre>&#xA;",3479456,"",3313563,"",2020-01-20T13:10:24,2020-01-20T13:10:24,"","",,4,,,
50169518,2,,50138299,2018-05-04T07:30:31,,0,,"<p>I assume that you wanted to get the last modified date of each image.</p>&#xA;&#xA;<pre><code>// Image gallery&#xA;    app.get('/gallery', (req, res) =&gt; {&#xA;    let images = getImagesFromDir(path.join(__dirname, 'public/uploads'));&#xA;    res.render('gallery', { title: 'Galerija slik', images: images })&#xA;});&#xA;&#xA;// dirPath: target image directory&#xA;function getImagesFromDir(dirPath) {&#xA;&#xA;    // All iamges holder, defalut value is empty&#xA;    let allImages = [];&#xA;&#xA;    // Iterator over the directory&#xA;    let files = fs.readdirSync(dirPath);&#xA;&#xA;    // Iterator over the files and push jpg and png images to allImages array.&#xA;    for (file of files) {&#xA;        let fileLocation = path.join(dirPath, file);&#xA;        var stat = fs.statSync(fileLocation);&#xA;        if (stat &amp;&amp; stat.isDirectory()) {&#xA;            getImagesFromDir(fileLocation); // process sub directories&#xA;        } else if (stat &amp;&amp; stat.isFile() &amp;&amp; ['.jpg', '.png'].indexOf(path.extname(fileLocation)) != -1) {&#xA;            allImages.push({path: 'uploads/'+file, lastModifiedDate: stat.mtime}); // push all .jpf and .png files to all images &#xA;        }&#xA;    }&#xA;&#xA;    // return all images in array formate&#xA;    return allImages;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And html should be updated like the below one.</p>&#xA;&#xA;<pre><code>&lt;div id=""posts""&gt; &lt;% for(let image of images) {%&gt; &lt;article class=""post""&gt; &lt;figure&gt; &lt;a href=""&lt;%= image.path %&gt;"" data-fancybox=""1""&gt;&lt;img src=""&lt;%= image.path %&gt;"" /&gt;&lt;/a&gt; &lt;/figure&gt; &lt;time&gt;&lt;%= image.lastModifiedDate %&gt;&lt;/time&gt; &lt;/article&gt; &lt;% } %&gt; &lt;/div&gt;&#xA;</code></pre>&#xA;",744534,"",744534,"",2018-05-05T11:23:26,2018-05-05T11:23:26,"","",,5,,,
50121975,2,,50121881,2018-05-01T18:39:08,,13,,"<p>Just add a recursive call and you are done:</p>&#xA;&#xA;<pre><code> function traverseDir(dir) {&#xA;   fs.readdirSync(dir).forEach(file =&gt; {&#xA;     let fullPath = path.join(dir, file);&#xA;     if (fs.lstatSync(fullPath).isDirectory()) {&#xA;        console.log(fullPath);&#xA;        traverseDir(fullPath);&#xA;      } else {&#xA;        console.log(fullPath);&#xA;      }  &#xA;   });&#xA; }&#xA;</code></pre>&#xA;",5260024,"",,"",,2018-05-01T18:39:08,"","",,7,,,
50179917,2,,50090977,2018-05-04T17:03:19,,6,,"<h1>Solution 1 - create your own</h1>&#xA;&#xA;<p>you can wrap your <code>axios</code> functions and send an event to your renderer process</p>&#xA;&#xA;<h2>main electron process</h2>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;&#xA;const {&#xA;  app,&#xA;  BrowserWindow,&#xA;  ipcMain&#xA;} = electron;&#xA;&#xA;const _axios = require('request-promise');&#xA;&#xA;const axios = {&#xA;  get: (url, params) =&gt; _axios.get(url, params).then(sendData),&#xA;  post: (url, params) =&gt; _axios.post(url, params).then(sendData),&#xA;  delete: (url, params) =&gt; _axios.delete(url, params).then(sendData),&#xA;  put: (url, params) =&gt; _axios.put(url, params).then(sendData)&#xA;  // ...&#xA;};&#xA;&#xA;function sendData() {&#xA;  return (data) =&gt; {&#xA;    mainWindow.webContents.send('network', data);&#xA;    return data;&#xA;  };&#xA;}&#xA;</code></pre>&#xA;&#xA;<h2>renderer process (index.html):</h2>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=""UTF-8""&gt;&#xA;  &lt;title&gt;Hello World!&lt;/title&gt;&#xA;&#xA;  &lt;link href=""https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css""&#xA;&#xA;        rel=""stylesheet""&gt;&#xA;  &lt;style&gt;&#xA;    .kb-debug-widget {&#xA;      position: fixed;&#xA;      bottom: 0;&#xA;      height: 200px;&#xA;      overflow-x: hidden;&#xA;      overflow-y: auto;&#xA;      background: grey;&#xA;      left: 0;&#xA;      right: 0;&#xA;      font-size: 10px;&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&#xA;&lt;body&gt;&#xA;  &lt;div class=""kb-debug-widget""&gt;&#xA;    &lt;table class=""table is-bordered is-striped is-narrow is-hoverable is-fullwidth""&#xA;           id=""network""&gt;&#xA;      &lt;tr&gt;&#xA;        &lt;th&gt;Name&lt;/th&gt;&#xA;        &lt;th&gt;Method&lt;/th&gt;&#xA;        &lt;th&gt;Status&lt;/th&gt;&#xA;        &lt;th&gt;Type&lt;/th&gt;&#xA;        &lt;th&gt;Body&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;    &lt;/table&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;script&gt;&#xA;    require('./renderer.js');&#xA;    var {&#xA;      ipcRenderer,&#xA;      remote&#xA;    } = require('electron');&#xA;&#xA;    ipcRenderer.on('network', (event, response) =&gt; {&#xA;      const networkElement = document.getElementById('network');&#xA;&#xA;      // print whatever you want here!&#xA;      networkElement.innerHTML +=&#xA;        `&#xA;      &lt;tr&gt;&#xA;        &lt;td&gt;${response.request.href}&lt;/td&gt;&#xA;        &lt;td&gt;${response.request.method}&lt;/td&gt;&#xA;        &lt;td&gt;${response.statusCode}&lt;/td&gt;&#xA;        &lt;td&gt;${response.headers['content-type']}&lt;/td&gt;&#xA;        &lt;td&gt;${response. data}&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      `;&#xA;&#xA;      // you can also print the network requests to the console with a decent UI by using console.table:&#xA;      console.table({&#xA;        name: response.request.href,&#xA;        method: response.request.method,&#xA;        status: response.statusCode,&#xA;        type: response.headers['content-type'],&#xA;        body: response. data,&#xA;      });&#xA;    });&#xA;  &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>This will create a widget on the bottom of your view.</p>&#xA;&#xA;<p>it's even easier with <code>request</code>:</p>&#xA;&#xA;<pre><code>const _request = require('request-promise');&#xA;const _axios = require('request-promise');&#xA;&#xA;// this should cover all sub-methods&#xA;const request = (params, callback) =&gt; {&#xA;  return _request(params, callback)&#xA;  .on('response', (response) =&gt; {&#xA;    mainWindow.webContents.send('network', response);&#xA;    return response;&#xA;  });&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Since both <code>axios</code> &amp; <code>request</code> return similar objects, you can use the same function on the renderer side.</p>&#xA;&#xA;<h2>code in action</h2>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/I1ZZF.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/I1ZZF.gif"" alt=""enter image description here""></a></p>&#xA;&#xA;<p><a href=""https://github.com/Thatkookooguy/SO-question-electron"" rel=""nofollow noreferrer"">Here's a GitHub repository with the code implemented</a></p>&#xA;&#xA;<h1>Solution 1: Alt - write network requests to renderer's console</h1>&#xA;&#xA;<p>I also added an option to print the requests to the dev tools console, with <code>console.table</code>. Here's how it looks:&#xA;<a href=""https://i.stack.imgur.com/Dp1aU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Dp1aU.png"" alt=""enter image description here""></a>&#xA;You can leave only this method if you don't want a widget inside your HTML.</p>&#xA;&#xA;<h1>Solution 2 - Run electron with the <code>--inspect</code> flag</h1>&#xA;&#xA;<p>You can also just <a href=""https://electronjs.org/docs/tutorial/debugging-main-process#command-line-switches"" rel=""nofollow noreferrer"">run electron with the <code>inspect</code> flag</a>, which allows you to debug your server code and has its own network tab with the ""server-side"" HTTP requests.</p>&#xA;&#xA;<p>In order to see it, run your electron application like so:</p>&#xA;&#xA;<pre><code>electron --inspect=&lt;port&gt; your/app&#xA;</code></pre>&#xA;&#xA;<p>if you want to immediatly break on the first line, run the same command but replace <code>--inspect</code> with <code>--inspect-brk</code>.</p>&#xA;&#xA;<p>After running the command, open any web-browser and go to <code>chrome://inspect</code> and selecting to inspect the launched Electron app present there.&#xA;<a href=""https://i.stack.imgur.com/uDPnK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/uDPnK.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>hope this helped. if you have any questions, you can ask me in the comments</p>&#xA;",1788884,"",1788884,"",2018-05-10T15:14:29,2018-05-10T15:14:29,"","",,19,,,
40634587,2,,39639766,2016-11-16T14:25:18,,0,,<p>I upgraded my version of nwjs to 0.14.7 and the problem went away.</p>&#xA;,1085660,"",,"",,2016-11-16T14:25:18,"","",,0,,,
40637243,2,,40606063,2016-11-16T16:26:51,,0,,"<p>Electron allows use of the Node API meaning the best way to access the file system is to use <code>fs</code>. In particular, the <code>fs.Stats</code> class described here <a href=""https://nodejs.org/api/fs.html#fs_class_fs_stats"" rel=""nofollow noreferrer"">https://nodejs.org/api/fs.html#fs_class_fs_stats</a></p>&#xA;&#xA;<p>You can use <code>fs.stat</code> to get the <code>fs.Stats</code> object for the file you want</p>&#xA;&#xA;<pre><code>fs.stat(""path/to/file.exe"", (err, stats) =&gt; someFunction(err, stats));&#xA;</code></pre>&#xA;&#xA;<p>Where <code>someFunction</code> checks the returned <code>fs.Stats</code> object for the relevant data. The API link above says that the <code>atime</code>, <code>mtime</code>, <code>ctime</code>, and <code>birthtime</code> properties of the <code>stats</code> object representing access time, modified time, changed time, and creation time respectively.</p>&#xA;",4445414,"",,"",,2016-11-16T16:26:51,"","",,0,,,
40657802,2,,40517255,2016-11-17T14:43:04,,0,,<p>There must have been some problem with my testing. The above code worked after rebuilding the project and the webview element does what it needs to do in the electron context.</p>&#xA;,2371036,"",,"",,2016-11-17T14:43:04,"","",,0,,,
40678908,2,,40483657,2016-11-18T13:56:43,,0,,"<p>We enabled CORS on the Webserver and this setting allowed us to consume the REST-API from a different URL.</p>&#xA;&#xA;<p>See <a href=""https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Cross-origin_resource_sharing</a> for details.</p>&#xA;",5661641,"",,"",,2016-11-18T13:56:43,"","",,0,,,
40698771,2,,40698513,2016-11-19T22:50:20,,0,,"<p>It will work because Angular 2 is a framework for browsers and NW is simply a chromium with nodejs. So you can turn every website into a NW standalone application.</p>&#xA;&#xA;<p>You can put all dependencys in one package.json. Then in your main.js you open your index.html from Angular 2. To add more functionaly that are not avalible in browsers you can require modules in your angular app that are only avalible in node.js.</p>&#xA;&#xA;<p>Maybe you should also take a look on electron, it is similar but runs 30% faster and i think easyer beacuse it is used more.</p>&#xA;",6540936,"",,"",,2016-11-19T22:50:20,"","",,1,,,
40744033,2,,40732125,2016-11-22T14:08:39,,0,,"<p>I solved it by using <code>ng-if</code> instead of <code>ng-show</code>.</p>&#xA;&#xA;<p>But with some details like it says <a href=""https://stackoverflow.com/questions/29120637/angularjs-ng-if-directive-briefly-renders-even-when-condition-is-false-before-re"">here</a>.</p>&#xA;&#xA;<p>Basically <code>ng-if</code> generates a sub-scope so I need to put it in an inner tag and I also need to use <code>ng-src</code>.</p>&#xA;&#xA;<pre><code>&lt;div ng-controller=""videoCtrl"" &gt;&#xA;    &lt;div ng-if=""isVideoOpened""&gt;&#xA;        &lt;video id=""v1"" controls class=""videoInsert""&gt;&#xA;            &lt;source type=""video/mp4; codecs=&amp;quot;avc1.42E01E, mp4a.40.2&amp;quot;"" ng-src=""{{videoPathFile}}"" /&gt;&#xA;        &lt;/video&gt;&#xA;    &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;</code></pre>&#xA;",2245872,"",-1,"",2017-05-23T12:24:31,2016-11-22T14:08:39,"","",,0,,,
40746039,2,,40725589,2016-11-22T15:42:22,,0,,<p>I've managed it. The issue was caused by an old dependency to electron. Once updated it to the latest version I know (1.4.7) it all started working.</p>&#xA;,3831959,"",,"",,2016-11-22T15:42:22,"","",,0,,,
40752970,2,,40751421,2016-11-22T22:39:38,,0,,"<p>I think it is the easiest way to run python script as child process.</p>&#xA;&#xA;<pre><code>const childProcess = require('child_process'),&#xA;      cmd = './script.py --opt=' + anyValueToPass;&#xA;&#xA;childProcess.exec(cmd, function(err, stdout, stderr) {&#xA;  // command output is in stdout&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Read more about child process at: <a href=""https://stackoverflow.com/questions/20643470/execute-a-command-line-binary-with-node-js"">Execute a command line binary with Node.js</a></p>&#xA;&#xA;<p>In this way, you ned to care for command injection vulnerability.</p>&#xA;",1006850,"",-1,"",2017-05-23T12:30:52,2016-11-24T10:31:36,"","",,0,,,
40771552,2,,40745638,2016-11-23T18:12:50,,0,,"<p>Do you have a <code>package.json</code> in your project directory? If so, does it have Bitcoin JS inside the <code>dependencies:</code>?  If not, run <code>npm init</code> and fill out the fields that it asks for or just hit <code>enter</code> several time to leave them blank.  After that you should have a <code>package.json</code> file.  Now run <code>npm install bitcoinjs-lib --save</code>. You should now have BitcoinJS in your <code>node_modules</code> folder and it should be included as a dependency in your <code>package.json</code>. </p>&#xA;",3992060,"",,"",,2016-11-23T18:12:50,"","",,1,,,
40568380,2,,40549421,2016-11-12T22:27:23,,1,,"<p>At my request the author added it to the current version (8.5.1):</p>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-builder/issues/899"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-builder/issues/899</a></p>&#xA;&#xA;<p>so now we can do:</p>&#xA;&#xA;<pre><code>builder.build()&#xA;    .then(paths =&gt; {&#xA;        //paths contains an array of export file paths, e.g.:&#xA;        console.log(paths[0]); //= c:/MyProject/dist/My Project Setup 1.0.0.exe&#xA;        console.log(paths[1]); //= c:/MyProject/dist/myproject-1.0.0-x86_64.AppImage&#xA;    });&#xA;</code></pre>&#xA;",1324284,"",,"",,2016-11-12T22:27:23,"","",,0,,,
40611973,2,,40599219,2016-11-15T14:12:01,,1,,"<h3>How to parse command line arguments in Electron?</h3>&#xA;&#xA;<p>This is no different than parsing command line arguments from NodeJS using <code>process.env</code>. The questions <a href=""https://stackoverflow.com/questions/30815446/how-to-pass-command-line-argument-in-electron"">has been answered before</a>, so I'll not go into much more detail here.</p>&#xA;&#xA;<h3>How to interact with a running Electron instance via command line switches</h3>&#xA;&#xA;<p>First of all I'll assume you restrict the number of possible running instances to a single one - otherwise you'll have to figure out which instance of the program to talk to (possibly via adding the process id to your command line arguments.)</p>&#xA;&#xA;<p>Let's code. For your main.js:</p>&#xA;&#xA;<pre><code>var shouldQuit = app.makeSingleInstance(function (commandLine, workingDirectory) {&#xA;    if (mainWindow) {&#xA;        if (mainWindow.isMinimized()) mainWindow.restore()&#xA;        mainWindow.focus()&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This snippet is called when a second instance is attempted to be launched, instead it brings the first instance into focus. This can easily be adapted to pass the commandLine arguments saved in <code>commandLine</code> to the original instance.</p>&#xA;&#xA;<p>Additionally, you'll want to prevent the second instance from actually opening and quit instead:</p>&#xA;&#xA;<pre><code>if (shouldQuit) {&#xA;    app.quit();&#xA;    return;&#xA;}&#xA;</code></pre>&#xA;",1792564,"",-1,"",2017-05-23T12:07:17,2016-11-15T14:12:01,"","",,0,,,
40628473,2,,40218185,2016-11-16T09:34:20,,1,,"<p>Workaround which lets me use the global <strong>nw</strong> variable from NW.js: <code>declare var nw: any;</code>  </p>&#xA;&#xA;<p>The compiler doesn't complain anymore. I don't get any type information, but I can live with that and just use it as I would in JS.</p>&#xA;",5115768,"",,"",,2016-11-16T09:34:20,"","",,0,,,
40651720,2,,40579451,2016-11-17T09:56:44,,1,,"<p>I had the same problem and I solved it in another way.&#xA;I created a frameless BrowserWindow and I made my ""system bar"" with the icons that I want and the listeners that I want in the webpage loaded in this window.</p>&#xA;&#xA;<p>This works fine and isn't expensive.</p>&#xA;&#xA;<pre><code>    let wX;&#xA;    let wY;&#xA;    let dragging = false;&#xA;    $('#systembar').mousedown(function (e) {&#xA;        ipcRenderer.send('asynchronous-message', 'down')&#xA;        dragging = true;&#xA;        wX = e.pageX;&#xA;        wY = e.pageY;&#xA;    });&#xA;&#xA;    $(window).mousemove(function (e) {&#xA;        e.stopPropagation();&#xA;        e.preventDefault();&#xA;        if (dragging) {&#xA;            var xLoc = e.screenX - wX;&#xA;            var yLoc = e.screenY - wY;&#xA;&#xA;            try {&#xA;                remote.BrowserWindow.getFocusedWindow().setPosition(xLoc, yLoc);&#xA;            } catch (err) {&#xA;                console.log(err);&#xA;            }&#xA;        }&#xA;    });&#xA;&#xA;    $('#systembar').mouseup(function () {&#xA;        dragging = false;&#xA;        ipcRenderer.send('asynchronous-message', 'up')&#xA;    });&#xA;</code></pre>&#xA;",6081475,"",,"",,2016-11-17T09:56:44,"","",,1,,,
40672848,2,,40672642,2016-11-18T08:54:10,,1,,"<p>It doesn't throw me error on <code>1.4.5</code></p>&#xA;&#xA;<p>[Highlight of comment:] &#xA;Also, based on the release notes, <code>net</code> api is available only from <code>1.4.5</code> on <a href=""https://github.com/electron/electron/releases/tag/v1.4.5"" rel=""nofollow noreferrer"">https://github.com/electron/electron/releases/tag/v1.4.5</a></p>&#xA;",2550156,"",2550156,"",2016-11-18T10:12:59,2016-11-18T10:12:59,"","",,7,,,
40707285,2,,40554485,2016-11-20T17:47:23,,1,,"<p>After you've built the list of anchors, you'll need to iterate over them, which with Promises is a non-trivial task.  Consider the following, which iterates over your results and gets the title for each page:</p>&#xA;&#xA;<pre><code>nightmare.then((result) =&gt; &#xA;  result.reduce(function(accumulator, url) {&#xA;    return accumulator.then(function(results) {&#xA;      return nightmare.goto(url)&#xA;        .wait('body')&#xA;        .title()&#xA;        .then(function(result){&#xA;          results.push(result);&#xA;          return results;&#xA;        });&#xA;    });&#xA;  }, Promise.resolve([])).then(function(results){&#xA;    console.dir(results);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You may want to give <a href=""https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md"" rel=""nofollow noreferrer"">""Asynchronous Operations and Loops"" at <code>nightmare-examples</code></a> a read.  That should help you get started.</p>&#xA;",1139700,"",,"",,2016-11-20T17:47:23,"","",,4,,,
40738468,2,,40725566,2016-11-22T09:45:08,,1,,"<p>The problem is that Babel doesn't see files that were loaded via <code>require</code>, and they are loaded as they are, without transpilation.</p>&#xA;&#xA;<p>There can be several ways to work this around, but the easiest one will be using Babel at build step.</p>&#xA;&#xA;<p>Process your source code and then load processed code <code>nw.js</code> environment. The example how to do that you can find at <a href=""https://github.com/szwacz/nw-boilerplate"" rel=""nofollow noreferrer"">this boilerplate project</a></p>&#xA;",1297743,"",,"",,2016-11-22T09:45:08,"","",,1,,,
40609881,2,,40609290,2016-11-15T12:29:00,,2,,"<p>It turned out to be a problem with the <code>node</code> version I'm using. Possibly electron is not compatible with the newer version of node that is released. </p>&#xA;&#xA;<p>I've installed <a href=""https://github.com/creationix/nvm"" rel=""nofollow noreferrer"">nvm</a> and installed a lower version of node. In my case <code>v6.3.0</code>. After that I was able to install electron without errors.</p>&#xA;",2538729,"",,"",,2016-11-15T12:29:00,"","",,1,,,
40672876,2,,40672832,2016-11-18T08:56:14,,2,,"<p>There a <code>show</code> option in the BrowserWindow options. By default it's <code>true</code>, but by turning it off (<code>show: false</code>) you will hide the window, so the app runs, but there's no visible Window.</p>&#xA;&#xA;<p>From <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">Docs</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>show</code> Boolean (optional) - Whether window should be shown when created. Default is <code>true</code>.</p>&#xA;</blockquote>&#xA;",1420197,"",,"",,2016-11-18T08:56:14,"","",,0,,,
40663724,2,,40640766,2016-11-17T19:44:54,,3,,"<h1>EDIT</h1>&#xA;&#xA;<p>For security reasons, the preferred way to use <code>require</code> in renderer processes is to use <code>preload</code> to inject only the minimum node integration your page requires. See point 2) of <a href=""https://github.com/electron/electron/blob/master/docs/tutorial/security.md#disable-node.js-integration-for-remote-content"" rel=""nofollow noreferrer"">Electron's security recommendations</a>. A minimal example for <code>ipcRenderer</code>:</p>&#xA;&#xA;<pre><code>// main.ts&#xA;const mainWindow = new BrowserWindow({&#xA;  webPreferences: {&#xA;    nodeIntegration: false,&#xA;    preload: './preload.js'&#xA;  }&#xA;})&#xA;&#xA;mainWindow.loadURL('https://my-website.com')&#xA;</code></pre>&#xA;&#xA;<p></p>&#xA;&#xA;<pre><code>// preload.js&#xA;const { ipcRenderer } = require('electron')&#xA;&#xA;window.sendToElectron= function (channel) {&#xA;  ipcRenderer.send(channel)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In your webpage you can now use <code>window.sendToElectron(""ping"")</code>.</p>&#xA;&#xA;<p>If you're using <code>&lt;webview&gt;</code> inside the renderer process, you can use <code>&lt;webview src=""page.html"" preload=""./preload.js"" /&gt;</code> to achieve the same result. So, that's what I would use to answer my original question, and inside <code>preload.js</code> I would inject a function that calls <code>ipcRenderer.sendToHost(""pong"")</code> in the global <code>window</code>.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h2>Old answer (bad for security)</h2>&#xA;&#xA;<p>I had missed a vital point in the webview docs. To be able to call <code>require</code> from the page embedded inside the webview, you need to set the <code>nodeintegration</code> attribute on the webview tag:</p>&#xA;&#xA;<p><code>&lt;webview id=""webview"" nodeintegration /&gt;</code></p>&#xA;",3842872,"",3842872,"",2018-04-18T15:46:35,2018-04-18T15:46:35,"","",,3,,,
40675552,2,,40675204,2016-11-18T11:07:45,,3,,"<p>LevelDB is still notorious for unreliability and prone to corruption. There are quite <a href=""https://github.com/google/leveldb/issues?q=is%3Aopen%20is%3Aissue%20label%3Abug"" rel=""nofollow noreferrer"">some</a> issues still which need to be addressed. </p>&#xA;&#xA;<p>NeDB seems like a better option IMO.</p>&#xA;&#xA;<p>EDIT: Haven't used level DB in quite some while since writing this answer.</p>&#xA;",4952669,"",4952669,"",2018-11-27T04:37:07,2018-11-27T04:37:07,"","",,0,,,
40682290,2,,40681227,2016-11-18T16:53:29,,3,,"<p>Are you including the autoUpdater module correctly?</p>&#xA;&#xA;<pre><code>const {autoUpdater} = require('electron')&#xA;</code></pre>&#xA;&#xA;<p>If so try to execute the code after the app 'ready' event.</p>&#xA;&#xA;<pre><code>app.on('ready', () =&gt; {&#xA;  const feedURL = 'C:\\Users\\p00009970\\Desktop\\update_test';&#xA;  autoUpdater.setFeedURL(feedURL); &#xA;  autoUpdater.checkForUpdates(); &#xA;})&#xA;</code></pre>&#xA;",371062,"",,"",,2016-11-18T16:53:29,"","",,3,,,
40736958,2,,40733521,2016-11-22T08:25:57,,4,,"<p>This particular issue has been <a href=""https://github.com/Microsoft/BashOnWindows/issues/758"" rel=""nofollow noreferrer"">resolved</a> in the Windows Insider builds, but others still remain that prevent Electron from working in WSL.</p>&#xA;",1259938,"",,"",,2016-11-22T08:25:57,"","",,0,,,
40625898,2,,40623356,2016-11-16T07:01:52,,5,,"<p>You're on the right track. I would suggest using a WebSocket based server / client architecture. </p>&#xA;&#xA;<p>The server application is continuously running and handles inter-player communication as well as providing a database. The database could be integrated in the server application as a starting point, and, depending on your needs concerning scalability, be extracted as a standalone service in the long run.</p>&#xA;&#xA;<p>Client applications could then come in many forms (a website, a desktop application, a mobile app). Using electron is a great way to enable cross-platform desktop application development that is adaptable to any of these scenarios, possibly also enabling to extract the contained web application as either a hosted website or even mobile application (using, for example, react-native or nativescript).</p>&#xA;&#xA;<p>Good luck!</p>&#xA;",1792564,"",1792564,"",2018-05-16T12:54:40,2018-05-16T12:54:40,"","",,4,,,
40735102,2,,40721277,2016-11-22T06:24:08,,7,,"<p>Decorators (in general) can not be applied to variables, only to classes and properties. However, <code>observable</code> can also be invoked as funcion (so without the <code>@</code>), and then you can objects into it as well. </p>&#xA;&#xA;<p>P.S. note that MobX does modify the internals of external libraries, so passing your entire database class to <code>observable</code> will not magically make your whole database lib reactive, it will just create an <a href=""https://mobxjs.github.io/mobx/refguide/boxed.html"" rel=""noreferrer"">observable reference</a> to the database</p>&#xA;",1983583,"",,"",,2016-11-22T06:24:08,"","",,3,,,
40766189,2,,40763427,2016-11-23T13:45:39,,8,,"<p>There is a <a href=""https://github.com/atom/electron/issues/1334"" rel=""nofollow noreferrer"">known issue in Electron</a> ( which has lately been marked as <code>wontfix</code> ) that prevents the usual approach to catch key events using the traditional JS approach.</p>&#xA;&#xA;<p>There also is a small library called <a href=""https://www.npmjs.com/package/electron-localshortcut"" rel=""nofollow noreferrer"">electron-localshortcut</a> that circumvents this issue by hijacking the Electron global shortcuts API when the window is active.</p>&#xA;&#xA;<p>Use like this in your main.js:</p>&#xA;&#xA;<pre><code>const electronLocalshortcut = require('electron-localshortcut');&#xA;electronLocalshortcut.register(mainWindow, 'F12', () =&gt; {&#xA;    // Open DevTools&#xA;});&#xA;</code></pre>&#xA;",1792564,"",1792564,"",2019-05-23T06:23:55,2019-05-23T06:23:55,"","",,3,,,
40726860,2,,40726568,2016-11-21T18:20:10,,10,,"<p>You can use the standard nodeJS <code>os</code> API to retrieve the (host)name of a computer, <a href=""https://millermedeiros.github.io/mdoc/examples/node_api/doc/os.html#os.hostname"" rel=""nofollow noreferrer"">see this API documentation</a> for more details.</p>&#xA;&#xA;<pre><code>const computerName = os.hostname()&#xA;</code></pre>&#xA;",1792564,"",1792564,"",2018-07-07T12:43:49,2018-07-07T12:43:49,"","",,1,,,
30022416,2,,29998215,2015-05-04T03:59:09,,0,,<p>It seems I was going the wrong way. The blend mode is available for menus only.</p>&#xA;,4856097,"",,"",,2015-05-04T03:59:09,"","",,0,,,
30110783,2,,30109690,2015-05-07T20:11:17,,0,,"<p>You may get some luck with this:</p>&#xA;&#xA;<p><a href=""https://github.com/nwjs/nw.js/wiki/Shell"" rel=""nofollow"">https://github.com/nwjs/nw.js/wiki/Shell</a>, though I'm unsure if it relates to running executables.</p>&#xA;",371045,"",,"",,2015-05-07T20:11:17,"","",,0,,,
30183356,2,,30165928,2015-05-12T06:28:38,,0,,"<p>It is caused by the cache,and the Node-Webkit do not provide api to forbidden cache.Using statement clear cache in the <strong>index.html</strong>:</p>&#xA;&#xA;<pre><code>gui.App.clearCache();&#xA;</code></pre>&#xA;",2628868,"",,"",,2015-05-12T06:28:38,"","",,0,,,
30061059,2,,30036216,2015-05-05T18:56:28,,1,,"<p>The jQuery-selector returns an array of selected DOM elements. In your case, you would pick the first (and probably only) element:</p>&#xA;&#xA;<pre><code>$('#iframe').get(0).contentWindow.showAssetPicker();&#xA;</code></pre>&#xA;",1300910,"",,"",,2015-05-05T18:56:28,"","",,1,,,
30103249,2,,30094896,2015-05-07T13:55:53,,1,,"<p>Response headers are available in the mentioned event as soon as this patch gets merged: <a href=""https://github.com/atom/electron/pull/1604"" rel=""nofollow"">https://github.com/atom/electron/pull/1604</a> After that downloads can be caught by checking for the <code>Content-Disposition</code> header.</p>&#xA;",296959,"",,"",,2015-05-07T13:55:53,"","",,0,,,
30004931,2,,29994692,2015-05-02T16:50:31,,2,,"<p>Instead of creating an array of files (<code>filesPDF</code>), you should create an array of <code>PdfReader</code> instances. Add each of these readers to the <code>pdf</code> and after closing the <code>pdf</code>, loop over the readers once more to close them:</p>&#xA;&#xA;<pre><code>foreach (PdfReader reader in fileReaders) {               &#xA;    reader.Close();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now the filehandlers will be released, and you'll be able to delete the files.</p>&#xA;",1622493,"",,"",,2015-05-02T16:50:31,"","",,0,,,
30041474,2,,30041394,2015-05-04T23:03:50,,2,,"<p>I have created a file that I am calling interop.js  I load this script into my index.html and it will handle all of the chrome packaged app API calls for fileStorage if it's a nw.js project.  If it's a chrome packaged app, then chrome will handle it's own API.</p>&#xA;&#xA;<pre><code> //if process is undefined then it is not an nw.js project and we can ignore the rest of the code;&#xA; if (typeof process == 'undefined') {}&#xA; //this is a nw.js project, spoof the chrome packaged app API&#xA; else {&#xA;     var fs = require('fs')&#xA;         chrome = new function () {&#xA;        var fileSystem = {&#xA;             //callback return readableFileEntry, which has a&#xA;            chooseEntry : function (params, callback) {&#xA;                 if (params.type == 'openFile') {&#xA;                     //open file choose&#xA;                    chooseFile(params, function (files) {&#xA;                         //this is technically an html5 ""filelist""  we need to turn it into an array if there is more&#xA;                        //than one, and just return the single file if there isn't&#xA;                         if (!files) {&#xA;                             return callback(null)&#xA;                         }&#xA;                        async.map(files, function (file, cb) {&#xA;                             //normally chrome provides a 'readablefileentry' that will only give you the file&#xA;                            //asynchronously using the file() function&#xA;                             file.file = function (next) {&#xA;                                 return next(this);&#xA;                             }&#xA;                            cb(null, file)&#xA;                         }, function (err, files) {&#xA;                             if (files.length &gt; 1) {&#xA;                                 return callback(files);&#xA;                             } else {&#xA;                                 return callback(files[0]);&#xA;                             }&#xA;                         })&#xA;                     })&#xA;                 } else if (params.type == 'saveFile') {&#xA;                     chooseFile(params, function (files) {&#xA;                         var file = files[0];&#xA;                        debugger;&#xA;                         file.createWriter = function (next) {&#xA;                             var writer = {&#xA;                                 write : function (blob) {&#xA;                                     debugger;&#xA;                                    var reader = new FileReader()&#xA;                                         reader.readAsArrayBuffer(blob)&#xA;                                        reader.addEventListener('loadend', function (e) {&#xA;                                             var binary = new Uint8Array(reader.result)&#xA;                                                 debugger;&#xA;                                             fs.writeFile(file.path, new Buffer(binary), function (err) {&#xA;                                                 //if the on error and writeend has been defined then callback, otherwise throw the error and log success&#xA;                                                if (err &amp;&amp; writer.onerror) {&#xA;                                                     writer.onerror(err)&#xA;                                                 } else if (err) {&#xA;                                                     throw err&#xA;                                                 } else if (writer.onwriteend) {&#xA;                                                     writer.onwriteend()&#xA;                                                 } else {&#xA;                                                     console.log('file was written but no callback was defined')&#xA;                                                 }&#xA;                                             })&#xA;                                         });&#xA;                                 }&#xA;                             }&#xA;                            return next(writer)&#xA;                         }&#xA;                        return callback(file)&#xA;                     })&#xA;                 }&#xA;                function chooseFile(params, next) {&#xA;                     var fileHtml = '&lt;input type=""file""'&#xA;                         debugger;&#xA;                     if (params.acceptsMultiple)&#xA;                         fileHtml += ' multiple';&#xA;                     if (params.accepts &amp;&amp; params.accepts.length &gt; 0 &amp;&amp; params.accepts[0].extensions) {&#xA;                         fileHtml += ' accept=""'&#xA;                        for (var i = 0; i &lt; params.accepts[0].extensions.length; i++) {&#xA;                             if (i != 0)&#xA;                                 fileHtml += ','&#xA;                                fileHtml += '.' + params.accepts[0].extensions[i]&#xA;                         }&#xA;                        fileHtml += '""'&#xA;                     }&#xA;                    if (params.suggestedName) {&#xA;                         fileHtml += ' nwsaveas=""' + params.suggestedName + '""'&#xA;                     }&#xA;&#xA;                     fileHtml += '&gt;'&#xA;&#xA;                     var chooser = $(fileHtml);&#xA;                    chooser.change(function (evt) {&#xA;                         debugger;&#xA;                        return next(chooser[0].files)&#xA;                     });&#xA;&#xA;                     chooser.click();&#xA;                 }&#xA;             }&#xA;         }&#xA;&#xA;         return {&#xA;             fileSystem : fileSystem,&#xA;         }&#xA;     };&#xA; }&#xA;</code></pre>&#xA;",2989132,"",,"",,2015-05-04T23:03:50,"","",,0,,,
30120808,2,,30004659,2015-05-08T09:48:56,,3,,<p>After displaying error details the error was pretty clear.</p>&#xA;&#xA;<pre><code>WARNING in ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js&#xA;Module not found: Error: Cannot resolve 'file' or 'directory' ./win32/x64/bson in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext&#xA;resolve file&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/x64/bson doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/x64/bson.js doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/x64/bson.jsx doesn't exist&#xA;resolve directory&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/x64/bson doesn't exist (directory default file)&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/x64/bson/package.json doesn't exist (directory description file)&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/x64/bson]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/x64/bson.js]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/x64/bson.jsx]&#xA; @ ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js 6:10-37&#xA;&#xA;WARNING in ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js&#xA;Module not found: Error: Cannot resolve 'file' or 'directory' ./win32/ia32/bson in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext&#xA;resolve file&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/ia32/bson doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/ia32/bson.js doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/ia32/bson.jsx doesn't exist&#xA;resolve directory&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/ia32/bson doesn't exist (directory default file)&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/ia32/bson/package.json doesn't exist (directory description file)&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/ia32/bson]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/ia32/bson.js]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext/win32/ia32/bson.jsx]&#xA; @ ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js 8:10-38&#xA;&#xA;WARNING in ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js&#xA;Module not found: Error: Cannot resolve 'file' or 'directory' ../build/Release/bson in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/ext&#xA;resolve file&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/build/Release/bson doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/build/Release/bson.js doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/build/Release/bson.jsx doesn't exist&#xA;resolve directory&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/build/Release/bson doesn't exist (directory default file)&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/build/Release/bson/package.json doesn't exist (directory description file)&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/build/Release/bson]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/build/Release/bson.js]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/node_modules/bson-ext/build/Release/bson.jsx]&#xA; @ ./~/mongoose/~/mongodb/~/mongodb-core/~/bson/~/bson-ext/ext/index.js 10:10-42 15:9-41&#xA;&#xA;ERROR in ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/kerberos.js&#xA;Module not found: Error: Cannot resolve 'file' or 'directory' ../build/Release/kerberos in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/lib&#xA;resolve file&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx doesn't exist&#xA;resolve directory&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist (directory default file)&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos/package.json doesn't exist (directory description file)&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx]&#xA; @ ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/kerberos.js 1:15-51&#xA;&#xA;ERROR in ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/win32/wrappers/security_credentials.js&#xA;Module not found: Error: Cannot resolve 'file' or 'directory' ../../../build/Release/kerberos in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/lib/win32/wrappers&#xA;resolve file&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx doesn't exist&#xA;resolve directory&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos/package.json doesn't exist (directory description file)&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist (directory default file)&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx]&#xA; @ ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/win32/wrappers/security_credentials.js 1:32-74&#xA;&#xA;ERROR in ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/win32/wrappers/security_context.js&#xA;Module not found: Error: Cannot resolve 'file' or 'directory' ../../../build/Release/kerberos in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/lib/win32/wrappers&#xA;resolve file&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx doesn't exist&#xA;resolve directory&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos/package.json doesn't exist (directory description file)&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist (directory default file)&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx]&#xA; @ ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/win32/wrappers/security_context.js 1:28-70&#xA;&#xA;ERROR in ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/win32/wrappers/security_buffer.js&#xA;Module not found: Error: Cannot resolve 'file' or 'directory' ../../../build/Release/kerberos in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/lib/win32/wrappers&#xA;resolve file&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx doesn't exist&#xA;resolve directory&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos/package.json doesn't exist (directory description file)&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist (directory default file)&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx]&#xA; @ ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/win32/wrappers/security_buffer.js 1:27-69&#xA;&#xA;ERROR in ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/win32/wrappers/security_buffer_descriptor.js&#xA;Module not found: Error: Cannot resolve 'file' or 'directory' ../../../build/Release/kerberos in /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/lib/win32/wrappers&#xA;resolve file&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js doesn't exist&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx doesn't exist&#xA;resolve directory&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos/package.json doesn't exist (directory description file)&#xA;  /Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos doesn't exist (directory default file)&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.js]&#xA;[/Users/Johannes/Documents/Development/holmes/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build/Release/kerberos.jsx]&#xA; @ ./~/mongoose/~/mongodb/~/mongodb-core/~/kerberos/lib/win32/wrappers/security_buffer_descriptor.js 1:37-79&#xA;</code></pre>&#xA;&#xA;<p>So I just forgot to add <code>.node</code> to the <code>resolve.extensions</code> array.</p>&#xA;,735226,"",,"",,2015-05-08T09:48:56,"","",,1,,,
30197640,2,,30197163,2015-05-12T17:25:17,,3,,"<p>This will get you an array of all installed services:</p>&#xA;&#xA;<pre><code>var exec = require(""child_process"").exec;&#xA;exec(""sc query state= all"", function(err, stdout) {&#xA;    var lines = stdout.toString().split(""\r\n"").filter(function (line) {&#xA;        return line.indexOf(""SERVICE_NAME"") !== -1;&#xA;    }).map(function (line) {&#xA;        return line.replace(""SERVICE_NAME: "", """");&#xA;    });&#xA;    console.log(lines);&#xA;});&#xA;</code></pre>&#xA;",808699,"",,"",,2015-05-12T17:25:17,"","",,0,,,
30205569,2,,30167226,2015-05-13T04:13:14,,4,,"<p>There is no official way to copy-protect your code at the moment, sorry - if you want to do this, you'll have to invent your own way (or just not worry about it)</p>&#xA;",5728,"",,"",,2015-05-13T04:13:14,"","",,1,,,
30183249,2,,30161546,2015-05-12T06:22:03,,5,,"<p>Creating the BrowserWindow with the flag 'node-integration' set to false, seems to do it.</p>&#xA;&#xA;<pre><code>browser = new BrowserWindow({&#xA;    'node-integration': false,&#xA;    width:800,&#xA;    height:600,&#xA;})&#xA;</code></pre>&#xA;",2715973,"",,"",,2015-05-12T06:22:03,"","",,0,,,
30131972,2,,30105150,2015-05-08T20:01:09,,6,,"<p>You could handle each Squirrel event and create shortcuts:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>  case '--squirrel-install':&#xD;&#xA;          target = path.basename(process.execPath);&#xD;&#xA;          updateDotExe = path.resolve(path.dirname(process.execPath), '..', 'update.exe');&#xD;&#xA;          var createShortcut = updateDotExe + ' --createShortcut=' + target + ' --shortcut-locations=Desktop,StartMenu' ;&#xD;&#xA;          console.log (createShortcut);&#xD;&#xA;          exec(createShortcut);&#xD;&#xA;          // Always quit when done&#xD;&#xA;          app.quit();&#xD;&#xA;          return true;&#xD;&#xA;&#xD;&#xA;case '--squirrel-uninstall':&#xD;&#xA;            // Undo anything you did in the --squirrel-install and&#xD;&#xA;            // --squirrel-updated handlers&#xD;&#xA;            target = path.basename(process.execPath);&#xD;&#xA;            updateDotExe = path.resolve(path.dirname(process.execPath), '..', 'update.exe');&#xD;&#xA;            var createShortcut = updateDotExe + ' --removeShortcut=' + target ;&#xD;&#xA;            console.log (createShortcut);&#xD;&#xA;            exec(createShortcut);&#xD;&#xA;            // Always quit when done&#xD;&#xA;            app.quit();&#xD;&#xA;            return true;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",2382793,"",,"",,2015-05-08T20:01:09,"","",,4,,,
30110981,2,,30101537,2015-05-07T20:23:02,,21,,"<p>If the webpage is loaded in ""file://"" mode and not served by an http server, you can make ajax calls by default.</p>&#xA;&#xA;<p>If you still have troubles with CORS restrictions, you can set this option to the browser-window object :</p>&#xA;&#xA;<pre><code>var BrowserWindow = require('browser-window');&#xA;var win = new BrowserWindow({&#xA;  webPreferences: { webSecurity: false }&#xA;});&#xA;</code></pre>&#xA;",4875660,"",3107922,"",2018-08-16T05:55:07,2018-08-16T05:55:07,"","",,2,,,
29994607,2,,29929411,2015-05-01T20:25:51,,27,,"<p><strong>UPDATE 2:</strong></p>&#xA;&#xA;<p>Use <a href=""https://github.com/atom/electron/blob/master/docs/api/web-frame.md#webframesetzoomlevellimitsminimumlevel-maximumlevel"">webFrame.setZoomLevelLimits</a> (v0.31.1+) in <strong>render process</strong> (<a href=""https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md#differences-between-main-process-and-renderer-process"">Differences Between Main Process and Renderer Process</a>). Because smart zoom on mac still work with document.addEventListener.</p>&#xA;&#xA;<p>Example <code>require('electron').webFrame.setZoomLevelLimits(1, 1)</code></p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>UPDATE:</strong></p>&#xA;&#xA;<p><code>deltaY</code> property for pinch zoom has <code>float</code> value, but normal scroll event return <code>int</code> value. Now solution has no problem with ctrl key.</p>&#xA;&#xA;<p><strong><a href=""http://output.jsbin.com/tehidu"">Demo 2</a></strong>.</p>&#xA;&#xA;<pre><code>document.addEventListener('mousewheel', function(e) {&#xA;  if(e.deltaY % 1 !== 0) {&#xA;    e.preventDefault();&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Using Chromium <code>monitorEvents(document)</code> I found that is responsible for this event <code>mousewheel</code>. I don't know, why <code>mousewheel</code> triggered with pinch zoom.&#xA;Next step, find difference between normal scroll and pinch zoom.</p>&#xA;&#xA;<p>Pinch zoom has an attribute <code>e.ctrlKey = true</code>, and normal scroll event has <code>e.ctrlKey = false</code>. But if you hold down <code>ctrl</code> key and scroll a page, <code>e.ctrlKey</code> equal <code>true</code>.</p>&#xA;&#xA;<p>I couldn't find a better solution. :(</p>&#xA;&#xA;<p><strong><a href=""http://output.jsbin.com/yosezo"">Demo</a></strong></p>&#xA;&#xA;<pre><code>document.addEventListener('mousewheel', function(e) {&#xA;  if(e.ctrlKey) {&#xA;    e.preventDefault();&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",4727354,"",4727354,"",2016-02-10T15:32:53,2016-02-10T15:32:53,"","",,1,,,
30132661,2,,30130861,2015-05-08T20:51:47,,27,,"<p>OK, I found an answer myself. The proper event is <code>did-finish-load</code> and should be used like this:</p>&#xA;&#xA;<pre><code>var Window = new BrowserWindow({ width: 600, height: 400, show: false });&#xA;Window.loadUrl('file://somefile.html');&#xA;Window.webContents.on('did-finish-load', function() {&#xA;    Window.show();&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>For people finding this answer - here you can check official electron documentation <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#showing-window-gracefully"" rel=""noreferrer"">on this topic</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>While loading the page, the ready-to-show event will be emitted when the renderer process has rendered the page for the first time if the window has not been shown yet. Showing the window after this event will have no visual flash:</p>&#xA;</blockquote>&#xA;&#xA;<pre><code>let win = new BrowserWindow({show: false})&#xA;win.once('ready-to-show', () =&gt; {&#xA;  win.show()&#xA;})&#xA;</code></pre>&#xA;",2044286,"",2044286,"",2017-07-13T09:18:08,2017-07-13T09:18:08,"","",,1,,,
51856114,2,,51855540,2018-08-15T09:24:09,,0,,<p>maybe you find a solution but change the format is the best solution.</p>&#xA;,4353545,"",,"",,2018-08-15T09:24:09,"","",,0,,,
51931915,2,,51930060,2018-08-20T13:34:16,,1,,"<p>The problem was I am writing a log.txt file to the directory which is being watched by the electron-reload module.</p>&#xA;&#xA;<p>When I write a new record to the log, the file changes, and causes my application to reload! Makes sense - but the combination of my logging &amp; active reload isn't working nicely together.</p>&#xA;&#xA;<p>I have solved it by simply removing electron-reload.</p>&#xA;",265683,"",,"",,2018-08-20T13:34:16,"","",,0,,,
51948841,2,,51923496,2018-08-21T12:36:38,,0,,"<p>Every <a href=""https://electronjs.org/docs/api/menu-item#new-menuitemoptions"" rel=""nofollow noreferrer""><code>MenuItem</code></a> has the following <code>click</code> callback signature:&#xA;</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>click(menuItem, browserWindow, event)&#xA;</code></pre>&#xA;&#xA;<p>Thus, you can use <code>browserWindow</code> argument and modify the template to send data back to Renderer process using ipc or directly run js in html:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>...&#xA;label: 'Open', &#xA;accelerator: 'Ctrl+O', &#xA;click: (menuItem, browserWindow, event) =&gt; {&#xA;    let inventoryData = dialog.showOpenDialog(appWindow, {&#xA;      ...&#xA;    }, (filePaths, bookmarks) =&gt; {&#xA;      ...&#xA;      fileContents = JSON.parse(data)&#xA;      // #1 ipc (recommended)&#xA;      browserWindow.webContents.send('populate-table', fileContents)&#xA;      // #2 execute js&#xA;      browserWindow.webContents.executeJavaScript(`&#xA;        document.populateTable(fileContents) // whatever u have&#xA;      `)&#xA;    });&#xA;}&#xA;...&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-08-21T12:36:38,"","",,0,,,
51983976,2,,51976993,2018-08-23T10:44:40,,3,,"<p>It's because you're calling the <code>createWindow</code> function when the app first loads since in the ready event it thinks it should call the <code>createWindow</code> function straight away since it has the two brackets at the end.</p>&#xA;&#xA;<p>To fix it just take the brakets off so it becomes: </p>&#xA;&#xA;<pre><code>app.on('ready',createWindow)&#xA;</code></pre>&#xA;&#xA;<p>Thanks to @KirkLarkin for spotting the bug.</p>&#xA;",6577664,"",6577664,"",2018-08-23T11:30:24,2018-08-23T11:30:24,"","",,0,,,
51984533,2,,51963756,2018-08-23T11:16:13,,0,,"<p>Try destroying the tray icon before the app quits like this: </p>&#xA;&#xA;<pre><code>app.on('before-quit', function (evt) {&#xA;    tray.destroy();&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/tray#traydestroy"" rel=""nofollow noreferrer""><code>tray.destroy()</code> Docs.</a></p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/app#event-before-quit"" rel=""nofollow noreferrer""><code>before-quit</code> Event docs.</a></p>&#xA;",6577664,"",,"",,2018-08-23T11:16:13,"","",,0,,,
52001356,2,,51984752,2018-08-24T09:24:48,,1,,"<p>The <a href=""https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html#error-filerepository-no-upload-adapter"" rel=""nofollow noreferrer"">docs</a> say, in short, this:</p>&#xA;&#xA;<blockquote>&#xA;  <p>To handle image upload in CKEditor 5 you can use one of these:</p>&#xA;  &#xA;  <ul>&#xA;  <li>use the built-in <a href=""https://ckeditor.com/ckeditor-cloud-services/easy-image/"" rel=""nofollow noreferrer"">Easy Image</a> adapter (cloud service),</li>&#xA;  <li>use the built-in <a href=""https://ckeditor.com/ckeditor-4/ckfinder/"" rel=""nofollow noreferrer"">CKFinder</a> adapter (can work locally if you want),</li>&#xA;  <li>write your own adapter (in which case, please refer to the <a href=""https://ckeditor.com/docs/ckeditor5/latest/api/module_upload_filerepository-UploadAdapter.html"" rel=""nofollow noreferrer""><code>UploadAdapter</code> interface</a> documentation).</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>The last option gives you a complete freedom on how and where you want to send those files. </p>&#xA;&#xA;<p>PS. You can find a bit more details in this question: <a href=""https://stackoverflow.com/questions/46765197/how-to-enable-image-upload-support-in-ckeditor-5"">How to enable image upload support in CKEditor 5?</a></p>&#xA;",1464696,"",,"",,2018-08-24T09:24:48,"","",,0,,,
52002830,2,,52002496,2018-08-24T10:47:26,,3,,"<pre><code>const {app, BrowserWindow} = require('electron');&#xA;</code></pre>&#xA;&#xA;<p>is equivalent to </p>&#xA;&#xA;<pre><code>import { app, BrowserWindow } from 'electron';&#xA;</code></pre>&#xA;&#xA;<p>whereas</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;</code></pre>&#xA;&#xA;<p>is equivalent to</p>&#xA;&#xA;<pre><code>import * as electron from 'electron';&#xA;</code></pre>&#xA;&#xA;<p>and</p>&#xA;&#xA;<pre><code>const createWindowsInstaller = require('electron-winstaller').createWindowsInstaller;&#xA;</code></pre>&#xA;&#xA;<p>should be possible to rewrite as</p>&#xA;&#xA;<pre><code>import { createWindowsInstaller } from 'electron-winstaller';&#xA;</code></pre>&#xA;&#xA;<p>It's confirmed it behaves like this in Angular 6.1 at least, with TypeScript 2.9. With previous TS version there can be some minor issues because they recently improved interop.</p>&#xA;&#xA;<p>Anyway you'll need to setup another build pipeline to compile TS to JS before loading it with Electron.</p>&#xA;",1879175,"",,"",,2018-08-24T10:47:26,"","",,0,,,
52004762,2,,52003764,2018-08-24T12:41:32,,1,,"<p>You missing two important things to achieve a callback waiting up an other function:</p>&#xA;&#xA;<ol>&#xA;<li>Your function (to be waited) should return a <code>Promise</code> object for being able to <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"" rel=""nofollow noreferrer"">be <code>await</code>ed</a></li>&#xA;<li>Your callback should be an <code>async</code> function for being able to <code>await</code></li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const {ipcMain} = require('electron')&#xA;&#xA;function treatData (input) {&#xA;  return new Promise((resolve, reject) =&gt; {&#xA;    var treated = treat(input)&#xA;    // ...&#xA;    resolve(treated)&#xA;  })&#xA;}&#xA;ipcMain.on('asynchronous-message', async (event, rawdata) =&gt; {&#xA;  var dataTreated = await treatData(rawdata)&#xA;  event.sender.send('asynchronous-reply', dataTreated)&#xA;})&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-08-24T12:41:32,"","",,0,,,
52064220,2,,52063979,2018-08-28T18:28:04,,1,,"<p>I normally use <code>window &amp;&amp; window.process &amp;&amp; window.process.type == 'renderer'</code>. It'll return true if it's running in electron and undefined if not.</p>&#xA;&#xA;<p>See this github issue about it: <a href=""https://github.com/electron/electron/issues/2288"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/2288</a>.</p>&#xA;",6577664,"",,"",,2018-08-28T18:28:04,"","",,0,,,
52065980,2,,51730030,2018-08-28T20:46:06,,3,,"<p>One can use 'fork' method to run a node process and this even works on a machine with no node installed. 'Fork' method uses the executable path of the parent process in this case electron app. The sample code for fork method is given below:</p>&#xA;&#xA;<pre><code>const child = childProcess.fork(path, args, {&#xA;        silent: true,&#xA;        detached: true,&#xA;        // stdio: 'ignore',&#xA;        env: {&#xA;            ELECTRON_RUN_AS_NODE:1&#xA;        }&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>Also set the 'ELECTRON_RUN_AS_NODE' env variable. This worked for me and I was able to run the app on a mac with no node installed.</p>&#xA;",8196111,"",,"",,2018-08-28T20:46:06,"","",,0,,,
52066025,2,,51775682,2018-08-28T20:50:37,,1,,"<p>Setting the option 'silent:true' and then using event handlers stderr.on() we can catch the error if any. Please check the sample code below:</p>&#xA;&#xA;<pre><code> let func = () =&gt; {&#xA;   const child = childProcess.fork(path, args, &#xA;   {&#xA;     silent: true,&#xA;     detached: true, &#xA;     stdio: 'ignore',&#xA;   }&#xA;&#xA; });&#xA;&#xA; child.on('error', (err) =&gt; {&#xA;   console.log(""\n\t\tERROR: spawn failed! ("" + err + "")"");&#xA; });&#xA;&#xA; child.stderr.on('data', function(data) {&#xA;   console.log('stdout: ' +data);&#xA; });&#xA;&#xA; child.on('exit', (code, signal) =&gt; {&#xA;   console.log(code);&#xA;   console.log(signal);&#xA; });&#xA;&#xA; child.unref();&#xA;</code></pre>&#xA;",8196111,"",,"",,2018-08-28T20:50:37,"","",,0,,,
52066092,2,,51771754,2018-08-28T20:56:57,,3,,"<p>Yes, we can run a packaged app which runs a child node process even on a system with no node installed. One can use 'fork' method to run a node process and by setting the ELECTRON_RUN_AS_NODE env variable. Please find the sample code below.</p>&#xA;&#xA;<pre><code> let func = () =&gt; {&#xA;   const child = childProcess.fork(path, args, &#xA;   {&#xA;     detached: true, &#xA;     stdio: 'ignore',&#xA;     env: {&#xA;        ELECTRON_RUN_AS_NODE: 1&#xA;     }&#xA;   }&#xA;&#xA; });&#xA;&#xA; child.on('error', (err) =&gt; {&#xA;   console.log(""\n\t\tERROR: spawn failed! ("" + err + "")"");&#xA; });&#xA;&#xA; child.on('exit', (code, signal) =&gt; {&#xA;   console.log(code);&#xA;   console.log(signal);&#xA; });&#xA;&#xA; child.unref();&#xA;</code></pre>&#xA;",8196111,"",,"",,2018-08-28T20:56:57,"","",,0,,,
51847187,2,,51846250,2018-08-14T17:51:19,,1,,"<p>Can you please try this to include jQuery:</p>&#xA;&#xA;<pre><code>&lt;!-- ...my html... --&gt;&#xA;&lt;script&gt;if (typeof module === 'object') {window.module = module; module = undefined;}&lt;/script&gt;&#xA;&lt;script src=""../my_ext_js/jquery/jquery.min.js""&gt;&lt;/script&gt;&#xA;&lt;script&gt;if (window.module) module = window.module;&lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",9734548,"",,"",,2018-08-14T17:51:19,"","",,1,,,
51888660,2,,51836644,2018-08-17T05:03:33,,1,,"<p>Well, I am not able to achieve the sticky behaviour of notifications in&#xA;electron. However, I have found an awesome alternative for that which is&#xA;combination of both <a href=""https://github.com/electron/electron/blob/master/docs/api/tray.md"" rel=""nofollow noreferrer"">Electron_Tray</a> and Node-Notifier&#xA;<a href=""https://github.com/mikaelbr/node-notifier#usage-windowsballoon"" rel=""nofollow noreferrer"">Balloon_Notifications</a>.</p>&#xA;&#xA;<p>The best part is that it works on both <strong>Windows</strong> and <strong>Linux</strong>&#xA;Platform like a charm eventually gives a <strong>cross-platform</strong> funtionality. I haven't tested it on mac yet ,may be it works&#xA;there as well. Here is my tested code:</p>&#xA;&#xA;<p><strong>app.component.ts</strong></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>import {ElectronService} from 'ngx-electron';&#xD;&#xA;  @Component({&#xD;&#xA;    selector: 'app',&#xD;&#xA;    templateUrl: './app.component.html',&#xD;&#xA;    styleUrls: ['./app.component.css']&#xD;&#xA;  })&#xD;&#xA;  export class AppComponent implements OnInit {&#xD;&#xA;    public main_js : any;&#xD;&#xA;&#xD;&#xA;    constructor(private _electronService: ElectronService ) {&#xD;&#xA;      this.main_js  = this._electronService.remote.require(""./main.js"");&#xD;&#xA;      this.getTasks();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    getTasks() {&#xD;&#xA;      var message = 'New Task Assigned!!!';&#xD;&#xA;      this.main_js.notifier(message);&#xD;&#xA;  }&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p><strong>main.js</strong></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>let tray = null&#xD;&#xA;&#xD;&#xA;function createWindow () {&#xD;&#xA;  win = new BrowserWindow({&#xD;&#xA;    width: 800,&#xD;&#xA;    height: 600,&#xD;&#xA;    icon: path.join(__dirname, 'dist/assets/images/logo.png')&#xD;&#xA;  })&#xD;&#xA;&#xD;&#xA;  // +++++++  TRAY NOTIFICATIONS  +++++++++ //&#xD;&#xA;  var icon_tray = path.join(__dirname,'dist','assets','images','logo.png');&#xD;&#xA;&#xD;&#xA;  tray = new Tray(icon_tray)&#xD;&#xA;&#xD;&#xA;  const trayMenuTemplate = [&#xD;&#xA;  {&#xD;&#xA;    label: 'Maximize',&#xD;&#xA;    click: function () {&#xD;&#xA;      //For Maximizing the Window&#xD;&#xA;      if(!win.isVisible()) { win.show() }&#xD;&#xA;    }&#xD;&#xA;  },&#xD;&#xA;&#xD;&#xA;  {&#xD;&#xA;    label: 'Minimize',&#xD;&#xA;    click: function () {&#xD;&#xA;      //For Minimizing the Window&#xD;&#xA;      if(win.isVisible()) { win.hide() }&#xD;&#xA;    }&#xD;&#xA;  }]&#xD;&#xA;&#xD;&#xA;  tray.setToolTip('I am Notifier!!!')&#xD;&#xA;  let trayMenu = Menu.buildFromTemplate(trayMenuTemplate)&#xD;&#xA;  tray.setContextMenu(trayMenu)&#xD;&#xA;  tray.displayBalloon({&#xD;&#xA;    title: 'Notifier Realm',&#xD;&#xA;    content: 'Greetings!!!',&#xD;&#xA;    icon: icon_tray&#xD;&#xA;  });&#xD;&#xA;&#xD;&#xA;  tray.on('click', () =&gt; {&#xD;&#xA;    win.isVisible() ? win.hide() : win.show()&#xD;&#xA;  })&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;exports.notifier = (msg) =&gt;  {&#xD;&#xA;// pops out the app window if minimized and show the notification &#xD;&#xA;  if(win.isVisible()){&#xD;&#xA;    // win.hide()&#xD;&#xA;  } else {&#xD;&#xA;    win.show()&#xD;&#xA;  }&#xD;&#xA;  if(msg != undefined) {&#xD;&#xA;    notifier.notify({&#xD;&#xA;      title: 'Nethues Notify',&#xD;&#xA;      message: msg,&#xD;&#xA;      wait: true,&#xD;&#xA;      icon:  './assets/images/logo.png'&#xD;&#xA;    });&#xD;&#xA;  }&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Now, whenever the app window is minimized and a new task is assigned by&#xA;a different user, the window pops out above all the applications&#xA;(whatever is opened on your screen) and show the newly assigned task&#xA;notification to the user.</p>&#xA;",3835198,"",6555353,"",2018-08-22T09:14:32,2018-08-22T09:14:32,"","",,1,,,
51899094,2,,51898980,2018-08-17T15:56:12,,1,,"<p>The simplest solution is not to type the variable explicitly, you can let the compiler infer </p>&#xA;&#xA;<pre><code>import settings = require(""electron-settings"");&#xA;&#xA;let value = settings.get(""abc"");&#xA;</code></pre>&#xA;&#xA;<p>You can use a type query and the <code>ReturnType</code> conditional type to define the type of <code>value</code> relative to the return type of <code>get</code>:</p>&#xA;&#xA;<pre><code>import settings = require(""electron-settings"");&#xA;&#xA;let value: ReturnType&lt;typeof settings['get']&gt; = settings.get(""abc"");&#xA;</code></pre>&#xA;&#xA;<p>You could even use a type alias so you can easily reuse it in more places:</p>&#xA;&#xA;<pre><code>import settings = require(""electron-settings"");&#xA;type JsonValue  =  ReturnType&lt;typeof settings['get']&gt;;&#xA;let value:JsonValue = settings.get(""abc"");&#xA;</code></pre>&#xA;",125734,"",,"",,2018-08-17T15:56:12,"","",,1,,,
52000886,2,,51999049,2018-08-24T08:58:45,,0,,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!doctype html&gt;&#xD;&#xA;&lt;html&gt;&#xD;&#xA;	&lt;head&gt;&#xD;&#xA;		&lt;meta charset=""utf-8""&gt;&#xD;&#xA;		&lt;style&gt;&#xD;&#xA;			body {&#xD;&#xA;				background-color: black;&#xD;&#xA;			}&#xD;&#xA;			&#xD;&#xA;			canvas {&#xD;&#xA;				display: block;&#xD;&#xA;				margin: auto;&#xD;&#xA;				border: solid 1px white;&#xD;&#xA;				border-radius: 10px;&#xD;&#xA;			}&#xD;&#xA;		&lt;/style&gt;&#xD;&#xA;	&lt;/head&gt;&#xD;&#xA;	&#xD;&#xA;	&lt;body&gt;&#xD;&#xA;		&lt;canvas id=""canvas""&gt;&lt;/canvas&gt;&#xD;&#xA;		&lt;script type=""application/javascript""&gt;&#xD;&#xA;		&#xD;&#xA;			void function() {&#xD;&#xA;				&#xD;&#xA;				""use strict"";&#xD;&#xA;				&#xD;&#xA;				// Classes&#xD;&#xA;				&#xD;&#xA;				/*&#xD;&#xA;					Constructor function&#xD;&#xA;					when called with new, everything attached to the 'this' keyword&#xD;&#xA;					becomes a new member of the new object&#xD;&#xA;				*/&#xD;&#xA;				function ToolTip(text) {&#xD;&#xA;					this.text = text;&#xD;&#xA;				}&#xD;&#xA;				&#xD;&#xA;				/*&#xD;&#xA;					Constructor prototype, a collection&#xD;&#xA;					of values &amp; functions that are shared across all instances,&#xD;&#xA;					use for constant values and member functions&#xD;&#xA;				*/&#xD;&#xA;				ToolTip.prototype = {&#xD;&#xA;					TEXT_SIZE: 15,&#xD;&#xA;					TEXT_FONT: ""15px Arial"",&#xD;&#xA;					TEXT_COLOUR: ""#FFFFFFFF"",&#xD;&#xA;					BOX_BORDER_COLOUR: ""#000000FF"",&#xD;&#xA;					BOX_BACKGROUND_COLOUR: ""#990000FF"",&#xD;&#xA;					&#xD;&#xA;					render: function(ctx,x,y) {&#xD;&#xA;						ctx.fillStyle = this.BOX_BACKGROUND_COLOUR;&#xD;&#xA;						ctx.strokeStyle = this.BOX_BORDER_COLOUR;&#xD;&#xA;						ctx.font = this.TEXT_FONT;&#xD;&#xA;						ctx.beginPath();&#xD;&#xA;						&#xD;&#xA;						ctx.rect(&#xD;&#xA;							x,&#xD;&#xA;							y - this.TEXT_SIZE,&#xD;&#xA;							ctx.measureText(this.text).width,&#xD;&#xA;							this.TEXT_SIZE&#xD;&#xA;						);&#xD;&#xA;						&#xD;&#xA;						ctx.fill();&#xD;&#xA;						ctx.stroke();&#xD;&#xA;						&#xD;&#xA;						ctx.fillStyle = this.TEXT_COLOUR;&#xD;&#xA;						ctx.fillText(this.text,x,y - 2);&#xD;&#xA;					}&#xD;&#xA;				};&#xD;&#xA;				&#xD;&#xA;				function Rectangle(x,y,width,height,name) {&#xD;&#xA;					this.x = x;&#xD;&#xA;					this.y = y;&#xD;&#xA;					this.width = width;&#xD;&#xA;					this.height = height;&#xD;&#xA;					this.tooltip = new ToolTip(name);&#xD;&#xA;				}&#xD;&#xA;				&#xD;&#xA;				Rectangle.prototype = {&#xD;&#xA;					BORDER_COLOUR: ""#000000FF"",&#xD;&#xA;					BACKGROUND_COLOR: ""#0000AAFF"",&#xD;&#xA;					&#xD;&#xA;					contains: function(x,y) {&#xD;&#xA;						return x &gt; this.x &amp;&amp; x &lt; this.x + this.width&#xD;&#xA;							&amp;&amp; y &gt; this.y &amp;&amp; y &lt; this.y + this.height;&#xD;&#xA;					},&#xD;&#xA;					&#xD;&#xA;					render: function(ctx) {&#xD;&#xA;						ctx.strokeStyle = this.BORDER_COLOUR;&#xD;&#xA;						ctx.fillStyle = this.BACKGROUND_COLOR;&#xD;&#xA;						ctx.beginPath();&#xD;&#xA;						ctx.rect(this.x,this.y,this.width,this.height);&#xD;&#xA;						ctx.fill();&#xD;&#xA;						ctx.stroke();&#xD;&#xA;					}&#xD;&#xA;				};&#xD;&#xA;				&#xD;&#xA;				// Variables&#xD;&#xA;				var canvasWidth = 150;&#xD;&#xA;				var canvasHeight = 150;&#xD;&#xA;				var canvas = null;&#xD;&#xA;				var ctx = null;&#xD;&#xA;				var rectangles = null;&#xD;&#xA;				&#xD;&#xA;				// Functions&#xD;&#xA;				function onMouseMove(e) {&#xD;&#xA;					var bounds = canvas.getBoundingClientRect();&#xD;&#xA;					var x = e.clientX - bounds.left;&#xD;&#xA;					var y = e.clientY - bounds.top;&#xD;&#xA;					&#xD;&#xA;					draw();&#xD;&#xA;					&#xD;&#xA;					for (var i = 0; i &lt; rectangles.length; ++i) {&#xD;&#xA;						var rectangle = rectangles[i];&#xD;&#xA;						&#xD;&#xA;						if (rectangle.contains(x,y)) {&#xD;&#xA;							rectangle.tooltip.render(ctx,x,y);&#xD;&#xA;							return;&#xD;&#xA;						}&#xD;&#xA;					}&#xD;&#xA;				}&#xD;&#xA;				&#xD;&#xA;				function draw() {&#xD;&#xA;					ctx.fillStyle = ""gray"";&#xD;&#xA;					ctx.fillRect(0,0,canvasWidth,canvasHeight);&#xD;&#xA;					&#xD;&#xA;					for (var i = 0; i &lt; rectangles.length; ++i) {&#xD;&#xA;						rectangles[i].render(ctx);&#xD;&#xA;					}&#xD;&#xA;				}&#xD;&#xA;				&#xD;&#xA;				// Entry Point&#xD;&#xA;				onload = function() {&#xD;&#xA;					canvas = document.getElementById(""canvas"");&#xD;&#xA;					canvas.width = canvasWidth;&#xD;&#xA;					canvas.height = canvasHeight;&#xD;&#xA;					canvas.onmousemove = onMouseMove;&#xD;&#xA;					&#xD;&#xA;					ctx = canvas.getContext(""2d"");&#xD;&#xA;					&#xD;&#xA;					rectangles = [&#xD;&#xA;						new Rectangle(10,10,25,25,""User 1""),&#xD;&#xA;						new Rectangle(45,10,25,25,""User 2""),&#xD;&#xA;						new Rectangle(80,10,25,25,""User 3""),&#xD;&#xA;						new Rectangle(115,10,25,25,""User 4""),&#xD;&#xA;						new Rectangle(10,45,25,25,""User 5""),&#xD;&#xA;						new Rectangle(45,45,25,25,""User 6""),&#xD;&#xA;						new Rectangle(80,45,25,25,""User 7""),&#xD;&#xA;						new Rectangle(115,45,25,25,""User 8""),&#xD;&#xA;						new Rectangle(10,80,25,25,""User 9""),&#xD;&#xA;						new Rectangle(45,80,25,25,""User 10""),&#xD;&#xA;						new Rectangle(80,80,25,25,""User 11""),&#xD;&#xA;						new Rectangle(115,80,25,25,""User 12""),&#xD;&#xA;						new Rectangle(10,115,25,25,""User 13""),&#xD;&#xA;						new Rectangle(45,115,25,25,""User 14""),&#xD;&#xA;						new Rectangle(80,115,25,25,""User 15""),&#xD;&#xA;						new Rectangle(115,115,25,25,""User 16"")&#xD;&#xA;					];&#xD;&#xA;					&#xD;&#xA;					draw();&#xD;&#xA;				}&#xD;&#xA;				&#xD;&#xA;			}();&#xD;&#xA;		&#xD;&#xA;		&lt;/script&gt;&#xD;&#xA;	&lt;/body&gt;&#xD;&#xA;&lt;/html&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",7614070,"",,"",,2018-08-24T08:58:45,"","",,1,,,
52017806,2,,51990111,2018-08-25T13:33:04,,1,,"<p>Electron is a container that runs any kind of web app, it could be react, angular or just simple html and javascript. So it is possible to convert any electron application to a web app. But it may need some tuning, because electron also contains the server side code (obviously). Usage of webpack or rollup may depend on the web application that is running inside the electron. </p>&#xA;&#xA;<p>Hope that helps.</p>&#xA;",7532540,"",,"",,2018-08-25T13:33:04,"","",,1,,,
52033822,2,,52032619,2018-08-27T06:43:15,,3,,"<p>Try installing with: <code>sudo npm install -g electron --unsafe-perm=true --allow-root</code> instead.</p>&#xA;&#xA;<p>Source: <a href=""https://github.com/electron/electron/issues/10604#issuecomment-333368230"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/10604#issuecomment-333368230</a></p>&#xA;",6577664,"",,"",,2018-08-27T06:43:15,"","",,1,,,
51894335,2,,51894076,2018-08-17T11:22:44,,1,,"<pre><code>const template = [&#xA;    {&#xA;        label: 'File',&#xA;        submenu: [&#xA;            {&#xA;                label: 'Save', accelerator: 'Cmd+S',&#xA;                click() {&#xA;                    mainWindow.webContents.send('save-hosts-file');&#xA;                }&#xA;            },&#xA;        ]&#xA;    },&#xA;];&#xA;&#xA;componentDidMount() {&#xA;  ipcMain.on('save-hosts-file', (event) =&gt; {&#xA;     console.log('save file');&#xA;   });&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>there are 2 things you should remember:</p>&#xA;&#xA;<p>1) sending event from electron to react and receiving in react</p>&#xA;&#xA;<p>sending event from electron to react -- <strong>mainWindow.webContents.send</strong><br>&#xA;receiving event in react sent from electron -- <strong>ipcRenderer.on</strong></p>&#xA;&#xA;<p>2) sending event from react to electron and receiving in electron</p>&#xA;&#xA;<p>sending event from react to electron -- <strong>ipcRenderer.send</strong><br>&#xA;receiving event in electron sent from react -- <strong>ipcMain.on</strong> </p>&#xA;",4726346,"",4726346,"",2018-08-17T13:41:13,2018-08-17T13:41:13,"","",,2,,,
51956629,2,,51934861,2018-08-21T20:59:13,,1,,"<p>You can make blocking calls from a renderer. As long as you keep them below 20-30ms and you don't swamp the process with blocking calls you'll be fine. We've used <code>node-serialport</code> and <code>node-ffi</code> extensively in the renderer process making dozens of calls per second transferring megabytes of data while keeping the UI responsive with no jerkiness.</p>&#xA;&#xA;<p>Maybe you can't keep the blocking calls short enough? How about doing it in the main process? This is also a bad idea. Blocking the main process blocks IPC between the renderers and GPU process so you'll likely hang the UI this way too.</p>&#xA;&#xA;<p>If you really have to make long blocking synchronous calls, make them in a hidden renderer process. You can block this as much as you like because it's not displaying any UI. To make this easier, you can use <a href=""https://github.com/electron-userland/electron-remote#the-renderer-taskpool"" rel=""nofollow noreferrer""><code>electron-remote - renderer-taskpool</code></a> feature to bump long running tasks onto another renderer process.</p>&#xA;",106623,"",,"",,2018-08-21T20:59:13,"","",,2,,,
52035769,2,,52035382,2018-08-27T08:56:15,,1,,"<p>Just pass the executable locations and the command line arguments</p>&#xA;&#xA;<pre><code>const unixProcess = spawn('path/to/executable',[arg1, arg2, arg3, ...]);&#xA;</code></pre>&#xA;&#xA;<p>Example</p>&#xA;&#xA;<pre><code>const unixProcess = spawn('/usr/bin/whoami',[arg1, arg2, arg3, ...]);&#xA;</code></pre>&#xA;",7532540,"",7532540,"",2018-08-27T09:01:52,2018-08-27T09:01:52,"","",,2,,,
51919526,2,,51913963,2018-08-19T16:09:29,,3,,"<p>As far as I understand you have to use compatible certificates:</p>&#xA;&#xA;<p><a href=""https://www.electron.build/code-signing"" rel=""nofollow noreferrer"">https://www.electron.build/code-signing</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>To sign an app on Windows, there are two types of certificates:</p>&#xA;  &#xA;  <p>EV Code Signing Certificate </p>&#xA;  &#xA;  <p>Code Signing Certificate</p>&#xA;</blockquote>&#xA;&#xA;<p>Personally getting the right certificate was hard. A certificate that will work for Windows is not easy to get, I had to go through a lot of paperwork to get this done.&#xA;I hope that this article, will make your life easier:&#xA;<a href=""https://blog.dcpos.ch/how-to-make-your-electron-app-sexy"" rel=""nofollow noreferrer"">https://blog.dcpos.ch/how-to-make-your-electron-app-sexy</a></p>&#xA;&#xA;<p>Go to the section: Signed Installers</p>&#xA;&#xA;<p>Quoting the article: </p>&#xA;&#xA;<blockquote>&#xA;  <p>To get a Windows signing certificate, we recommend Digicert. The&#xA;  documentation for Windows app signing is surprisingly bad. If you go&#xA;  with the wrong vendor, they'll ask you to mail them notarized&#xA;  paperwork. That makes it a slow and annoying process to get the cert.&#xA;  Digicert is easier: they just send you a password via Certified Mail,&#xA;  you go to the post office, show your ID to pick it up, and bam, you&#xA;  get your signing certificate.</p>&#xA;</blockquote>&#xA;",2165342,"",2165342,"",2018-08-19T16:25:21,2018-08-19T16:25:21,"","",,3,,,
51863535,2,,51863083,2018-08-15T17:25:13,,1,,"<p>I would go for a promise-based approach like this:</p>&#xA;&#xA;<pre><code>let promiseChain = Promise.resolve();&#xA;&#xA;waitForEvent = function(){&#xA;    return new Promise(resolve=&gt;{&#xA;        event.on(""someEvent"", (eventData =&gt; {&#xA;            resolve(eventData)&#xA;         }))&#xA;    })&#xA;&#xA;}&#xA;&#xA;while(someLoopCondition) {&#xA;    promiseChain = promiseChain&#xA;    .then(sendToSerialPort(someString))&#xA;    .then(waitForEvent)&#xA;    .then(result=&gt;{&#xA;        updateUI(result)&#xA;    })&#xA;}&#xA;</code></pre>&#xA;",8266512,"",8266512,"",2018-08-15T17:43:02,2018-08-15T17:43:02,"","",,4,,,
51980277,2,,51977984,2018-08-23T07:17:21,,0,,"<p>The problem in the first place is that <code>open</code> is a <a href=""https://www.w3schools.com/js/js_reserved.asp"" rel=""nofollow noreferrer"">reserved name</a></p>&#xA;&#xA;<p>To resolve your problem you either</p>&#xA;&#xA;<ol>&#xA;<li>Rename the function and everything works as is or</li>&#xA;<li>Add <code>open</code> as a property of your button</li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>document.getElementById('openButton').open = () =&gt; {&#xA;  ipcRenderer.send('openFile', {})&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and call that in the callback&#xA;</p>&#xA;&#xA;<pre><code>&lt;button class=""w3-button"" id=""openButton"" onclick=""this.open()""&gt;Open&lt;/button&gt;&#xA;</code></pre>&#xA;&#xA;<ol start=""3"">&#xA;<li>Don't use name for listener</li>&#xA;</ol>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>document.getElementById('openButton').addEventListener('click', () =&gt; {&#xA;  ipcRenderer.send('openFile', {})&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><em>Sorry for re-working the whole answer. Adding <code>open</code> to <code>document</code> was an ugly workaround</em></p>&#xA;",2550156,"",2550156,"",2018-08-23T08:56:11,2018-08-23T08:56:11,"","",,4,,,
52052152,2,,52045236,2018-08-28T07:17:33,,1,,"<p>Crucial properties for this are: <code>frame: false</code> and <code>transparent: true</code> (you missed the latter)</p>&#xA;&#xA;<p><em>js</em>&#xA;</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron')&#xA;const path = require('path')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  let win = new BrowserWindow({&#xA;    frame: false,&#xA;    transparent: true&#xA;  })&#xA;  win.loadURL(path.join(__dirname, '/roundedcorner.html'))&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>html</em>&#xA;</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;  &lt;body&gt;&#xA;      &lt;p style=""border-radius: 25px; background: #73AD21; height: 300px;""&gt;&lt;/p&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-08-28T07:17:33,"","",,4,,,
50503194,2,,50502825,2018-05-24T07:13:38,,2,,"<p>you can use computed</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""true"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var app = new Vue({&#xD;&#xA;  el: '#app',&#xD;&#xA;  computed: {&#xD;&#xA;    sortedData () {&#xD;&#xA;      if(!this.sort.field){&#xD;&#xA;        return this.items&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      return this.items.concat().sort((a,b)=&gt;{&#xD;&#xA;        if(this.sort.desc){&#xD;&#xA;          return a[this.sort.field] &gt; b[this.sort.field] ? -1:1        &#xD;&#xA;        }else{&#xD;&#xA;          return a[this.sort.field] &gt; b[this.sort.field] ? 1:-1                  &#xD;&#xA;        }&#xD;&#xA;      })&#xD;&#xA;    }&#xD;&#xA;  },&#xD;&#xA;  data () {&#xD;&#xA;    return {&#xD;&#xA;      sort: {&#xD;&#xA;        field: '',&#xD;&#xA;        desc: true        &#xD;&#xA;      },&#xD;&#xA;      items: [&#xD;&#xA;        { id: 1, name: 'Person 1', leave: 123.45 },&#xD;&#xA;        { id: 2, name: 'John Smith', leave: 13.45 },&#xD;&#xA;        { id: 3, name: 'Bill Smith', leave: 23.45 },&#xD;&#xA;        { id: 4, name: 'John Doe', leave: 133.53 }&#xD;&#xA;      ]&#xD;&#xA;    }&#xD;&#xA;  },&#xD;&#xA;  methods: {&#xD;&#xA;    doSort (field) {&#xD;&#xA;      if(field == this.sort.field){&#xD;&#xA;        this.sort.desc = !this.sort.desc&#xD;&#xA;      }else{&#xD;&#xA;        this.sort.field = field;&#xD;&#xA;        this.sort.desc = true;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;})</code></pre>&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>  .user_row{&#xD;&#xA;    display:flex;&#xD;&#xA;  }&#xD;&#xA;  .user_row&gt;div{&#xD;&#xA;    flex:1;&#xD;&#xA;    text-align: center;&#xD;&#xA;  }</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js""&gt;&lt;/script&gt;&#xD;&#xA;&lt;div id=""app""&gt;&#xD;&#xA;   &lt;a v-on:click=""doSort('id')"" href=""javascript:""&gt;ID&lt;span v-if=""sort.field=='id'""&gt;({{sort.desc?'desc':'asc'}})&lt;/span&gt;&lt;/a&gt;&#xD;&#xA;   &lt;a v-on:click=""doSort('name')"" href=""javascript:""&gt;User&lt;span v-if=""sort.field=='name'""&gt;({{sort.desc?'desc':'asc'}})&lt;/span&gt;&lt;/a&gt;&#xD;&#xA;   &lt;a v-on:click=""doSort('leave')"" href=""javascript:""&gt;Leave Owing&lt;span v-if=""sort.field=='leave'""&gt;({{sort.desc?'desc':'asc'}})&lt;/span&gt;&lt;/a&gt;&#xD;&#xA;&#xD;&#xA;   &lt;div id=""page_list""&gt;&#xD;&#xA;      &lt;div class=""user_row"" v-for=""item in sortedData""&gt;&#xD;&#xA;         &lt;div class=""user_status""&gt;{{ item.id }}&lt;/div&gt;&#xD;&#xA;         &lt;div class=""username""&gt;{{ item.name }}&lt;/div&gt;&#xD;&#xA;         &lt;div class=""leave_owing""&gt;{{ item.leave }}&lt;/div&gt;&#xD;&#xA;       &lt;/div&gt;&#xD;&#xA;   &lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",9561387,"",,"",,2018-05-24T07:13:38,"","",,0,,,
50509544,2,,50488434,2018-05-24T12:32:21,,1,,"<p>Microphone is a form of audio input. On most systems it's the only audio input configured.</p>&#xA;&#xA;<p>You enumerate audio input devices using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices"" rel=""nofollow noreferrer"">navigator.mediaDevices.enumerateDevices</a>, then use the <a href=""https://stackoverflow.com/a/33770656/918910"">deviceId</a> constraint with <code>getUserMedia</code> to select a specific one.</p>&#xA;",918910,"",,"",,2018-05-24T12:32:21,"","",,0,,,
50527312,2,,50523957,2018-05-25T10:38:55,,2,,"<p>It's not mandatory, but a good coding practice (in every language).</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#event-closed"" rel=""nofollow noreferrer"">Docs of 'closed'</a> mentions it in a little bit more details:</p>&#xA;&#xA;<blockquote>&#xA;  <p>After you have received this event you should remove the reference to&#xA;  the window and avoid using it any more.</p>&#xA;</blockquote>&#xA;&#xA;<p>That is, when you destroy an object prefer setting it to an invalid value for avoiding function calls on a flawed/un-complete object.</p>&#xA;&#xA;<p>Consider this example:&#xA;</p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron')&#xA;let win = null&#xA;app.once('ready', () =&gt; {&#xA;  win = new BrowserWindow()&#xA;  win.on('closed', () =&gt; {&#xA;    win = null&#xA;  })&#xA;  setInterval(() =&gt; {&#xA;    if (win) win.loadURL('http://google.com')&#xA;    else app.quit()&#xA;  }, 3000)&#xA;  app.on('window-all-closed', () =&gt; {})&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>The proper <code>'closed'</code> callback here helps to avoid future calls on destroyed object.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>For electron's <code>BrowserWindow</code> you can use <code>isDestroyed()</code> method as well, which potentially makes the use of <code>'closed'</code> unnecessary but invalidating objects is a general technique while destroy queries are always up to the API.</p>&#xA;",2550156,"",,"",,2018-05-25T10:38:55,"","",,0,,,
50541227,2,,50428887,2018-05-26T09:21:44,,2,,"<p>Ok, this works for me:</p>&#xA;&#xA;<ol>&#xA;<li>Ensure Python 2.7.X is installed.</li>&#xA;<li>Get and Install Visual Studio Build Tools (eg. <a href=""http://landinghub.visualstudio.com/visual-cpp-build-tools"" rel=""nofollow noreferrer"">http://landinghub.visualstudio.com/visual-cpp-build-tools</a> )</li>&#xA;<li>To use the correct msvs version during rebuild enter this in eg. a powershell: <code>npm config set msvs_version 2015 --global</code></li>&#xA;<li>In my minimal example I used the following package.json:</li>&#xA;</ol>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>{&#xD;&#xA;  ""name"": ""stack_ffi"",&#xD;&#xA;  ""version"": ""1.0.0"",&#xD;&#xA;  ""description"": """",&#xD;&#xA;  ""main"": ""index.js"",&#xD;&#xA;  ""scripts"": {&#xD;&#xA;    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1"",&#xD;&#xA;    ""start"": ""electron ."",&#xD;&#xA;    ""rebuild"": ""electron-rebuild -f -w ffi""&#xD;&#xA;  },&#xD;&#xA;  ""author"": """",&#xD;&#xA;  ""license"": ""XXX"",&#xD;&#xA;  ""devDependencies"": {&#xD;&#xA;    ""electron"": ""2.0.2"",&#xD;&#xA;    ""electron-rebuild"": ""1.7.3""&#xD;&#xA;  },&#xD;&#xA;  ""dependencies"": {&#xD;&#xA;    ""ffi"": ""2.2.0"",&#xD;&#xA;    ""ref"": ""1.3.5""&#xD;&#xA;  }&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<ul>&#xA;<li>Run <code>npm run install</code> and then <code>npm run rebuild</code></li>&#xA;</ul>&#xA;&#xA;<p><strong>Notes:</strong></p>&#xA;&#xA;<ul>&#xA;<li><p>On my first try electron did not install correctly so I have deleted&#xA;the ./node_modules/electron folder and ran <code>npm run install</code> again.</p></li>&#xA;<li><p>When I tried to use a sqlite3.dll on Windows the online example (<a href=""https://github.com/node-ffi/node-ffi/blob/master/example/sqlite.js"" rel=""nofollow noreferrer"">https://github.com/node-ffi/node-ffi/blob/master/example/sqlite.js</a>) did &#xA;not work. I had to remove the leading ""lib"" part from the library string: <code>var SQLite3 = ffi.Library('sqlite3', {...}); //was 'libsqlite3'</code>.</p></li>&#xA;<li><p>I tested it on node 7.4.0 and 8.0.0. If it fails on your node version&#xA;I have the theory that <code>v8::Object::ForceSet</code> was dropped on later&#xA;versions.</p></li>&#xA;<li><p>I had to ensure that Windows can find my dll's. For example I&#xA;included the sqlite3 x64 dlls by adding their folder&#xA;location to the PATH env variable.</p></li>&#xA;</ul>&#xA;",9734548,"",,"",,2018-05-26T09:21:44,"","",,0,,,
50547650,2,,50547649,2018-05-26T22:57:49,,4,,"<h3>Problem</h3>&#xA;&#xA;<p>The first problem is that <code>node-bindings</code>, which <code>node-serialport</code> relies on to resolve the path to its Node.js addon, simply doesn't work in Electron. There's an <a href=""https://github.com/TooTallNate/node-bindings/issues/29"" rel=""nofollow noreferrer"">open issue</a> for this, and I don't think the associated PR is even a complete fix, since I've done some debugging, and it appears that <code>fileName</code> remains <code>undefined</code> throughout the whole <code>getFileName</code>.</p>&#xA;&#xA;<p>The second problem: even if it somehow found a <code>serialport.node</code> somewhere, it wouldn't work after packaging the application for distribution, since the addon itself isn't in the <code>dist</code> directory, and Webpack can't just bundle it together with the main JS file.</p>&#xA;&#xA;<p>One could attempt to solve this with <a href=""https://github.com/webpack-contrib/node-loader"" rel=""nofollow noreferrer""><code>node-loader</code></a>, given a correctly working <code>node-bindings</code>, but that wouldn't help either, since <code>node-bindings</code> uses elaborate heuristics, which Webpack simply can't extrapolate from, when trying to understand what files could be required by its <code>require</code>. The only safe thing Webpack could do is include the whole project, ""just in case"", and that's a certain no-go, obviously, so <code>node-loader</code> just doesn't copy anything.</p>&#xA;&#xA;<p>So, we need to replace <code>node-bindings</code> and copy <code>serialport.node</code> manually.</p>&#xA;&#xA;<h3>Solution</h3>&#xA;&#xA;<p>First, we must grab the addon and put it in <code>dist</code>. This needs to be done in main's Webpack build, since the renderer is served as web page, potentially from an in-memory file system (so the <code>*.node</code> file may not be emitted to disk, and Electron will never see it). Here's how:</p>&#xA;&#xA;<pre><code>import CopyWebpackPlugin from ""copy-webpack-plugin"";&#xA;&#xA;const config = {&#xA;  // ...&#xA;  plugins: [&#xA;    new CopyWebpackPlugin([&#xA;      ""node_modules/serialport/build/Release/serialport.node"",&#xA;    ]),&#xA;  ],&#xA;  // ...&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Hardcoded, unfortunately, but easy to fix if something changes.</p>&#xA;&#xA;<p>Second, we must substitute <code>node-bindings</code> with our own shim, <code>src/bindings.js</code>:</p>&#xA;&#xA;<pre><code>module.exports = x =&gt;&#xA;  __non_webpack_require__(&#xA;    `${require(""electron"").remote.app.getAppPath()}/${x}`&#xA;  );&#xA;</code></pre>&#xA;&#xA;<p><code>__non_webpack_require__</code> is self-explanatory (yes, plain <code>require</code> won't work, without some trickery, as it's handled by Webpack), and the <code>require(""electron"").remote.app.getAppPath()</code> is necessary because <code>__dirname</code> doesn't actually resolve to what one would expect - an absolute path to <code>dist</code> - but rather to some directory buried deep inside Electron.</p>&#xA;&#xA;<p>And here's how the replacement is done, in renderer's Webpack config:</p>&#xA;&#xA;<pre><code>import { NormalModuleReplacementPlugin } from ""webpack"";&#xA;&#xA;const config = {&#xA;  // ...&#xA;  plugins: [&#xA;    new NormalModuleReplacementPlugin(&#xA;      /^bindings$/,&#xA;      `${__dirname}/src/bindings`&#xA;    ),&#xA;  ],&#xA;  // ...&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>And that's it! Once the above is done, and <code>index.html</code> + <code>renderer.js</code> are being served by some server (or whatever your approach is), and the <code>dist</code> looks something like this:</p>&#xA;&#xA;<pre><code>dist/&#xA;  main.js&#xA;  package.json&#xA;  serialport.node&#xA;</code></pre>&#xA;&#xA;<p><code>electron dist</code> should ""just work"".</p>&#xA;&#xA;<h3>Alternatives</h3>&#xA;&#xA;<p>Could potentially get away with adding <code>node-serialport</code> as a dependency to the generated <code>dist/package.json</code> and just <code>npm i</code>nstalling it in there, and marking <code>serialport</code> as an external in Webpack, but that feels even dirtier (package version mismatches, etc.).</p>&#xA;&#xA;<p>Another way is to just declare everything as externals, and have <code>electron-packager</code> just copy the whole production part of <code>node_modules</code> to <code>dist</code> for you, but that's a whole lot of megabytes for basically nothing.</p>&#xA;",242684,"",,"",,2018-05-26T22:57:49,"","",,0,,,
50549710,2,,50549332,2018-05-27T06:46:21,,1,,"<p>If your ""mainjsfunction"" is located in your main process (eg main.js) you can/should use ipc to trigger your function.</p>&#xA;&#xA;<p>For example, in your main.js file you could do:</p>&#xA;&#xA;<pre><code>const {ipcMain} = require('electron')&#xA;ipcMain.on('call-mainjsfunction', (event, arg) =&gt; {&#xA;  console.log(arg) // prints ""ping""&#xA;  var res = mainjsfunction(arg);&#xA;  event.sender.send('reply-mainjsfunction', res)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>And in your index.html or client js code you would do:</p>&#xA;&#xA;<pre><code>const {ipcRenderer} = require('electron')&#xA;ipcRenderer.send('call-mainjsfunction', 'ping') //eg placed in your onclick&#xA;&#xA;ipcRenderer.on('reply-mainjsfunction', (event, res) =&gt; {&#xA; console.log(res) // result back in client/renderer&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Reference: <a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-main.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/ipc-main.md</a></p>&#xA;",9734548,"",,"",,2018-05-27T06:46:21,"","",,0,,,
50554895,2,,50554739,2018-05-27T17:47:19,,3,,"<p>Ok so after looking around, I found out the answer.  You call the resulting promise and operate on the argument to the promise.</p>&#xA;&#xA;<pre><code>keytar.setPassword('KeytarTest', 'AccountName', 'secret');&#xA;const secret = keytar.getPassword('KeytarTest', 'AccountName');&#xA;secret.then((result) =&gt; {&#xA;    console.log(""result: ""+ result); // result will be 'secret'&#xA;});&#xA;</code></pre>&#xA;",4375809,"",4375809,"",2018-05-27T17:52:46,2018-05-27T17:52:46,"","",,0,,,
50557829,2,,50557813,2018-05-28T00:48:25,,2,,"<p>Electron binds Node and Chromium so that you can do that. Read up on that here: <a href=""https://electronjs.org/docs/tutorial/application-architecture#using-nodejs-apis"" rel=""nofollow noreferrer"">https://electronjs.org/docs/tutorial/application-architecture#using-nodejs-apis</a></p>&#xA;",23528,"",,"",,2018-05-28T00:48:25,"","",,0,,,
50589496,2,,50587641,2018-05-29T17:02:19,,0,,"<p>This is a Chromium ""bug"" that won't be fixed. See <a href=""https://bugs.chromium.org/p/chromium/issues/detail?id=429140"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;&#xA;<p>The suggested workaround is to do your own conversion:</p>&#xA;&#xA;<blockquote>&#xA;  <p>When you create separate coordinate spaces using zoom on sub elements on the page you should be responsible as the developer for managing the conversion of measurements between them.</p>&#xA;</blockquote>&#xA;",3479456,"",,"",,2018-05-29T17:02:19,"","",,0,,,
50603501,2,,50600687,2018-05-30T11:27:01,,1,,"<p>Okay so I have found a hacky little workaround:</p>&#xA;&#xA;<pre><code>win = new BrowserWindow({&#xA;frame: false, &#xA;transparent: true,&#xA;  });&#xA;&#xA;&#xA;html {&#xA;  width:  /* less then window's size */;&#xA;  height: /* the same */;&#xA;  background: /* some color here */&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is hacky but the only way I found that worked. If you have a better way please still let me know!</p>&#xA;&#xA;<p>You probably shouldn't use this. It may mess up everything!</p>&#xA;&#xA;<p>Better solution: Just set a vibrancy and a transparent true in the creaton of the BrowserWindow, your window will be with hard edges. everything else will need to have a deep knowledge of chromium...</p>&#xA;",9088217,"",9088217,"",2018-06-18T12:21:06,2018-06-18T12:21:06,"","",,0,,,
50618214,2,,47270634,2018-05-31T06:43:56,,1,,"<p>You need to define chromeDriver args for your application path. I'm sharing my code with you. Hope to help.</p>&#xA;&#xA;<pre><code> ChromeOptions options = new ChromeOptions();&#xA;    options.setBinary(binaryPath);&#xA;    options.addArguments(""--app="" + argPath);&#xA;    options.setCapability(""chromeOptions"", options);&#xA;    driver = new ChromeDriver(options);    &#xA;</code></pre>&#xA;",7819964,"",,"",,2018-05-31T06:43:56,"","",,0,,,
50620584,2,,50601597,2018-05-31T09:08:24,,0,,"<p>The following modification helped me sending commands over the existing telnet channel without creating multiple sessions of telnet, now the speed of sending telnet command is fast.</p>&#xA;&#xA;<pre><code>var params = {&#xA;  host: '192.168.1.121',&#xA;  port: 23,&#xA;  shellPrompt: ' ',&#xA;  timeout: 1500,&#xA;  // removeEcho: 4&#xA;}&#xA;connection.connect(params)&#xA;&#xA;var cmd = ""a temp command""&#xA;&#xA;connection.on('ready', function(prompt) {&#xA;  connection.exec(cmd, function(err, response) {&#xA;    console.log(response)&#xA;  })&#xA;})&#xA;&#xA;connection.on('timeout', function() {&#xA;  console.log('socket timeout!')&#xA;  connection.end()&#xA;})&#xA;&#xA;connection.on('close', function() {&#xA;  console.log('connection closed')&#xA;})&#xA;&#xA;ipcMain.on('channel-1', (event, arg) =&gt; {&#xA;&#xA;  cmd = arg&#xA;&#xA;if(connection.getSocket().writable){&#xA;  connection.exec(cmd, function(err, response) {&#xA;      console.log(response)&#xA;  })&#xA;}else{&#xA;  console.log(""connection closed!"" + connection.getSocket().writable)&#xA;}&#xA;&#xA;})&#xA;</code></pre>&#xA;",3079185,"",,"",,2018-05-31T09:08:24,"","",,0,,,
50651614,2,,50650430,2018-06-01T22:17:43,,0,,"<p>Here's a couple of ideas</p>&#xA;&#xA;<p>1) Keep track of the newly added windows in the main process.</p>&#xA;&#xA;<pre><code>const ADD_WINDOW_ID = 'ADD_WINDOW'&#xA;const windows = {}&#xA;&#xA;// make the window&#xA;&#xA;windows[ADD_WINDOW_ID] = new BrowserWindow() // ...&#xA;</code></pre>&#xA;&#xA;<p>In the <code>close:add</code> IPC event on the main process, close the add window:</p>&#xA;&#xA;<pre><code>if (windows[ADD_WINDOW_ID]) {&#xA;    windows[ADD_WINDOW_ID].close()&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>2) use <code>webContents</code> api to get all web contents for this electron app</p>&#xA;&#xA;<p><em>This is not a complete solution, perhaps investigate</em></p>&#xA;&#xA;<p>Each window has a webContents uniquely identified, from the add window, look up the id of the current web contents, and pass that to the IPC callback:</p>&#xA;&#xA;<pre><code>    // add window&#xA;    import { remote } from 'electron'&#xA;    const { id } = remote.getCurrentWebContents()&#xA;</code></pre>&#xA;&#xA;<p>In the main process</p>&#xA;&#xA;<pre><code>import { webContents } from 'electron'&#xA;// on the IPC callback, identify which web contents&#xA;const allWebContents = webContents.getAllWebContents()&#xA;// todo: find the web contents with the right id, close the window&#xA;</code></pre>&#xA;",39013,"",-1,"",2020-02-10T15:27:01,2020-02-10T15:27:01,"","",,0,,,
50652702,2,,50651482,2018-06-02T01:20:58,,1,,"<p>Try <code>ngrok</code> or <code>localtunnel</code>. Both of them are free.</p>&#xA;&#xA;<p><a href=""https://github.com/bubenshchykov/ngrok"" rel=""nofollow noreferrer"">https://github.com/bubenshchykov/ngrok</a></p>&#xA;&#xA;<p><a href=""https://github.com/localtunnel/localtunnel"" rel=""nofollow noreferrer"">https://github.com/localtunnel/localtunnel</a></p>&#xA;&#xA;<p>To expose your local port 8000 for instance:</p>&#xA;&#xA;<pre><code>npm install ngrok -g&#xA;ngrok http 8000&#xA;</code></pre>&#xA;",5875244,"",,"",,2018-06-02T01:20:58,"","",,0,,,
50663800,2,,44680931,2018-06-03T06:21:55,,2,,"<p>Just found it <a href=""https://stackoverflow.com/questions/46364167/what-is-the-equivalent-for-app-dock-hide"">here</a>.</p>&#xA;&#xA;<p>In order to make the window not show in the taskbar, you can either call <code>win.setSkipTaskbar(true);</code> or add <code>skipTaskbar</code> to the options passed to the new <code>BrowserWindow</code>:</p>&#xA;&#xA;<pre><code>{&#xA;    // ...&#xA;    skipTaskbar: true,&#xA;    // ...&#xA;}&#xA;</code></pre>&#xA;",4352492,"",7481043,"",2018-06-03T09:03:46,2018-06-03T09:03:46,"","",,0,,,
50672022,2,,50666929,2018-06-03T23:57:47,,0,,"<p>You should replace <code>var</code> with <code>let</code> in the <code>for</code> loop.</p>&#xA;&#xA;<p><code>var</code> is scoped to the function, so by the time the <code>click</code> handler is executed, <code>i</code> will be set to <code>jsonContent.length</code>.</p>&#xA;&#xA;<p>When using <code>let</code> in a <code>for</code> loop, you'll get a new variable each iteration, which can be used in a closure (i.e. in the <code>click</code> handler in your case).</p>&#xA;",3479456,"",,"",,2018-06-03T23:57:47,"","",,0,,,
50694797,2,,32320475,2018-06-05T07:46:27,,1,,"<p>The driver you're looking for is:&#xA;<a href=""https://www.npmjs.com/package/ce-mssql"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/ce-mssql</a></p>&#xA;&#xA;<p>However - I'm afraid you'll need to fork a nodejs process from your webkit application, and feature your queries through web API - this will put you at home with Angular.</p>&#xA;",644419,"",,"",,2018-06-05T07:46:27,"","",,0,,,
50701945,2,,50620640,2018-06-05T13:56:34,,0,,"<p>Seems like the definition of <code>devDependencies</code> is a bit different than I'm used to. In this case, packages that would normally just be dependencies are now only used by webpack and not by electron-builder. electron-builder includes the dependencies but not the devDependencies. So all js modules with no native component can be in devDependencies because they don't have to be included in the final electron build because webpack has already bundled them. electron-builder does not look at the webpack config so it does not know about the alias, but as it turns out packages like ract-navigation and their subdependencies (like react-native) should not be in the build twice anyway.</p>&#xA;&#xA;<p>So move everything that should not be included separately to devDependencies and the app will compile.&#xA;It did not start because of errors but that's another problem probably</p>&#xA;",5243543,"",5243543,"",2018-06-06T15:29:48,2018-06-06T15:29:48,"","",,0,,,
50703424,2,,50686010,2018-06-05T15:10:31,,7,,"<p>When you throw the error from <code>readdir</code> it gets caught by the top-level <code>uncaughtException</code> handler, indicated by the the first line: ""Uncaught Exception"".</p>&#xA;&#xA;<p>What you need to do is add your own custom handler for the <a href=""https://nodejs.org/api/process.html#process_event_uncaughtexception"" rel=""noreferrer""><code>uncaughtException</code></a> in your main process and show whatever dialog you want from there.</p>&#xA;&#xA;<p>Take a look at the <a href=""https://github.com/electron/electron/blob/master/docs/api/dialog.md#dialogshowmessageboxbrowserwindow-options-callback"" rel=""noreferrer""><code>dialog</code></a> module.</p>&#xA;&#xA;<p>As an example, you can use the <code>dialog.showMessageBox</code> method to configure all sorts of things about the error dialog like this:</p>&#xA;&#xA;<pre><code>process.on(""uncaughtException"", (err) =&gt; {&#xA;   const messageBoxOptions = {&#xA;        type: ""error"",&#xA;        title: ""Error in Main process"",&#xA;        message: ""Something failed""&#xA;    };&#xA;    dialog.showMessageBox(messageBoxOptions);&#xA;    throw err;&#xA;});&#xA;</code></pre>&#xA;",3479456,"",3479456,"",2018-06-05T18:28:24,2018-06-05T18:28:24,"","",,0,,,
50518759,2,,50518100,2018-05-24T21:57:24,,0,,"<p><a href=""https://github.com/googlesamples/appauth-js-electron-sample"" rel=""nofollow noreferrer"">This</a> is an example from the AppAuthJs library. I remember we used it as a starting point for implementing our Electron app authentication.</p>&#xA;&#xA;<p>I also remember that when implementing it with your own Identity Server, the bes approach was to go for the <code>authorization_code</code> grant type. You use the sample to execute the first request (<code>setAuthorizationListener</code> method), from the response, you get the <code>response code</code>, and using it, and all the other data for your client (<code>client_id</code>, <code>client_secret</code> and <code>redirect_uri</code>) you create the <code>access_token</code> request, which will lead you to the login page.</p>&#xA;&#xA;<p>After that the flow is the same as in your other JS client, with the fact, that in this case you will have a <code>refresh token</code>, that you can use to renew your <code>access token</code>.</p>&#xA;",6462951,"",,"",,2018-05-24T21:57:24,"","",,1,,,
50523489,2,,50519346,2018-05-25T07:15:16,,1,,"<p>The problem here is that you're listening for clicks on the document and then only checking <code>event.target</code>. As you have found out, if the click happens on a child element (for example, an image) inside the link, then <code>event.target</code> points to that child element, and you won't detect that the link was clicked.</p>&#xA;&#xA;<p>This is one of the places jQuery comes in handy. Something like <a href=""https://api.jquery.com/on/#direct-and-delegated-events"" rel=""nofollow noreferrer""><code>$(document).on('click', 'a', ...)</code></a> is fairly simple to deal with.</p>&#xA;&#xA;<p>But you don't have to use jQuery. Because Electron uses Chromium, the click events have a non-standard attribute called <code>path</code>. That attribute is an array of parents, going up the DOM, all the way to body, document, and finally global. You can run <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"" rel=""nofollow noreferrer""><code>.find()</code></a> on this array to check if any element happens to be a link, and then return that link to your event handler to deal with.</p>&#xA;&#xA;<p>Here's what that looks like:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.addEventListener('click', function(event) {&#xD;&#xA;  const link = getLink(event);&#xD;&#xA;&#xD;&#xA;  if (link) {&#xD;&#xA;    event.preventDefault()&#xD;&#xA;    alert('caught: ' + link.href);&#xD;&#xA;  }&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;function getLink(event) {&#xD;&#xA;  return event.path.find(($el) =&gt; {&#xD;&#xA;    if ($el.tagName === 'A' &amp;&amp; $el.href.startsWith('http')) {&#xD;&#xA;      return true;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return false;&#xD;&#xA;  });&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p&gt;&#xD;&#xA;  Image link:&#xD;&#xA;  &lt;a href=""https://www.stackoverflow.com""&gt;&#xD;&#xA;    &lt;img src='https://placehold.it/100x100' /&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;  Text link:&#xD;&#xA;  &lt;a href=""https://example.com""&gt;Test link&lt;/a&gt;&#xD;&#xA;&lt;/p&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",5764553,"",,"",,2018-05-25T07:15:16,"","",,1,,,
50530996,2,,50524561,2018-05-25T14:04:48,,7,,"<p>By default, <code>electron-packager</code> is expecting a <em>regular expression</em> for the <code>--ignore</code> flag, so you may want to try <code>--ignore=^/src</code> to restrict the pattern to the root level...</p>&#xA;&#xA;<p>Reference:</p>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#ignore"" rel=""noreferrer"">electron-packager API option: ignore</a></p>&#xA;",,user8022331,,user8022331,2018-05-25T17:40:10,2018-05-25T17:40:10,"","",,1,,,
50586885,2,,50349881,2018-05-29T14:27:32,,-1,,"<p>One way to make this work is to run a local server which serves the page you want to display. Then in your electron window load that local server url. </p>&#xA;&#xA;<p>Because the Firebase libraries will complain if loaded directly in an electron window, but you can get around it using a local server like this:</p>&#xA;&#xA;<pre><code>import {&#xA;    app,&#xA;    BrowserWindow&#xA;} from 'electron'&#xA;&#xA;import ex from 'express'&#xA;import path from 'path'&#xA;const express = ex()&#xA;let win&#xA;const port = 12345&#xA;&#xA;const appPath = app.getAppPath()&#xA;express.use(require('express').static(path.join(appPath, '/')))&#xA;express.get('/', (_, res) =&gt; res.sendFile(path.join(appPath, '/index.html')))&#xA;express.listen(port, () =&gt; console.log('Running on ' + port))&#xA;&#xA;function getWindow () {&#xA;    if (win === undefined) {&#xA;        // Create the browser window.&#xA;        win = new BrowserWindow({&#xA;            frame: false,&#xA;            transparent: true,&#xA;            alwaysOnTop: true,&#xA;            width: 1280,&#xA;            height: 768,&#xA;            center: true&#xA;        })&#xA;        win.loadURL('http://localhost:' + port)&#xA;    }&#xA;    return win&#xA;}&#xA;&#xA;app.on('ready', () =&gt; {&#xA;    getWindow().show()&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>The above code would be your <code>index.js</code> which you'd run when you run electron. Then in <code>index.html</code> which is served over the local webserver you load the firebase web libraries. </p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=""en""&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=""utf-8""&gt;&#xA;    &lt;meta http-equiv=""X-UA-Compatible"" content=""IE=edge""&gt;&#xA;    &lt;meta name=""viewport"" content=""width=device-width,initial-scale=1.0""&gt;&#xA;&#xA;    &lt;link rel=""icon"" href=""&lt;%= BASE_URL %&gt;favicon.ico""&gt;&#xA;    &lt;title&gt;Example&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;script src=""/__/firebase/6.3.0/firebase-app.js""&gt;&lt;/script&gt;&#xA;    &lt;script src=""/__/firebase/6.3.0/firebase-auth.js""&gt;&lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",964887,"",964887,"",2019-07-16T08:36:56,2019-07-16T08:36:56,"","",,1,,,
50604478,2,,50589809,2018-05-30T12:16:23,,1,,"<p>After some trial and research (<a href=""https://github.com/firebase/firebase-js-sdk/issues/540"" rel=""nofollow noreferrer"">#1</a>, <a href=""https://stackoverflow.com/a/28334167/4549776"">#2</a>), we have found a ""workaround"" that prevents the delay:</p>&#xA;&#xA;<pre><code>import {INTERNAL as firebaseDbInternal} from '@firebase/database'&#xA;&#xA;// Force firebase database to use long polling instead of websockets&#xA;firebaseDbInternal.forceLongPolling()&#xA;</code></pre>&#xA;&#xA;<p><strong>Warning:</strong> This does not seem to be a good solution, because a comment in <strong><a href=""https://github.com/firebase/firebase-js-sdk/blob/master/packages/database/src/api/internal.ts#L24"" rel=""nofollow noreferrer"">internal.ts</a></strong> states:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Customers shouldn't use these (functions) or else should be aware that they could break at any time.</p>&#xA;</blockquote>&#xA;&#xA;<p>We would be happy for suggestions on a better solution - as long as there is no better answer, I will accept this answer as the best approach to solve the problem.</p>&#xA;",4549776,"",,"",,2018-05-30T12:16:23,"","",,1,,,
50652094,2,,50644179,2018-06-01T23:26:21,,1,,"<p>You are reading docs for 2.0.2 version of electron. 1.7.11 you use <a href=""https://github.com/electron/electron/blob/v1.7.11/docs/api/web-frame.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/v1.7.11/docs/api/web-frame.md</a> doesn't have those interface.</p>&#xA;",2742189,"",,"",,2018-06-01T23:26:21,"","",,1,,,
50653544,2,,50653501,2018-06-02T04:36:22,,2,,"<p>That is because your function is declared but never invoked. Try:</p>&#xA;&#xA;<pre><code>(function() {&#xA;  ""use_strict"";&#xA;  console.log('lul'); // Doesn't log 'lul'&#xA;  var jq = require(""./assets/jquery.min.js"");&#xA;}());&#xA;</code></pre>&#xA;&#xA;<p>The <code>()</code> at the end makes it an <a href=""https://developer.mozilla.org/en-US/docs/Glossary/IIFE"" rel=""nofollow noreferrer"">IIFE</a> (Immediately Invoked Function Expression).</p>&#xA;&#xA;<p>As a side note, I believe the <code>require</code> is going to throw an error if you run it in a browser without converting it with babel or some other transpiler.</p>&#xA;",3422159,"",3422159,"",2018-06-02T10:12:20,2018-06-02T10:12:20,"","",,1,,,
50663687,2,,50622859,2018-06-03T05:57:53,,1,,"<p>You mention that your build runs behind proxy, so please try using http instead of https in your proxy address:</p>&#xA;&#xA;<p>export HTTPS_PROXY=""<strong>http</strong>://myproxy.com:8080""</p>&#xA;&#xA;<p>instead of</p>&#xA;&#xA;<p>export HTTPS_PROXY=""<strong>https</strong>://myproxy.com:8080""</p>&#xA;&#xA;<p>From here:</p>&#xA;&#xA;<p><a href=""https://github.com/jspm/github/issues/59"" rel=""nofollow noreferrer"">https://github.com/jspm/github/issues/59</a></p>&#xA;",91714,"",,"",,2018-06-03T05:57:53,"","",,1,,,
50675412,2,,50674478,2018-06-04T07:31:40,,2,,"<p>I have recreated your scenario in jsfiddle.</p>&#xA;&#xA;<p><a href=""https://jsfiddle.net/1j4gu2f1/"" rel=""nofollow noreferrer"">https://jsfiddle.net/1j4gu2f1/</a></p>&#xA;&#xA;<p>There are two consoles, with and without setTimeout and both will give different representation on collapsed state but same result on expanded state.</p>&#xA;&#xA;<p>I presume the code is self explanatory.</p>&#xA;&#xA;<pre><code>var devices = [];&#xA;&#xA;setTimeout(function(){ //data loaded after 1000 ms&#xA; devices.push({""name"":""hello""});&#xA; devices.push({""name"":""world""})&#xA;},1000);&#xA;&#xA;console.log(devices); // will show empty devices&#xA;&#xA;setTimeout(function(){&#xA;    console.log(devices); // will show devices array&#xA;},1000)&#xA;</code></pre>&#xA;",2491541,"",,"",,2018-06-04T07:31:40,"","",,1,,,
50497495,2,,50418690,2018-05-23T21:09:26,,0,,"<p>I'm not sure I understand exactly where is the problem, but i think you could try implementing <code>UrlSerializer</code> compatible with <code>file:///</code> protocol and file names or atleast check <code>DefaultUrlSerializer</code> implementation.</p>&#xA;",491265,"",,"",,2018-05-23T21:09:26,"","",,2,,,
50504285,2,,50504075,2018-05-24T08:15:54,,0,,"<p>If electron-builder depend on <strong>latest</strong> deep-extend and latest deep-extend has vulnerabilities and you care, you are in trouble and have 3 options.</p>&#xA;&#xA;<ul>&#xA;<li>Report this problem to the maintainers and hope this will be fixed until your release.</li>&#xA;<li>Fix this by your own, make a pull request to the deep-extend and hope they will accept it until your release.</li>&#xA;<li>Fork deep-extend, electron-builder, patch both of them, publish on npm. Than switch when they will fix the problem. This is the hardest way.</li>&#xA;</ul>&#xA;&#xA;<p>If electron-builder depend <strong>not on latest</strong> deep-extend, you can add propper deep-extend version to your package.json and electron will try to use it.</p>&#xA;&#xA;<p>Not sure this helps you much still.</p>&#xA;",5575595,"",,"",,2018-05-24T08:15:54,"","",,2,,,
50511979,2,,50507531,2018-05-24T14:32:49,,2,,"<p>Here is a working example showing how to open a Terminal window at a specific path (~/Desktop for instance) on <code>macOS</code>, from a renderer script:</p>&#xA;&#xA;<pre><code>const { app } = require ('electron').remote;&#xA;const atPath = app.getPath ('desktop');&#xA;const { spawn } = require ('child_process');&#xA;let openTerminalAtPath = spawn ('open', [ '-a', 'Terminal', atPath ]);&#xA;openTerminalAtPath.on ('error', (err) =&gt; { console.log (err); });&#xA;</code></pre>&#xA;&#xA;<p>It should be easy to adapt it to any selected atPath...&#xA;As for running other commands, I haven't found a way yet...</p>&#xA;&#xA;<p>And here is the equivalent working code for <code>Linux Mint Cinnamon</code> or <code>Ubuntu</code>:</p>&#xA;&#xA;<pre><code>const { app } = require ('electron').remote;&#xA;const terminal = 'gnome-terminal';&#xA;const atPath = app.getPath ('desktop');&#xA;const { spawn } = require ('child_process');&#xA;let openTerminalAtPath = spawn (terminal, { cwd: atPath });&#xA;openTerminalAtPath.on ('error', (err) =&gt; { console.log (err); });&#xA;</code></pre>&#xA;&#xA;<p>Please note that the name of the terminal application may be different, depending on the Linux flavor (for instance <code>'mate-terminal'</code> on <code>Linux Mint MATE</code>), and also that the full path to the application can be explicitly defined, to be on the safe side:</p>&#xA;&#xA;<pre><code>const terminal = '/usr/bin/gnome-terminal';&#xA;</code></pre>&#xA;&#xA;<p>HTH...</p>&#xA;",,user8022331,,user8022331,2018-05-25T13:07:18,2018-05-25T13:07:18,"","",,2,,,
50522697,2,,50521657,2018-05-25T06:20:47,,1,,"<p>I wrote a simple example for you:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""true"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const data = [{&#xD;&#xA;  id: 1,&#xD;&#xA;  name: 'user1',&#xD;&#xA;  age: 21&#xD;&#xA;},{&#xD;&#xA;  id: 2,&#xD;&#xA;  name: 'user2',&#xD;&#xA;  age: 33&#xD;&#xA;}]&#xD;&#xA;&#xD;&#xA;const mixin = {&#xD;&#xA;  props: {&#xD;&#xA;    userId: {&#xD;&#xA;      required: true&#xD;&#xA;    }&#xD;&#xA;  },&#xD;&#xA;  data () {&#xD;&#xA;    return {&#xD;&#xA;      user: {}&#xD;&#xA;    }&#xD;&#xA;  },&#xD;&#xA;  methods: {&#xD;&#xA;    loadUser () {&#xD;&#xA;      /*ajax to get user detail data here*/&#xD;&#xA;      setTimeout(_=&gt;{&#xD;&#xA;        this.user = data.filter(o=&gt;o.id==this.userId)[0]&#xD;&#xA;      },10)&#xD;&#xA;    }    &#xD;&#xA;  },&#xD;&#xA;  created () {&#xD;&#xA;    this.loadUser()&#xD;&#xA;  },&#xD;&#xA;  watch: {&#xD;&#xA;    userId (newVal) {&#xD;&#xA;      if(newVal){&#xD;&#xA;        this.loadUser()&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Vue.component('user-viewer',{&#xD;&#xA;  template: `&lt;div&gt;&#xD;&#xA;    name:{{user.name}}&lt;br&gt;&#xD;&#xA;    age: {{user.age}}&lt;br&gt;&#xD;&#xA;    &lt;button @click=""edit""&gt;edit&lt;/button&gt;&#xD;&#xA;  &lt;/div&gt;`,&#xD;&#xA;  mixins: [mixin],&#xD;&#xA;  methods: {&#xD;&#xA;    edit () {&#xD;&#xA;      this.$emit('switch-edit-mode',true)&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;Vue.component('user-editor',{&#xD;&#xA;  template: `&lt;div&gt;&#xD;&#xA;    name:&lt;input type=""text"" v-model=""user.name""&gt;&lt;br&gt;&#xD;&#xA;    age: &lt;input type=""text"" v-model=""user.age""&gt;&lt;br&gt;&#xD;&#xA;    &lt;button @click=""sendData""&gt;save&lt;/button&gt;&#xD;&#xA;  &lt;/div&gt;`,&#xD;&#xA;  mixins: [mixin],&#xD;&#xA;  methods: {&#xD;&#xA;    sendData () {&#xD;&#xA;      /*ajax send user data here*/&#xD;&#xA;      setTimeout(_=&gt;{&#xD;&#xA;        /*false means edit complete,so that user list must be reloaded*/&#xD;&#xA;        this.$emit('switch-edit-mode',false);&#xD;&#xA;      },10)&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;var app = new Vue({&#xD;&#xA;  el: '#app',&#xD;&#xA;  data () {&#xD;&#xA;    return {&#xD;&#xA;      users: [],&#xD;&#xA;      isModify: false,&#xD;&#xA;      userId: null&#xD;&#xA;    }&#xD;&#xA;  },&#xD;&#xA;  methods: {&#xD;&#xA;    toggleModify (modify) {&#xD;&#xA;       this.isModify = modify&#xD;&#xA;       if(!modify){&#xD;&#xA;          this.fetchUsers();&#xD;&#xA;       }&#xD;&#xA;    },&#xD;&#xA;    fetchUsers () {&#xD;&#xA;      /*load your user list data here*/&#xD;&#xA;      this.users = data.map(o=&gt;({&#xD;&#xA;        id: o.id,&#xD;&#xA;        name: o.name&#xD;&#xA;      }))&#xD;&#xA;    }&#xD;&#xA;  },&#xD;&#xA;  created () {&#xD;&#xA;    this.fetchUsers()&#xD;&#xA;  }&#xD;&#xA;})</code></pre>&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>*{&#xD;&#xA;    padding:0;&#xD;&#xA;    margin:0;&#xD;&#xA;  }&#xD;&#xA;  ul,li{&#xD;&#xA;    list-style:none;&#xD;&#xA;  }&#xD;&#xA;  .main{&#xD;&#xA;    display: flex;&#xD;&#xA;  }&#xD;&#xA;  .user-list{&#xD;&#xA;    width: 250px;&#xD;&#xA;  }&#xD;&#xA;  .user-list&gt;li{&#xD;&#xA;    border:1px solid skyblue;&#xD;&#xA;    border-bottom: none;&#xD;&#xA;  }&#xD;&#xA;  .user-list&gt;li:last-child{&#xD;&#xA;    border-bottom:1px solid skyblue;&#xD;&#xA;  }&#xD;&#xA;  .content-wrapper{&#xD;&#xA;    flex:1;&#xD;&#xA;  }</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js""&gt;&lt;/script&gt;&#xD;&#xA;&lt;style&gt;&#xD;&#xA;  *{&#xD;&#xA;    padding:0;&#xD;&#xA;    margin:0;&#xD;&#xA;  }&#xD;&#xA;  ul,li{&#xD;&#xA;    list-style:none;&#xD;&#xA;  }&#xD;&#xA;  .main{&#xD;&#xA;    display: flex;&#xD;&#xA;  }&#xD;&#xA;  .user-list{&#xD;&#xA;    width: 250px;&#xD;&#xA;  }&#xD;&#xA;  .user-list&gt;li{&#xD;&#xA;    border:1px solid skyblue;&#xD;&#xA;    border-bottom: none;&#xD;&#xA;  }&#xD;&#xA;  .user-list&gt;li:last-child{&#xD;&#xA;    border-bottom:1px solid skyblue;&#xD;&#xA;  }&#xD;&#xA;  .content-wrapper{&#xD;&#xA;    flex:1;&#xD;&#xA;  }&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&lt;div id=""app""&gt;&#xD;&#xA;  &lt;div class=""main""&gt;&#xD;&#xA;    &lt;ul class=""user-list""&gt;&#xD;&#xA;      &lt;li v-for=""user in users"" @click=""userId=user.id""&gt;{{user.name}}&lt;/li&gt;&#xD;&#xA;    &lt;/ul&gt;&#xD;&#xA;    &lt;div class=""content-wrapper""&gt;&#xD;&#xA;      &lt;component v-if=""userId"" :is=""isModify?'user-editor':'user-viewer'"" @switch-edit-mode=""toggleModify"" :user-id=""userId""&gt;&lt;/component&gt;&#xD;&#xA;      &lt;div v-else&gt;please choose a user to view or edit&lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",9561387,"",9561387,"",2018-05-25T08:06:38,2018-05-25T08:06:38,"","",,2,,,
50550009,2,,50549950,2018-05-27T07:34:44,,3,,"<p><code>global.RunCommand</code> is a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"" rel=""nofollow noreferrer"">async</a> function, you must always declare the  <strong>async</strong> word in an asynchronous function</p>&#xA;&#xA;<pre><code>global.RunCommand = async function(param)&#xA;{&#xA; ...&#xA;}&#xA;</code></pre>&#xA;",1074519,"",,"",,2018-05-27T07:34:44,"","",,2,,,
50648775,2,,50648445,2018-06-01T17:58:00,,2,,"<p><code>desktopCapturer</code> is supposed to be used in the Renderer process. If you look at the <a href=""https://github.com/electron/electron/blob/master/docs/api/desktop-capturer.md"" rel=""nofollow noreferrer"">docs</a>, it will say:  </p>&#xA;&#xA;<blockquote>&#xA;  <p>Process: Renderer</p>&#xA;</blockquote>&#xA;&#xA;<p>You're importing it in the main process. Instead, import it in the renderer process.</p>&#xA;",3479456,"",,"",,2018-06-01T17:58:00,"","",,2,,,
50655289,2,,50654230,2018-06-02T09:12:16,,1,,"<p>Your question is a bit confusing because we don't know what ""default browser"" and ""my site"" are in your question's context. Since <a href=""https://electronjs.org/"" rel=""nofollow noreferrer"">Electron ships with Chromium</a>, the ""default browser"" is known: its Chromium. And since Chromium is HTML5 compliant, you can just use <a href=""https://www.w3schools.com/Html/html5_webstorage.asp"" rel=""nofollow noreferrer"">normal LocalStorage methods</a> in your Renderer process.</p>&#xA;&#xA;<p>When you say ""my site"" it makes it sound like you are expecting Electron to run from the web; it doesn't, its a local app on your PC/Mac.</p>&#xA;&#xA;<p>If this answer doesn't help, we're going to need a lot more detail from you to narrow down your need.</p>&#xA;",1884386,"",,"",,2018-06-02T09:12:16,"","",,2,,,
50584474,2,,50583034,2018-05-29T12:30:04,,3,,"<p>You need a transperent frameless Window, with grid or flex layouted titlebar and container area.</p>&#xA;&#xA;<pre><code>const {BrowserWindow} = require('electron')&#xA;let win = new BrowserWindow({transparent: true, frame: false})&#xA;win.show()&#xA;</code></pre>&#xA;&#xA;<p>Check out the <a href=""https://github.com/electron/electron/blob/master/docs/api/frameless-window.md#transparent-window"" rel=""nofollow noreferrer"">Electron Docs</a> with crossplatform hints about transperent windows.</p>&#xA;&#xA;<p>The you can then add or remove a class on the title bar to make it appear/disappear. The titlebar element should have the css property <code>-webkit-app-region: drag</code></p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/Hwr04.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Hwr04.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>You should consider to fill out the non-visible area of that window with the content, also the perferct usecase for a little animation. Otherwise it may block off a application behind it, and the user has no idea why. Otherwise you need to manage the click forwording manually via: </p>&#xA;&#xA;<pre><code>win.setIgnoreMouseEvents(true)&#xA;</code></pre>&#xA;&#xA;<p>Check out the <a href=""https://github.com/electron/electron/blob/master/docs/api/frameless-window.md#click-through-window"" rel=""nofollow noreferrer"">Electron Docs</a> on the matter since the forwarding can get pretty complex.</p>&#xA;",5115009,"",,"",,2018-05-29T12:30:04,"","",,3,,,
50695228,2,,50693947,2018-06-05T08:10:27,,0,,"<p>I think the path could be wrong after packaging. You should try to do a <code>console.log(app.getAppPath());</code> (e.g. send to renderer, write to a log file etc.) in your app to double check if it is pointing to the expected path.</p>&#xA;",9734548,"",9734548,"",2018-06-05T08:53:09,2018-06-05T08:53:09,"","",,8,,,
50496141,2,,50495807,2018-05-23T19:30:24,,3,,"<p>This is going to be very difficult, mainly because of security reasons. A website normally cannot access the filesystem of the client, nor can it run commands. This is done to prevent random websites messing with your computer.</p>&#xA;&#xA;<p>There are however a few ways you can do this:</p>&#xA;&#xA;<p><strong>Option 1: Javascript (hacky, do not use it)</strong></p>&#xA;&#xA;<p>As mentioned in <a href=""https://stackoverflow.com/questions/18980957/is-it-possible-to-run-an-exe-or-bat-file-on-onclick-in-html"">this question</a>, there is a way of executing files on the client if you know exactly where it is. It is done by using the <code>file://</code> protocol like so:</p>&#xA;&#xA;<pre><code>window.open('file://C:/path/to/your/file.exe');&#xA;</code></pre>&#xA;&#xA;<p>To use this method, you could try to install the Electron program in a folder on the C drive. That way, you always know where it is.</p>&#xA;&#xA;<p>I do not recommend using this option though, I'm just including it because it's a possibility and so you know it's a bad one.</p>&#xA;&#xA;<p><strong>Option 2: Reverse the flow</strong></p>&#xA;&#xA;<p>A good second option would be to change the flow of your application. Instead of starting with your web app, a better approach might be to <strong>start in the desktop app</strong> and from there open the web app. This can be done using standard practices and is also more durable.</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/8500326/how-to-use-nodejs-to-open-default-browser-and-navigate-to-a-specific-url"">This question</a> details how to use NodeJS (which is part of Electron) to open a website in the client browser.</p>&#xA;&#xA;<p><strong>Option 3: Using a custom URI scheme</strong></p>&#xA;&#xA;<p>The third, and most difficult, option would be to register your own URI scheme in the operating system of the client. Just as <code>http://</code> makes your computer go on the internet and <code>file://</code> makes it go to the hard disk, you can make your own scheme/protocol to do what you want. You could register <code>myapp://</code> in the OS, and have it execute your app once somebody clicks on such a link. This is however far more complicated, and works differently on all operating systems. You will have to create system specific installers for this. More information on how to do this on Windows <a href=""https://stackoverflow.com/questions/389204/how-do-i-create-my-own-url-protocol-e-g-so"">can be found here</a>.</p>&#xA;&#xA;<p><strong>Conclusion</strong></p>&#xA;&#xA;<p>This is highly situation dependant, but based on what you told me, your focus lies on security. The best approach seems to be <strong>option 2</strong> if possible. This way, you start with the desktop app and open a regular URL to your website once needed. This URL is already public, so no other vulnerabilities would get introduced. The custom URI solution is very neat, but introduces two possibilities:</p>&#xA;&#xA;<ol>&#xA;<li>Other websites could launch your app as well.</li>&#xA;<li>If you allow passing data in the URL, like <code>myapp://data</code>, other websites could try to pass malformed data to your application to try to compromise it.</li>&#xA;</ol>&#xA;&#xA;<p>Option 2 also has this problem because it's a public facing website, but that's your only concern. Choosing option 3, you would have 2 attack vectors instead of one. But, in the end, it's a matter of preference really. Using a custom URI scheme can be done safely, so it's perfectly fine to use that solution. It will however be more work.</p>&#xA;",9825227,"",9825227,"",2018-05-23T20:37:53,2018-05-23T20:37:53,"","",,11,,,
50565565,2,,50564760,2018-05-28T11:39:05,,1,,"<p><code>tasklist</code> is an acceptable way to do this.</p>&#xA;&#xA;<p>System applications and services can be filtered out by <code>Session Name</code> and <code>Username</code> columns.</p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/tasklist"" rel=""nofollow noreferrer""><code>tasklist</code></a> helper package may be used instead of parsing command output manually.</p>&#xA;&#xA;<p>Basically <code>N/A</code> (can be localized) and <code>NT AUTHORITY\*</code> (can have local names so <code>NT AUTHORITY\SYSTEM</code> isn't reliable) users and services (likely fall under previous category) should be filtered out:</p>&#xA;&#xA;<pre><code>tasklist({ verbose: true })&#xA;.then(apps =&gt; {&#xA;  apps = apps&#xA;  .filter(app =&gt; app.sessionName !== 'Services')&#xA;  .filter(app =&gt; /^(?!NT AUTHORITY).+\\/.test(app.username));&#xA;&#xA;  console.log(apps)&#xA;})&#xA;.catch(console.error);&#xA;</code></pre>&#xA;",3731501,"",3731501,"",2018-05-28T12:02:28,2018-05-28T12:02:28,"","",,12,,,
41926117,2,,41223268,2017-01-29T21:23:08,,0,,"<p>If you're wanting to capture screenshots cross platform, i'd advice using the approach below in stead of relying on the built in electron-api's. Not that they're not good, but they're not suited for taking screenshots every three seconds for example.</p>&#xA;&#xA;<p>The solution for me was the npm-module <a href=""https://www.npmjs.com/package/desktop-screenshot"" rel=""nofollow noreferrer"">desktop-screenshot</a> - and a npm package called <a href=""https://www.npmjs.com/package/hazardous"" rel=""nofollow noreferrer"">hazardous</a>, as this was needed on Windows &amp; asar execution.</p>&#xA;&#xA;<p>The code I ended up implementing was this - it might be a source of inspiration/example for your problem.</p>&#xA;&#xA;<pre><code>/* ******************************************************************** */&#xA;/* MODULE IMPORTS */&#xA;import { remote, nativeImage } from 'electron';&#xA;import path from 'path';&#xA;import os from 'os';&#xA;import { exec } from 'child_process';&#xA;import moment from 'moment';&#xA;import screenshot from 'desktop-screenshot';&#xA;/* */&#xA;/*/********************************************************************///&#xA;&#xA;/* ******************************************************************** */&#xA;/* CLASS */&#xA;export default class ScreenshotTaker {    &#xA;    constructor() {&#xA;        this.name = ""ScreenshotTaker"";        &#xA;    }&#xA;&#xA;    start(cb) {&#xA;        const fileName = `cap_${moment().format('YYYYMMDD_HHmmss')}.png`;&#xA;        const destFolder = global.config.app('capture.screenshots');&#xA;        const outputPath = path.join(destFolder, fileName);        &#xA;        const platform = os.platform();&#xA;        if(platform === 'win32') {&#xA;            this.performWindowsCapture(cb, outputPath);&#xA;        }&#xA;        if(platform === 'darwin') {&#xA;            this.performMacOSCapture(cb, outputPath);&#xA;        }&#xA;        if(platform === 'linux') {&#xA;            this.performLinuxCapture(cb, outputPath);&#xA;        }&#xA;    }&#xA;&#xA;    performLinuxCapture(cb, outputPath) {&#xA;        // debian&#xA;        exec(`import -window root ""${outputPath}""`, (error, stdout, stderr) =&gt; {&#xA;            if(error) {&#xA;                cb(error, null, outputPath);&#xA;            } else {&#xA;                cb(null, stdout, outputPath);&#xA;            }&#xA;        });&#xA;    }&#xA;    performMacOSCapture(cb, outputPath) {&#xA;        this.performWindowsCapture(cb, outputPath);&#xA;    }&#xA;    performWindowsCapture(cb, outputPath) {&#xA;        require('hazardous');&#xA;        screenshot(outputPath, (err, complete) =&gt; {&#xA;            if(err) {&#xA;                cb(err, null, outputPath);&#xA;            } else {&#xA;                cb(null, complete, outputPath);&#xA;            }&#xA;        });&#xA;    }&#xA;}&#xA;/*/********************************************************************///&#xA;</code></pre>&#xA;",1155847,"",,"",,2017-01-29T21:23:08,"","",,0,,,
41932271,2,,41912982,2017-01-30T09:15:46,,0,,"<p>According to <a href=""https://stackoverflow.com/a/37506671/6786876"">this</a> answer on nearly the same problem, it might do the trick if you use</p>&#xA;&#xA;<p><code>const {remote} = require('electron');</code></p>&#xA;&#xA;<p>I've had the same issue with <code>var ipcRenderer = require('electron').ipcRenderer;</code>. Enclosing <code>ipcMain</code> with curly brackets and changing the var to const did the trick.</p>&#xA;",6786876,"",-1,"",2017-05-23T12:24:20,2017-01-30T09:15:46,"","",,0,,,
41966058,2,,39793852,2017-01-31T19:36:10,,0,,<p>The configuration above is correct.  There was a bug at one point in electron-builder that caused the background to not appear if a non-default OS X install folder was configured.</p>&#xA;,15689,"",,"",,2017-01-31T19:36:10,"","",,0,,,
42020366,2,,41955995,2017-02-03T09:00:05,,0,,<p>Do you check <code>/js/jquery-3.1.1.min.js</code> is the valid path to your jQuery file?</p>&#xA;&#xA;<p>Then just use the clean syntax below:</p>&#xA;&#xA;<pre><code>html&#xA;  head&#xA;   title= title&#xA;   script(src='/js/jquery-3.1.1.min.js')&#xA;   script.&#xA;     jQuery(function ($) {&#xA;       alert('ready');&#xA;     });&#xA;   body&#xA;     rows&#xA;</code></pre>&#xA;,2991319,"",,"",,2017-02-03T09:00:05,"","",,1,,,
42033182,2,,41899737,2017-02-03T21:20:53,,0,,<p>I was loading the render page from http:// instead of file://</p>&#xA;,959460,"",,"",,2017-02-03T21:20:53,"","",,0,,,
42035296,2,,41705752,2017-02-04T00:52:54,,0,,"<p>It looks like Google is indeed deprecating Electron WebViews. There are multiple solutions to this:</p>&#xA;&#xA;<ul>&#xA;<li><p>Open google sign-in page in user's browser and :</p>&#xA;&#xA;<p>(1) Setup a HttpListener similar to this <a href=""https://github.com/googlesamples/oauth-apps-for-windows/tree/master/OAuthDesktopApp"" rel=""nofollow noreferrer"">https://github.com/googlesamples/oauth-apps-for-windows/tree/master/OAuthDesktopApp</a></p>&#xA;&#xA;<p>(2) Specify custom URI scheme in the redirect_url to open your app after login. (This might open notifications/popus in the user's browser)</p></li>&#xA;<li><p>Use <a href=""https://developers.google.com/identity/protocols/OAuth2InstalledApp"" rel=""nofollow noreferrer"">AppAuth</a> to perform login to Google</p></li>&#xA;</ul>&#xA;",416177,"",,"",,2017-02-04T00:52:54,"","",,0,,,
42044571,2,,42027354,2017-02-04T19:20:42,,0,,"<p>This is the solution I've eventually used. While I haven't found a way to directly obtain any dimensions of the right scrollbar-thumb position due to the dynamic width (for which I've also have not detected a way to calculate this), I have actually been able to solve the problem; <strong>By determining the width of the total content (i.e. the viewable + overflowing content), and subtracting both the viewable content width and scrolled to the left content-width, we can determine uttermost right position of the scrollable content, within the viewport, which (neglecting any possible border widths) equals the right position of the scollbar-thumb.</strong></p>&#xA;&#xA;<pre><code>class C {&#xA;    constructor() {&#xA;        win.on('resize', this._resize.bind(this));&#xA;        $('#divId').on('scroll', this._scroll.bind(this));&#xA;    }&#xA;&#xA;    _getXScrollbarThumbPos() {&#xA;        // width of the content + overflow&#xA;        let totalWidth = $('#divId').scrollWidth;&#xA;        // width of the visible (non overflowing) content&#xA;        let viewWidth = $('#divId').width();&#xA;        // the amount of pixels that the content has been scrolled to the left&#xA;        let lpx = document.getElementById('#divId').scrollLeft;&#xA;        // the amount of pixels that are hidden to right area of the view&#xA;        let rpx = totalWidth - viewWidth - lpx;&#xA;        // represents the right position of the scrollbar-thumb&#xA;        console.log(rpx);&#xA;        return rpx;&#xA;    }&#xA;&#xA;    _resize() {&#xA;        let x = this._getXScrollbarThumbPos();&#xA;        //..&#xA;    }&#xA;&#xA;    _scroll() {&#xA;        let x = this._getXScrollbarThumbPos();&#xA;        //..&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",3200088,"",,"",,2017-02-04T19:20:42,"","",,0,,,
42053825,2,,42041268,2017-02-05T15:32:39,,0,,"<p>Ok, I found the issue. The problem was OS related and it all was around recompiling sqlite3. Actually i needed to add windows toolkit and set path to python later (i read it from errors). I figure it out after checking that under linux everything went smoothly. </p>&#xA;&#xA;<p>Perhaps it would be safer to change my OS to linux but actually i need to develop for windows. I need to find balanced way ;)</p>&#xA;",353938,"",,"",,2017-02-05T15:32:39,"","",,0,,,
42058949,2,,42051098,2017-02-06T00:36:18,,0,,"<p>for a while I found the working solution for this problem is use base64 format to send it to the remote server :</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var documentList = [];&#xD;&#xA;&#xD;&#xA;var stmtDoc = db.prepare(""SELECT * FROM `tb_dokumen_pasien`"");&#xD;&#xA;&#xD;&#xA;while(stmtDoc.step()) {&#xD;&#xA;  var rowDoc =  stmtDoc.getAsObject();&#xD;&#xA;  var data = fs.createReadStream(__dirname + ""/resources/"" + rowDoc['id'] + ""/"" + rowDoc['doc_name']);&#xD;&#xA;  var base64 = Buffer.from(data).toString('base64');&#xD;&#xA;&#xD;&#xA;  var document = {&#xD;&#xA;    ""document_name"" : rowDoc['doc_name'],&#xD;&#xA;    ""data"" : base64&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  documentList.push(document);&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>And I still finding the best approach instead of using base64, Thanks</p>&#xA;",2909811,"",,"",,2017-02-06T00:36:18,"","",,1,,,
42135853,2,,41982596,2017-02-09T11:44:22,,0,,"<p>I did not find out why I couldn't push to chosenGraphics but I found out a solution which was to make a clone of the object with <code>JSON.parse(JSON.stringify(windowManager.sharedData.fetch(""chosen"")));</code></p>&#xA;",2245872,"",,"",,2017-02-09T11:44:22,"","",,0,,,
41922054,2,,41913144,2017-01-29T14:37:36,,1,,"<p>It turns out the issue was because of html5Mode in Angular ui-router, it requires a server and does not work on file:// protocol. Setting enabled to false solved it.</p>&#xA;&#xA;<pre><code>$locationProvider.html5Mode({&#xA;  enabled: false,&#xA;  requireBase: false,&#xA;});&#xA;</code></pre>&#xA;",1163919,"",,"",,2017-01-29T14:37:36,"","",,0,,,
41931178,2,,41908034,2017-01-30T07:58:05,,1,,"<p>Found the solution after several try.</p>&#xA;&#xA;<p>just add <code>file://</code> before src attribute.</p>&#xA;&#xA;<p>like this:</p>&#xA;&#xA;<pre><code>   &lt;audio src=""file:///Users/shidanlifuhetian/Desktop/45.wav"" crossorigin=""anonymous"" controls=""controls""&gt;&#xA;    &lt;/audio&gt;  &#xA;</code></pre>&#xA;",5531816,"",,"",,2017-01-30T07:58:05,"","",,0,,,
41947662,2,,40055668,2017-01-31T00:10:34,,1,,"<p>I just implemented the following architecture into a project where I created a <code>redirect.component</code> which resolved where the course should go post loading. The following is a super simplified version;</p>&#xA;&#xA;<pre><code>import { Component, OnInit }    from '@angular/core';&#xA;&#xA;@Component({&#xA;  selector: 'app-redirect',&#xA;  template: ``&#xA;})&#xA;export class RedirectComponent implements OnInit {&#xA;    private goDownPathOne: boolean = true;&#xA;&#xA;    constructor() { }&#xA;&#xA;    ngOnInit() {&#xA;        if(goDownPathOne)&#xA;            this.router.navigate('path1');&#xA;        else&#xA;            this.router.navigate('path2');&#xA;  }&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then in my <code>app.routing</code> I have the following:</p>&#xA;&#xA;<pre><code>const COURSE_ROUTES: Routes = [&#xA;    // Home / Menu Screen&#xA;    { path: '', component: RedirectComponent },&#xA;    // Default Routes&#xA;    { path: 'screen', redirectTo: '/', pathMatch: 'full' },&#xA;    { path: 'text', redirectTo: '/', pathMatch: 'full' },&#xA;    { path: 'activity', redirectTo: '/', pathMatch: 'full' },&#xA;    { path: '**', redirectTo: '/', pathMatch: 'full' }&#xA;&#xA;];&#xA;&#xA;export const courseRouting: ModuleWithProviders = RouterModule.forRoot(COURSE_ROUTES);&#xA;</code></pre>&#xA;&#xA;<p>So on app load, it always goes to the <code>RedirectComponent</code> which then decides where we should go on the data provided - in my case I dragged it down from a database. I am not sure if this is the optimal approach, however if defiinitely works!</p>&#xA;",3509591,"",,"",,2017-01-31T00:10:34,"","",,0,,,
41961071,2,,41957587,2017-01-31T15:16:07,,1,,"<p>An alternative to writing this yourself is to use the <code>sw-toolbox</code> library, which provides routing and runtime caching strategies for service workers, along with some built in options for helping with these sorts of advanced use cases. In particular, you'd want to use the <a href=""https://github.com/GoogleChrome/sw-toolbox/blob/dd40e2a84171a0770c38b565a98a9a3ce9326223/docs/api.md#networktimeoutseconds-number"" rel=""nofollow noreferrer""><code>networkTimeoutSeconds</code> parameter</a> to configure the amount of time to wait for a response from the network before you fall back to a previously cached response.</p>&#xA;&#xA;<p>You can use it like the following:</p>&#xA;&#xA;<pre><code>toolbox.router.get(&#xA;  new RegExp('my-api\\.com'),&#xA;  toolbox.networkFirst, {&#xA;    networkTimeoutSeconds: 10&#xA;  }&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>That would configure a route that matched <code>GET</code> requests with URLs containing <code>my-api.com</code>, and applied a network-first strategy that will automatically fall back to the previously cached response after 10 seconds.</p>&#xA;",385997,"",,"",,2017-01-31T15:16:07,"","",,0,,,
41987363,2,,41985936,2017-02-01T18:47:39,,1,,"<p>My eyes got crossed from looking at too much Javascript code. I am using Visual Studio Code, and it has a insert comment feature (CTRL-/) or SHFT-ALT-A</p>&#xA;&#xA;<p>but it is inserting javascript style comments into my HTML file</p>&#xA;&#xA;<pre><code>// &lt;script src=""./node_modules/react/dist/react.js""&gt;&lt;/script&gt;&#xA;// &lt;script src=""./node_modules/react-dom/dist/react-dom.js""&gt;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>Which does nothing. Mystery solved. Thanks so much guys, you are great @num8er, etc.</p>&#xA;&#xA;<p>I am going to submit this as a bug to the vscode folks.</p>&#xA;",959460,"",,"",,2017-02-01T18:47:39,"","",,0,,,
41988245,2,,41897571,2017-02-01T19:39:10,,1,,"<p>Needed to make a few changes, but Aluan Haddad is basically correct. You cannot use the es2015 preset, you need the es2015-node5 preset. Or I tried both babel-preset-node6 and babel-preset-node7 and they worked for my Electron work.</p>&#xA;&#xA;<p><strong>Counter.jsx</strong> (output will be in ./jsx/Counter.js</p>&#xA;&#xA;<pre><code>const React = require('react');&#xA;const ReactDOM = require('react-dom')&#xA;&#xA;export class Welcome extends React.Component {&#xA;  render() {&#xA;    return &lt;h1&gt;Hello Again, {this.props.name}&lt;/h1&gt;;&#xA;  }&#xA;}&#xA;&#xA;export class CountWidget extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &lt;div&gt;&#xA;        &lt;h1&gt;{this.props.value}&lt;/h1&gt;&#xA;        &lt;button onClick={this.props.onIncrement}&gt;+&lt;/button&gt;&#xA;        &lt;button onClick={this.props.onDecrement}&gt;-&lt;/button&gt;&#xA;      &lt;/div&gt;);&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Window.js</strong> (which imports)</p>&#xA;&#xA;<pre><code>const {ipcRenderer, remote} = require('electron')&#xA;const {createStore} = require('redux')&#xA;const { composeWithDevTools } = require('redux-devtools-extension')&#xA;const {Welcome, CountWidget} = require('./jsx/Counter.js')&#xA;const React = require('react');&#xA;const ReactDOM = require('react-dom')&#xA;&#xA;&#xA;document.addEventListener(""DOMContentLoaded"", render)&#xA;//$.ready(creator);&#xA;&#xA;const reducer = (state = 0, action) =&gt; {&#xA;    switch (action.type) {&#xA;        case 'INCREMENT':&#xA;            return state + 1;&#xA;        case 'DECREMENT':&#xA;            return state - 1;&#xA;        default:&#xA;            return state;&#xA;    }&#xA;}&#xA;&#xA;const store = createStore(reducer, composeWithDevTools())&#xA;store.subscribe(render)&#xA;&#xA;function welcome() {&#xA;    return React.createElement(Welcome, { name: 'Sara' })&#xA;}&#xA;function widget() {&#xA;    var state = store.getState()&#xA;    return (&#xA;        React.createElement(CountWidget, {&#xA;            value: state,&#xA;            onIncrement: () =&gt; store.dispatch({&#xA;                type: 'INCREMENT'&#xA;            }),&#xA;            onDecrement: () =&gt; store.dispatch({&#xA;                type: 'DECREMENT'&#xA;            })&#xA;        }))&#xA;}&#xA;&#xA;function render() {&#xA;    version()&#xA;    ReactDOM.render(welcome(), document.getElementById('root'))&#xA;    ReactDOM.render(widget(), document.getElementById('reduxer'))&#xA;}&#xA;&#xA;function version() {&#xA;    let ver = remote.getGlobal('MAIN').nodeVersion;&#xA;    $('#status span').text(ver);&#xA;}&#xA;</code></pre>&#xA;",959460,"",959460,"",2017-02-01T19:58:08,2017-02-01T19:58:08,"","",,0,,,
42035343,2,,42033679,2017-02-04T00:58:01,,1,,"<p>You're returning a value before the asynchronous <code>dtb.all()</code> finishes. You need to pass a callback to <code>bookContent</code> and call it when the database query finishes.</p>&#xA;&#xA;<pre><code>var globalBkContent = """";  &#xA;function bookContent(dtb, callback) {&#xA;    dtb.all(""SELECT count(*) ttlRw FROM books;"", function(err, row) {&#xA;&#xA;        if (err)&#xA;        return callback(""Error SQL"");&#xA;        else&#xA;        {           &#xA;&#xA;            if(parseInt(row[0].ttlRw)&gt;0)&#xA;            {&#xA;                return callback(false, row[0].ttlRw + "" rows"");&#xA;            }&#xA;            else&#xA;            return callback(""No rows found!"")           &#xA;        }&#xA;&#xA;    });&#xA;}&#xA;&#xA;var dtb = new DatabaseInstance();//Or whatever your dtb variable is defined as.&#xA;bookContent(dtb, function(err, bkContent) {&#xA;    if(err) throw(err);&#xA;    globalBkContent = bkContent;&#xA;    console.log(bkContent); //Here your bkContent &amp; globalBkContent are both accessible and have the correct values. &#xA;    //Make sure you don't do anything with globalBkContent until it is set by this function.&#xA;})&#xA;&#xA;//If I access globalBkContent outside the callback above then it will still be an empty string.&#xA;</code></pre>&#xA;",5004659,"",5004659,"",2017-02-04T17:38:59,2017-02-04T17:38:59,"","",,10,,,
42047800,2,,42047173,2017-02-05T01:58:21,,1,,"<p>I use that convention for passing values to an <code>iFrame</code> loading within <code>Electron</code> – I don't know if it will work in your case, The script below is called when the page has loaded. It gets params which were passed to the <code>src</code> of the <code>iFrame</code>:</p>&#xA;&#xA;<pre><code>video.html?videoSrc=clark-8.mp4&amp;poster=clark-8.png &#xA;</code></pre>&#xA;&#xA;<p>I don't know what you are trying to do or what data you are trying to pass between webcontent – but it seems like there are a variety of ways to go about it. </p>&#xA;&#xA;<ol>&#xA;<li>Pass the data back to the main process and have the new webcontent request it - or push it to the new webcontent once it has loaded.</li>&#xA;<li>Use <a href=""https://www.npmjs.com/package/electron-cookies"" rel=""nofollow noreferrer"">cookies and local storage</a></li>&#xA;</ol>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    function getParamValue(paramName) {&#xA;        var url = window.location.search.substring(1);&#xA;        var qArray = url.split('&amp;');&#xA;        for (var i = 0; i &lt; qArray.length; i++) {&#xA;            var pArr = qArray[i].split('=');&#xA;            if (pArr[0] == paramName)&#xA;                return pArr[1];&#xA;        }&#xA;    }&#xA;&#xA;    // grap the video &amp; poster frame refs from url&#xA;    var videoSrc = getParamValue('videoSrc');&#xA;    videoSrc = ""assets/videos/"" + videoSrc;&#xA;&#xA;    var poster = getParamValue('poster');&#xA;    poster = ""assets/images/"" + poster;&#xA;&#xA;    videojs(""videoPlayer"", {}, function () {&#xA;        this.src(videoSrc);&#xA;        this.poster(poster);&#xA;        this.load();&#xA;    });&#xA;&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;",840992,"",,"",,2017-02-05T01:58:21,"","",,1,,,
42086301,2,,42085766,2017-02-07T09:36:21,,1,,"<p>I would rather do the save process server-side (send an IPC command and execute the save from the main.js file of electron).</p>&#xA;&#xA;<p>Anyway, to address your issue, I don't know whether there is an official ""Save As"" button, but you may implement something pretty similar to it:</p>&#xA;&#xA;<h1>Solution 1 -- Using the Web API:</h1>&#xA;&#xA;<p>There is a sort of ""save as"" (well, technically it just asks you for a directory, but you can really edit the button values.. so the only thing you will miss is the filename here) built-in with webkit, you can basically do something like this:</p>&#xA;&#xA;<pre><code>&lt;input id=""savePath"" type=""file"" webkitdirectory /&gt;&#xA;</code></pre>&#xA;&#xA;<p>Next, add an event listener to the button:</p>&#xA;&#xA;<pre><code>let fpHandler = document.getElementByID(""savePath"");&#xA;fpHandler.addEventListener(""change"", (event) =&gt; {&#xA;   const path = event.target.files[0].path;&#xA;   // save file happens here.&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>where path contains the selected path without any slash or backslash at the end of the string (so you will need to add that manually, like: <code>const filepath = path + ""\\"" + filename_and_format;</code></p>&#xA;&#xA;<h1>Solution 2 -- Using the electron API.</h1>&#xA;&#xA;<p>I didn't try this one, but I'm sure it works.</p>&#xA;&#xA;<p>Basically, the trick is using <strong>electron remote</strong>: <a href=""http://electron.atom.io/docs/api/remote/"" rel=""nofollow noreferrer"">http://electron.atom.io/docs/api/remote/</a> which can be used in the renderer process.</p>&#xA;&#xA;<p>the <strong>remote</strong> module exposes the <strong>dialog</strong> gui related module: <a href=""http://electron.atom.io/docs/api/dialog/"" rel=""nofollow noreferrer"">http://electron.atom.io/docs/api/dialog/</a></p>&#xA;&#xA;<p>So you can really do this by using the showSaveDialog: <a href=""http://electron.atom.io/docs/api/dialog/#dialogshowsavedialogbrowserwindow-options-callback"" rel=""nofollow noreferrer"">http://electron.atom.io/docs/api/dialog/#dialogshowsavedialogbrowserwindow-options-callback</a></p>&#xA;&#xA;<pre><code>const { remote } = require(""electron"");&#xA;remote.dialog.showSaveDialog(remote.getCurrentWindow(), (filename) =&gt; {&#xA;   console.log(""filename is: "" + filename);&#xA;   // here the save should happen.&#xA;});&#xA;</code></pre>&#xA;",2275797,"",,"",,2017-02-07T09:36:21,"","",,2,,,
42091701,2,,42082662,2017-02-07T13:57:05,,1,,"<p>nedb relays on <strong>crypto</strong> module which is currently not supported by NativeScript. So basically at this very moment, you can not use <strong>nedb</strong> with a NativeScript application. More information <a href=""https://github.com/NativeScript/NativeScript/issues/195"" rel=""nofollow noreferrer"">here</a></p>&#xA;",4936697,"",,"",,2017-02-07T13:57:05,"","",,0,,,
42144844,2,,42139386,2017-02-09T19:02:28,,1,,"<pre><code>// Open a new window.&#xA;nw.Window.open(""https://localhost:8080/"", {&#xA;    ""icon"": ""app_icon.png"",&#xA;    ""frame"": true,&#xA;    ""width"": 1200,&#xA;    ""height"": 800,&#xA;    ""position"": ""center"",&#xA;    ""resizable"": true,&#xA;    ""min_width"": 400,&#xA;    ""min_height"": 200&#xA; }, function(win) {&#xA;       console.log('window opened'. win);&#xA;       win.on('loaded', function() {&#xA;            console.log('window created');&#xA;       }&#xA;});&#xA;</code></pre>&#xA;",1237812,"",,"",,2017-02-09T19:02:28,"","",,1,,,
42019125,2,,42018992,2017-02-03T07:40:36,,2,,"<p>I think you need to wrap your code into a callback.</p>&#xA;&#xA;<p>(untested code)</p>&#xA;&#xA;<pre><code>//Returns a specific Person&#xA;exports.getPerson = function(id,callback){&#xA;&#xA;   //Get the selected person details from the database&#xA;   db.findOne({ _id: id }, function(err, doc){&#xA;&#xA;    console.log(doc);&#xA;&#xA;    //Execute the parameter function&#xA;    callback(err,doc)&#xA;&#xA;   });&#xA;}&#xA;&#xA;&#xA;&#xA;&#xA;var person = database.getPerson(id,function(err,person){&#xA;&#xA; console.log(id);&#xA; console.log(person);&#xA;&#xA; document.getElementById('firstname').value = person.firstname;&#xA; document.getElementById('lastname').value = person.lastname;&#xA;});&#xA;</code></pre>&#xA;",1165734,"",,"",,2017-02-03T07:40:36,"","",,1,,,
42067807,2,,42062250,2017-02-06T12:27:20,,2,,"<p>You are not ready to develop desktop app with ember and electron, if you have no experience with Ember.js or at least theoretical knowledge of Ember.js. You should start from reading <a href=""https://guides.emberjs.com/v2.11.0/"" rel=""nofollow noreferrer"">ember guides</a> to understand how to create SPA using this framework. </p>&#xA;&#xA;<p>After that you will be able to use <a href=""https://github.com/felixrieseberg/ember-electron"" rel=""nofollow noreferrer"">ember-electron</a> to create desktop apps. </p>&#xA;&#xA;<p>About authentication: if you have a server, it should decide when to give a data, not client. On client side you can use <a href=""https://github.com/simplabs/ember-simple-auth"" rel=""nofollow noreferrer"">ember-simple-auth</a> to store tokens and authorize requests, and on server side you setup auth server (depending on used on backend technology, ready to use 3rd-party libraries may exist).</p>&#xA;",2948109,"",,"",,2017-02-06T12:27:20,"","",,7,,,
42131402,2,,42036126,2017-02-09T08:19:50,,2,,"<pre><code>win.getSize()&#xA;</code></pre>&#xA;&#xA;<p>Returns an array with <code>[width, height]</code>. You are assigning the <code>win_width</code> variable to the height of the window and <code>win_height</code> to the width of the window. If you change these values, this may resolve your issue.</p>&#xA;&#xA;<pre><code> const win_height = win_size[1];&#xA; const win_width = win_size[0];&#xA;</code></pre>&#xA;",6204840,"",,"",,2017-02-09T08:19:50,"","",,2,,,
42146412,2,,42146263,2017-02-09T20:39:01,,2,,"<p>Electron is fully supported with node, which includes require as it's dependency manager.&#xA;You can use the <code>require</code> statement to include modules.<br>&#xA;In a js file..</p>&#xA;&#xA;<pre><code>var videojs = require('videojs')&#xA;</code></pre>&#xA;&#xA;<p>or in an HTML file</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;    require('videojs')&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>The <a href=""http://electron.atom.io/docs/faq/#i-can-not-use-jqueryrequirejsmeteorangularjs-in-electron"" rel=""nofollow noreferrer"">Electron FAQ</a> might answer some other questions.</p>&#xA;",7246684,"",,"",,2017-02-09T20:39:01,"","",,0,,,
41975013,2,,41974964,2017-02-01T08:26:30,,3,,"<blockquote>&#xA;  <p>Am I missing something really obvious?</p>&#xA;</blockquote>&#xA;&#xA;<p>Presumably a <em>new</em> array is assigned to <code>this.props.arr</code>. Simple repro:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const obj = { arr: [1, 2, 3] };&#xD;&#xA;const { arr } = obj;&#xD;&#xA;obj.arr = [1];&#xD;&#xA;&#xD;&#xA;console.log(obj.arr); // =&gt; [1]&#xD;&#xA;console.log(arr); // =&gt; [1, 2, 3]</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Destructuring is nothing magical. These two are equivalent:</p>&#xA;&#xA;<pre><code>const { arr } = this.props;&#xA;const arr = this.props.arr;&#xA;</code></pre>&#xA;&#xA;<p><code>arr</code> holds the value that <code>this.props.arr</code> had at the time of the <em>assignment</em>, whereas <code>this.props.arr</code> gives you the value at the time you <em>access</em> it.</p>&#xA;",218196,"",218196,"",2017-02-01T14:04:37,2017-02-01T14:04:37,"","",,1,,,
41980394,2,,41978539,2017-02-01T12:56:52,,3,,<p>You can try to parse the value of <code>new Error().stack</code>. It is a string which is the stack trace of the scope where the <code>Error</code> object was created.</p>&#xA;&#xA;<p>The output is browser dependent since it is a non-standard feature. Since you only need it to work on nw.js it could be an option for you.</p>&#xA;&#xA;<p>On node.js (and I suspect chrome) the output is a newline separated string where each line is of the format:</p>&#xA;&#xA;<pre><code>at functionName (/absolute/file/path:lineNumber:charNumber)&#xA;</code></pre>&#xA;&#xA;<p>So the in your case the information you want is probably:</p>&#xA;&#xA;<pre><code>new Error().stack.split('\n')[1];&#xA;</code></pre>&#xA;,167735,"",,"",,2017-02-01T12:56:52,"","",,0,,,
41987166,2,,41987045,2017-02-01T18:36:48,,3,,"<p>First off, since you're clearly using ES2015+ (aka ""ES6+""), look at using <code>let</code> or <code>const</code> rather than <code>var</code>. There's basically no use for <code>var</code> in an ES2015+ world. (But both of the below will work with <code>var</code> as well.)</p>&#xA;&#xA;<p>The parsing problem is because <code>{</code> looks like the beginning of a block. You can wrap the entire assignment in <code>()</code> to get around that:</p>&#xA;&#xA;<pre><code>let app;&#xA;try {&#xA;    ({ app } = require('electron').remote);&#xA;} catch (e) {&#xA;    ({ app } = require('electron'));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Example (faking <code>require</code>):</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>// fake require&#xD;&#xA;function require(name) {&#xD;&#xA;  return {app: {name: ""I'm the app""}};&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let app;&#xD;&#xA;try {&#xD;&#xA;  ({ app } = require('electon').remote);&#xD;&#xA;} catch (e) {&#xD;&#xA;  ({ app } = require('electron'));&#xD;&#xA;}&#xD;&#xA;console.log(app);</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Or just don't use destructuring at all:</p>&#xA;&#xA;<pre><code>let app;&#xA;try {&#xA;    app = require('electron').remote.app;&#xA;} catch (e) {&#xA;    app = require('electron').app;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code snippet-currently-hidden"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>// fake require&#xD;&#xA;function require(name) {&#xD;&#xA;  return {app: {name: ""I'm the app""}};&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let app;&#xD;&#xA;try {&#xD;&#xA;  app = require('electron').remote.app;&#xD;&#xA;} catch (e) {&#xD;&#xA;  app = require('electron').app;&#xD;&#xA;}&#xD;&#xA;console.log(app);</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",157247,"",157247,"",2017-02-01T18:42:35,2017-02-01T18:42:35,"","",,4,,,
42028199,2,,39020525,2017-02-03T15:58:55,,3,,"<p><strong>Packaging an Express Application in Electron</strong></p>&#xA;&#xA;<p>Firstly install electron in your app</p>&#xA;&#xA;<pre><code>npm install --save electron&#xA;</code></pre>&#xA;&#xA;<p><strong>Create an index.html file which contains your express application</strong></p>&#xA;&#xA;<p>We need a top level file which will load in our express application. If you are not using a module bundler like Webpack then simply import all the html, cs and js files that your app is dependent on into this index.html file.</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;meta charset=""UTF-8""&gt;&#xA;    &lt;title&gt;QuickMap&lt;/title&gt;&#xA;    &lt;link href='public/css/boostrap.min.css' rel='stylesheet'&gt;&#xA;    &lt;link href='public/css/layout.css' rel='stylesheet'&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;div id='root' /&gt;&#xA;    &lt;script src='public/js/appBundle.js' type='text/javascript'&gt;&lt;/script&gt;&#xA;    &lt;script src='public/js/bootstrap.min.js' type='text/javascript'&gt;&lt;/script&gt;&#xA;    &lt;script src='public/js/jquery-3.1.1.min.js' type='text/javascript'&gt;&lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Make sure that this index.html files  imports everything you need for your app to run -i.e all the necessary html, css, js and other files. Remember to include any external files that your app needs such as jQuery which we loaded in the example above.</p>&#xA;&#xA;<p><strong>An Aside - Packaging an Electron app that uses Webpack</strong></p>&#xA;&#xA;<p>In this example our entire Express app is represented by a Webpack bundle which is loaded by index.html. </p>&#xA;&#xA;<p><em>Remember that you don't need to use Webpack to package Express apps with Electron. Just make sure that index.html loads in all the files you need that will launch your express application.</em></p>&#xA;&#xA;<p>If you are using Webpack your bundle should be imported in this index.html file.</p>&#xA;&#xA;<p>Here is an example index.html file that imports the webpack bundle which contains our express app.</p>&#xA;&#xA;<p><strong>Now create the electron config file in your project root that loads the index.html containing your Express app</strong></p>&#xA;&#xA;<p>Here is the main file that electron will use to launch itself. Al electron related configuration and the link to our express app (through importing the Webpack bundle) is contained here.</p>&#xA;&#xA;<p>Note the file below belongs in our root project directory and is comprised mainly of boilerplate from the Electron quick start guide with the exception of the line explained above that imports our index.html file which loads the entire application.</p>&#xA;&#xA;<p><em>main.js</em></p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron')&#xA;const path = require('path')&#xA;const url = require('url')&#xA;&#xA;// Keep a global reference of the window object, if you don't, the window will&#xA;// be closed automatically when the JavaScript object is garbage collected.&#xA;let win&#xA;&#xA;function createWindow () {&#xA;  // Create the browser window.&#xA;  win = new BrowserWindow({width: 800, height: 600})&#xA;&#xA;  // and load the index.html of the app.&#xA;  win.loadURL(url.format({&#xA;    pathname: path.join(__dirname, 'index.html'),&#xA;    protocol: 'file:',&#xA;    slashes: true&#xA;  }))&#xA;&#xA;  // Open the DevTools.&#xA;  win.webContents.openDevTools()&#xA;&#xA;  // Emitted when the window is closed.&#xA;  win.on('closed', () =&gt; {&#xA;    // Dereference the window object, usually you would store windows&#xA;    // in an array if your app supports multi windows, this is the time&#xA;    // when you should delete the corresponding element.&#xA;    win = null&#xA;  })&#xA;}&#xA;&#xA;// This method will be called when Electron has finished&#xA;// initialization and is ready to create browser windows.&#xA;// Some APIs can only be used after this event occurs.&#xA;app.on('ready', createWindow)&#xA;&#xA;// Quit when all windows are closed.&#xA;app.on('window-all-closed', () =&gt; {&#xA;  // On macOS it is common for applications and their menu bar&#xA;  // to stay active until the user quits explicitly with Cmd + Q&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;&#xA;app.on('activate', () =&gt; {&#xA;  // On macOS it's common to re-create a window in the app when the&#xA;  // dock icon is clicked and there are no other windows open.&#xA;  if (win === null) {&#xA;    createWindow()&#xA;  }&#xA;})&#xA;&#xA;// In this file you can include the rest of your app's specific main process&#xA;// code. You can also put them in separate files and require them here.&#xA;</code></pre>&#xA;&#xA;<p>The following line loads our index.html we created earlier which points our electron instance to the entry point of our application.</p>&#xA;&#xA;<pre><code>mainWindow.loadURL(`file://${__dirname}/index.html`)&#xA;</code></pre>&#xA;&#xA;<p><strong>Change the start script in your package.json to launch electron</strong></p>&#xA;&#xA;<pre><code> ""scripts"": {&#xA;    ""start"": ""ENV=development electron ."",&#xA;   },&#xA;</code></pre>&#xA;&#xA;<p>Now when we run </p>&#xA;&#xA;<pre><code>npm start&#xA;</code></pre>&#xA;&#xA;<p>Electron will automatically look for and run the main.js file in  our project root.</p>&#xA;",3946931,"",,"",,2017-02-03T15:58:55,"","",,0,,,
42031622,2,,42031141,2017-02-03T19:25:21,,4,,"<p>You use a webpack config just like you would with a normal web app.</p>&#xA;&#xA;<p>The settings depend on wether you are using react-hot-loader 2 or 3 (beta)</p>&#xA;&#xA;<p>You then set the src attribute in your index.html file to wherever your webpack dev server is serving the bundle from.&#xA;Usually: localhost:8080/bundlename.js</p>&#xA;&#xA;<p>Here is the walkthrough for react-hot-loader 2:&#xA;<a href=""http://gaearon.github.io/react-hot-loader/getstarted/"" rel=""nofollow noreferrer"">http://gaearon.github.io/react-hot-loader/getstarted/</a></p>&#xA;",5183133,"",5183133,"",2017-02-04T05:20:30,2017-02-04T05:20:30,"","",,1,,,
42061699,2,,41937111,2017-02-06T06:38:01,,4,,"<p>I replace the code for mainWindow close to as below and works fine</p>&#xA;&#xA;<pre><code>    mainWindow.on('close', function(e) { &#xA;        e.preventDefault();&#xA;        mainWindow.destroy();&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#windestroy"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/browser-window.md#windestroy</a></p>&#xA;",629830,"",,"",,2017-02-06T06:38:01,"","",,1,,,
42090914,2,,42090023,2017-02-07T13:19:08,,5,,"<p>First of all electron is not responsible for the visual appearance of your application. It is a framework which wraps your webapp into a desktop application. </p>&#xA;&#xA;<p>That means you need to use standard web technologies (html/js/css) to create your site including 'eye-candy' and animations. </p>&#xA;&#xA;<p>My suggestion is to do a tutorial which explains how to connect electron with a javascript framework like angular. If this is running you can attach a database and all the hot shizzle afterwards.&#xA;This tutorial is very good and well explained:</p>&#xA;&#xA;<p><a href=""https://scotch.io/tutorials/creating-desktop-applications-with-angularjs-and-github-electron"" rel=""noreferrer"">https://scotch.io/tutorials/creating-desktop-applications-with-angularjs-and-github-electron</a></p>&#xA;&#xA;<p>enjoy!</p>&#xA;",970470,"",,"",,2017-02-07T13:19:08,"","",,0,,,
41969144,2,,41965355,2017-01-31T23:06:00,,6,,"<h2>VSCode configuration</h2>&#xA;&#xA;<p>The important thing is to give VSCode the <strong>source file</strong> which is the entry point of the program, and specify it in <code>""program""</code> key.</p>&#xA;&#xA;<p>You also need to specify in <code>""outFiles""</code> the bundle generated by Webpack.</p>&#xA;&#xA;<pre><code>{&#xA;  ""configurations"": [&#xA;    {&#xA;      ""name"": ""Debug Main Process"",&#xA;      ""type"": ""node"",&#xA;      ""request"": ""launch"",&#xA;      ""cwd"": ""${workspaceRoot}"",&#xA;      ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/electron"",&#xA;&#xA;      // This is the important stuff&#xA;      ""program"": ""${workspaceRoot}/src/main/index.ts""&#xA;      ""outFiles"": [&#xA;        ""${workspaceRoot}/app/main.js""&#xA;      ],&#xA;      ""sourceMaps"": true&#xA;    }&#xA;  ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<h2>Webpack configuration</h2>&#xA;&#xA;<p>In your Webpack config you need to specify that you want to write the full paths of the modules source files in your sourcemaps.</p>&#xA;&#xA;<pre><code>{&#xA;  output: {&#xA;    devtoolModuleFilenameTemplate: '[absolute-resource-path]'&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Also be careful to choose a sourcemap that is not evaluated, to permit VSCode to find the corresponding entry-point statically.</p>&#xA;&#xA;<h2>Minimal example</h2>&#xA;&#xA;<p>I created <a href=""https://github.com/kube/vscode-ts-webpack-node-debug-example"" rel=""noreferrer"">a repo</a> with the minimal configuration and more explanations.</p>&#xA;",1914206,"",1914206,"",2017-01-31T23:19:04,2017-01-31T23:19:04,"","",,1,,,
42032085,2,,41667659,2017-02-03T19:56:50,,6,,"<p>Well, I fixed the issue by doing this :</p>&#xA;&#xA;<pre><code>window = new BrowserWindow({ ...  type:'toolbar' ... });`&#xA;</code></pre>&#xA;&#xA;<p>This makes the window act exactly as the Skype Window when you're on call : It's always on top, even when you're in fullscreen browser and the taskbar won't show unless you focus explicitly your window. </p>&#xA;&#xA;<p>Remark : Your window won't be on top of programs such as video games (League of Legends, Dota, aso.) because they usually manipulate the graphical rendering so that you can't go on top of em.</p>&#xA;&#xA;<p>Hope this will help !</p>&#xA;",7423067,"",,"",,2017-02-03T19:56:50,"","",,1,,,
41998326,2,,41664208,2017-02-02T09:19:20,,10,,"<p>You should be using a template image (only black and clear colors): <a href=""https://github.com/electron/electron/blob/master/docs/api/native-image.md#template-image"" rel=""noreferrer"">https://github.com/electron/electron/blob/master/docs/api/native-image.md#template-image</a></p>&#xA;&#xA;<p>That way macOS automatically adjusts your tray icon to be black when on normal theme, and white when on dark theme.</p>&#xA;&#xA;<p>Ensure the filename ends in <code>Template.png</code> or it won't work! Also include a <code>@2x.png</code> version if you target hi-dpi devices.</p>&#xA;&#xA;<p>So your folder would look like:</p>&#xA;&#xA;<pre><code>.&#xA;├── main.js&#xA;├── IconTemplate.png&#xA;└── IconTemplate@2x.png&#xA;</code></pre>&#xA;&#xA;<p>Then in your <code>main.js</code>:</p>&#xA;&#xA;<pre><code>const {Tray} = require('electron')&#xA;appIcon = new Tray('./IconTemplate.png')&#xA;</code></pre>&#xA;",83998,"",,"",,2017-02-02T09:19:20,"","",,3,,,
42046925,2,,42044898,2017-02-04T23:38:11,,14,,"<p>If it is all in the main.js just create a function to create a new window and then call that on menu item click.</p>&#xA;&#xA;<pre><code>const { Menu } = require('electron')&#xA;const ipc = require('electron').ipcRenderer&#xA;&#xA;const nativeMenus = [&#xA;  {&#xA;    label: 'About',&#xA;    submenu: [&#xA;      {&#xA;        label: 'About',&#xA;        click() {&#xA;          openAboutWindow()&#xA;        }&#xA;      }&#xA;    ]&#xA;  }&#xA;]&#xA;&#xA;const menu = Menu.buildFromTemplate(nativeMenus)&#xA;Menu.setApplicationMenu(menu)&#xA;&#xA;var newWindow = null&#xA;&#xA;function openAboutWindow() {&#xA;  if (newWindow) {&#xA;    newWindow.focus()&#xA;    return&#xA;  }&#xA;&#xA;  newWindow = new BrowserWindow({&#xA;    height: 185,&#xA;    resizable: false,&#xA;    width: 270,&#xA;    title: '',&#xA;    minimizable: false,&#xA;    fullscreenable: false&#xA;  })&#xA;&#xA;  newWindow.loadURL('file://' + __dirname + '/views/about.html')&#xA;&#xA;  newWindow.on('closed', function() {&#xA;    newWindow = null&#xA;  })&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Let me know if this works for you.</p>&#xA;",,user7252292,5531595,user7252292,2018-08-05T13:34:22,2018-08-05T13:34:22,"","",,3,,,
45210900,2,,44968299,2017-07-20T09:36:22,,0,,"<p>I managed to do this creating a <a href=""https://github.com/electron-userland/electron-builder/wiki/NSIS#custom-nsis-script"" rel=""nofollow noreferrer"">custom NSIS script</a> called build/installer.nsh calling <a href=""http://nsis.sourceforge.net/Reference/CreateShortCut"" rel=""nofollow noreferrer"">CreateShortCut</a> like this:</p>&#xA;&#xA;<pre><code>!macro customInstall&#xA;  CreateShortCut ""$SMPROGRAMS\App 2.lnk"" ""$INSTDIR\app.exe"" ""--mode=2""&#xA;  CreateShortCut ""$SMPROGRAMS\App 3.lnk"" ""$INSTDIR\app.exe"" ""--mode=3""&#xA;!macroend&#xA;</code></pre>&#xA;",6068,"",,"",,2017-07-20T09:36:22,"","",,0,,,
45222210,2,,42243313,2017-07-20T18:09:14,,0,,"<p>This is now working fine. I'm currently using macOS 10.12.5 and MS Teams 1.0.00.17151, and the issue is fixed.</p>&#xA;&#xA;<p>When I log in in Teams, a popup dialog appears, showing my certificates, allowing me to select the one I want to use.</p>&#xA;&#xA;<p>Whether this was fixed in a macOS update, or in a Teams update is not clear to me - but the good news is that this is working now.</p>&#xA;&#xA;<p>Sidenote: I had reported this issue on the <a href=""https://aka.ms/microsoftteamsplatformsuggestions"" rel=""nofollow noreferrer"">Teams UserVoice site</a> as a bug report, but it was deleted by an administrator, possibly when the bug had been fixed. I did not receive a notification from UserVoice about the deletion, I only noticed it when actively searching for my post.</p>&#xA;",1228454,"",,"",,2017-07-20T18:09:14,"","",,0,,,
45252853,2,,44186210,2017-07-22T09:21:52,,0,,<p>As soon as @MarshallOfSound released the new version it works fine</p>&#xA;,4330184,"",,"",,2017-07-22T09:21:52,"","",,0,,,
45254051,2,,45227849,2017-07-22T11:33:02,,0,,"<p>you can try the below code:</p>&#xA;&#xA;<pre><code>var Files = require(""../Read/Files"");&#xA;</code></pre>&#xA;&#xA;<p>instead of </p>&#xA;&#xA;<pre><code>import Files from '../Read/Files.js'&#xA;</code></pre>&#xA;&#xA;<p>If you want to use es6 or typescript, then it should have braces (i think) (<strong>i don't know but I read it somewhere</strong>), so your code should be:</p>&#xA;&#xA;<pre><code>import {Files} from '../Read/Files';&#xA;</code></pre>&#xA;&#xA;<p>Also keep in mind that you don't need to have extension of the file in require statement. So, your code may look like this:</p>&#xA;&#xA;<p>import Files from '../Read/Files'</p>&#xA;",2284240,"",2284240,"",2017-07-23T06:46:14,2017-07-23T06:46:14,"","",,3,,,
45255812,2,,45252779,2017-07-22T14:46:33,,0,,<p>the immediate problem is that xorriso cannot create the result file</p>&#xA;&#xA;<pre><code>/home/developer/jenkins/dist/@southbanksoftware/dbkoda-0.6.0-x86_64.AppImage&#xA;</code></pre>&#xA;&#xA;<p>because the directory</p>&#xA;&#xA;<pre><code>/home/developer/jenkins/dist/@southbanksoftware&#xA;</code></pre>&#xA;&#xA;<p>does not exist.</p>&#xA;&#xA;<p>Why the directory was not prepared and whether its name is the&#xA;appropriate one is out of my knowledge. I would assume that this in&#xA;the responsibility of electron-builder.    </p>&#xA;&#xA;<p>Have a nice day :)</p>&#xA;&#xA;<p>Thomas</p>&#xA;,3098690,"",,"",,2017-07-22T14:46:33,"","",,0,,,
45274558,2,,45167026,2017-07-24T07:28:53,,0,,"<p>As it turns out, Etcher doesn't currently support cross-compiling (found this important bit of information in a commented out section in the Makefile). I'm guessing some of the environment variables were being manipulated by Etcher.</p>&#xA;&#xA;<p>After a lot of trial and error, I've successfully built the fork under windows 10.</p>&#xA;",5660689,"",,"",,2017-07-24T07:28:53,"","",,0,,,
45275192,2,,45268762,2017-07-24T08:02:36,,0,,"<p>You can either call <a href=""https://electron.atom.io/docs/api/browser-window/#winsetvisibleonallworkspacesvisible"" rel=""nofollow noreferrer""><code>win.setVisibleOnAllWorkspaces(true);</code></a> or call <a href=""https://electron.atom.io/docs/api/app/#appdockhide-macos"" rel=""nofollow noreferrer""><code>app.dock.hide();</code></a></p>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/browser-window/#winsetvisibleonallworkspacesvisible"" rel=""nofollow noreferrer""><code>win.setVisibleOnAllWorkspaces(true);</code></a> Does what it says and makes the window visible on all workspaces.</p>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/app/#appdockhide-macos"" rel=""nofollow noreferrer""><code>app.dock.hide();</code></a> Hides the dock icon for your application but will allow all windows in your application to be visible on all workspaces.</p>&#xA;&#xA;<p>I think in your case you should go with <a href=""https://electron.atom.io/docs/api/browser-window/#winsetvisibleonallworkspacesvisible"" rel=""nofollow noreferrer""><code>win.setVisibleOnAllWorkspaces(true);</code></a></p>&#xA;&#xA;<p><code>win.setVisibleOnAllWorkspaces();</code> <a href=""https://electron.atom.io/docs/api/browser-window/#winsetvisibleonallworkspacesvisible"" rel=""nofollow noreferrer"">https://electron.atom.io/docs/api/browser-window/#winsetvisibleonallworkspacesvisible</a></p>&#xA;&#xA;<p><code>app.dock.hide();</code> <a href=""https://electron.atom.io/docs/api/app/#appdockhide-macos"" rel=""nofollow noreferrer"">https://electron.atom.io/docs/api/app/#appdockhide-macos</a></p>&#xA;",6577664,"",,"",,2017-07-24T08:02:36,"","",,0,,,
45275793,2,,45262815,2017-07-24T08:34:26,,0,,"<p>Found the error, it was a typo. The frame: false should obviously be in the initialization of the window.</p>&#xA;",7173917,"",,"",,2017-07-24T08:34:26,"","",,0,,,
45288134,2,,45285438,2017-07-24T19:01:31,,0,,"<p>For <code>dmg</code>, you can simply drop a license file in the build folder. Look <a href=""https://github.com/electron-userland/electron-builder/wiki/Options#user-content-Config-dmg"" rel=""nofollow noreferrer"">here</a> for more details.</p>&#xA;&#xA;<p>For <code>pkg</code>, unfortunately, it is not developed yet. <a href=""https://github.com/electron-userland/electron-builder/issues/1547"" rel=""nofollow noreferrer"">Here</a> is the related issue.</p>&#xA;",1102512,"",,"",,2017-07-24T19:01:31,"","",,0,,,
45302587,2,,45302454,2017-07-25T11:57:27,,0,,"<p>From a quick google search, I found a package called <code>systeminfo</code> and it has a function called <code>graphics</code>. It will return an array of graphics controllers and displays which you can filter by the two major vendors (ATI/AMD and nVidia).</p>&#xA;&#xA;<p>Package: <a href=""https://www.npmjs.com/package/systeminformation"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/systeminformation</a></p>&#xA;",3334862,"",,"",,2017-07-25T11:57:27,"","",,0,,,
45334831,2,,45178238,2017-07-26T18:28:55,,0,,<p>Figured out I just needed to add com.apple.security.files.downloads.read-write and com.apple.security.files.user-selected.read-only along with com.apple.security.files.user-selected.read-write in my entitlements. Read-only for the open dialog and read-write for the save dialog.</p>&#xA;,8327708,"",,"",,2017-07-26T18:28:55,"","",,0,,,
45336738,2,,45333734,2017-07-26T20:24:44,,0,,<p>Well it appears to be a PeerJS error after all. It appears that if you want to send packets larger than 16K PeerJS will chunk them for you. The memory problem lies with the chunking. PeerJS chunks at 16K while electron (actually chrome) can send 64K at a time. This is to keep cross-browser compatibility but since I am using strictly electron I changed the PeerJS code to not chunk my 32K packets. This resolved the issue. </p>&#xA;,6502807,"",,"",,2017-07-26T20:24:44,"","",,0,,,
45340308,2,,45340038,2017-07-27T02:24:33,,0,,"<p>This is more of a node.js question but basically <code>apis/google.js</code> needs to look like this</p>&#xA;&#xA;<pre><code>module.exports = (url) =&gt; {&#xA;    console.log(url);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And then <code>function.js</code> should look like this</p>&#xA;&#xA;<pre><code>$('#tab_url').submit(function (ev) {&#xA;  ev.preventDefault();&#xA;  var url = $(""#url"").val();&#xA;  console.log(url);&#xA;  if (url.indexOf('google.com') &lt; 0) {&#xA;    message('no google', 'error this is no google');&#xA;    return false;&#xA;  } else {&#xA;    require('./apis/google')(url);&#xA;  }&#xA;})&#xA;</code></pre>&#xA;",2499250,"",,"",,2017-07-27T02:24:33,"","",,0,,,
45183468,2,,45183334,2017-07-19T07:17:31,,1,,"<p>Here is how to change the paths in electron <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#appgetpathname"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/app.md#appgetpathname</a></p>&#xA;&#xA;<p>Then to do that in nightmarejs you need to add it as an option in initializing your nightmarejs here <a href=""https://github.com/segmentio/nightmare#paths"" rel=""nofollow noreferrer"">https://github.com/segmentio/nightmare#paths</a></p>&#xA;&#xA;<p>I guess this is the answer to it.</p>&#xA;",6059020,"",6059020,"",2017-07-20T01:25:45,2017-07-20T01:25:45,"","",,0,,,
45185243,2,,45166019,2017-07-19T08:39:33,,1,,"<p>You can directly call javascript in the renderer process from main process using <a href=""https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentsexecutejavascriptcode-usergesture-callback"" rel=""nofollow noreferrer""><code>executeJavaScript</code></a>. Combined with <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#event-show"" rel=""nofollow noreferrer""><code>'show'</code></a> event of <code>BrowserWindow</code> you can do the following:</p>&#xA;&#xA;&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>myWin.on('show', () =&gt; {&#xA;  myWin.webContents.executeJavaScript('validateFlights()')&#xA;})&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<p><em>main.js</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const { app, BrowserWindow } = require('electron')&#xA;const path = require('path')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  let win = new BrowserWindow({show: false})&#xA;  win.once('show', () =&gt; {&#xA;    win.webContents.executeJavaScript('validateFlights()')&#xA;  })&#xA;  win.loadURL(path.resolve(__dirname, 'index.html'))&#xA;  win.show()&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>index.html</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;script type=""text/javascript""&gt;&#xA;      function validateFlights() {&#xA;        console.log('validated')&#xA;      }&#xA;    &lt;/script&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2017-07-19T10:00:41,2017-07-19T10:00:41,"","",,4,,,
45186455,2,,45179884,2017-07-19T09:30:21,,1,,"<p><code>testGlobal</code> will be garbage collected, since the site changes. <code>global.mainState</code> will not be deleted, however it will also not change when you call <code>testGlobal.settings = 'test value'</code>, because <code>remote.getGlobal()</code> just gives you a copy of <code>mainState</code> and not a reference.</p>&#xA;&#xA;<p>I would suggest you use <a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-main.md#sending-messages"" rel=""nofollow noreferrer"">ipcMain</a> and <a href=""https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md"" rel=""nofollow noreferrer"">ipcRenderer</a> to sync the global variable yourself.</p>&#xA;",2016129,"",,"",,2017-07-19T09:30:21,"","",,2,,,
45200830,2,,44985210,2017-07-19T20:54:36,,1,,"<p><strong>UPDATE</strong></p>&#xA;&#xA;<p>Is solved it. Since all Node functions are already provided through the Webpack externals, one does <em>not have to require</em> them but <strong>use them via imports</strong> like this:</p>&#xA;&#xA;<pre><code>import * as fs from 'fs';&#xA;</code></pre>&#xA;&#xA;<p>You can read more on the solution <a href=""http://www.matthiassommer.it/programming/exceptions/webpack-require-not-defined-solution/"" rel=""nofollow noreferrer"">in my article</a>.</p>&#xA;",7921366,"",,"",,2017-07-19T20:54:36,"","",,0,,,
45227738,2,,45227678,2017-07-21T01:50:47,,1,,"<p><code>&lt;a href=""http://www.google.com"" &gt;google&lt;/a&gt;</code> and if it doesn't open on the same window try adding the attribute target=""_self""</p>&#xA;&#xA;<p><code>&lt;a href=""http://www.google.com"" target=""_self""&gt;google&lt;/a&gt;</code></p>&#xA;&#xA;<p>hope it helps !</p>&#xA;",4778342,"",,"",,2017-07-21T01:50:47,"","",,1,,,
45247797,2,,45200629,2017-07-21T22:48:51,,1,,"<p>The solution I found consists in having two different windows and playing with them, hiding the first one and show the second one when the latter is ready... So, imagine you want to show Google.com while waiting that localhost is ready </p>&#xA;&#xA;<pre><code>const {app, BrowserWindow} = require('electron')&#xA;&#xA;let win&#xA;let win2&#xA;function createWindow () {&#xA;  let win = new BrowserWindow({backgroundColor: '#2e2c29'})&#xA;  win = new BrowserWindow({width: 800, height: 600, show:false})&#xA;  win2 = new BrowserWindow({width: 800, height: 600})&#xA;&#xA;  win.loadURL('http://localhost:3000')&#xA;  win2.loadURL('http://www.google.com')&#xA;&#xA;  win.once('ready-to-show', () =&gt; {      &#xA;  win.show()&#xA;  win2.hide()&#xA;  win2.close()&#xA;})    &#xA;&#xA;  win.on('closed', () =&gt; {&#xA;&#xA;    win = null&#xA;  })&#xA;}&#xA;&#xA;app.on('ready', createWindow)&#xA;&#xA;app.on('window-all-closed', () =&gt; {&#xA;&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;app.on('activate', () =&gt; {&#xA;&#xA;  if (win === null) {&#xA;    createWindow()&#xA;  }&#xA;})&#xA;</code></pre>&#xA;",7692452,"",,"",,2017-07-21T22:48:51,"","",,0,,,
45252405,2,,45252390,2017-07-22T08:28:50,,1,,"<p>You need to access the <code>range</code> property inbetween (dot notation):</p>&#xA;&#xA;<pre><code>this.grindstone[typeNumber].range[Number(craft_id.toString().slice(-1))].min&#xA;//                         ^^^^^^&#xA;</code></pre>&#xA;&#xA;<p>or (bracket notation)</p>&#xA;&#xA;<pre><code>this.grindstone[typeNumber]['range'][Number(craft_id.toString().slice(-1))].min&#xA;//                         ^^^^^^^^^&#xA;</code></pre>&#xA;&#xA;<p>read more here about <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors"" rel=""nofollow noreferrer"">property accessors</a> or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer"" rel=""nofollow noreferrer"">object initializer</a>.</p>&#xA;",1447675,"",1447675,"",2017-07-22T08:44:31,2017-07-22T08:44:31,"","",,5,,,
45269374,2,,45178195,2017-07-23T19:59:50,,1,,"<p>As it turns out, the index.html was missing a <code>&lt;base href=""./""&gt;</code> - added this and the URLs resolved correctly</p>&#xA;",2578291,"",2578291,"",2017-09-11T17:33:29,2017-09-11T17:33:29,"","",,2,,,
45282130,2,,45094796,2017-07-24T13:36:55,,1,,"<p>No, the chrome lib is hooked with node.js in nwjs so its basically not a standard Chromium runtime.</p>&#xA;",5653484,"",,"",,2017-07-24T13:36:55,"","",,0,,,
45282275,2,,45270306,2017-07-24T13:44:03,,1,,"<p>When storing user data you shouldn't store it locally at all you should make an authentication key and store it in your database with your user, you then need to store this on the client side too. Normally people store this in memory therefore once the user exists the system they ""sign out"" if you don't want them to you could save it to some sort of settings file using something like <a href=""https://www.npmjs.com/package/electron-settings"" rel=""nofollow noreferrer"">electron-settings</a> or a <a href=""https://electron.atom.io/docs/api/cookies/"" rel=""nofollow noreferrer"">cookie</a> using the electron API. Once you have this key you should use that to authenticate calls to your API and when doing so you should check that the key is valid for the user who is performing the action.</p>&#xA;&#xA;<p>Example:&#xA;When UserA sends a message to UserB you should check that UserA's auth key equals the key which represents UserA in your database.</p>&#xA;&#xA;<p>Using this method will make it hard for other users to ""guess"" other users keys and also keep user data safe from user interaction.</p>&#xA;&#xA;<p><strong>NOTE: Change the users auth key every time they login to prevent someone from stealing it!</strong></p>&#xA;",7325243,"",,"",,2017-07-24T13:44:03,"","",,0,,,
45298765,2,,45259372,2017-07-25T09:09:59,,1,,"<p>Your call order is not right when sending input back to <code>renderer.js</code>. You call</p>&#xA;&#xA;&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>win.webContents.send('input-received', data)&#xA;</code></pre>&#xA;&#xA;<p>when <code>index.html</code> is not yet re-loaded into <code>win</code>!</p>&#xA;&#xA;<p>To fix this you should swap the calls and make sure that the content is ready when you send ipc message</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>ipcMain.on('input-broadcast', (evt, data) =&gt; {&#xA;    console.log('input-broadcast happened in main')&#xA;    win.loadURL(url.format({&#xA;        pathname: path.join(__dirname, 'index.html'),&#xA;        protocol: 'file:',&#xA;        slashes: true&#xA;    }))&#xA;    win.webContents.once('dom-ready', () =&gt; {&#xA;        win.webContents.send('input-received', data)&#xA;    })&#xA;})&#xA;</code></pre>&#xA;",2550156,"",,"",,2017-07-25T09:09:59,"","",,0,,,
45372221,2,,45326024,2017-07-28T11:22:01,,1,,"<h2>How I soved this</h2>&#xA;&#xA;<p>I realised that is child process don't work at asar packages, so I changed the child process to a background window where I can run the functions without freeze the UI  (that was the reason why I was trying to use child process), in the end it worked as a child process.</p>&#xA;&#xA;<h3>Code</h3>&#xA;&#xA;<p><strong>Main.js</strong></p>&#xA;&#xA;<pre><code>  win.loadURL(url.format({&#xA;    pathname: path.join(__dirname, 'app/index.html'),&#xA;    protocol: 'file:',&#xA;    slashes: true&#xA;  }));&#xA;&#xA;  backgroundWin = new BrowserWindow({show: false});&#xA;&#xA;  backgroundWin.loadURL(url.format({&#xA;    pathname: path.join(__dirname, 'app/process.html'),&#xA;    protocol: 'file:',&#xA;    slashes: true&#xA;  }));&#xA;&#xA;  ipcMain.on('toUi', (e, m) =&gt; {&#xA;    win.webContents.send('message', m);&#xA;  });&#xA;&#xA;  ipcMain.on('toProcessor', (e, m) =&gt; {&#xA;    backgroundWin.webContents.send('message', m);&#xA;  });&#xA;</code></pre>&#xA;&#xA;<p><strong>Processor.js</strong></p>&#xA;&#xA;<pre><code>ipcRenderer.on('message', (e, m) =&gt; {&#xA;&#xA;  if(m.type === 'start'){&#xA;    let path = m.data;&#xA;    ipcRenderer.send('toUi', {type: 'start'});&#xA;    pdf.readDir(path, status =&gt; {&#xA;      let percent = parseInt((status.now/status.total) * 100);&#xA;      ipcRenderer.send('toUi', {type: 'process', data: percent});&#xA;    }, () =&gt; {&#xA;      timer.setTimeout(() =&gt; {&#xA;        ipcRenderer.send('toUi', {type:'end'});&#xA;      }, 1000);&#xA;    });&#xA;  }&#xA;&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>UI.js</strong></p>&#xA;&#xA;<pre><code>ipcRenderer.on('message', (e, m) =&gt; {&#xA;      console.log(m);&#xA;      if(m.type === 'start') {&#xA;        document.getElementById(""start"").className += "" disabled"";&#xA;      }&#xA;      if(m.type === 'process') {&#xA;        document.getElementById(""bar"").style.width = m.data + ""%"";&#xA;      }&#xA;      if(m.type === 'end') {&#xA;        document.getElementById(""start"").className = document.getElementById(""start"").className.replace("" disabled"", '');&#xA;        document.getElementById(""bar"").style.width = ""0%"";&#xA;        window.alert(""Conversão relizada com sucesso!"");&#xA;      }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>So I send a message to the main and the main sends to the UI or to the backgroud process and it work as magic.</p>&#xA;&#xA;<p><a href=""https://github.com/gabrielcarneiro97/nota-reader"" rel=""nofollow noreferrer"">Git repo</a>.</p>&#xA;",6565510,"",,"",,2017-07-28T11:22:01,"","",,0,,,
45374272,2,,45364789,2017-07-28T13:02:14,,1,,<p>The class name for the line when dragging tabs around is named <code>placeholder</code>. Try the code below to see what I mean.</p>&#xA;&#xA;<pre><code>.placeholder {&#xA;  background-color: yellow !important;&#xA;}&#xA;</code></pre>&#xA;,8371369,"",8371369,"",2017-07-28T13:14:24,2017-07-28T13:14:24,"","",,0,,,
45374463,2,,45373937,2017-07-28T13:11:38,,1,,"<p>According to docs <a href=""https://code.visualstudio.com/docs/nodejs/nodejs-debugging"" rel=""nofollow noreferrer"">https://code.visualstudio.com/docs/nodejs/nodejs-debugging</a> <code>Inspector protocol</code> is not yet supported for electron.</p>&#xA;&#xA;<p>This is working configurations. Should have been adding protocol legacy.</p>&#xA;&#xA;<pre><code>  {&#xA;      ""version"": ""0.2.0"",&#xA;      ""configurations"": [&#xA;        { &#xA;          ""name"": ""Debug Main Process"",&#xA;          ""type"": ""node"",&#xA;          ""request"": ""launch"",&#xA;          ""program"": ""${workspaceRoot}/app/main.ts"",&#xA;          ""stopOnEntry"": false,&#xA;          ""args"": ["".""],  &#xA;          ""cwd"": ""${workspaceRoot}"",&#xA;          ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/electron.cmd"",&#xA;          ""outFiles"": [  &#xA;            ""${workspaceRoot}/dist/main.js""&#xA;          ],&#xA;          ""protocol"":""legacy"",&#xA;          ""env"": { }, &#xA;          ""sourceMaps"": true &#xA;        }   &#xA;      ]&#xA;    } &#xA;</code></pre>&#xA;",5715298,"",5715298,"",2017-07-28T17:02:21,2017-07-28T17:02:21,"","",,0,,,
45380019,2,,45379052,2017-07-28T18:19:35,,1,,"<p>I think your missing <code>Menu.buildFromTemplate(mainMenu.object)</code>.</p>&#xA;&#xA;<p>To use <code>Menu.setApplicationMenu(template)</code> you first need to run <code>Menu.buildFromTemplate(mainMenu.object)</code> on the template to convert it into something <code>Menu.setApplicationMenu(template)</code> can pick up.</p>&#xA;&#xA;<p>It would be something like this:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/5mZLb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5mZLb.png"" alt=""Example""></a></p>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/menu/#menubuildfromtemplatetemplate"" rel=""nofollow noreferrer"">Ref.</a></p>&#xA;",6577664,"",,"",,2017-07-28T18:19:35,"","",,4,,,
45203699,2,,45203101,2017-07-20T01:37:21,,2,,"<p>You will need to change <code>&lt;Route path=""/"" component={MyDevkitsPage} /&gt;</code> to <code>&lt;Route exact path=""/"" component={MyDevkitsPage} /&gt;</code>.</p>&#xA;&#xA;<p>By adding <code>exact</code> to that <code>&lt;Route /&gt;</code> you will prevent <code>react-router</code> from trying to load both <code>&lt;MyDevkitsPage /&gt;</code> and <code>&lt;DevkitBrowserPage /&gt;</code> at the same time.</p>&#xA;",6338762,"",,"",,2017-07-20T01:37:21,"","",,1,,,
45237850,2,,45237707,2017-07-21T12:34:58,,2,,"<p>Here is a simple way you can grab just the file name:</p>&#xA;&#xA;<pre><code>var filePath = ""/Users/void/Desktop/abc.xlsx"";&#xA;var fileName = filePath.replace(/^.*[\\\/]/, '');&#xA;&#xA;console.log(fileName);&#xA;</code></pre>&#xA;&#xA;<p>Here is a <a href=""https://jsfiddle.net/fb0mg2u6/"" rel=""nofollow noreferrer"">fiddle</a> to demonstrate.</p>&#xA;",3704569,"",2573045,"",2017-07-21T12:49:36,2017-07-21T12:49:36,"","",,1,,,
45244830,2,,45202457,2017-07-21T18:51:44,,2,,"<p>Fibers is built to native binary code, it is not pure javascript. Rasperry Pi runs on ARM, which isn't included in the prebuilt binaries. The prebuilt binaries support 32 and 64 bit architectures for OSX (darwin), linux, and windows.</p>&#xA;&#xA;<p>This means you need to manually build Fibers for your system, not install it via NPM. <a href=""https://github.com/laverdet/node-fibers/blob/master/README.md"" rel=""nofollow noreferrer"">The README for Fibers</a> has clear instructions on how to do so. I've included them here for ease of access. Please follow these instructions to try and get it running on Raspberry Pi / ARM.</p>&#xA;&#xA;<h3>Installing from source</h3>&#xA;&#xA;<ul>&#xA;<li><code>git clone git://github.com/laverdet/node-fibers.git</code></li>&#xA;<li><code>cd node-fibers</code></li>&#xA;<li><code>npm install</code></li>&#xA;</ul>&#xA;&#xA;<p>Note: node-fibers uses <a href=""https://github.com/TooTallNate/node-gyp"" rel=""nofollow noreferrer"">node-gyp</a> for&#xA;building. To manually invoke the build process, you can use <code>node-gyp rebuild</code>.&#xA;This will put the compiled extension in <code>build/Release/fibers.node</code>. However,&#xA;when you do <code>require('fibers')</code>, it will expect the module to be in, for&#xA;example, <code>bin/linux-x64-v8-3.11/fibers.node</code>. You can manually put the module&#xA;here every time you build, or you can use the included build script. Either&#xA;<code>npm install</code> or <code>node build -f</code> will do this for you. If you are going to be&#xA;hacking on node-fibers, it may be worthwhile to first do <code>node-gyp configure</code>&#xA;and then for subsequent rebuilds you can just do <code>node-gyp build</code> which will&#xA;be faster than a full <code>npm install</code> or <code>node-gyp rebuild</code>.</p>&#xA;",1974829,"",,"",,2017-07-21T18:51:44,"","",,0,,,
45314740,2,,45314654,2017-07-25T22:52:47,,2,,"<p>I suppose you have access to the source code that generates the document.write, you can add a call to the 'debugger' like this:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;document.write('&lt;sc' + 'ript&gt; debugger; alert(0);&lt;/s' + 'cript&gt;');&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<p>I you have the debugger opened on chrome, it will stop the execution and show the generated code on the Sources tab.  </p>&#xA;",1235770,"",,"",,2017-07-25T22:52:47,"","",,2,,,
45330018,2,,45329269,2017-07-26T14:32:47,,2,,"<p>Generally <code>require</code>s should not remain within service constructor (unless they are conditional):</p>&#xA;&#xA;<pre><code>var fs = require('fs');&#xA;var path = require('path');&#xA;var gui = require('nw.gui');&#xA;&#xA;ngModule.service('User', ['$q', function ($q) {&#xA;  ...&#xA;}]);&#xA;</code></pre>&#xA;&#xA;<p>The code above will require to use packages like <code>proxyquire</code> to mock Node modules and test the service in isolation.</p>&#xA;&#xA;<p>DI is supposed to introduce additional flexibility and testability to the application. Having the dependencies in separate module that can be easily stubbed is generally preferable way to handle this:</p>&#xA;&#xA;<pre><code>angular.module('node', [])&#xA;.constant('gui', require('nw.gui'))&#xA;...&#xA;&#xA;...&#xA;&#xA;angular.module('app', ['node'])&#xA;.service('User', function ($q, gui, ...) {&#xA;  ...&#xA;});&#xA;</code></pre>&#xA;",3731501,"",,"",,2017-07-26T14:32:47,"","",,0,,,
45366839,2,,45212080,2017-07-28T06:58:27,,2,,<p>It was just a problem with openssl and needing to symbolic link the brew install and add the CPPFLAGS and LDFLAGS environment variables:</p>&#xA;&#xA;<p>CPPFLAGS=-I/usr/local/opt/openssl/include&#xA;LDFLAGS=-L/usr/local/opt/openssl/lib</p>&#xA;&#xA;<p>uws builds fine now</p>&#xA;,1887639,"",,"",,2017-07-28T06:58:27,"","",,0,,,
45203849,2,,44967814,2017-07-20T01:59:52,,3,,"<p>I believe that you need to add&#xA;<code>""protocol""=""legacy""</code>&#xA;To your launch config. This is with the assumption that you are using a Node version &lt; 8.x</p>&#xA;",4549073,"",,"",,2017-07-20T01:59:52,"","",,0,,,
45349129,2,,45340552,2017-07-27T11:10:34,,4,,"<p>I think it is possible. Electron has everything you need for it:</p>&#xA;&#xA;<ul>&#xA;<li>A <a href=""https://github.com/electron/electron/blob/master/docs/api/frameless-window.md"" rel=""nofollow noreferrer"">Frameless Window</a> is probably the way to go for this.</li>&#xA;<li><a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winsetpositionx-y-animate"" rel=""nofollow noreferrer""><code>win.setPosition(x, y[, animate])</code></a>, <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winsetsizewidth-height-animate"" rel=""nofollow noreferrer""><code>win.setSize(width, height[, animate])</code></a>, <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winhide"" rel=""nofollow noreferrer""><code>win.hide()</code></a> and <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winshow"" rel=""nofollow noreferrer""><code>win.show()</code></a> is all you need to animate the window</li>&#xA;<li><a href=""https://github.com/electron/electron/blob/master/docs/api/screen.md"" rel=""nofollow noreferrer""><code>screen</code></a> and <a href=""https://github.com/electron/electron/blob/master/docs/api/structures/display.md"" rel=""nofollow noreferrer""><code>Display</code></a> will help you put the window in the correct position</li>&#xA;</ul>&#xA;&#xA;<p><strong>Initial state:</strong></p>&#xA;&#xA;<ul>&#xA;<li>Place window at the side of the screen</li>&#xA;<li>Set to smallest possible width</li>&#xA;<li>Hidden</li>&#xA;</ul>&#xA;&#xA;<p><strong>Opening:</strong></p>&#xA;&#xA;<ol>&#xA;<li>Show window</li>&#xA;<li>Increase width and change position towards center of the screen until the window reaches the desired size</li>&#xA;</ol>&#xA;&#xA;<p><strong>Closing:</strong></p>&#xA;&#xA;<ol>&#xA;<li>Decrease width and change position towards side of the screen</li>&#xA;<li>Hide window when side is reached</li>&#xA;</ol>&#xA;&#xA;<p>The content of the window is then just CSS and JS magic, to make it look good.</p>&#xA;",2016129,"",,"",,2017-07-27T11:10:34,"","",,2,,,
45363849,2,,45363736,2017-07-28T02:21:26,,4,,"<p>Just use</p>&#xA;&#xA;<pre><code>db.loadDatabase(function(err){&#xA;&#xA;    db.find({}, function (err,docs){&#xA;        console.log(docs);//all docs&#xA;    });&#xA;&#xA;});&#xA;</code></pre>&#xA;",1997626,"",,"",,2017-07-28T02:21:26,"","",,0,,,
45310753,2,,45310489,2017-07-25T18:10:27,,5,,"<p>According to <a href=""https://discuss.atom.io/t/a-way-to-prevent-developer-tools/29746/5"" rel=""noreferrer"">this thread in the developer forum</a>, there is a way to force the dev tools to close whenever they open using the following code:</p>&#xA;&#xA;<pre><code>win.webContents.on(""devtools-opened"", () =&gt; {&#xA;  win.webContents.closeDevTools();&#xA;});&#xA;</code></pre>&#xA;",4822129,"",,"",,2017-07-25T18:10:27,"","",,5,,,
45199356,2,,45199355,2017-07-19T19:23:25,,7,,"<h2>tl;dr</h2>&#xA;&#xA;<p>Place it in the file where you include Electron and run it after the <code>ready</code> event was emitted by it:</p>&#xA;&#xA;<pre><code>const { app } = require('electron');&#xA;app.on('ready', functionWithTheCodeFromDocs);&#xA;</code></pre>&#xA;&#xA;<p>You only need to do this once! The extensions will persist after this code have been run.</p>&#xA;&#xA;<h2>In depth explanation</h2>&#xA;&#xA;<h3>Install the package</h3>&#xA;&#xA;<p>Install the package just like the docs instruct you. In case of npm:</p>&#xA;&#xA;<pre><code>npm install electron-devtools-installer --save-dev&#xA;</code></pre>&#xA;&#xA;<h3>Require the package</h3>&#xA;&#xA;<p>You may require the package and configure it in the file where you build up your Electron app. You need to include the installer function and the (possibly multiple) needed extension(s):</p>&#xA;&#xA;<p>With ES6 modules:</p>&#xA;&#xA;<pre><code>import installExtension, { REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS } from 'electron-devtools-installer';&#xA;</code></pre>&#xA;&#xA;<p>With <code>require</code>:</p>&#xA;&#xA;<pre><code>const { default: installExtension, REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS } = require('electron-devtools-installer');&#xA;</code></pre>&#xA;&#xA;<h3>Configuration and usage</h3>&#xA;&#xA;<p>I will presume that somewhere you required Electron:</p>&#xA;&#xA;<pre><code>const { app } = require('electron');&#xA;</code></pre>&#xA;&#xA;<p>The <code>installExtension</code> function have to be called after the <code>ready</code> event was emitted by the application. If you want to add multiple extensions you have to call the function multiple times with the different extensions by copy-paste:</p>&#xA;&#xA;<pre><code>app.on('ready', () =&gt; {&#xA;    installExtension(REACT_DEVELOPER_TOOLS)&#xA;        .then((name) =&gt; console.log(`Added Extension: ${name}`))&#xA;        .catch((err) =&gt; console.log('An error occurred: ', err));&#xA;});&#xA;app.on('ready', () =&gt; {&#xA;    installExtension(REDUX_DEVTOOLS)&#xA;        .then((name) =&gt; console.log(`Added Extension: ${name}`))&#xA;        .catch((err) =&gt; console.log('An error occurred: ', err));&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Or you can write a loop:</p>&#xA;&#xA;<pre><code> app.on('ready', () =&gt; {&#xA;    [REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS].forEach(extension =&gt; {&#xA;      installExtension(extension)&#xA;          .then((name) =&gt; console.log(`Added Extension: ${name}`))&#xA;          .catch((err) =&gt; console.log('An error occurred: ', err));&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>If you have done everything properly, after you run <code>electron .</code> in your project's folder, you should see this in the console:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Added Extension: React Developer Tools<br>&#xA;  Added Extension: Redux DevTools</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Keep in mind: You only need to run this code once.</strong> As <a href=""https://electron.atom.io/docs/api/browser-window/#browserwindowadddevtoolsextensionpath"" rel=""noreferrer"">Electron's <code>BrowserWindow.addDevToolsExtension</code> documentation</a> states: </p>&#xA;&#xA;<blockquote>&#xA;  <p>The extension will be remembered so you only need to call this API once, this API is not for programming use. If you try to add an extension that has already been loaded, this method will not return and instead log a warning to the console.</p>&#xA;</blockquote>&#xA;",1494454,"",,"",,2017-07-19T19:23:25,"","",,0,,,
45223568,2,,45192547,2017-07-20T19:22:23,,-1,,"<p>I solved problem by including several modules:</p>&#xA;&#xA;<pre><code>const electron = require('electron')&#xA;const app = electron.app&#xA;const BrowserWindow = electron.BrowserWindow&#xA;const &#xA;const redirectUri = 'your redirect';&#xA;let mainWindow&#xA;&#xA;const    qs = require('querystring'),&#xA;         shell = require('shell'),&#xA;         _ = require('lodash'),&#xA;         path = require('path'),&#xA;         url = require('url')&#xA;&#xA; function createWindow() {&#xA;&#xA;var querystring = require('querystring');&#xA;var https = require('https');&#xA;var clientId = 'your client id';&#xA;var scope = ['account-info', 'operation-history', 'operation-details'];&#xA;var authUrl = 'https://money.yandex.ru/oauth/authorize?';&#xA;var apiUrl = 'https://money.yandex.ru/api';&#xA;var authUrl = authUrl + 'client_id=' + clientId +&#xA;    '&amp;redirect_uri=' + redirect_uri +&#xA;    '&amp;scope=' + scope.join("" "") +&#xA;    '&amp;response_type=' + 'code';&#xA;&#xA;let token = null;&#xA;&#xA;authWindow = new BrowserWindow({&#xA;    width: 600,&#xA;    height: 400,&#xA;    type: 'splash',&#xA;    webPreferences: {&#xA;        nodeIntegration: false&#xA;    }&#xA;});&#xA;&#xA;authWindow.on('closed', function() {&#xA;    authWindow = null;&#xA;    resolve(token);&#xA;});&#xA;&#xA;authWindow.webContents.on('new-window', function(e, url) {&#xA;    e.preventDefault();&#xA;    shell.openExternal(url);&#xA;});&#xA;authWindow.webContents.on('will-navigate', function (event, url) {&#xA;     console.log(url);&#xA;});&#xA;&#xA;authWindow.webContents.on('did-get-redirect-request', function (event, &#xA; oldUrl, newUrl) {&#xA;console.log(newUrl);&#xA;});&#xA;&#xA;authWindow.loadURL(authUrl);&#xA; }&#xA;&#xA;&#xA;app.on('ready', createWindow)&#xA;&#xA;app.on('window-all-closed', function() {&#xA;     if (process.platform !== 'darwin') {&#xA;         app.quit()&#xA;     }&#xA; })&#xA;&#xA;app.on('activate', function() { &#xA;     if (mainWindow === null) {&#xA;         createWindow()&#xA;    }&#xA; })&#xA;</code></pre>&#xA;&#xA;<p>Don't forget about npm install)</p>&#xA;",7196120,"",,"",,2017-07-20T19:22:23,"","",,0,,,
30465063,2,,30464377,2015-05-26T17:24:17,,0,,"<p>Alright, figured it out, had to include this;</p>&#xA;&#xA;<pre><code>var win = gui.Window.get();&#xA;win.on('blur', function() {&#xA;    alert(0);&#xA;});&#xA;</code></pre>&#xA;",3591153,"",,"",,2015-05-26T17:24:17,"","",,0,,,
30554967,2,,30554490,2015-05-31T07:30:32,,0,,"<p>In your <code>async.queue</code>, just move your callback in your <code>stream.on('end'</code>  function, after your <code>console.log</code></p>&#xA;&#xA;<p>And add a <code>stream.on('error', callback);</code> to handle errors :)</p>&#xA;",1717734,"",,"",,2015-05-31T07:30:32,"","",,1,,,
30633701,2,,30633611,2015-06-04T01:55:50,,0,,"<p>Use the <code>$first</code> variable available inside <code>ng-repeat</code> together with <code>ng-class</code> to do this. Something like this</p>&#xA;&#xA;<pre><code>&lt;div ng-repeat=""item in thisConsole.items"" button-repeat&gt;&#xA;                &lt;li&gt;&#xA;                    &lt;a class=""itembutton"" href=""#"" ng-class={'selectedbutton':$first}&gt;&lt;span ng-bind=""item""&gt;&lt;/span&gt;&lt;/a&gt;&#xA;                &lt;/li&gt;&#xA;                &lt;li class=""divider""&gt;&lt;/li&gt;&#xA;            &lt;/div&gt;&#xA;</code></pre>&#xA;",361151,"",,"",,2015-06-04T01:55:50,"","",,2,,,
30465057,2,,18717262,2015-05-26T17:23:50,,1,,"<p>In case it helps anybody else, we resolved this by replacing calls to requestAnimationFrame to calls with a timeout of 1ms and requestAnimationFrame.  That permitted other things (such as udp send/receive processing) to squeeze in on the thread in the 1ms dealy, without significantly impacting overall fps.</p>&#xA;&#xA;<p>~~~</p>&#xA;&#xA;<p>p.s.&#xA;Using nw 8.5 I found that deferring requestAnimationFrame with setTimeout worked best, giving typical OSC roundtrip times of 2ms.  Deferring with process.setTick gave OSC roundtrip times of around 20ms.  Calling requestAnimationFrame directly caused the almost complete block of OSC messages.</p>&#xA;&#xA;<p>Using nw 12.1 there was no issue, and all three variants behaved almost exactly the same with typical roundtrip times of 2ms.</p>&#xA;&#xA;<p>We have been constrained to use nw 8.5 for some time as our webGL code would not work with ANGLE and later versions of nw would not work with  -use-gl=desktop.  With the latest versions of nw, ANGLE is working better and -use-gl=desktop is also working again.</p>&#xA;",713331,"",713331,"",2015-05-30T09:33:03,2015-05-30T09:33:03,"","",,3,,,
30473895,2,,30450684,2015-05-27T05:30:39,,1,,"<p>I think you have not installed nodewebkit properly</p>&#xA;&#xA;<p>Please install from <a href=""https://github.com/nwjs/nw.js"" rel=""nofollow"">https://github.com/nwjs/nw.js</a> latest version as per os and replace nodewebkit tools in where it's installed</p>&#xA;",,user4692688,,"",,2015-05-27T05:30:39,"","",,0,,,
30519123,2,,30448102,2015-05-29T00:13:15,,1,,"<p>I take it that you are launching node-webkit in kiosk mode? </p>&#xA;&#xA;<p><a href=""https://github.com/nwjs/nw.js/wiki/The-Kiosk-mode"" rel=""nofollow noreferrer"">https://github.com/nwjs/nw.js/wiki/The-Kiosk-mode</a></p>&#xA;&#xA;<p>To add your app in Ubuntu as apps to start as soon as linux has booted:</p>&#xA;&#xA;<p><a href=""https://askubuntu.com/questions/30931/how-do-i-make-a-program-auto-start-every-time-i-log-in"">https://askubuntu.com/questions/30931/how-do-i-make-a-program-auto-start-every-time-i-log-in</a></p>&#xA;",483638,"",-1,"",2017-04-13T12:22:45,2015-05-29T00:13:15,"","",,0,,,
30592785,2,,30578617,2015-06-02T09:53:26,,1,,"<p>What you are looking for should be on GitHub. </p>&#xA;&#xA;<p><a href=""https://github.com/atom/atom"" rel=""nofollow"">https://github.com/atom/atom</a>&#xA;or...&#xA;<a href=""https://github.com/atom/electron"" rel=""nofollow"">https://github.com/atom/electron</a>&#xA;or...&#xA;<a href=""https://github.com/atom/node"" rel=""nofollow"">https://github.com/atom/node</a></p>&#xA;&#xA;<p>Based on your update the code you are looking for (with regard to sharing the global context) is actually here: <a href=""https://github.com/atom/node/blob/atom-iojs/lib/module.js#L399"" rel=""nofollow"">https://github.com/atom/node/blob/atom-iojs/lib/module.js#L399</a></p>&#xA;&#xA;<p>Because Electron doesn't include the most current version of Node.js, I thought it worth mentioning.</p>&#xA;",1846224,"",1846224,"",2015-06-02T14:33:06,2015-06-02T14:33:06,"","",,3,,,
30637857,2,,30637701,2015-06-04T07:42:44,,1,,"<p>Maybe should you try to use writeFile and do the rest of your logic in its callback ?</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var fs = require('fs');    &#xD;&#xA;fs.writeFile(tmpFileName, realContent, function(err){&#xD;&#xA;  if(err){&#xD;&#xA;    //Do your error logic&#xD;&#xA;  }&#xD;&#xA;  //Do your post writing logic&#xD;&#xA;});</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4810062,"",,"",,2015-06-04T07:42:44,"","",,2,,,
30687066,2,,30686787,2015-06-06T20:04:58,,1,,"<p>Having logic on the page loading is always tricky and as you mentioned - requires page reloading what is not very elegant and modern applications avoid this.</p>&#xA;&#xA;<p>In your case, I suggest that if your JSON file is not very big - store it in variable and modify it as needed. The elegant way will be to create Angular service, which can act as a ""model"".</p>&#xA;&#xA;<pre><code>angular.service('JsonService', function() {&#xA;   var json = {&#xA;    // content&#xA;   };&#xA;&#xA;   return {&#xA;      getJson: function () {&#xA;        return json;&#xA;      },&#xA;      setJson: function (newJson) {&#xA;         json = newJson;&#xA;      }&#xA;   };&#xA; });&#xA;</code></pre>&#xA;&#xA;<p>Then, whenever you need to update JSON invoke <code>setJson(newJson)</code> method and modify your controllers to use the service <code>getJson()</code> method.</p>&#xA;&#xA;<p>You can also add the loading/saving to file functions to this service. The loading function can be invoked in your main controller connected to your dashboard page. Then before the first page will be visible, the JSON file will be already loaded and you preserve desired behavior.</p>&#xA;",3076403,"",3076403,"",2015-06-06T20:12:08,2015-06-06T20:12:08,"","",,3,,,
30695515,2,,30694410,2015-06-07T15:50:38,,1,,"<p><a href=""http://en.wikipedia.org/wiki/HTTP_302"" rel=""nofollow noreferrer"">HTTP 302</a> isn't an error:</p>&#xA;&#xA;<blockquote>&#xA;  <p>The <a href=""http://en.wikipedia.org/wiki/HTTP"" rel=""nofollow noreferrer"">HTTP</a> response <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_status_codes"" rel=""nofollow noreferrer"">status code</a> 302 Found is a common way of performing <a href=""http://en.wikipedia.org/wiki/URL_redirection"" rel=""nofollow noreferrer"">URL redirection</a>.</p>&#xA;</blockquote>&#xA;&#xA;<p>You can handle HTTP 302 Found by retrieving the URL shown in the <code>Location</code> response header.</p>&#xA;&#xA;<p>Instead of using <code>http.get</code>, you might want to consider using <a href=""https://github.com/mikeal/request"" rel=""nofollow noreferrer"">the <code>request</code> library</a> as suggested in <a href=""https://stackoverflow.com/questions/7323932/how-do-you-follow-an-http-redirect-in-node-js"">this answer</a>. <code>request</code> should automatically follow the redirect.</p>&#xA;",354577,"",-1,"",2017-05-23T12:33:22,2015-06-07T15:50:38,"","",,2,,,
30541923,2,,30539351,2015-05-30T03:28:15,,3,,"<p>I see no reason not to use Angular in an nwjs project. I do it myself in <a href=""https://github.com/hearthpal/hearthpal-tracker"" rel=""nofollow"">the app I just finished building</a>. It's a local-only deck tracking app for hearthstone that never communicates over the internet at runtime. It only ever monitors a log file that is generated by the Hearthstone game. Since the way I'm display information to the user is still technically a web page with a full DOM, Angular makes perfect sense since I'm already comfortable using it.</p>&#xA;",498624,"",,"",,2015-05-30T03:28:15,"","",,0,,,
30519585,2,,25954491,2015-05-29T01:14:01,,4,,"<p>Per the <code>sqlite3</code> module documentation, it looks like you'll need to build a node-webkit specific version of sqlite3 from source rather than relying on the version direct from npm:</p>&#xA;&#xA;<p><a href=""https://github.com/mapbox/node-sqlite3#building-for-node-webkit"" rel=""nofollow"">https://github.com/mapbox/node-sqlite3#building-for-node-webkit</a></p>&#xA;",2119660,"",,"",,2015-05-29T01:14:01,"","",,1,,,
30584287,2,,30281732,2015-06-01T22:21:16,,5,,"<p>So what I was missing was the right <code>event</code>. The correct approach is:</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// Build the OAuth consent page URL&#xA;var authWindow = new BrowserWindow({ width: 800, height: 600, show: false, 'node-integration': false });&#xA;var githubUrl = 'https://github.com/login/oauth/authorize?';&#xA;var authUrl = githubUrl + 'client_id=' + options.client_id + '&amp;scope=' + options.scopes;&#xA;authWindow.loadUrl(authUrl);&#xA;authWindow.show();&#xA;&#xA;// Handle the response from GitHub&#xA;authWindow.webContents.on('did-get-redirect-request', function(event, oldUrl, newUrl) {&#xA;&#xA;  var raw_code = /code=([^&amp;]*)/.exec(newUrl) || null,&#xA;    code = (raw_code &amp;&amp; raw_code.length &gt; 1) ? raw_code[1] : null,&#xA;    error = /\?error=(.+)$/.exec(newUrl);&#xA;&#xA;  if (code || error) {&#xA;    // Close the browser if code found or error&#xA;    authWindow.close();&#xA;  }&#xA;&#xA;  // If there is a code in the callback, proceed to get token from github&#xA;  if (code) {&#xA;    requestGithubToken(options, code);&#xA;  } else if (error) {&#xA;    alert(""Oops! Something went wrong and we couldn't log you in using Github. Please try again."");&#xA;  }&#xA;&#xA;});&#xA;&#xA;// Reset the authWindow on close&#xA;authWindow.on('close', function() {&#xA;    authWindow = null;&#xA;}, false);&#xA;</code></pre>&#xA;&#xA;<p>I also wrote a tutorial that describes the full implementation which can be found at <a href=""http://manos.im/blog/electron-oauth-with-github/"" rel=""nofollow"">http://manos.im/blog/electron-oauth-with-github/</a></p>&#xA;",1460144,"",1460144,"",2016-08-29T00:42:28,2016-08-29T00:42:28,"","",,1,,,
30549963,2,,30542185,2015-05-30T18:41:02,,7,,"<p>Well, essentially Electron is just a customised version of a Chromium browser that comes packaged with Nodejs and some really cool packages that basically allow you to run the custom browser as if it was a native platform application. Because of that creating an Electron app is very similar to creating a web-app that has a Nodejs back-end.</p>&#xA;&#xA;<p>So to get started with a simple ""Hello World!"" app, you can just run the following npm...</p>&#xA;&#xA;<pre><code>npm install electron-prebuilt --save-dev&#xA;</code></pre>&#xA;&#xA;<p>Once the npm is installed you'll need three files to run an Electron app.</p>&#xA;&#xA;<ol>&#xA;<li>A package.json file</li>&#xA;<li>A javascript file (default is main.js)</li>&#xA;<li>An html file   (default is index.html)</li>&#xA;</ol>&#xA;&#xA;<p>See this GitHub repo for a quick copy/paste version of each and more detailed instructions: <a href=""https://github.com/mafintosh/electron-prebuilt"" rel=""nofollow"">https://github.com/mafintosh/electron-prebuilt</a></p>&#xA;&#xA;<p>after that you're ready to simply run your app...</p>&#xA;&#xA;<pre><code>$ electron .&#xA;</code></pre>&#xA;&#xA;<p>Finally, one way to open a terminal window would be to use an onclick attribute in your html to trigger a child_process, found <a href=""https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"" rel=""nofollow"">here</a>, in a function.</p>&#xA;&#xA;<p>That's it! You should be able to edit your html and javascript files as you would for any web-app, and take advantage of the added features that Electron provides.</p>&#xA;&#xA;<p>I'd also check out these resources for more info:</p>&#xA;&#xA;<p>A Quick Start intro to how Electron works -- <a href=""https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md"" rel=""nofollow"">https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md</a></p>&#xA;&#xA;<p>The Atom discussion forum (Because Atom was built with Electron, and is made to be hackable, the community is quite active) -- <a href=""https://discuss.atom.io/c/electron"" rel=""nofollow"">https://discuss.atom.io/c/electron</a></p>&#xA;&#xA;<p>A cool repo to keep up with the latest info. It includes links for apps that currently use Electron, tutorials, videos, and more --&#xA;<a href=""https://github.com/sindresorhus/awesome-electron"" rel=""nofollow"">https://github.com/sindresorhus/awesome-electron</a> </p>&#xA;&#xA;<p>I hope that helps!</p>&#xA;",1846224,"",1846224,"",2015-07-02T03:38:26,2015-07-02T03:38:26,"","",,0,,,
30465142,2,,30445766,2015-05-26T17:30:01,,12,,"<p>I was able to achieve this with the <a href=""https://www.npmjs.com/package/gulp-livereload""><code>gulp-livereload</code></a> plugin. Here is the code to livereload CSS ONLY. It's the same for everything else though.</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>var gulp = require ('gulp'),&#xA;run = require('gulp-run'),&#xA;livereload = require('gulp-livereload'),&#xA;uglify = require('gulp-uglify'),&#xA;concat = require('gulp-concat'),&#xA;rename = require('gulp-rename'),&#xA;minifycss = require('gulp-minify-css'),&#xA;jshint = require('gulp-jshint'),&#xA;autoprefixer = require('gulp-autoprefixer'),&#xA;rimraf = require('gulp-rimraf');&#xA;&#xA;var cssSources = [&#xA;  'app/components/css/main.css',&#xA;];&#xA;&#xA;gulp.task('css', function(){&#xA;  gulp.src(cssSources)&#xA;  .pipe(concat('main.css'))&#xA;  .pipe(autoprefixer({browsers: ['last 2 versions', 'ie 10']}))&#xA;  .pipe(gulp.dest('app/public/styles'))&#xA;  .pipe(rename({suffix: '.min'}))&#xA;  .pipe(minifycss())&#xA;  .pipe(gulp.dest('app/public/styles'))&#xA;  .pipe(livereload());&#xA;})&#xA;&#xA;gulp.task('watch', function(){&#xA;  livereload.listen();&#xA;  gulp.watch(cssSources, ['css'])&#xA;})&#xA;&#xA;gulp.task('run', ['build'], function() {&#xA;  return run('electron .').exec();&#xA;});&#xA;&#xA;gulp.task('default', ['watch', 'run']);&#xA;</code></pre>&#xA;&#xA;<p>Livereload in a desktop application is awesome.</p>&#xA;&#xA;<p>Make sure you add </p>&#xA;&#xA;<pre><code>&lt;script src=""http://localhost:35729/livereload.js""&gt;&lt;/script&gt; &#xA;</code></pre>&#xA;&#xA;<p>to your index.html</p>&#xA;",2610750,"",2610750,"",2015-06-06T21:29:46,2015-06-06T21:29:46,"","",,3,,,
30610157,2,,30465034,2015-06-03T03:06:56,,69,,"<p>Each platform has different default locations for different kinds of data. So, if you want to store data in default locations based on platform, check out <a href=""http://electron.atom.io/docs/api/app/#appgetpathname""><code>app.getPath(name)</code></a></p>&#xA;&#xA;<p>It retrieves a path to a special directory or file associated with <code>name</code>.</p>&#xA;&#xA;<p>You can also use it to differentiate between data the user wants to save, and data your application saves that you don't want to clutter up users directories.</p>&#xA;&#xA;<p>Or if you just want to store files reletive to a specific path you can use the &#xA;<a href=""http://electron.atom.io/docs/api/app/#appsetpathname-path""><code>app.setPath(name,path)</code></a></p>&#xA;",1846224,"",-1,"",2016-05-20T10:15:28,2016-05-20T10:15:28,"","",,2,,,
48885172,2,,48740813,2018-02-20T12:19:14,,4,,"<p>After 8 days I found the answer finally. It works with ESM in Electron.</p>&#xA;&#xA;<p>I've made a repo that is minimum &amp; lets you write ESM with Electron.</p>&#xA;&#xA;<p>The complete code can be found at <a href=""https://github.com/deadcoder0904/electron-webpack-sample"" rel=""nofollow noreferrer"">https://github.com/deadcoder0904/electron-webpack-sample</a></p>&#xA;&#xA;<p>Its very minimal so it should be easy to understand.</p>&#xA;",6141587,"",6141587,"",2018-02-21T08:12:33,2018-02-21T08:12:33,"","",,0,,,
48897386,2,,42878277,2018-02-21T02:41:05,,6,,<p>I have an intel HD internal graphics card and finally figured what caused the problem.</p>&#xA;&#xA;<p><strong>Internal graphics users</strong></p>&#xA;&#xA;<ol>&#xA;<li>Open Intel HD control panel</li>&#xA;<li>Goto 3D settings</li>&#xA;<li>Turn off conservative morphological anti-aliasing</li>&#xA;<li>Restart Application and varify</li>&#xA;</ol>&#xA;&#xA;<p><strong>Others</strong></p>&#xA;&#xA;<ol>&#xA;<li>Check for setting in anti-aliasing setting</li>&#xA;<li>Disable if enabled</li>&#xA;<li>Restart the application and varify. </li>&#xA;</ol>&#xA;,1758523,"",,"",,2018-02-21T02:41:05,"","",,0,,,
48898265,2,,48763721,2018-02-21T04:38:56,,3,,"<p>Importing <code>electron-updater</code> module this way: <code>const autoUpdater = require(""electron-updater"").autoUpdater</code> solved the issue. I missed it in the docs: </p>&#xA;&#xA;<blockquote>&#xA;  <p>Use autoUpdater from electron-updater instead of electron:</p>&#xA;  &#xA;  <p><code>import { autoUpdater } from ""electron-updater""</code></p>&#xA;  &#xA;  <p>Or if you don't use ES6: <code>const autoUpdater = require(""electron-updater"").autoUpdater</code></p>&#xA;</blockquote>&#xA;",893039,"",,"",,2018-02-21T04:38:56,"","",,0,,,
48911494,2,,48910539,2018-02-21T17:00:50,,2,,"<p>Another approach bypassing the content rewriting:</p>&#xA;&#xA;<pre><code>if(data != null) {&#xA;&#xA;  let presentation_Object = JSON.parse(data);&#xA;&#xA;  var div = document.createElement('div')&#xA;&#xA;  div.innerHTML = ""&lt;button class='b wh project-box-danger btn'&gt;""+presentation_Object.title+""&lt;a id='""+presentation_Object.title+""'""+"" href='#/'&gt;&lt;i class='far fa-trash-alt pull-right'&gt;&lt;/i&gt;TEST&lt;/a&gt;&lt;/button&gt;""&#xA;&#xA;  document.getElementById('allProjects').appendChild(div)&#xA;}&#xA;</code></pre>&#xA;",3975711,"",,"",,2018-02-21T17:00:50,"","",,0,,,
48913824,2,,48853606,2018-02-21T19:20:32,,3,,"<p>One sync solution would be using a shared object like </p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// within main.js&#xA;var entries = fs.readdirSync(save_path+""\\""+projectFile);&#xA;global.sharedObj =  { entries : entries };&#xA;// before &#xA;app.on('ready', function() ...&#xA;</code></pre>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;div class=""col-sm-3 text-center"" style=""background: #34495e; height:2160px;""&gt;&#xA;    &lt;p class=""b wh"" style=""margin-top: 15%;""&gt;Latest projects&lt;/p&gt;&#xA;    &lt;script&gt;&#xA;      const {remote} = require('electron');&#xA;      const entries = remote.getGlobal('sharedObj').entries;&#xA;      for (var i in entries) {&#xA;         document.write('&lt;p&gt;' + entries[i] + '&lt;/p&gt;');&#xA;      }&#xA;     &lt;/script&gt;&#xA;      &lt;hr class=""divider""&gt;&#xA;  &lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>Or you can use messaging via ipcMain and ipcRenderer to do it async.</p>&#xA;",3940126,"",,"",,2018-02-21T19:20:32,"","",,0,,,
48923751,2,,48914542,2018-02-22T09:27:51,,1,,"<p>After digging into the documentation I wrote this code (code located in the renderer):</p>&#xA;&#xA;<pre><code>const {BrowserWindow} = require('electron').remote&#xA;</code></pre>&#xA;&#xA;<p>..........</p>&#xA;&#xA;<pre><code> webview1.addEventListener('new-window', (e) =&gt; {&#xA;    const protocol = require('url').parse(e.url).protocol&#xA;    if (protocol === 'http:' || protocol === 'https:') {&#xA;      //shell.openExternal(e.url)&#xA;      let win = new BrowserWindow({width: 800, height: 600})&#xA;      win.loadURL(e.url);&#xA;    }&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>The line <code>shell.openExternal(e.url)</code> open the url of the link in a tab of the default browser.&#xA;And by using a new BrowserWindow, the new windows are Electron Window.</p>&#xA;",487313,"",,"",,2018-02-22T09:27:51,"","",,0,,,
48929740,2,,48923337,2018-02-22T14:21:19,,1,,"<p>So guys i solved it!&#xA;It was the axios repo and the promises while sending requests. Ive tested with superagent and http. They were faster but not fast enough. &#xA;This is my solution:</p>&#xA;&#xA;<pre><code>let responseType = 'arraybuffer';&#xA;if (this.$q.platform.is.cordova) {&#xA;  responseType = 'blob';&#xA;}&#xA;return new Promise((resolve, reject) =&gt; {&#xA;let length = files.length;&#xA;let count = 0;&#xA;files.map((imagePath) =&gt; {&#xA;  if (imagePath) {&#xA;    let request = new XMLHttpRequest();&#xA;    request.open('GET', imagePath);&#xA;    request.responseType = responseType;&#xA;    request.timeout = 1800000;&#xA;&#xA;    request.addEventListener('load', (event) =&gt; {&#xA;      if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) {&#xA;        this.$fileSystem.write(imagePath, request.response)&#xA;          .then((message) =&gt; {&#xA;            // Unzip zip files&#xA;            if (/\.zip$/i.test(message.file)) {&#xA;              this.$fileSystem.unzip(message.file).then((result) =&gt; {&#xA;                this.$emit('download-finished', message);&#xA;              }, (error) =&gt; {&#xA;                console.error(error);&#xA;                this.$emit('download-finished', message);&#xA;              });&#xA;            } else {&#xA;              this.$emit('download-finished', message);&#xA;              // return message;&#xA;            }&#xA;          });&#xA;      } else {&#xA;        console.warn(request.statusText, request.response);&#xA;        this.$emit('download-finished', request.response);&#xA;      }&#xA;    });&#xA;    request.send();&#xA;  }&#xA;});&#xA;this.$on('download-finished', (response) =&gt; {&#xA;  count++;&#xA;  console.log('download-finished ' + count);&#xA;  if (count === length) {&#xA;    resolve();&#xA;  }&#xA;})&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps someone</p>&#xA;",2527200,"",,"",,2018-02-22T14:21:19,"","",,0,,,
48957640,2,,45612999,2018-02-23T23:28:55,,0,,<p>For anyone facing this problem here is what I did:</p>&#xA;&#xA;<p>Electron-Forge supports jade templating so I just renamed all my pug files to jade and it worked like a charm</p>&#xA;,7180331,"",,"",,2018-02-23T23:28:55,"","",,0,,,
48959848,2,,48959414,2018-02-24T05:55:31,,0,,"<p>Cookies API methods in Electron.js are asynchronous. Below are the ways you can create your utility method to get cookie value.</p>&#xA;&#xA;<p><strong>Old callback way</strong></p>&#xA;&#xA;<pre><code>exports.get = function getCookie(name, callback) {&#xA;  var value = {&#xA;    name: name&#xA;  };&#xA;  ses.cookies.get(value, function(error, cookies) {&#xA;    if (name == ""service"") {&#xA;      callback((cookies[0].value).toString());&#xA;    }&#xA;  });&#xA;};&#xA;&#xA;// --------------------another file --------------------&#xA;cookie.get('service', function(service) {&#xA;  alert(service);&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Promose way</strong></p>&#xA;&#xA;<pre><code>exports.get = function getCookie(name) {&#xA;  return new Promoise((resolve, reject) =&gt; {&#xA;    var value = {&#xA;      name: name&#xA;    };&#xA;    ses.cookies.get(value, function(error, cookies) {&#xA;      if (error) {&#xA;        reject(error);&#xA;        return;&#xA;      }&#xA;      if (name == ""service"") {&#xA;        alert((cookies[0].value) +""1"" ) //alert is normal&#xA;        resolve((cookies[0].value).toString());&#xA;      }&#xA;    });&#xA;  });&#xA;};&#xA;&#xA;// --------------------another file --------------------&#xA;cookie.get('service')&#xA;  .then(function(service) {&#xA;    alert(service);&#xA;  })&#xA;  .catch(function(error) {&#xA;    console.error('ERR:', error);&#xA;  });&#xA;</code></pre>&#xA;",6108444,"",,"",,2018-02-24T05:55:31,"","",,0,,,
48969648,2,,48927699,2018-02-25T02:22:02,,0,,"<p>I have tried Keith's suggestion of using a service worker to intercept requests, but in my case I could not load a service worker from local environment into live environment (for example, run a local sw file in stackoverflow page), so that suggestion ended there.</p>&#xA;&#xA;<p>Stdob's suggestion of using a proxy ended up being redundant and more troublesome than my original attempt.</p>&#xA;&#xA;<p>In the end I went with my original attempt as follows:</p>&#xA;&#xA;<ul>&#xA;<li><p>Using <code>chrome.webRequest.onBeforeRequest</code> (Chrome API) and a local node server.</p></li>&#xA;<li><p>The server is created with an arbitrary port to reduce the risk of hitting an already used port.</p></li>&#xA;<li><p>The chrome API redirects all connections to the local server (ex. url: <code>http://127.0.0.1:5050</code>) and then the server will handle the requests as needed, returning the requested files modified or intact.</p></li>&#xA;<li><p>Last step, add a unique header with a unique value that only the app knows, so that no server access can be made from outside the app.</p></li>&#xA;</ul>&#xA;&#xA;<p>It is not the best solution, ideally I would prefer to have something like Firefox's <code>webRequest.filterResponseData</code>, but until Chrome implements that, this will have to do.</p>&#xA;",524695,"",,"",,2018-02-25T02:22:02,"","",,0,,,
48991837,2,,48717853,2018-02-26T15:29:52,,0,,"<p>So I've found the answer after digging into this code <a href=""https://github.com/npm/npm/blob/latest/lib/install.js"" rel=""nofollow noreferrer"">https://github.com/npm/npm/blob/latest/lib/install.js</a>&#xA;Simply use npm like this :</p>&#xA;&#xA;<pre><code>npm.load({}, function (err) {&#xA;  npm.commands.install(HERE_A_PATH, [], function(er, data){&#xA;    //callback here&#xA;  });&#xA;  npm.on(""log"", function (msg) {&#xA;    console.log(msg + '');&#xA;  });&#xA;});&#xA;</code></pre>&#xA;",9340604,"",,"",,2018-02-26T15:29:52,"","",,0,,,
48991945,2,,48988876,2018-02-26T15:36:54,,0,,"<p>Fixed it by grabbing links with a different regex then splitting it out. </p>&#xA;&#xA;<pre><code>var pattern = /(\[?(https?:\/\/[^\]\s]+) (.*)\]|(https?:\/\/[^\]\s]+))/g;&#xA;while((match = pattern.exec(message)) !== null) {&#xA;    if(match[0].startsWith(""["") &amp;&amp; match[0].endsWith(""]""))&#xA;    {&#xA;        var temp  = match[0].substring(1,match[0].length-1)&#xA;        var parts = temp.split("" "");&#xA;        var tail  = parts.slice(1).join("" "");&#xA;        var result = parts.slice(0,1);&#xA;        result.push(tail);&#xA;        var lurl = result[0];&#xA;        var ltext = result[1];&#xA;        message = message.replace(match[0], `&lt;a href='#' title='${ltext}' class='link link-external' data-link='${lurl}'&gt;${ltext}&lt;/a&gt;`);&#xA;        match = pattern.exec(message);&#xA;    }&#xA;    else&#xA;    {&#xA;        if(match[0].startsWith(""http""))&#xA;        {&#xA;            message = message.replace(match[0], `&lt;a href='#' title='${match[0]}' class='link link-external' data-link='${match[0]}'&gt;${match[0]}&lt;/a&gt;`);&#xA;            match = pattern.exec(message);&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;</code></pre>&#xA;",1139673,"",,"",,2018-02-26T15:36:54,"","",,0,,,
49000360,2,,48996795,2018-02-27T02:53:43,,1,,"<p>You won't need <code>gulp</code> for what you described. webpack will serve you well. Also, <a href=""https://react.semantic-ui.com/introduction"" rel=""nofollow noreferrer"">react-semantic-ui</a> has a react binding so you don't need extra build steps for that.</p>&#xA;&#xA;<p>Why webpack? It's a much safer choice at this moment for bundling and building a react app. </p>&#xA;&#xA;<ul>&#xA;<li>Most of the tutorials you find are based on webpack. </li>&#xA;<li>It has many plugins to deal with every scenario.</li>&#xA;<li>Can easily run your ESLint through webpack so you'll get nice errors and warnings at your build time.</li>&#xA;<li>Well integrated with React and its ecosystem.</li>&#xA;</ul>&#xA;",4228942,"",,"",,2018-02-27T02:53:43,"","",,0,,,
49033205,2,,48627582,2018-02-28T15:34:51,,0,,<p>The solution was to build the electron app from the build files instead of the source.</p>&#xA;,6903889,"",,"",,2018-02-28T15:34:51,"","",,0,,,
49034244,2,,48148021,2018-02-28T16:28:05,,3,,"<p>You need to use</p>&#xA;&#xA;<pre><code>const { ipcRenderer } = window.require(""electron"");&#xA;</code></pre>&#xA;&#xA;<p>Otherwise it will try to import it from Webpack or whatever you use.</p>&#xA;&#xA;<p>You can checkout this thread for a better explanation:</p>&#xA;&#xA;<p><a href=""https://github.com/electron/electron/issues/7300"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/7300</a></p>&#xA;",7490871,"",,"",,2018-02-28T16:28:05,"","",,0,,,
49040196,2,,49038391,2018-02-28T23:09:55,,0,,"<p>This will make the request you want:</p>&#xA;&#xA;<pre><code>var https = require('https')&#xA;const file_url = ""https://raw.githubusercontent.com/FloffahDevelopments/FloffahsHub/master/package.json""&#xA;const oldpackagejson = require(""./package.json"");&#xA;https.get(file_url, (res) =&gt; {&#xA;  res.on('data', (d) =&gt; {&#xA;    process.stdout.write(d)&#xA;  })&#xA;}).on('error', (e) =&gt; {&#xA;    console.log(e)&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Some mistakes you made were: Treating <code>http.get</code> as a promise when it's not. It could by with the inclusion of a module like bluebird, though. You used the http module to make an https request. You did not give http.get it's parameters correctly, that is, your syntax was incorrect. You're trying to update the DOM on server-side code, you should separate client and server logic. <code>res =&gt; res.json()</code> does not change <code>res</code> to json, you'll need <code>JSON.parse</code>. </p>&#xA;",9398629,"",,"",,2018-02-28T23:09:55,"","",,0,,,
49049277,2,,49003829,2018-03-01T11:58:19,,3,,<p>There are two things. If you set <code>__dirname: true</code> in your web app config you will get the <code>relative</code> path of the file from your context directory</p>&#xA;&#xA;<p>If you set <code>__dirname: false</code> then <code>__dirname</code> will have the full path.</p>&#xA;&#xA;<p><strong>Development Mode</strong></p>&#xA;&#xA;<p>You have two options</p>&#xA;&#xA;<ol>&#xA;<li>Set <code>__dirname: true</code> and concatenate it with <code>os.cwd()</code></li>&#xA;<li>Set <code>__dirname: false</code> and use <code>__dirname</code> directly</li>&#xA;</ol>&#xA;&#xA;<p><strong>Production Mode</strong></p>&#xA;&#xA;<ol>&#xA;<li>Set <code>__dirname: true</code> and use <code>os.cwd()</code>.</li>&#xA;<li>Set <code>__dirname: true</code> and use <code>process.resourcePath</code></li>&#xA;</ol>&#xA;&#xA;<p>I will prefer 2 as the preferred approach in production</p>&#xA;,2830850,"",,"",,2018-03-01T11:58:19,"","",,0,,,
49082851,2,,49082485,2018-03-03T09:49:12,,1,,"<p>Yes it is possible to do so. You probably didn't see the example repo for using opencv4nodejs with electron: <a href=""https://github.com/justadudewhohacks/opencv-electron"" rel=""nofollow noreferrer"">opencv-electron</a>. Furthermore the steps to render a cv.Mat into a html5 canvas are given in the readme as well.</p>&#xA;&#xA;<p>Regarding your error, you have to run electron-rebuild on native packages. This is also explained in the readme.</p>&#xA;",8569693,"",,"",,2018-03-03T09:49:12,"","",,0,,,
49085018,2,,49084998,2018-03-03T14:09:51,,2,,"<p>You can start with this boilerplate <a href=""https://github.com/maximegris/angular-electron"" rel=""nofollow noreferrer"">Angular-Electron</a>, It is setup with electron with UI in Angular.</p>&#xA;",893039,"",,"",,2018-03-03T14:09:51,"","",,0,,,
49086369,2,,43720873,2018-03-03T16:21:34,,0,,"<p>Finally found the answer here:&#xA;<a href=""https://github.com/nwjs/nw.js/issues/6338"" rel=""nofollow noreferrer"">https://github.com/nwjs/nw.js/issues/6338</a></p>&#xA;&#xA;<p>So to sign your app you need to:</p>&#xA;&#xA;<ul>&#xA;<li>build your app with nw-builder</li>&#xA;<li><p>Follow MAS guide&#xA;<a href=""http://docs.nwjs.io/en/latest/For%20Users/Advanced/Support%20for%20Mac%20App%20Store/"" rel=""nofollow noreferrer"">http://docs.nwjs.io/en/latest/For%20Users/Advanced/Support%20for%20Mac%20App%20Store/</a></p></li>&#xA;<li><p>set <code>Sandbox=Yes</code> in entitlements.plist</p></li>&#xA;</ul>&#xA;&#xA;<p>Before run mas.py script to fixed Unleashed content:</p>&#xA;&#xA;<pre><code># Set PATH_TO_YOUR_APP variable first&#xA;VERSION_NUMBER=`ls ""${PATH_TO_YOUR_APP}/Contents/Versions/""`&#xA;NWJS_FRAMEWORK=""$PATH_TO_YOUR_APP/Contents/Versions/$VERSION_NUMBER/nwjs Framework.framework""&#xA;LIBNODE_DYLIB=""libnode.dylib""&#xA;LIBNODE_LINK_TO=""Versions/A/$LIBNODE_DYLIB""&#xA;&#xA;echo fixing nwjs Framework unsealed content&#xA;pushd ""$NWJS_FRAMEWORK""&#xA;mv ""$LIBNODE_DYLIB"" ""$LIBNODE_LINK_TO""&#xA;ln -s ""$LIBNODE_LINK_TO""&#xA;popd&#xA;</code></pre>&#xA;&#xA;<p>All details you will find in this thread: <a href=""https://github.com/nwjs/nw.js/issues/6338"" rel=""nofollow noreferrer"">https://github.com/nwjs/nw.js/issues/6338</a></p>&#xA;&#xA;<p>Hope nw team will fix this</p>&#xA;",1786016,"",,"",,2018-03-03T16:21:34,"","",,0,,,
49087300,2,,49085153,2018-03-03T17:50:58,,0,,"<p>Apparently, this is the reason:</p>&#xA;&#xA;<ul>&#xA;<li><p><a href=""https://github.com/electron/electron/issues/11849"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/11849</a></p></li>&#xA;<li><p><a href=""https://github.com/electron/electron/issues/12033"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/12033</a></p></li>&#xA;</ul>&#xA;&#xA;<p>Fix will arrive in 1.8.3 or 2.0.0</p>&#xA;",4961487,"",,"",,2018-03-03T17:50:58,"","",,0,,,
48877027,2,,48876881,2018-02-20T02:34:54,,2,,"<p>Please read carefully the doc about <a href=""https://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer"">new BrowserWindow()</a>:</p>&#xA;&#xA;<p>While <code>nodeIntegrationInWorker</code>, <code>nodeIntegration</code>, <code>devTools</code> are indeed properties of <code>webPreferences</code>, all the other ones belong to the top-level <code>options</code> object.</p>&#xA;&#xA;<p>Please try this instead:</p>&#xA;&#xA;<pre><code>const win = new BrowserWindow({&#xA;    width: 1440,&#xA;    height: 960,&#xA;    frame: false,&#xA;    titleBarStyle: 'hidden',&#xA;    webPreferences: {&#xA;        nodeIntegrationInWorker: true,&#xA;        nodeIntegration: false&#xA;        // devTools: false&#xA;    }&#xA;});&#xA;</code></pre>&#xA;",,user8022331,,"",,2018-02-20T02:34:54,"","",,1,,,
48892094,2,,48890346,2018-02-20T18:37:41,,3,,"<p>Electron 1.8.2 <a href=""https://electronjs.org/releases#1.8.1"" rel=""nofollow noreferrer"">is based on Chrome 59.0.3071.115</a>, which has <a href=""https://caniuse.com/#feat=css-scroll-behavior"" rel=""nofollow noreferrer"">partial support</a> of the relatively new <a href=""https://drafts.csswg.org/cssom-view/#extensions-to-the-window-interface"" rel=""nofollow noreferrer"">""Scroll Behavior""</a> specification (which includes the <code>Element.scroll()</code> method you are using).</p>&#xA;&#xA;<p>Meanwhile you can use the <a href=""https://github.com/iamdustan/smoothscroll"" rel=""nofollow noreferrer"">smooth scroll polyfill</a>:</p>&#xA;&#xA;<pre><code>npm install smoothscroll-polyfill&#xA;</code></pre>&#xA;&#xA;<p>And in App.vue:</p>&#xA;&#xA;<pre><code>require('smoothscroll-polyfill').polyfill();&#xA;</code></pre>&#xA;",3499595,"",,"",,2018-02-20T18:37:41,"","",,1,,,
48912065,2,,48904678,2018-02-21T17:30:34,,1,,"<p>I don't know anything about electron-builder but I do know that <code>RMDir</code> in NSIS will only delete empty directories and <code>RMDir /r</code> will delete a directory and everything in it.</p>&#xA;&#xA;<p><a href=""https://github.com/electron-userland/electron-builder/commit/df13706e43e6817d25fc846a65c2e4a765e2f924"" rel=""nofollow noreferrer"">The change</a> on January 2nd should have fixed it as far as I can tell.</p>&#xA;&#xA;<p>One way to find out if this macro is the culprit is to modify your electron-builder installation and add a <code>MessageBox MB_OK ""Hello""</code> line to the start <strong>and</strong> end of the <code>cleanupOldMenuDirectory</code> macro. If the other shortcuts exists when the first MessageBox is displayed and they are gone when the 2nd MessageBox is displayed then you know where the issue is.</p>&#xA;",3501,"",,"",,2018-02-21T17:30:34,"","",,1,,,
48916411,2,,48913361,2018-02-21T22:14:25,,1,,"<p>You have made the position of the .from and .to classes fixed. That means that they will always be in the same position on your screen. It appears to work when you don't use a variable because then all .from-s and .to-s contain the same text, so you don't notice the overlapping.</p>&#xA;",3697441,"",,"",,2018-02-21T22:14:25,"","",,1,,,
48941245,2,,48924681,2018-02-23T04:40:47,,1,,<p>How about using sqlite.  Sqlite supports multi-user (writes are blocked) and there is a node module sqlite.  On each user's computer the NAS has to be mapped to the same drive letter and permissions have to be fixed.</p>&#xA;&#xA;<p>Not sure this will work but it sounds good!  It's just a old fashion peer network.</p>&#xA;,9365459,"",,"",,2018-02-23T04:40:47,"","",,1,,,
48951757,2,,48935070,2018-02-23T15:58:09,,2,,"<p>Given your example code. The following should show a scrollbar:</p>&#xA;&#xA;<pre><code>#output {&#xA;  overflow: scroll;&#xA;  padding: 5px;&#xA;  padding-top: 15px;&#xA;  width: 90%;&#xA;  height: 100px;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can use a height of 100% when one surrounding element has a fixed height. The code you did provide show's only relative heights. If you choose a width of 100% it can happen that you don't see a scrollbar. But still the div element is scrollable.</p>&#xA;&#xA;<p>Furthermore you'r using markdown it's likely that you also include a markdown related stylesheet, which interferes with your stylesheet.</p>&#xA;",3940126,"",,"",,2018-02-23T15:58:09,"","",,1,,,
48984445,2,,48917965,2018-02-26T08:43:59,,1,,"<p>There should be 2 js contexts, one running in the electron app and one running in node. You won't be able to require you scripts directly from your directory if you are in the electron context (which is like a browser js context).</p>&#xA;&#xA;<p>I'm just assuming this is the case since we don't get a lot of information for your problem, and the other answer should have resolved your problem.</p>&#xA;&#xA;<p>Try to include your js file in your index.html and see what's up.</p>&#xA;&#xA;<p>Edit: Since it's a Transpiling error with babel, babel is probably transpiling for node when it should transpile for the browser.</p>&#xA;",3734569,"",,"",,2018-02-26T08:43:59,"","",,1,,,
49068112,2,,46987895,2018-03-02T11:22:04,,1,,"<p>Imports work without ""localhost"", as i see in <a href=""https://github.com/electron/electron-api-demos"" rel=""nofollow noreferrer"">""Electron Api demos""</a>. In the <strong><em>index.html</em></strong> file,  there are some imports like these:</p>&#xA;&#xA;<pre><code>&lt;link rel=""import"" href=""sections/about.html""&gt;&#xA;&lt;link rel=""import"" href=""sections/windows/windows.html""&gt;&#xA;&lt;link rel=""import"" href=""sections/windows/crash-hang.html""&gt;&#xA;&lt;link rel=""import"" href=""sections/menus/menus.html""&gt;&#xA;</code></pre>&#xA;&#xA;<p>So i think your problem is that the <strong>path</strong> variable in the main renderer (main.js) don't work properly, or if you haven't declared that variable, you need to with <code>const path = require('path')</code> and use the path as in the <em>main.js</em> file in the Electron Api demos.</p>&#xA;&#xA;<p>(I'm not an expert with electron, but i think I can get you oriented to the solution looking inside the files in electron api repo)</p>&#xA;",6136612,"",,"",,2018-03-02T11:22:04,"","",,1,,,
48935863,2,,48933927,2018-02-22T19:38:45,,1,,"<p>you got most things already, only few clarifications are needed. Reason nw.js / Electron declares itself as for <em>desktop</em> application is, it's core architectural design is intended to integrate node.js with chromium to have UI enables create application does have UI. You can still use part of those framework (node.js side) without initiating visible ui, in that case behaviorwise it'll be similar to plain node.js does. Still there is caveat, like as it tightly integrated with chromium in core already for some cases you should have screen to chromium correctly initiates (or creating virtual buffer as lot of CI does, or etcs).</p>&#xA;&#xA;<p>Also, when your concern is performance, I'd doubt using UI framework for server side work achieves what you desire - while there won't be huge, integration between node to chromium have overhead compare to bare node.js obvioulsy.</p>&#xA;&#xA;<p>Getting back to original question, I feel question itself is somewhat vague. If the intention is truly server side application probably you won't need to <code>package</code> it but correctly deploy node and its dependency modules or packaging it sort of installable manner instead of creating single binary as pkg does.</p>&#xA;",2742189,"",,"",,2018-02-22T19:38:45,"","",,2,,,
48977678,2,,48976916,2018-02-25T19:42:28,,2,,"<p>Firstly, you should make sure you're running the current LTS version of Node, which at the time of this writing is v8.9.4. </p>&#xA;&#xA;<p>If, as you note, you are working with Electron which provides its own NodeJS runtime, you should still keep both Electron and your local version of NodeJS as up-to-date as possible.</p>&#xA;&#xA;<p><a href=""https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback"" rel=""nofollow noreferrer""><code>ChildProcess.execFile()</code></a> runs your command in a new process by default which might be the cause of your error. You may wish to specify that your command be run in a newly spawned shell by setting the <code>shell</code> flag in the options you pass to <code>execFile()</code> to either <code>true</code> which will cause the default <code>/bin/sh</code> shell to be used or to a path to the shell you wish to use.</p>&#xA;&#xA;<p>Running your process in a <code>/bin/sh</code> or <code>/bin/bash</code> shell will give you access to the shell <code>ulimit</code> built-in command which will provide you a means to modify resource limits for the shell. See <a href=""https://www.networkworld.com/article/2693414/operating-systems/setting-limits-with-ulimit.html"" rel=""nofollow noreferrer"">Setting Limits With ulimit</a> for information about the <code>ulimit</code> command and how to use it.</p>&#xA;&#xA;<p>If this is the case, you'll need to wrap your command invocation in a shell-script that first runs <code>ulimit</code> with the correct limits.</p>&#xA;&#xA;<p>See <a href=""https://unix.stackexchange.com/questions/44985/limit-memory-usage-for-a-single-linux-process"">Limit Memory Usage For A Single Linux Process</a> for further discussion on this topic.</p>&#xA;&#xA;<p>Your problem might also be caused by the default allocated size of the buffers used to transfer the running command's output via <code>stdout</code> and <code>stderr</code>. </p>&#xA;&#xA;<p>If this is the case and the program's output exceeds <code>200*1024</code> bytes, you can use the <code>maxBuffer</code> in the options you pass to <code>execFile()</code> to increase the size of these buffers.</p>&#xA;",747355,"",747355,"",2018-02-26T21:30:42,2018-02-26T21:30:42,"","",,2,,,
48979336,2,,48965710,2018-02-25T22:51:01,,1,,"<p>If you're using the latest Electron 1.8 or newer, it has built in PDF support in <code>BrowserWindow</code>'s and <code>&lt;webview&gt;</code> tags. You just have to ensure plugins are enabled:</p>&#xA;&#xA;<h3><code>BrowserWindow</code></h3>&#xA;&#xA;<pre><code>const window = new BrowserWindow({&#xA;  width: 1024,&#xA;  height: 800,&#xA;  webPreferences: {&#xA;    plugins: true&#xA;  }&#xA;});&#xA;&#xA;window.loadURL('path/to/file.pdf');&#xA;</code></pre>&#xA;&#xA;<h3><code>&lt;webview&gt;</code> Tag</h3>&#xA;&#xA;<pre><code>&lt;webview src=""path/to/file.pdf"" plugins&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;",106623,"",,"",,2018-02-25T22:51:01,"","",,2,,,
48985876,2,,48961238,2018-02-26T10:07:45,,2,,"<p>It's not a great idea to do long running tasks in the Electron main process, it can cause lots of issues.</p>&#xA;&#xA;<p>I <a href=""https://github.com/mceachen/batch-cluster.js/pull/2"" rel=""nofollow noreferrer"">submitted a PR</a> to <code>batch-cluster</code> which should fix the issues when it makes it into <code>exiftool-vendored</code>.</p>&#xA;",106623,"",,"",,2018-02-26T10:07:45,"","",,2,,,
49044959,2,,49044338,2018-03-01T07:51:25,,0,,"<p>Hold an array of the image links you like to show up (e.g. <code>diashow[url1, url2, ...]</code>. When a function filled up the array it calls <code>setTimeout(()=&gt; nextPicture(el, diashow))</code>. The method <code>nextPicture(el, diashow)</code> calls something like</p>&#xA;&#xA;<pre><code>const picture = diashow.shift();&#xA;&#xA;if(picture) {&#xA;    el.url = picture;&#xA;    this.timeHandle = setTimeout(()=&gt;nextPicture(el, diashow), 10000);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In that case your picture will periodically replaced. In your button method you can then also call <code>el.url = diashow.shift()</code> and maybe reset the timer by calling clear and set immediately.</p>&#xA;",1838048,"",1838048,"",2018-03-01T10:31:19,2018-03-01T10:31:19,"","",,2,,,
49050115,2,,49049832,2018-03-01T12:50:48,,1,,"<p>I think <code>mysql.execute("""").spread(fn)</code> promise is not a part of the AngularJS digest cycle. You did not provide enough code to fully reproduce your problem but I think by triggering a new digest cycle it should work for you. E.g. try it with <code>$timeout</code> which triggers a new digest cycle.</p>&#xA;&#xA;<pre><code>$scope.carList = [];&#xA;&#xA;mysql.execute(""SELECT * FROM cars"").spread(function(results){&#xA;     $timeout(function () {&#xA;        $scope.carList = results;&#xA;     });&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>I would prefer to create a AngularJS service which handles your electron <code>mysql</code> in a nice way. You could globally apply your <code>$scopes</code> in it, right after finishing your mysql procedures which are not a part of your digest cycle.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h3>Approach by using AngularJS promises</h3>&#xA;&#xA;<pre><code>var myApp = angular.module('myApp', []);&#xA;&#xA;myApp.controller('MyCtrl', function($scope, $q) {&#xA;&#xA;&#xA;  $scope.carList = [];&#xA;&#xA;  getCars.then(function(cars) {&#xA;    $scope.carList = cars;&#xA;  });&#xA;&#xA;&#xA;  function getCars() {&#xA;&#xA;    var deferred = $q.defer();&#xA;&#xA;    mysql.execute(""SELECT * FROM cars"").spread(function(results) {&#xA;      deferred.resolve(results);&#xA;    });&#xA;&#xA;    return deferred.promise;&#xA;  }&#xA;&#xA;});&#xA;</code></pre>&#xA;",2202537,"",13302,"",2019-01-26T22:08:57,2019-01-26T22:08:57,"","",,2,,,
49076759,2,,49076033,2018-03-02T20:21:16,,1,,"<p>Preload script is different kind, you can't directly point typescript in there. Only possible way is make javascript preload script which <code>bootstraps</code> electron compile inside of it (since you are using electron-prebuilt-compile), and require typescript files inside of it. It is somewhat verbose and require additional overhead into, I honestly not strongly recommend for it.</p>&#xA;",2742189,"",,"",,2018-03-02T20:21:16,"","",,2,,,
49040706,2,,49040538,2018-03-01T00:11:51,,2,,"<p>For method 1, you are using <code>fs.writeFile(file, data[, options], callback)</code>. So that callback will be called no matter what, alerting 'exists'. You should have a check, something like:</p>&#xA;&#xA;<pre><code>fs.writeFile(fullPath, '', (error) =&gt; {&#xA;  if(error) {&#xA;    alert(""exist"");&#xA;    return;&#xA;  }&#xA;&#xA;  // no error, do what you want.&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Reference: <a href=""https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback"" rel=""nofollow noreferrer"">https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback</a></p>&#xA;&#xA;<p>For method 2, you are getting the warning because you are calling fs.appendFile without a callback. Either use fs.appendFileSync or give it a callback.</p>&#xA;&#xA;<p>Reference: <a href=""https://nodejs.org/api/fs.html#fs_fs_appendfile_file_data_options_callback"" rel=""nofollow noreferrer"">https://nodejs.org/api/fs.html#fs_fs_appendfile_file_data_options_callback</a></p>&#xA;",9407501,"",,"",,2018-03-01T00:11:51,"","",,3,,,
49022815,2,,49016677,2018-02-28T05:53:44,,2,,"<p>When you implement your code in ESM and import it in commonjs (that's what <code>remote.require()</code> does), you will get the module namespace object:</p>&#xA;&#xA;<pre><code>// myModule.ts&#xA;export function foo() { ... }&#xA;&#xA;// and to access the default export:&#xA;export default const boo = 'boo'&#xA;&#xA;// consumer.js&#xA;const myModule = require('./myModule')&#xA;&#xA;myModule = { foo() { ... }, default: 'boo' }&#xA;</code></pre>&#xA;&#xA;<p>Therefore, your to use your <code>myModule</code> class, you need to do this:</p>&#xA;&#xA;<pre><code>const myModule = remote.require('./myModule')&#xA;&#xA;const obj = new myModule.myModule()&#xA;const boo = myModule.default&#xA;</code></pre>&#xA;&#xA;<p>UPDATE: <code>remote.require()</code> is a dynamic call, so TypeScript can't detect the type of the <code>myModule</code> and set it to <code>any</code>.</p>&#xA;&#xA;<p>You can do the following to get the type back:</p>&#xA;&#xA;<pre><code>import * as MyModule from './myModule'&#xA;const myModule: typeof MyModule = remote.require('./myModule')&#xA;</code></pre>&#xA;",3505900,"",3505900,"",2018-02-28T08:17:25,2018-02-28T08:17:25,"","",,4,,,
49054932,2,,48972912,2018-03-01T16:58:45,,22,,"<p>I have added a sample template/boilerplate on below link</p>&#xA;&#xA;<p><a href=""https://github.com/tarunlalwani/electron-webpack-typescript-boilerplate"" rel=""noreferrer"">https://github.com/tarunlalwani/electron-webpack-typescript-boilerplate</a></p>&#xA;&#xA;<p>So the idea is to break the code in 3 folders</p>&#xA;&#xA;<pre><code>src&#xA;|-- common&#xA;|-- main&#xA;|-- renderer&#xA;</code></pre>&#xA;&#xA;<p>The code for the main electron process will go into <code>main</code> folder and for the UI/renderer will go into the <code>renderer</code> folder.</p>&#xA;&#xA;<p>Now you want to use <code>TypeScript</code> in both and have 2 webpack config, one for bundling the <code>main</code> and one for bundling the <code>renderer</code>.</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;&#xA;console.log(__dirname);&#xA;let common_config = {&#xA;  node: {&#xA;    __dirname: true&#xA;  },&#xA;  mode: process.env.ENV || 'development',&#xA;  module: {&#xA;    rules: [&#xA;      {&#xA;        test: /\.tsx?$/,&#xA;        use: 'ts-loader',&#xA;        exclude: [&#xA;          /node_modules/,&#xA;           path.resolve(__dirname, ""src/ui"")&#xA;        ]&#xA;      }&#xA;    ]&#xA;  },&#xA;  resolve: {&#xA;    extensions: [ '.tsx', '.ts', '.js' ]&#xA;  },&#xA;};&#xA;&#xA;module.exports = [&#xA;  Object.assign({}, common_config, {&#xA;    target: 'electron-main',&#xA;    entry: {&#xA;      renderrer: './src/main/index.ts',&#xA;    },&#xA;    output: {&#xA;      filename: '[name]-bundle.js',&#xA;      path: path.resolve(__dirname, 'src/main/dist')&#xA;    },&#xA;  }),&#xA;  Object.assign({}, common_config, {&#xA;    target: 'electron-renderer',&#xA;    entry: {&#xA;      ui: './src/renderer/index.ts',&#xA;    },&#xA;    output: {&#xA;      filename: '[name]-bundle.js',&#xA;      path: path.resolve(__dirname, 'src/renderer/dist')&#xA;    },&#xA;  })&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>Another issue that one faces is that <code>__dirname</code> becomes <code>/</code> if do nothing about it. So we include below in our webpack config</p>&#xA;&#xA;<pre><code>  node: {&#xA;    __dirname: true&#xA;  },&#xA;</code></pre>&#xA;&#xA;<p>This make sure that a relative path is available. Now we can use <code>os.cwd()</code> in dev environment and use <code>process.resourcePath</code> in production. See below thread for more details</p>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/49003829/how-to-run-and-pack-external-executable-using-electron#"">How to run and pack external executable using Electron?</a></p>&#xA;&#xA;<p>The target for both the webpack config needs to be different. So for main we use <code>electron-main</code> and for renderer we use <code>electron-renderer</code></p>&#xA;&#xA;<p>The <code>tsconfig.json</code> needs to be different for both <code>main</code> and <code>renderer</code> and should excluded each other. So we use</p>&#xA;&#xA;<p><strong>renderer/tsconfig.json</strong></p>&#xA;&#xA;<pre><code>{&#xA;    ""compileOnSave"": false,&#xA;    ""compilerOptions"": {&#xA;        ""target"": ""es2015"",&#xA;        ""moduleResolution"": ""node"",&#xA;        ""pretty"": true,&#xA;        ""newLine"": ""LF"",&#xA;        ""allowSyntheticDefaultImports"": true,&#xA;        ""strict"": true,&#xA;        ""noUnusedLocals"": true,&#xA;        ""noUnusedParameters"": true,&#xA;        ""sourceMap"": true,&#xA;        ""skipLibCheck"": true,&#xA;        ""allowJs"": true,&#xA;        ""jsx"": ""preserve""&#xA;    },&#xA;    ""exclude"": [&#xA;      ""node_modules"",&#xA;      ""src/main""&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>main/tsconfig.json</strong></p>&#xA;&#xA;<pre><code>{&#xA;    ""compileOnSave"": false,&#xA;    ""compilerOptions"": {&#xA;        ""target"": ""es2015"",&#xA;        ""moduleResolution"": ""node"",&#xA;        ""pretty"": true,&#xA;        ""newLine"": ""LF"",&#xA;        ""allowSyntheticDefaultImports"": true,&#xA;        ""strict"": true,&#xA;        ""noUnusedLocals"": true,&#xA;        ""noUnusedParameters"": true,&#xA;        ""sourceMap"": true,&#xA;        ""skipLibCheck"": true,&#xA;        ""allowJs"": true,&#xA;        ""jsx"": ""preserve""&#xA;    },&#xA;    ""exclude"": [&#xA;      ""node_modules"",&#xA;      ""src/renderer""&#xA;    ]&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The final main thing is your <code>package.json</code>, which is below</p>&#xA;&#xA;<pre><code>{&#xA;  ""name"": ""boilerplate"",&#xA;  ""version"": ""1.0.0"",&#xA;  ""main"": ""src/main/dist/renderrer-bundle.js"",&#xA;  ""license"": ""MIT"",&#xA;  ""scripts"": {&#xA;    ""start"": ""npm-run-all build run-electron"",&#xA;    ""build"": ""webpack --config webpack.config.js"",&#xA;    ""run-electron"": ""electron .""&#xA;  },&#xA;  ""dependencies"": {&#xA;    ""electron"": ""^1.8.2"",&#xA;    ""jquery"": ""^3.3.1"",&#xA;    ""typescript"": ""^2.7.2"",&#xA;    ""webpack"": ""^4.0.1""&#xA;  },&#xA;  ""devDependencies"": {&#xA;    ""@types/electron"": ""^1.6.10"",&#xA;    ""@types/jquery"": ""^3.3.0"",&#xA;    ""@types/node"": ""^9.4.6"",&#xA;    ""html-webpack-plugin"": ""^2.30.1"",&#xA;    ""npm-run-all"": ""^4.1.2"",&#xA;    ""ts-loader"": ""^4.0.0"",&#xA;    ""tslint"": ""^5.9.1"",&#xA;    ""webpack-cli"": ""^2.0.9""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is should get your started and then you can add things link <code>tslint</code>, <code>jslint</code> as you go along</p>&#xA;",2830850,"",,"",,2018-03-01T16:58:45,"","",,4,,,
49010402,2,,49009891,2018-02-27T13:55:43,,2,,"<p>The <code>zoomed()</code> function needs to get the event from d3, try to </p>&#xA;&#xA;<ul>&#xA;<li>declare <code>zoomed</code> inside the <code>draw</code> scope </li>&#xA;<li>attach the zoom event to <code>g</code> instead of <code>svg</code></li>&#xA;<li><p>get the event.transform from d3</p>&#xA;&#xA;<pre><code>zoomed() {&#xA;    g.attr(""transform"", d3.event.transform);&#xA; }&#xA;</code></pre></li>&#xA;</ul>&#xA;",7092722,"",7092722,"",2018-02-27T14:36:35,2018-02-27T14:36:35,"","",,6,,,
48968821,2,,48968649,2018-02-24T23:49:28,,0,,<p>This is an issue of javascript context in Node Webkit. We must ensure all the javascript required inside the browser (the window context) is brought into that context by using the <code>src</code> attribute of a script tag.</p>&#xA;&#xA;<p>Node Webkit places JavaScript from <code>require()</code> statements in the nodejs global context - and makes it unavailable inside the browser.</p>&#xA;&#xA;<p>So we see errors such as <code>$ is not defined</code> or <code>$(...).button() is not a function</code> if files are in opposite contexts. </p>&#xA;,9078341,"",9078341,"",2018-02-25T03:41:09,2018-02-25T03:41:09,"","",,9,,,
45873035,2,,45870476,2017-08-25T01:16:26,,0,,"<p>See <a href=""https://docs.travis-ci.com/user/deployment/s3"" rel=""nofollow noreferrer"">https://docs.travis-ci.com/user/deployment/s3</a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The previous example is almost certainly not ideal, as you probably want to upload your built binaries and documentation. Set <code>skip_cleanup</code> to <code>true</code> to prevent Travis CI from deleting your build artifacts.</p>&#xA;</blockquote>&#xA;",136333,"",,"",,2017-08-25T01:16:26,"","",,2,,,
45875674,2,,45849749,2017-08-25T06:38:15,,0,,"<p>So it turns it my issue had something to do with the fact that I was running Angular on electron. if I put that code inside my Angular code it would error out but if I put it in the <code>index.html</code> it would run fine.<br>&#xA;So I just made a little proxy function in the <code>index.html</code> for connecting to the DB and making queries, then i'd jsut call it from inside the Angular app without a problem like <code>window.mysqlQuery(queryString)</code></p>&#xA;",4083539,"",,"",,2017-08-25T06:38:15,"","",,0,,,
45916006,2,,45914983,2017-08-28T09:40:48,,0,,"<p>This is a quick example how I would do it. (created with <em>electron-quick-start</em>) </p>&#xA;&#xA;<p>Wait for <code>mainWindow's</code> minimize event and create a new <code>BrowserWindow</code> with <code>alwaysOnTop: true</code>.</p>&#xA;&#xA;<p>Docs: <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/browser-window.md</a></p>&#xA;&#xA;<p><strong>index.html</strong></p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=""UTF-8""&gt;&#xA;    &lt;title&gt;Index&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&#xA;&lt;body&gt;&#xA;    Index&#xA;&lt;/body&gt;&#xA;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>toolbar.html</strong></p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=""UTF-8""&gt;&#xA;    &lt;title&gt;toolbar&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&#xA;&lt;body&gt;&#xA;    toolbar&#xA;&lt;/body&gt;&#xA;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p><strong>renderer.js</strong></p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const app = electron.app;&#xA;const BrowserWindow = electron.BrowserWindow;&#xA;&#xA;const path = require('path');&#xA;const url = require('url');&#xA;&#xA;let mainWindow = null;&#xA;let toolbarWindow = null;&#xA;&#xA;const createWindow = () =&gt; {&#xA;    // Create the browser window.&#xA;    mainWindow = new BrowserWindow({&#xA;        width: 800,&#xA;        height: 600&#xA;    });&#xA;&#xA;    mainWindow.loadURL(url.format({&#xA;        pathname: path.join(__dirname, 'index.html'),&#xA;        protocol: 'file:',&#xA;        slashes: true&#xA;    }));&#xA;&#xA;    mainWindow.on('closed', () =&gt; {&#xA;        mainWindow = null;&#xA;    });&#xA;&#xA;    const onCloseMainWindow = (event) =&gt; {&#xA;        toolbarWindow = new BrowserWindow({&#xA;            width: 300,&#xA;            x: 20,&#xA;            y: 40,&#xA;            height: 70,&#xA;            resize: false,&#xA;            type: 'toolbar',&#xA;            alwaysOnTop: true&#xA;        })&#xA;&#xA;        toolbarWindow.loadURL(url.format({&#xA;            pathname: path.join(__dirname, 'toolbar.html'),&#xA;            protocol: 'file:',&#xA;            slashes: true&#xA;        }));&#xA;&#xA;        toolbarWindow.on('minimize', (event) =&gt; {&#xA;            if (mainWindow) {&#xA;                mainWindow.show();&#xA;            }&#xA;            toolbarWindow.destroy();&#xA;        });&#xA;    };&#xA;&#xA;    mainWindow.on('minimize', onCloseMainWindow);&#xA;    mainWindow.on('close', onCloseMainWindow);&#xA;};&#xA;&#xA;app.on('ready', createWindow);&#xA;&#xA;app.on('window-all-closed', () =&gt; {&#xA;    if (process.platform !== 'darwin') {&#xA;        app.quit();&#xA;    }&#xA;})&#xA;&#xA;app.on('activate', () =&gt; {&#xA;    if (mainWindow === null) {&#xA;        createWindow()&#xA;    }&#xA;});&#xA;</code></pre>&#xA;",6429774,"",6429774,"",2017-08-28T10:01:43,2017-08-28T10:01:43,"","",,0,,,
45938958,2,,45938577,2017-08-29T12:17:20,,0,,"<p>I think I found the problem.&#xA;This answer helped me:&#xA;<a href=""https://github.com/electron/electron/issues/9920#issuecomment-318986025"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/9920#issuecomment-318986025</a></p>&#xA;&#xA;<p>the idea is that app, autoUpdater and a lot of other components are available on electron.remote&#xA;I don't know why, but the keyword ""remote"" denotes that you are using the same app,autoUpdater etc like in the master process.&#xA;Any other explanation?</p>&#xA;&#xA;<p>PS: I will let you know if this solution work.</p>&#xA;&#xA;<p>NOTSOLATEREDIT:</p>&#xA;&#xA;<p>this is my solution, and works smooth. Is there any better way of doing this?</p>&#xA;&#xA;<pre><code>import electron from 'electron';&#xA;const app = electron.remote.app;&#xA;const autoUpdater = electron.remote.autoUpdater;&#xA;const dialog = electron.remote.dialog;&#xA;</code></pre>&#xA;",8532388,"",,"",,2017-08-29T12:17:20,"","",,0,,,
46013355,2,,46012503,2017-09-02T11:36:21,,0,,"<p>Thanks to <a href=""https://stackoverflow.com/users/2227526/fast-snail"">Fast Snail</a>, who realized that I should execute my <code>main.js</code> using <code>electron main.js</code> - I looked up in Google for a solution and found <a href=""https://blog.jetbrains.com/webstorm/2016/05/getting-started-with-electron-in-webstorm/"" rel=""nofollow noreferrer"">this</a> very nice tutorial, which solved my problem.  </p>&#xA;&#xA;<p>The thing was that I had to specify some extra configurations in order to execute my script using Electron, from JetBrains WebStorm.<br>&#xA;Thanks a lot!</p>&#xA;",8309806,"",,"",,2017-09-02T11:36:21,"","",,0,,,
46057617,2,,45997128,2017-09-05T14:36:35,,0,,"<p>I found the answer to this.</p>&#xA;&#xA;<p>I needed to declare the on.error outside the <code>http.get</code> function.</p>&#xA;&#xA;<pre><code>var http = require('http');&#xA;var options = {&#xA;   host: 'xxx.xxxxx.io',&#xA;   path: '/remote.json',&#xA;   method: 'get'&#xA;};&#xA;&#xA;var res = http.get(options, function (res) {&#xA;   var response = """";&#xA;&#xA;   res.on(""data"", function (data) {&#xA;   response += data;&#xA;});&#xA;res.on(""end"", function () {&#xA;    console.log(""output:\n"" + response); &#xA;    var json = JSON.parse(response);&#xA;    console.log(json.type);&#xA;  });&#xA;})&#xA;&#xA;.setTimeout(3000, function() {&#xA;   console.log(""ERROR: The connection timed out."");&#xA;   res.abort();&#xA;})&#xA;&#xA;.on('error', (e) =&gt; {&#xA;  if (e.code === ""ENOENT"") {&#xA;    console.log(""ERROR: There is no Internet connection."");&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",6612673,"",,"",,2017-09-05T14:36:35,"","",,0,,,
45849908,2,,45849254,2017-08-23T21:58:08,,1,,<p>For your Electron application are you using any native modules? Generally if you aren't relying on native modules creating a Windows Web Application is fairly straight forward. For Windows Web Applications you can mix local content with remote content fairly easily.</p>&#xA;,3064183,"",,"",,2017-08-23T21:58:08,"","",,9,,,
45850450,2,,45850373,2017-08-23T22:50:09,,1,,"<p>There are docs about <a href=""http://docs.nwjs.io/en/v0.13.0-beta7/For%20Users/Debugging%20with%20DevTools/"" rel=""nofollow noreferrer"">devtools in nw</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>open DevTools programmatically using NW.js API win.showDevTools()</p>&#xA;</blockquote>&#xA;&#xA;<p>Or...</p>&#xA;&#xA;<blockquote>&#xA;  <p>Remote Debugging</p>&#xA;  &#xA;  <p>You can use the --remote-debugging-port=port command line option to specify which port the DevTools should listen to. For example, by running nw --remote-debugging-port=9222, you can open <a href=""http://localhost:9222/"" rel=""nofollow noreferrer"">http://localhost:9222/</a> in your browser to visit the debugger remotely.</p>&#xA;</blockquote>&#xA;",939701,"",,"",,2017-08-23T22:50:09,"","",,0,,,
45876285,2,,44090459,2017-08-25T07:23:27,,1,,"<p>There is <a href=""https://www.npmjs.com/package/icon-extractor"" rel=""nofollow noreferrer""><strong>icon-extractor</strong></a>&#xA;you can use it like this to extract any app icon from the system , but it must be an**"".exe""** file.</p>&#xA;&#xA;<p><code>var iconExtractor = require('icon-extractor');&#xA; var fs= require('fs');</code></p>&#xA;&#xA;<pre><code>iconExtractor.emitter.on('icon', function(data){&#xA;console.log('Here is my context: ' + data.Context);&#xA;console.log('Here is the path it was for: ' + data.Path);&#xA;var icon = data.Base64ImageData;&#xA;&#xA;fs.writeFile('img.png', icon, 'base64', (err) =&gt; {&#xA; console.log(err);&#xA;&#xA;});&#xA;});&#xA;&#xA;iconExtractor.getIcon('ANY_TEXT','PAHT_TO_APP.exe');&#xA;</code></pre>&#xA;",8515263,"",,"",,2017-08-25T07:23:27,"","",,0,,,
45878489,2,,45875849,2017-08-25T09:32:27,,1,,"<p>Explicitly specifing <code>mainFields: [""browser"", ""module"", ""main""]</code> is the right way to force webpack to use 'browser' field.</p>&#xA;&#xA;<p>The reason why it didn't help is that I mistakenly put 'w3c-blob' in my <code>externals</code>, removing it solves the problem.</p>&#xA;",4136378,"",,"",,2017-08-25T09:32:27,"","",,0,,,
45895566,2,,45895267,2017-08-26T12:51:01,,1,,"<p>To push new <code>chatId</code> to <code>users</code> array only if it does not exist, you can use <code>$addToSet</code>. According to the nedb <a href=""https://github.com/louischatriot/nedb#updating-documents"" rel=""nofollow noreferrer"">document</a>: </p>&#xA;&#xA;<blockquote>&#xA;  <p>$addToSet adds an element to an array only if it isn't already in it</p>&#xA;</blockquote>&#xA;&#xA;<p>Here is the example code:</p>&#xA;&#xA;<pre><code>var addNewUser = function (id, chatId) {&#xA;  db.update({ _id: id }, { $addToSet: { users: chatId } }, {}, function (err, numAffected) {&#xA;    // code after the record is updated&#xA;  });&#xA;}&#xA;</code></pre>&#xA;",707451,"",,"",,2017-08-26T12:51:01,"","",,3,,,
45899084,2,,45898975,2017-08-26T19:44:45,,1,,"<p>In many cases, it’ll make sense to write your script so that it can react to new files:</p>&#xA;&#xA;<pre><code>const chooser = document.getElementById('fileDialog');&#xA;&#xA;// Treat chooser as a stream of new files that can be added at any time&#xA;chooser.addEventListener(""change"", function (evt) {&#xA;    for (const f of this.files) {&#xA;        console.log(f.name);&#xA;        console.log(f.path);&#xA;        handleFile(f.name, f.path);&#xA;    }&#xA;}, false);&#xA;&#xA;// Then, when you want to prompt for a new file at any point in the future…&#xA;function promptForFiles() {&#xA;    chooser.click();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>When that’s not possible, you can instead have it hold a maximum of one handler at a time by assigning to the old but reliable <code>onchange</code> property:</p>&#xA;&#xA;<pre><code>function chooseFile(name, handleFile) {&#xA;    const chooser = document.querySelector(name);&#xA;    chooser.onchange = function () {&#xA;        for (const f of this.files) {&#xA;            console.log(f.name);&#xA;            console.log(f.path);&#xA;            handleFile(f.name, f.path);&#xA;        }&#xA;    };&#xA;    chooser.click();  &#xA;}&#xA;</code></pre>&#xA;",707111,"",,"",,2017-08-26T19:44:45,"","",,4,,,
45909248,2,,45894850,2017-08-27T20:52:34,,1,,"<p><code>windowObject.webContents.session.cookies</code> returns the defaultSession session object. Which put me on the wrong track of believing there was an unique <code>session</code> object tied to the <code>windowObject</code> object.</p>&#xA;&#xA;<p>The cookies in my case could be retrieved through the following code:</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const Window = electron.BrowserWindow;&#xA;var windowObject = new Window({show: true, webPreferences:{images:false}});&#xA;windowObject.loadURL(""https://www.tweakers.net"");&#xA;windowObject.webContents.on('did-finish-load', function() {&#xA;  windowObject.webContents.session.cookies.get({}, (error, cookies) =&gt; {&#xA;    console.log(cookies);&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>It is also possible to get all the cookies through the following code: </p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const session = electron.session;&#xA;&#xA;return session.defaultSession.cookies.get({}, (error, cookies) =&gt; {&#xA;  console.log(cookies);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>It is possible to filter on these to get the correct cookies belonging to a domain name for instance. To do this just simply use: </p>&#xA;&#xA;<pre><code>anySessionObject.cookies.get({domain: ""yourdomain.com""}, (error, cookies) =&gt; {&#xA;  console.log(cookies);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>A ticket about my findings has been opened on GitHub. You can view it here: <a href=""https://github.com/electron/electron/issues/10364"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/10364</a></p>&#xA;",904533,"",904533,"",2017-08-28T09:02:40,2017-08-28T09:02:40,"","",,0,,,
45920042,2,,45919942,2017-08-28T13:17:58,,1,,"<p>Try the following:</p>&#xA;&#xA;<pre><code>tabs.add({}, tabs[0]);&#xA;</code></pre>&#xA;&#xA;<p>What this does is it tells js to add the element at the beginning of the list (array). You can read more <a href=""https://www.w3schools.com/jsref/met_select_add.asp"" rel=""nofollow noreferrer"">Here</a>.</p>&#xA;&#xA;<p>Hope this helps!</p>&#xA;",7654934,"",,"",,2017-08-28T13:17:58,"","",,0,,,
45955944,2,,45902607,2017-08-30T08:49:57,,1,,"<p>I've found a solution by myself. The entitlement files for my app were missing.</p>&#xA;&#xA;<p>You can include them with:</p>&#xA;&#xA;<pre><code>electron-osx-sign App.app --entitlements=build/parent.entitlements --entitlements-inherit=build/child.entitlements&#xA;</code></pre>&#xA;&#xA;<p>My entitlements files are looking like the following:</p>&#xA;&#xA;<p><code>parent.entitlements</code>:</p>&#xA;&#xA;<pre><code>&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&#xA;&lt;!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd""&gt;&#xA;&lt;plist version=""1.0""&gt;&#xA;  &lt;dict&gt;&#xA;    &lt;key&gt;com.apple.security.app-sandbox&lt;/key&gt;&#xA;    &lt;true/&gt;&#xA;    &lt;key&gt;com.apple.security.assets.movies.read-write&lt;/key&gt;&#xA;    &lt;true/&gt;&#xA;    &lt;key&gt;com.apple.security.assets.music.read-write&lt;/key&gt;&#xA;    &lt;true/&gt;&#xA;    &lt;key&gt;com.apple.security.assets.pictures.read-write&lt;/key&gt;&#xA;    &lt;true/&gt;&#xA;    &lt;key&gt;com.apple.security.files.downloads.read-write&lt;/key&gt;&#xA;    &lt;true/&gt;&#xA;    &lt;key&gt;com.apple.security.files.user-selected.read-write&lt;/key&gt;&#xA;    &lt;true/&gt;&#xA;  &lt;/dict&gt;&#xA;&lt;/plist&gt;&#xA;</code></pre>&#xA;&#xA;<p><code>child.entitlements</code>:</p>&#xA;&#xA;<pre><code>&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&#xA;&lt;!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd""&gt;&#xA;&lt;plist version=""1.0""&gt;&#xA;  &lt;dict&gt;&#xA;    &lt;key&gt;com.apple.security.app-sandbox&lt;/key&gt;&#xA;    &lt;true/&gt;&#xA;    &lt;key&gt;com.apple.security.inherit&lt;/key&gt;&#xA;    &lt;true/&gt;&#xA;  &lt;/dict&gt;&#xA;&lt;/plist&gt;&#xA;</code></pre>&#xA;&#xA;<p>For more <a href=""https://github.com/electron-userland/electron-osx-sign/blob/master/bin/electron-osx-sign-usage.txt"" rel=""nofollow noreferrer"">information</a>.</p>&#xA;",2176736,"",,"",,2017-08-30T08:49:57,"","",,1,,,
45977849,2,,45925354,2017-08-31T09:22:29,,1,,"<p>I found a solution.&#xA;I changed the iframe to a webview:</p>&#xA;&#xA;<pre><code>&lt;webview id=""webview"" src=""https://stackoverflow.com/"" nodeintegration&gt;&lt;/webview&gt;&#xA;</code></pre>&#xA;&#xA;<p>The JS is now:</p>&#xA;&#xA;<pre><code>const {shell} = require('electron')&#xA;const webview = document.querySelector('webview')&#xA;webview.addEventListener('will-navigate', (e) =&gt; {&#xA;  const protocol = require('url').parse(e.url).protocol&#xA;  if (protocol === 'http:' || protocol === 'https:') {&#xA;    shell.openExternal(e.url)&#xA;  }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Instead of 'will-navigate' you can choose different actions. <a href=""https://electron.atom.io/docs/api/webview-tag/#dom-events"" rel=""nofollow noreferrer"">Find the all here</a></p>&#xA;&#xA;<pre><code>webview.addEventListener('will-navigate', (e) =&gt; {&#xA;</code></pre>&#xA;&#xA;<p>Now I have to find out, how to stop change the page in the webview.&#xA;But it open the link in the default browser.</p>&#xA;",7001531,"",,"",,2017-08-31T09:22:29,"","",,0,,,
46018549,2,,46018428,2017-09-02T21:53:47,,1,,"<p>you can wrap your divs inside a parent like this </p>&#xA;&#xA;<pre><code> &lt;div&gt;&#xA;            &lt;div class=""tabs"" id=""first""&gt;Block 1&lt;/div&gt;&#xA;            &lt;div class=""tabs"" id=""second""&gt;Block 2&lt;/div&gt;&#xA;            &lt;div class=""tabs"" id=""third""&gt;Block 3&lt;/div&gt;&#xA; &lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>now first-child will work.tested and working&#xA;i think reason is now first one is first child of it's parent</p>&#xA;",1886334,"",,"",,2017-09-02T21:53:47,"","",,0,,,
46058080,2,,46044972,2017-09-05T14:59:17,,1,,"<p>In the electron app setup, You can ignore certificate errors by: </p>&#xA;&#xA;<pre><code>app.commandLine.appendSwitch(""ignore-certificate-errors"");&#xA;</code></pre>&#xA;",1072825,"",,"",,2017-09-05T14:59:17,"","",,0,,,
45880748,2,,45874719,2017-08-25T11:49:29,,2,,"<p>If you're OK with UI provided by chrome PDF extension you can use it from electron.</p>&#xA;&#xA;<p>See <a href=""https://stackoverflow.com/questions/43220321/electron-pdf-viewer"">this question</a></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const {app, BrowserWindow} = require('electron')&#xA;&#xA;app.once('ready', () =&gt; {&#xA;  let win = new BrowserWindow({&#xA;    webPreferences: {&#xA;      plugins: true&#xA;    }&#xA;  })&#xA;  win.loadURL(__dirname + '/test.pdf')&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><em>Note, that electron's native PDF support is available only since version <code>1.6.4</code>. Before that you can use <code>electron-pdf-window</code></em></p>&#xA;",2550156,"",,"",,2017-08-25T11:49:29,"","",,2,,,
45959174,2,,38400685,2017-08-30T11:26:52,,2,,"<pre><code>    const {dialog} = require('electron').remote;&#xA;</code></pre>&#xA;&#xA;<p>...</p>&#xA;&#xA;<pre><code>document.querySelector('#fileSelect').addEventListener('click', function (event) {&#xA;    dialog.showOpenDialog({&#xA;        properties: ['openFile', 'multiSelections']&#xA;    }, function (files) {&#xA;        if (files !== undefined) {&#xA;            // handle files&#xA;        }            &#xA;    })&#xA;});&#xA;</code></pre>&#xA;",2632433,"",2632433,"",2018-06-27T01:46:45,2018-06-27T01:46:45,"","",,0,,,
46059353,2,,46055028,2017-09-05T16:12:19,,2,,"<p>Try adding this loader to your webpack config file to test .png support:</p>&#xA;&#xA;<pre><code>{ test: /\.(png|woff|woff2|eot|ttf|svg)$/, loader: 'url-loader?limit=100000' }&#xA;</code></pre>&#xA;",2756409,"",,"",,2017-09-05T16:12:19,"","",,0,,,
46074717,2,,46074407,2017-09-06T12:02:03,,2,,"<p>The Redux is making your componente state change. When a component state change (by change, not necessaray has to be a difference in it), React is gonna re-render to verify if there is updates to do in DOM (he made that by comparing the old virtual DOM with the new which he mounted). You can optimize you component returning false to shouldComponentUpdate, by doing that you previne the call of re-render:</p>&#xA;&#xA;<pre><code>shouldComponentUpdate(nextProps, nextState) {&#xA;  return false;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>but, you have to know exactly if nothing changes to you component, otherwise things will get out of control in DOM.</p>&#xA;&#xA;<p>This all you con get in the <a href=""https://facebook.github.io/react/docs/optimizing-performance.html#avoid-reconciliation"" rel=""nofollow noreferrer"">doc</a> to optimize React</p>&#xA;",8272354,"",8272354,"",2017-09-06T12:07:02,2017-09-06T12:07:02,"","",,6,,,
45859970,2,,45850802,2017-08-24T11:04:21,,3,,"<p>An error on my part and a ""go figure""</p>&#xA;&#xA;<ol>&#xA;<li>I was misusing the <code>setAutoHideMenuBar</code> command, trying to use it as an option when creating the window. The correct option syntax is <code>autoHideMenuBar: true</code>.  </li>&#xA;</ol>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code>app.on('ready', function () {&#xA;    mainWindow = new BrowserWindow({&#xA;        show: false,&#xA;        width: 1024,&#xA;        height: 768,&#xA;        minWidth: 400,&#xA;        minHeight: 200,&#xA;        resizable: true,&#xA;        backgroundColor: '#222',&#xA;        center: true,&#xA;        autoHideMenuBar: true&#xA;    }); &#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<ol start=""2"">&#xA;<li><p>To handle toggling fullscreen, in setting up my menu I used the shortcut  </p>&#xA;&#xA;<p><code>role: 'togglefullscreen'</code>   </p></li>&#xA;</ol>&#xA;&#xA;<p>While this works and includes the keyboard accelerators, the menu bar always appears and the <code>autoHideMenuBar</code>setting is apparently ignored. I don't understand why. So instead of the shortcut, I use this and the menu bar hides correctly.   </p>&#xA;&#xA;<pre><code>            {&#xA;                label: 'Toggle Full Screen',&#xA;                click: () =&gt; { toggleFullscreen();},&#xA;                accelerator: 'CmdOrCtrl+f'&#xA;            }&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<pre><code>function toggleFullscreen() {&#xA;    if (mainWindow.isFullScreen()) {&#xA;        mainWindow.setFullScreen(false);&#xA;    } else {&#xA;        mainWindow.setFullScreen(true);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",840992,"",,"",,2017-08-24T11:04:21,"","",,0,,,
45923391,2,,45922351,2017-08-28T16:20:10,,3,,"<p>A simple approach is to create a <a href=""https://nodejs.org/api/cluster.html"" rel=""nofollow noreferrer""><code>cluster</code></a> where the master process is the Electron Main and the worker process is the server.</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<ul>&#xA;<li>Change the <code>main</code> on <code>package.json</code> to <code>start.js</code></li>&#xA;<li>On <code>start.js</code> write:</li>&#xA;</ul>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>    const cluster = require('cluster');&#xD;&#xA;    if (cluster.isMaster) {&#xD;&#xA;      require('./main.js'); // your electron main file&#xD;&#xA;      cluster.fork(); &#xD;&#xA;    } else {&#xD;&#xA;      require('./server.js'); // your server code&#xD;&#xA;    }</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",3058802,"",,"",,2017-08-28T16:20:10,"","",,0,,,
45938166,2,,45920888,2017-08-29T11:39:06,,3,,"<p>You can use the <code>resize</code> event like so:</p>&#xA;&#xA;<pre><code>window.on('resize', function () {&#xA;    var size   = window.getSize();&#xA;    var width  = size[0];&#xA;    var height = size[1];&#xA;    console.log(""width: "" + width);&#xA;    console.log(""height: "" + height);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://electron.atom.io/docs/api/browser-window/#event-resize"" rel=""nofollow noreferrer"">Docs here</a></p>&#xA;",6577664,"",6577664,"",2017-08-29T20:05:00,2017-08-29T20:05:00,"","",,0,,,
46014302,2,,46014152,2017-09-02T13:26:29,,3,,"<p>Alright, I've found a solution.&#xA;There is a super good helper out there called <a href=""https://github.com/electron/electron-compile"" rel=""nofollow noreferrer"">electron-compile</a>&#xA;After following the instructions on the github site I can use my <code>npm start</code> like this:</p>&#xA;&#xA;<p>If electron is installed locally:</p>&#xA;&#xA;<pre><code>  ""scripts"": {&#xA;    ""start"": ""./node_modules/.bin/electron .""&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>If electron is installed globally:</p>&#xA;&#xA;<pre><code>  ""scripts"": {&#xA;    ""start"": ""electron .""&#xA;  }&#xA;</code></pre>&#xA;",4457744,"",4457744,"",2017-09-02T13:28:38,2017-09-02T13:28:38,"","",,1,,,
45981071,2,,45979665,2017-08-31T12:05:17,,4,,<p>For everyone that is interessted in this problem: </p>&#xA;&#xA;<p>Somehow you cannot sticky-top directly on thead (I just wonder why it worked 1 week ago...) so you have to stick the  elements to your <code>&lt;thead&gt;</code>. So just give every single <code>&lt;th&gt;</code> the <code>.sticky-top</code> class and it works without any problems. </p>&#xA;&#xA;<p>Greetings</p>&#xA;,6199464,"",5023500,"",2017-08-31T13:05:14,2017-08-31T13:05:14,"","",,0,,,
46014689,2,,42813924,2017-09-02T14:18:17,,4,,"<p>It's hard to answer your question if you don't specify exactly what happens. But below is how I solved it, I hope it can be helpful. </p>&#xA;&#xA;<p><strong>This is how I got Spectron running my Electron application in Travis (Linux only):</strong> </p>&#xA;&#xA;<p><em>.travis.yml</em></p>&#xA;&#xA;<pre><code>os:&#xA;  - linux&#xA;&#xA;language: node_js&#xA;&#xA;node_js:&#xA;  - ""7.7""&#xA;&#xA;before_script:&#xA;  - if [[ ""$TRAVIS_OS_NAME"" == ""linux"" ]]; then export DISPLAY=:99.0; fi&#xA;  - if [[ ""$TRAVIS_OS_NAME"" == ""linux"" ]]; then sh -e /etc/init.d/xvfb start; fi&#xA;  - if [[ ""$TRAVIS_OS_NAME"" == ""linux"" ]]; then sleep 3; fi&#xA;&#xA;script:&#xA;  - node --version&#xA;  - npm --version&#xA;  - npm install&#xA;  - npm run e2e&#xA;&#xA;cache:&#xA;  directories:&#xA;    - node_modules&#xA;&#xA;notifications:&#xA;  email:&#xA;    on_success: never&#xA;    on_failure: change&#xA;</code></pre>&#xA;&#xA;<p><em>utils.js</em></p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;&#xA;const beforeEach = function (env = {}) {&#xA;  this.app = new Application({&#xA;    path: electron,&#xA;    args: ['.'],&#xA;  });&#xA;&#xA;  return this.app.start();&#xA;};&#xA;&#xA;const afterEach = function () {&#xA;  if (this.app &amp;&amp; this.app.isRunning()) {&#xA;    return this.app.stop();&#xA;  }&#xA;  return undefined;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p><em>.e2e.js</em>-files</p>&#xA;&#xA;<pre><code>describe('test case', function () {&#xA;  beforeEach(testUtils.beforeEach);&#xA;  afterEach(testUtils.afterEach);&#xA;&#xA;  it('should run', function () {&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>How to store screenshots of Spectron test failures</strong></p>&#xA;&#xA;<p>If you got your tests running, but they are for some reason failing, then it can be helpful to get a screenshot from the Electron application.</p>&#xA;&#xA;<p><em>utils.js</em></p>&#xA;&#xA;<pre><code>const fs = require('fs');&#xA;const saveErrorShot = function (e) {&#xA;  const filename = `errorShot-${this.test.parent.title}-${this.test.title}-${new Date().toISOString()}.png`&#xA;    .replace(/\s/g, '_')&#xA;    .replace(/:/g, '');&#xA;&#xA;  this.app.browserWindow.capturePage().then(imageBuffer =&gt; {&#xA;    fs.writeFile(filename, imageBuffer, error =&gt; {&#xA;      if (error) throw error;&#xA;&#xA;      console.info(`Screenshot saved: ${process.cwd()}/${filename}`);&#xA;    });&#xA;  });&#xA;&#xA;  throw e;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p><em>.e2e.js</em>-files</p>&#xA;&#xA;<pre><code>describe('test case', function () {&#xA;  it('should store a screenshot', function () {&#xA;&#xA;    return this.app.client&#xA;      .then(() =&gt; this.app.client.getText('.non-existing-element')&#xA;      .catch(testUtils.saveErrorShot.bind(this));&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>To make Travis send your artifacts to an Amazon S3 bucket</strong></p>&#xA;&#xA;<p>Add your AWS S3 credentials to your Travis env variables, <a href=""https://github.com/travis-ci/artifacts"" rel=""nofollow noreferrer"">read here for more information</a>.</p>&#xA;&#xA;<p>Add the following to <em>.travis.yml</em></p>&#xA;&#xA;<pre><code>after_failure:&#xA;  - curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install | bash&#xA;  - artifacts upload $(git ls-files -o | grep -Fv -e node_modules)&#xA;  - if [[ ""$TRAVIS_OS_NAME"" == ""linux"" ]]; then artifacts upload $(ls /home/travis/.npm/_logs/); fi&#xA;</code></pre>&#xA;&#xA;<p>What it does is that it </p>&#xA;&#xA;<ol>&#xA;<li>Downloads and installs <a href=""https://github.com/travis-ci/artifacts"" rel=""nofollow noreferrer"">travis-artifacts</a></li>&#xA;<li>Uploads all untracked files in your repository, but excluding all node modules. Probably you'll have some other files you want exclude, then just append <code>-e unnecessary_folder -e unnecesarry_file</code>.</li>&#xA;<li>Uploads the npm logs from <code>/home/travis/.npm/_logs</code>. If you're running MacOS the files will appear in another folder.</li>&#xA;</ol>&#xA;",7434393,"",7434393,"",2017-09-02T15:05:13,2017-09-02T15:05:13,"","",,0,,,
46016262,2,,45743919,2017-09-02T17:13:52,,7,,"<p>In terms of end to end testing I would say that Spectron is the way to go. It can be pretty hard to get up and running, but Spectron is built upon <a href=""https://webdriver.io"" rel=""nofollow noreferrer"">WebdriverIO</a> and there you'll find a lot of documentation.</p>&#xA;&#xA;<p>To get up and running I would propose the following.</p>&#xA;&#xA;<p><code>npm install spectron mocha --save-dev</code></p>&#xA;&#xA;<p><em>my-first-test-case.e2e.js</em></p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;&#xA;describe('my first test case', function () {&#xA;&#xA;  beforeEach(() =&gt; {&#xA;    this.app = new Application({&#xA;      path: electron,&#xA;      args: ['.'],&#xA;    });&#xA;&#xA;    return this.app.start();&#xA;  });&#xA;&#xA;  afterEach(() =&gt; {&#xA;    if (this.app &amp;&amp; this.app.isRunning()) {&#xA;      return this.app.stop();&#xA;    }&#xA;  });&#xA;&#xA;  it('creates a new tab when account is added', function () {&#xA;    const accountName = 'awesomeMail';&#xA;&#xA;    return this.app.client.waitUntilWindowLoaded()&#xA;      .waitForVisible('h1')&#xA;      .getText('h1')&#xA;      .then(text =&gt; expect(text).toEqual('Welcome'));&#xA;  });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>And then you run</p>&#xA;&#xA;<p><code>mocha my-first-test-case.e2e.js</code></p>&#xA;&#xA;<p>Or if you dont have mocha installed globally</p>&#xA;&#xA;<p><code>node_modules/.bin/mocha my-first-test-case.e2e.js</code></p>&#xA;",7434393,"",7434393,"",2019-02-04T13:33:33,2019-02-04T13:33:33,"","",,3,,,
46033483,2,,46022443,2017-09-04T08:51:46,,7,,"<p>Managed to solve it by using extraResources. Should be declared under build in your <code>package.json</code> file.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<ol>&#xA;<li>Create a new folder named extraResources adjacent to pacakge.json      </li>&#xA;<li><p>Add the following code to your <code>package.json</code> file:</p>&#xA;&#xA;<p><code>""build"": {&#xA;    ""extraResources"": [""./extraResources/**""]&#xA;    }</code></p></li>&#xA;<li>Then, you can access the files inside this folder by using <code>__dirname + '/../extraResources/'</code> from your main app.</li>&#xA;</ol>&#xA;",2298995,"",5001973,"",2019-05-01T11:33:53,2019-05-01T11:33:53,"","",,1,,,
45852629,2,,45849190,2017-08-24T03:50:12,,23,,"<pre><code>const {dialog} = require('electron').remote;&#xA;&#xA;document.querySelector('#selectBtn').addEventListener('click', function (event) {&#xA;    dialog.showOpenDialog({&#xA;        properties: ['openFile', 'multiSelections']&#xA;    }, function (files) {&#xA;        if (files !== undefined) {&#xA;            // handle files&#xA;        }&#xA;    });&#xA;});&#xA;</code></pre>&#xA;",2632433,"",595833,"",2018-11-09T15:49:37,2018-11-09T15:49:37,"","",,0,,,
59498591,2,,59498577,2019-12-27T09:28:17,,1,,"<p>Just put hasShadow false while creating a window.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>  const menubarWindow = new BrowserWindow({  &#xD;&#xA;      frame: false,&#xD;&#xA;      hasShadow: false,&#xD;&#xA;      fullscreenable: false,&#xD;&#xA;      alwaysOnTop: true,&#xD;&#xA;      resizable: false,&#xD;&#xA;      minimizable: false,&#xD;&#xA;      maximizable: false,&#xD;&#xA;      transparent: true,&#xD;&#xA;      titleBarStyle: 'customButtonsOnHover',&#xD;&#xA;      closable: false,&#xD;&#xA;      webPreferences: {&#xD;&#xA;        nodeIntegration: true,&#xD;&#xA;        webSecurity: false,&#xD;&#xA;      },&#xD;&#xA;    })</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",5997390,"",,"",,2019-12-27T09:28:17,"","",,0,,,
59506144,2,,59505296,2019-12-27T21:21:30,,0,,"<p>Ended up figuring it out. The event listeners were never removed. Added 2 lines (see lines starting with +) to remove listeners. I believe ipcRenderer.on actually creates a new listener, which is why i was getting more and more.</p>&#xA;&#xA;<pre><code>    ipcRenderer.on('downloadPercentage', (event, arg) =&gt; {&#xA;      console.log(""Testpage %: "" + arg);&#xA;      that.percentage = arg&#xA;      setTimeout(function(){&#xA;        if(isMounted &amp;&amp; (arg &lt; 100)) {&#xA;          ipcRenderer.send(""downloaderPercentage"")&#xA;          that.setState({percentage: arg});&#xA;      }&#xA;       else{&#xA;        console.log(""else statement"")&#xA;        that.resultMessage = 'Installation Successful'&#xA;        that.openSnack = true;&#xA;        that.setState({currentDownload: '', percentage: 100})&#xA;        ipcRenderer.send('clear');&#xA;       + ipcRenderer.removeAllListeners('downloadPercentage');&#xA;       + ipcRenderer.removeAllListeners('downloaderPercentage');&#xA;&#xA;  }}, 500)&#xA;  })&#xA;  this.setState({currentDownload: ""Installing File: "" + version})&#xA;}&#xA;</code></pre>&#xA;",9422047,"",,"",,2019-12-27T21:21:30,"","",,0,,,
59507730,2,,59507391,2019-12-28T02:47:10,,0,,"<p>I forgot to turn off antivirus shields. That fixed it. (For the permanent solution, I then added a security exception in my antivirus app's settings.)</p>&#xA;&#xA;<p>As a note of interest, the version made by electron-forge didn't work:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/6TmTA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6TmTA.png"" alt=""screenshot of javascript error: &quot;Asked for c:\yadda\app.js but it was not precompiled!""></a></p>&#xA;&#xA;<p>However, the one made by <code>electron-packager</code> alone, worked fine.</p>&#xA;",5823893,"",5823893,"",2019-12-28T03:31:52,2019-12-28T03:31:52,"","",,0,,,
59519556,2,,59481593,2019-12-29T12:49:44,,0,,"<p><strong>Update: I fixed the problem.</strong></p>&#xA;&#xA;<p>After I debugged the fs-chunk-store which webtorrent is using, I found out that an error is thrown right before the data is writen to disk. The error occures when fs.mkdir is called to create the new path for the download destination ( ENOENT: no such file or directory, mkdir 'path/to/folder'). Without a callback function as parameter the error will not be printed to stdout.</p>&#xA;&#xA;<p>My solution now is to use a custom implementation of fs-chunk-store which allows the creation of folders recursivly.</p>&#xA;",6681755,"",,"",,2019-12-29T12:49:44,"","",,0,,,
59528901,2,,59528873,2019-12-30T09:59:48,,2,,<p>For the Microphone use - <strong>tccutil reset Microphone</strong>&#xA;For the Screen Recording use - <strong>tccutil reset ScreenCapture</strong></p>&#xA;,5997390,"",5997390,"",2019-12-30T11:24:53,2019-12-30T11:24:53,"","",,0,,,
59534169,2,,59533019,2019-12-30T16:47:11,,1,,"<p>I don't think it's currently possible, but I think it will be when <a href=""https://github.com/electron/electron/pull/19693"" rel=""nofollow noreferrer"">this PR</a> gets merged.</p>&#xA;",3479456,"",,"",,2019-12-30T16:47:11,"","",,0,,,
59542281,2,,59529585,2019-12-31T09:41:36,,4,,"<p>Here is npm plugin which provide the apis to Check and request permission to capture the screen on macOS (introduced with 10.15 Catalina)</p>&#xA;&#xA;<p><a href=""https://www.npmjs.com/package/mac-screen-capture-permissions"" rel=""nofollow noreferrer"">mac-screen-capture-permissions</a></p>&#xA;",5997390,"",,"",,2019-12-31T09:41:36,"","",,0,,,
59546090,2,,59437868,2019-12-31T15:46:24,,0,,<p>I set nodeIntegration to true and added  window.$ = window.jQuery = require('jquery');  to my mainWindow html. and now it recognizes shell.openItem.</p>&#xA;,12571422,"",,"",,2019-12-31T15:46:24,"","",,0,,,
59549201,2,,59537125,2019-12-31T23:53:57,,0,,<p>It turns out that the error is caused by importing electron's ipcRenderer which requires node integration and uses require.  The reason that commenting out the import in the index.js didn't fix the error was because it was imported in other files.</p>&#xA;,6875866,"",,"",,2019-12-31T23:53:57,"","",,0,,,
59550946,2,,59550935,2020-01-01T08:12:59,,4,,"<p>Use <code>getAttribute</code> instead, to get just the plain value of the attribute and nothing else:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const href = document.querySelector('a').getAttribute('href');&#xD;&#xA;console.log(href);</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;&#xD;&#xA;    &lt;a class=""title"" href=""/recipe/pasta""&gt;Pasta Recipe&lt;/a&gt;&#xD;&#xA;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",9515207,"",,"",,2020-01-01T08:12:59,"","",,0,,,
59554483,2,,59532597,2020-01-01T17:11:10,,1,,"<p>Got it, its fairly easy.</p>&#xA;&#xA;<p>In your renderer.js do the following:</p>&#xA;&#xA;<pre><code>var Notification = function(title,ops) {&#xA;    ipc.send(""notification-show"", {title: title, options: ops});&#xA;};&#xA;Notification.requestPermission = () =&gt; {};&#xA;Notification.permission = ""granted"";&#xA;window.Notification = Notification;&#xA;</code></pre>&#xA;&#xA;<p>This will override the Notification object and you can catch it wherever you want within the IPC channel ""notification-show"".</p>&#xA;",880292,"",,"",,2020-01-01T17:11:10,"","",,0,,,
59580853,2,,59579945,2020-01-03T15:04:02,,0,,"<p>Luckily, I have found a solution:</p>&#xA;&#xA;<pre><code>$npm install electron-rebuild --dev&#xA;$./node_modules/.bin/electron-rebuild&#xA;</code></pre>&#xA;&#xA;<p>This seems to be working, unlike the regular rebuild.</p>&#xA;",12647009,"",,"",,2020-01-03T15:04:02,"","",,0,,,
59598364,2,,59597879,2020-01-05T09:00:39,,2,,<p>Probably <code>ignore-scripts=true</code> was set in .npmrc </p>&#xA;&#xA;<p>Run: <code>npm config set ignore-scripts false</code></p>&#xA;,1909132,"",,"",,2020-01-05T09:00:39,"","",,0,,,
59601660,2,,59601588,2020-01-05T16:02:46,,1,,"<p>Your <code>delData</code> function is not waiting to delete the item from the database before calling the <code>refreshData</code> function, use:</p>&#xA;&#xA;<pre><code>function delData() {&#xA;  var data_firstName = document.getElementById('firstName').value;&#xA;&#xA;  const sqlite3 = require('sqlite3').verbose();&#xA;  let db = new sqlite3.Database('./data.db');&#xA;  db.run(`DELETE FROM Info WHERE firstName = '${data_firstName}';`, function(err, row) {&#xA;    db.close();&#xA;    refreshData();&#xA;  });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So the refresh will run after the delete.</p>&#xA;&#xA;<p>You can achieve the same results using ES6 async/await:</p>&#xA;&#xA;<pre><code>async function delData() {&#xA;  var data_firstName = document.getElementById('firstName').value;&#xA;&#xA;  const sqlite3 = require('sqlite3').verbose();&#xA;  let db = new sqlite3.Database('./data.db');&#xA;  await db.run(`DELETE FROM Info WHERE firstName = '${data_firstName}';`);&#xA;  db.close();&#xA;  refreshData();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This will wait until the db command complete, then continue the execution.</p>&#xA;",1371995,"",1371995,"",2020-01-05T16:14:19,2020-01-05T16:14:19,"","",,0,,,
59610324,2,,59557854,2020-01-06T10:20:55,,1,,"<p>Answering my own question here with credit to @snwflk who pointed me in the right direction in a comment on the original post.</p>&#xA;&#xA;<p>Whilst I have not been able to clarify with absolute certainty this solves the problem, I have also not seen the problem since.  (It's not always 100% reproducible, and its difficult to test as it requires a machine, left alone for several hours, which may or may not display the problem).  </p>&#xA;&#xA;<p>I have however rolled the fix out to a few customers and their machines seem to still be online days later, which is a good sign.  </p>&#xA;&#xA;<p>So, the solution was to disable <code>backgroundThrottling</code>  on the main <code>BrowserWindow</code> object (interval was running in the renderer processes)</p>&#xA;&#xA;<p>Docs: <a href=""https://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/browser-window#new-browserwindowoptions</a></p>&#xA;&#xA;<p>An example</p>&#xA;&#xA;<pre><code>mainWindow = new BrowserWindow({&#xA;    webPreferences: {&#xA;        backgroundThrottling: false,&#xA;    },&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>FYI be warned there have been a few bugs that prevented this setting from working, ie <a href=""https://github.com/electron/electron/issues/20974"" rel=""nofollow noreferrer"">https://github.com/electron/electron/issues/20974</a> so be sure to update your electron version.</p>&#xA;",573616,"",,"",,2020-01-06T10:20:55,"","",,0,,,
59619225,2,,59494070,2020-01-06T21:29:32,,0,,"<p>Based on some help from Easy Digital Downloads support folks, this is resolved.</p>&#xA;&#xA;<p>The issue had to do with a property in their <code>Software Licensing</code> plugin setup: ""Do not check URL"". I hadn't enabled that with the result that my API call from <code>Electron</code> failed and the one using a browser succeeded because the browser was adding headers that Electron was not. </p>&#xA;&#xA;<p>After enabling ""Do not check URL"", calls from within <code>Electron</code> work. I guess there is also an option to pass in a URL, but since I am using EDD for licensing desktop software, that didn't seem like a needed option. </p>&#xA;&#xA;<p>Anyway, hope this helps someone.</p>&#xA;",840992,"",,"",,2020-01-06T21:29:32,"","",,0,,,
59624167,2,,59563959,2020-01-07T07:44:01,,1,,"<p>i got the answer i think that this will be helpful for lot of peoples as there are no documentation for electron-react-boilerplate.&#xA;Make the nodeIntegration to true or preload js. </p>&#xA;&#xA;<pre><code>const handleVideoCallNew = async number =&gt; {&#xA;    const remote=require('electron').remote;&#xA;    const BrowserWindow=remote.BrowserWindow;&#xA;    const win = new BrowserWindow({&#xA;      height: 600,&#xA;      width: 800,&#xA;      frame:false,&#xA;      webPreferences: {&#xA;        nodeIntegration: true,&#xA;    }&#xA;    });&#xA;    win.loadURL(`file://${__dirname}/app.html#/login`);&#xA;&#xA;&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>And on the router file</p>&#xA;&#xA;<pre><code>&lt;Route path=""/login"" component={Login} /&gt;&#xA;</code></pre>&#xA;&#xA;<p>By using this code we can open the reactjs file and route to login. The app.html is main file which is loaded in main.dev.js in electron-react-boilerplate code. The hashing is simplest method to open the reactjs file.&#xA;   As the loadURL in electron only loads urls and htmls files we can't open js files. <strong>So open the main app.html and hash using routes</strong>.</p>&#xA;",12147721,"",,"",,2020-01-07T07:44:01,"","",,0,,,
59625133,2,,59605366,2020-01-07T09:03:26,,2,,"<p>This happens because for Node.js <code>require</code></p>&#xA;&#xA;<ul>&#xA;<li><code>'./window</code> and</li>&#xA;<li><code>'./Window</code> (with capital W in the begin)</li>&#xA;</ul>&#xA;&#xA;<p>is different.</p>&#xA;&#xA;<p><a href=""https://nodejs.org/api/modules.html#modules_caching"" rel=""nofollow noreferrer"">Caching</a> is case sensitive and considers them different. Thus the file is parsed twice as you noticed.</p>&#xA;&#xA;<p>You can check what's happening with</p>&#xA;&#xA;<pre><code>console.log(require.cache)&#xA;</code></pre>&#xA;&#xA;<p>You'll see <code>window</code> and <code>Window</code> as <em>keys</em> for two different Objects</p>&#xA;&#xA;<pre><code>{ ...&#xA;  'path/to/window.js': Module { ... }&#xA;  'path/to/Window.js': Module { ... }&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Some readings about the topic</p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://fredkschott.com/post/2014/06/require-and-the-module-system/"" rel=""nofollow noreferrer"">How require works</a></li>&#xA;<li><a href=""https://derickbailey.com/2016/03/09/creating-a-true-singleton-in-node-js-with-es6-symbols/"" rel=""nofollow noreferrer"">How to create real singleton classes</a></li>&#xA;</ul>&#xA;",2550156,"",2550156,"",2020-01-07T09:15:56,2020-01-07T09:15:56,"","",,0,,,
59640624,2,,59640283,2020-01-08T06:40:53,,1,,"<p>if you want the result as an array, you can split the string based on the newline character&#xA;and remove the last element</p>&#xA;&#xA;<pre><code>const resultArray = exeFiles.toString().split(""\n"")&#xA;resultArray.pop() // since last element will be empty string&#xA;console.log(resultArray);&#xA;</code></pre>&#xA;",3330871,"",,"",,2020-01-08T06:40:53,"","",,0,,,
59671463,2,,59641524,2020-01-09T20:14:40,,1,,"<p>From the <a href=""https://www.electron.build/configuration/mac"" rel=""nofollow noreferrer"">electron-builder documentation</a> you can see at the bottom of the page that you can use <code>afterSign</code> inside the <code>mac</code> configuration object ""...<em>And all common platform-specific options.</em>"", which I think is the best way to do that.   </p>&#xA;&#xA;<p>Otherwise you can see other available options <a href=""https://stackoverflow.com/a/45082999/5605822"">here</a></p>&#xA;",5605822,"",,"",,2020-01-09T20:14:40,"","",,0,,,
59672279,2,,52630580,2020-01-09T21:21:59,,1,,"<p>You're right in thinking that you should put runtime configurations under the <code>public/</code> folder, but don't import them. The import would get resolved during build time and its result would go through webpack. Instead, use <code>fetch</code> to load them via HTTP.</p>&#xA;&#xA;<p>Vue designates the <code>public</code> folder as the place to put static assets that should bypass webpack and simply by copied to <code>dist/</code>. You can access them during runtime with an HTTP request like this:</p>&#xA;&#xA;<pre><code>const getRuntimeConfig = async () =&gt; {&#xA;  const runtimeConfig = await fetch('/config');&#xA;  return await runtimeConfig.json()&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you want to use those runtime configurations in multiple Vue components without doing multiple fetches, then do one fetch in the main Javascript file that drives your Vue app (e.g. <code>src/main.js</code>) and share the result via Vue mixins, like this:</p>&#xA;&#xA;<pre><code>  Vue.mixin({&#xA;      data() {&#xA;        return {&#xA;          // Distribute runtime configs into every Vue component&#xA;          BRAND: BRAND,&#xA;          PRINTER_IP: json.printerIP&#xA;        }&#xA;      },&#xA;    });&#xA;</code></pre>&#xA;",5728283,"",,"",,2020-01-09T21:21:59,"","",,0,,,
59625318,2,,59624956,2020-01-07T09:14:51,,1,,"<p>Note that this is talking about ""native node modules"" which I assume means modules that use some ""native code"" and use the add-on library interface in order to extend node.js with native code.</p>&#xA;&#xA;<p>Electron packages a specific built of node.js in it's build tools.  Some modules you use (like the ones that are not 100% javascript, that include some native code) may need to be ""built"" for the specific version of node.js that you're running.</p>&#xA;&#xA;<p>So, all they're saying is that if you're running node v12.13.1 on your development computer, but the version of electron you're using has v10.x in it, then if you have some modules you're using that have native code in them, you may need to rebuild them for the version of V8 built into your electron environment.  This wouldn't be so much because of the variations in the  Javascript engine (those aren't usually dealt with by compiling), but because of variations in the add-on library that ""native code"" modules use.</p>&#xA;",816620,"",,"",,2020-01-07T09:14:51,"","",,1,,,
59629794,2,,59627916,2020-01-07T13:53:10,,0,,"<p>Its not a leak :)</p>&#xA;&#xA;<p>how you catch that this is a memory leak? means just because of this (on each new image load) memory increases is not a leak, when system need memory it will flush unused images from the memory. Does you also feel any other difference in your app like it become slow or something else.</p>&#xA;&#xA;<blockquote>&#xA;  <p>5 process for a single application</p>&#xA;</blockquote>&#xA;&#xA;<p>as per my knowledge electron app starts Chromium which some processes and Node.JS server have some processes.</p>&#xA;&#xA;<p>in my Experience even after close the Electron App its not removed from background. </p>&#xA;&#xA;<pre><code>electron.app.once('window-all-closed', electron.app.quit);&#xA;electron.app.once('before-quit', () =&gt; {&#xA;    window.removeAllListeners('close');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://stackoverflow.com/questions/42141191/electron-and-node-on-windows-kill-a-spawned-process"">electron and node on windows, kill a spawned process</a></p>&#xA;",718472,"",,"",,2020-01-07T13:53:10,"","",,1,,,
59657365,2,,59646384,2020-01-09T04:43:09,,1,,"<pre><code>// renderer.js&#xA;&#xA;const { shell } = require('electron');&#xA;&#xA;const parser = new DOMParser();&#xA;&#xA;const resultSection = document.querySelector('.results');&#xA;const errorMessage = document.querySelector('.error-message');&#xA;const newCmdForm = document.querySelector('.new-cmd-form');&#xA;const newCmd = document.querySelector('.new-external-cmd');&#xA;const newCmdSubmit = document.querySelector('.new-cmd-run');&#xA;const newLinkForm = document.querySelector('.new-cmd-form');&#xA;const clearStorageButton = document.querySelector('.clear-results');&#xA;&#xA;newLinkForm.addEventListener('submit', (event) =&gt; {&#xA;    event.preventDefault()&#xA;    const cmd = newCmd.value;&#xA;    console.log(event)&#xA;    processCmd('cmd');&#xA;});&#xA;&#xA;const processCmd = (cmd) =&gt; {&#xA;    var exec = require('child_process').exec;&#xA;&#xA;    exec(""ls -al"", {timeout: 10000, maxBuffer: 20000*1024},&#xA;        function(error, stdout, stderr) {&#xA;            var out = stdout.toString();&#xA;            const outArray = out.split('\n');&#xA;&#xA;            let result = '&lt;div class=""text""'&#xA;            outArray.forEach(e =&gt; {&#xA;                result += `&lt;h3&gt;${e}&lt;/h3&gt;`&#xA;            });&#xA;            result += '&lt;/div&gt;';&#xA;            resultSection.innerHTML = result;&#xA;            console.log(result)&#xA;        });&#xA;}&#xA;&#xA;const renderResults = () =&gt; {&#xA;    resultSection.innerHTML = '';&#xA;};&#xA;&#xA;renderResults();&#xA;</code></pre>&#xA;&#xA;<p>Try to use this. I added some changes at your <strong>renderer.js</strong>&#xA;This will be working well.</p>&#xA;&#xA;<p>But I'd like to recommend to do these kind of operation at main process.&#xA;You know we can use IPC api to communicate between <strong>Renderer</strong> and <strong>Main</strong> process.</p>&#xA;&#xA;<p>Have a look at this&#xA;<a href=""https://www.christianengvall.se/main-and-renderer-process-in-electron/"" rel=""nofollow noreferrer"">https://www.christianengvall.se/main-and-renderer-process-in-electron/</a></p>&#xA;&#xA;<p>But personally, I don't usually run <code>exec</code> at Renderer process. For this operation, I rather to use this such <code>exec</code> or <code>spawn</code> at main process.&#xA;We can use <strong>IPC</strong> to communicate between <strong>Main</strong> and <strong>Renderer</strong> process.</p>&#xA;&#xA;<p><strong>IPCMain</strong> is used for listening the events from the <strong>Renderer</strong> and it's available at only Main process. And <strong>IPCRenderer</strong> is used for sending the events from <strong>Renderer</strong> to <strong>Main</strong> process. So that.</p>&#xA;&#xA;<p>Using IPCRenderer, You can send the event like this at <strong>Renderer</strong> process.</p>&#xA;&#xA;<pre><code>const { ipcRenderer } = require('electron');&#xA;&#xA;async function runCommand(cmd) {&#xA;  const res = await ipcRenderer.sendSync('runCommand', cmd);&#xA;  return res;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then at Main process. (main.js)</p>&#xA;&#xA;<pre><code>// Listen runCommand event from the Renderer&#xA;// And return the result to Renderer.&#xA;ipcMain.on('runCommand', async (event, arg) =&gt; {&#xA;  event.returnValue = await runCommand(arg);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>(you can declare the runCommand(arg) function yourself as your needs)&#xA;Feel free to use whatever you'd like.</p>&#xA;",10909844,"",,"",,2020-01-09T04:43:09,"","",,1,,,
59657800,2,,59657595,2020-01-09T05:38:49,,1,,<pre><code>const path = require('path');&#xA;</code></pre>&#xA;&#xA;<p>use require not reqiure there a spelling mistake </p>&#xA;,9797396,"",,"",,2020-01-09T05:38:49,"","",,1,,,
59511519,2,,59440762,2019-12-28T13:55:14,,4,,"<p>Using the canvas capabilities to measure text could solve this problem in a performant way.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Electrons canvas text is calculated the same as the regular text, there are some diffrences in rendering though especially in reguard of anti-aliasing but that <strong>does not affect the calculation</strong>.</p>&#xA;</blockquote>&#xA;&#xA;<p>You can get the TextMetrics from any text with</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>const canvas = document.getElementById('canvas')&#xA;const ctx = canvas.getContext('2d')&#xA;&#xA;// Set your font parameters&#xA;// Docs: https://developer.mozilla.org/en-US/docs/Web/CSS/font&#xA;ctx.font = ""30px Arial"";&#xA;&#xA;// returns a TextMetrics object&#xA;// Docs: https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics&#xA;const text = ctx.measureText('Hello world')&#xA;</code></pre>&#xA;&#xA;<p>This does not include line breaks and word wraps, for this feature I would recommend you to use the <a href=""https://github.com/pixijs/pixi.js/blob/dev/packages/text/src/TextMetrics.js"" rel=""nofollow noreferrer"">text package from pixijs</a>, it uses this method already. In addition you could fork the source (MIT licence) and modify it for additional performance by enabling the experimental chromium TextMetrics features in electron and make use of it.</p>&#xA;&#xA;<p>This can be done when creating a window</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>new BrowserWindow({&#xA;  // ... rest of your window config ...&#xA;&#xA;  webPreferences: {&#xA;    experimentalFeatures: true&#xA;  }&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Now to the part I mentioned in the comments since I don't know your codebase, your calculations and everything should be happening in the Render Process. If that is not the case you definitely should move your code from the main process over to the render process, if you do file access operations or anything node specific you should still do this but in a so-called preload script </p>&#xA;&#xA;<p>it's a additional parameter in the webPreferences</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>webPreferences: {&#xA;  preload: path.join(__dirname, 'preload.js')&#xA;  experimentalFeatures: true&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In this script you have full access to node including native node modules without the use of IPC calls. The reason I discourage IPC calls for any type of function that gets called multiple times is that it is slow by nature, you need to serialize/deserialize to make them work. The default behaviour for electron is even worse since it uses JSON, except you use <code>ArrayBuffers</code>.</p>&#xA;",5115009,"",,"",,2019-12-28T13:55:14,"","",,2,,,
59628782,2,,59628294,2020-01-07T12:50:26,,3,,"<p>You can use Electron to create Desktop app and connect to Mysql database. Here are couple of useful links.</p>&#xA;&#xA;<p><a href=""https://ourcodeworld.com/articles/read/259/how-to-connect-to-a-mysql-database-in-electron-framework"" rel=""nofollow noreferrer"">https://ourcodeworld.com/articles/read/259/how-to-connect-to-a-mysql-database-in-electron-framework</a></p>&#xA;&#xA;<p><a href=""https://github.com/techiediaries/electron-mysql-demo"" rel=""nofollow noreferrer"">https://github.com/techiediaries/electron-mysql-demo</a></p>&#xA;&#xA;<p>Node JS is primarily used to create REST API, serve web pages from the server. You may create API in Node JS using Express/Restify which interacts with DB and the Electron app can consume this service. It depends on your requirement whether or not you want to have API layer.</p>&#xA;",3744656,"",,"",,2020-01-07T12:50:26,"","",,2,,,
59633042,2,,59632944,2020-01-07T17:11:14,,2,,"<p>Because tests are using node.js version installed on your computer, just upgrade it till 12th version, in your version flatMap is not provided yet</p>&#xA;",12150021,"",,"",,2020-01-07T17:11:14,"","",,2,,,
59669318,2,,59668749,2020-01-09T17:28:58,,0,,"<p>I suspect you simply need to click on the <code>{}</code> in the console to expand the result ;)</p>&#xA;&#xA;<p><a href=""https://gist.github.com/8b64eb6913d7abf210df15764c224f36"" rel=""nofollow noreferrer"">Here is</a> an <a href=""https://electronjs.org/fiddle"" rel=""nofollow noreferrer"">Electron Fiddle</a> demonstrating <code>showSaveDialog</code>.</p>&#xA;&#xA;<pre class=""lang-html prettyprint-override""><code>&lt;button id=""save""&gt;Show save dialog&lt;/button&gt;&#xA;&lt;pre id=""output""&gt;&lt;/pre&gt;&#xA;</code></pre>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>// renderer.js&#xA;const { dialog } = require('electron').remote;&#xA;&#xA;const outEl = document.getElementById('output');&#xA;function log(...args) {&#xA;  console.log(...args);&#xA;  outEl.innerText += args.join(' ');&#xA;}&#xA;&#xA;const buttonEl = document.getElementById('save');&#xA;buttonEl.addEventListener('click', async () =&gt; {&#xA;  const dialogOptions = {};&#xA;  try {&#xA;    const result = await dialog.showSaveDialog(dialogOptions);&#xA;    log('Save resolved:', result);&#xA;    const { filePath } = result;&#xA;    log('filePath --&gt;', filePath);&#xA;  } catch (e) {&#xA;    log('Save failed:', e)&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",1171509,"",,"",,2020-01-09T17:28:58,"","",,2,,,
59572196,2,,59569056,2020-01-03T01:35:34,,1,,"<p>Try using <code>currentWindow.isFullScreen()</code> instead of <code>currentWindow.isMaximized()</code>.</p>&#xA;&#xA;<p>You're using <code>currentWindow.isMaximized()</code> to check if you're full screened when you should use <code>currentWindow.isFullScreen()</code> instead.</p>&#xA;&#xA;<p>See the docs for: <a href=""https://electronjs.org/docs/api/browser-window#winisfullscreen"" rel=""nofollow noreferrer""><code>currentWindow.isFullScreen()</code></a></p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Old answer:</p>&#xA;&#xA;<p>I had problems creating my own traffic lights too, but it turns out Electron can do this for you with the <code>titleBarStyle</code> option.</p>&#xA;&#xA;<p>To use it:</p>&#xA;&#xA;<pre><code>var winObj = new BrowserWindow({&#xA;    titleBarStyle:   'hidden',&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This will create some native traffic lights in the top right window corner.</p>&#xA;&#xA;<p>Here are different values for the <code>titleBarStyle</code> option:</p>&#xA;&#xA;<p><code>default</code></p>&#xA;&#xA;<ul>&#xA;<li>Results in the standard gray opaque Mac title bar.</li>&#xA;</ul>&#xA;&#xA;<p><code>hidden</code> (Used in the example).</p>&#xA;&#xA;<ul>&#xA;<li>Results in a hidden title bar and a full size content window, yet the title bar still has the standard window controls (""traffic lights"") in the top left.</li>&#xA;</ul>&#xA;&#xA;<p><code>hiddenInset</code></p>&#xA;&#xA;<ul>&#xA;<li>Results in a hidden title bar with an alternative look where the traffic light buttons are slightly more inset from the window edge.</li>&#xA;</ul>&#xA;&#xA;<p>Have a play around with it and see what works for you.</p>&#xA;&#xA;<p>See the docs for the <a href=""https://electronjs.org/docs/api/browser-window#new-browserwindowoptions"" rel=""nofollow noreferrer""><code>BrowserWindow</code> options</a> (search for <code>titleBarStyle</code>).</p>&#xA;",6577664,"",6577664,"",2020-01-04T00:05:08,2020-01-04T00:05:08,"","",,3,,,
59668039,2,,59474847,2020-01-09T16:11:53,,1,,"<p>To put it simply the URL should be like this <code>E:\folder\musique.mp3</code> (on windows)</p>&#xA;&#xA;<p>I guess that you allow the user to choose which audio file to play. so first you will do something like this in the main process</p>&#xA;&#xA;<pre><code>ipcMain.handle('get-audio', async () =&gt; {&#xA;    let files = []&#xA;    try {&#xA;      files = (await dialog.showOpenDialog({&#xA;        properties: ['openFile', 'multiSelections']&#xA;      })).filePaths&#xA;    } catch (error) {&#xA;      console.error(error);&#xA;    }&#xA;    return files&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>in the renderer process add a button or something like that with this event </p>&#xA;&#xA;<pre><code>const files = await ipcRenderer.invoke('get-audio') &#xA;// update the stats here&#xA;</code></pre>&#xA;&#xA;<p>Then disable web security preference within BrowserWindow</p>&#xA;&#xA;<pre><code>new BrowserWindow({&#xA;    webPreferences: {&#xA;      webSecurity: false, // very important &#xA;    }&#xA;  });&#xA;</code></pre>&#xA;",8619959,"",8619959,"",2020-01-09T21:51:51,2020-01-09T21:51:51,"","",,3,,,
59547632,2,,59547031,2019-12-31T18:56:25,,0,,"<p>It's possible your click event is firing multiple times. If so, one possible solution can be found at <a href=""https://stackoverflow.com/questions/14969960/jquery-click-events-firing-multiple-times#14991189"">jQuery click events firing multiple times</a> However quick that answer is, it's also a little bit more work to reverse, if you intend to re-enable the button later.</p>&#xA;&#xA;<p>Another couple options: set and check a variable, or just disable the button.</p>&#xA;&#xA;<h1>Option 1: set and check a var</h1>&#xA;&#xA;<p>In your application vars, at the top of your main entry point:</p>&#xA;&#xA;<p><code>var ignoreClick = false;</code></p>&#xA;&#xA;<p>Then in your click handler:</p>&#xA;&#xA;<pre><code>$(document).on(""click"", ""#openBtn1"", function(event) {&#xA;  if (ignoreClick) return;&#xA;  ignoreClick = true;&#xA;  shell.openItem(value.url);&#xA;})&#xA;&#xA;</code></pre>&#xA;&#xA;<h1>Option 2: disable the button:</h1>&#xA;&#xA;<pre><code>$(document).on(""click"", ""#openBtn1"", function(event) {&#xA;  $('#openBtn1').attr('disabled', true);&#xA;  shell.openItem(value.url);&#xA;})&#xA;&#xA;</code></pre>&#xA;&#xA;<h1>Re-enabling the click-handler</h1>&#xA;&#xA;<p>Either way you will also have to decide by what logic the button gets re-enabled (or the <code>ignoreClick</code> variable gets reset to <code>false</code>). One possible example of doing this (expanding on Option 1 above) is to set a short (one second) timer:</p>&#xA;&#xA;<pre><code>$(document).on(""click"", ""#openBtn1"", function(event) {&#xA;  if (ignoreClick) return;&#xA;  ignoreClick = true;&#xA;  shell.openItem(value.url);&#xA;  setTimeout(() =&gt; { ignoreClick = false; }, 1000);&#xA;})&#xA;&#xA;</code></pre>&#xA;&#xA;<p>You can play around with that number at the end of the <code>setTimeout</code> line; it's in milliseconds, aka 1000 = 1 second. A half second or even less might suffice, albeit this is only a general/example solution.</p>&#xA;",5823893,"",5823893,"",2019-12-31T22:20:22,2019-12-31T22:20:22,"","",,4,,,
59610098,2,,59609852,2020-01-06T10:05:56,,1,,"<p>There is an API! You can <a href=""https://electronjs.org/docs/api/native-theme#nativethemethemesource"" rel=""nofollow noreferrer""><code>nativeTheme.themeSource</code></a> to <code>system</code>, <code>light</code> or <code>dark</code>.</p>&#xA;&#xA;<p>For example, in my <code>background.ts</code>, add this code:</p>&#xA;&#xA;<pre><code>import { /* existing stuff */, nativeTheme } from ""electron"";&#xA;&#xA;nativeTheme.themeSource = 'light';&#xA;</code></pre>&#xA;",265521,"",265521,"",2020-01-07T17:14:40,2020-01-07T17:14:40,"","",,5,,,
59682376,2,,59609003,2020-01-10T13:10:33,,-1,,"<p>I think <a href=""https://github.com/dilame/instagram-private-api"" rel=""nofollow noreferrer"">instagram private api client</a> will do better job than your approach</p>&#xA;",2677785,"",,"",,2020-01-10T13:10:33,"","",,5,,,
59681218,2,,59681069,2020-01-10T11:56:52,,1,,"<p>At your Renderer.js    </p>&#xA;&#xA;<pre><code>const { ipcRenderer } = require('electron');&#xA;&#xA;async function runCommand(cmd) {&#xA;  const res = await ipcRenderer.sendSync('runCommand', cmd);&#xA;  return res;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>At you main.js</p>&#xA;&#xA;<pre><code>// Listen event through runCommand channel&#xA;// And return the result to Renderer.&#xA;ipcMain.on('runCommand', async (event, arg) =&gt; {&#xA;  event.returnValue = await runCommand(arg);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This is the simplest way to communicate between main and renderer process.</p>&#xA;&#xA;<p>But I think you are going to send the result from the main process to renderer using <code>mainWindow.webContents.send('return-exe', '');</code></p>&#xA;&#xA;<p>So this means, you are sending the result through <code>return-exe</code> IPC channel from main to renderer. And you should listen event from this channel at your renderer. Like this</p>&#xA;&#xA;<pre><code>ipcRenderer.on('retrun-exe', (event, arg) =&gt; {&#xA;    ...&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>You can add this listener at your lifecycle functions. I was used to add this to <code>componentDidMount()</code> But in your case, please add this to your <code>useEffect()</code></p>&#xA;",10909844,"",10909844,"",2020-01-10T15:35:05,2020-01-10T15:35:05,"","",,11,,,
34267966,2,,33277972,2015-12-14T13:11:56,,0,,"<p>Turned out the Proxy we are using is using NTLM authentication. So in order to authenticate I must use the NTLM protocol instead of Basic. I will look into using <a href=""https://www.npmjs.com/package/proxying-agent"" rel=""nofollow noreferrer"">Proxing-agent</a> to do this authentication. Or as mentioned by <a href=""https://stackoverflow.com/users/893780/robertklep"">robertklep</a> there are some options for directly authenticating with the server using NTLM.</p>&#xA;&#xA;<p>Managed to implement this using <a href=""https://github.com/capriza/node-proxying-agent/blob/master/lib/ntlm.js"" rel=""nofollow noreferrer"">NTLM.js</a> from the node-proxying-agent and <a href=""https://github.com/request/request"" rel=""nofollow noreferrer"">request</a> using the following description of the <a href=""https://msdn.microsoft.com/en-us/library/dd925287(v=office.12).aspx"" rel=""nofollow noreferrer"">protocol</a>.</p>&#xA;",4300292,"",-1,"",2017-05-23T10:28:25,2016-02-04T11:30:10,"","",,2,,,
34277237,2,,34260297,2015-12-14T21:49:30,,0,,"<p>Thanks to @pailhead, the solution was to plot the arrows as two sets of lines calls with THREE.LinePieces. Following the original question's code, the arrow base is then implemented as. The line[i] is removed and recalculated when the vectors change.</p>&#xA;&#xA;<pre><code>// set default color&#xA;var hex = 0x00ff00;&#xA;var u,v,xx,yy,ii;&#xA;// initialise arrow bases&#xA;var lines = new THREE.Geometry();&#xA;// loop through&#xA;Geometry[i].vertices.forEach(function(point,j) &#xA;{&#xA;    // rescale&#xA;    xx = Math.floor((point.x-data[i].x0)/data[i].dx);&#xA;    yy = Math.floor((point.y-data[i].y0)/data[i].dy);&#xA;    ii = data[i].nx*yy+xx;&#xA;    u = data[i].frame[data[i].xvec][ii]*data[i].scale;&#xA;    v = data[i].frame[data[i].yvec][ii]*data[i].scale;&#xA;    lines.vertices.push(&#xA;      new THREE.Vector3(point.x+data[i].dx/2, point.y+data[i].dy/2,1), &#xA;      new THREE.Vector3(point.x+data[i].dx/2+u, point.y+data[i].dy/2+v,1)&#xA;    );&#xA;&#xA;});&#xA;var mat = new THREE.LineBasicMaterial({color:hex})&#xA;line[i] = new THREE.LineSegments( lines, material);&#xA;scene.add(line[i]);&#xA;</code></pre>&#xA;&#xA;<p>three.js r.73</p>&#xA;",3193131,"",3193131,"",2015-12-15T23:30:21,2015-12-15T23:30:21,"","",,1,,,
34331808,2,,34326304,2015-12-17T10:07:35,,0,,"<p>Found a way...:</p>&#xA;&#xA;<h2>Situation failed one: ""can't open file""</h2>&#xA;&#xA;<p>According to the official documentation: <a href=""https://github.com/atom/electron/blob/master/docs/development/build-instructions-windows.md"" rel=""nofollow noreferrer"">Build Instructions (Windows)</a></p>&#xA;&#xA;<pre><code>$ python script\bootstrap.py -v&#xA;</code></pre>&#xA;&#xA;<p>the result will be:</p>&#xA;&#xA;<pre><code>D:\Program Files\Python27\python.exe: can't open file 'scriptbootstrap.py': [Errno 2] No such file or directory&#xA;</code></pre>&#xA;&#xA;<h2>Situation failed two: ""WindowsError: [Error 3]....""</h2>&#xA;&#xA;<p>Pay attention to this:</p>&#xA;&#xA;<pre><code>$ cd script&#xA;$ python bootstrap.py -v&#xA;</code></pre>&#xA;&#xA;<p>I cd into the script folder, and run the bootstrap script, and failed.</p>&#xA;&#xA;<h1>Situation OK: Use ""/"" instead of ""\""</h1>&#xA;&#xA;<p>See the screenshot below:</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/4Haho.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4Haho.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>Explanations are welcome...</p>&#xA;&#xA;<p>--dean</p>&#xA;",1293317,"",,"",,2015-12-17T10:07:35,"","",,0,,,
34402761,2,,32165204,2015-12-21T19:15:16,,0,,"<p>If you go to the electron releases, in major/minor release notes you can see which version of nodejs it is using:&#xA;<a href=""https://github.com/atom/electron/releases/tag/v0.36.0"" rel=""nofollow"">https://github.com/atom/electron/releases/tag/v0.36.0</a></p>&#xA;&#xA;<blockquote>&#xA;  <ul>&#xA;  <li>Upgrade to Node 5.1.1.</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>I'm not totally sure which version of node arrow functions first became available but I can confirm that they are available in the latest version, 5.2.0.</p>&#xA;&#xA;<p>Relatedly, to easily switch between versions of node I highly recommend using nvm:&#xA;<a href=""https://github.com/creationix/nvm"" rel=""nofollow"">https://github.com/creationix/nvm</a></p>&#xA;&#xA;<p>That way you can easily switch to match updated versions of electron and you can automate it quite easily as well.</p>&#xA;",12958,"",,"",,2015-12-21T19:15:16,"","",,0,,,
34273280,2,,34271454,2015-12-14T17:40:17,,1,,"<p>The issues was with the select option and not having a closing <code>&lt;/select&gt;</code> tag.  Must be a bug in electron or electron's chromium version.</p>&#xA;&#xA;<pre><code>&lt;div class=""form-control"" id=""alarm""&gt;&#xA;&lt;select ng-model=""vm.clock.alarm"" ng-options=""option.title for option in vm.alarms track by option.url""&gt;&#xA;&lt;/select&gt;&#xA;&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>works</p>&#xA;",3365195,"",1016716,"",2015-12-20T12:21:10,2015-12-20T12:21:10,"","",,2,,,
34379027,2,,34336302,2015-12-20T08:01:10,,1,,"<p>From Electron <a href=""http://electron.atom.io/docs/v0.36.0/tutorial/desktop-environment-integration/#notifications-windows-linux-os-x"" rel=""nofollow"">documentation</a> you can see:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Electron conveniently allows developers to send notifications with the HTML5 Notification API, using the currently running operating system's native notification APIs to display it.</p>&#xA;</blockquote>&#xA;&#xA;<p>So, I suppose it offers only options <a href=""https://notifications.spec.whatwg.org/"" rel=""nofollow"">defined in the API</a>. </p>&#xA;",1064381,"",,"",,2015-12-20T08:01:10,"","",,0,,,
34427891,2,,34338359,2015-12-23T02:53:22,,1,,"<p>I  had to do something similar and ended up using JS:</p>&#xA;&#xA;<pre><code>$(window).keypress(function(event) {&#xA;    if (!(event.which == 61)) return true;&#xA;    # 61 is ctrl + plus on Mac, probably different on windows &#xA;    alert(""Ctrl-plus pressed"");&#xA;    event.preventDefault();&#xA;    return false; &#xA;});&#xA;</code></pre>&#xA;",1393862,"",,"",,2015-12-23T02:53:22,"","",,0,,,
34459595,2,,34457390,2015-12-25T02:43:04,,1,,"<p>There is only one copy of the V8 code, the node.js standard library is integrated into Chromium's V8 runloop. In memory, since Electron follows Chromium's multi-process model, each process will run a V8 runloop (i.e. the main process, plus one process per window).</p>&#xA;",5728,"",,"",,2015-12-25T02:43:04,"","",,1,,,
34427519,2,,34413198,2015-12-23T02:08:47,,2,,"<p>First, allow me to say I never used MySQL embedded DB. Back in the day when I searched for embedded MySQL, I couldn't find a free (the one you linked cost money) one, and even that from what I read was far from being easy to maintain.  </p>&#xA;&#xA;<p>I did number of projects that required a local DB. For most SQLite did the job like a champ. Only thing sometimes I had problem with building it. </p>&#xA;&#xA;<p>Than, a friend told me about <a href=""https://github.com/louischatriot/nedb"" rel=""nofollow"">NeDB</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Embedded persistent or in memory database for Node.js, nw.js, Electron and browsers, 100% JavaScript, no binary dependency. API is a subset of MongoDB's and it's plenty fast.</p>&#xA;</blockquote>&#xA;&#xA;<p>If you need a embedded DB in node I recommend you to have a look at it. </p>&#xA;",1393862,"",,"",,2015-12-23T02:08:47,"","",,2,,,
34403013,2,,34377670,2015-12-21T19:31:37,,3,,"<p>You can use the <a href=""https://github.com/atom/electron/blob/master/docs/api/dialog.md#dialogshowopendialogbrowserwindow-options-callback"" rel=""nofollow"">dialog.showOpenDialog</a> api.</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>dialog.showOpenDialog([browserWindow, ]options[, callback])</strong></p>&#xA;  &#xA;  <ul>&#xA;  <li>browserWindow BrowserWindow (optional)</li>&#xA;  <li>options Object&#xA;  &#xA;  <ul>&#xA;  <li>title String</li>&#xA;  <li>defaultPath String</li>&#xA;  <li>filters Array</li>&#xA;  <li>properties Array - Contains which features the dialog should use, can contain openFile, openDirectory, multiSelections and createDirectory</li>&#xA;  </ul></li>&#xA;  <li>callback Function (optional)</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p><strong>Example</strong></p>&#xA;&#xA;<pre><code>const dialog = require('electron').dialog;&#xA;console.log(dialog.showOpenDialog({ properties: [ 'openFile', 'openDirectory', 'multiSelections' ]}));&#xA;</code></pre>&#xA;",12958,"",,"",,2015-12-21T19:31:37,"","",,4,,,
34379091,2,,34330829,2015-12-20T08:13:03,,4,,"<p>I couldn't say for Sails.js since I didn't work with it, but for direct comparison of NW.js and Electron you can read more <a href=""http://tangiblejs.com/posts/nw-js-electron-compared"" rel=""nofollow"">here</a>.</p>&#xA;&#xA;<p>I've made prototype applications in both and my breakdown would be simple: difference is in Node context being available on renderer process (NW.js has it, Electron doesn't, both have their own reasons why). In my mind, Node context being available makes it easier for day-to-day development. On the other hand, Electron came a long way in 2 years (it is in the end supported by Github) and has a growing community support.</p>&#xA;&#xA;<p>I went on Electron path, since I needed to provide easy way to update application once it is in production, and Electron makes it really easy with updater.</p>&#xA;",1064381,"",,"",,2015-12-20T08:13:03,"","",,0,,,
34433436,2,,34432695,2015-12-23T10:21:07,,4,,<p>Solved it</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const remote = electron.remote;&#xA;</code></pre>&#xA;,4943147,"",,"",,2015-12-23T10:21:07,"","",,2,,,
34270607,2,,33523171,2015-12-14T15:22:14,,6,,"<p>Besides guest to host IPC calls as <a href=""https://stackoverflow.com/users/1167646/netoperator-wibby"">NetOperatorWibby</a>, it is also very useful to go from host to guest. The only way to do this at present is to use the <a href=""http://electron.atom.io/docs/latest/api/web-view-tag/#lt-webview-gt-executejavascript-code-usergesture"" rel=""nofollow noreferrer"">&lt;webview&gt;.executeJavaScript(code, userGesture)</a>. This api is a bit crude but it works.</p>&#xA;&#xA;<p>If you are working with a remote guest, like ""extending"" a third party web page, you can also utilize webview <a href=""http://electron.atom.io/docs/latest/api/web-view-tag/#preload"" rel=""nofollow noreferrer"">preload </a> attribute which executes your custom script before any other scripts are run on the page. Just note that the preload api, for security reasons, will nuke any functions that are created in the root namespace of your custom JS file when your custom script finishes, however this custodial process will not nuke any objects you declare in the root. So if you want your custom functions to persist, bundle them into a singleton object and your custom APIs will persist after the page fully loads.</p>&#xA;&#xA;<p>[update] Here is a simple example that I just finished writing: <a href=""https://github.com/JavaScriptDude/Electron-Webview-Host-to-Guest-RPC-Sample"" rel=""nofollow noreferrer"">Electron-Webview-Host-to-Guest-RPC-Sample</a></p>&#xA;",286807,"",-1,"",2017-05-23T12:25:58,2015-12-14T23:27:04,"","",,7,,,
34459977,2,,34458417,2015-12-25T04:14:59,,19,,"<p>Just simply <code>require</code> the <code>server.js</code> file in your main file (e.g. <code>app.js</code>):</p>&#xA;&#xA;<pre><code>var app = require(""app"")&#xA;  , server = require(""./server"")&#xA;  ;&#xA;&#xA;...&#xA;</code></pre>&#xA;&#xA;<p>And in the <code>server.js</code> file you can have:</p>&#xA;&#xA;<pre><code> require(""http"").createServer(function (req, res) {&#xA;     res.end(""Hello from server started by Electron app!"");&#xA; }).listen(9000)&#xA;</code></pre>&#xA;",1420197,"",640043,"",2018-01-21T21:28:34,2018-01-21T21:28:34,"","",,1,,,
39228707,2,,39139426,2016-08-30T13:21:36,,0,,"<ol>&#xA;<li><p>Are you holding entire content of a PDF in a DOM element attribute <code>this.getAttribute('data-pdffile')</code> ? This is where it may get corrupted.</p></li>&#xA;<li><p>When you call </p>&#xA;&#xA;<pre><code>window.open(pdfvar, ""_blank"");&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<p>the content is not ready to be opened like that. It should be first converted to base64 encoded url.</p>&#xA;&#xA;<pre><code>window.open('data:application/pdf,' + escape(pdfvar)); &#xA;</code></pre>&#xA;&#xA;<p><strong>UPDATE:</strong></p>&#xA;&#xA;<p>The actual problem was that the OP was trying to save the file using it's URL in ""pdfvar"" </p>&#xA;&#xA;<pre><code>fs.writeFile(filename, pdfvar);&#xA;</code></pre>&#xA;&#xA;<p>but the file created was containing only a URL itself. What was required was downloading the file first using a http library:</p>&#xA;&#xA;<ul>&#xA;<li><a href=""https://stackoverflow.com/questions/11944932/how-to-download-a-file-with-node-js-without-using-third-party-libraries"">How to download a file with Node.js (without using third-party libraries)?</a></li>&#xA;</ul>&#xA;",696535,"",-1,"",2017-05-23T12:00:50,2016-08-30T18:43:08,"","",,7,,,
39322798,2,,39282392,2016-09-05T01:10:05,,0,,"<p>Solved. Just append .catch like in the example below. </p>&#xA;&#xA;<pre><code>yield nightmare&#xA;.goto('https://facebook.com/login')&#xA;.wait("".inputtext._55r1.inputtext._1kbt.inputtext._1kbt"")&#xA;.type('input[name=""email""]', user)&#xA;.type('input[name=""pass""]', pass)&#xA;.click('button[name=login]')&#xA;.wait(29000).catch(function(err){&#xA;                  console.dir(err);&#xA;                  nightmare.end();&#xA;                });&#xA;</code></pre>&#xA;",6457612,"",,"",,2016-09-05T01:10:05,"","",,1,,,
39140378,2,,39040514,2016-08-25T08:33:58,,1,,"<p>Well you can catch the windows and change its properties.</p>&#xA;&#xA;<pre><code>var electron = require('electron');&#xA;var window = electron.remote.getCurrentWindow();&#xA;</code></pre>&#xA;&#xA;<p>Now with <code>windows</code> you can set properties using methods provides by electron itself.</p>&#xA;&#xA;<p>For more information about what you can do with the window see here: <a href=""http://electron.atom.io/docs/api/browser-window/#static-methods"" rel=""nofollow"">BrowserWindow</a></p>&#xA;",5697445,"",,"",,2016-08-25T08:33:58,"","",,0,,,
39156135,2,,39156001,2016-08-25T23:17:14,,1,,"<p><code>db.all</code> is an asynchronous function. It's callback function is not going to get executed immediately until a response has been received from your database. </p>&#xA;&#xA;<p>What is happening in your code for option 1 is that it will invoke the <code>db.all</code> function and since it is asynchronous, it will move on to the next line - that is your <code>console.log</code> and lastly <code>return larray</code> which would be empty.</p>&#xA;&#xA;<p>To fix your problem; you will need to make <code>getLocations()</code> take in a callback function as a parameter. Then when a response is received from <code>db.all</code>, populate <code>larray</code> and return it through the callback.</p>&#xA;&#xA;<p><strong>Example:</strong> <br></p>&#xA;&#xA;<p>data.js</p>&#xA;&#xA;<pre><code>function getLocations(done) {&#xA;    var sqlite3 = require('sqlite3').verbose();&#xA;    var file = 'db/locations.sqlite3';&#xA;    var db = new sqlite3.Database(file);&#xA;    var larray = [];&#xA;&#xA;    db.all('SELECT * FROM Country', function(err, rows) {&#xA;        // This code only gets called when the database returns with a response.&#xA;        rows.forEach(function(row) {&#xA;            larray.push(row.CountryName);&#xA;        })&#xA;        return done(larray);&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>model.js</p>&#xA;&#xA;<pre><code>function Locations(done) {&#xA;    return getLocations(done);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>view.js </p>&#xA;&#xA;<pre><code>function viewLocation() {&#xA;    // Pull location values from data&#xA;    var viewLoc =  Locations(function(/*OOPS, THIS WAS MISSING!!=*/results) {&#xA;        // Code only gets triggered when getLocation() calls return done(...); &#xA;        var container = document.getElementById('wrapper');&#xA;&#xA;        for (var i=0; i &lt; results.length; i++) {  &#xA;            container.insertAdjacentHTML('beforeend', '&lt;li&gt;' + results[i]);&#xA;        }&#xA;    });&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>BTW looking at your code again. It seems like <code>viewLocation()</code> is expecting something to be returned from <code>Location()</code> but from your code it is not returning anything at the moment but I suspect it could be just you trying to debug things. Anyway, that is out of the problem scope so I won't be too concern here.</p>&#xA;",4014291,"",4014291,"",2016-08-26T04:01:14,2016-08-26T04:01:14,"","",,5,,,
39214869,2,,39214568,2016-08-29T20:43:07,,1,,"<p>In data.js you send two arguments to the <code>done</code> callback:</p>&#xA;&#xA;<pre><code>return done(larray3[0], larray3[1]);&#xA;</code></pre>&#xA;&#xA;<p>This <code>done</code> function is passed through in your model.js:</p>&#xA;&#xA;<pre><code>return getCountries(done);&#xA;</code></pre>&#xA;&#xA;<p>And that <code>done</code> is passed in from view.js:</p>&#xA;&#xA;<pre><code>Countries(function(results) { // ...&#xA;</code></pre>&#xA;&#xA;<p>So it is this anonymous function (<code>function(results) {...}</code>) that is called in data.js. But notice that this function only has one parameter, so you're doing nothing with the second argument that data.js sends. <code>result</code> gets the value of <code>larray3[0]</code>, but <code>larray3[1]</code> is not captured anywhere.</p>&#xA;&#xA;<p>You could solve this in different ways. Personally, I think the design with two arrays is wrong from the start. I would not separate data that belongs in pairs (name and code) into two different arrays.</p>&#xA;&#xA;<p>Instead make an array of objects, and pass that single array around:</p>&#xA;&#xA;<p>In data.js:</p>&#xA;&#xA;<pre><code>rows.forEach(function(row) {&#xA;    larray1.push({&#xA;        name: row.CountryName,&#xA;        code: row.CountryCode&#xA;    });&#xA;})&#xA;return done(larray1);&#xA;</code></pre>&#xA;&#xA;<p>In view.js:</p>&#xA;&#xA;<pre><code>    opt.textContent = loc.name;&#xA;    opt.value = loc.code;&#xA;</code></pre>&#xA;&#xA;<p>Side-note: <code>.textContent</code> is preferred over <code>.innerHTML</code> when assigning plain text.</p>&#xA;",5459839,"",5459839,"",2016-08-29T20:49:48,2016-08-29T20:49:48,"","",,1,,,
39246891,2,,39246750,2016-08-31T10:18:17,,1,,"<p>You should be have your component name without <code>'</code>(single quote) in component option of <code>route</code>. As you already have imported <code>HeroDetailComponent</code> there in <code>app.routing.ts</code>(rotue configuration).</p>&#xA;&#xA;<pre><code>{&#xA;   path: 'detail/:id',&#xA;   component: HeroDetailComponent //&lt;-- removed quote from here&#xA;}&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>I observed that you are having <code>file</code> protocol while asking for template, it means you haven't hosted your application on server.&#xA;  Please host your application on server(lite server would also work), so that template would ask&#xA;  over <code>http</code> protocol instead of <code>file</code>.</p>&#xA;</blockquote>&#xA;",2435473,"",2435473,"",2016-08-31T10:24:42,2016-08-31T10:24:42,"","",,1,,,
39250106,2,,39249202,2016-08-31T12:47:49,,1,,"<blockquote>&#xA;  <p>The documentation for building with visual studio (not Visual Studio Code) is very sparse and everywhere generally points to using node-gyp - which is something I'm attempting to avoid and build using purely Visual Studio 2015.</p>&#xA;</blockquote>&#xA;&#xA;<p>There is a standard way of compiling native Node modules, and as a self admitted novice it would be unwise to deviate from it. I suggest you read through the <a href=""https://github.com/Microsoft/nodejs-guidelines/blob/master/windows-environment.md#configuring-your-windows-development-environment"" rel=""nofollow"">Microsoft NodeJS guidelines</a> and get your development environment properly configured to build via <code>node-gyp</code>, once that's working you can start figuring out <a href=""http://electron.atom.io/docs/tutorial/using-native-node-modules/"" rel=""nofollow"">how to rebuild native Node modules for Electron</a>.</p>&#xA;",1259938,"",,"",,2016-08-31T12:47:49,"","",,4,,,
39140247,2,,39063795,2016-08-25T08:27:15,,2,,"<p>Oh i have faced that problem. first of all i'll leave you an example of how to use the API of <code>electron-packager</code></p>&#xA;&#xA;<pre><code> var packager = require('electron-packager');&#xA;var options = {&#xA;    'arch': 'ia32',&#xA;    'platform': 'win32',&#xA;    'dir': './',&#xA;    'app-copyright': 'Paulo Galdo',&#xA;    'app-version': '2.0.5',&#xA;    'asar': true,&#xA;    'icon': './app.ico',&#xA;    'name': 'TierraDesktop',&#xA;    'ignore': ['./releases', './.git'],&#xA;    'out': './releases',&#xA;    'overwrite': true,&#xA;    'prune': true,&#xA;    'version': '1.3.2',&#xA;    'version-string':{&#xA;      'CompanyName': 'Paulo Galdo',&#xA;      'FileDescription': 'Tierra de colores', /*This is what display windows on task manager, shortcut and process*/&#xA;      'OriginalFilename': 'TierraDesktop',&#xA;      'ProductName': 'Tierra de colores',&#xA;      'InternalName': 'TierraDesktop'&#xA;    }&#xA;};&#xA;packager(options, function done_callback(err, appPaths) {&#xA;    console.log(err);&#xA;    console.log(appPaths);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Here i left you the link with all the information. <a href=""https://github.com/electron-userland/electron-packager/blob/master/docs/api.md"" rel=""nofollow"">Electron packager API</a></p>&#xA;&#xA;<p>And finally a module so you can build your installer easily, just follow their API.&#xA;<a href=""https://github.com/electron/windows-installer"" rel=""nofollow"">Windows installer</a></p>&#xA;",5697445,"",,"",,2016-08-25T08:27:15,"","",,3,,,
39155277,2,,39154874,2016-08-25T21:51:07,,2,,<p>Figured it out. I just need to copy the file into /root/.electron as a build step and the CI step that runs electron-package will use that. root being the user the CI runs as.</p>&#xA;,2912313,"",,"",,2016-08-25T21:51:07,"","",,0,,,
39177293,2,,39177116,2016-08-27T03:52:40,,2,,"<p>Probably the best way is to add the reference to the file in your package.js file since this is where all of the rest of your projects source file are referenced. Why load it latter when you can load it in your core.</p>&#xA;&#xA;<p>Here is a Electron.js tutorial that talks about the package.js file.</p>&#xA;&#xA;<p>Creating Your First Desktop App With HTML, JS and Electron]<a href=""http://browsenpm.org/package.json"" rel=""nofollow"">1</a></p>&#xA;&#xA;<p>Here is a package.js interactive guide. <a href=""http://browsenpm.org/package.json"" rel=""nofollow"">package.js walk through</a></p>&#xA;",4257303,"",4257303,"",2016-08-27T05:05:09,2016-08-27T05:05:09,"","",,5,,,
39191989,2,,39191898,2016-08-28T13:52:42,,2,,"<p>As you are using a <code>flexbox</code>, you should you that to center the <code>grey</code> area using <code>flex: 1;</code>.</p>&#xA;&#xA;<p>To align the <code>green</code> part to the left use <code>justify-content: flex-start</code> and also add <code>margin: 0</code> to the body to finish it up!</p>&#xA;&#xA;<pre><code>body {&#xA;  color: #FFFFFF;&#xA;  text-align: center;&#xA;  margin: 0;&#xA;}&#xA;.site-wrapper {&#xA;  position: fixed;&#xA;  display: table;&#xA;  width: 100%;&#xA;  height: 100%;&#xA;  min-height: 100%;&#xA;  display: flex;&#xA;  justify-content: flex-start;&#xA;  align-items: center;&#xA;}&#xA;.site-wrapper-inner {&#xA;  flex: 1;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Let me know your feedback on this. Thanks!</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>.side-nav {&#xD;&#xA;  height: 100%;&#xD;&#xA;  background-color: #23CF5F;&#xD;&#xA;  color: #FFFFFF;&#xD;&#xA;  overflow-y: auto;&#xD;&#xA;}&#xD;&#xA;a,&#xD;&#xA;a:focus,&#xD;&#xA;a:hover {&#xD;&#xA;  color: #FFFFFF;&#xD;&#xA;}&#xD;&#xA;.btn-default,&#xD;&#xA;.btn-default:hover,&#xD;&#xA;.btn-default:focus {&#xD;&#xA;  color: #333333;&#xD;&#xA;  text-shadow: none;&#xD;&#xA;  background-color: #FFFFFF;&#xD;&#xA;  border: 1px solid #FFFFFF;&#xD;&#xA;}&#xD;&#xA;html,&#xD;&#xA;body {&#xD;&#xA;  height: 100%;&#xD;&#xA;  background-color: #333333;&#xD;&#xA;}&#xD;&#xA;body {&#xD;&#xA;  color: #FFFFFF;&#xD;&#xA;  text-align: center;&#xD;&#xA;  margin: 0;&#xD;&#xA;}&#xD;&#xA;.site-wrapper {&#xD;&#xA;  position: fixed;&#xD;&#xA;  display: table;&#xD;&#xA;  width: 100%;&#xD;&#xA;  height: 100%;&#xD;&#xA;  min-height: 100%;&#xD;&#xA;  display: flex;&#xD;&#xA;  justify-content: flex-start;&#xD;&#xA;  align-items: center;&#xD;&#xA;}&#xD;&#xA;.site-wrapper-inner {&#xD;&#xA;  flex: 1;&#xD;&#xA;}&#xD;&#xA;.cover-container {&#xD;&#xA;  margin-right: auto;&#xD;&#xA;  margin-left: auto;&#xD;&#xA;}&#xD;&#xA;.inner {&#xD;&#xA;  padding: 30px;&#xD;&#xA;}&#xD;&#xA;.masthead-brand {&#xD;&#xA;  margin-top: 10px;&#xD;&#xA;  margin-bottom: 10px;&#xD;&#xA;}&#xD;&#xA;.masthead-nav &gt; li {&#xD;&#xA;  display: inline-block;&#xD;&#xA;}&#xD;&#xA;.masthead-nav &gt; li + li {&#xD;&#xA;  margin-left: 20px;&#xD;&#xA;}&#xD;&#xA;.masthead-nav &gt; li &gt; a {&#xD;&#xA;  padding-right: 0;&#xD;&#xA;  padding-left: 0;&#xD;&#xA;  font-size: 16px;&#xD;&#xA;  font-weight: bold;&#xD;&#xA;  color: #FFFFFF;&#xD;&#xA;  color: rgba(255, 255, 255, .75);&#xD;&#xA;  border-bottom: 2px solid transparent;&#xD;&#xA;}&#xD;&#xA;.masthead-nav &gt; li &gt; a:hover,&#xD;&#xA;.masthead-nav &gt; li &gt; a:focus {&#xD;&#xA;  background-color: transparent;&#xD;&#xA;  border-bottom-color: #a9a9a9;&#xD;&#xA;  border-bottom-color: rgba(255, 255, 255, .25);&#xD;&#xA;}&#xD;&#xA;.masthead-nav &gt; .active &gt; a,&#xD;&#xA;.masthead-nav &gt; .active &gt; a:hover,&#xD;&#xA;.masthead-nav &gt; .active &gt; a:focus {&#xD;&#xA;  color: #FFFFFF;&#xD;&#xA;  border-bottom-color: #FFFFFF;&#xD;&#xA;}&#xD;&#xA;@media (min-width: 768px) {&#xD;&#xA;  .masthead-brand {&#xD;&#xA;    float: left;&#xD;&#xA;  }&#xD;&#xA;  .masthead-nav {&#xD;&#xA;    float: right;&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;/*&#xD;&#xA; * Cover&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;.cover {&#xD;&#xA;  padding: 0 20px;&#xD;&#xA;}&#xD;&#xA;.cover .btn-lg {&#xD;&#xA;  padding: 10px 20px;&#xD;&#xA;  font-weight: bold;&#xD;&#xA;}&#xD;&#xA;/*&#xD;&#xA; * Footer&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;.mastfoot {&#xD;&#xA;  color: #999;&#xD;&#xA;  /* IE8 proofing */&#xD;&#xA;  color: rgba(255, 255, 255, .5);&#xD;&#xA;}&#xD;&#xA;/*&#xD;&#xA; * Affix and center&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;@media (min-width: 768px) {&#xD;&#xA;  /* Pull out the header and footer */&#xD;&#xA;  .masthead {&#xD;&#xA;    position: fixed;&#xD;&#xA;    top: 0;&#xD;&#xA;  }&#xD;&#xA;  .mastfoot {&#xD;&#xA;    position: fixed;&#xD;&#xA;    bottom: 0;&#xD;&#xA;  }&#xD;&#xA;  /* Start the vertical centering */&#xD;&#xA;  .site-wrapper-inner {&#xD;&#xA;    vertical-align: middle;&#xD;&#xA;  }&#xD;&#xA;  /* Handle the widths */&#xD;&#xA;  .masthead,&#xD;&#xA;  .mastfoot,&#xD;&#xA;  .cover-container {&#xD;&#xA;    width: 100%;&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;@media (min-width: 992px) {&#xD;&#xA;  .masthead,&#xD;&#xA;  .mastfoot,&#xD;&#xA;  .cover-container {&#xD;&#xA;    width: 700px;&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;.wrapper {&#xD;&#xA;  text-align: center;&#xD;&#xA;  max-width: 50%;&#xD;&#xA;}&#xD;&#xA;.glyphicon {&#xD;&#xA;  font-size: 30px;&#xD;&#xA;}&#xD;&#xA;.album-art {&#xD;&#xA;  margin-right: -30px;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body ng-app=""music""&gt;&#xD;&#xA;&#xD;&#xA;  &lt;div class=""site-wrapper""&gt;&#xD;&#xA;    &lt;div class=""col-sm-3 side-nav"" ng-controller=""ctrl""&gt;&#xD;&#xA;      &lt;h3&gt;&lt;a href=""#"" data-toggle=""modal"" data-target=""#myModal""&gt;Music&lt;/a&gt;&lt;/h3&gt;&#xD;&#xA;      &lt;hr&gt;&#xD;&#xA;      &lt;div ng-repeat=""song in data""&gt;&#xD;&#xA;        &lt;p&gt;&#xD;&#xA;          {{ song in data }}&#xD;&#xA;        &lt;/p&gt;&#xD;&#xA;      &lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;    &lt;div class=""col-sm-9 site-wrapper-inner""&gt;&#xD;&#xA;      &lt;div class=""cover-container""&gt;&#xD;&#xA;        &lt;div class=""inner cover""&gt;&#xD;&#xA;          &lt;div class=""container""&gt;&#xD;&#xA;            &lt;div class=""row""&gt;&#xD;&#xA;              &lt;div class=""col-sm-12""&gt;&#xD;&#xA;                &lt;img src=""../assets/sample-art.png"" height=""150"" width=""150""&gt;&#xD;&#xA;                &lt;br&gt;&#xD;&#xA;                &lt;img src=""../assets/sound_bar_dark.gif""&gt;&#xD;&#xA;                &lt;h3&gt;Track Name&lt;/h3&gt;&#xD;&#xA;                &lt;h5&gt;Artist : Album&lt;/h5&gt;&#xD;&#xA;              &lt;/div&gt;&#xD;&#xA;            &lt;/div&gt;&#xD;&#xA;            &lt;div class=""row""&gt;&#xD;&#xA;              &lt;div class=""wrapper""&gt;&#xD;&#xA;&#xD;&#xA;              &lt;/div&gt;&#xD;&#xA;            &lt;/div&gt;&#xD;&#xA;          &lt;/div&gt;&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;      &lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;/body&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",6231153,"",,"",,2016-08-28T13:52:42,"","",,0,,,
39219363,2,,39219340,2016-08-30T05:30:14,,2,,"<p>JavaScript has the function <code>addEventListener</code> which adds an event listener (surprise, surprise) to an element. The element in which the listener is applied to now listens for an event, a string passed into the function (in this case click). Once the event is triggered (in this case when a user clicks on the element), it will execute the callback, which is the function you declared. So, consider this:</p>&#xA;&#xA;<pre><code>element.addEventListener(""click"", function() {&#xA;    console.log(""hello!"");&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>This will log <code>hello</code> every time <code>element</code> is clicked.</p>&#xA;&#xA;<p>You can read more at the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"" rel=""nofollow"">Mozilla's Documentation</a>. <a href=""http://help.dottoro.com/larrqqck.php"" rel=""nofollow"">Here's</a> a list of all the available events.</p>&#xA;",5647260,"",5647260,"",2016-08-30T05:35:48,2016-08-30T05:35:48,"","",,2,,,
39262155,2,,39257088,2016-09-01T03:15:25,,2,,"<ul>&#xA;<li><code>#1</code> no longer works in Electron v1.0+.</li>&#xA;<li><code>#2</code> and <code>#3</code> are equivalent, <code>#3</code> just uses a <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"" rel=""nofollow"">destructuring assignment</a>.</li>&#xA;<li><code>#4</code> uses <a href=""https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import"" rel=""nofollow"">ES6 module import</a> syntax which NodeJS doesn't handle natively yet, so it only works if you transpile your code with Babel, or TypeScript, or some other transpiler that can transform those <code>import</code> statements to <code>require</code> statements.</li>&#xA;</ul>&#xA;",1259938,"",,"",,2016-09-01T03:15:25,"","",,1,,,
39276258,2,,39270043,2016-09-01T16:06:24,,2,,"<p>After a discussion into the <a href=""https://github.com/Electron/electron"" rel=""nofollow"">Electron</a> issues page, it appears that this problem is not solvable ; there is no way to access the DOM into a child process because Electron (like nw.js) is not designed for that.</p>&#xA;&#xA;<p>More informations at : <a href=""https://github.com/electron/electron/issues/7057"" rel=""nofollow"">https://github.com/electron/electron/issues/7057</a></p>&#xA;&#xA;<p><strong>EDIT :</strong> Finally I found another way to solve my problem by using the <code>webview</code> tag which permit to run an HTML page with Node.js features and always into a new process. More informations <a href=""https://github.com/electron/electron/issues/7057#issuecomment-244435830"" rel=""nofollow"">here</a></p>&#xA;",4016380,"",4016380,"",2016-09-02T18:11:57,2016-09-02T18:11:57,"","",,0,,,
39278024,2,,39261149,2016-09-01T17:54:42,,2,,"<p>You are on the right way. </p>&#xA;&#xA;<ol>&#xA;<li>First of all, you should continue using <code>onchange</code> event. It will listen when you change a country. When this happen, it means it's time to change the province <code>select</code>.  Also, always when you change the country, you should reset the province <code>select</code> to avoid trash from previous usage.</li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;  <p><code>&lt;select id=""country-select"" onchange=""onCountryChanged()""&gt;&lt;/select&gt;</code></p>&#xA;&#xA;<pre><code>function onCountryChanged() {&#xA;    resetProvincesSelect();&#xA;    viewProvinces($(""#country-select"").val());&#xA;}&#xA;&#xA;function resetProvincesSelect() {&#xA;    var container = document.getElementById('province-select');&#xA;    $(container).empty();&#xA;}&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<ol start=""2"">&#xA;<li>You must change your <code>viewProvinces</code> function to accept one parameter, the country code, or <code>ccode</code>. Also, you need to <code>.filter()</code> the <code>results</code> array, getting only the provinces that belongs to that country (<code>ccode</code>).</li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;<pre><code>function viewProvinces(ccode) {&#xA;    var viewPro = Provinces(function(results) {&#xA;        // Code only gets triggered when Provinces() calls return done(...); &#xA;        var container = document.getElementById('province-select');&#xA;        var fragment = document.createDocumentFragment();&#xA;        results.filter(function(el) {&#xA;            return el.ccode === ccode;&#xA;        }).forEach(function(loc, index) {&#xA;            var opt = document.createElement('option');&#xA;            opt.textContent = loc.pname;&#xA;            opt.value = loc.pcode;&#xA;            fragment.appendChild(opt);&#xA;        });&#xA;        container.appendChild(fragment);&#xA;    });&#xA;}&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<ol start=""3"">&#xA;<li>You need to include <code>ccode</code> to <code>getProvinces()</code></li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;<pre><code>{&#xA;    ccode: row.CountryCode,&#xA;    cname: row.CountryName,&#xA;    pname: row.ProvinceName,&#xA;    pcode: row.ProvinceCode&#xA;}&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<ol start=""4"">&#xA;<li>You have not provided where you're calling the main function. So, generically it will be in this way</li>&#xA;</ol>&#xA;&#xA;<blockquote>&#xA;  <p><code>viewCountries();</code></p>&#xA;</blockquote>&#xA;&#xA;<p>Optionally you can preload all provinces along side with the countries. So when you select the country, you will not need to fetch the provinces. It is a specific designing choice. You can also make <code>Provinces</code> or <code>getProvinces</code> receive <code>ccode</code>, abstracting this step from the view.</p>&#xA;&#xA;<p>I hope it helps you.</p>&#xA;",406110,"",406110,"",2016-09-01T18:05:14,2016-09-01T18:05:14,"","",,2,,,
39354117,2,,39353342,2016-09-06T16:49:49,,2,,"<p>You can use <code>Ipc</code> to send orders through your js files.</p>&#xA;&#xA;<p>In your <code>main.js</code> where you defined your electron, you can put this:</p>&#xA;&#xA;<pre><code>ipcMain.on(""shutDownDatabase"", function (event, content) {&#xA;    // shutdown operations.&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then in some part of your application code, you can put a function like this:</p>&#xA;&#xA;<pre><code>function sendShutdownOrder (content){&#xA;   var ipcRenderer = require(""electron"").ipcRenderer;&#xA;   // the content can be a parameter or whatever you want that should be required for the operation.&#xA;   ipcRenderer.send(""shutDownDatabase"", content);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Also I think you can use the events of Electron to shut down your db, this listens to the events of your mainWindow created when you start electron  </p>&#xA;&#xA;<pre><code>    mainWindow.on('closed', function () {&#xA;        // here you command to shutdowm your data base.&#xA;        mainWindow = null;&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>For more information about IPC you can see <a href=""http://electron.atom.io/docs/api/ipc-main/#ipcmain"" rel=""nofollow"">here</a> and information about the events of your window <a href=""http://electron.atom.io/docs/api/browser-window/#instance-events"" rel=""nofollow"">here</a>.</p>&#xA;",5697445,"",2402122,"",2016-09-06T22:44:31,2016-09-06T22:44:31,"","",,0,,,
39202011,2,,39164279,2016-08-29T08:46:16,,3,,"<p>I think the app signing is required to set up autoUpdater. </p>&#xA;&#xA;<p>After packaging the app. Signed the app using electron-osx-sign module, by running the following terminal command.</p>&#xA;&#xA;<pre><code>electron-osx-sign Test.app --identity 'Mac Developer: Arun (XXXXXXXXXX)'&#xA;</code></pre>&#xA;&#xA;<p>Now auto update is working fine.</p>&#xA;",3898364,"",,"",,2016-08-29T08:46:16,"","",,0,,,
39219139,2,,39219106,2016-08-30T05:09:01,,3,,"<p>Yes. The non-closable window was causing the issue. I got the solution from electron documentation itself. I used the following code to solve the issue:</p>&#xA;&#xA;<pre><code>autoUpdater.on('update-downloaded', function(){&#xA;&#xA;    mainWindow.setClosable(true);&#xA;    autoUpdater.quitAndInstall();&#xA;&#xA;});&#xA;</code></pre>&#xA;",3898364,"",,"",,2016-08-30T05:09:01,"","",,0,,,
39231081,2,,39225801,2016-08-30T15:04:53,,3,,"<p>i'll leave you my script of how i package my application with the API of electron-packager, maybe you can build your.exe with this.</p>&#xA;&#xA;<pre><code>'use strict';&#xA;var packager = require('electron-packager');&#xA;var options = {&#xA;    'arch': 'ia32',&#xA;    'platform': 'win32',&#xA;    'dir': './',&#xA;    'app-copyright': 'Paulo Galdo',&#xA;    'app-version': '2.1.6',&#xA;    'asar': true,&#xA;    'icon': './app.ico',&#xA;    'name': 'TierraDesktop',&#xA;    'out': './releases',&#xA;    'overwrite': true,&#xA;    'prune': true,&#xA;    'version': '1.3.4',&#xA;    'version-string': {&#xA;        'CompanyName': 'Paulo Galdo',&#xA;        'FileDescription': 'Tierra de colores', /*This is what display windows on task manager, shortcut and process*/&#xA;        'OriginalFilename': 'TierraDesktop',&#xA;        'ProductName': 'Tierra de colores',&#xA;        'InternalName': 'TierraDesktop'&#xA;    }&#xA;};&#xA;packager(options, function done_callback(err, appPaths) {&#xA;    console.log(""Error: "", err);&#xA;    console.log(""appPaths: "", appPaths);&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Here you can see all the options you can use on this script: <a href=""https://github.com/electron-userland/electron-packager/blob/master/docs/api.md"" rel=""nofollow"">link</a></p>&#xA;",5697445,"",,"",,2016-08-30T15:04:53,"","",,3,,,
39257107,2,,34220020,2016-08-31T19:00:20,,3,,"<p>hope this help you.</p>&#xA;&#xA;<pre><code> spawn = require(""child_process"").spawn,&#xA; mongo_server = spawn(""mongod.exe"", [""c:/mongo_path""], { cwd: process.cwd() })&#xA;</code></pre>&#xA;",3465660,"",,"",,2016-08-31T19:00:20,"","",,0,,,
39313529,2,,39312841,2016-09-04T04:24:46,,3,,"<p>Make sure you set up your event listeners inside your class instance (<code>componentDidMount</code>). Also, make sure to properly dispose any event listeners once the instance disposes (<code>componentWillUnmount</code>).</p>&#xA;&#xA;<pre><code>class SiteList extends Component {&#xA;  componentDidMount() {&#xA;    ipcRenderer.on('getSitesSuccess', this.handleSitesSuccess);&#xA;  }&#xA;&#xA;  componentWillUnmount() {&#xA;    ipcRenderer.removeListener('getSitesSuccess', this.handleSitesSuccess);&#xA;  }&#xA;&#xA;  handleSitesSuccess(event, args) {&#xA;    console.log('data', args.data);&#xA;    props.dispatch(actions.change('sites', args.data));&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you are doing a lot of ipc calls (both receive and send), have a look at <code>redux-electron-ipc</code> (<a href=""https://github.com/mariotacke/redux-electron-ipc"" rel=""nofollow"">link</a>). This removes the wiring logic for ipc calls from your actual components and lets you work directly with redux state.</p>&#xA;&#xA;<p>Note: I am the author of this plugin.</p>&#xA;",2859367,"",2859367,"",2016-09-04T17:09:43,2016-09-04T17:09:43,"","",,1,,,
39340398,2,,39332546,2016-09-06T03:54:09,,4,,"<p>You need to set <code>target: 'electron-renderer'</code> in your Webpack config, if you still have issues after that take a look at <a href=""https://github.com/chentsulin/electron-react-boilerplate"" rel=""nofollow"">https://github.com/chentsulin/electron-react-boilerplate</a></p>&#xA;",1259938,"",,"",,2016-09-06T03:54:09,"","",,2,,,
39303054,2,,39292648,2016-09-03T03:49:04,,5,,"<p>On macOS you need to listen to the <a href=""http://electron.atom.io/docs/api/app/#event-open-url-macos"" rel=""noreferrer""><code>app.open-url</code> event</a>, while on Windows the url should be available in <code>process.argv</code> (in the main process).</p>&#xA;",1259938,"",,"",,2016-09-03T03:49:04,"","",,3,,,
39170346,2,,39170104,2016-08-26T16:00:19,,6,,"<p>You can create a BrowserWindow that's modal and, if you like, frameless. See <a href=""http://electron.atom.io/docs/api/browser-window/"" rel=""noreferrer"">http://electron.atom.io/docs/api/browser-window/</a>. </p>&#xA;",446943,"",,"",,2016-08-26T16:00:19,"","",,2,,,
39297720,2,,39295951,2016-09-02T17:18:13,,7,,"<blockquote>&#xA;  <p>Where does the require() function come from?</p>&#xA;</blockquote>&#xA;&#xA;<p>The <code>require</code> in Electron is pretty much similar to <code>require</code> in Node.js. Electron is not just a web browser; it is intended for you to build desktop applications using HTML, CSS, and JavaScript. Because it is intended for more than the web, I assume that the creators of Electron added their own little touch to make it an even more awesome piece of technology that you can use. You can read more about it here: <a href=""https://nodejs.org/api/modules.html#modules_modules"" rel=""noreferrer"">https://nodejs.org/api/modules.html#modules_modules</a>.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Why can't I use the function when including the file using require?</p>&#xA;</blockquote>&#xA;&#xA;<p>It's because they are <a href=""https://en.wikipedia.org/wiki/Scope_(computer_science)"" rel=""noreferrer"">enclosed</a> inside the module, and hence why it isn't available to any other script files.</p>&#xA;&#xA;<blockquote>&#xA;  <p>How can I use function defined in files that are required?</p>&#xA;</blockquote>&#xA;&#xA;<p>In order to use the <code>flash</code> function, you would need to export it, like so:</p>&#xA;&#xA;<pre><code>function flash(text) {&#xA;  alert(""Text: "" + text + ""!"");&#xA;}&#xA;module.exports.flash = flash;&#xA;// Note: this is how we export. We assign properties to the `module.exports`&#xA;//   property, or reassign `module.exports` it to something totally&#xA;//   different. In  the end of the day, calls to `require` returns exactly&#xA;//   what `module.exports` is set to.&#xA;&#xA;console.log(""Renderer loaded."");&#xA;</code></pre>&#xA;&#xA;<p>But that alone won't let you readily use the <code>flash</code> function; you will have to&#xA;explicitly grab it from the <code>require</code> call like so:</p>&#xA;&#xA;<pre><code>&lt;script&gt;&#xA;  // You can also require other files to run in this process&#xA;  var renderer = require('./renderer.js');&#xA;&#xA;  renderer.flash('Some text');&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>When should I use require() and when should I use src=""""?</p>&#xA;</blockquote>&#xA;&#xA;<p>Disclaimer: my opinion.</p>&#xA;&#xA;<p>Prefer to use <code>require</code> always. Only use <code>script src=''</code> when you want to import libraries that don't use <code>require</code> but instead opt to declare variables globally.</p>&#xA;",538570,"",,"",,2016-09-02T17:18:13,"","",,0,,,
39297057,2,,38458857,2016-09-02T16:30:48,,10,,"<p>This is a mac-only feature.&#xA;The closest alternative is <a href=""http://electron.atom.io/docs/all/#appmakesingleinstancecallback"" rel=""noreferrer"">app.makeSingleInstance(callback)</a>.</p>&#xA;&#xA;<p>You can arrange for your app to be launched with the url as argument: myApp my-scheme://stuff</p>&#xA;&#xA;<p>Then <code>callback</code> is called with the url in whichever app process was launched first.</p>&#xA;",6170994,"",,"",,2016-09-02T16:30:48,"","",,0,,,
39174806,2,,38708419,2016-08-26T21:22:33,,12,,"<p>Here are the steps I took to add Electron to an existing AngularJS app.<br>&#xA;1. Clone an existing Angular app <code>git clone https://github.com/angular/angular-seed.git</code>.<br>&#xA;2. <code>cd angular-seed</code>.<br>&#xA;3. <code>npm install --save electron</code>.<br>&#xA;4. In /app, create a main.js file and paste:</p>&#xA;&#xA;<pre><code>const electron = require('electron')&#xA;// Module to control application life.&#xA;const app = electron.app&#xA;// Module to create native browser window.&#xA;const BrowserWindow = electron.BrowserWindow&#xA;&#xA;// Keep a global reference of the window object, if you don't, the window will&#xA;// be closed automatically when the JavaScript object is garbage collected.&#xA;let mainWindow&#xA;&#xA;function createWindow () {&#xA;  // Create the browser window.&#xA;  mainWindow = new BrowserWindow({width: 800, height: 600})&#xA;&#xA;  // and load the index.html of the app.&#xA;  mainWindow.loadURL(`file://${__dirname}/index.html`)&#xA;&#xA;  // Open the DevTools.&#xA;  //mainWindow.webContents.openDevTools()&#xA;&#xA;  // Emitted when the window is closed.&#xA;  mainWindow.on('closed', function () {&#xA;    // Dereference the window object, usually you would store windows&#xA;    // in an array if your app supports multi windows, this is the time&#xA;    // when you should delete the corresponding element.&#xA;    mainWindow = null&#xA;  })&#xA;}&#xA;&#xA;// This method will be called when Electron has finished&#xA;// initialization and is ready to create browser windows.&#xA;// Some APIs can only be used after this event occurs.&#xA;app.on('ready', createWindow)&#xA;&#xA;// Quit when all windows are closed.&#xA;app.on('window-all-closed', function () {&#xA;  // On OS X it is common for applications and their menu bar&#xA;  // to stay active until the user quits explicitly with Cmd + Q&#xA;  if (process.platform !== 'darwin') {&#xA;    app.quit()&#xA;  }&#xA;})&#xA;&#xA;app.on('activate', function () {&#xA;  // On OS X it's common to re-create a window in the app when the&#xA;  // dock icon is clicked and there are no other windows open.&#xA;  if (mainWindow === null) {&#xA;    createWindow()&#xA;  }&#xA;})&#xA;&#xA;// In this file you can include the rest of your app's specific main process&#xA;// code. You can also put them in separate files and require them here.&#xA;</code></pre>&#xA;&#xA;<ol start=""5"">&#xA;<li>In /app, create a blank renderer.js file.<br></li>&#xA;<li>In root of package.json add <code>""main"": ""main.js""</code>.<br></li>&#xA;<li>In ""scripts"" section of package.json change ""start"" to <code>""start"": ""electron .""</code>.<br></li>&#xA;<li><code>npm install &amp;&amp; npm start</code>.</li>&#xA;</ol>&#xA;",2255569,"",3095195,"",2017-10-03T14:12:18,2017-10-03T14:12:18,"","",,5,,,
39305399,2,,39249886,2016-09-03T09:33:07,,15,,"<p>Electron windows are rendered in their own process. Because of this there is little if any communication between main process and render processes. The best you can do is catch errors in the render process and use Electrons IPC module to pass them back to your main process.</p>&#xA;&#xA;<p>In your render process:</p>&#xA;&#xA;<pre><code>var ipc = require('electron').ipcRenderer;&#xA;window.onerror = function(error, url, line) {&#xA;    ipc.send('errorInWindow', error);&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>In your main process:</p>&#xA;&#xA;<pre><code>var ipc = require('electron').ipcMain;&#xA;&#xA;ipc.on('errorInWindow', function(event, data){&#xA;    console.log(data)&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Additionally your main process can watch for a limited set of events directly on the window (or on the windows <code>webContents</code>):</p>&#xA;&#xA;<pre><code>window.on('unresponsive', function() {&#xA;    console.log('window crashed');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>...</p>&#xA;&#xA;<pre><code>window.webContents.on('did-fail-load', function() {&#xA;    console.log('window failed load');&#xA;});&#xA;</code></pre>&#xA;",418710,"",418710,"",2017-12-17T03:50:42,2017-12-17T03:50:42,"","",,8,,,
39256923,2,,39235060,2016-08-31T18:48:36,,-1,,"<p>There are many websites where you can download good icons for free, which you can use for the tray icon. </p>&#xA;&#xA;<p>Check out <a href=""https://www.iconfinder.com/"" rel=""nofollow"">https://www.iconfinder.com/</a></p>&#xA;&#xA;<p>To add your own image, use a png image with transparent background. Resize it using photoshop or any other image tools. Remember to save it as png file. I think the black square is because the image is not in png format or the background is not transparent</p>&#xA;",3898364,"",,"",,2016-08-31T18:48:36,"","",,0,,,
48418932,2,,48418855,2018-01-24T09:28:16,,1,,"<p>In usual <code>Mocha</code> tests, <code>document</code> is just an empty object, just to pass tests which rely on document events or API. In your case, i think you need to look at something like Spectron testing framework, to be able to get instance of app window and access to real document of your application: <a href=""https://electronjs.org/spectron"" rel=""nofollow noreferrer"">https://electronjs.org/spectron</a></p>&#xA;",2120541,"",,"",,2018-01-24T09:28:16,"","",,0,,,
48425165,2,,48422746,2018-01-24T14:43:40,,3,,"<p>You can use the BrowserWindow function :</p>&#xA;&#xA;<blockquote>&#xA;  <p>setIgnoreMouseEvents(boolean)</p>&#xA;</blockquote>&#xA;&#xA;<p>A simple example, given BrowserWindow <strong><em>win</em></strong>, can be:</p>&#xA;&#xA;<pre><code>win.setIgnoreMouseEvents(true);&#xA;</code></pre>&#xA;",6081475,"",,"",,2018-01-24T14:43:40,"","",,0,,,
48438919,2,,48422871,2018-01-25T08:51:59,,5,,"<p>I was able to do this by putting the code that creates the shortcut in side the <code>customInstall</code> macro in a custom instllaer script for NSIS</p>&#xA;&#xA;<p>In <code>package.json</code></p>&#xA;&#xA;<pre><code>""build"": {&#xA;  ""nsis"": {&#xA;      ""include"": ""build/installer.nsh"",&#xA;  },&#xA;</code></pre>&#xA;&#xA;<p>This is to be able to use a custom script.</p>&#xA;&#xA;<p>And in the <code>build/installer.nsh</code> </p>&#xA;&#xA;<pre><code>!macro customInstall&#xA;      CreateShortCut ""$SMSTARTUP\filename.lnk"" ""$INSTDIR\filename.exe""&#xA;!macroend&#xA;</code></pre>&#xA;",2444924,"",2444924,"",2018-01-25T13:44:49,2018-01-25T13:44:49,"","",,0,,,
48444103,2,,48443952,2018-01-25T13:32:20,,1,,"<p>Don't store the promises, store the <code>resolve</code> functions:</p>&#xA;&#xA;<pre><code>const worker = child_process.fork(__dirname + '/w.js');&#xA;const jobs = new Map();&#xA;let job_id;&#xA;&#xA;worker.on('message', message =&gt; {&#xA;  const job_id = message.job_id;&#xA;  const resolve = jobs.get(job_id);&#xA;  jobs.delete(job_id);&#xA;  resolve(message);&#xA;});&#xA;&#xA;function send(data){&#xA;  data.job_id = job_id++;&#xA;  worker.send(data);&#xA;  return new Promise(resolve =&gt; {&#xA;    jobs.set(job_id, resolve);&#xA;  });&#xA;}&#xA;</code></pre>&#xA;",1048572,"",,"",,2018-01-25T13:32:20,"","",,0,,,
48454254,2,,47773797,2018-01-26T00:45:57,,0,,"<p>I ran into this issue myself. First of all, your first snippet in package.json is related to Electron Builder <em>not</em> Electron Packager.</p>&#xA;&#xA;<p>So if you plan to use electron-packager make sure that your npm run build script uses it and not builder.</p>&#xA;&#xA;<p>Here is how I fixed the icon issue with Electron Packager:</p>&#xA;&#xA;<p>In you config for electron-packager you'll point to the plist file, as well as add an entry to copy the icon file into the resources folder of the app.</p>&#xA;&#xA;<p>In your electron-packager config you need these two entries:</p>&#xA;&#xA;<pre><code>extraResource: ""app/icons/document-icon.icns"",&#xA;extendInfo: ""build-files/Info.plist""&#xA;</code></pre>&#xA;&#xA;<p>Then in your plist you can just use the icon name:</p>&#xA;&#xA;<pre><code>&lt;key&gt;CFBundleTypeIconFile&lt;/key&gt;&#xA;&lt;string&gt;document-icon.icns&lt;/string&gt;&#xA;</code></pre>&#xA;&#xA;<p>Finally, you might need to relaunch the Finder for it to take effect if you've already associated the file before.</p>&#xA;&#xA;<p>Hope this helps!</p>&#xA;",8005106,"",,"",,2018-01-26T00:45:57,"","",,0,,,
48454353,2,,48450356,2018-01-26T00:58:39,,1,,"<p>this is what am currenlty using in an electron app am building</p>&#xA;&#xA;<pre><code>const iterateDir = () =&gt; {&#xA;&#xA;    const files = [],&#xA;        dirs = [];&#xA;&#xA;    return function dirIt(directory) {&#xA;&#xA;        try {&#xA;&#xA;            let dirContent = fs.readdirSync(directory);&#xA;&#xA;            dirContent.forEach( path =&gt; {&#xA;&#xA;                const fullPath = join(directory,path);&#xA;&#xA;                if ( fs.statSync(fullPath).isFile() )&#xA;                    files.push(fullPath);&#xA;                else&#xA;                    dirs.push(fullPath);&#xA;            });&#xA;&#xA;            if ( dirs.length !== 0 )&#xA;&#xA;                dirIt(dirs.pop());&#xA;&#xA;            return files;&#xA;&#xA;        } catch(ex) {&#xA;            console.log(ex);&#xA;            return false;&#xA;        }&#xA;    };&#xA;&#xA;};&#xA;</code></pre>&#xA;",5402401,"",,"",,2018-01-26T00:58:39,"","",,0,,,
48471002,2,,48470637,2018-01-26T23:28:47,,0,,"<p>This appears to be an old ""bug"" in nwjs wherein required modules receive a different the node version of <code>console</code> rather than the WebKit version.</p>&#xA;&#xA;<p>The bug is described here: <a href=""https://github.com/nwjs/nw.js/issues/196"" rel=""nofollow noreferrer"">https://github.com/nwjs/nw.js/issues/196</a></p>&#xA;&#xA;<p>A workaround suggested by @karlrwjohnson is to pass <code>console</code> as an argument to your module functions.</p>&#xA;",353278,"",353278,"",2018-05-19T05:39:01,2018-05-19T05:39:01,"","",,0,,,
48476887,2,,48476061,2018-01-27T14:42:09,,10,,"<p>Ok, finally I've found the solution worked for me. The 'target' option should be defined in <code>webpack.config.js</code>. And it shouldn't be <code>{ target: 'node' }</code>, as I tried before</p>&#xA;&#xA;<p>As it appears, Webpack has specific target settings for electron apps, therefore the correct way is to set it:</p>&#xA;&#xA;<pre><code>{&#xA;    // for files that should be compiled for electron main process&#xA;    target: 'electron-main'&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>or</p>&#xA;&#xA;<pre><code>{&#xA;    // for files that should be compiled for electron renderer process&#xA;    target: 'electron-renderer'&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>That's it. Just need to read docs carefully :- (</p>&#xA;",1820686,"",,"",,2018-01-27T14:42:09,"","",,0,,,
48477632,2,,48472053,2018-01-27T16:02:46,,0,,"<p>Got it to work. I had to just convert data as ArrayBuffer</p>&#xA;&#xA;<p>here is my final working code:</p>&#xA;&#xA;<pre><code>    var fs = require('fs');&#xA;    var f = document.getElementById('file').files[0],&#xA;        r = new FileReader();&#xA;    // console.log('srcPath='+f.path);&#xA;    // console.log('savPath='+f.name);&#xA;&#xA;    r.onloadend = function(e) {&#xA;        var data = e.target.result;&#xA;        try {&#xA;            fs.writeFileSync('uploads/' + f.name, Buffer.from(new Uint8Array(this.result)));&#xA;            console.log('saved sucessfully!');&#xA;        } catch (e) {&#xA;            alert('Failed to save the file !');&#xA;        }&#xA;        //send your binary data via $http or $resource or do anything else with it&#xA;    }&#xA;&#xA;    r.readAsArrayBuffer(f);&#xA;    console.log('binary=' + r);&#xA;</code></pre>&#xA;",2374333,"",,"",,2018-01-27T16:02:46,"","",,0,,,
48502470,2,,48465796,2018-01-29T13:31:16,,0,,"<p>So it appears that Mocha does not work natively with Electron and that is why I had this error.</p>&#xA;&#xA;<p>Fortunately, there is a package from Npm that allows to use Mocha in Electron: <a href=""https://www.npmjs.com/package/electron-mocha"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/electron-mocha</a></p>&#xA;&#xA;<p>Follow the instruction and it should be alright.</p>&#xA;",9273362,"",,"",,2018-01-29T13:31:16,"","",,0,,,
48509929,2,,48509186,2018-01-29T21:04:30,,2,,"<p>Per comment, I think there are some misreadings what Observable can do vs. can't do. Observable allows you to handle various asynchronous time-series event in a specific manner. Electron's remote module is entirely different, it aims to expose some of proxy object between processes in Electron. </p>&#xA;&#xA;<p>For handling IPC's messages via observable, you could easily create event bindngs like <code>fromEvent(IPCxxx, 'channel') //chain operator as you need</code> but it doesn't gets rid of necessary of IPC itself, as it is essential to use any kind of ipc mechanism between processes in Electron - just matter of which mechanism you'll choose for.</p>&#xA;",2742189,"",,"",,2018-01-29T21:04:30,"","",,0,,,
48522805,2,,48522547,2018-01-30T13:38:11,,0,,<p>Yes it's possible.</p>&#xA;&#xA;<p>You just need to export function from the main file and then import your main file inside <code>request.js</code>:</p>&#xA;&#xA;<pre><code>// main.js:&#xA;&#xA;module.exports.someFunction = function() {&#xA;    // Some code&#xA;};&#xA;&#xA;const request = require('./request.js');&#xA;request.someRequestFunction();&#xA;&#xA;// request.js&#xA;&#xA;var main = require('./main.js');&#xA;&#xA;module.exports = {&#xA;    someRequestFunction: function() {&#xA;        main.someFunction(); // Call function from main module&#xA;    }&#xA;};&#xA;</code></pre>&#xA;,4916808,"",,"",,2018-01-30T13:38:11,"","",,0,,,
48526645,2,,48412365,2018-01-30T16:54:09,,1,,"<p>In the end, this situation was not resolvable by trying to get <code>electron-rebuild</code> to somehow see the configuration set by <code>npm msvs_version</code> setting. In my situation, the toolsets of MS Visual Studio 2015 and 2017 were both installed during the process and it seems that some of this install/uninstall process had caused issues.</p>&#xA;&#xA;<p>What I did to resolve this issue was:</p>&#xA;&#xA;<ol>&#xA;<li><p>First, I uninstalled all versions of MSBuild tools, MS Visual Studio&#xA;(2015 and 2017, in my case) and even Python.</p></li>&#xA;<li><p>I then followed ""Option 1"" of the ""Windows"" specific instructions at&#xA;<a href=""https://www.npmjs.com/package/node-gyp#installation"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/node-gyp#installation</a> by doing the&#xA;<code>npm install --global --production windows-build-tools</code></p></li>&#xA;<li><p>Because all the VS, MSBuild tools AND Python were re-installed by&#xA;<code>windows-build-tools</code> package install, the Python settings seemed to&#xA;be slightly incomplete. To resolve that I did the following:</p>&#xA;&#xA;<p>a) Configure Node to see Python (run npm config set python&#xA;     <code>""C:\Users\MyUser\.windows-build-tools\python27\python.exe""</code>)</p>&#xA;&#xA;<p>b) Set the PYTHON environment variable. You can do this by either using the CONTROL PANEL or at an elevated CMD you can run</p>&#xA;&#xA;<p><code>set PYTHON ""C:\Users\MyUser\.windows-build-tools\python27\python.exe""</code></p></li>&#xA;</ol>&#xA;&#xA;<p>After that, everything worked.</p>&#xA;",3946706,"",,"",,2018-01-30T16:54:09,"","",,0,,,
48529844,2,,48529613,2018-01-30T20:18:49,,0,,"<p>Yeah, so not sure what changed.  Went back in and rebuilt and packaged and now it's showing up and the app is running on the windows machine and notifications are working....so...yeah....</p>&#xA;",1938923,"",,"",,2018-01-30T20:18:49,"","",,0,,,
48551955,2,,48549441,2018-01-31T21:44:46,,0,,"<p>I was able to set the zoom successfully after the 'did-stop-loading' event fires. Try:</p>&#xA;&#xA;<pre><code>  var webview = document.getElementById('loo');&#xA;  webview.addEventListener('did-stop-loading', function() {&#xA;    webview.setZoomFactor(0.8);&#xA;  }, false);&#xA;</code></pre>&#xA;",9150989,"",,"",,2018-01-31T21:44:46,"","",,0,,,
48574321,2,,48574120,2018-02-02T01:19:02,,1,,"<p>i prefer 1st one but if you want to use the second , i would extend the makepassword component from PureComponent to optimize your component.</p>&#xA;&#xA;<p>Instead of writing shouldComponentUpdate() by hand, you can inherit from React.PureComponent. It is equivalent to implementing shouldComponentUpdate() with a shallow comparison of current and previous props and state. - source react docs</p>&#xA;&#xA;<pre><code>class MakePassword extends React.PureComponent{&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;",8208248,"",,"",,2018-02-02T01:19:02,"","",,0,,,
48582621,2,,48556958,2018-02-02T12:23:30,,0,,"<p>Unfortunately, the code <code>shell.openExternal(""mailto:xyz@abc.com?subject=MySubject&amp;body="");</code> only launches the MUA which is configured as the default in the system settings. Oftentimes in older version of windows there is no default mail client set and so it won’t work regardless.</p>&#xA;",6940664,"",,"",,2018-02-02T12:23:30,"","",,0,,,
48590158,2,,48589834,2018-02-02T20:07:54,,1,,"<p>You can check out LSP protocol spec : <a href=""https://github.com/Microsoft/language-server-protocol"" rel=""nofollow noreferrer"">https://github.com/Microsoft/language-server-protocol</a> and server implementation : <a href=""https://github.com/Microsoft/vscode-languageserver-node"" rel=""nofollow noreferrer"">https://github.com/Microsoft/vscode-languageserver-node</a> which VS code is using for their language service.</p>&#xA;",2742189,"",,"",,2018-02-02T20:07:54,"","",,0,,,
48594213,2,,48593064,2018-02-03T05:21:27,,1,,"<p>If I am not mistaken, excluding darwin platform is just to replicate that OS behaviour: on Windows and Linux, the convention is to terminate (quit) the software when a user closes its window; whereas on macOS, the convention is to keep the process in background.</p>&#xA;&#xA;<p>There is nothing preventing you from breaking that convention and to make quit the app when the user closes the window.</p>&#xA;",5108796,"",,"",,2018-02-03T05:21:27,"","",,0,,,
48596194,2,,48594344,2018-02-03T10:13:22,,3,,"<p>When running <code>npm i --save-dev electron</code> the package will be installed in <code>/home/ole/angular-electron/node_modules/electron</code> (as you can see). To execute the binary you need to run <code>/home/ole/angular-electron/node_modules/.bin/electron</code> or <code>$(npm bin)/electron</code>.</p>&#xA;&#xA;<p>I propose that you'll add a script in your <code>package.json</code> to run electron, for example:</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ""start"": ""electron""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>npm will then automatically look into <code>node_modules/.bin</code>. </p>&#xA;",7434393,"",,"",,2018-02-03T10:13:22,"","",,0,,,
48626369,2,,48622373,2018-02-05T15:51:23,,1,,"<p><strong>Please note</strong>:<br /></p>&#xA;&#xA;<ol>&#xA;<li>This is not a ""permanent solution"", this is just a temporary hotfix before electron team diagnose what is the main cause of this behavior by <code>electron.js</code>.</li>&#xA;<li>Thanks to <a href=""https://stackoverflow.com/users/295783/mplungjan"">@mplungjan</a> and <a href=""https://stackoverflow.com/users/6577664/mike"">@Mike</a> to reminding me to read documentation once again</li>&#xA;</ol>&#xA;&#xA;<p>I tried to watch/trace ""window size"" in every moment so that i can find out inside the electron core ""window size"" is inaccurate or no, something in <code>renderer.js</code> is involve?!&#xA;<br /><br />&#xA;Based on this results (from <code>main.js</code>), its obvious changes happen in <code>main.js</code> part.</p>&#xA;&#xA;<p>This is <code>main.js</code> console (when extra gap is evident):</p>&#xA;&#xA;<pre><code>[ 823, 522 ]// console.log(mainWindow.getSize());&#xA;[ 822, 521 ]// console.log(mainWindow.getContentSize());&#xA;{ x: 680, y: 101, width: 823, height: 522 }// console.log(mainWindow.getBounds());&#xA;</code></pre>&#xA;&#xA;<p>From the results you can see electron uses <code>setSize</code>, <code>getSize</code> to demonstrate window size and obviously its not accurate because the window's size should be ""820px"" * ""520px"".</p>&#xA;&#xA;<p><strong>How to fix this</strong>: (<em>please consider big part of codes below are not new, new tricky-lines has a comment</em>)&#xA;<br /></p>&#xA;&#xA;<pre><code>function createWindow(){&#xA;    mainWindow = new BrowserWindow({&#xA;        show      : false,&#xA;        width     : 820,&#xA;        height    : 520,&#xA;        frame     : false,&#xA;        resizable : false,&#xA;        title     : ""blah blah blah"",&#xA;        x         : {get x from storage},//this is pseudo &#xA;        y         : {get y from storage}//this is pseudo &#xA;        minWidth: 820,// new&#xA;        maxWidth: 820,// new&#xA;        minHeight: 520,// new&#xA;        maxHeight: 520// new&#xA;    })&#xA;&#xA;    // in this function i called console.log()&#xA;    mainWindow.once('ready-to-show', () =&gt; {&#xA;        mainWindow.show();&#xA;        mainWindow.setSize(820,520);// new (i didn't checked but maybe before `mainWindow.show();` is better to place this line of code)&#xA;    })&#xA;}&#xA;&#xA;&#xA;app.on('ready', () =&gt; {&#xA;    createWindow()&#xA;})&#xA;</code></pre>&#xA;&#xA;<p><br />&#xA;Another test to check the effect of changes:</p>&#xA;&#xA;<pre><code>[ 820, 520 ]// console.log(mainWindow.getSize());&#xA;[ 820, 520 ]// console.log(mainWindow.getContentSize());&#xA;{ x: 680, y: 100, width: 820, height: 520 }// console.log(mainWindow.getBounds());&#xA;</code></pre>&#xA;&#xA;<p>And the gap no longer exists.<br />&#xA;<strong>P.S</strong>: personally i don't like this kind of solutions, so if any one else was able to represent a better solution i'll accept it as an answer.</p>&#xA;",2033784,"",2033784,"",2018-02-05T16:07:20,2018-02-05T16:07:20,"","",,0,,,
48433136,2,,48430578,2018-01-24T23:01:46,,2,,"<p>Worth to check how does request-promise internally setups up module loading. reading it, it seems like there is kind of lazy loading (<a href=""https://github.com/request/request-promise/blob/master/lib/rp.js#L10-L12"" rel=""nofollow noreferrer"">https://github.com/request/request-promise/blob/master/lib/rp.js#L10-L12</a>) when request is being called. Quick try out </p>&#xA;&#xA;<pre><code>const convertHrtime = require('convert-hrtime');&#xA;&#xA;const a = require('request-promise');&#xA;&#xA;const start = process.hrtime();&#xA;a({uri: 'https://requestb.in/17on4me1'});&#xA;const end = process.hrtime(start);&#xA;console.log(convertHrtime(end));&#xA;&#xA;const start2 = process.hrtime();&#xA;a({uri: 'https://requestb.in/17on4me1'});&#xA;const end2 = process.hrtime(start2);&#xA;console.log(convertHrtime(end2));&#xA;</code></pre>&#xA;&#xA;<p>returns value like below:</p>&#xA;&#xA;<pre><code>{ seconds: 0.00421092,&#xA;  milliseconds: 4.21092,&#xA;  nanoseconds: 4210920 }&#xA;{ seconds: 0.000511664,&#xA;  milliseconds: 0.511664,&#xA;  nanoseconds: 511664 }&#xA;</code></pre>&#xA;&#xA;<p>first call is obviously taking longer than subsequent. (number of course may vary, I ran this on bare node.js on relatively fast cpu) If module loading is major cost for first call, then it'll block main process until module is loaded (cause node.js <code>require</code> resolve is synchronous)</p>&#xA;&#xA;<p>I'm not able to say this is concrete reason, but worth to check. As suggested in comment, try other lib or bare internal module (like Electron's <code>net</code>) to rule out.</p>&#xA;",2742189,"",3170465,"",2018-01-25T03:17:19,2018-01-25T03:17:19,"","",,1,,,
48476962,2,,48475362,2018-01-27T14:48:48,,1,,<p>Something like:</p>&#xA;&#xA;<pre><code>console.log = function(){&#xA;   ...your code...&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Can be an idea?</p>&#xA;,6081475,"",,"",,2018-01-27T14:48:48,"","",,1,,,
48538090,2,,48538001,2018-01-31T08:54:59,,2,,"<p>You can simply use <a href=""http://momentjs.com/docs/#/parsing/string/"" rel=""nofollow noreferrer""><code>moment(String)</code></a>.</p>&#xA;&#xA;<p>Since your string includes utc offset moment takes it in account, but it creates and object in local mode because:</p>&#xA;&#xA;<blockquote>&#xA;  <p>By default, moment parses and displays in local time.</p>&#xA;</blockquote>&#xA;&#xA;<p>Here a live sample:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var time = '2018-01-31T11:11:41+05:30';&#xD;&#xA;console.log( moment(time).format() );</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.20.1/moment.min.js""&gt;&lt;/script&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4131048,"",4131048,"",2018-01-31T09:02:32,2018-01-31T09:02:32,"","",,1,,,
48551843,2,,48551805,2018-01-31T21:36:20,,0,,"<p>This is a circular dependency issue. Your <code>app</code> imports <code>test</code>, which in turn imports <code>app</code>.</p>&#xA;",2715656,"",,"",,2018-01-31T21:36:20,"","",,1,,,
48609272,2,,48609049,2018-02-04T14:42:51,,0,,"<blockquote>&#xA;  <p>Why is this working when I run it with node, but is not working in the&#xA;  build? How can I fix this issue?</p>&#xA;</blockquote>&#xA;&#xA;<p>It's difficult to tell without having more information about the whole app's structure, it may depend on how your code is actually called or required from the html file.</p>&#xA;&#xA;<p>Anyway, using the <code>__dirname</code> global variable to build the directory path usually solves this kind of problem. Please try:</p>&#xA;&#xA;<pre><code>const fs = require('fs');&#xA;const path = require('path');&#xA;&#xA;var files = [];&#xA;fs.readdirSync(path.join(__dirname, 'img')).forEach(file =&gt; {&#xA;    files.push(file);&#xA;});&#xA;</code></pre>&#xA;",,user8022331,,"",,2018-02-04T14:42:51,"","",,1,,,
48466642,2,,48465130,2018-01-26T17:35:52,,4,,"<p>I was able to get Auth0 to work by using an internal express server in my electron app to handle serving pages.</p>&#xA;&#xA;<p>First I created a basic express app in a separate folder in my project called http, here will be the express server code and html files to serve. </p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;&#xA;const express = require('express');&#xA;const app = express();&#xA;&#xA;app.use(express.static(process.env.P_DIR)); // Serve static files from the Parent Directory (Passed when child proccess is spawned).&#xA;&#xA;app.use((req, res, next) =&gt; {&#xA;    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:&lt;PORT&gt;'); // Set this header to allow redirection from localhost to auth0&#xA;    next();&#xA;})&#xA;&#xA;&#xA;// Default page to serve electron app&#xA;app.get('/index', (req, res) =&gt; {&#xA;    res.sendFile(__dirname + '/index.html');&#xA;})&#xA;&#xA;// Callback for Auth0&#xA;app.get('/auth/callback', (req, res) =&gt; {&#xA;    res.redirect('/index'); &#xA;})&#xA;&#xA;// Listen on some port&#xA;app.listen(&amp;lt;SOME_PORT&amp;gt;, (err) =&gt; {&#xA;    if (err) console.log(err);&#xA;    console.log('HTTP Server running on ...');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Then in the Electron main process, I spawn the express server as a child process </p>&#xA;&#xA;<pre><code>const {spawn} = require('child_process');&#xA;&#xA;const http = spawn('node', ['./dist/http/page-server.js'], {&#xA;    env: {&#xA;        P_DIR: __dirname // Pass the current dir to the child process as an env variable, this is for serving static files in the project&#xA;    }&#xA;});&#xA;&#xA;// Log standard output&#xA;http.stdout.on('data', (data) =&gt; {&#xA;    console.log(data.toString());&#xA;})&#xA;&#xA;// Log errors&#xA;http.stderr.on('data', (data) =&gt; {&#xA;    console.log(data.toString());&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>Now the auth0 lock authenticates as expected.</p>&#xA;",8229636,"",,"",,2018-01-26T17:35:52,"","",,2,,,
48489310,2,,48488785,2018-01-28T17:30:34,,2,,"<p>The problem you are facing is that <code>//</code> is a protocol relative URL that will use whatever protocol the file requesting it is. You can read more about that <a href=""https://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL"" rel=""nofollow noreferrer"">here</a>.</p>&#xA;&#xA;<p>your best bet to override this default behaviour would be to either parse the data and rewrite the links with something like a regex query. </p>&#xA;&#xA;<p>or you can attempt to intercept the file protocol, verify that the url is one you want to intercept, then reformat the url, you can learn about how to do this <a href=""https://electronjs.org/docs/api/protocol#protocol"" rel=""nofollow noreferrer"">here</a>. with an example that does not include the verification of the paths you wish to intercept below. </p>&#xA;&#xA;<pre><code>const {app, protocol} = require('electron')&#xA;const path = require('path')&#xA;&#xA;app.on('ready', () =&gt; {&#xA;  protocol.registerFileProtocol('file', (request, callback) =&gt; {&#xA;    const url = request.url.substr(7)&#xA;    callback({path: path.normalize(`http://${__dirname}/${url}`)})&#xA;  }, (error) =&gt; {&#xA;    if (error) console.error('Failed to register protocol')&#xA;  })&#xA;})&#xA;</code></pre>&#xA;",6116490,"",,"",,2018-01-28T17:30:34,"","",,2,,,
48596268,2,,48593682,2018-02-03T10:21:59,,3,,"<p>As <a href=""https://docs.npmjs.com/getting-started/fixing-npm-permissions"" rel=""nofollow noreferrer"">npm proposes</a>:</p>&#xA;&#xA;<pre><code> mkdir ~/.npm-global&#xA; npm config set prefix '~/.npm-global'&#xA; export PATH=~/.npm-global/bin:$PATH&#xA; source ~/.profile&#xA;</code></pre>&#xA;&#xA;<p>By doing it this was you keep your global npm packages scoped within your user account, instead of shared between all the users in the computer. Even if you're the only user, this is a recommended behavior. :-)</p>&#xA;",7434393,"",,"",,2018-02-03T10:21:59,"","",,2,,,
48615340,2,,42286648,2018-02-05T03:06:05,,2,,"<p>Without a certificate, it can be done under Windows environment only, not macOS.</p>&#xA;",3323100,"",,user6416901,2018-02-08T21:43:30,2018-02-08T21:43:30,"","",,2,,,
48588407,2,,48587035,2018-02-02T17:58:37,,6,,"<p>In an application built with Electron, you usually get the default user data directory dynamically by using <a href=""https://electronjs.org/docs/api/app#appgetpathname"" rel=""noreferrer"">app.getPath(name)</a> from the main process:</p>&#xA;&#xA;<pre><code>const { app } = require ('electron');&#xA;const userDataPath = app.getPath ('userData');&#xA;</code></pre>&#xA;&#xA;<p>It is also possible to set the path to a custom directory by using <a href=""https://electronjs.org/docs/api/app#appsetpathname-path"" rel=""noreferrer"">app.setPath(name, path)</a>:</p>&#xA;&#xA;<pre><code>app.setPath ('userData', ""path/to/new/directory"");&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>Overrides the path to a special directory or file associated with&#xA;  name. If the path specifies a directory that does not exist, the&#xA;  directory will be created by this method. On failure an Error is&#xA;  thrown.</p>&#xA;  &#xA;  <p>You can only override paths of a name defined in app.getPath.</p>&#xA;  &#xA;  <p>By default, web pages' cookies and caches will be stored under the&#xA;  userData directory. If you want to change this location, you have to&#xA;  override the userData path before the ready event of the app module is&#xA;  emitted.</p>&#xA;</blockquote>&#xA;",,user8022331,,"",,2018-02-02T17:58:37,"","",,3,,,
48632616,2,,48619487,2018-02-05T22:36:23,,2,,"<p>You're making a cross-origin request (your requesting domain is different than the API's domain) and browsers have special rules around that. In a Node context (i.e. via node's <code>http</code>/<code>https</code> modules), you don't have to worry about CORS and can in general do lower level work on network requests. Browsers, on the other hand, have a lot of security around CORS. When you use <code>fetch</code> your network request is going through Chromium's networking layer and so it's subject to those restrictions. When you use node's http/https, you're using node's. It's sort of a confusing point about Electron--a renderer process seems like a normal web context but you actually have access to all of node.js' APIs too, allowing you to things you can't do in a plain browser. </p>&#xA;&#xA;<p>I would check and see if including an API key in that request changes the response of the API (maybe that triggers their API adding the appropriate CORS headers like Access-Control-Allow-Origin). Maybe the API wasn't meant to be called within a browser context and so a more node.js oriented approach is the way to go.</p>&#xA;&#xA;<p>This is a great article on CORS and the ways to deal with it: <a href=""https://medium.com/@baphemot/understanding-cors-18ad6b478e2b"" rel=""nofollow noreferrer"">https://medium.com/@baphemot/understanding-cors-18ad6b478e2b</a></p>&#xA;",1397311,"",1389383,"",2018-02-06T09:11:27,2018-02-06T09:11:27,"","",,3,,,
48412957,2,,48411912,2018-01-24T00:17:25,,1,,"<p>Instead of using scale you can increase the height/width of the div to avoid the zoom effect of the content. In order to do that use <code>position:absolute</code> with your elements and adjust top/left/right/bottom properties instead of transform-origin.</p>&#xA;&#xA;<p>Here is an example <em>(I replaced webview with some content to show result here)</em></p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>html,&#xD;&#xA;body {&#xD;&#xA;  /* added rule */&#xD;&#xA;  margin: 0;&#xD;&#xA;  height: 100%;&#xD;&#xA;  overflow: hidden;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.box {&#xD;&#xA;  position: absolute;&#xD;&#xA;  text-align:center;&#xD;&#xA;  box-sizing: border-box;&#xD;&#xA;  width: 50%;&#xD;&#xA;  height: 50%;&#xD;&#xA;  z-index: 0;&#xD;&#xA;  transition: all 0.5s;&#xD;&#xA;}&#xD;&#xA;.box img {&#xD;&#xA; max-width:100%;&#xD;&#xA; max-height:50%;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;.box:hover {&#xD;&#xA;  width: 100%;&#xD;&#xA;  height: 100%;&#xD;&#xA;  transition-delay: 0.5s;&#xD;&#xA;  z-index: 10;&#xD;&#xA;  /* added so hovered is on top */&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#lo {&#xD;&#xA;  border-right: 1px solid black;&#xD;&#xA;  border-bottom: 1px solid black;&#xD;&#xA;  background-color: #8cff66;&#xD;&#xA;  top: 0;&#xD;&#xA;  left: 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#ro {&#xD;&#xA;  border-left: 1px solid black;&#xD;&#xA;  border-bottom: 1px solid black;&#xD;&#xA;  background-color: #ff751a;&#xD;&#xA;  top: 0;&#xD;&#xA;  right: 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#lu {&#xD;&#xA;  border-top: 1px solid black;&#xD;&#xA;  border-right: 1px solid black;&#xD;&#xA;  background-color: #3385ff;&#xD;&#xA;  left: 0;&#xD;&#xA;  bottom: 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#ru {&#xD;&#xA;  border-top: 1px solid black;&#xD;&#xA;  border-left: 1px solid black;&#xD;&#xA;  background-color: #d147a3;&#xD;&#xA;  right: 0;&#xD;&#xA;  bottom: 0;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body&gt;&#xD;&#xA;  &lt;div class=""box"" id=""lo""&gt;&#xD;&#xA;    &lt;h1&gt;Title&lt;/h1&gt;&#xD;&#xA;    &lt;img src=""https://lorempixel.com/400/400/"" &gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;  &lt;div class=""box"" id=""ro""&gt;&#xD;&#xA;    &lt;h1&gt;Title&lt;/h1&gt;&#xD;&#xA;    &lt;img src=""https://lorempixel.com/500/500/"" &gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;  &lt;div class=""box"" id=""lu""&gt;&#xD;&#xA;    &lt;h1&gt;Title&lt;/h1&gt;&#xD;&#xA;    &lt;img src=""https://lorempixel.com/600/400/"" &gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;  &lt;div class=""box"" id=""ru""&gt;&#xD;&#xA;    &lt;h1&gt;Title&lt;/h1&gt;&#xD;&#xA;    &lt;img src=""https://lorempixel.com/400/500/"" &gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;/body&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",8620333,"",8620333,"",2018-01-24T00:57:49,2018-01-24T00:57:49,"","",,7,,,
48604929,2,,48481154,2018-02-04T05:09:49,,1,,"<p>If you look at the <strong><code>Breadcrumbs.vue</code></strong> you will see the following method at the botton. </p>&#xA;&#xA;<pre><code>placePath () {&#xA;    return this.$store.state.Place.path&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>There you can see that the path is taken from the state. The state is in <strong><code>Place.js</code></strong> file.</p>&#xA;&#xA;<p>This path in state is initialized in <strong><code>Place.vue</code></strong> file. There you'll see a method as follows.</p>&#xA;&#xA;<pre><code>load (path = this.$electron.remote.app.getPath('home')) {&#xA;    path = join(path)&#xA;    this.$store.dispatch('getContents', path).then(() =&gt; {&#xA;      this.$store.commit('setPlacePath', path)&#xA;    }, err =&gt; {&#xA;      console.error(err)&#xA;      this.$route.push('/')&#xA;    })&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>The path is coming from the following line. &#xA;<strong><code>this.$electron.remote.app.getPath('home')</code></strong></p>&#xA;&#xA;<p>Electron <a href=""https://github.com/electron/electron/blob/master/docs/api/app.md#appgetpathname"" rel=""nofollow noreferrer"">documentation</a> for the above <strong><code>app.getPath()</code></strong> method is as follows.</p>&#xA;&#xA;<blockquote>&#xA;  <h3><code>app.getPath(name)</code></h3>&#xA;  &#xA;  <ul>&#xA;  <li><code>name</code> String</li>&#xA;  </ul>&#xA;  &#xA;  <p>Returns <code>String</code> - A path to a special directory or file associated&#xA;  with <code>name</code>. On failure an <code>Error</code> is thrown.</p>&#xA;  &#xA;  <p>You can request the following paths by the name:</p>&#xA;  &#xA;  <ul>&#xA;  <li><code>home</code> User's home directory.</li>&#xA;  <li><code>appData</code> Per-user application data directory, which by default points to:   * <code>%APPDATA%</code> on Windows   * <code>$XDG_CONFIG_HOME</code> or&#xA;  <code>~/.config</code> on Linux   * <code>~/Library/Application Support</code> on macOS</li>&#xA;  <li><code>userData</code> The directory for storing your app's configuration files, which by   default it is the <code>appData</code> directory appended with your&#xA;  app's name.</li>&#xA;  <li><code>temp</code> Temporary directory.</li>&#xA;  <li><code>exe</code> The current executable file.</li>&#xA;  <li><code>module</code> The <code>libchromiumcontent</code> library.</li>&#xA;  <li><code>desktop</code> The current user's Desktop directory.</li>&#xA;  <li><code>documents</code> Directory for a user's ""My Documents"".</li>&#xA;  <li><code>downloads</code> Directory for a user's downloads.</li>&#xA;  <li><code>music</code> Directory for a user's music.</li>&#xA;  <li><code>pictures</code> Directory for a user's pictures.</li>&#xA;  <li><code>videos</code> Directory for a user's videos.</li>&#xA;  <li><code>logs</code> Directory for your app's log folder.</li>&#xA;  <li><code>pepperFlashSystemPlugin</code> Full path to the system version of the Pepper Flash plugin.</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>So those are the options you have as the starting directory.</p>&#xA;&#xA;<p>UPDATE:</p>&#xA;&#xA;<p><strong><code>this.$electron.remote.app.getAppPath()</code></strong> will return the current application directory.</p>&#xA;&#xA;<pre><code>load (path = this.$electron.remote.app.getAppPath()) {&#xA;    path = join(path)&#xA;    this.$store.dispatch('getContents', path).then(() =&gt; {&#xA;      this.$store.commit('setPlacePath', path)&#xA;    }, err =&gt; {&#xA;      console.error(err)&#xA;      this.$route.push('/')&#xA;    })&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>UPDATE 2:</p>&#xA;&#xA;<p>Please note that I'm new to electron as well. It seems like app.getPath method is used to get the path application is running. If you want a different path you can just hard code it there.</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<p>Note <strong>'/home/rajind'</strong> hardcoded as default value for path parameter.</p>&#xA;&#xA;<p>In <code>Place.js file</code>, </p>&#xA;&#xA;<pre><code>getContents ({ commit }, path = '/home/rajind') {&#xA;    return new Promise((resolve, reject) =&gt; {&#xA;      ls(path).then(contents =&gt; {&#xA;        commit('setContents', contents)&#xA;        resolve()&#xA;      }, err =&gt; {&#xA;        reject(err)&#xA;      })&#xA;    })&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>and in <code>Place.vue</code> file,</p>&#xA;&#xA;<pre><code> load (path = '/home/rajind') {&#xA;    path = join(path)&#xA;    this.$store.dispatch('getContents', path).then(() =&gt; {&#xA;      this.$store.commit('setPlacePath', path)&#xA;    }, err =&gt; {&#xA;      console.error(err)&#xA;      this.$route.push('/')&#xA;    })&#xA;  }&#xA;</code></pre>&#xA;",1849366,"",1849366,"",2018-02-04T10:47:00,2018-02-04T10:47:00,"","",,7,,,
48593349,2,,48593290,2018-02-03T02:25:39,,5,,"<p>First install electron as a dev dependency like you have done with <code>npm i --save-dev electron</code>.  Then setup your build scripts like this:</p>&#xA;&#xA;<pre><code>""electron"": ""electron"",&#xA;""electron-build"": ""ng build --prod &amp;&amp; npm run electron""&#xA;</code></pre>&#xA;&#xA;<p>The reason electron was not running is that it included a <code>.</code> in the electron run script like this `""electron"": ""electron ."".</p>&#xA;&#xA;<p><strong>EDIT:</strong></p>&#xA;&#xA;<p>I believe it should be enough to do:</p>&#xA;&#xA;<pre><code>$ npm run electron&#xA;</code></pre>&#xA;&#xA;<p>You don't have to edit your <code>package.json</code>. <code>npm</code> will try to find the <code>electron</code> in your <code>node_modules/.bin</code> then it will search in your global dependencies.</p>&#xA;&#xA;<p>Try to avoid installing global <code>npm</code> dependencies. If you are installing a command line tool because your project needs it then always install it locally.</p>&#xA;",4766136,"",4766136,"",2018-10-12T17:18:40,2018-10-12T17:18:40,"","",,8,,,
50716156,2,,50715137,2018-06-06T08:54:35,,0,,"<p>I never did that but you can try <a href=""https://electronjs.org/docs/api/web-contents#contentssendinputeventevent"" rel=""nofollow noreferrer"">sendInputEvent</a>.</p>&#xA;&#xA;<p>As long as I can see; it is able to manage mouse, keys and keys modifiers like Ctrl+; Should be enough for most of use cases.</p>&#xA;",551263,"",551263,"",2018-06-06T09:58:24,2018-06-06T09:58:24,"","",,0,,,
50718287,2,,50704677,2018-06-06T10:37:05,,1,,"<ol>&#xA;<li>You have to get this information via a native module that accesses the <code>winAPI</code>. There are packages that will help you if your not familiar with writing the binding yourselfe.&#xA;&#xA;<ul>&#xA;<li><a href=""https://www.npmjs.com/package/winapi"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/winapi</a></li>&#xA;<li><a href=""https://www.npmjs.com/package/win32api"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/win32api</a></li>&#xA;</ul></li>&#xA;<li><p>You can make the window transperent and then add a margin to the html/body instead of using a border when unfocused. check the electron <a href=""https://github.com/electron/electron/blob/master/docs/api/frameless-window.md#transparent-window"" rel=""nofollow noreferrer"">docs</a> for how to make the window transperent.</p></li>&#xA;<li><p>You will need to consider the diffrences in DPI Windows7 / Windows 10 and also any further change on the windows 10 lifetime, they will definitly change the appearance over the years. Otherwise you could extract the SVG's and styling from here <a href=""https://codepen.io/agrimsrud/pen/WGgRPP"" rel=""nofollow noreferrer"">https://codepen.io/agrimsrud/pen/WGgRPP</a> MS did not publish the files so there is no way to get the original ones.</p></li>&#xA;</ol>&#xA;&#xA;<p>If you want native windows you should not make the window frameless, i think adding the tab support for windows which actually exists should be added to electron. Maybe create a Issue on GitHub, i think the devs there can give you some better hints on how to archive what you want.</p>&#xA;",5115009,"",,"",,2018-06-06T10:37:05,"","",,0,,,
50746585,2,,50732180,2018-06-07T16:56:22,,2,,"<p>I believe you're in the clear to download the font packs and bundle them in your app. </p>&#xA;&#xA;<p>Check out the <a href=""https://developers.google.com/fonts/faq"" rel=""nofollow noreferrer"">FAQ</a> for google fonts. There are a few answer that definitely imply you're fine to take them and build them into your app. </p>&#xA;&#xA;<p>However at the bottom of the FAQ they link you to the <a href=""https://creativecommons.org/licenses/by/3.0/"" rel=""nofollow noreferrer"">license</a> for the fonts, which is the creative commons license stating you are free to:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Share — copy and redistribute the material in any medium or format</p>&#xA;  &#xA;  <p>Adapt — remix, transform, and build upon the material&#xA;  for any purpose, even commercially.</p>&#xA;</blockquote>&#xA;",7916160,"",,"",,2018-06-07T16:56:22,"","",,0,,,
50764784,2,,50752092,2018-06-08T16:21:51,,2,,"<p>You can't directly ensure that JavaScript objects are removed from memory. You simply get rid of all references you no longer need, which allows the garbage collector to do its work. (I wouldn't call that a ""weak point"" -- compared to having to do manual memory management, it's a strength of JavaScript that it does all that work for you.)</p>&#xA;&#xA;<p>You don't have to worry about function-local variables: when the function returns, the variables go out of scope anyway. ""Clearing"" them manually right before that accomplishes nothing. Example:</p>&#xA;&#xA;<pre><code>function openInternalImageViewer(url) {&#xA;  let imgViewer = new remote.BrowserWindow()&#xA;  imgViewer.loadURL(url);&#xA;&#xA;  /* ...let user interact with imgViewer... */&#xA;&#xA;  imgViewer = null;  // Useless assignment.&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is true for both <code>let</code> and <code>var</code> variables.</p>&#xA;&#xA;<p>Of course it's different for <em>global</em> variables (but of course you shouldn't have many of these):</p>&#xA;&#xA;<pre><code>var imgViewer;&#xA;&#xA;(function openInternalImageViewer(url) {&#xA;  imgViewer = new remote.BrowserWindow()&#xA;  imgViewer.loadURL(url);&#xA;})(some_url);&#xA;&#xA;/* ...let user interact with imgViewer... */&#xA;&#xA;imgViewer = null;  // This cleanup makes sense!&#xA;&#xA;/* program execution continues, imgViewer no longer needed */&#xA;</code></pre>&#xA;&#xA;<p>From the engine's point of view, it doesn't matter whether you assign <code>null</code>, <code>undefined</code>, or <code>123</code>, so you can choose whichever value makes the most sense for you.</p>&#xA;&#xA;<p>Also, it doesn't make a difference where something was created/allocated from. What matters for garbage collection is whether or not an object is ""unreachable"", i.e. there's no way for your code to ever get to it again.</p>&#xA;&#xA;<p>To verify whether it works, you have to use some sort of memory analysis/profiling tool. The simplest form is to use your operating system's task manager. Write a test roughly like:</p>&#xA;&#xA;<pre><code>for (var i = 0; i &lt; 100; i++) {&#xA;  openWindow();&#xA;  closeWindow();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and watch whether the memory consumption of all involved processes keeps returning to its original value. It probably won't do that immediately, instead you'll see a ""sawtooth"" pattern where memory keeps growing until the GC kicks in and brings it down again. You can consider forcing GC cycles manually in the test; just be aware that in production code, that would be a waste of time, as the automatic GC behavior has very carefully tuned heuristics to balance the time spent on garbage collection against the available memory.</p>&#xA;",6036428,"",,"",,2018-06-08T16:21:51,"","",,0,,,
50765900,2,,50349788,2018-06-08T17:40:57,,0,,"<p>I found out what the problem was. I was breaking the rule: </p>&#xA;&#xA;<blockquote>&#xA;  <p><a href=""https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/pdf_open_parameters.pdf"" rel=""nofollow noreferrer"">Individual parameters, together with their values (separated by &amp; or #), can be no greater then 32&#xA;  characters in length.</a></p>&#xA;</blockquote>&#xA;&#xA;<p>I am now using <code>page=1&amp;toolbar=0&amp;view=fitH</code> and it works like expected now.</p>&#xA;&#xA;<p>I don't know why it worked in browsers even though I was using more than 32 characters, but I guess there is an exception to every rule.</p>&#xA;",9793878,"",,"",,2018-06-08T17:40:57,"","",,0,,,
50791042,2,,50789873,2018-06-11T05:36:19,,3,,"<p><code>maximize</code> / <code>unmaximized</code> event is availble for browserwindow. <a href=""https://github.com/electron/electron/blob/master/docs/api/browser-window.md#event-maximize"" rel=""nofollow noreferrer"">https://github.com/electron/electron/blob/master/docs/api/browser-window.md#event-maximize</a></p>&#xA;",2742189,"",,"",,2018-06-11T05:36:19,"","",,0,,,
50794982,2,,50787325,2018-06-11T09:55:42,,2,,"<p>To build bundles for the renderer process of Electron apps, webpack provides a special target parameter.</p>&#xA;&#xA;<p>Add this to your webpack config:</p>&#xA;&#xA;<pre><code>target: 'electron-renderer'&#xA;</code></pre>&#xA;&#xA;<p>See documentation: <a href=""https://webpack.js.org/configuration/target/"" rel=""nofollow noreferrer"">https://webpack.js.org/configuration/target/</a></p>&#xA;",1253156,"",,"",,2018-06-11T09:55:42,"","",,0,,,
50804101,2,,50630151,2018-06-11T18:38:32,,0,,"<p>I figured out my issues (there were a few) through much trial and error.</p>&#xA;&#xA;<ol>&#xA;<li>The main problem was, when building, I had --asar=true, therefore the app was attempting to pull the plugin from the asar archive, which it could not. To solve this I just added the plugin to the --extraResource flag on build. </li>&#xA;<li><p>In addition to this, in the app I updated the switch statement to determine whether it was a build or testing (from cmd line), as follows:</p>&#xA;&#xA;<pre><code>  switch (process.platform) {&#xA;    case 'win32':&#xA;      if (basename === ""resources"") {&#xA;        pluginName = ""../../pepflashplayer32_29_0_0_171.dll"";&#xA;      }&#xA;      else {&#xA;        pluginName = ""./plugins/pepflashplayer32_29_0_0_171.dll"";&#xA;      }&#xA;      break&#xA;    case 'darwin':&#xA;      if (basename === ""resources"") {&#xA;        pluginName = '../../PepperFlashPlayer.plugin'&#xA;      }&#xA;      else {&#xA;        pluginName = './plugins/PepperFlashPlayer.plugin'&#xA;      }&#xA;      break&#xA;  }&#xA;</code></pre></li>&#xA;<li>Finally, as many pointed out in various places I was searching, the 64bit plugin was being used in stead of the 32bit.</li>&#xA;</ol>&#xA;&#xA;<p>I hope this can save others a bit of time.</p>&#xA;",3874418,"",,"",,2018-06-11T18:38:32,"","",,0,,,
50808159,2,,50808047,2018-06-12T01:38:57,,0,,"<p>You can replace all <code>\n</code> with <code>&lt;br /&gt;</code>, or you can use the css style to preserve all line breakers:</p>&#xA;&#xA;<pre><code>&lt;div style=""white-space: pre-line""&gt;{your text}&lt;/div&gt;&#xA;</code></pre>&#xA;",4605019,"",,"",,2018-06-12T01:38:57,"","",,0,,,
50864756,2,,50830955,2018-06-14T19:40:48,,2,,"<p>Nuxt Community already have an <code>electron-template</code> for make it happen.&#xA;You can take a look at <a href=""https://github.com/nuxt-community/electron-template/blob/master/template/main.js"" rel=""nofollow noreferrer"">main.js</a> file to see the configuration or just init a project using: </p>&#xA;&#xA;<p><code>vue init nuxt-community/electron-template my-project</code></p>&#xA;&#xA;<p>Link: <a href=""https://github.com/nuxt-community/electron-template"" rel=""nofollow noreferrer"">https://github.com/nuxt-community/electron-template</a></p>&#xA;",4121119,"",,"",,2018-06-14T19:40:48,"","",,0,,,
50870596,2,,50744254,2018-06-15T07:00:22,,0,,"<blockquote>&#xA;  <h3>Both issue has been resolved in <code>electron-builder: 2.17.0</code> and <code>electron-updater: 2.23.0</code></h3>&#xA;</blockquote>&#xA;&#xA;<p>After debugging so much in code. I found a solution to both of my problems.</p>&#xA;&#xA;<p><strong>Problem: Multiple Download</strong> </p>&#xA;&#xA;<blockquote>&#xA;  <p>(Solved in <a href=""https://github.com/electron-userland/electron-builder/releases/tag/v20.16.0"" rel=""nofollow noreferrer"">electron-builder: 2.16.0</a>)</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Old Solution</strong></p>&#xA;&#xA;<p>I found that <code>electron-updater:2.21.10</code> already have a code to stop downloading again if that installer has been downloaded. But somehow comparing objects of <code>fileinfo</code> using <code>lodash</code> is not working and it creates an issue. So until we get any proper solution in a new version. I have changed below code.</p>&#xA;&#xA;<p><strong>File:-</strong> <code>..\node_modules\electron-updater\out\DownloadedUpdateHelper.js</code></p>&#xA;&#xA;<pre><code>return (0, _lodash().default)(_this.versionInfo, versionInfo) &amp;&amp; (0, _lodash().default)(_this.fileInfo, fileInfo) &amp;&amp; (yield (0, _fsExtraP().pathExists)(updateFile));&#xA;</code></pre>&#xA;&#xA;<p>Just change <code>(_this.fileInfo, fileInfo)</code> to <code>(_this.fileInfo.info, fileInfo.info)</code>. Detailed information is available here :- <a href=""https://github.com/electron-userland/electron-builder/issues/3003"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-builder/issues/3003</a></p>&#xA;&#xA;<p><em>Note:- (I know changing node_modules is not a good way but this is all that I can do currently to keep the show going on. I have also submitted PR for the same so all I am waiting is for a proper solution)</em></p>&#xA;&#xA;<blockquote>&#xA;  <p>Update:- PR accepted in <a href=""https://github.com/electron-userland/electron-builder/releases/tag/v20.16.0"" rel=""nofollow noreferrer"">electron-builder: 2.16.0</a></p>&#xA;</blockquote>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Problem: Removing installer</strong> </p>&#xA;&#xA;<blockquote>&#xA;  <p>(Solved in <a href=""https://github.com/electron-userland/electron-builder/releases/tag/v20.17.0"" rel=""nofollow noreferrer"">electron-builder: 2.17.0</a>, check for issue <a href=""https://github.com/electron-userland/electron-builder/issues/3000"" rel=""nofollow noreferrer"">#3000</a>)</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Old Solution</strong></p>&#xA;&#xA;<p>I found that there is no any inbuilt solution to remove installer as of now so I have created my own to handle it. It can be achieved by</p>&#xA;&#xA;<p><strong>Step 1:-</strong>&#xA;Save file path and version of the newly downloaded file to DB or somewhere in a file as JSON Object.</p>&#xA;&#xA;<pre><code>autoUpdater.on('update-downloaded', async (event) =&gt; {&#xA;    console.log(""update-downloaded"");&#xA;    let download_exe_obj = {path: autoUpdater.downloadedUpdateHelper._file, version: event.version};&#xA;    await update_downloaded_exe_data(download_exe_obj);// save download_exe_obj somewhere so that it can be used later on&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>Step 2:-</strong>&#xA;Check current app version with the saved JSON when app starts (createWindow). If we found app version same as version saved in json then we can remove previously downloaded installer as that installer is already installed.</p>&#xA;&#xA;<pre><code>const app = electron.app; //to get version and details from package.json&#xA;function createWindow() {&#xA;    mainWindow = new BrowserWindow({ width: 800, height: 600 })&#xA;    ...&#xA;    let available_exe_json = await get_downloaded_exe_data(); //get json from where you have saved&#xA;    if(available_exe_json != ''){&#xA;        let available_exe_obj = JSON.parse(available_exe_json);&#xA;        if (available_exe_obj.version != '' &amp;&amp; available_exe_obj.version.toString() == app.getVersion().toString()) {&#xA;            //remove old installer&#xA;            if (available_exe_obj.path != '' &amp;&amp; await fs.existsSync(available_exe_obj.path)) {&#xA;              await fs.unlinkSync(available_exe_obj.path);&#xA;              await update_downloaded_exe_data('');//update with blank where you have saved previous data&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>We can also manage to remove multiple installers. More details regarding this solution can be found here:- <a href=""https://github.com/electron-userland/electron-builder/issues/3000#issuecomment-396833579"" rel=""nofollow noreferrer"">https://github.com/electron-userland/electron-builder/issues/3000#issuecomment-396833579</a></p>&#xA;",635279,"",635279,"",2018-06-28T06:45:13,2018-06-28T06:45:13,"","",,0,,,
50877931,2,,50037293,2018-06-15T14:48:12,,1,,"<p>In the <code>package.json</code>, the 'build' command is incorrect. Replace <code>./src/</code> with <code>./</code> and then use <code>ignore</code> to exclude files and folders.</p>&#xA;&#xA;<p>Because <code>electron-packager</code> needs the <code>package.json</code> in the <code>src</code> folder to know the main entrance and the dependencies, and also needs the dependencies in <code>src</code></p>&#xA;",9933526,"",4961460,"",2018-06-15T15:08:18,2018-06-15T15:08:18,"","",,0,,,
50897091,2,,50897066,2018-06-17T13:23:49,,4,,"<p><code>redir</code> it is not a function, because you're exporting an object, containing a <code>redir</code> property, which is a function.</p>&#xA;&#xA;<p>So you should either use:</p>&#xA;&#xA;<pre><code>const { redir } = require('./index.js');&#xA;</code></pre>&#xA;&#xA;<p>Or export it this way</p>&#xA;&#xA;<pre><code>module.exports = redir&#xA;</code></pre>&#xA;&#xA;<p>When you do: <code>module.exports.redir = redir;</code></p>&#xA;&#xA;<p>You're exporting: <code>{ redir: [Function] }</code></p>&#xA;",1119863,"",,"",,2018-06-17T13:23:49,"","",,0,,,
50905607,2,,50875219,2018-06-18T08:42:15,,3,,"<p><strong>you can use this in your node file.</strong></p>&#xA;&#xA;<p><strong>command :</strong></p>&#xA;&#xA;<pre><code>npm install electron-prompt&#xA;</code></pre>&#xA;&#xA;<p><strong>code :</strong> </p>&#xA;&#xA;<pre><code>const prompt = require('electron-prompt');&#xA;&#xA;prompt({&#xA;    title: 'Prompt example',&#xA;    label: 'URL:',&#xA;    value: 'http://example.org',&#xA;    inputAttrs: { // attrs to be set if using 'input'&#xA;        type: 'url'&#xA;    },&#xA;    type: 'select', // 'select' or 'input, defaults to 'input'&#xA;    selectOptions: { // select options if using 'select' type&#xA;        'value 1': 'Display Option 1',&#xA;        'value 2': 'Display Option 2',&#xA;        'value 3': 'Display Option 3'&#xA;    }&#xA;})&#xA;.then((r) =&gt; {&#xA;    console.log('result', r); // null if window was closed, or user clicked Cancel&#xA;})&#xA;.catch(console.error);&#xA;</code></pre>&#xA;",7844349,"",,"",,2018-06-18T08:42:15,"","",,0,,,
50906309,2,,50905886,2018-06-18T09:25:08,,7,,"<p>Try this, portable file will be created as <code>pvmplayer_portable.exe</code>:</p>&#xA;&#xA;<pre><code>{&#xA;    ""name"": ""pvmplayer"",&#xA;    ""version"": ""1.0.0"",&#xA;    ""description"": """",&#xA;    ""main"": ""main.js"",&#xA;    ""scripts"": {&#xA;        ""postinstall"": ""install-app-deps"",&#xA;        ""start"": ""npm install &amp;&amp; electron ."",&#xA;        ""pack"": ""build --dir"",&#xA;        ""dist"": ""build""&#xA;    },&#xA;    ""author"": """",&#xA;    ""license"": ""ISC"",&#xA;    ""devDependencies"": {&#xA;        ""ajv"": ""^6.5.1"",&#xA;        ""electron"": ""^2.0.2"",&#xA;        ""electron-builder"": ""^20.15.1""&#xA;    },&#xA;    ""optionalDependencies"": {},&#xA;    ""dependencies"": {},&#xA;    ""build"": {&#xA;        ""productName"": ""PVM Player"",&#xA;        ""appId"": ""scripter.PVMplayer"",&#xA;        ""win"": {&#xA;            ""target"": [""portable""]&#xA;        },&#xA;        ""portable"": {&#xA;            ""artifactName"": ""pvmplayer_portable.exe""&#xA;        },&#xA;        ""directories"": {&#xA;            ""output"": ""electron/output"",&#xA;            ""app"": ""electron/app"",&#xA;            ""buildResources"": ""electron/buildResources""&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",6522713,"",6522713,"",2018-06-18T09:35:53,2018-06-18T09:35:53,"","",,0,,,
50730401,2,,50721780,2018-06-06T22:14:58,,2,,"<p>I've done something like this on a recent project using <code>concurrently</code>.</p>&#xA;&#xA;<pre><code>$ npm i -SD concurrently&#xA;</code></pre>&#xA;&#xA;<p>And then in your <code>package.json</code></p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ""dev-server"": ""webpack-dev-server --config webpack.dev.js --hot"",&#xA;  ""electron-dev"": ""SET NODE_ENV=development &amp;&amp; electron ."",&#xA;  ""start"": ""concurrently --kill-others --names \""webpack,electron\"" \""npm run dev-server\"" \""npm run electron-dev\""""&#xA;},&#xA;</code></pre>&#xA;&#xA;<p>This does not, unfortunately, wait for the bundle to finish. But I find I can just hit reload (Ctrl/Cmd + R) once in the Electron app after the build finishes and I'm good to go.</p>&#xA;",807227,"",807227,"",2018-06-08T07:05:29,2018-06-08T07:05:29,"","",,1,,,
50753805,2,,50753458,2018-06-08T05:18:27,,3,,"<p>First check the exposed functions in the dll using <a href=""http://www.dependencywalker.com/"" rel=""nofollow noreferrer"">dependency walker</a>. Then use the node module <a href=""https://www.npmjs.com/package/ffi"" rel=""nofollow noreferrer"">ffi</a> to call the exposed functions in that dll.</p>&#xA;",3336195,"",,"",,2018-06-08T05:18:27,"","",,1,,,
50764321,2,,50751896,2018-06-08T15:54:08,,5,,"<p>You need to change the <code>core</code> to <code>window</code></p>&#xA;&#xA;<pre><code>'body':&#xA;  'ctrl-shift-S':'window:save-all'&#xA;</code></pre>&#xA;&#xA;<p>See <a href=""https://github.com/atom/atom/issues/9390"" rel=""noreferrer"">https://github.com/atom/atom/issues/9390</a></p>&#xA;",7096540,"",,"",,2018-06-08T15:54:08,"","",,1,,,
50767290,2,,50767001,2018-06-08T19:30:06,,1,,"<p>You can't. It should be file, as internally Electron reads file and execute it.</p>&#xA;",2742189,"",,"",,2018-06-08T19:30:06,"","",,1,,,
50771985,2,,50765679,2018-06-09T07:35:59,,0,,"<p>The problem is that loading a url in a browser window isn't synchronous so when it runs <code>createWorkerWindow</code> it will send the <code>status:showLoading</code> message then it'll create the worker window and send the <code>status:hideLoading</code> all in a split second. If you wanted to hide the loading window after the worker window has finished loading you can use:</p>&#xA;&#xA;<pre><code>workerWindow.webContents.on('did-finish-load', function () {&#xA;    mainWindow.webContents.send('status:hideLoading');&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Although keep in mind this will run when any url is loaded not just the first one.</p>&#xA;&#xA;<p><a href=""https://electronjs.org/docs/api/web-contents#event-did-finish-load"" rel=""nofollow noreferrer""><code>did-finish-load</code> docs</a></p>&#xA;",6577664,"",6577664,"",2018-06-11T17:11:15,2018-06-11T17:11:15,"","",,1,,,
50774323,2,,50774105,2018-06-09T12:29:47,,2,,"<p>Remove <code>quitApplication()</code> from the main Electron JS and add this in your <code>main.js</code> :</p>&#xA;&#xA;<pre><code>const electron = require('electron');&#xA;const remote = electron.remote;&#xA;&#xA;function quitApplication(){&#xA;    if (process.platform !== 'darwin') { remote.app.exit(); }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Another way, if you want to keep this code in the main Electon JS file, is to use IPC : <a href=""https://electronjs.org/docs/api/ipc-main"" rel=""nofollow noreferrer"">https://electronjs.org/docs/api/ipc-main</a> . The renderer can call a method in the main process which quits.</p>&#xA;",3207990,"",,"",,2018-06-09T12:29:47,"","",,1,,,
50870088,2,,50841139,2018-06-15T06:18:39,,1,,"<p>You have now 2 applications in your solution:</p>&#xA;&#xA;<p>1) client application: angular which runs in a browser environment</p>&#xA;&#xA;<p>2) server application: express which runs in a node environment</p>&#xA;&#xA;<p>When building the angular application (using ng build) you have to make sure you don't include the express application files in the angular build. The node modules used by express are not available in a browser environment.</p>&#xA;&#xA;<p>You can do:</p>&#xA;&#xA;<p>1) move the express source out of the src folder into project root</p>&#xA;&#xA;<pre><code>// server.js&#xA;var express = require('express');&#xA;var app = express();&#xA;&#xA;app.use(express.static('dist')); // or where the output of the ng-build is placed&#xA;&#xA;app.listen(3000, function() { console.log('Server running on port 3000'); });&#xA;</code></pre>&#xA;&#xA;<p>2) run <code>ng-build</code></p>&#xA;&#xA;<p>3) run <code>node server.js</code> from project root. this will keep running</p>&#xA;&#xA;<p>4) go to <code>localhost:3000</code> and see your app</p>&#xA;",1561180,"",,"",,2018-06-15T06:18:39,"","",,1,,,
50924225,2,,50924145,2018-06-19T08:49:32,,4,,"<p>This is probably more node issue, than electron. From the docs:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Note that it is unsafe to use fs.writeFile multiple times on the same&#xA;  file without waiting for the callback. For this scenario,&#xA;  fs.createWriteStream is strongly recommended.</p>&#xA;</blockquote>&#xA;&#xA;<p>So, look into fs.createWriteStream method instead. </p>&#xA;&#xA;<p>Link to the <a href=""https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback"" rel=""nofollow noreferrer"">docs</a>.</p>&#xA;",4208724,"",4208724,"",2018-06-19T08:52:16,2018-06-19T08:52:16,"","",,1,,,
50787937,2,,48091899,2018-06-10T20:51:10,,3,,"<p>So this was a real pain to figure out, mainly because the vue electron boilerplate does some in-house management of the main and renderer process. The first challenge is to attach to the child process (main) as reliably as possible. The second challenge is to make sure breakpoints persist across sessions and things like that. This answer doesn't focus on the renderer process at all, because you can just debug that in the devtools console.</p>&#xA;&#xA;<p>Put these two configurations in your <code>launch.json</code>, and add <code>--no-lazy</code> to the <code>dev</code> script in <code>package.json</code> to fix breakpoints. If you're just looking for the solution, you can probably stop reading here. If it didn't work, keep on reading.</p>&#xA;&#xA;<pre><code>{&#xA;    ""type"": ""node"",&#xA;    ""request"": ""launch"",&#xA;    ""name"": ""Electron: Main (npm)"",&#xA;    ""cwd"": ""${workspaceFolder}"",&#xA;    ""outFiles"": [""${workspaceFolder}/**/*.js""],&#xA;    ""runtimeExecutable"": ""npm"",&#xA;    ""runtimeArgs"": [""run-script"", ""dev""],&#xA;    ""outputCapture"": ""std"",&#xA;    ""smartStep"": true,&#xA;    ""sourceMaps"": true,&#xA;    ""protocol"": ""inspector"",&#xA;    ""port"": 5858,&#xA;    ""timeout"": 20000&#xA;},&#xA;{&#xA;    ""name"": ""Electron: Main (attach)"",&#xA;    ""type"": ""node"",&#xA;    ""request"": ""attach"",&#xA;    ""cwd"": ""${workspaceFolder}"",&#xA;    ""outFiles"": [""${workspaceFolder}/**/*.js""],&#xA;    ""skipFiles"": [""init.js""],&#xA;    ""smartStep"": true,&#xA;    ""sourceMaps"": true,&#xA;    ""protocol"": ""inspector"",&#xA;    ""port"": 5858,&#xA;    ""timeout"": 20000&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The first one can be executed with no additional actions needed. It will run the script via npm, and attach directly to the sub process with inspect port 5858.</p>&#xA;&#xA;<p>The second script lets you run <code>npm run dev</code> from a terminal, and then attach. It may be convenient to use this one, if you're more used to it.</p>&#xA;&#xA;<p>Now I will explain why I have used all the settings, in case things change and you're wondering if this is outdated.</p>&#xA;&#xA;<h3>""cwd"": ""${workspaceFolder}"",</h3>&#xA;&#xA;<p>I could not reliably run the session without doing this. It still worked sometimes though.</p>&#xA;&#xA;<h3>""outFiles"": [""${workspaceFolder}/**/*.js""],</h3>&#xA;&#xA;<p>I could not debug any files without this on.</p>&#xA;&#xA;<h3>""outputCapture"": ""std"",</h3>&#xA;&#xA;<p>I did not get any output from <code>dev-runner.js</code> if I didn't have this set.</p>&#xA;&#xA;<h3>""smartStep"": true,</h3>&#xA;&#xA;<p>When I restarted the session (especially using the npm variant), the breakpoints got unset and black. This option actually fixed it, but looking an <a href=""https://github.com/Microsoft/vscode-react-native/issues/625#issuecomment-388065782"" rel=""nofollow noreferrer"">this issue</a>, I suspect you shouldn't normally have to use this option.</p>&#xA;&#xA;<h3>""sourceMaps"": true,</h3>&#xA;&#xA;<p>If you're seeing gibberish code, you may want to add the following:</p>&#xA;&#xA;<pre><code>/**&#xA; * Adjust mainConfig for development settings&#xA; */&#xA;if (process.env.NODE_ENV !== 'production') {&#xA;    mainConfig.devtool = 'source-map' // &lt;- THIS&#xA;    mainConfig.plugins.push(&#xA;        new webpack.DefinePlugin({&#xA;            __static: `""${path.join(__dirname, '../static').replace(/\\/g, '\\\\')}""`&#xA;        })&#xA;    )&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This option helps with that.</p>&#xA;&#xA;<h3>""protocol"": ""inspector"",</h3>&#xA;&#xA;<p>Might as well. Legacy doesn't work.</p>&#xA;&#xA;<h3>""port"": 5858,</h3>&#xA;&#xA;<p>This is the port of the child process, spawned by <code>dev-runner.js</code></p>&#xA;&#xA;<h3>""timeout"": 20000</h3>&#xA;&#xA;<p>Since we're waiting for a child process to finish spawning, it may take longer than 10 seconds to launch and then attach. I set it to 20 seconds, but you are free to lower it if your PC is fast enough. (default is 10s)</p>&#xA;&#xA;<p>Further references in the world of bleeding edge software.</p>&#xA;&#xA;<ul>&#xA;<li>VS Code version: 1.21</li>&#xA;<li>Electron version: 1.8.7</li>&#xA;<li>Chromium: v59</li>&#xA;<li>Node: 8.2.1</li>&#xA;</ul>&#xA;",7546562,"",,"",,2018-06-10T20:51:10,"","",,2,,,
50793068,2,,50781741,2018-06-11T08:09:05,,9,,"<p>A minimal example to select, read and display a png image.</p>&#xA;&#xA;<p>Renderer process:::</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>var remote = require('electron').remote;&#xD;&#xA;var fs = remote.require('fs');&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;remote.dialog.showOpenDialog(remote.getCurrentWindow(),&#xD;&#xA;   {&#xD;&#xA;    filters: [&#xD;&#xA;      {name: 'Images', extensions: ['png']}&#xD;&#xA;    ]&#xD;&#xA;   }, &#xD;&#xA;   function(filepaths, bookmarks) {&#xD;&#xA;     //read image (note: use async in production)&#xD;&#xA;     var _img = fs.readFileSync(filepaths[0]).toString('base64');&#xD;&#xA;     //example for .png&#xD;&#xA;     var _out = '&lt;img src=""data:image/png;base64,' + _img + '"" /&gt;';&#xD;&#xA;     //render/display&#xD;&#xA;     var _target = document.getElementById('image_container');&#xD;&#xA;     _target.insertAdjacentHTML('beforeend', _out);&#xD;&#xA;&#xD;&#xA;     return;&#xD;&#xA;});</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""image_container""&gt;&lt;/div&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",9734548,"",,"",,2018-06-11T08:09:05,"","",,2,,,
50871326,2,,50870703,2018-06-15T07:55:32,,0,,"<p>You must use Code Signing to avoid that: </p>&#xA;&#xA;<blockquote>&#xA;  <p>The regular (and often cheaper) Code Signing Certificate shows a&#xA;  warning during installation that goes away once enough users installed&#xA;  your application and you've built up trust. The EV Certificate has&#xA;  more trust and thus works immediately without any warnings.</p>&#xA;</blockquote>&#xA;&#xA;<p><a href=""https://www.electron.build/code-signing"" rel=""nofollow noreferrer"">https://www.electron.build/code-signing</a></p>&#xA;",6522713,"",,"",,2018-06-15T07:55:32,"","",,2,,,
50885641,2,,50885430,2018-06-16T06:48:12,,1,,"<p>it's <strong>how</strong> you deal with asynchronous code that is <strong>important</strong> to Promise chains - your <code>getFiles</code> function for example ... needs a Promise returned that resolves when the dialog is ""done with""</p>&#xA;&#xA;<pre><code>function getFiles() {&#xA;    if (document.getElementById(""getFileData"").checked) {&#xA;        return new Promise(resolve =&gt; {&#xA;            dialog.showOpenDialog({properties: ['openDirectory']}, function (filePaths) { &#xA;            //here it should stop until a directory is chosen and the filenames&#xA;            // are read into arrayFiles&#xA;                fs.readdirSync(filePaths[0]).forEach(file =&gt; {&#xA;                    arrayFiles.push(file)&#xA;                });&#xA;                // or better still&#xA;                //&#xA;                // arrayFiles.push(...fs.readdirSync(filePaths[0]))&#xA;                //&#xA;                resolve();&#xA;            });&#xA;        });&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>One thing you're also doing that looks unconventional is, having a bunch of global objects that are updated in one function and read in the next, the beauty of Promises is not having to have such global pollution</p>&#xA;&#xA;<p>e.g. a simplified example</p>&#xA;&#xA;<pre><code>Promise.resolve(5)&#xA;.then(x =&gt; x * 2)&#xA;.then(x =&gt; x - 1)&#xA;.then(x =&gt; x / 3)&#xA;</code></pre>&#xA;&#xA;<p>instead of</p>&#xA;&#xA;<pre><code>let x = 5;&#xA;Promise.resolve()&#xA;.then(() =&gt; x = x * 2)&#xA;.then(() =&gt; x = x - 1)&#xA;.then(() =&gt; x = x / 3)&#xA;</code></pre>&#xA;&#xA;<p>same result, but no need for variable <code>x</code></p>&#xA;&#xA;<p>Having said that, it may well be that what you are doing is the best way to do it, there's not really enough code to know what is happening, too much <code>// description of some vague functionality</code> in the question :p</p>&#xA;",5053002,"",5053002,"",2018-06-16T07:00:50,2018-06-16T07:00:50,"","",,3,,,
50803712,2,,50803207,2018-06-11T18:08:16,,9,,"<p>The fact that you <code>require</code> a package is irrelevant to whether it should be considered a dependency or a devDependency (in the npm sense). E.g. many projects use webpack API (i.e. <code>const webpack = require('webpack')</code>) but list it as a devDependency.</p>&#xA;&#xA;<p>The reason is also explained in the post you link to: when you <code>publish</code> your package, if the consumer project needs other packages to use yours, then these must be listed as <code>dependencies</code>.</p>&#xA;&#xA;<p>If your package uses some modules only for build, test, or bundles them into a dist file (i.e. what will be used by the consumer project), then those modules should not be mentioned in <code>dependencies</code>. We still list them in <code>devDependencies</code> for development.</p>&#xA;&#xA;<p>Now in the case of an electron app, there is little chance you will consume your app as a node module of a consumer project, therefore the above convention is not really relevant.</p>&#xA;&#xA;<p>Furthermore, we fall in the case where the <code>electron</code> package is bundled as part of the built output. There is no need for your user to get <code>electron</code> from npm to use your built app. Therefore it matches well the definition of a devDependency.</p>&#xA;&#xA;<p>That being said, IIRC some electron packagers bundle your <code>dependencies</code> into the built app, so you still need some rigour in filling this list.</p>&#xA;",5108796,"",5108796,"",2018-06-11T18:14:03,2018-06-11T18:14:03,"","",,4,,,
50807149,2,,50806540,2018-06-11T22:59:30,,0,,"<p>The only part of your opened window that isn't static is <code>+ text +</code> ... so, you have an almost static HTML page </p>&#xA;&#xA;<p>Here's something that will work. Create a static page like so:</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;title&gt;JS Coder&lt;/title&gt;&#xA;    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;input  style=""display:none;"" name=""file"" id=""fileDialog"" type=""file"" onchange=""openeditor()"" /&gt;&#xA;    &lt;label class=""button button1"" for=""fileDialog""&gt;Open&lt;/label&gt;&#xA;&#xA;    &lt;input style=""display:none;"" name=""filesave"" id=""filesave"" type=""file"" onchange=""saveeditor()"" nwsaveas /&gt;&#xA;    &lt;label class=""button button1"" for=""filesave"" &gt;Save&lt;/label&gt;&#xA;&#xA;    &lt;div id=""content"" contenteditable=""true""&gt;&lt;/div&gt;&#xA;    &lt;script src=""editor/app.js""&gt;&lt;/script&gt;&#xA;    &lt;script type=""text/javascript""&gt;&#xA;        function loadText(text) {&#xA;            document.getElementById('content').innerHTML = text;&#xA;        }&#xA;    &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Lets say it's called <code>otherpage.html</code> - it's in the same folder as your ""main"" page too</p>&#xA;&#xA;<p>Now, the javascript in your main page is</p>&#xA;&#xA;<pre><code>    var fs = require(""fs"");&#xA;    var text = fs.readFileSync(myfolder);&#xA;    text=text.toString();&#xA;    var wndo = window.open(""otherpage.html"", """", ""scrollbars=1,width=300,height=500"");&#xA;    wndo.addEventListener('load', () =&gt; {&#xA;        wndo.loadText(text);&#xA;    });&#xA;    wndo.moveTo(screen.width/2-250,screen.height/2-175);&#xA;</code></pre>&#xA;&#xA;<p>So the main page waits for other page to load, and then calls the other page <code>loadText</code> to load the text</p>&#xA;",5053002,"",,"",,2018-06-11T22:59:30,"","",,4,,,
50895487,2,,50874926,2018-06-17T09:51:39,,3,,"<p>With electron-builder, the only thing you need to sign your Windows application is to set this two Environment Variables <code>CSC_LINK</code> and <code>CSC_KEY_PASSWORD</code> as explained here : <a href=""https://www.electron.build/code-signing"" rel=""nofollow noreferrer"">https://www.electron.build/code-signing</a>.</p>&#xA;&#xA;<p>-- alternative --</p>&#xA;&#xA;<p>You can do the same by setting this in your <code>package.json</code> like this (but not recommended):</p>&#xA;&#xA;<pre><code>""build"": {&#xA;  ...&#xA;  ""win"": {&#xA;    ...&#xA;    ""certificateFile"": ""path to your cert"",&#xA;    ""certificatePassword"": ""the password of your cert""&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps.</p>&#xA;",8697449,"",,"",,2018-06-17T09:51:39,"","",,4,,,
50717766,2,,50717012,2018-06-06T10:10:09,,1,,"<p>Try to read <code>mode</code> through <code>process.env.WEBPACK_MODE</code>.</p>&#xA;&#xA;<p>In your case:</p>&#xA;&#xA;<pre><code>const isDevelopement = (process.env.WEBPACK_MODE === ""development"");&#xA;</code></pre>&#xA;&#xA;<p>Another, workaround solution using <a href=""https://webpack.js.org/plugins/define-plugin/"" rel=""nofollow noreferrer"">WebpackDefinePlugin</a>:</p>&#xA;&#xA;<pre><code>const mode = process.env.NODE_END || 'development';&#xA;&#xA;module.exports = merge(common, {&#xA;  mode: mode,&#xA;  plugins: [&#xA;    new webpack.DefinePlugin({&#xA;      'WEBPACK_MODE': JSON.stringify(mode),&#xA;    })&#xA;  ]&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>and then you should be able to access it through <code>process.env.WEBPACK_MODE</code>.</p>&#xA;",870674,"",870674,"",2018-06-06T10:44:16,2018-06-06T10:44:16,"","",,7,,,
50761656,2,,50760846,2018-06-08T13:25:19,,1,,"<p>That definitely is a <a href=""https://learn.jquery.com/events/event-delegation/"" rel=""nofollow noreferrer"">delegation</a> issue. You run attach the click handlers on page load. So when the checkboxes are ""replaced"" by the prev/next table function, the elements that were attached do not exist anymore.</p>&#xA;&#xA;<p>You use jQuery, so try it like this:</p>&#xA;&#xA;<pre><code>$(document).on(""click"",""input:checkbox"",function(){&#xA;  //some color/text changements&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>So now, the handler is attached to <code>document</code> which ""delegated"" the actions on its child matching the selector (the second argument of the <code>.on()</code> method).</p>&#xA;&#xA;<p>Instead of attaching it to the <code>document</code>, it is a good practice to use the closest <strong>static</strong> parent selector... Like the table container. But you can use <code>document</code> to test my solution.</p>&#xA;",2159528,"",,"",,2018-06-08T13:25:19,"","",,7,,,
50828882,2,,50821702,2018-06-13T03:59:09,,1,,"<p>Here is what I do on linux:</p>&#xA;&#xA;<pre><code>cp -ir node_modules/sqlite3/lib/binding/node-v*-linux-x64 node_modules/sqlite3/lib/binding/node-webkit-v$NW_VERSION-linux-x64&#xA;</code></pre>&#xA;&#xA;<p>You have to create a copy with the NW version you are using. The byteball README says copy as <code>node-webkit-v0.14.7-darwin-x64</code> but that assumes you have NW 0.14.7 installed.</p>&#xA;&#xA;<p>If you want to debug the app, you will need the SDK version of NW.js:&#xA;<a href=""https://dl.nwjs.io/v0.14.7/nwjs-sdk-v0.14.7-osx-x64.zip"" rel=""nofollow noreferrer"">https://dl.nwjs.io/v0.14.7/nwjs-sdk-v0.14.7-osx-x64.zip</a></p>&#xA;",261982,"",,"",,2018-06-13T03:59:09,"","",,7,,,
52314744,2,,52218929,2018-09-13T13:26:49,,1,,"<p>Sadly, this is not possible. Electron bundles Node.js and Chromium in their full form, and there is no way to keep only part of them.</p>&#xA;&#xA;<p>Some projects like <a href=""https://github.com/pojala/electrino"" rel=""nofollow noreferrer"">Electrino</a> have tried to get rid of this limitation, but it's still in early stage and hasn't been improved a lot this last year.</p>&#xA;&#xA;<p>For Windows-only applications, you can still make a <a href=""https://docs.microsoft.com/fr-fr/windows/uwp/get-started/universal-application-platform-guide"" rel=""nofollow noreferrer"">Universal Windows Platform</a> application in HTML / CSS / JavaScript that will be a lot lighter.</p>&#xA;&#xA;<p>Still, the only easy way to get rid of the big size of Electron is to use the operating system's internal browser coupled with, let's say, a <a href=""https://www.qt.io/"" rel=""nofollow noreferrer"">Qt</a> application. This would result in a program that is both light and powerful, with the ability to fully customize the application's behavior thanks to Qt. Still, this is a lot more difficult than making a simple Electron application.</p>&#xA;",4016380,"",,"",,2018-09-13T13:26:49,"","",,0,,,
52314912,2,,50637151,2018-09-13T13:35:35,,1,,"<p>The code isn't minified, as said in <a href=""https://github.com/mattermost/desktop/issues/387#issuecomment-265432205"" rel=""nofollow noreferrer"">this issue comment</a>, so you have to minify it yourself using <a href=""https://github.com/mishoo/UglifyJS2"" rel=""nofollow noreferrer"">UglifyJS</a> for example.</p>&#xA;",4016380,"",,"",,2018-09-13T13:35:35,"","",,0,,,
52315720,2,,52315579,2018-09-13T14:18:04,,1,,<p>That is standard JavaScript syntax for a function (or method).  A more familiar syntax would be:</p>&#xA;&#xA;<pre><code>click() {&#xA;  createWindow();&#xA;}&#xA;</code></pre>&#xA;,10011969,"",,"",,2018-09-13T14:18:04,"","",,0,,,
52317248,2,,52105917,2018-09-13T15:40:32,,1,,"<p>Thanks to some input from the Electron Slack community I have resolved this issue. My mistake was in the way I was calling the app.quit() method.</p>&#xA;&#xA;<p>My code was handling the MainWindow on ""close"" event and executing the app.quit() method in that event handler.</p>&#xA;&#xA;<p>The correct way to close the app is to handle the app ""window-all-closed"" event and execute the app.quit() method there.</p>&#xA;&#xA;<p>Here is a gist of a skeleton main.js for an Electron app that was sent to me to help me resolve the issue.</p>&#xA;&#xA;<p><a href=""https://gist.github.com/sidprice/612cb49cec923eeb94cfcddf1736c181"" rel=""nofollow noreferrer"">https://gist.github.com/sidprice/612cb49cec923eeb94cfcddf1736c181</a></p>&#xA;&#xA;<p>Sid</p>&#xA;",2178154,"",,"",,2018-09-13T15:40:32,"","",,0,,,
52324144,2,,52323913,2018-09-14T02:21:23,,2,,"<p>As mentioned by @mrunion:</p>&#xA;&#xA;<blockquote>&#xA;  <p>""- you need to use a double-equals for comparison. - The way your code is now[, ] you are just assigning the value ""true"" to the [radio button]""</p>&#xA;</blockquote>&#xA;&#xA;<p>Thanks to @mrunion for reminding me of such a simple mistake as the whole thing is functional now.</p>&#xA;&#xA;<p>A brief preview of the before and after code would be as follows:&#xA;<code>if(document.getElementById('1').checked = true)</code> before and <code>if(document.getElementById('1').checked == true) {</code> after.</p>&#xA;",8699261,"",,"",,2018-09-14T02:21:23,"","",,0,,,
52328407,2,,52322648,2018-09-14T08:57:19,,0,,"<p>Solved it today..</p>&#xA;&#xA;<p>Just add property <code>""homepage"" : ""./""</code> to <code>package.json</code>,&#xA;<a href=""https://github.com/facebook/create-react-app/issues/165#issuecomment-235801531"" rel=""nofollow noreferrer"">check this issue comment on create-react-app</a></p>&#xA;",1289765,"",,"",,2018-09-14T08:57:19,"","",,0,,,
52330927,2,,48177372,2018-09-14T11:20:41,,1,,"<p>I have update your codepen&#xA;<a href=""https://codepen.io/anon/pen/WgKwje"" rel=""nofollow noreferrer"">https://codepen.io/anon/pen/WgKwje</a> </p>&#xA;&#xA;<p>If you want to get it worked with electron.</p>&#xA;&#xA;<pre><code>npm install materialize-css@next&#xA;</code></pre>&#xA;&#xA;<p>then include materialize css and js in index.html&#xA;at the end of body tag call M.AutoInit()</p>&#xA;&#xA;<pre><code>&lt;script&gt;M.AutoInit();&lt;/script&gt;&#xA;</code></pre>&#xA;",3517804,"",,"",,2018-09-14T11:20:41,"","",,0,,,
52333198,2,,52318750,2018-09-14T13:37:55,,1,,"<p>You can use <a href=""https://electronjs.org/docs/api/native-image#imagetodataurloptions"" rel=""nofollow noreferrer""><code>image.toDataURL</code></a> for this purpose (as @Mikaeru suggested) An example could be&#xA;</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;  &lt;body&gt;&#xA;    &lt;webview id=""view"" src=""https://www.github.com/"" style=""width:320px; height:240px""&gt;&#xA;    &lt;/webview&gt;&#xA;    &lt;button id=""capture""&gt;Capture&lt;/button&gt;&#xA;    &lt;img id=""show"" src="""" /&gt;&#xA;    &lt;script&gt;&#xA;      const wv = document.getElementById('view')&#xA;      const b = document.getElementById('capture')&#xA;      const i = document.getElementById('show')&#xA;      b.addEventListener('click', () =&gt; {&#xA;        wv.capturePage((img) =&gt; {&#xA;          i.src = img.toDataURL()&#xA;        })&#xA;      })&#xA;    &lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-09-14T13:37:55,"","",,0,,,
52334899,2,,52334557,2018-09-14T15:18:35,,2,,"<p>You have to <em>call</em> <code>main</code> in the second case</p>&#xA;&#xA;<pre><code>app.on('ready', () =&gt; {&#xA;  console.log('Ready');&#xA;  createWindow.main(); // &lt;-- !&#xA;});&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-09-14T15:18:35,"","",,0,,,
52391772,2,,52337509,2018-09-18T17:25:27,,1,,"<p>It seems that the ability to use  tag in sandbox didn't work until the 3.0.0 beta 3 release. Even though as in my previous post there seems to have been a merged change from over a year before the 3.0.0 beta 3 was released. Maybe this is somehow related to <a href=""https://semver.org/"" rel=""nofollow noreferrer"">semantic versioning</a> in someway so they had to wait until the next major release to add support for it.</p>&#xA;&#xA;<p><a href=""https://electronjs.org/releases#3.0.0-beta.3"" rel=""nofollow noreferrer"">https://electronjs.org/releases#3.0.0-beta.3</a></p>&#xA;",4830093,"",,"",,2018-09-18T17:25:27,"","",,0,,,
52392652,2,,52392094,2018-09-18T18:31:46,,5,,"<p>You have a lot of modules to store data in an Electron app :</p>&#xA;&#xA;<ul>&#xA;<li><a href=""http://lokijs.org"" rel=""nofollow noreferrer"">http://lokijs.org</a></li>&#xA;<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage</a></li>&#xA;<li><a href=""https://github.com/agershun/alasql"" rel=""nofollow noreferrer"">https://github.com/agershun/alasql</a></li>&#xA;<li><a href=""https://github.com/amark/gun"" rel=""nofollow noreferrer"">https://github.com/amark/gun</a></li>&#xA;<li><a href=""https://github.com/google/leveldb"" rel=""nofollow noreferrer"">https://github.com/google/leveldb</a></li>&#xA;<li><a href=""https://github.com/google/lovefield"" rel=""nofollow noreferrer"">https://github.com/google/lovefield</a></li>&#xA;<li><a href=""https://github.com/jakearchibald/idb"" rel=""nofollow noreferrer"">https://github.com/jakearchibald/idb</a></li>&#xA;<li><a href=""https://github.com/jakearchibald/idb-keyval"" rel=""nofollow noreferrer"">https://github.com/jakearchibald/idb-keyval</a></li>&#xA;<li><a href=""https://github.com/kripken/sql.js"" rel=""nofollow noreferrer"">https://github.com/kripken/sql.js</a></li>&#xA;<li><a href=""https://github.com/localForage/localForage"" rel=""nofollow noreferrer"">https://github.com/localForage/localForage</a></li>&#xA;<li><a href=""https://github.com/louischatriot/nedb"" rel=""nofollow noreferrer"">https://github.com/louischatriot/nedb</a></li>&#xA;<li><a href=""https://github.com/pouchdb/pouchdb"" rel=""nofollow noreferrer"">https://github.com/pouchdb/pouchdb</a></li>&#xA;<li><a href=""https://github.com/pubkey/rxdb"" rel=""nofollow noreferrer"">https://github.com/pubkey/rxdb</a></li>&#xA;<li><a href=""https://github.com/typicode/lowdb"" rel=""nofollow noreferrer"">https://github.com/typicode/lowdb</a></li>&#xA;<li><a href=""https://github.com/w3c/IndexedDB"" rel=""nofollow noreferrer"">https://github.com/w3c/IndexedDB</a></li>&#xA;<li><a href=""https://github.com/yathit/ydn-db"" rel=""nofollow noreferrer"">https://github.com/yathit/ydn-db</a></li>&#xA;<li><a href=""https://github.com/TomPrograms/stormdb"" rel=""nofollow noreferrer"">https://github.com/TomPrograms/stormdb</a></li>&#xA;</ul>&#xA;&#xA;<p>I would suggest nedb which is pure JS and cross platform compatible.&#xA;The simplest is localStorage, which is browser native.&#xA;Or more simply, you can read/write data in a JSON file.</p>&#xA;&#xA;<p>So, in your case, when the values are changed, save the data.&#xA;On start, get them from the database and put them in your adjustable values.</p>&#xA;",3207990,"",3207990,"",2020-02-22T15:16:47,2020-02-22T15:16:47,"","",,0,,,
52398445,2,,51553806,2018-09-19T05:05:58,,1,,"<p>I was able to get this event by adding the verbose tag (-v) to the ssh spawn command</p>&#xA;&#xA;<p>However after making this multi operating system independent, using the npm ssh2 module in node was much easier and handles steps like these automatically</p>&#xA;",10067844,"",,"",,2018-09-19T05:05:58,"","",,0,,,
52409047,2,,52375177,2018-09-19T15:10:18,,1,,"<p>When i right clicked the .app file, and chose <em>""Show Package Contents""</em>, I could see a Contents/Mac folder, and inside that was a unix executable file, which when I ran in the command line, showed me a rejected promised that had to do with my tray icon - I was doing a <code>path.join(__dirname,'icon.png')</code>, that ended up being the wrong path (<code>console.log(path.join(__dirname,'icon.png'))</code> to the rescue! </p>&#xA;&#xA;<p>When I changed that to an absolute path (<em>'users/myname/app/icon.png'</em>) and rebuilt, it worked!</p>&#xA;&#xA;<p>However, this obviously won't work on OTHER people's computers - it did work on my computer(tm), but that's not good enough.</p>&#xA;&#xA;<p>To REALLY fix it, I might have gone overboard - but this is what worked for me - by creating a <a href=""https://electronjs.org/docs/api/native-image"" rel=""nofollow noreferrer"">NativeImage</a>, using a path.join(__dirname,'resources','icon.png') in what I passed into that. I also added resources under <em>build/files</em> in package.json.</p>&#xA;&#xA;<p>If you run into this kind of problem, i would recommend doing what I did (<em>show package contents</em>, etc) to see the issue in the packaged electron app.</p>&#xA;",1229265,"",,"",,2018-09-19T15:10:18,"","",,0,,,
52410739,2,,52376457,2018-09-19T16:50:52,,0,,"<p>Couldn't get it to work with the Node Requests module. I tried Axios and that worked although I had some issues with CORS. I then came across Needle <a href=""https://www.npmjs.com/package/needle"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/needle</a> which worked perfectly!</p>&#xA;&#xA;<p>Not sure why Node Requests is not working when using formData.</p>&#xA;",6723099,"",,"",,2018-09-19T16:50:52,"","",,0,,,
52412080,2,,52400306,2018-09-19T18:24:50,,2,,"<p>Assuming that you are seeing these ""duplicates"" while viewing the physical file that your database is being written to, everything is working as expected.</p>&#xA;&#xA;<p>From the <a href=""https://github.com/louischatriot/nedb#persistence"" rel=""nofollow noreferrer"">NeDB documentation</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>Persistence</strong></p>&#xA;  &#xA;  <p>Under the hood, NeDB's persistence uses an append-only format, meaning that all updates and deletes actually result in lines added at the end of the datafile, for performance reasons. The database is automatically compacted (i.e. put back in the one-line-per-document format) every time you load each database within your application.</p>&#xA;</blockquote>&#xA;",471696,"",,"",,2018-09-19T18:24:50,"","",,0,,,
52413923,2,,52412631,2018-09-19T20:42:20,,0,,"<p>Okay, guys. I think I solved this problem. When I ran code.sh via symlink it tried to find necessary files in the directories from my PATH variable. As I intended to run this script from anywhere but original folder they obviously wouldn't be found. So all I had to do was exporting original script directory to PATH. &#xA;As I didn't want to bloat my PATH I wrote a little helper script and made a symlink to it from /usr/local/bin/&#xA;Here's the code:</p>&#xA;&#xA;<pre><code>#!/bin/sh&#xA;export PATH=$PATH:/Users/work/Stuff/vscode/&#xA;cd /Users/work/Stuff/vscode/&#xA;./scripts/code.sh&#xA;</code></pre>&#xA;",8360082,"",,"",,2018-09-19T20:42:20,"","",,0,,,
52420555,2,,52369868,2018-09-20T08:15:16,,2,,"<p>I solved the problem thanks to <a href=""https://stackoverflow.com/a/49049277"">this response from another question</a>.</p>&#xA;&#xA;<p>I've added</p>&#xA;&#xA;<pre><code>node: {&#xA;    __dirname: true,&#xA;},&#xA;</code></pre>&#xA;&#xA;<p>to <code>webpack.config.js</code> and used <code>process.resourcesPath</code> to resolve the file path.</p>&#xA;&#xA;<p><a href=""https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"" rel=""nofollow noreferrer"">child_process.fork</a> can utilize the <a href=""https://www.npmjs.com/package/asar"" rel=""nofollow noreferrer"">asar</a> library, if given a script path inside an asar archive. To achieve this I used roughly</p>&#xA;&#xA;<pre><code>import path from 'path';&#xA;import { fork } from 'child_process';&#xA;&#xA;const scriptPath = path.join(process.resourcesPath!, 'app.asar', fileName);&#xA;const args = [];&#xA;const process = fork(scriptPath, args);&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback"" rel=""nofollow noreferrer"">child.execFile</a> on the other hand can utilize the asar library to spawn a process of the binary contained in an asar archive. Note that it can only resolve the binary, not its parameters, so if you wanted to embed say a Python interpreter and a Python script in your electron app, you should package it in a single binary or extract the script to the file system and execute using the embedded Python binary or load its content to a variable and execute directly using <code>python -c ""print(44)""</code> with your script content as a <code>-c</code> argument parameter.</p>&#xA;",3103257,"",,"",,2018-09-20T08:15:16,"","",,0,,,
52431813,2,,52116946,2018-09-20T19:14:06,,1,,"<p>There is no installer for WinPE you need a portable version of a browser.  I've tried the portable version of Chrome but couldn't get it to run in WinPE.  The only browser I've ever seen work in WinPE is an old portable version of FireFox.</p>&#xA;&#xA;<p>If you want to try to get it to work here's the link&#xA;<a href=""https://portableapps.com"" rel=""nofollow noreferrer"">https://portableapps.com</a></p>&#xA;&#xA;<p>In theory it should work but I can't tell what dependencies it needs as there's no error message.  The portable apps are x86 so you have use WinPE_x86.</p>&#xA;",7858986,"",,"",,2018-09-20T19:14:06,"","",,0,,,
52443818,2,,52252290,2018-09-21T12:30:27,,6,,"<p>As @coolreader18 explained in details, you have to use <code>electron-tabs</code> in <em>Renderer process</em></p>&#xA;&#xA;<p>This means you have to notify the html from main.js when you click a menu item. <a href=""https://electronjs.org/docs/api/menu-item#new-menuitemoptions"" rel=""noreferrer""><code>MenuItem</code></a>'s click provides you the caller <code>BrowserWindow</code> so you can send message to it.</p>&#xA;&#xA;<p><em>main.js</em>&#xA;</p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code> ...&#xA; {&#xA;   label: 'Account Management',&#xA;   click: function (menuItem, browserWindow, event) {&#xA;     browserWindow.webContents.send('add-tab', {&#xA;       title: 'Electron',&#xA;       src: 'http://electron.atom.io',&#xA;       visible: true&#xA;     })&#xA;   }&#xA; },&#xA; ...&#xA;</code></pre>&#xA;&#xA;<p><em>index.html</em></p>&#xA;&#xA;<pre class=""lang-js prettyprint-override""><code>&lt;body&gt;&#xA;  ...&#xA;  &lt;script&gt;&#xA;    const { ipcRenderer } = require('electron')&#xA;    const TabGroup = require('electron-tabs')&#xA;    const tabGroup = new TabGroup()&#xA;&#xA;    ipcRenderer.on('add-tab', (event, arg) =&gt; {&#xA;      tabGroup.addTab(arg)&#xA;    })&#xA;  &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;</code></pre>&#xA;",2550156,"",2550156,"",2018-09-21T12:39:12,2018-09-21T12:39:12,"","",,0,,,
52453349,2,,52451675,2018-09-22T03:54:37,,1,,<p>Put the API in the window variable under the preload script.  Example:</p>&#xA;&#xA;<pre><code>var API = function() {&#xA;    const fs = remote.require('fs');&#xA;&#xA;    API.createFile = function(){&#xA;        /*... do stuff with fs here ...*/&#xA;    }&#xA;}&#xA;&#xA;window.api = new API();&#xA;</code></pre>&#xA;&#xA;<p>The following now works in the scripts that do not have access to nodeIntegration</p>&#xA;&#xA;<pre><code>window.api.createFile() //works&#xA;fs.writeFile() //does not&#xA;</code></pre>&#xA;,3781277,"",3781277,"",2018-09-23T22:47:19,2018-09-23T22:47:19,"","",,0,,,
52464788,2,,52464484,2018-09-23T09:26:28,,0,,<p>Update to electron to 3.0 did solve the problem</p>&#xA;,9244214,"",,"",,2018-09-23T09:26:28,"","",,0,,,
52492727,2,,51399659,2018-09-25T07:23:17,,0,,<p>You can bypass the checker of electron forge with this portion of code</p>&#xA;&#xA;<pre><code>import { addBypassChecker } from 'electron-compile';&#xA;&#xA;addBypassChecker((filePath) =&gt; { return filePath.indexOf(app.getAppPath()) === -1 &amp;&amp; (/.jpg/.test(filePath) || /.ms/.test(filePath) || /.png/.test(filePath)); });&#xA;</code></pre>&#xA;,6014692,"",,"",,2018-09-25T07:23:17,"","",,0,,,
52497939,2,,50925634,2018-09-25T12:10:30,,6,,"<p>I had a similar problem when I tried to build for windows.</p>&#xA;&#xA;<p>While the <code>win.loadURL(...)</code> seems to work like that in development, maybe try to change it to this when building:</p>&#xA;&#xA;<pre><code>win.loadURL(url.format({&#xA;  pathname: path.join(__dirname, 'index.html'),&#xA;  protocol: 'file:',&#xA;  slashes: true&#xA;}));&#xA;</code></pre>&#xA;&#xA;<p>This makes sure it <strong>definitly</strong> gets the right path to your <code>index.html</code> file.</p>&#xA;&#xA;<p>For the <code>path.join(...)</code> to work you need to <code>require</code> it first:</p>&#xA;&#xA;<pre><code>const path = require('path');&#xA;</code></pre>&#xA;",8655257,"",,"",,2018-09-25T12:10:30,"","",,0,,,
52519304,2,,52513654,2018-09-26T13:49:13,,1,,"<p>The <code>localStorage</code> is not saved to your app's binary files but rather to a file on your account's part of your PC's file system.</p>&#xA;&#xA;<p>On Linux, for example, Electron creates a directory for your app in <code>~/.config</code> and stores your <code>localStorage</code> data there. I imagine that you might find a directory for your application in <code>%APPDATA%</code> (<code>C:\Users\YourUsername\AppData\Roaming\</code> or similar) on Windows.</p>&#xA;&#xA;<p>What you could try is to write your data to a file in your app's resources bundle which would be preserved while re-distributing, but that's another question and answer.</p>&#xA;",6786876,"",,"",,2018-09-26T13:49:13,"","",,0,,,
52520195,2,,52517023,2018-09-26T14:31:42,,0,,"<p>Yeah well the question is: Do you want to run you're queries on the Client it self? Because then, if not strictly restricted, someone finds a way to open up the console and sends funny queries. </p>&#xA;&#xA;<p>But anyway... your question:</p>&#xA;&#xA;<p>The easiest way I can think of this, because we don't want to download everything again, is to have a version number for each element.</p>&#xA;&#xA;<p>So the client has one and if that does not match the servers it gets updated. Now you just have to get all IDs. But keep in mid, you still have to handle what happens if an item gets removed or a new one added.</p>&#xA;&#xA;<p>This is not really an answer but I hope it inspired you a little bit.</p>&#xA;&#xA;<p>Oh some after thoughts:</p>&#xA;&#xA;<p>You could get something like a WebSocket between those two. Yes you had to program one more service but </p>&#xA;&#xA;<ol>&#xA;<li>The query would be save</li>&#xA;<li>You could keep track of removed and added items</li>&#xA;<li>You could work out some timestamp system that you get all items that are newer than the timestamp of the client.. this will be some work though.</li>&#xA;</ol>&#xA;&#xA;<p>nice day, Elias</p>&#xA;",10315665,"",10315665,"",2018-09-26T14:38:03,2018-09-26T14:38:03,"","",,0,,,
52345072,2,,52333939,2018-09-15T13:20:05,,1,,"<p>In ElectronJS, you can make use of <a href=""https://electronjs.org/docs/api/web-contents#contentsprinttopdfoptions-callback"" rel=""nofollow noreferrer"">printToPDF</a> instead of client side js functionality since electronJS can directly access file system.</p>&#xA;&#xA;<p>Here is a sample implementation of the API.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/P4OCs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/P4OCs.png"" alt=""enter image description here""></a></p>&#xA;",6906028,"",,"",,2018-09-15T13:20:05,"","",,1,,,
52346246,2,,48932106,2018-09-15T15:43:30,,1,,<p>I ended up including the sox binary into the package. I used <code>node-record-lpcm16</code> package and updated its path to use included sox binary. This way I can pass down the the lib path as a parameter.</p>&#xA;,330201,"",,"",,2018-09-15T15:43:30,"","",,1,,,
52416159,2,,52413705,2018-09-20T01:20:04,,2,,"<p>Now I'm feeling a bit dumb. It turns out that the reason it was reloading was because I'm using the <code>electron-reload</code> package to automatically reload the page when I save the source files. It was also causing the page to reload when the save file was overwritten. Good to know going forward. </p>&#xA;&#xA;<p>Edit: </p>&#xA;&#xA;<p>You can tell <code>electron-reload</code> to ignore a directory by ammending your require statement to look something like this:</p>&#xA;&#xA;<pre><code>require('electron-reload')(__dirname, {ignored: /&lt;folder_to_be_ignored&gt;|[\/\\]\./});&#xA;</code></pre>&#xA;&#xA;<p><a href=""https://github.com/yan-foto/electron-reload#api"" rel=""nofollow noreferrer"">https://github.com/yan-foto/electron-reload#api</a></p>&#xA;",10209053,"",10209053,"",2018-09-20T13:48:22,2018-09-20T13:48:22,"","",,1,,,
52419049,2,,52414213,2018-09-20T06:37:45,,4,,<p>In the Electron-Builder NSIS doc(the link you post):</p>&#xA;&#xA;<blockquote>&#xA;  <p>runAfterFinish = true Boolean - Whether to run the installed&#xA;  application after finish. For assisted installer corresponding&#xA;  checkbox will be removed.</p>&#xA;</blockquote>&#xA;,7281658,"",,"",,2018-09-20T06:37:45,"","",,1,,,
52475215,2,,52475151,2018-09-24T08:21:55,,5,,"<p>What you are doing is called a Cross Origin Request:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A web application makes a cross-origin HTTP request when it requests a resource >that has a different origin (domain, protocol, and port) than its own origin.</p>&#xA;  &#xA;  <p>An example of a cross-origin request: The frontend JavaScript code for&#xA;  a web application served from <a href=""http://domain-a.com"" rel=""noreferrer"">http://domain-a.com</a> uses XMLHttpRequest&#xA;  to make a request for <a href=""http://api.domain-b.com/data.json"" rel=""noreferrer"">http://api.domain-b.com/data.json</a>.</p>&#xA;  &#xA;  <p>For security reasons, browsers restrict cross-origin HTTP requests&#xA;  initiated from within scripts. For example, XMLHttpRequest and the&#xA;  Fetch API follow the same-origin policy. This means that a web&#xA;  application using those APIs can only request HTTP resources from the&#xA;  same origin the application was loaded from, unless the response from&#xA;  the other origin includes the right CORS headers.</p>&#xA;  &#xA;  <p><a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"" rel=""noreferrer"">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS</a></p>&#xA;</blockquote>&#xA;&#xA;<p>In Electron, you can disable this security on opening the main window:</p>&#xA;&#xA;<pre><code>new BrowserWindow({&#xA;  ..&#xA;  webPreferences: {&#xA;    ..&#xA;    webSecurity: false&#xA;  }&#xA;});&#xA;</code></pre>&#xA;",4547701,"",,"",,2018-09-24T08:21:55,"","",,1,,,
52305531,2,,52305501,2018-09-13T01:44:17,,0,,"<p>essentially, electron is a web-based tech, in HTML, an IMG tag could has <strong>src</strong> attribute in data format: </p>&#xA;&#xA;<pre><code>&lt;img src=""data:image/png;base64,....""/&gt;&#xA;</code></pre>&#xA;&#xA;<p>and your encrypted data only stored in memory.</p>&#xA;",5221774,"",5221774,"",2018-09-13T02:38:51,2018-09-13T02:38:51,"","",,2,,,
52383194,2,,52353912,2018-09-18T09:21:38,,2,,"<p><a href=""https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendchannel-arg1-arg2-"" rel=""nofollow noreferrer""><code>ipcRenderer.send</code></a> is used to send message <em>to Main process</em>. What you want is sending message to a specific <em>webContents</em> by <a href=""https://electronjs.org/docs/api/web-contents#contentssendchannel-arg1-arg2-"" rel=""nofollow noreferrer""><code>contents.send</code></a></p>&#xA;&#xA;<p>Since your modal window should send to its parent you can use <a href=""https://electronjs.org/docs/api/browser-window#wingetparentwindow"" rel=""nofollow noreferrer""><code>win.getParentWindow</code></a>&#xA;</p>&#xA;&#xA;<pre><code>// (Modal - Renderer)&#xA;const { remote, ipcRenderer } = require('electron')&#xA;// ...&#xA;function rowClickHandler() {&#xA;  let rowId = e.target.parentElement.dataset.id&#xA;  remote.getCurrentWindow().getParentWindow().send('set-row-active-id', rowId)&#xA;}&#xA;</code></pre>&#xA;",2550156,"",,"",,2018-09-18T09:21:38,"","",,2,,,
52384521,2,,52122955,2018-09-18T10:28:10,,2,,"<p>You need to request the license ahead of time, and specifically request a license that allows persistence (offline use). Basically, you ned to trigger the license request, before going offline. There might be a function call to do this somewhere, otherwise you could start playback to get the license, and terminate it afterwards.</p>&#xA;&#xA;<p>Note that the license issued has to allow offline usage, that is not the default. The EZDRM demo stuff, might allow you to request such a license, but it is not likely to give you one like that by default.</p>&#xA;",2854857,"",,"",,2018-09-18T10:28:10,"","",,2,,,
52320604,2,,52320360,2018-09-13T19:33:25,,1,,"<p>One thing you can do is use the 'FS' module which is included with node. I've written a function that should allow you to pass in a filename (including extension) and fileContents:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const fs = require('fs');&#xD;&#xA;&#xD;&#xA;function writeToFileNWJS(outfilePath, contents){&#xD;&#xA;    let outfile = fs.createWriteStream(outfilePath);&#xD;&#xA;    outfile.write(contents);&#xD;&#xA;    outfile.end();&#xD;&#xA;}</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>If you wanted to save a file in the root directory of your project, use './filename' as your filename. Path relativity is the same in NW.js as it is anywhere else in node. If you want to save in the directory above where you are at, use '../filename'.</p>&#xA;&#xA;<p>If you want to see what your path is anywhere in your project, add this to the file:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const path = require('path');&#xD;&#xA;&#xD;&#xA;console.log(path);</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>You can concat '../' to the beginning your path for each directory you want to climb up; or concat additional directories to the end of your path to drill down.</p>&#xA;&#xA;<p>Both the 'fs' and 'path' modules are included with node.js and should not require any additional npm install commands. </p>&#xA;&#xA;<p>Hope this helps!</p>&#xA;&#xA;<p>EDIT: </p>&#xA;&#xA;<p>If you want to ensure your file is completely written before calling another function, you can call another function when the 'close' event is fired:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>outfile.on('close', function() {&#xD;&#xA;  console.log('file done');&#xD;&#xA;});</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",4808362,"",4808362,"",2018-09-13T20:07:15,2018-09-13T20:07:15,"","",,3,,,
52435976,2,,52428580,2018-09-21T02:57:21,,1,,"<p>For the grant flow, please check it as @Event and @Marc suggested.</p>&#xA;&#xA;<p>And for your other questions.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Is it recommended to put the client secret into the source code? And&#xA;  also publish it on GitHub.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>No</strong></p>&#xA;&#xA;<blockquote>&#xA;  <p>What can someone can do with the client ID and client secret?</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>With the Client ID and client secret, someone may call the resource in your data store. But some case need we also pass the app name in the request.</strong></p>&#xA;&#xA;<blockquote>&#xA;  <p>Should I keep the client-secret really ""secret""?</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Yes</strong></p>&#xA;&#xA;<blockquote>&#xA;  <p>Can I provide the client-secret to my app and keep it secret?</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Yes</strong>. You can use the <strong><a href=""https://azure.microsoft.com/en-us/services/key-vault/"" rel=""nofollow noreferrer"">Azure KeyValut</a></strong> to protect your secret. Or just following the below blog:</p>&#xA;&#xA;<blockquote>&#xA;  <p><a href=""https://medium.com/poka-techblog/the-best-way-to-store-secrets-in-your-app-is-not-to-store-secrets-in-your-app-308a6807d3ed"" rel=""nofollow noreferrer"">https://medium.com/poka-techblog/the-best-way-to-store-secrets-in-your-app-is-not-to-store-secrets-in-your-app-308a6807d3ed</a></p>&#xA;  &#xA;  <p><strong>Storing secrets in the environment</strong></p>&#xA;  &#xA;  <p>stripe_api_key = os.environ[""STRIPE_API_KEY""]</p>&#xA;  &#xA;  <p><strong>Storing secrets in the database</strong><br>&#xA;  <strong>Using a secrets syncing service</strong></p>&#xA;  &#xA;  <p><strong>Storing secrets in your code …but encrypted</strong></p>&#xA;</blockquote>&#xA;",9992612,"",9992612,"",2018-09-21T07:15:23,2018-09-21T07:15:23,"","",,3,,,
52470610,2,,52468096,2018-09-23T21:57:22,,5,,"<p>When you run <code>tsc main.ts</code>, your <code>tsconfig.json</code> file is not being used.  Instead run <code>tsc -p .</code> or simply <code>tsc</code>, and if necessary, restrict the input files to the compilation using the <code>files</code>, <code>include</code>, and <code>exclude</code> options in <code>tsconfig.json</code>.</p>&#xA;",4468617,"",,"",,2018-09-23T21:57:22,"","",,3,,,
52344014,2,,52342133,2018-09-15T10:54:31,,2,,"<p>Firstly, I think you should name your module something different from <code>state</code> to avoid confusing in future :) . I will use name 'your_module_name' below.</p>&#xA;&#xA;<pre><code>import Vue from 'vue'&#xA;import Vuex from 'vuex'&#xA;import state from './modules/store.js'&#xA;&#xA;Vue.use(Vuex)&#xA;&#xA;export default new Vuex.Store({&#xA;  modules: {&#xA;    your_module_name: state&#xA;  },&#xA;  strict: process.env.NODE_ENV != 'production'&#xA;})&#xA;</code></pre>&#xA;&#xA;<p>If you load your ""sub-store"" as module but <strong>not namespaced</strong> you can fix issue using another <code>mapState</code> signature:</p>&#xA;&#xA;<pre><code>computed: mapState({ titleName: state =&gt; state.your_module_name.titleName })&#xA;</code></pre>&#xA;&#xA;<p>Or you can make module <strong>namespaced</strong> and use this:</p>&#xA;&#xA;<pre><code>computed: mapState('your_module_name', ['titleName'])&#xA;</code></pre>&#xA;&#xA;<p>Yes, <code>mapState</code> behavior for non-namespaced modules is not obvious.</p>&#xA;",4303704,"",,"",,2018-09-15T10:54:31,"","",,5,,,
46096565,2,,46027816,2017-09-07T12:36:38,,0,,"<p>Didn't really found out what the problem was, so I tried another solution, which works for me (my main aim was to save data to some local memory of app). </p>&#xA;&#xA;<p>I used npm package <code>electron-store</code> which is really easy to use. </p>&#xA;&#xA;<p>You can get it by typing this to terminal</p>&#xA;&#xA;<pre><code>npm install electron-store&#xA;</code></pre>&#xA;&#xA;<p>More info about it here: <a href=""https://github.com/sindresorhus/electron-store"" rel=""nofollow noreferrer"">Electron store</a></p>&#xA;&#xA;<p>Hope it helps someone else too :-)</p>&#xA;",1938273,"",,"",,2017-09-07T12:36:38,"","",,0,,,
46096618,2,,45616575,2017-09-07T12:38:27,,0,,<p>Just for future reference I decided on <code>Electron</code> and used <code>onBeforeRequest</code> function to capture the http requests.</p>&#xA;,6307245,"",,"",,2017-09-07T12:38:27,"","",,0,,,
46098878,2,,46097386,2017-09-07T14:25:53,,0,,"<p>Ok, example.created.file already exists in this directory and I suspect that you can only use update.exe supported commands in <code>case '--squirrel-updated'</code> sections. So this will not work.</p>&#xA;",6307245,"",,"",,2017-09-07T14:25:53,"","",,0,,,
46110254,2,,41924956,2017-09-08T06:47:47,,0,,<p>One solution that works is to 'intercept' window.open() calls in the preload script. In the preload script you could create a new browser window and open it.</p>&#xA;,1159915,"",,"",,2017-09-08T06:47:47,"","",,0,,,
46139589,2,,46139060,2017-09-10T10:15:34,,0,,"<p>Fixed it using <code>NgZone</code> </p>&#xA;&#xA;<pre><code> ipcRenderer.on('download-prompt-detail',(event,data)=&gt;{&#xA;&#xA;        // use NgZone&#xA;        this.zone.run(()=&gt;{&#xA;&#xA;        this.fileSize = data['content-length'] ;&#xA;&#xA;       }&#xA;});&#xA;</code></pre>&#xA;",3036711,"",,"",,2017-09-10T10:15:34,"","",,0,,,
46158562,2,,46139637,2017-09-11T14:49:22,,0,,"<p>The problem can be avoided, by disabling GPU compositing:</p>&#xA;&#xA;<p>in main process if the OS is linux run the command</p>&#xA;&#xA;<p><code>app.commandLine.appendSwitch('disable-gpu-compositing');</code></p>&#xA;&#xA;<p>Happens for me on Linux Mint with an AMD GPU. You can easily see if GPU compositing is enabled by opening up chrome://gpu/ in Electron or as comparison in Chrome/Chromium.</p>&#xA;&#xA;<p>test ok.</p>&#xA;&#xA;<p>yo! :)</p>&#xA;",5252752,"",,"",,2017-09-11T14:49:22,"","",,0,,,
46194866,2,,46191394,2017-09-13T10:17:14,,0,,"<p>Your problem is not bootstrap but its jQuery not getting loaded. Please refer to this question to fixed jQuery <a href=""https://stackoverflow.com/questions/32621988/electron-jquery-is-not-defined"">Electron: jQuery is not defined</a></p>&#xA;",7325243,"",,"",,2017-09-13T10:17:14,"","",,1,,,
46212132,2,,44076183,2017-09-14T06:36:55,,0,,"<p>Your timer variable is undefined.</p>&#xA;&#xA;<pre><code>var timer;&#xA;    var urls = [...];&#xA;&#xA;    var win = new BrowserWindow({...});&#xA;    var myURL = """";&#xA;&#xA;    var setTimer = function (){&#xA;        //Missing return statement&#xA;        timer = setTimeout(()=&gt;{&#xA;            console.log(myURL + "" timed out"");&#xA;            loadNext();&#xA;        }, 5000);&#xA;    }&#xA;&#xA;    var loadNext = function(){&#xA;        if (urls.length &gt; 0){&#xA;            //Following line sets timer to undefined:&#xA;            //timer = setTimer(); (comment it out)&#xA;            //change to:&#xA;            setTimer();&#xA;            myURL = urls.pop();&#xA;            console.log(myURL);&#xA;            win.loadURL(myURL; //Also don't forget to fix this)&#xA;        }   &#xA;    }&#xA;&#xA;    win.webContent.on('did-finish-load', () =&gt; {&#xA;        clearTimeout(timer);&#xA;        browserWindow.webContents.send('doTest');&#xA;    })&#xA;&#xA;    ipcMain.on('testResult', (event, data) =&gt; {&#xA;        console.log('done test ' + data);&#xA;        event.returnValue = 'yay';&#xA;    })&#xA;</code></pre>&#xA;",4056600,"",,"",,2017-09-14T06:36:55,"","",,0,,,
46227642,2,,46212727,2017-09-14T20:21:42,,0,,"<p>~ is a Bash feature called ""tilde expansion"". It's a function of the shell, electron can't process it. Use new PouchDB('./test/db') record instead.</p>&#xA;&#xA;<p>You can use <a href=""https://github.com/pouchdb-community/pouchdb-dump-cli"" rel=""nofollow noreferrer"">pouchdb-dump-cli</a> package to export database dump and then import it using <a href=""https://github.com/pouchdb-community/pouchdb-load"" rel=""nofollow noreferrer"">pouchdb-load</a> package.</p>&#xA;",5707799,"",,"",,2017-09-14T20:21:42,"","",,2,,,
46302580,2,,46297349,2017-09-19T14:04:05,,0,,"<p>Having not seen any code or folder structure, I am going to take a guess and say that when your app is built, Electron doesn't see the path to <code>js/Datejs/build/date-de-DE.js</code> because it's running directory is in a different folder than the <code>js</code> directory. In other words, the <code>js</code> directory was most likely excluded from the build process.</p>&#xA;&#xA;<p>Are you sure that you are including all the right files in the build process?</p>&#xA;&#xA;<p>Check out the <a href=""https://www.electron.build/configuration/contents"" rel=""nofollow noreferrer"">documentation</a> to see how to set the config to include different files</p>&#xA;",5847412,"",5847412,"",2017-09-19T14:09:15,2017-09-19T14:09:15,"","",,1,,,
46081655,2,,46080586,2017-09-06T18:02:37,,1,,"<p>I don't see anything that will fire off the code you want to run.</p>&#xA;&#xA;<p>If you gave it to me to make work, I'd do two things:</p>&#xA;&#xA;<ul>&#xA;<li><p>wrap the nightmare code in a function so you can</p>&#xA;&#xA;<p>require(""./mynighmare.js"").sleepPoorly()</p></li>&#xA;<li><p>in your index.html, add a button that calls the above line to actually run your code.</p></li>&#xA;</ul>&#xA;&#xA;<p>... then I'd do a whole bunch of testing, because my first draft wouldn't work right :)</p>&#xA;",3335118,"",,"",,2017-09-06T18:02:37,"","",,2,,,
46089071,2,,46086344,2017-09-07T06:15:12,,1,,"<p>The answer is, it strongly depends on applications. </p>&#xA;&#xA;<p>As you already found out, Electron is the technology based on web platform. Some small Electron apps like Todoapp (eg. <a href=""https://github.com/jaystack/repatch-example-electron-app"" rel=""nofollow noreferrer"">https://github.com/jaystack/repatch-example-electron-app</a>) are almost the same as the web, so you can tweak some in <code>/src</code> and get it work easily on web as well. However, some other massive applications like VSCode or Atom are not always the same. You might need to dig into and tweak source codes a lot in order to port it into web. If you read and write JavaScript, you can do that, it would be a hardship though.</p>&#xA;",5616750,"",,"",,2017-09-07T06:15:12,"","",,0,,,
46186297,2,,46183725,2017-09-12T22:37:55,,1,,"<p>Web Bluetooth supports <a href=""https://www.bluetooth.com/specifications/gatt/generic-attributes-overview"" rel=""nofollow noreferrer"">GATT</a> aka ""Bluetooth Low Energy"" aka ""Bluetooth Smart"".  A2DP is a legacy profile not supported in Web Bluetooth.</p>&#xA;",331858,"",,"",,2017-09-12T22:37:55,"","",,3,,,
46211453,2,,46198582,2017-09-14T05:48:15,,1,,"<p>You need to install the electron typings files (<code>electron.d.ts</code>). This file is included in recent versions of electron you get through npm and the typings file should be picked up automatically when you import or require <code>electron</code>.</p>&#xA;&#xA;<p><a href=""https://i.stack.imgur.com/QNls8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QNls8.png"" alt=""enter image description here""></a></p>&#xA;&#xA;<p>If you are using an up to date version of electron but still don't see the proper intellisense, please file an new issue with a small sample project description and I'll take a look: <a href=""https://github.com/Microsoft/vscode/issues/new"" rel=""nofollow noreferrer"">https://github.com/Microsoft/vscode/issues/new</a></p>&#xA;",306149,"",,"",,2017-09-14T05:48:15,"","",,3,,,
46229397,2,,46229164,2017-09-14T23:01:14,,1,,"<p>You forgot to add the <code>template</code> property in your <code>renderer/index.js</code> file.</p>&#xA;&#xA;<p>just add:</p>&#xA;&#xA;<p><code>new Vue({&#xA;  el: ""#app"",&#xA;  template: '&lt;App/&gt;',&#xA;  components: { App }&#xA;})</code></p>&#xA;&#xA;<p>:)</p>&#xA;",5062694,"",,"",,2017-09-14T23:01:14,"","",,2,,,
46245697,2,,46245088,2017-09-15T18:40:13,,1,,"<p>I found the problem. Turns out that jQuery thinks it is in an enviroment without a window with a DOM.</p>&#xA;&#xA;<p>From jQuery.js line 17:</p>&#xA;&#xA;<pre><code>    if ( typeof module === ""object"" &amp;&amp; typeof module.exports === ""object"" ) {&#xA;&#xA;&#xA;    // For CommonJS and CommonJS-like environments where a proper `window`&#xA;    // is present, execute the factory and get jQuery.&#xA;    // For environments that do not have a `window` with a `document`&#xA;    // (such as Node.js), expose a factory as module.exports.&#xA;    // This accentuates the need for the creation of a real `window`.&#xA;    // e.g. var jQuery = require(""jquery"")(window);&#xA;    // See ticket #14549 for more info.&#xA;&#xA;&#xA;    module.exports = global.document ?&#xA;        factory( global, true ) :&#xA;        function( w ) {&#xA;            if ( !w.document ) {&#xA;                throw new Error( ""jQuery requires a window with a document"" );&#xA;            }&#xA;            return factory( w );&#xA;        };&#xA;} else {&#xA;    factory( global );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Ghettofix solution:</p>&#xA;&#xA;<p><strong>Remove the entire 'if sentence' and keep only this:</strong> <code>factory( global );</code></p>&#xA;&#xA;<p>I am not sure why this happend but my best guess is that the Electron app, which both have a front-end with DOM and a backend without DOM, the jQuery chose the backend.</p>&#xA;",3497669,"",,"",,2017-09-15T18:40:13,"","",,0,,,
46247864,2,,46239309,2017-09-15T21:46:47,,1,,"<p>The best way I've found to keep app state consistent across pages is to use <a href=""http://vuex.vuejs.org"" rel=""nofollow noreferrer"">Vuex</a>. Using a store and mutators you can easily set up a settings page that propagates values across your app. As well you can bind your initial form state to the store through computed variables to ensure the observers' fire correctly.</p>&#xA;",6771218,"",,"",,2017-09-15T21:46:47,"","",,0,,,
46254399,2,,46132020,2017-09-16T13:24:34,,1,,"<p>I don't know much about Electron or descjop, so bear with me. I searched for the problem and found an answer that shows how to include sqlite. In <code>package.json</code> you need to add:</p>&#xA;&#xA;<pre><code>""scripts"": {&#xA;  ""postinstall"": ""install-app-deps""&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then you ""install necessaries dependencies with"":</p>&#xA;&#xA;<pre><code>npm install --save-dev electron-builder&#xA;npm install --save sqlite3&#xA;npm run postinstall&#xA;</code></pre>&#xA;&#xA;<p>Then you can require SQLite in the <code>core</code> as follows:</p>&#xA;&#xA;<pre><code>(def SQLite (nodejs/require ""sqlite3""))&#xA;</code></pre>&#xA;&#xA;<p>Hope this helps.</p>&#xA;",2609980,"",,"",,2017-09-16T13:24:34,"","",,1,,,
46268277,2,,46189099,2017-09-17T19:54:29,,1,,"<p>it is easier if you define an object that represent your search:</p>&#xA;&#xA;<pre><code>var toFind = {};&#xA;var firstTerm = ""choices"";&#xA;var secondTerm = ""04-09-2017"";&#xA;toFind[firstTerm]={};&#xA;toFind[firstTerm][secondTerm] = {$exists = true};&#xA;&#xA;db.find(toFind, function(err, docs) {&#xA;  // put here your callback&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>this should work.</p>&#xA;&#xA;<p>in your example x in </p>&#xA;&#xA;<pre><code>{&#xA;  x: {&#xA;    $exists: true&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>is treated as the key of the obj searched and is not evaluated.</p>&#xA;",6504585,"",,"",,2017-09-17T19:54:29,"","",,0,,,
46276567,2,,46235950,2017-09-18T10:01:19,,1,,"<p>I found this : <a href=""https://github.com/Squirrel/Squirrel.Windows/blob/master/docs/using/machine-wide-installs.md"" rel=""nofollow noreferrer"">https://github.com/Squirrel/Squirrel.Windows/blob/master/docs/using/machine-wide-installs.md</a></p>&#xA;&#xA;<p>It says:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Machine-wide Installs Squirrel's Releasify command generates an MSI&#xA;  file suitable for installation via Group Policy. This MSI isn't a&#xA;  general-purpose installer, this means that once you run the MSI, users&#xA;  from now on will get the app installed, on next Login.</p>&#xA;  &#xA;  <p>So, most normal users should continue to run the Setup.exe's generated&#xA;  by Releasify, but if you want to have an IT Admin Friendly version,&#xA;  you can hand off the MSI</p>&#xA;  &#xA;  <p>Most users of Squirrel won't have to do anything new to enable this&#xA;  behavior, though certain NuGet package IDs / names might cause&#xA;  problems with MSI.</p>&#xA;</blockquote>&#xA;&#xA;<p>It looks like my <code>.msi</code> is working just fine only I expected different results. </p>&#xA;",6307245,"",,"",,2017-09-18T10:01:19,"","",,0,,,
46289641,2,,45514272,2017-09-18T23:37:04,,1,,"<p>you need to use <code>OccurrenceOrderPlugin</code> instead of <code>OccurenceOrderPlugin</code>.&#xA;and one more thing you don't need this plugin anymore, now occurrence order is on by default</p>&#xA;&#xA;<p><a href=""https://gist.github.com/sokra/27b24881210b56bbaff7#occurrence-order"" rel=""nofollow noreferrer"">https://gist.github.com/sokra/27b24881210b56bbaff7#occurrence-order</a></p>&#xA;",1355629,"",,"",,2017-09-18T23:37:04,"","",,0,,,
46295692,2,,46295512,2017-09-19T08:37:27,,1,,"<p>Here your main motive is to test whether you are able to load and save the data or not. Considering if it is a blank file in the beginning of the test. <br></p>&#xA;&#xA;<p>Step 1. Write some data to the file. <br> &#xA;Step 2. Read the same data. <br>&#xA;Step 3. Since you yourself write the data, in the beginning, therefore you should know in advance that what exactly that data was. <br>&#xA;Step 4. Assert the same data you already have with the data you got after performing read operation. <br>&#xA;Step 5. Clear out all the data in that file. <br>&#xA;<br>This will assure you whether what you are writing and reading back is correct or not. <br>&#xA;You can perform this operation on some dummy file as well, as the main motive is to test read and write operation on the file.</p>&#xA;",3102965,"",3102965,"",2017-09-19T08:48:52,2017-09-19T08:48:52,"","",,3,,,
46094658,2,,46094452,2017-09-07T11:00:05,,2,,"<p>Personally, I do not like the idea of render 5000 rows at once. Even a fast check on <code>shouldComponentUpdate</code> with each row will take a long time by multiply with 5000.</p>&#xA;&#xA;<p>You can try to partition your rows by batches/chunks that fit your current view and fetch next by a button (e.g: press to load more ...)  or by scrolling down.</p>&#xA;&#xA;<p>I would suggest <a href=""https://github.com/bvaughn/react-virtualized"" rel=""nofollow noreferrer"">react-virtualized</a> in your case.</p>&#xA;",3859961,"",,"",,2017-09-07T11:00:05,"","",,4,,,
46142314,2,,46142142,2017-09-10T15:21:27,,2,,"<p>As per the code you provided, you are referring to the document before it gets loaded.</p>&#xA;&#xA;<pre><code>var output = document.getElementById(""output""); // &lt;- here and&#xA;output.innerHTML = ""hello world"";&#xA;win.loadURL('file://' + __dirname + '/index.html'); // &lt;- here&#xA;</code></pre>&#xA;&#xA;<p>Check if the DOM is ready before manipulating it.</p>&#xA;",3959902,"",,"",,2017-09-10T15:21:27,"","",,3,,,
46167377,2,,46157653,2017-09-12T03:20:30,,2,,"<p><code>URL.createObjectURL</code> doesn't save your file on the disk, it only creates a symlink.  </p>&#xA;&#xA;<p>In case of Blobs stored in memory (like your case), the symlink points to the memory, and holds the file in memory for as long as the session that created the symlink is alive.</p>&#xA;&#xA;<p>In case of Files (gotten from user's input), the symlink points directly to the user's disk.</p>&#xA;&#xA;<p>So in your case you can't access its location, because it only exists in memory.  </p>&#xA;&#xA;<p>Now, you can always store the Blob on fileSystem, but I'm not an Electron ninja, so I'll let you check others' answers : <a href=""https://stackoverflow.com/questions/40137880/save-video-blob-to-filesystem-electron-node-js"">Save video blob to filesystem electron/node js</a></p>&#xA;",3702797,"",,"",,2017-09-12T03:20:30,"","",,0,,,
46177368,2,,46177039,2017-09-12T13:10:41,,2,,"<p>you can set the parameters by </p>&#xA;&#xA;<pre><code>electron main.js argv1 argv2&#xA;</code></pre>&#xA;&#xA;<p>and then access the parameters by</p>&#xA;&#xA;<pre><code>const = require('electron').remote;&#xA;console.log(remote.process.argv);&#xA;</code></pre>&#xA;&#xA;<p>and the output will be <code>[""argv1"", ""argv2""]</code></p>&#xA;",4585994,"",4585994,"",2017-09-12T13:19:32,2017-09-12T13:19:32,"","",,0,,,
46270185,2,,46268799,2017-09-18T00:51:27,,2,,"<p>Here is a snippet from my working code (it is using <a href=""https://github.com/scravy/node-macaddress"" rel=""nofollow noreferrer"">https://github.com/scravy/node-macaddress</a>):</p>&#xA;&#xA;<pre><code>    const macaddress = require('macaddress');&#xA;    macaddress.one((err, macAddress) =&gt; {&#xA;&#xA;        let hardwareStr = JSON.stringify({&#xA;            os: os.platform(),&#xA;            hostname: os.hostname(),&#xA;            mac: macAddress || 'n/a'&#xA;        });&#xA;&#xA;        let id = crypto.createHash('sha256')&#xA;                       .update(hardwareStr)&#xA;                       .digest('hex');&#xA;&#xA;        // now id is machine-specific identifier without any sensitive information&#xA;&#xA;    });&#xA;</code></pre>&#xA;&#xA;<p>Note: I cannot test it right now on Mac. </p>&#xA;",3563147,"",,"",,2017-09-18T00:51:27,"","",,0,,,
46150503,2,,46149702,2017-09-11T07:38:05,,3,,"<p>This is because of an <code>race condition</code>. &#xA;Electron docs:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Event: <strong>'did-finish-load'</strong></p>&#xA;  &#xA;  <p>Emitted when the navigation is done, i.e. the spinner of the tab has&#xA;  stopped spinning, and the onload event was dispatched.</p>&#xA;</blockquote>&#xA;&#xA;<p>You can try it with <code>setTimeout</code>:</p>&#xA;&#xA;<pre><code>win.webContents.on('did-finish-load', function () {&#xA;  setTimeout(() =&gt; {&#xA;    const input = 100;&#xA;    win.webContents.send('compute-factorial', input);&#xA;  }, 3000);&#xA;});&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>The main process does not know when the DOM is ready.&#xA;You can do something like this. </p>&#xA;&#xA;<p>Send your main process an ""dom-is-ready"" event.</p>&#xA;&#xA;<p><strong>inv.html</strong></p>&#xA;&#xA;<pre><code>ipc.send('dom-is-ready');&#xA;</code></pre>&#xA;&#xA;<p>Paste your <strong>'did-finish-load'</strong> code into <strong>'dom-is-ready'</strong>.</p>&#xA;&#xA;<p><strong>main.js</strong></p>&#xA;&#xA;<pre><code>function invisibleWindow() {&#xA;  const invisPath = 'file://' + path.join(__dirname, 'files/html/inv.html');&#xA;&#xA;  const win = new BrowserWindow({ &#xA;    width: 400, &#xA;    height: 400, &#xA;    show: false &#xA;  });&#xA;&#xA;  win.loadURL(invisPath);&#xA;&#xA;  win.webContents.on('did-finish-load', function () {&#xA;    win.show();&#xA;  });&#xA;&#xA;  ipcMain.on('dom-is-ready', function (event) {&#xA;    const input = 100;&#xA;    win.webContents.send('compute-factorial', input);&#xA;  });&#xA;&#xA;  ipcMain.on('factorial-computed', function (event, input, output) {&#xA;    const message = `The factorial of ${input} is ${output}`&#xA;    console.log(message);&#xA;  });&#xA;}&#xA;</code></pre>&#xA;",6429774,"",,"",,2017-09-11T07:38:05,"","",,0,,,
46173975,2,,46173919,2017-09-12T10:25:11,,3,,"<p>Object.create function gets the prototype as the first parameter and property descriptors as the second parameter.</p>&#xA;&#xA;<p>Your second parameter has wrong type. You need to pass an object, which contains objects with property attributes which are <code>configurable</code>, <code>writable</code>, <code>enumerable</code> and the <code>value</code> for it.</p>&#xA;&#xA;<p>See the example. In the second case when I pass an parameter which does not apply for the desired shape, it gives me the same error.</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>const pr = { name: 'Name' };&#xD;&#xA;const successChild = Object.create( pr, {&#xD;&#xA;  surname: {&#xD;&#xA;    value: 'Surname',&#xD;&#xA;    writable: true,&#xD;&#xA;    enumerable: true,&#xD;&#xA;    configurable: true&#xD;&#xA;  }&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;console.log(successChild);&#xD;&#xA;&#xD;&#xA;const errorChild = Object.create( pr, {&#xD;&#xA;  name: 'Error Name',&#xD;&#xA;  surname: 'Error Surname'&#xD;&#xA;});</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",5496973,"",5496973,"",2017-09-12T10:31:41,2017-09-12T10:31:41,"","",,6,,,
46174188,2,,46172471,2017-09-12T10:36:08,,3,,"<p><code>&lt;webview&gt;</code> clearly is the way to if you want to have a single window. It's also a lot better than an <code>&lt;iframe&gt;</code>, because it's securely isolated from your app and runs in a separate process.</p>&#xA;&#xA;<p>See the docs: <a href=""https://electron.atom.io/docs/api/webview-tag/"" rel=""nofollow noreferrer"">https://electron.atom.io/docs/api/webview-tag/</a></p>&#xA;&#xA;<p>If messenger.com doesn't load properly, this should be the problem you should be addressing (e.g. inspect console messages, network log). Follow your instincts, your first choice was the right one, now it's about making it work.</p>&#xA;",7479709,"",,"",,2017-09-12T10:36:08,"","",,2,,,
46181823,2,,46181658,2017-09-12T16:51:30,,3,,"<p>If <code>flexbox</code> is an option, you can just add <code>display: flex</code> to the <code>body</code> - see demo below:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>zoom = value =&gt; {&#xD;&#xA;  let size = value;&#xD;&#xA;  return {&#xD;&#xA;    up: () =&gt; {&#xD;&#xA;      size += 10;&#xD;&#xA;      holder.style.height = `${size}%`;&#xD;&#xA;      holder.style.width = `${size}%`;&#xD;&#xA;    },&#xD;&#xA;    down: () =&gt; {&#xD;&#xA;      size -= 10;&#xD;&#xA;      holder.style.height = `${size}%`;&#xD;&#xA;      holder.style.width = `${size}%`;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;zoom = zoom(100);&#xD;&#xA;&#xD;&#xA;document.onmousewheel = event =&gt; {&#xD;&#xA;  (event.wheelDelta &gt; 0) ? zoom.up(): zoom.down();&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {&#xD;&#xA;  background-color: rgb(33, 37, 43);&#xD;&#xA;  align-content: center;&#xD;&#xA;  overflow: hidden;&#xD;&#xA;  display: flex; /* ADDED */&#xD;&#xA;  height: 100vh; /* initial height*/&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#holder {&#xD;&#xA;  height: 100%;&#xD;&#xA;  width: 100%;&#xD;&#xA;  margin: auto;&#xD;&#xA;  background: url(""http://placehold.it/100x100"") no-repeat center/contain;&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""holder"" /&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;&#xA;<p>Another approach would be <em>positioning</em> - see below:</p>&#xA;&#xA;<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">&#xD;&#xA;<div class=""snippet-code"">&#xD;&#xA;<pre class=""snippet-code-js lang-js prettyprint-override""><code>zoom = value =&gt; {&#xD;&#xA;  let size = value;&#xD;&#xA;  return {&#xD;&#xA;    up: () =&gt; {&#xD;&#xA;      size += 10;&#xD;&#xA;      holder.style.height = `${size}%`;&#xD;&#xA;      holder.style.width = `${size}%`;&#xD;&#xA;    },&#xD;&#xA;    down: () =&gt; {&#xD;&#xA;      size -= 10;&#xD;&#xA;      holder.style.height = `${size}%`;&#xD;&#xA;      holder.style.width = `${size}%`;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;zoom = zoom(100);&#xD;&#xA;&#xD;&#xA;document.onmousewheel = event =&gt; {&#xD;&#xA;  (event.wheelDelta &gt; 0) ? zoom.up(): zoom.down();&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {&#xD;&#xA;  background-color: rgb(33, 37, 43);&#xD;&#xA;  align-content: center;&#xD;&#xA;  overflow: hidden;&#xD;&#xA;  height: 100vh; /* initial height*/&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#holder {&#xD;&#xA;  height: 100%;&#xD;&#xA;  width: 100%;&#xD;&#xA;  margin: auto;&#xD;&#xA;  background: url(""http://placehold.it/100x100"") no-repeat center/contain;&#xD;&#xA;  /* ADDED THESE */&#xD;&#xA;  position: absolute;&#xD;&#xA;  left: 50%;&#xD;&#xA;  top: 50%;&#xD;&#xA;  transform: translate(-50%, -50%);&#xD;&#xA;}</code></pre>&#xD;&#xA;<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""holder"" /&gt;</code></pre>&#xD;&#xA;</div>&#xD;&#xA;</div>&#xD;&#xA;</p>&#xA;",6231153,"",6231153,"",2017-09-12T16:58:36,2017-09-12T16:58:36,"","",,1,,,
46261591,2,,45027653,2017-09-17T07:10:32,,3,,"<p>If you want to use <strong>Node System Idle Time</strong> with your electron app , do the following steps:</p>&#xA;&#xA;<ol>&#xA;<li><p>Install node with this command:</p>&#xA;&#xA;<p><code>npm install --save @paulcbetts/system-idle-time</code></p>&#xA;&#xA;<p>Or if you are using <a href=""https://yarnpkg.com/en/"" rel=""nofollow noreferrer"">yarn</a>, then run:</p>&#xA;&#xA;<p><code>yarn add @paulcbetts/system-idle-time</code></p></li>&#xA;<li><p>Usage, In your Node JS application import it as:</p>&#xA;&#xA;<p><code>var systemIdleTime = require('@paulcbetts/system-idle-time');</code></p>&#xA;&#xA;<p>Then you can use it calling: <code>systemIdleTime.getIdleTime();</code></p>&#xA;&#xA;<p>The method <code>getIdleTime</code> will return the system idle time in milliseconds.</p></li>&#xA;<li><p>Usage in Electron , If you are building an Electron application you need to &#xA; re-build the addon using Electron's version of Node.js. &#xA; you can use <a href=""https://github.com/electron-userland/electron-builder"" rel=""nofollow noreferrer"">electron-builder</a> to build your app.</p>&#xA;&#xA;<p><code>npm install --save-dev electron-rebuild</code></p>&#xA;&#xA;<p>And then re-build the addon with:</p>&#xA;&#xA;<p><code>./node_modules/.bin/electron-rebuild</code></p></li>&#xA;</ol>&#xA;",8318726,"",3961903,"",2018-01-25T17:58:47,2018-01-25T17:58:47,"","",,0,,,
46141460,2,,46141419,2017-09-10T13:52:39,,4,,"<p>Since <code>electron</code> is <code>node</code> based, you can use <code>require</code> both in your main process JS file and in any JS file your project uses.</p>&#xA;&#xA;<pre><code>// main.js or something&#xA;let myModule = require(""./myModule"");&#xA;&#xA;// myModule.js&#xA;....&#xA;module.exports = function() {}; // or whatever you want to share with main.js&#xA;</code></pre>&#xA;",5660689,"",,"",,2017-09-10T13:52:39,"","",,0,,,
46109147,2,,46106910,2017-09-08T05:20:26,,5,,"<p>Below works great for me</p>&#xA;&#xA;<pre><code>from selenium import webdriver&#xA;&#xA;&#xA;options = webdriver.ChromeOptions()&#xA;options.binary_location = ""/Applications/Electron.app/Contents/MacOS/Electron""&#xA;&#xA;driver = webdriver.Chrome(chrome_options=options)&#xA;&#xA;driver.get(""http://www.google.com"")&#xA;&#xA;&#xA;driver.quit()&#xA;</code></pre>&#xA;",2830850,"",,"",,2017-09-08T05:20:26,"","",,2,,,
46146024,2,,46014140,2017-09-10T22:11:33,,7,,<p>Luckily the issue is solved with updating Electron to version <strong>1.8.0.</strong></p>&#xA;,3041365,"",,"",,2017-09-10T22:11:33,"","",,0,,,
