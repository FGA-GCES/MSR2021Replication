backgroundi'v been out of the web app develop realm for a few year and i'v recent come back into it. there are a few question i have about best secur practic for perform the follow tasks.i'm develop an electron (node.js) applic that will authent user credenti use my remot applic server. on my server i have a mysql databas which will store the usual assort of user account and applic data. additionally, the electron applic will have a local sqlite databas that i will period be updat to keep thing in sync with the remot mysql server. the sqlite databas is there to allow the applic to continu to function should the electron app be use in an offlin environ or in case the remot server goe down. i intend the applic to be onlin first with an offlin fallback.onc the user authent in the electron app, the applic will allow the user to do their work, and when the user is done, their work will be submit to a 3rd parti by post that work to the 3rd parti api. the first time a user log in, they will be ask to authent with the 3rd parti api use oauth2 and an api access token will be given by the 3rd parti upon success complet of this authent procedure. this token will be store in the remot mysql databas as well as the local sqlite database. here the kicker. there will be multipl machin run this electron applic so keep everyth in sync between all of these instal is a necess as the same user may be use ani one of these machin on a given day.th questionswith the background inform out of the way, here are my questions:if i hash and salt user password prior to store them in the database: is sha-512 still a secur hash, or is there anoth algorithm that is better?th 3rd parti api token is essenti the user password to access the 3rd parti api. i intend to treat it as such and give it the same treatment as i would a password. sinc hash is one-way and therefor not an option, how could i best encrypt the api token for storag in the database? my current thought is to use ae with a long random generat string that is store in my server applic configur file as the secret key. in this case, if the databas is breached, the secret key would not be includ with the data. to acquir the secret key the server itself would have to be broken into. is this the best way of go about this? upon applic startup or when manual triggered, the local electron app will queri my remot server to determin if there has been ani chang to the databas sinc the local sqlite databas was last updated. if there are chang and a local updat is needed, the remot server will send back a respons with all the thing that have chang (probabl in a json format) sinc the last update. the connect between the local applic and the remot server will be encrypt use tls (https). is this suffici to protect the data exchang (which contain password hash and the like) between the local applic and the remot server or should the json object be further encrypted? is this even a good way to go about sync data?i appreci ani and all help. i'm a bit out of touch with some of the current best practices, and this is my first actual product applic in a long while, so i want to make sure thing are done properly.
